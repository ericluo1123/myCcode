

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 27 11:13:23 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK3
  2044  1141                     __pidataBANK3:	
  2045                           
  2046                           ;initializer for __product
  2047  1141  3463               	retlw	99
  2048  1142  3402               	retlw	2
  2049  1143  3400               	retlw	0
  2050  1144  3400               	retlw	0
  2051  1145  3400               	retlw	0
  2052  1146  3400               	retlw	0
  2053  1147  3400               	retlw	0
  2054  1148  3400               	retlw	0
  2055  1149  3400               	retlw	0
  2056  114A  3400               	retlw	0
  2057  114B  3400               	retlw	0
  2058  114C  3400               	retlw	0
  2059  114D  34FF               	retlw	255
  2060  114E  34FF               	retlw	255
  2061  114F  34FF               	retlw	255
  2062  1150  3400               	retlw	0
  2063  1151  3400               	retlw	0
  2064  1152  3400               	retlw	0
  2065  1153  3400               	retlw	0
  2066  1154  3400               	retlw	0
  2067  1155  3400               	retlw	0
  2068  1156  3400               	retlw	0
  2069  1157  3400               	retlw	0
  2070  1158  3400               	retlw	0
  2071  1159  3400               	retlw	0
  2072  115A  3400               	retlw	0
  2073  115B  3400               	retlw	0
  2074  115C  3400               	retlw	0
  2075  115D  3400               	retlw	0
  2076  115E  3400               	retlw	0
  2077  115F  3400               	retlw	0
  2078  1160  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006D                     __pnvBANK0:	
  2193  006D                     _product:	
  2194  006D                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0015                     _TMR0	set	21
  2199  005F                     _GIE	set	95
  2200  005B                     _IOCIE	set	91
  2201  0058                     _IOCIF	set	88
  2202  005E                     _PEIE	set	94
  2203  0060                     _RA0	set	96
  2204  0063                     _RA3	set	99
  2205  0064                     _RA4	set	100
  2206  0066                     _RA6	set	102
  2207  0067                     _RA7	set	103
  2208  0068                     _RB0	set	104
  2209  0069                     _RB1	set	105
  2210  006A                     _RB2	set	106
  2211  006B                     _RB3	set	107
  2212  006C                     _RB4	set	108
  2213  006D                     _RB5	set	109
  2214  0070                     _RC0	set	112
  2215  0071                     _RC1	set	113
  2216  0072                     _RC2	set	114
  2217  0074                     _RC4	set	116
  2218  0075                     _RC5	set	117
  2219  0077                     _RC7	set	119
  2220  005D                     _TMR0IE	set	93
  2221  005A                     _TMR0IF	set	90
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0095                     _OPTION_REG	set	149
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  0097                     _WDTCON	set	151
  2232  04E9                     _GO_nDONE	set	1257
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2272  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2273                           
  2274                           ; Clear objects allocated to BANK0
  2275  001B  01E9               	clrf	__pbssBANK0& (0+127)
  2276  001C  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2277  001D  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2278  001E  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2279                           
  2280                           ; Clear objects allocated to BANK1
  2281  001F  30A0               	movlw	low __pbssBANK1
  2282  0020  0084               	movwf	4
  2283  0021  3000               	movlw	high __pbssBANK1
  2284  0022  0085               	movwf	5
  2285  0023  304F               	movlw	79
  2286  0024  319D  259D  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK2
  2289  0027  3020               	movlw	low __pbssBANK2
  2290  0028  0084               	movwf	4
  2291  0029  3001               	movlw	high __pbssBANK2
  2292  002A  0085               	movwf	5
  2293  002B  3044               	movlw	68
  2294  002C  319D  259D  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK3
  2297  002F  30A0               	movlw	low __pbssBANK3
  2298  0030  0084               	movwf	4
  2299  0031  3001               	movlw	high __pbssBANK3
  2300  0032  0085               	movwf	5
  2301  0033  3025               	movlw	37
  2302  0034  319D  259D  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK3
  2305  0037  3041               	movlw	low __pidataBANK3
  2306  0038  0084               	movwf	4
  2307  0039  3091               	movlw	(high __pidataBANK3)| (0+128)
  2308  003A  0085               	movwf	5
  2309  003B  30C5               	movlw	low __pdataBANK3
  2310  003C  0086               	movwf	6
  2311  003D  3001               	movlw	high __pdataBANK3
  2312  003E  0087               	movwf	7
  2313  003F  3020               	movlw	32
  2314  0040  319D  2597         	fcall	init_ram
  2315  0042                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0042                     __end_of__initialization:	
  2319  0042  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0043  0020               	movlb	0
  2321  0044  3188  2801         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03D8                     __pbitbssCOMMON:	
  2325  03D8                     _Receive_OK:	
  2326  03D8                     	ds	1
  2327  03D9                     _Transceive_OK:	
  2328  03D9                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0076                     __pbssCOMMON:	
  2332  0076                     _Dimmer:	
  2333  0076                     	ds	1
  2334  0077                     _DimmerLightsIntr:	
  2335  0077                     	ds	1
  2336  0078                     _DimmerLightsIntrIOC:	
  2337  0078                     	ds	1
  2338  0079                     _RFSW:	
  2339  0079                     	ds	1
  2340  007A                     _SPI0Buffer:	
  2341  007A                     	ds	1
  2342                           
  2343                           	psect	bssBANK0
  2344  0069                     __pbssBANK0:	
  2345  0069                     _DelayOff:	
  2346  0069                     	ds	1
  2347  006A                     _DimmerLights:	
  2348  006A                     	ds	1
  2349  006B                     _LED:	
  2350  006B                     	ds	1
  2351  006C                     _Sw:	
  2352  006C                     	ds	1
  2353                           
  2354                           	psect	bssBANK1
  2355  00A0                     __pbssBANK1:	
  2356  00A0                     _myMain:	
  2357  00A0                     	ds	18
  2358  00B2                     _Buz1:	
  2359  00B2                     	ds	12
  2360  00BE                     _RF1:	
  2361  00BE                     	ds	12
  2362  00CA                     _PF1:	
  2363  00CA                     	ds	8
  2364  00D2                     _RF_Count:	
  2365  00D2                     	ds	2
  2366  00D4                     _WDT:	
  2367  00D4                     	ds	2
  2368  00D6                     _CRC:	
  2369  00D6                     	ds	1
  2370  00D7                     _DimmerLights11:	
  2371  00D7                     	ds	1
  2372  00D8                     _RSSI:	
  2373  00D8                     	ds	1
  2374  00D9                     _Rx_Length:	
  2375  00D9                     	ds	1
  2376  00DA                     _Tx_Length:	
  2377  00DA                     	ds	1
  2378  00DB                     _r_address:	
  2379  00DB                     	ds	1
  2380  00DC                     _r_data:	
  2381  00DC                     	ds	1
  2382  00DD                     _s_data:	
  2383  00DD                     	ds	1
  2384  00DE                     _Temp1:	
  2385  00DE                     	ds	14
  2386  00EC                     _DlySw1:	
  2387  00EC                     	ds	2
  2388  00EE                     _RFSW1:	
  2389  00EE                     	ds	1
  2390                           
  2391                           	psect	bssBANK2
  2392  0120                     __pbssBANK2:	
  2393  0120                     _RF_Data:	
  2394  0120                     	ds	21
  2395  0135                     _Timer0:	
  2396  0135                     	ds	8
  2397  013D                     _DimmerLights1:	
  2398  013D                     	ds	15
  2399  014C                     _Sw1:	
  2400  014C                     	ds	9
  2401  0155                     _VarErrLED:	
  2402  0155                     	ds	4
  2403  0159                     _VarLED1:	
  2404  0159                     	ds	4
  2405  015D                     _VarLED2:	
  2406  015D                     	ds	4
  2407  0161                     _Dimmer1:	
  2408  0161                     	ds	3
  2409                           
  2410                           	psect	bssBANK3
  2411  01A0                     __pbssBANK3:	
  2412  01A0                     _Memory:	
  2413  01A0                     	ds	37
  2414                           
  2415                           	psect	dataBANK3
  2416  01C5                     __pdataBANK3:	
  2417  01C5                     __product:	
  2418  01C5                     	ds	32
  2419                           
  2420                           	psect	clrtext
  2421  1D9D                     clear_ram0:	
  2422                           ;	Called with FSR0 containing the base address, and
  2423                           ;	WREG with the size to clear
  2424                           
  2425  1D9D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2426  1D9E                     clrloop0:	
  2427  1D9E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2428  1D9F  3101               	addfsr 0,1
  2429  1DA0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2430  1DA1  2D9E               	goto	clrloop0	;have we reached the end yet?
  2431  1DA2  3400               	retlw	0	;all done for this memory range, return
  2432                           
  2433                           	psect	inittext
  2434  1D97                     init_ram:	
  2435  1D97  00FE               	movwf	126
  2436  1D98                     initloop:	
  2437  1D98  0012               	moviw fsr0++
  2438  1D99  001E               	movwi fsr1++
  2439  1D9A  0BFE               	decfsz	126,f
  2440  1D9B  2D98               	goto	initloop
  2441  1D9C  3400               	retlw	0
  2442                           
  2443                           	psect	cstackBANK2
  2444  0164                     __pcstackBANK2:	
  2445  0164                     ?_main:	
  2446  0164                     main@argc:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449                           
  2450                           ; 2 bytes @ 0x0
  2451  0164                     	ds	2
  2452  0166                     main@argv:	
  2453                           
  2454                           ; 2 bytes @ 0x2
  2455  0166                     	ds	2
  2456                           
  2457                           	psect	cstackCOMMON
  2458  0070                     __pcstackCOMMON:	
  2459  0070                     ?_Timeout_Counter:	
  2460  0070                     ?_set_TimeoutCleared:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_WriteByte:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_WriteCommand:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_ReadStatus:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_ReadByte:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_PowerRST:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_InitSetREG:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_InitPATable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_ClearTXFIFO:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_ClearRXFIFO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_FrequencyCabr:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_SIDLEMode:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_DlyOff_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_DlyOff_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_setTxData:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_setDimmerLights_Initialization:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_Dimmer_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setMemory_GO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setDimmerLights_Main:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setDimmerLights_ERROR:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_setLED_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_setLED_Main:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_Fosc_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_IO_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_TMR0_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_ADC_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_IOC_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_WDT_Set:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_IOC_ISR:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_TMR0_ISR:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_Flash_Memory_Write:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Flash_Memory_Modify:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_WDT_Clearing:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setTemp_Initialization:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_setTemp_Main:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setOverTemp_Exceptions:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setSw_Enable:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_setRF_Enable:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setPowerFault_Initialization:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_setPowerFault_Main:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_setPowerFault_Exceptions:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setRF_Initialization:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_setRF_Main:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_getRxData:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_setLog_Code:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_setControl_Lights_Table:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_setRFSW_Control:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setRFSW_AdjControl:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_setRF_DimmerValue:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setSw_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_setSw_Main:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_Sw_DimmerOnFunc:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Sw_DimmerAdjFunc:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Sw_DimmerOffFunc:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_myMain_Initialization:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_my_MainTime:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_Buzzer_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_Buzzer_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_TxData:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_RxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_PowerOnInitial:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_DelayOffPointSelect:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_DelayOff_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DelayOff_Main:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_DimmerIntrIOCPointSelect:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ??_DimmerIntrIOCPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_DimmerIntrPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ??_DimmerIntrPointSelect:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setDimmerLights_IntrControl:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_DimmerLightsPointSelect:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DimmerLights_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DimmerLights_Close:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DimmerLights_Main:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DimmerLights_Exceptions:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_AdjRF:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_LedPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_LED_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_LED_Main:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Mcu_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_ISR:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_setDimmerReClock:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Flash_Memory_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Flash_Memory_Main:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Flash_Memory_Unlock:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Flash_Memory_Erasing:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_WDT_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Temp_Initialization:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setTemp_Enable:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_getTemp_AD:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Temp_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_PowerFault_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_PowerFault_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getPowerFault_AD:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_RF_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setRF_Learn:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_RfSWPointSelect:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_TouchPower:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_SwPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Switch_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Switch_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_DelayTimejudge:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_getDimmerLights_StatusFlag:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_getPercentValue:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_Flash_Memory_Read:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_getPF_Safe:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_setPercentValue:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_getTemp_Safe:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x0
  2789  0070                     	ds	1
  2790  0071                     DimmerIntrIOCPointSelect@lights:	
  2791  0071                     DimmerIntrPointSelect@lights:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794                           
  2795                           ; 1 bytes @ 0x1
  2796  0071                     	ds	1
  2797  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2798  0072                     ??_setDimmerLights_IntrControl:	
  2799                           ; 0 bytes @ 0x2
  2800                           
  2801  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2802                           ; 0 bytes @ 0x2
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x2
  2806  0072                     	ds	1
  2807  0073                     ??_IOC_ISR:	
  2808  0073                     ??_setDimmerReClock:	
  2809                           ; 0 bytes @ 0x3
  2810                           
  2811                           
  2812                           ; 0 bytes @ 0x3
  2813  0073                     	ds	1
  2814  0074                     setDimmerLights_IntrControl@lights:	
  2815                           
  2816                           ; 1 bytes @ 0x4
  2817  0074                     	ds	1
  2818  0075                     ??_TMR0_ISR:	
  2819  0075                     ??_ISR:	
  2820                           ; 0 bytes @ 0x5
  2821                           
  2822                           
  2823                           ; 0 bytes @ 0x5
  2824  0075                     	ds	1
  2825                           
  2826                           	psect	cstackBANK0
  2827  0020                     __pcstackBANK0:	
  2828  0020                     ??_Timeout_Counter:	
  2829  0020                     ??_set_TimeoutCleared:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_CC2500_WriteByte:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_CC2500_ReadByte:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ?_DelayTime_1us:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_setTxData:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_Dimmer_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_getDimmerLights_StatusFlag:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setMemory_GO:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Fosc_Set:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_IO_Set:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_TMR0_Set:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_ADC_Set:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_IOC_Set:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_WDT_Set:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Read:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Write:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_WDT_Clearing:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setTemp_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_getPF_Safe:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_setRF_Enable:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setPowerFault_Initialization:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_setRF_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_myMain_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_Buzzer_Initialization:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_Buzzer_Main:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_DelayOffPointSelect:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_DimmerLightsPointSelect:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_LedPointSelect:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_Flash_Memory_Unlock:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_Flash_Memory_Erasing:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_WDT_Main:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_Temp_Initialization:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_setTemp_Enable:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_getTemp_Safe:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_PowerFault_Initialization:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_setRF_Learn:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_RfSWPointSelect:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_TouchPower:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_SwPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ?___bmul:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ?_getBuz_GO:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ?_getAD:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ?___awdiv:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958  0020                     ?___ftpack:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     getDimmerLights_StatusFlag@Status:	
  2962                           ; 3 bytes @ 0x0
  2963                           
  2964  0020                     getAD@adcon1:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0020                     setTemp_Enable@command:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0020                     getTemp_Safe@result:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0020                     getPF_Safe@i:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0020                     setRF_Learn@command:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0020                     setRF_Enable@command:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0020                     ___bmul@multiplicand:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0020                     DelayTime_1us@count:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0020                     ___awdiv@divisor:	
  2989                           ; 2 bytes @ 0x0
  2990                           
  2991  0020                     ___ftpack@arg:	
  2992                           ; 2 bytes @ 0x0
  2993                           
  2994                           
  2995                           ; 3 bytes @ 0x0
  2996  0020                     	ds	1
  2997  0021                     ??_Mcu_Initialization:	
  2998  0021                     ??_RF_Initialization:	
  2999                           ; 0 bytes @ 0x1
  3000                           
  3001  0021                     ??___bmul:	
  3002                           ; 0 bytes @ 0x1
  3003                           
  3004  0021                     CC2500_WriteByte@loop_a:	
  3005                           ; 0 bytes @ 0x1
  3006                           
  3007  0021                     CC2500_ReadByte@loop_b:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     DelayOffPointSelect@sw:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     DimmerLightsPointSelect@lights:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0021                     LedPointSelect@led:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0021                     Flash_Memory_Read@i:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0021                     Flash_Memory_Write@i:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0021                     RfSWPointSelect@sw:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0021                     SwPointSelect@sw:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031                           
  3032                           ; 1 bytes @ 0x1
  3033  0021                     	ds	1
  3034  0022                     ??_CC2500_WriteCommand:	
  3035  0022                     ??_CC2500_ReadStatus:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_DelayTime_1us:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_CC2500_WriteREG:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ??_DlyOff_Initialization:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setSw_Status:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ?_setRFSW_Status:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ?_setDimmerLights_Trigger:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ?_setDimmerLights_Switch:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ??_setDimmerLights_Initialization:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_TriggerERROR:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ?_setLED:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ??_setLED_Main:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ??_setSw_Enable:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     ??_getBuz_GO:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     ?_setDimmerLights_AdjGo:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0022                     ?_setDimmerLights_TriggerAdj:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0022                     CC2500_WriteREG@value:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0022                     DlyOff_Initialization@sw:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setDimmerLights_TriggerERROR@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setDimmerLights_Switch@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_AdjGo@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Trigger@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setDimmerLights_TriggerAdj@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     setLED@command:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     Flash_Memory_Read@address:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setMemory_GO@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     setRFSW_Status@command:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setSw_Enable@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setSw_Status@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     ___bmul@product:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     DelayTime_1us@i:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     ___awdiv@dividend:	
  3129                           ; 2 bytes @ 0x2
  3130                           
  3131                           
  3132                           ; 2 bytes @ 0x2
  3133  0022                     	ds	1
  3134  0023                     ??_CC2500_WriteREG:	
  3135  0023                     ??_setSw_Status:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     ??_setRFSW_Status:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setDimmerLights_Trigger:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setDimmerLights_Switch:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_TriggerERROR:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setLED:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_DelayOff_Initialization:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_DimmerLights_Close:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setDimmerLights_AdjGo:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_setDimmerLights_TriggerAdj:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ??_getAD:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     CC2500_WriteCommand@command:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     CC2500_ReadStatus@status_addr:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     setDimmerLights_Initialization@lights:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setDimmerLights_TriggerERROR@lights:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setDimmerLights_Switch@lights:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setDimmerLights_AdjGo@lights:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     setDimmerLights_Trigger@lights:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDimmerLights_TriggerAdj@lights:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setLED@led:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     getAD@adcon0:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     Flash_Memory_Read@ret:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setRFSW_Status@sw:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     setSw_Status@sw:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     ___bmul@multiplier:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210  0023                     ___ftpack@exp:	
  3211                           ; 1 bytes @ 0x3
  3212                           
  3213                           
  3214                           ; 1 bytes @ 0x3
  3215  0023                     	ds	1
  3216  0024                     ??_CC2500_ClearTXFIFO:	
  3217  0024                     ??_CC2500_ClearRXFIFO:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_CC2500_SIDLEMode:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_DelayTimejudge:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ?_setDimmerLights:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_setDimmerLights_ERROR:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_setLED_Initialization:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_Flash_Memory_Modify:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_setSw_Initialization:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_Sw_DimmerAdjFunc:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??_CC2500_TxData:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     ??_CC2500_RxData:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_DimmerLights_Initialization:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_getTemp_AD:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_getPowerFault_AD:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??___awdiv:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     CC2500_WriteREG@w_addr:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     setDimmerLights@status:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268  0024                     setLED_Initialization@led:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271  0024                     setLED_Main@led:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0024                     setSw_Initialization@sw:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0024                     Sw_DimmerAdjFunc@Idle:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280  0024                     ___ftpack@sign:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283  0024                     getBuz_GO@i:	
  3284                           ; 1 bytes @ 0x4
  3285                           
  3286  0024                     DelayTime_1us@j:	
  3287                           ; 2 bytes @ 0x4
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x4
  3291  0024                     	ds	1
  3292  0025                     ??_CC2500_InitSetREG:	
  3293  0025                     ??_CC2500_InitPATable:	
  3294                           ; 0 bytes @ 0x5
  3295                           
  3296  0025                     ??_setDimmerLights:	
  3297                           ; 0 bytes @ 0x5
  3298                           
  3299  0025                     ??___ftpack:	
  3300                           ; 0 bytes @ 0x5
  3301                           
  3302  0025                     ??_LED_Initialization:	
  3303                           ; 0 bytes @ 0x5
  3304                           
  3305  0025                     ??_LED_Main:	
  3306                           ; 0 bytes @ 0x5
  3307                           
  3308  0025                     ??_Switch_Initialization:	
  3309                           ; 0 bytes @ 0x5
  3310                           
  3311  0025                     CC2500_TxData@loop_e:	
  3312                           ; 0 bytes @ 0x5
  3313                           
  3314  0025                     CC2500_RxData@loop_f:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0025                     setDimmerLights_ERROR@lights:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320  0025                     Flash_Memory_Modify@i:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323  0025                     getTemp_AD@channel:	
  3324                           ; 1 bytes @ 0x5
  3325                           
  3326  0025                     getPowerFault_AD@channel:	
  3327                           ; 1 bytes @ 0x5
  3328                           
  3329  0025                     Sw_DimmerAdjFunc@sw:	
  3330                           ; 1 bytes @ 0x5
  3331                           
  3332  0025                     ___awdiv@counter:	
  3333                           ; 1 bytes @ 0x5
  3334                           
  3335                           
  3336                           ; 1 bytes @ 0x5
  3337  0025                     	ds	1
  3338  0026                     ??_CC2500_PowerRST:	
  3339  0026                     ??_CC2500_FrequencyCabr:	
  3340                           ; 0 bytes @ 0x6
  3341                           
  3342  0026                     ??_Flash_Memory_Main:	
  3343                           ; 0 bytes @ 0x6
  3344                           
  3345  0026                     CC2500_InitSetREG@temp1:	
  3346                           ; 0 bytes @ 0x6
  3347                           
  3348  0026                     CC2500_InitPATable@temp:	
  3349                           ; 1 bytes @ 0x6
  3350                           
  3351  0026                     DelayTimejudge@i:	
  3352                           ; 1 bytes @ 0x6
  3353                           
  3354  0026                     setDimmerLights@lights:	
  3355                           ; 1 bytes @ 0x6
  3356                           
  3357  0026                     ___awdiv@sign:	
  3358                           ; 1 bytes @ 0x6
  3359                           
  3360                           
  3361                           ; 1 bytes @ 0x6
  3362  0026                     	ds	1
  3363  0027                     CC2500_InitSetREG@temp2:	
  3364  0027                     CC2500_InitPATable@loop_d:	
  3365                           ; 1 bytes @ 0x7
  3366                           
  3367  0027                     DelayTimejudge@j:	
  3368                           ; 1 bytes @ 0x7
  3369                           
  3370  0027                     ___awdiv@quotient:	
  3371                           ; 1 bytes @ 0x7
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x7
  3375  0027                     	ds	1
  3376  0028                     ?___awtoft:	
  3377  0028                     CC2500_InitSetREG@loop_c:	
  3378                           ; 3 bytes @ 0x8
  3379                           
  3380  0028                     DelayTimejudge@k:	
  3381                           ; 1 bytes @ 0x8
  3382                           
  3383  0028                     ___awtoft@c:	
  3384                           ; 1 bytes @ 0x8
  3385                           
  3386                           
  3387                           ; 2 bytes @ 0x8
  3388  0028                     	ds	1
  3389  0029                     ?_setBuz:	
  3390  0029                     ??_CC2500_PowerOnInitial:	
  3391                           ; 0 bytes @ 0x9
  3392                           
  3393  0029                     DelayTimejudge@value:	
  3394                           ; 0 bytes @ 0x9
  3395                           
  3396  0029                     setBuz@time:	
  3397                           ; 1 bytes @ 0x9
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x9
  3401  0029                     	ds	1
  3402  002A                     ?_setDelayOff_GO:	
  3403  002A                     setDelayOff_GO@command:	
  3404                           ; 0 bytes @ 0xA
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0xA
  3408  002A                     	ds	1
  3409  002B                     ??_setBuz:	
  3410  002B                     ??___awtoft:	
  3411                           ; 0 bytes @ 0xB
  3412                           
  3413  002B                     setDelayOff_GO@value:	
  3414                           ; 0 bytes @ 0xB
  3415                           
  3416                           
  3417                           ; 1 bytes @ 0xB
  3418  002B                     	ds	1
  3419  002C                     ??_setDelayOff_GO:	
  3420  002C                     setBuz@count:	
  3421                           ; 0 bytes @ 0xC
  3422                           
  3423                           
  3424                           ; 1 bytes @ 0xC
  3425  002C                     	ds	1
  3426  002D                     ??_setLog_Code:	
  3427  002D                     ??_my_MainTime:	
  3428                           ; 0 bytes @ 0xD
  3429                           
  3430  002D                     ??_DimmerLights_Exceptions:	
  3431                           ; 0 bytes @ 0xD
  3432                           
  3433  002D                     DimmerLights_Exceptions@status:	
  3434                           ; 0 bytes @ 0xD
  3435                           
  3436  002D                     ___awtoft@sign:	
  3437                           ; 1 bytes @ 0xD
  3438                           
  3439                           
  3440                           ; 1 bytes @ 0xD
  3441  002D                     	ds	1
  3442  002E                     ??_setOverTemp_Exceptions:	
  3443  002E                     ??_setPowerFault_Exceptions:	
  3444                           ; 0 bytes @ 0xE
  3445                           
  3446  002E                     ?___ftdiv:	
  3447                           ; 0 bytes @ 0xE
  3448                           
  3449  002E                     ?___ftmul:	
  3450                           ; 3 bytes @ 0xE
  3451                           
  3452  002E                     setDelayOff_GO@sw:	
  3453                           ; 3 bytes @ 0xE
  3454                           
  3455  002E                     ___ftdiv@f2:	
  3456                           ; 1 bytes @ 0xE
  3457                           
  3458  002E                     ___ftmul@f1:	
  3459                           ; 3 bytes @ 0xE
  3460                           
  3461                           
  3462                           ; 3 bytes @ 0xE
  3463  002E                     	ds	1
  3464  002F                     setOverTemp_Exceptions@i:	
  3465  002F                     setPowerFault_Exceptions@i:	
  3466                           ; 1 bytes @ 0xF
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0xF
  3470  002F                     	ds	1
  3471  0030                     setOverTemp_Exceptions@command:	
  3472  0030                     setPowerFault_Exceptions@command:	
  3473                           ; 1 bytes @ 0x10
  3474                           
  3475                           
  3476                           ; 1 bytes @ 0x10
  3477  0030                     	ds	1
  3478  0031                     ??_setTemp_Main:	
  3479  0031                     ??_setPowerFault_Main:	
  3480                           ; 0 bytes @ 0x11
  3481                           
  3482  0031                     ___ftdiv@f1:	
  3483                           ; 0 bytes @ 0x11
  3484                           
  3485  0031                     ___ftmul@f2:	
  3486                           ; 3 bytes @ 0x11
  3487                           
  3488                           
  3489                           ; 3 bytes @ 0x11
  3490  0031                     	ds	1
  3491  0032                     ??_Temp_Main:	
  3492  0032                     ??_PowerFault_Main:	
  3493                           ; 0 bytes @ 0x12
  3494                           
  3495                           
  3496                           ; 0 bytes @ 0x12
  3497  0032                     	ds	2
  3498  0034                     ??___ftdiv:	
  3499  0034                     ??___ftmul:	
  3500                           ; 0 bytes @ 0x14
  3501                           
  3502                           
  3503                           ; 0 bytes @ 0x14
  3504  0034                     	ds	4
  3505  0038                     ___ftdiv@cntr:	
  3506  0038                     ___ftmul@exp:	
  3507                           ; 1 bytes @ 0x18
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0x18
  3511  0038                     	ds	1
  3512  0039                     ___ftdiv@f3:	
  3513  0039                     ___ftmul@f3_as_product:	
  3514                           ; 3 bytes @ 0x19
  3515                           
  3516                           
  3517                           ; 3 bytes @ 0x19
  3518  0039                     	ds	3
  3519  003C                     ___ftdiv@exp:	
  3520  003C                     ___ftmul@cntr:	
  3521                           ; 1 bytes @ 0x1C
  3522                           
  3523                           
  3524                           ; 1 bytes @ 0x1C
  3525  003C                     	ds	1
  3526  003D                     ___ftdiv@sign:	
  3527  003D                     ___ftmul@sign:	
  3528                           ; 1 bytes @ 0x1D
  3529                           
  3530                           
  3531                           ; 1 bytes @ 0x1D
  3532  003D                     	ds	1
  3533  003E                     ?___ftadd:	
  3534  003E                     ___ftadd@f1:	
  3535                           ; 3 bytes @ 0x1E
  3536                           
  3537                           
  3538                           ; 3 bytes @ 0x1E
  3539  003E                     	ds	3
  3540  0041                     ___ftadd@f2:	
  3541                           
  3542                           ; 3 bytes @ 0x21
  3543  0041                     	ds	3
  3544  0044                     ??___ftadd:	
  3545                           
  3546                           ; 0 bytes @ 0x24
  3547  0044                     	ds	4
  3548  0048                     ___ftadd@sign:	
  3549                           
  3550                           ; 1 bytes @ 0x28
  3551  0048                     	ds	1
  3552  0049                     ___ftadd@exp2:	
  3553                           
  3554                           ; 1 bytes @ 0x29
  3555  0049                     	ds	1
  3556  004A                     ___ftadd@exp1:	
  3557                           
  3558                           ; 1 bytes @ 0x2A
  3559  004A                     	ds	1
  3560  004B                     ?___fttol:	
  3561  004B                     ___fttol@f1:	
  3562                           ; 4 bytes @ 0x2B
  3563                           
  3564                           
  3565                           ; 3 bytes @ 0x2B
  3566  004B                     	ds	4
  3567  004F                     ??___fttol:	
  3568                           
  3569                           ; 0 bytes @ 0x2F
  3570  004F                     	ds	4
  3571  0053                     ___fttol@sign1:	
  3572                           
  3573                           ; 1 bytes @ 0x33
  3574  0053                     	ds	1
  3575  0054                     ___fttol@lval:	
  3576                           
  3577                           ; 4 bytes @ 0x34
  3578  0054                     	ds	4
  3579  0058                     ___fttol@exp1:	
  3580                           
  3581                           ; 1 bytes @ 0x38
  3582  0058                     	ds	1
  3583  0059                     ??_getPercentValue:	
  3584  0059                     ??_setPercentValue:	
  3585                           ; 0 bytes @ 0x39
  3586                           
  3587  0059                     setPercentValue@value:	
  3588                           ; 0 bytes @ 0x39
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x39
  3592  0059                     	ds	1
  3593  005A                     setPercentValue@i:	
  3594                           
  3595                           ; 3 bytes @ 0x3A
  3596  005A                     	ds	1
  3597  005B                     getPercentValue@value:	
  3598                           
  3599                           ; 1 bytes @ 0x3B
  3600  005B                     	ds	1
  3601  005C                     getPercentValue@i:	
  3602                           
  3603                           ; 3 bytes @ 0x3C
  3604  005C                     	ds	1
  3605  005D                     ?_setRF_DimmerLights:	
  3606  005D                     ??_Flash_Memory_Initialization:	
  3607                           ; 0 bytes @ 0x3D
  3608                           
  3609  005D                     setRF_DimmerLights@on:	
  3610                           ; 0 bytes @ 0x3D
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x3D
  3614  005D                     	ds	1
  3615  005E                     ??_setRF_DimmerLights:	
  3616  005E                     Flash_Memory_Initialization@i:	
  3617                           ; 0 bytes @ 0x3E
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x3E
  3621  005E                     	ds	1
  3622  005F                     ??_setDimmerLights_AdjRF:	
  3623                           
  3624                           ; 0 bytes @ 0x3F
  3625  005F                     	ds	1
  3626  0060                     setDimmerLights_AdjRF@lights:	
  3627  0060                     setRF_DimmerLights@status:	
  3628                           ; 1 bytes @ 0x40
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x40
  3632  0060                     	ds	1
  3633  0061                     ??_setRF_DimmerValue:	
  3634  0061                     setRF_DimmerLights@lights:	
  3635                           ; 0 bytes @ 0x41
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x41
  3639  0061                     	ds	1
  3640  0062                     ??_DlyOff_Main:	
  3641  0062                     ?_setDimmerLights_Adj:	
  3642                           ; 0 bytes @ 0x42
  3643                           
  3644  0062                     ??_setRFSW_Control:	
  3645                           ; 0 bytes @ 0x42
  3646                           
  3647  0062                     ??_Sw_DimmerOnFunc:	
  3648                           ; 0 bytes @ 0x42
  3649                           
  3650  0062                     ??_Sw_DimmerOffFunc:	
  3651                           ; 0 bytes @ 0x42
  3652                           
  3653  0062                     setDimmerLights_Adj@status:	
  3654                           ; 0 bytes @ 0x42
  3655                           
  3656  0062                     Sw_DimmerOnFunc@Idle:	
  3657                           ; 1 bytes @ 0x42
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x42
  3661  0062                     	ds	1
  3662  0063                     ??_setDimmerLights_Adj:	
  3663  0063                     setRFSW_Control@sw:	
  3664                           ; 0 bytes @ 0x43
  3665                           
  3666  0063                     setRF_DimmerValue@lights:	
  3667                           ; 1 bytes @ 0x43
  3668                           
  3669  0063                     Sw_DimmerOnFunc@sw:	
  3670                           ; 1 bytes @ 0x43
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x43
  3674  0063                     	ds	1
  3675  0064                     ??_setRFSW_AdjControl:	
  3676  0064                     DlyOff_Main@sw:	
  3677                           ; 0 bytes @ 0x44
  3678                           
  3679  0064                     setDimmerLights_Adj@lights:	
  3680                           ; 1 bytes @ 0x44
  3681                           
  3682  0064                     Sw_DimmerOffFunc@sw:	
  3683                           ; 1 bytes @ 0x44
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x44
  3687  0064                     	ds	1
  3688  0065                     ??_setDimmerLights_Main:	
  3689  0065                     ??_setSw_Main:	
  3690                           ; 0 bytes @ 0x45
  3691                           
  3692  0065                     ??_DelayOff_Main:	
  3693                           ; 0 bytes @ 0x45
  3694                           
  3695  0065                     setDimmerLights_Main@clear:	
  3696                           ; 0 bytes @ 0x45
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x45
  3700  0065                     	ds	1
  3701  0066                     setDimmerLights_Main@lights:	
  3702  0066                     setRFSW_AdjControl@sw:	
  3703                           ; 1 bytes @ 0x46
  3704                           
  3705                           
  3706                           ; 1 bytes @ 0x46
  3707  0066                     	ds	1
  3708  0067                     ??_setRF_Main:	
  3709  0067                     ??_getRxData:	
  3710                           ; 0 bytes @ 0x47
  3711                           
  3712  0067                     ??_setControl_Lights_Table:	
  3713                           ; 0 bytes @ 0x47
  3714                           
  3715  0067                     ??_DimmerLights_Main:	
  3716                           ; 0 bytes @ 0x47
  3717                           
  3718  0067                     _setSw_Main$5938:	
  3719                           ; 0 bytes @ 0x47
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x47
  3723  0067                     	ds	1
  3724  0068                     _setRF_Main$4902:	
  3725  0068                     setSw_Main@sw:	
  3726                           ; 1 bytes @ 0x48
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x48
  3730  0068                     	ds	1
  3731  0069                     ??_RF_Main:	
  3732  0069                     ??_Switch_Main:	
  3733                           ; 0 bytes @ 0x49
  3734                           
  3735  0069                     ??_main:	
  3736                           ; 0 bytes @ 0x49
  3737                           
  3738                           
  3739                           	psect	maintext
  3740  0801                     __pmaintext:	
  3741                           ; 0 bytes @ 0x49
  3742 ;;
  3743 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3744 ;;
  3745 ;; *************** function _main *****************
  3746 ;; Defined at:
  3747 ;;		line 7 in file "../src/main_B1.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  argc            2    0[BANK2 ] int 
  3750 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  2    0[BANK2 ] int 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 17F/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3762 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;Total ram usage:        4 bytes
  3767 ;; Hardware stack levels required when called:   15
  3768 ;; This function calls:
  3769 ;;		_Buzzer_Initialization
  3770 ;;		_Buzzer_Main
  3771 ;;		_CC2500_PowerOnInitial
  3772 ;;		_DelayOff_Initialization
  3773 ;;		_DelayOff_Main
  3774 ;;		_DimmerLights_Initialization
  3775 ;;		_DimmerLights_Main
  3776 ;;		_Flash_Memory_Initialization
  3777 ;;		_Flash_Memory_Main
  3778 ;;		_LED_Initialization
  3779 ;;		_LED_Main
  3780 ;;		_Mcu_Initialization
  3781 ;;		_PowerFault_Initialization
  3782 ;;		_PowerFault_Main
  3783 ;;		_RF_Initialization
  3784 ;;		_RF_Main
  3785 ;;		_Switch_Initialization
  3786 ;;		_Switch_Main
  3787 ;;		_Temp_Initialization
  3788 ;;		_Temp_Main
  3789 ;;		_WDT_Main
  3790 ;;		_getPowerFault_AD
  3791 ;;		_getTemp_AD
  3792 ;;		_myMain_Initialization
  3793 ;;		_my_MainTime
  3794 ;; This function is called by:
  3795 ;;		Startup code after reset
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _main
  3801  0801                     _main:	
  3802                           
  3803                           ;main_B1.c: 8: myMain_Initialization();
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3807  0801  319E  26F6  3188   	fcall	_myMain_Initialization
  3808                           
  3809                           ;main_B1.c: 9: Mcu_Initialization();
  3810  0804  319F  2777  3188   	fcall	_Mcu_Initialization
  3811                           
  3812                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3813  0807  3185  2501  3188   	fcall	_Flash_Memory_Initialization
  3814                           
  3815                           ;main_B1.c: 11: LED_Initialization();
  3816  080A  319E  266E  3188   	fcall	_LED_Initialization
  3817                           
  3818                           ;main_B1.c: 12: Buzzer_Initialization();
  3819  080D  319D  2554  3188   	fcall	_Buzzer_Initialization
  3820                           
  3821                           ;main_B1.c: 14: ;;
  3822                           ;main_B1.c: 15: Temp_Initialization();
  3823  0810  319D  2566  3188   	fcall	_Temp_Initialization
  3824                           
  3825                           ;main_B1.c: 16: ;;
  3826                           ;main_B1.c: 17: PowerFault_Initialization();
  3827  0813  319D  2557  3188   	fcall	_PowerFault_Initialization
  3828                           
  3829                           ;main_B1.c: 18: DelayOff_Initialization();
  3830  0816  319D  257C  3188   	fcall	_DelayOff_Initialization
  3831                           
  3832                           ;main_B1.c: 20: DimmerLights_Initialization();
  3833  0819  319E  2693  3188   	fcall	_DimmerLights_Initialization
  3834                           
  3835                           ;main_B1.c: 21: ;;
  3836                           ;main_B1.c: 22: ;;
  3837                           ;main_B1.c: 23: ;;
  3838                           ;main_B1.c: 24: Switch_Initialization();
  3839  081C  319D  25E2  3188   	fcall	_Switch_Initialization
  3840                           
  3841                           ;main_B1.c: 25: RF_Initialization();
  3842  081F  319D  255D  3188   	fcall	_RF_Initialization
  3843                           
  3844                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3845  0822  319F  27D6  3188   	fcall	_CC2500_PowerOnInitial
  3846  0825                     l9517:	
  3847                           ;main_B1.c: 27: ;;
  3848                           ;main_B1.c: 30: while (1) {
  3849                           
  3850                           
  3851                           ;main_B1.c: 32: if (myMain.PowerON) {
  3852  0825  0021               	movlb	1	; select bank1
  3853  0826  1C20               	btfss	_myMain^(0+128),0
  3854  0827  2830               	goto	l9521
  3855                           
  3856                           ;main_B1.c: 34: ;;
  3857                           ;main_B1.c: 38: ;;
  3858                           ;main_B1.c: 42: getTemp_AD(0x09);
  3859  0828  3009               	movlw	9
  3860  0829  3193  23FB  3188   	fcall	_getTemp_AD
  3861                           
  3862                           ;main_B1.c: 46: getPowerFault_AD(0x11);
  3863  082C  3011               	movlw	17
  3864  082D  3192  2232  3188   	fcall	_getPowerFault_AD
  3865  0830                     l9521:	
  3866                           
  3867                           ;main_B1.c: 61: }
  3868                           ;main_B1.c: 64: if (myMain.T0_Timerout) {
  3869  0830  0021               	movlb	1	; select bank1
  3870  0831  1CA0               	btfss	_myMain^(0+128),1
  3871  0832  2825               	goto	l9517
  3872                           
  3873                           ;main_B1.c: 65: myMain.T0_Timerout = 0;
  3874  0833  10A0               	bcf	_myMain^(0+128),1
  3875                           
  3876                           ;main_B1.c: 66: my_MainTime();
  3877  0834  3196  2676  3188   	fcall	_my_MainTime
  3878                           
  3879                           ;main_B1.c: 67: WDT_Main();
  3880  0837  319F  279B  3188   	fcall	_WDT_Main
  3881                           
  3882                           ;main_B1.c: 68: ;;
  3883                           ;main_B1.c: 69: ;;
  3884                           ;main_B1.c: 70: if (myMain.PowerON) {
  3885  083A  0021               	movlb	1	; select bank1
  3886  083B  1C20               	btfss	_myMain^(0+128),0
  3887  083C  2825               	goto	l9517
  3888                           
  3889                           ;main_B1.c: 71: Flash_Memory_Main();
  3890  083D  3191  2102  3188   	fcall	_Flash_Memory_Main
  3891                           
  3892                           ;main_B1.c: 73: LED_Main();
  3893  0840  319E  267A  3188   	fcall	_LED_Main
  3894                           
  3895                           ;main_B1.c: 74: Buzzer_Main();
  3896  0843  3196  26BC  3188   	fcall	_Buzzer_Main
  3897                           
  3898                           ;main_B1.c: 76: ;;
  3899                           ;main_B1.c: 77: Temp_Main();
  3900  0846  319D  2569  3188   	fcall	_Temp_Main
  3901                           
  3902                           ;main_B1.c: 78: ;;
  3903                           ;main_B1.c: 79: PowerFault_Main();
  3904  0849  319D  255A  3188   	fcall	_PowerFault_Main
  3905                           
  3906                           ;main_B1.c: 81: ;;
  3907                           ;main_B1.c: 82: DimmerLights_Main();
  3908  084C  319D  25A3  3188   	fcall	_DimmerLights_Main
  3909                           
  3910                           ;main_B1.c: 83: Switch_Main();
  3911  084F  3190  2066  3188   	fcall	_Switch_Main
  3912                           
  3913                           ;main_B1.c: 84: ;;
  3914                           ;main_B1.c: 85: ;;
  3915                           ;main_B1.c: 87: RF_Main();
  3916  0852  319D  2560  3188   	fcall	_RF_Main
  3917                           
  3918                           ;main_B1.c: 88: DelayOff_Main();
  3919  0855  319D  2580  3188   	fcall	_DelayOff_Main
  3920                           
  3921                           ;main_B1.c: 89: ;;
  3922  0858  2825               	goto	l9517
  3923  0859                     __end_of_main:	
  3924                           ;main_B1.c: 90: }
  3925                           ;main_B1.c: 91: }
  3926                           ;main_B1.c: 109: }
  3927                           ;main_B1.c: 110: return (0);
  3928                           ;	Return value of _main is never used
  3929                           
  3930                           
  3931                           	psect	text1
  3932  1676                     __ptext1:	
  3933 ;; *************** function _my_MainTime *****************
  3934 ;; Defined at:
  3935 ;;		line 127 in file "../src/main_B1.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    7
  3956 ;; This function calls:
  3957 ;;		_setBuz
  3958 ;;		_setRF_Enable
  3959 ;;		_setSw_Enable
  3960 ;;		_setTemp_Enable
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _my_MainTime
  3968  1676                     _my_MainTime:	
  3969                           
  3970                           ;main_B1.c: 129: if (myMain.PowerON == 0) {
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3974  1676  0021               	movlb	1	; select bank1
  3975  1677  1820               	btfsc	_myMain^(0+128),0
  3976  1678  2EA3               	goto	l9433
  3977                           
  3978                           ;main_B1.c: 130: myMain.PowerCount++;
  3979  1679  3001               	movlw	1
  3980  167A  07A1               	addwf	(_myMain^(0+128)+1),f
  3981  167B  3000               	movlw	0
  3982  167C  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3983                           
  3984                           ;main_B1.c: 131: if (myMain.PowerCount == 150)
  3985  167D  3001               	movlw	1
  3986  167E  3EA0               	addlw	_myMain& (0+255)
  3987  167F  0086               	movwf	6
  3988  1680  0187               	clrf	7
  3989  1681  3F40               	moviw [0]fsr1
  3990  1682  3A96               	xorlw	150
  3991  1683  1D03               	skipz
  3992  1684  2E87               	goto	u9765
  3993  1685  3F41               	moviw [1]fsr1
  3994  1686  3A00               	xorlw	0
  3995  1687                     u9765:	
  3996  1687  1D03               	skipz
  3997  1688  0008               	return
  3998                           
  3999                           ;main_B1.c: 132: {
  4000                           ;main_B1.c: 133: myMain.PowerCount = 0;
  4001  1689  01A1               	clrf	(_myMain^(0+128)+1)
  4002  168A  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4003                           
  4004                           ;main_B1.c: 134: myMain.PowerON = 1;
  4005  168B  1420               	bsf	_myMain^(0+128),0
  4006                           
  4007                           ;main_B1.c: 137: setTemp_Enable(1);
  4008  168C  3001               	movlw	1
  4009  168D  319D  25D1  3196   	fcall	_setTemp_Enable
  4010                           
  4011                           ;main_B1.c: 141: ;;
  4012                           ;main_B1.c: 147: setBuz(3, 50);
  4013  1690  3032               	movlw	50
  4014  1691  0020               	movlb	0	; select bank0
  4015  1692  00A9               	movwf	setBuz@time
  4016  1693  3000               	movlw	0
  4017  1694  00AA               	movwf	setBuz@time+1
  4018  1695  3003               	movlw	3
  4019  1696  3188  2059  3196   	fcall	_setBuz
  4020                           
  4021                           ;main_B1.c: 148: myMain.SelfTest = 1;
  4022  1699  0021               	movlb	1	; select bank1
  4023  169A  1720               	bsf	_myMain^(0+128),6
  4024                           
  4025                           ;main_B1.c: 150: setSw_Enable(1);
  4026  169B  3001               	movlw	1
  4027  169C  319E  26D8  3196   	fcall	_setSw_Enable
  4028                           
  4029                           ;main_B1.c: 153: setRF_Enable(1);
  4030  169F  3001               	movlw	1
  4031  16A0  319E  26BB         	fcall	_setRF_Enable
  4032                           
  4033                           ;main_B1.c: 157: }
  4034                           ;main_B1.c: 158: } else {
  4035  16A2  0008               	return
  4036  16A3                     l9433:	
  4037                           
  4038                           ;main_B1.c: 166: myMain.Count1++;
  4039  16A3  3001               	movlw	1
  4040  16A4  0021               	movlb	1	; select bank1
  4041  16A5  07A5               	addwf	(_myMain^(0+128)+5),f
  4042  16A6  3000               	movlw	0
  4043  16A7  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4044                           
  4045                           ;main_B1.c: 167: if (myMain.Count1 == 100)
  4046  16A8  3005               	movlw	5
  4047  16A9  3EA0               	addlw	_myMain& (0+255)
  4048  16AA  0086               	movwf	6
  4049  16AB  0187               	clrf	7
  4050  16AC  3F40               	moviw [0]fsr1
  4051  16AD  3A64               	xorlw	100
  4052  16AE  1D03               	skipz
  4053  16AF  2EB2               	goto	u9775
  4054  16B0  3F41               	moviw [1]fsr1
  4055  16B1  3A00               	xorlw	0
  4056  16B2                     u9775:	
  4057  16B2  1D03               	skipz
  4058  16B3  0008               	return
  4059                           
  4060                           ;main_B1.c: 168: {
  4061                           ;main_B1.c: 169: myMain.Count1 = 0;
  4062  16B4  01A5               	clrf	(_myMain^(0+128)+5)
  4063  16B5  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4064                           
  4065                           ;main_B1.c: 182: if (myMain.Flag) {
  4066  16B6  1DA0               	btfss	_myMain^(0+128),3
  4067  16B7  2EBA               	goto	l2607
  4068                           
  4069                           ;main_B1.c: 183: myMain.Flag = 0;
  4070  16B8  11A0               	bcf	_myMain^(0+128),3
  4071                           
  4072                           ;main_B1.c: 192: } else {
  4073  16B9  0008               	return
  4074  16BA                     l2607:	
  4075                           
  4076                           ;main_B1.c: 193: myMain.Flag = 1;
  4077  16BA  15A0               	bsf	_myMain^(0+128),3
  4078  16BB  0008               	return
  4079  16BC                     __end_of_my_MainTime:	
  4080                           
  4081                           	psect	text2
  4082  1DD1                     __ptext2:	
  4083 ;; *************** function _setTemp_Enable *****************
  4084 ;; Defined at:
  4085 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  command         1    wreg     unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  command         1    0[BANK0 ] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;		None               void
  4092 ;; Registers used:
  4093 ;;		wreg
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;Total ram usage:        1 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    5
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_my_MainTime
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           
  4114                           ;psect for function _setTemp_Enable
  4115  1DD1                     _setTemp_Enable:	
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _setTemp_Enable: [wreg]
  4119                           ;setTemp_Enable@command stored from wreg
  4120  1DD1  0020               	movlb	0	; select bank0
  4121  1DD2  00A0               	movwf	setTemp_Enable@command
  4122                           
  4123                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4124  1DD3  0820               	movf	setTemp_Enable@command,w
  4125  1DD4  0021               	movlb	1	; select bank1
  4126  1DD5  105E               	bcf	_Temp1^(0+128),0
  4127  1DD6  1D03               	skipz
  4128  1DD7  145E               	bsf	_Temp1^(0+128),0
  4129  1DD8  0008               	return
  4130  1DD9                     __end_of_setTemp_Enable:	
  4131                           
  4132                           	psect	text3
  4133  1EF6                     __ptext3:	
  4134 ;; *************** function _myMain_Initialization *****************
  4135 ;; Defined at:
  4136 ;;		line 115 in file "../src/main_B1.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		wreg, fsr1l, fsr1h
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;Total ram usage:        1 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    5
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _myMain_Initialization
  4166  1EF6                     _myMain_Initialization:	
  4167                           
  4168                           ;main_B1.c: 117: product = &_product;
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4172  1EF6  30C5               	movlw	__product& (0+255)
  4173  1EF7  0020               	movlb	0	; select bank0
  4174  1EF8  00A0               	movwf	??_myMain_Initialization
  4175  1EF9  0820               	movf	??_myMain_Initialization,w
  4176  1EFA  00ED               	movwf	_product
  4177                           
  4178                           ;main_B1.c: 118: product->Data[20] = 209;
  4179  1EFB  30D1               	movlw	209
  4180  1EFC  00A0               	movwf	??_myMain_Initialization
  4181  1EFD  086D               	movf	_product,w
  4182  1EFE  3E14               	addlw	20
  4183  1EFF  0086               	movwf	6
  4184  1F00  3001               	movlw	1	; select bank2/3
  4185  1F01  0087               	movwf	7
  4186  1F02  0820               	movf	??_myMain_Initialization,w
  4187  1F03  0081               	movwf	1
  4188  1F04  0008               	return
  4189  1F05                     __end_of_myMain_Initialization:	
  4190                           
  4191                           	psect	text4
  4192  13FB                     __ptext4:	
  4193 ;; *************** function _getTemp_AD *****************
  4194 ;; Defined at:
  4195 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  channel         1    wreg     unsigned char 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  channel         1    5[BANK0 ] unsigned char 
  4200 ;; Return value:  Size  Location     Type
  4201 ;;		None               void
  4202 ;; Registers used:
  4203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;Total ram usage:        2 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    7
  4216 ;; This function calls:
  4217 ;;		_getAD
  4218 ;; This function is called by:
  4219 ;;		_main
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           
  4224                           ;psect for function _getTemp_AD
  4225  13FB                     _getTemp_AD:	
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4229                           ;getTemp_AD@channel stored from wreg
  4230  13FB  0020               	movlb	0	; select bank0
  4231  13FC  00A5               	movwf	getTemp_AD@channel
  4232                           
  4233                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4234  13FD  0021               	movlb	1	; select bank1
  4235  13FE  1D5E               	btfss	_Temp1^(0+128),2
  4236  13FF  0008               	return
  4237                           
  4238                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4239  1400  30F0               	movlw	240
  4240  1401  0020               	movlb	0	; select bank0
  4241  1402  00A4               	movwf	??_getTemp_AD
  4242  1403  0824               	movf	??_getTemp_AD,w
  4243  1404  00A0               	movwf	getAD@adcon1
  4244  1405  0825               	movf	getTemp_AD@channel,w
  4245  1406  3191  2121  3193   	fcall	_getAD
  4246  1409  0020               	movlb	0	; select bank0
  4247  140A  0821               	movf	?_getAD+1,w
  4248  140B  0021               	movlb	1	; select bank1
  4249  140C  01EB               	clrf	((_Temp1+1)^(0+128)+12)
  4250  140D  07EB               	addwf	((_Temp1+1)^(0+128)+12),f
  4251  140E  0020               	movlb	0	; select bank0
  4252  140F  0820               	movf	?_getAD,w
  4253  1410  0021               	movlb	1	; select bank1
  4254  1411  01EA               	clrf	(_Temp1^(0+128)+12)
  4255  1412  07EA               	addwf	(_Temp1^(0+128)+12),f
  4256                           
  4257                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4258  1413  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4259  1414  0267               	subwf	((_Temp1+1)^(0+128)+8),w
  4260  1415  1D03               	skipz
  4261  1416  2C19               	goto	u9715
  4262  1417  086A               	movf	(_Temp1^(0+128)+12),w
  4263  1418  0266               	subwf	(_Temp1^(0+128)+8),w
  4264  1419                     u9715:	
  4265  1419  1803               	skipnc
  4266  141A  2C22               	goto	l9381
  4267                           
  4268                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4269  141B  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4270  141C  01E7               	clrf	((_Temp1+1)^(0+128)+8)
  4271  141D  07E7               	addwf	((_Temp1+1)^(0+128)+8),f
  4272  141E  086A               	movf	(_Temp1^(0+128)+12),w
  4273  141F  01E6               	clrf	(_Temp1^(0+128)+8)
  4274  1420  07E6               	addwf	(_Temp1^(0+128)+8),f
  4275                           
  4276                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4277  1421  0008               	return
  4278  1422                     l9381:	
  4279  1422  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4280  1423  0269               	subwf	((_Temp1+1)^(0+128)+10),w
  4281  1424  1D03               	skipz
  4282  1425  2C28               	goto	u9725
  4283  1426  086A               	movf	(_Temp1^(0+128)+12),w
  4284  1427  0268               	subwf	(_Temp1^(0+128)+10),w
  4285  1428                     u9725:	
  4286  1428  1803               	skipnc
  4287  1429  0008               	return
  4288                           
  4289                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4290  142A  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4291  142B  01E9               	clrf	((_Temp1+1)^(0+128)+10)
  4292  142C  07E9               	addwf	((_Temp1+1)^(0+128)+10),f
  4293  142D  086A               	movf	(_Temp1^(0+128)+12),w
  4294  142E  01E8               	clrf	(_Temp1^(0+128)+10)
  4295  142F  07E8               	addwf	(_Temp1^(0+128)+10),f
  4296  1430  0008               	return
  4297  1431                     __end_of_getTemp_AD:	
  4298                           
  4299                           	psect	text5
  4300  1232                     __ptext5:	
  4301 ;; *************** function _getPowerFault_AD *****************
  4302 ;; Defined at:
  4303 ;;		line 45 in file "../src/PowerFault_B1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  channel         1    wreg     unsigned char 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  channel         1    5[BANK0 ] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        2 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		_getAD
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _getPowerFault_AD
  4333  1232                     _getPowerFault_AD:	
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4337                           ;getPowerFault_AD@channel stored from wreg
  4338  1232  0020               	movlb	0	; select bank0
  4339  1233  00A5               	movwf	getPowerFault_AD@channel
  4340                           
  4341                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4342  1234  0021               	movlb	1	; select bank1
  4343  1235  1DCA               	btfss	_PF1^(0+128),3
  4344  1236  0008               	return
  4345                           
  4346                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4347  1237  30F0               	movlw	240
  4348  1238  0020               	movlb	0	; select bank0
  4349  1239  00A4               	movwf	??_getPowerFault_AD
  4350  123A  0824               	movf	??_getPowerFault_AD,w
  4351  123B  00A0               	movwf	getAD@adcon1
  4352  123C  0825               	movf	getPowerFault_AD@channel,w
  4353  123D  3191  2121  3192   	fcall	_getAD
  4354  1240  0020               	movlb	0	; select bank0
  4355  1241  0821               	movf	?_getAD+1,w
  4356  1242  0021               	movlb	1	; select bank1
  4357  1243  01D1               	clrf	((_PF1+1)^(0+128)+6)
  4358  1244  07D1               	addwf	((_PF1+1)^(0+128)+6),f
  4359  1245  0020               	movlb	0	; select bank0
  4360  1246  0820               	movf	?_getAD,w
  4361  1247  0021               	movlb	1	; select bank1
  4362  1248  01D0               	clrf	(_PF1^(0+128)+6)
  4363  1249  07D0               	addwf	(_PF1^(0+128)+6),f
  4364                           
  4365                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4366  124A  0851               	movf	((_PF1+1)^(0+128)+6),w
  4367  124B  024F               	subwf	((_PF1+1)^(0+128)+4),w
  4368  124C  1D03               	skipz
  4369  124D  2A50               	goto	u9745
  4370  124E  0850               	movf	(_PF1^(0+128)+6),w
  4371  124F  024E               	subwf	(_PF1^(0+128)+4),w
  4372  1250                     u9745:	
  4373  1250  1803               	skipnc
  4374  1251  0008               	return
  4375                           
  4376                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4377  1252  0851               	movf	((_PF1+1)^(0+128)+6),w
  4378  1253  01CF               	clrf	((_PF1+1)^(0+128)+4)
  4379  1254  07CF               	addwf	((_PF1+1)^(0+128)+4),f
  4380  1255  0850               	movf	(_PF1^(0+128)+6),w
  4381  1256  01CE               	clrf	(_PF1^(0+128)+4)
  4382  1257  07CE               	addwf	(_PF1^(0+128)+4),f
  4383  1258  0008               	return
  4384  1259                     __end_of_getPowerFault_AD:	
  4385                           
  4386                           	psect	text6
  4387  1121                     __ptext6:	
  4388 ;; *************** function _getAD *****************
  4389 ;; Defined at:
  4390 ;;		line 350 in file "../src/MCU_B1.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  adcon0          1    wreg     unsigned char 
  4393 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  2    0[BANK0 ] int 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        4 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    6
  4412 ;; This function calls:
  4413 ;;		_Timeout_Counter
  4414 ;;		_set_TimeoutCleared
  4415 ;; This function is called by:
  4416 ;;		_getTemp_AD
  4417 ;;		_getPowerFault_AD
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _getAD
  4423  1121                     _getAD:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4427                           ;getAD@adcon0 stored from wreg
  4428  1121  0020               	movlb	0	; select bank0
  4429  1122  00A3               	movwf	getAD@adcon0
  4430                           
  4431                           ;MCU_B1.c: 351: ADCON0 = adcon0;
  4432  1123  0823               	movf	getAD@adcon0,w
  4433  1124  0021               	movlb	1	; select bank1
  4434  1125  009D               	movwf	29	;volatile
  4435                           
  4436                           ;MCU_B1.c: 352: ADCON1 = adcon1;
  4437  1126  0020               	movlb	0	; select bank0
  4438  1127  0820               	movf	getAD@adcon1,w
  4439  1128  0021               	movlb	1	; select bank1
  4440  1129  009E               	movwf	30	;volatile
  4441                           
  4442                           ;MCU_B1.c: 353: GO_nDONE = 1;
  4443  112A  149D               	bsf	29,1	;volatile
  4444                           
  4445                           ;MCU_B1.c: 354: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4446  112B  292F               	goto	l8867
  4447  112C                     l8865:	
  4448                           
  4449                           ;MCU_B1.c: 355: Timeout_Counter();
  4450  112C  319F  27C1  3191   	fcall	_Timeout_Counter
  4451  112F                     l8867:	
  4452  112F  0021               	movlb	1	; select bank1
  4453  1130  1C9D               	btfss	29,1	;volatile
  4454  1131  2934               	goto	l8871
  4455  1132  1D2F               	btfss	(_myMain^(0+128)+15),2
  4456  1133  292C               	goto	l8865
  4457  1134                     l8871:	
  4458                           
  4459                           ;MCU_B1.c: 356: };
  4460                           ;MCU_B1.c: 357: set_TimeoutCleared();
  4461  1134  319D  258C         	fcall	_set_TimeoutCleared
  4462                           
  4463                           ;MCU_B1.c: 358: return ((ADRESH*256)+ADRESL);
  4464  1136  0021               	movlb	1	; select bank1
  4465  1137  081C               	movf	28,w	;volatile
  4466  1138  0020               	movlb	0	; select bank0
  4467  1139  01A1               	clrf	?_getAD+1
  4468  113A  07A1               	addwf	?_getAD+1,f
  4469  113B  0021               	movlb	1	; select bank1
  4470  113C  081B               	movf	27,w	;volatile
  4471  113D  0020               	movlb	0	; select bank0
  4472  113E  01A0               	clrf	?_getAD
  4473  113F  07A0               	addwf	?_getAD,f
  4474  1140  0008               	return
  4475  1141                     __end_of_getAD:	
  4476                           
  4477                           	psect	text7
  4478  1F9B                     __ptext7:	
  4479 ;; *************** function _WDT_Main *****************
  4480 ;; Defined at:
  4481 ;;		line 909 in file "../src/MCU_B1.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;		None
  4486 ;; Return value:  Size  Location     Type
  4487 ;;		None               void
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, pclath, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;Total ram usage:        1 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    6
  4502 ;; This function calls:
  4503 ;;		_WDT_Clearing
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _WDT_Main
  4511  1F9B                     _WDT_Main:	
  4512                           
  4513                           ;MCU_B1.c: 910: if (WDT.Enable == 1) {
  4514                           
  4515                           ;incstack = 0
  4516                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4517  1F9B  0021               	movlb	1	; select bank1
  4518  1F9C  1C54               	btfss	_WDT^(0+128),0
  4519  1F9D  0008               	return
  4520                           
  4521                           ;MCU_B1.c: 911: if (WDT.Count-- > 0) {
  4522  1F9E  3001               	movlw	1
  4523  1F9F  02D5               	subwf	(_WDT^(0+128)+1),f
  4524  1FA0  0855               	movf	(_WDT^(0+128)+1),w
  4525  1FA1  3AFF               	xorlw	255
  4526  1FA2  1903               	skipnz
  4527  1FA3  0008               	return
  4528                           
  4529                           ;MCU_B1.c: 912: WDT.Count = 10;
  4530  1FA4  300A               	movlw	10
  4531  1FA5  0020               	movlb	0	; select bank0
  4532  1FA6  00A0               	movwf	??_WDT_Main
  4533  1FA7  0820               	movf	??_WDT_Main,w
  4534  1FA8  0021               	movlb	1	; select bank1
  4535  1FA9  00D5               	movwf	(_WDT^(0+128)+1)
  4536                           
  4537                           ;MCU_B1.c: 913: WDT_Clearing();
  4538  1FAA  3180  2002         	fcall	_WDT_Clearing
  4539  1FAC  0008               	return
  4540  1FAD                     __end_of_WDT_Main:	
  4541                           
  4542                           	psect	text8
  4543  0002                     __ptext8:	
  4544 ;; *************** function _WDT_Clearing *****************
  4545 ;; Defined at:
  4546 ;;		line 919 in file "../src/MCU_B1.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;		None               void
  4553 ;; Registers used:
  4554 ;;		None
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;Total ram usage:        0 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    5
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		_WDT_Main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _WDT_Clearing
  4576  0002                     _WDT_Clearing:	
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _WDT_Clearing: []
  4580  0002  0064               	clrwdt	;# 
  4581  0003  0008               	return
  4582  0004                     __end_of_WDT_Clearing:	
  4583                           
  4584                           	psect	text9
  4585  1D69                     __ptext9:	
  4586 ;; *************** function _Temp_Main *****************
  4587 ;; Defined at:
  4588 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;		None               void
  4595 ;; Registers used:
  4596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;Total ram usage:        0 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:   11
  4609 ;; This function calls:
  4610 ;;		_setTemp_Main
  4611 ;; This function is called by:
  4612 ;;		_main
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _Temp_Main
  4618  1D69                     _Temp_Main:	
  4619                           
  4620                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4624  1D69  318E  2668         	fcall	_setTemp_Main
  4625  1D6B  0008               	return
  4626  1D6C                     __end_of_Temp_Main:	
  4627                           
  4628                           	psect	text10
  4629  0E68                     __ptext10:	
  4630 ;; *************** function _setTemp_Main *****************
  4631 ;; Defined at:
  4632 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;		None               void
  4639 ;; Registers used:
  4640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4650 ;;Total ram usage:        1 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:   10
  4653 ;; This function calls:
  4654 ;;		_getPF_Safe
  4655 ;;		_setOverTemp_Exceptions
  4656 ;; This function is called by:
  4657 ;;		_Temp_Main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           
  4662                           ;psect for function _setTemp_Main
  4663  0E68                     _setTemp_Main:	
  4664                           
  4665                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4666                           
  4667                           ;incstack = 0
  4668                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4669  0E68  0021               	movlb	1	; select bank1
  4670  0E69  1C5E               	btfss	_Temp1^(0+128),0
  4671  0E6A  0008               	return
  4672                           
  4673                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4674  0E6B  195E               	btfsc	_Temp1^(0+128),2
  4675  0E6C  2E8A               	goto	l8923
  4676                           
  4677                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4678  0E6D  3001               	movlw	1
  4679  0E6E  07DF               	addwf	(_Temp1^(0+128)+1),f
  4680  0E6F  3000               	movlw	0
  4681  0E70  3DE0               	addwfc	((_Temp1+1)^(0+128)+1),f
  4682                           
  4683                           ;OverTemperature_B1.c: 62: {
  4684                           ;OverTemperature_B1.c: 63: if (1 == 1 && getPF_Safe() == 1) {
  4685  0E71  3001               	movlw	1
  4686  0E72  0260               	subwf	((_Temp1+1)^(0+128)+1),w
  4687  0E73  30F4               	movlw	244
  4688  0E74  1903               	skipnz
  4689  0E75  025F               	subwf	(_Temp1^(0+128)+1),w
  4690  0E76  1C03               	skipc
  4691  0E77  0008               	return
  4692  0E78  319D  25C9  318E   	fcall	_getPF_Safe
  4693  0E7B  3A01               	xorlw	1
  4694  0E7C  1D03               	skipz
  4695  0E7D  2E84               	goto	l8921
  4696                           
  4697                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4698  0E7E  0021               	movlb	1	; select bank1
  4699  0E7F  01DF               	clrf	(_Temp1^(0+128)+1)
  4700  0E80  01E0               	clrf	((_Temp1+1)^(0+128)+1)
  4701                           
  4702                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4703  0E81  155E               	bsf	_Temp1^(0+128),2
  4704                           
  4705                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4706  0E82  125E               	bcf	_Temp1^(0+128),4
  4707                           
  4708                           ;OverTemperature_B1.c: 68: } else {
  4709  0E83  0008               	return
  4710  0E84                     l8921:	
  4711                           
  4712                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4713  0E84  30E8               	movlw	232
  4714  0E85  0021               	movlb	1	; select bank1
  4715  0E86  00DF               	movwf	(_Temp1^(0+128)+1)
  4716  0E87  3003               	movlw	3
  4717  0E88  00E0               	movwf	(_Temp1^(0+128)+2)
  4718                           
  4719                           ;OverTemperature_B1.c: 70: }
  4720                           ;OverTemperature_B1.c: 71: }
  4721                           ;OverTemperature_B1.c: 72: } else {
  4722  0E89  0008               	return
  4723  0E8A                     l8923:	
  4724                           
  4725                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4726  0E8A  3001               	movlw	1
  4727  0E8B  07DF               	addwf	(_Temp1^(0+128)+1),f
  4728  0E8C  3000               	movlw	0
  4729  0E8D  3DE0               	addwfc	((_Temp1+1)^(0+128)+1),f
  4730                           
  4731                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4732  0E8E  3000               	movlw	0
  4733  0E8F  0260               	subwf	((_Temp1+1)^(0+128)+1),w
  4734  0E90  3004               	movlw	4
  4735  0E91  1903               	skipnz
  4736  0E92  025F               	subwf	(_Temp1^(0+128)+1),w
  4737  0E93  1C03               	skipc
  4738  0E94  0008               	return
  4739                           
  4740                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4741  0E95  01DF               	clrf	(_Temp1^(0+128)+1)
  4742  0E96  01E0               	clrf	((_Temp1+1)^(0+128)+1)
  4743                           
  4744                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4745  0E97  115E               	bcf	_Temp1^(0+128),2
  4746                           
  4747                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4748  0E98  0869               	movf	((_Temp1+1)^(0+128)+10),w
  4749  0E99  01E5               	clrf	((_Temp1+1)^(0+128)+6)
  4750  0E9A  07E5               	addwf	((_Temp1+1)^(0+128)+6),f
  4751  0E9B  0868               	movf	(_Temp1^(0+128)+10),w
  4752  0E9C  01E4               	clrf	(_Temp1^(0+128)+6)
  4753  0E9D  07E4               	addwf	(_Temp1^(0+128)+6),f
  4754                           
  4755                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4756  0E9E  1CDE               	btfss	_Temp1^(0+128),1
  4757  0E9F  2EB7               	goto	l8945
  4758                           
  4759                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4760  0EA0  3002               	movlw	2
  4761  0EA1  0265               	subwf	((_Temp1+1)^(0+128)+6),w
  4762  0EA2  3058               	movlw	88
  4763  0EA3  1903               	skipnz
  4764  0EA4  0264               	subwf	(_Temp1^(0+128)+6),w
  4765  0EA5  1C03               	skipc
  4766  0EA6  2ECE               	goto	l8955
  4767                           
  4768                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4769  0EA7  3001               	movlw	1
  4770  0EA8  0020               	movlb	0	; select bank0
  4771  0EA9  00B1               	movwf	??_setTemp_Main
  4772  0EAA  0831               	movf	??_setTemp_Main,w
  4773  0EAB  0021               	movlb	1	; select bank1
  4774  0EAC  07E1               	addwf	(_Temp1^(0+128)+3),f
  4775                           
  4776                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4777  0EAD  3003               	movlw	3
  4778  0EAE  0261               	subwf	(_Temp1^(0+128)+3),w
  4779  0EAF  1C03               	skipc
  4780  0EB0  2ED0               	goto	l8957
  4781                           
  4782                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4783  0EB1  01E1               	clrf	(_Temp1^(0+128)+3)
  4784                           
  4785                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4786  0EB2  3000               	movlw	0
  4787  0EB3  3196  2630  318E   	fcall	_setOverTemp_Exceptions
  4788                           
  4789                           ;OverTemperature_B1.c: 84: }
  4790                           ;OverTemperature_B1.c: 85: } else {
  4791  0EB6  2ED0               	goto	l8957
  4792  0EB7                     l8945:	
  4793                           ;OverTemperature_B1.c: 87: }
  4794                           ;OverTemperature_B1.c: 88: } else {
  4795                           
  4796                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4797                           
  4798                           
  4799                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4800  0EB7  3002               	movlw	2
  4801  0EB8  0265               	subwf	((_Temp1+1)^(0+128)+6),w
  4802  0EB9  3027               	movlw	39
  4803  0EBA  1903               	skipnz
  4804  0EBB  0264               	subwf	(_Temp1^(0+128)+6),w
  4805  0EBC  1803               	skipnc
  4806  0EBD  2ECE               	goto	l8955
  4807                           
  4808                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4809  0EBE  3001               	movlw	1
  4810  0EBF  0020               	movlb	0	; select bank0
  4811  0EC0  00B1               	movwf	??_setTemp_Main
  4812  0EC1  0831               	movf	??_setTemp_Main,w
  4813  0EC2  0021               	movlb	1	; select bank1
  4814  0EC3  07E1               	addwf	(_Temp1^(0+128)+3),f
  4815                           
  4816                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4817  0EC4  3003               	movlw	3
  4818  0EC5  0261               	subwf	(_Temp1^(0+128)+3),w
  4819  0EC6  1C03               	skipc
  4820  0EC7  2ED0               	goto	l8957
  4821                           
  4822                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4823  0EC8  01E1               	clrf	(_Temp1^(0+128)+3)
  4824                           
  4825                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4826  0EC9  3001               	movlw	1
  4827  0ECA  3196  2630  318E   	fcall	_setOverTemp_Exceptions
  4828                           
  4829                           ;OverTemperature_B1.c: 94: }
  4830                           ;OverTemperature_B1.c: 95: } else {
  4831  0ECD  2ED0               	goto	l8957
  4832  0ECE                     l8955:	
  4833                           
  4834                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4835  0ECE  0021               	movlb	1	; select bank1
  4836  0ECF  01E1               	clrf	(_Temp1^(0+128)+3)
  4837  0ED0                     l8957:	
  4838                           
  4839                           ;OverTemperature_B1.c: 97: }
  4840                           ;OverTemperature_B1.c: 98: }
  4841                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4842  0ED0  0021               	movlb	1	; select bank1
  4843  0ED1  1CDE               	btfss	_Temp1^(0+128),1
  4844                           
  4845                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4846  0ED2  165E               	bsf	_Temp1^(0+128),4
  4847                           
  4848                           ;OverTemperature_B1.c: 101: }
  4849                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4850  0ED3  0865               	movf	((_Temp1+1)^(0+128)+6),w
  4851  0ED4  0020               	movlb	0	; select bank0
  4852  0ED5  00B1               	movwf	??_setTemp_Main
  4853  0ED6  086D               	movf	_product,w
  4854  0ED7  3E18               	addlw	24
  4855  0ED8  0086               	movwf	6
  4856  0ED9  3001               	movlw	1	; select bank2/3
  4857  0EDA  0087               	movwf	7
  4858  0EDB  0831               	movf	??_setTemp_Main,w
  4859  0EDC  0081               	movwf	1
  4860                           
  4861                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4862  0EDD  0021               	movlb	1	; select bank1
  4863  0EDE  0864               	movf	(_Temp1^(0+128)+6),w
  4864  0EDF  0020               	movlb	0	; select bank0
  4865  0EE0  00B1               	movwf	??_setTemp_Main
  4866  0EE1  086D               	movf	_product,w
  4867  0EE2  3E19               	addlw	25
  4868  0EE3  0086               	movwf	6
  4869  0EE4  3001               	movlw	1	; select bank2/3
  4870  0EE5  0087               	movwf	7
  4871  0EE6  0831               	movf	??_setTemp_Main,w
  4872  0EE7  0081               	movwf	1
  4873                           
  4874                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4875  0EE8  0021               	movlb	1	; select bank1
  4876  0EE9  01E6               	clrf	(_Temp1^(0+128)+8)
  4877  0EEA  01E7               	clrf	((_Temp1+1)^(0+128)+8)
  4878                           
  4879                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4880  0EEB  01E8               	clrf	(_Temp1^(0+128)+10)
  4881  0EEC  01E9               	clrf	((_Temp1+1)^(0+128)+10)
  4882  0EED  0008               	return
  4883  0EEE                     __end_of_setTemp_Main:	
  4884                           
  4885                           	psect	text11
  4886  1630                     __ptext11:	
  4887 ;; *************** function _setOverTemp_Exceptions *****************
  4888 ;; Defined at:
  4889 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  command         1    wreg     unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  command         1   16[BANK0 ] unsigned char 
  4894 ;;  i               1   15[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    9
  4911 ;; This function calls:
  4912 ;;		_DimmerLights_Exceptions
  4913 ;;		_setBuz
  4914 ;;		_setLED
  4915 ;;		_setRF_Enable
  4916 ;;		_setSw_Enable
  4917 ;; This function is called by:
  4918 ;;		_setTemp_Main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _setOverTemp_Exceptions
  4924  1630                     _setOverTemp_Exceptions:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4928                           ;setOverTemp_Exceptions@command stored from wreg
  4929  1630  0020               	movlb	0	; select bank0
  4930  1631  00B0               	movwf	setOverTemp_Exceptions@command
  4931                           
  4932                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4933  1632  0830               	movf	setOverTemp_Exceptions@command,w
  4934  1633  3A01               	xorlw	1
  4935  1634  3000               	movlw	0
  4936  1635  1D03               	skipz
  4937  1636  3001               	movlw	1
  4938  1637  00AE               	movwf	??_setOverTemp_Exceptions
  4939  1638  082E               	movf	??_setOverTemp_Exceptions,w
  4940  1639  00AF               	movwf	setOverTemp_Exceptions@i
  4941                           
  4942                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4943  163A  0830               	movf	setOverTemp_Exceptions@command,w
  4944  163B  0021               	movlb	1	; select bank1
  4945  163C  10DE               	bcf	_Temp1^(0+128),1
  4946  163D  1D03               	skipz
  4947  163E  14DE               	bsf	_Temp1^(0+128),1
  4948                           
  4949                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4950  163F  0020               	movlb	0	; select bank0
  4951  1640  082F               	movf	setOverTemp_Exceptions@i,w
  4952  1641  0021               	movlb	1	; select bank1
  4953  1642  125E               	bcf	_Temp1^(0+128),4
  4954  1643  1D03               	skipz
  4955  1644  165E               	bsf	_Temp1^(0+128),4
  4956                           
  4957                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4958  1645  0020               	movlb	0	; select bank0
  4959  1646  0830               	movf	setOverTemp_Exceptions@command,w
  4960  1647  3A01               	xorlw	1
  4961  1648  1D03               	skipz
  4962  1649  2E56               	goto	l8511
  4963                           
  4964                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4965  164A  3001               	movlw	1
  4966  164B  3195  2522  3196   	fcall	_DimmerLights_Exceptions
  4967                           
  4968                           ;OverTemperature_B1.c: 121: setLED(2, 1);
  4969  164E  0020               	movlb	0	; select bank0
  4970  164F  01A2               	clrf	setLED@command
  4971  1650  0AA2               	incf	setLED@command,f
  4972  1651  3002               	movlw	2
  4973  1652  3189  2168  3196   	fcall	_setLED
  4974                           
  4975                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  4976  1655  2E62               	goto	l8515
  4977  1656                     l8511:	
  4978  1656  0020               	movlb	0	; select bank0
  4979  1657  08B0               	movf	setOverTemp_Exceptions@command,f
  4980  1658  1D03               	skipz
  4981  1659  2E62               	goto	l8515
  4982                           
  4983                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  4984  165A  3064               	movlw	100
  4985  165B  00A9               	movwf	setBuz@time
  4986  165C  3000               	movlw	0
  4987  165D  00AA               	movwf	setBuz@time+1
  4988  165E  3002               	movlw	2
  4989  165F  3188  2059  3196   	fcall	_setBuz
  4990  1662                     l8515:	
  4991                           
  4992                           ;OverTemperature_B1.c: 125: }
  4993                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  4994  1662  0020               	movlb	0	; select bank0
  4995  1663  0830               	movf	setOverTemp_Exceptions@command,w
  4996  1664  3E0A               	addlw	10
  4997  1665  00AE               	movwf	??_setOverTemp_Exceptions
  4998  1666  082E               	movf	??_setOverTemp_Exceptions,w
  4999  1667  00A2               	movwf	setLED@command
  5000  1668  3063               	movlw	99
  5001  1669  3189  2168  3196   	fcall	_setLED
  5002                           
  5003                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5004  166C  0020               	movlb	0	; select bank0
  5005  166D  082F               	movf	setOverTemp_Exceptions@i,w
  5006  166E  319E  26D8  3196   	fcall	_setSw_Enable
  5007                           
  5008                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5009  1671  0020               	movlb	0	; select bank0
  5010  1672  082F               	movf	setOverTemp_Exceptions@i,w
  5011  1673  319E  26BB         	fcall	_setRF_Enable
  5012  1675  0008               	return
  5013  1676                     __end_of_setOverTemp_Exceptions:	
  5014                           
  5015                           	psect	text12
  5016  1DC9                     __ptext12:	
  5017 ;; *************** function _getPF_Safe *****************
  5018 ;; Defined at:
  5019 ;;		line 34 in file "../src/PowerFault_B1.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  i               1    0[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      unsigned char 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;Total ram usage:        1 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    5
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_setTemp_Main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _getPF_Safe
  5049  1DC9                     _getPF_Safe:	
  5050                           
  5051                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _getPF_Safe: [wreg+status,2]
  5055  1DC9  3000               	movlw	0
  5056  1DCA  0021               	movlb	1	; select bank1
  5057  1DCB  194A               	btfsc	_PF1^(0+128),2
  5058  1DCC  3001               	movlw	1
  5059  1DCD  0020               	movlb	0	; select bank0
  5060  1DCE  00A0               	movwf	getPF_Safe@i
  5061                           
  5062                           ;PowerFault_B1.c: 36: return i;
  5063  1DCF  0820               	movf	getPF_Safe@i,w
  5064  1DD0  0008               	return
  5065  1DD1                     __end_of_getPF_Safe:	
  5066                           
  5067                           	psect	text13
  5068  1D66                     __ptext13:	
  5069 ;; *************** function _Temp_Initialization *****************
  5070 ;; Defined at:
  5071 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;		None               void
  5078 ;; Registers used:
  5079 ;;		status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        0 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    6
  5092 ;; This function calls:
  5093 ;;		_setTemp_Initialization
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _Temp_Initialization
  5101  1D66                     _Temp_Initialization:	
  5102                           
  5103                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5107  1D66  319D  2563         	fcall	_setTemp_Initialization
  5108  1D68  0008               	return
  5109  1D69                     __end_of_Temp_Initialization:	
  5110                           
  5111                           	psect	text14
  5112  1D63                     __ptext14:	
  5113 ;; *************** function _setTemp_Initialization *****************
  5114 ;; Defined at:
  5115 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		None
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;Total ram usage:        0 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    5
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_Temp_Initialization
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           
  5144                           ;psect for function _setTemp_Initialization
  5145  1D63                     _setTemp_Initialization:	
  5146                           
  5147                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in _setTemp_Initialization: []
  5151  1D63  0021               	movlb	1	; select bank1
  5152  1D64  165E               	bsf	_Temp1^(0+128),4
  5153  1D65  0008               	return
  5154  1D66                     __end_of_setTemp_Initialization:	
  5155                           
  5156                           	psect	text15
  5157  1066                     __ptext15:	
  5158 ;; *************** function _Switch_Main *****************
  5159 ;; Defined at:
  5160 ;;		line 67 in file "../src/Switch_B1.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:   11
  5181 ;; This function calls:
  5182 ;;		_setSw_Main
  5183 ;; This function is called by:
  5184 ;;		_main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _Switch_Main
  5190  1066                     _Switch_Main:	
  5191                           
  5192                           ;Switch_B1.c: 69: setSw_Main(1);
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5196  1066  3001               	movlw	1
  5197  1067  3181  21F2         	fcall	_setSw_Main
  5198  1069  0008               	return
  5199  106A                     __end_of_Switch_Main:	
  5200                           
  5201                           	psect	text16
  5202  01F2                     __ptext16:	
  5203 ;; *************** function _setSw_Main *****************
  5204 ;; Defined at:
  5205 ;;		line 117 in file "../src/Switch_B1.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  sw              1    wreg     unsigned char 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  sw              1   72[BANK0 ] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;		None               void
  5212 ;; Registers used:
  5213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;Total ram usage:        4 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:   10
  5226 ;; This function calls:
  5227 ;;		_SwPointSelect
  5228 ;;		_Sw_DimmerAdjFunc
  5229 ;;		_Sw_DimmerOffFunc
  5230 ;;		_Sw_DimmerOnFunc
  5231 ;;		_setBuz
  5232 ;;		_setRF_Learn
  5233 ;; This function is called by:
  5234 ;;		_Switch_Main
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _setSw_Main
  5240  01F2                     _setSw_Main:	
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5244                           ;setSw_Main@sw stored from wreg
  5245  01F2  0020               	movlb	0	; select bank0
  5246  01F3  00E8               	movwf	setSw_Main@sw
  5247                           
  5248                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5249  01F4  0868               	movf	setSw_Main@sw,w
  5250  01F5  319E  2635  3181   	fcall	_SwPointSelect
  5251                           
  5252                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5253  01F8  0020               	movlb	0	; select bank0
  5254  01F9  086C               	movf	_Sw,w
  5255  01FA  0086               	movwf	6
  5256  01FB  3001               	movlw	1	; select bank2/3
  5257  01FC  0087               	movwf	7
  5258  01FD  1C01               	btfss	1,0
  5259  01FE  0008               	return
  5260                           
  5261                           ;Switch_B1.c: 139: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5262  01FF  01E7               	clrf	_setSw_Main$5938
  5263  0200  0AE7               	incf	_setSw_Main$5938,f
  5264  0201  1F0C               	btfss	12,6	;volatile
  5265  0202  1A0C               	btfsc	12,4	;volatile
  5266  0203  2A08               	goto	l9165
  5267  0204  1C0C               	btfss	12,0	;volatile
  5268  0205  188D               	btfsc	13,1	;volatile
  5269  0206  2A08               	goto	l9165
  5270  0207  01E7               	clrf	_setSw_Main$5938
  5271  0208                     l9165:	
  5272  0208  086C               	movf	_Sw,w
  5273  0209  0086               	movwf	6
  5274  020A  3001               	movlw	1	; select bank2/3
  5275  020B  0087               	movwf	7
  5276  020C  0867               	movf	_setSw_Main$5938,w
  5277  020D  1081               	bcf	1,1
  5278  020E  1D03               	skipz
  5279  020F  1481               	bsf	1,1
  5280                           
  5281                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5282  0210  086C               	movf	_Sw,w
  5283  0211  0086               	movwf	6
  5284  0212  3001               	movlw	1	; select bank2/3
  5285  0213  0087               	movwf	7
  5286  0214  1C81               	btfss	1,1
  5287  0215  2ADA               	goto	l9215
  5288                           
  5289                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5290  0216  086C               	movf	_Sw,w
  5291  0217  0086               	movwf	6
  5292  0218  3001               	movlw	1	; select bank2/3
  5293  0219  0087               	movwf	7
  5294  021A  1901               	btfsc	1,2
  5295  021B  2A3D               	goto	l9181
  5296                           
  5297                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5298  021C  3001               	movlw	1
  5299  021D  00E5               	movwf	??_setSw_Main
  5300  021E  086C               	movf	_Sw,w
  5301  021F  3E02               	addlw	2
  5302  0220  0086               	movwf	6
  5303  0221  3001               	movlw	1	; select bank2/3
  5304  0222  0087               	movwf	7
  5305  0223  0865               	movf	??_setSw_Main,w
  5306  0224  0781               	addwf	1,f
  5307                           
  5308                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5309  0225  086C               	movf	_Sw,w
  5310  0226  3E02               	addlw	2
  5311  0227  0086               	movwf	6
  5312  0228  3001               	movlw	1	; select bank2/3
  5313  0229  0087               	movwf	7
  5314  022A  3005               	movlw	5
  5315  022B  0201               	subwf	1,w
  5316  022C  1C03               	skipc
  5317  022D  0008               	return
  5318                           
  5319                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5320  022E  086C               	movf	_Sw,w
  5321  022F  3E02               	addlw	2
  5322  0230  0086               	movwf	6
  5323  0231  3001               	movlw	1	; select bank2/3
  5324  0232  0087               	movwf	7
  5325  0233  0181               	clrf	1
  5326                           
  5327                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5328  0234  086C               	movf	_Sw,w
  5329  0235  0086               	movwf	6
  5330  0236  3001               	movlw	1	; select bank2/3
  5331  0237  0087               	movwf	7
  5332  0238  1501               	bsf	1,2
  5333                           
  5334                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5335  0239  0868               	movf	setSw_Main@sw,w
  5336  023A  3197  27A9         	fcall	_Sw_DimmerOnFunc
  5337                           
  5338                           ;Switch_B1.c: 173: }
  5339                           ;Switch_B1.c: 174: } else {
  5340  023C  0008               	return
  5341  023D                     l9181:	
  5342                           
  5343                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5344  023D  0020               	movlb	0	; select bank0
  5345  023E  086C               	movf	_Sw,w
  5346  023F  0086               	movwf	6
  5347  0240  3001               	movlw	1	; select bank2/3
  5348  0241  0087               	movwf	7
  5349  0242  1981               	btfsc	1,3
  5350  0243  2A6A               	goto	l9191
  5351                           
  5352                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5353  0244  086C               	movf	_Sw,w
  5354  0245  3E03               	addlw	3
  5355  0246  0086               	movwf	6
  5356  0247  3001               	movlw	1	; select bank2/3
  5357  0248  0087               	movwf	7
  5358  0249  3001               	movlw	1
  5359  024A  0781               	addwf	1,f
  5360  024B  3141               	addfsr 1,1
  5361  024C  1803               	skipnc
  5362  024D  0A81               	incf	1,f
  5363                           
  5364                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5365  024E  086C               	movf	_Sw,w
  5366  024F  3E03               	addlw	3
  5367  0250  0086               	movwf	6
  5368  0251  3001               	movlw	1	; select bank2/3
  5369  0252  0087               	movwf	7
  5370  0253  3F40               	moviw [0]fsr1
  5371  0254  00E5               	movwf	??_setSw_Main
  5372  0255  3F41               	moviw [1]fsr1
  5373  0256  00E6               	movwf	??_setSw_Main+1
  5374  0257  3000               	movlw	0
  5375  0258  0266               	subwf	??_setSw_Main+1,w
  5376  0259  3096               	movlw	150
  5377  025A  1903               	skipnz
  5378  025B  0265               	subwf	??_setSw_Main,w
  5379  025C  1C03               	skipc
  5380  025D  0008               	return
  5381                           
  5382                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5383  025E  086C               	movf	_Sw,w
  5384  025F  3E03               	addlw	3
  5385  0260  0086               	movwf	6
  5386  0261  3001               	movlw	1	; select bank2/3
  5387  0262  0087               	movwf	7
  5388  0263  3000               	movlw	0
  5389  0264  3FC0               	movwi [0]fsr1
  5390  0265  3FC1               	movwi [1]fsr1
  5391                           
  5392                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5393  0266  0868               	movf	setSw_Main@sw,w
  5394  0267  3193  2363         	fcall	_Sw_DimmerAdjFunc
  5395                           
  5396                           ;Switch_B1.c: 184: }
  5397                           ;Switch_B1.c: 185: } else {
  5398  0269  0008               	return
  5399  026A                     l9191:	
  5400                           
  5401                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5402  026A  0020               	movlb	0	; select bank0
  5403  026B  086C               	movf	_Sw,w
  5404  026C  0086               	movwf	6
  5405  026D  3001               	movlw	1	; select bank2/3
  5406  026E  0087               	movwf	7
  5407  026F  1A01               	btfsc	1,4
  5408  0270  2AA8               	goto	l9205
  5409                           
  5410                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5411  0271  086C               	movf	_Sw,w
  5412  0272  3E05               	addlw	5
  5413  0273  0086               	movwf	6
  5414  0274  3001               	movlw	1	; select bank2/3
  5415  0275  0087               	movwf	7
  5416  0276  3001               	movlw	1
  5417  0277  0781               	addwf	1,f
  5418  0278  3141               	addfsr 1,1
  5419  0279  1803               	skipnc
  5420  027A  0A81               	incf	1,f
  5421                           
  5422                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5423  027B  086C               	movf	_Sw,w
  5424  027C  3E05               	addlw	5
  5425  027D  0086               	movwf	6
  5426  027E  3001               	movlw	1	; select bank2/3
  5427  027F  0087               	movwf	7
  5428  0280  3F40               	moviw [0]fsr1
  5429  0281  00E5               	movwf	??_setSw_Main
  5430  0282  3F41               	moviw [1]fsr1
  5431  0283  00E6               	movwf	??_setSw_Main+1
  5432  0284  3000               	movlw	0
  5433  0285  0266               	subwf	??_setSw_Main+1,w
  5434  0286  3096               	movlw	150
  5435  0287  1903               	skipnz
  5436  0288  0265               	subwf	??_setSw_Main,w
  5437  0289  1C03               	skipc
  5438  028A  0008               	return
  5439                           
  5440                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5441  028B  086C               	movf	_Sw,w
  5442  028C  3E05               	addlw	5
  5443  028D  0086               	movwf	6
  5444  028E  3001               	movlw	1	; select bank2/3
  5445  028F  0087               	movwf	7
  5446  0290  3000               	movlw	0
  5447  0291  3FC0               	movwi [0]fsr1
  5448  0292  3FC1               	movwi [1]fsr1
  5449                           
  5450                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5451  0293  086C               	movf	_Sw,w
  5452  0294  0086               	movwf	6
  5453  0295  3001               	movlw	1	; select bank2/3
  5454  0296  0087               	movwf	7
  5455  0297  1601               	bsf	1,4
  5456                           
  5457                           ;Switch_B1.c: 193: setRF_Learn(1);
  5458  0298  3001               	movlw	1
  5459  0299  319D  25C1  3181   	fcall	_setRF_Learn
  5460                           
  5461                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5462  029C  0021               	movlb	1	; select bank1
  5463  029D  1FA0               	btfss	_myMain^(0+128),7
  5464  029E  0008               	return
  5465                           
  5466                           ;Switch_B1.c: 196: setBuz(2, 100);
  5467  029F  3064               	movlw	100
  5468  02A0  0020               	movlb	0	; select bank0
  5469  02A1  00A9               	movwf	setBuz@time
  5470  02A2  3000               	movlw	0
  5471  02A3  00AA               	movwf	setBuz@time+1
  5472  02A4  3002               	movlw	2
  5473  02A5  3188  2059         	fcall	_setBuz
  5474                           
  5475                           ;Switch_B1.c: 197: }
  5476                           ;Switch_B1.c: 199: }
  5477                           ;Switch_B1.c: 200: } else {
  5478  02A7  0008               	return
  5479  02A8                     l9205:	
  5480                           
  5481                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5482  02A8  0020               	movlb	0	; select bank0
  5483  02A9  086C               	movf	_Sw,w
  5484  02AA  0086               	movwf	6
  5485  02AB  3001               	movlw	1	; select bank2/3
  5486  02AC  0087               	movwf	7
  5487  02AD  1A81               	btfsc	1,5
  5488  02AE  0008               	return
  5489                           
  5490                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5491  02AF  086C               	movf	_Sw,w
  5492  02B0  3E07               	addlw	7
  5493  02B1  0086               	movwf	6
  5494  02B2  3001               	movlw	1	; select bank2/3
  5495  02B3  0087               	movwf	7
  5496  02B4  3001               	movlw	1
  5497  02B5  0781               	addwf	1,f
  5498  02B6  3141               	addfsr 1,1
  5499  02B7  1803               	skipnc
  5500  02B8  0A81               	incf	1,f
  5501                           
  5502                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5503  02B9  086C               	movf	_Sw,w
  5504  02BA  3E07               	addlw	7
  5505  02BB  0086               	movwf	6
  5506  02BC  3001               	movlw	1	; select bank2/3
  5507  02BD  0087               	movwf	7
  5508  02BE  3F40               	moviw [0]fsr1
  5509  02BF  00E5               	movwf	??_setSw_Main
  5510  02C0  3F41               	moviw [1]fsr1
  5511  02C1  00E6               	movwf	??_setSw_Main+1
  5512  02C2  3001               	movlw	1
  5513  02C3  0266               	subwf	??_setSw_Main+1,w
  5514  02C4  302C               	movlw	44
  5515  02C5  1903               	skipnz
  5516  02C6  0265               	subwf	??_setSw_Main,w
  5517  02C7  1C03               	skipc
  5518  02C8  0008               	return
  5519                           
  5520                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5521  02C9  086C               	movf	_Sw,w
  5522  02CA  3E07               	addlw	7
  5523  02CB  0086               	movwf	6
  5524  02CC  3001               	movlw	1	; select bank2/3
  5525  02CD  0087               	movwf	7
  5526  02CE  3000               	movlw	0
  5527  02CF  3FC0               	movwi [0]fsr1
  5528  02D0  3FC1               	movwi [1]fsr1
  5529                           
  5530                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5531  02D1  086C               	movf	_Sw,w
  5532  02D2  0086               	movwf	6
  5533  02D3  3001               	movlw	1	; select bank2/3
  5534  02D4  0087               	movwf	7
  5535  02D5  1681               	bsf	1,5
  5536                           
  5537                           ;Switch_B1.c: 208: setRF_Learn(0);
  5538  02D6  3000               	movlw	0
  5539  02D7  319D  25C1         	fcall	_setRF_Learn
  5540                           
  5541                           ;Switch_B1.c: 211: }
  5542                           ;Switch_B1.c: 212: }
  5543                           ;Switch_B1.c: 213: }
  5544                           ;Switch_B1.c: 214: }
  5545                           ;Switch_B1.c: 215: }
  5546                           ;Switch_B1.c: 216: } else {
  5547  02D9  0008               	return
  5548  02DA                     l9215:	
  5549                           
  5550                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5551  02DA  0020               	movlb	0	; select bank0
  5552  02DB  086C               	movf	_Sw,w
  5553  02DC  0086               	movwf	6
  5554  02DD  3001               	movlw	1	; select bank2/3
  5555  02DE  0087               	movwf	7
  5556  02DF  1D01               	btfss	1,2
  5557  02E0  0008               	return
  5558                           
  5559                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5560  02E1  3001               	movlw	1
  5561  02E2  00E5               	movwf	??_setSw_Main
  5562  02E3  086C               	movf	_Sw,w
  5563  02E4  3E02               	addlw	2
  5564  02E5  0086               	movwf	6
  5565  02E6  3001               	movlw	1	; select bank2/3
  5566  02E7  0087               	movwf	7
  5567  02E8  0865               	movf	??_setSw_Main,w
  5568  02E9  0781               	addwf	1,f
  5569                           
  5570                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5571  02EA  086C               	movf	_Sw,w
  5572  02EB  3E02               	addlw	2
  5573  02EC  0086               	movwf	6
  5574  02ED  3001               	movlw	1	; select bank2/3
  5575  02EE  0087               	movwf	7
  5576  02EF  3005               	movlw	5
  5577  02F0  0201               	subwf	1,w
  5578  02F1  1C03               	skipc
  5579  02F2  0008               	return
  5580                           
  5581                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5582  02F3  086C               	movf	_Sw,w
  5583  02F4  3E02               	addlw	2
  5584  02F5  0086               	movwf	6
  5585  02F6  3001               	movlw	1	; select bank2/3
  5586  02F7  0087               	movwf	7
  5587  02F8  0181               	clrf	1
  5588                           
  5589                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5590  02F9  086C               	movf	_Sw,w
  5591  02FA  0086               	movwf	6
  5592  02FB  3001               	movlw	1	; select bank2/3
  5593  02FC  0087               	movwf	7
  5594  02FD  1101               	bcf	1,2
  5595                           
  5596                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5597  02FE  086C               	movf	_Sw,w
  5598  02FF  3E03               	addlw	3
  5599  0300  0086               	movwf	6
  5600  0301  3001               	movlw	1	; select bank2/3
  5601  0302  0087               	movwf	7
  5602  0303  3000               	movlw	0
  5603  0304  3FC0               	movwi [0]fsr1
  5604  0305  3FC1               	movwi [1]fsr1
  5605                           
  5606                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5607  0306  086C               	movf	_Sw,w
  5608  0307  0086               	movwf	6
  5609  0308  3001               	movlw	1	; select bank2/3
  5610  0309  0087               	movwf	7
  5611  030A  1181               	bcf	1,3
  5612                           
  5613                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5614  030B  086C               	movf	_Sw,w
  5615  030C  3E05               	addlw	5
  5616  030D  0086               	movwf	6
  5617  030E  3001               	movlw	1	; select bank2/3
  5618  030F  0087               	movwf	7
  5619  0310  3000               	movlw	0
  5620  0311  3FC0               	movwi [0]fsr1
  5621  0312  3FC1               	movwi [1]fsr1
  5622                           
  5623                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5624  0313  086C               	movf	_Sw,w
  5625  0314  0086               	movwf	6
  5626  0315  3001               	movlw	1	; select bank2/3
  5627  0316  0087               	movwf	7
  5628  0317  1201               	bcf	1,4
  5629                           
  5630                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5631  0318  086C               	movf	_Sw,w
  5632  0319  3E07               	addlw	7
  5633  031A  0086               	movwf	6
  5634  031B  3001               	movlw	1	; select bank2/3
  5635  031C  0087               	movwf	7
  5636  031D  3000               	movlw	0
  5637  031E  3FC0               	movwi [0]fsr1
  5638  031F  3FC1               	movwi [1]fsr1
  5639                           
  5640                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5641  0320  086C               	movf	_Sw,w
  5642  0321  0086               	movwf	6
  5643  0322  3001               	movlw	1	; select bank2/3
  5644  0323  0087               	movwf	7
  5645  0324  1281               	bcf	1,5
  5646                           
  5647                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5648  0325  0868               	movf	setSw_Main@sw,w
  5649  0326  318C  2492  3181   	fcall	_Sw_DimmerOffFunc
  5650                           
  5651                           ;Switch_B1.c: 232: setRF_Learn(0);
  5652  0329  3000               	movlw	0
  5653  032A  319D  25C1         	fcall	_setRF_Learn
  5654  032C  0008               	return
  5655  032D                     __end_of_setSw_Main:	
  5656                           
  5657                           	psect	text17
  5658  1DC1                     __ptext17:	
  5659 ;; *************** function _setRF_Learn *****************
  5660 ;; Defined at:
  5661 ;;		line 23 in file "../src/RF_Control_B1.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  command         1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  command         1    0[BANK0 ] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:        1 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    5
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_setSw_Main
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _setRF_Learn
  5691  1DC1                     _setRF_Learn:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _setRF_Learn: [wreg]
  5695                           ;setRF_Learn@command stored from wreg
  5696  1DC1  0020               	movlb	0	; select bank0
  5697  1DC2  00A0               	movwf	setRF_Learn@command
  5698                           
  5699                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5700  1DC3  0820               	movf	setRF_Learn@command,w
  5701  1DC4  0021               	movlb	1	; select bank1
  5702  1DC5  133E               	bcf	_RF1^(0+128),6
  5703  1DC6  1D03               	skipz
  5704  1DC7  173E               	bsf	_RF1^(0+128),6
  5705  1DC8  0008               	return
  5706  1DC9                     __end_of_setRF_Learn:	
  5707                           
  5708                           	psect	text18
  5709  17A9                     __ptext18:	
  5710 ;; *************** function _Sw_DimmerOnFunc *****************
  5711 ;; Defined at:
  5712 ;;		line 241 in file "../src/Switch_B1.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  sw              1    wreg     unsigned char 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  sw              1   67[BANK0 ] unsigned char 
  5717 ;;  Idle            1   66[BANK0 ] unsigned char 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;		None               void
  5720 ;; Registers used:
  5721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;Total ram usage:        2 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    9
  5734 ;; This function calls:
  5735 ;;		_setBuz
  5736 ;;		_setDimmerLights_Switch
  5737 ;;		_setDimmerLights_Trigger
  5738 ;;		_setRFSW_Status
  5739 ;;		_setRF_DimmerLights
  5740 ;;		_setTxData
  5741 ;; This function is called by:
  5742 ;;		_setSw_Main
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function _Sw_DimmerOnFunc
  5748  17A9                     _Sw_DimmerOnFunc:	
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5752                           ;Sw_DimmerOnFunc@sw stored from wreg
  5753  17A9  0020               	movlb	0	; select bank0
  5754  17AA  00E3               	movwf	Sw_DimmerOnFunc@sw
  5755                           
  5756                           ;Switch_B1.c: 242: char Idle = 1;
  5757  17AB  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5758  17AC  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5759                           
  5760                           ;Switch_B1.c: 263: if (Idle == 1) {
  5761  17AD  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5762  17AE  3A01               	xorlw	1
  5763  17AF  1D03               	skipz
  5764  17B0  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 264: Sw->Flag = 1;
  5767  17B1  086C               	movf	_Sw,w
  5768  17B2  0086               	movwf	6
  5769  17B3  3001               	movlw	1	; select bank2/3
  5770  17B4  0087               	movwf	7
  5771  17B5  1781               	bsf	1,7
  5772                           
  5773                           ;Switch_B1.c: 265: setBuz(1, 100);
  5774  17B6  3064               	movlw	100
  5775  17B7  00A9               	movwf	setBuz@time
  5776  17B8  3000               	movlw	0
  5777  17B9  00AA               	movwf	setBuz@time+1
  5778  17BA  3001               	movlw	1
  5779  17BB  3188  2059  3197   	fcall	_setBuz
  5780                           
  5781                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5782  17BE  0020               	movlb	0	; select bank0
  5783  17BF  086C               	movf	_Sw,w
  5784  17C0  0086               	movwf	6
  5785  17C1  3001               	movlw	1	; select bank2/3
  5786  17C2  0087               	movwf	7
  5787  17C3  1B01               	btfsc	1,6
  5788  17C4  2FEE               	goto	l8593
  5789                           
  5790                           ;Switch_B1.c: 267: Sw->Status = 1;
  5791  17C5  086C               	movf	_Sw,w
  5792  17C6  0086               	movwf	6
  5793  17C7  3001               	movlw	1	; select bank2/3
  5794  17C8  0087               	movwf	7
  5795  17C9  1701               	bsf	1,6
  5796                           
  5797                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5798  17CA  01A2               	clrf	setRFSW_Status@command
  5799  17CB  0AA2               	incf	setRFSW_Status@command,f
  5800  17CC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5801  17CD  319E  26AD  3197   	fcall	_setRFSW_Status
  5802                           
  5803                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5804  17D0  0020               	movlb	0	; select bank0
  5805  17D1  01A2               	clrf	setDimmerLights_Trigger@command
  5806  17D2  0AA2               	incf	setDimmerLights_Trigger@command,f
  5807  17D3  0863               	movf	Sw_DimmerOnFunc@sw,w
  5808  17D4  319F  2715  3197   	fcall	_setDimmerLights_Trigger
  5809                           
  5810                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5811  17D7  0020               	movlb	0	; select bank0
  5812  17D8  01A2               	clrf	setDimmerLights_Switch@command
  5813  17D9  0AA2               	incf	setDimmerLights_Switch@command,f
  5814  17DA  0863               	movf	Sw_DimmerOnFunc@sw,w
  5815  17DB  319F  2705  3197   	fcall	_setDimmerLights_Switch
  5816                           
  5817                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5818  17DE  0020               	movlb	0	; select bank0
  5819  17DF  086C               	movf	_Sw,w
  5820  17E0  0086               	movwf	6
  5821  17E1  3001               	movlw	1	; select bank2/3
  5822  17E2  0087               	movwf	7
  5823  17E3  3000               	movlw	0
  5824  17E4  1B01               	btfsc	1,6
  5825  17E5  3001               	movlw	1
  5826  17E6  00DD               	movwf	setRF_DimmerLights@on
  5827  17E7  0863               	movf	Sw_DimmerOnFunc@sw,w
  5828  17E8  318C  2426  3197   	fcall	_setRF_DimmerLights
  5829                           
  5830                           ;Switch_B1.c: 274: setTxData();
  5831  17EB  3185  25C8         	fcall	_setTxData
  5832                           
  5833                           ;Switch_B1.c: 276: } else {
  5834  17ED  0008               	return
  5835  17EE                     l8593:	
  5836                           
  5837                           ;Switch_B1.c: 277: Sw->Status = 0;
  5838  17EE  0020               	movlb	0	; select bank0
  5839  17EF  086C               	movf	_Sw,w
  5840  17F0  0086               	movwf	6
  5841  17F1  3001               	movlw	1	; select bank2/3
  5842  17F2  0087               	movwf	7
  5843  17F3  1301               	bcf	1,6
  5844                           
  5845                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5846  17F4  086C               	movf	_Sw,w
  5847  17F5  0086               	movwf	6
  5848  17F6  3001               	movlw	1	; select bank2/3
  5849  17F7  0087               	movwf	7
  5850  17F8  3000               	movlw	0
  5851  17F9  1B01               	btfsc	1,6
  5852  17FA  3001               	movlw	1
  5853  17FB  00A2               	movwf	setRFSW_Status@command
  5854  17FC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5855  17FD  319E  26AD         	fcall	_setRFSW_Status
  5856  17FF  0008               	return
  5857  1800                     __end_of_Sw_DimmerOnFunc:	
  5858                           
  5859                           	psect	text19
  5860  0C92                     __ptext19:	
  5861 ;; *************** function _Sw_DimmerOffFunc *****************
  5862 ;; Defined at:
  5863 ;;		line 284 in file "../src/Switch_B1.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  sw              1    wreg     unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  sw              1   68[BANK0 ] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;		None               void
  5870 ;; Registers used:
  5871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:        3 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    9
  5884 ;; This function calls:
  5885 ;;		_setDelayOff_GO
  5886 ;;		_setDimmerLights_AdjGo
  5887 ;;		_setDimmerLights_Switch
  5888 ;;		_setDimmerLights_Trigger
  5889 ;;		_setDimmerLights_TriggerAdj
  5890 ;;		_setRF_DimmerLights
  5891 ;;		_setTxData
  5892 ;; This function is called by:
  5893 ;;		_setSw_Main
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           
  5898                           ;psect for function _Sw_DimmerOffFunc
  5899  0C92                     _Sw_DimmerOffFunc:	
  5900                           
  5901                           ;incstack = 0
  5902                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5903                           ;Sw_DimmerOffFunc@sw stored from wreg
  5904  0C92  0020               	movlb	0	; select bank0
  5905  0C93  00E4               	movwf	Sw_DimmerOffFunc@sw
  5906                           
  5907                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5908  0C94  086C               	movf	_Sw,w
  5909  0C95  0086               	movwf	6
  5910  0C96  3001               	movlw	1	; select bank2/3
  5911  0C97  0087               	movwf	7
  5912  0C98  1F81               	btfss	1,7
  5913  0C99  0008               	return
  5914                           
  5915                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5916  0C9A  086C               	movf	_Sw,w
  5917  0C9B  0086               	movwf	6
  5918  0C9C  3001               	movlw	1	; select bank2/3
  5919  0C9D  0087               	movwf	7
  5920  0C9E  1381               	bcf	1,7
  5921                           
  5922                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5923  0C9F  086C               	movf	_Sw,w
  5924  0CA0  0086               	movwf	6
  5925  0CA1  3001               	movlw	1	; select bank2/3
  5926  0CA2  0087               	movwf	7
  5927  0CA3  1F01               	btfss	1,6
  5928  0CA4  2CDD               	goto	l8629
  5929                           
  5930                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5931  0CA5  0A6C               	incf	_Sw,w
  5932  0CA6  0086               	movwf	6
  5933  0CA7  3001               	movlw	1	; select bank2/3
  5934  0CA8  0087               	movwf	7
  5935  0CA9  1C01               	btfss	1,0
  5936  0CAA  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5939  0CAB  0A6C               	incf	_Sw,w
  5940  0CAC  0086               	movwf	6
  5941  0CAD  3001               	movlw	1	; select bank2/3
  5942  0CAE  0087               	movwf	7
  5943  0CAF  1001               	bcf	1,0
  5944                           
  5945                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5946  0CB0  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5947  0CB1  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5948  0CB2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5949  0CB3  319F  2745  318C   	fcall	_setDimmerLights_TriggerAdj
  5950                           
  5951                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5952  0CB6  0020               	movlb	0	; select bank0
  5953  0CB7  01A2               	clrf	setDimmerLights_AdjGo@command
  5954  0CB8  0864               	movf	Sw_DimmerOffFunc@sw,w
  5955  0CB9  319F  2735  318C   	fcall	_setDimmerLights_AdjGo
  5956                           
  5957                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5958  0CBC  0020               	movlb	0	; select bank0
  5959  0CBD  0864               	movf	Sw_DimmerOffFunc@sw,w
  5960  0CBE  3E1A               	addlw	26
  5961  0CBF  076D               	addwf	_product,w
  5962  0CC0  00E2               	movwf	??_Sw_DimmerOffFunc
  5963  0CC1  0862               	movf	??_Sw_DimmerOffFunc,w
  5964  0CC2  0086               	movwf	6
  5965  0CC3  3001               	movlw	1	; select bank2/3
  5966  0CC4  0087               	movwf	7
  5967  0CC5  0801               	movf	1,w
  5968  0CC6  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5969  0CC7  086D               	movf	_product,w
  5970  0CC8  3E11               	addlw	17
  5971  0CC9  0086               	movwf	6
  5972  0CCA  3001               	movlw	1	; select bank2/3
  5973  0CCB  0087               	movwf	7
  5974  0CCC  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5975  0CCD  0081               	movwf	1
  5976                           
  5977                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5978  0CCE  086C               	movf	_Sw,w
  5979  0CCF  0086               	movwf	6
  5980  0CD0  3001               	movlw	1	; select bank2/3
  5981  0CD1  0087               	movwf	7
  5982  0CD2  3000               	movlw	0
  5983  0CD3  1B01               	btfsc	1,6
  5984  0CD4  3001               	movlw	1
  5985  0CD5  00DD               	movwf	setRF_DimmerLights@on
  5986  0CD6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5987  0CD7  318C  2426  318C   	fcall	_setRF_DimmerLights
  5988                           
  5989                           ;Switch_B1.c: 295: setTxData();
  5990  0CDA  3185  25C8         	fcall	_setTxData
  5991                           
  5992                           ;Switch_B1.c: 297: }
  5993                           ;Switch_B1.c: 298: } else {
  5994  0CDC  0008               	return
  5995  0CDD                     l8629:	
  5996                           
  5997                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5998  0CDD  0020               	movlb	0	; select bank0
  5999  0CDE  01A2               	clrf	setDimmerLights_Trigger@command
  6000  0CDF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6001  0CE0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6002  0CE1  319F  2715  318C   	fcall	_setDimmerLights_Trigger
  6003                           
  6004                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6005  0CE4  0020               	movlb	0	; select bank0
  6006  0CE5  01A2               	clrf	setDimmerLights_Switch@command
  6007  0CE6  0864               	movf	Sw_DimmerOffFunc@sw,w
  6008  0CE7  319F  2705  318C   	fcall	_setDimmerLights_Switch
  6009                           
  6010                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6011  0CEA  0020               	movlb	0	; select bank0
  6012  0CEB  01AA               	clrf	setDelayOff_GO@command
  6013  0CEC  01AB               	clrf	setDelayOff_GO@value
  6014  0CED  0864               	movf	Sw_DimmerOffFunc@sw,w
  6015  0CEE  3189  21C6  318C   	fcall	_setDelayOff_GO
  6016                           
  6017                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6018  0CF1  0020               	movlb	0	; select bank0
  6019  0CF2  086C               	movf	_Sw,w
  6020  0CF3  0086               	movwf	6
  6021  0CF4  3001               	movlw	1	; select bank2/3
  6022  0CF5  0087               	movwf	7
  6023  0CF6  3000               	movlw	0
  6024  0CF7  1B01               	btfsc	1,6
  6025  0CF8  3001               	movlw	1
  6026  0CF9  00DD               	movwf	setRF_DimmerLights@on
  6027  0CFA  0864               	movf	Sw_DimmerOffFunc@sw,w
  6028  0CFB  318C  2426  318C   	fcall	_setRF_DimmerLights
  6029                           
  6030                           ;Switch_B1.c: 304: setTxData();
  6031  0CFE  3185  25C8         	fcall	_setTxData
  6032  0D00  0008               	return
  6033  0D01                     __end_of_Sw_DimmerOffFunc:	
  6034                           
  6035                           	psect	text20
  6036  1363                     __ptext20:	
  6037 ;; *************** function _Sw_DimmerAdjFunc *****************
  6038 ;; Defined at:
  6039 ;;		line 311 in file "../src/Switch_B1.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  sw              1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  sw              1    5[BANK0 ] unsigned char 
  6044 ;;  Idle            1    4[BANK0 ] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;Total ram usage:        2 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    7
  6061 ;; This function calls:
  6062 ;;		_setDimmerLights_AdjGo
  6063 ;;		_setDimmerLights_TriggerAdj
  6064 ;;		_setRFSW_Status
  6065 ;; This function is called by:
  6066 ;;		_setSw_Main
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _Sw_DimmerAdjFunc
  6072  1363                     _Sw_DimmerAdjFunc:	
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6076                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6077  1363  0020               	movlb	0	; select bank0
  6078  1364  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6079                           
  6080                           ;Switch_B1.c: 312: char Idle = 1;
  6081  1365  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6082  1366  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6083                           
  6084                           ;Switch_B1.c: 332: if (Idle == 1) {
  6085  1367  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6086  1368  3A01               	xorlw	1
  6087  1369  1D03               	skipz
  6088  136A  0008               	return
  6089                           
  6090                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6091  136B  086C               	movf	_Sw,w
  6092  136C  0086               	movwf	6
  6093  136D  3001               	movlw	1	; select bank2/3
  6094  136E  0087               	movwf	7
  6095  136F  1F81               	btfss	1,7
  6096  1370  0008               	return
  6097                           
  6098                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6099  1371  086C               	movf	_Sw,w
  6100  1372  0086               	movwf	6
  6101  1373  3001               	movlw	1	; select bank2/3
  6102  1374  0087               	movwf	7
  6103  1375  1581               	bsf	1,3
  6104                           
  6105                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6106  1376  0A6C               	incf	_Sw,w
  6107  1377  0086               	movwf	6
  6108  1378  3001               	movlw	1	; select bank2/3
  6109  1379  0087               	movwf	7
  6110  137A  1401               	bsf	1,0
  6111                           
  6112                           ;Switch_B1.c: 336: Sw->Status = 1;
  6113  137B  086C               	movf	_Sw,w
  6114  137C  0086               	movwf	6
  6115  137D  3001               	movlw	1	; select bank2/3
  6116  137E  0087               	movwf	7
  6117  137F  1701               	bsf	1,6
  6118                           
  6119                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6120  1380  01A2               	clrf	setRFSW_Status@command
  6121  1381  0AA2               	incf	setRFSW_Status@command,f
  6122  1382  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6123  1383  319E  26AD  3193   	fcall	_setRFSW_Status
  6124                           
  6125                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6126  1386  0020               	movlb	0	; select bank0
  6127  1387  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6128  1388  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6129  1389  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6130  138A  319F  2745  3193   	fcall	_setDimmerLights_TriggerAdj
  6131                           
  6132                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6133  138D  0020               	movlb	0	; select bank0
  6134  138E  01A2               	clrf	setDimmerLights_AdjGo@command
  6135  138F  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6136  1390  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6137  1391  319F  2735         	fcall	_setDimmerLights_AdjGo
  6138  1393  0008               	return
  6139  1394                     __end_of_Sw_DimmerAdjFunc:	
  6140                           
  6141                           	psect	text21
  6142  1F45                     __ptext21:	
  6143 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6144 ;; Defined at:
  6145 ;;		line 720 in file "../src/Dimmer_B1.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  lights          1    wreg     unsigned char 
  6148 ;;  command         1    2[BANK0 ] unsigned char 
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;  lights          1    3[BANK0 ] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;		None               void
  6153 ;; Registers used:
  6154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;Total ram usage:        2 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    6
  6167 ;; This function calls:
  6168 ;;		_DimmerLightsPointSelect
  6169 ;; This function is called by:
  6170 ;;		_Sw_DimmerOffFunc
  6171 ;;		_Sw_DimmerAdjFunc
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function _setDimmerLights_TriggerAdj
  6177  1F45                     _setDimmerLights_TriggerAdj:	
  6178                           
  6179                           ;incstack = 0
  6180                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6181                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6182  1F45  0020               	movlb	0	; select bank0
  6183  1F46  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6184                           
  6185                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6186  1F47  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6187  1F48  319E  261F         	fcall	_DimmerLightsPointSelect
  6188                           
  6189                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6190  1F4A  0020               	movlb	0	; select bank0
  6191  1F4B  086A               	movf	_DimmerLights,w
  6192  1F4C  3E08               	addlw	8
  6193  1F4D  0086               	movwf	6
  6194  1F4E  3001               	movlw	1	; select bank2/3
  6195  1F4F  0087               	movwf	7
  6196  1F50  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6197  1F51  1201               	bcf	1,4
  6198  1F52  1D03               	skipz
  6199  1F53  1601               	bsf	1,4
  6200  1F54  0008               	return
  6201  1F55                     __end_of_setDimmerLights_TriggerAdj:	
  6202                           
  6203                           	psect	text22
  6204  1F35                     __ptext22:	
  6205 ;; *************** function _setDimmerLights_AdjGo *****************
  6206 ;; Defined at:
  6207 ;;		line 708 in file "../src/Dimmer_B1.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  lights          1    wreg     unsigned char 
  6210 ;;  command         1    2[BANK0 ] unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  lights          1    3[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;		None               void
  6215 ;; Registers used:
  6216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;Total ram usage:        2 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    6
  6229 ;; This function calls:
  6230 ;;		_DimmerLightsPointSelect
  6231 ;; This function is called by:
  6232 ;;		_Sw_DimmerOffFunc
  6233 ;;		_Sw_DimmerAdjFunc
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _setDimmerLights_AdjGo
  6239  1F35                     _setDimmerLights_AdjGo:	
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6243                           ;setDimmerLights_AdjGo@lights stored from wreg
  6244  1F35  0020               	movlb	0	; select bank0
  6245  1F36  00A3               	movwf	setDimmerLights_AdjGo@lights
  6246                           
  6247                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6248  1F37  0823               	movf	setDimmerLights_AdjGo@lights,w
  6249  1F38  319E  261F         	fcall	_DimmerLightsPointSelect
  6250                           
  6251                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6252  1F3A  0020               	movlb	0	; select bank0
  6253  1F3B  086A               	movf	_DimmerLights,w
  6254  1F3C  3E08               	addlw	8
  6255  1F3D  0086               	movwf	6
  6256  1F3E  3001               	movlw	1	; select bank2/3
  6257  1F3F  0087               	movwf	7
  6258  1F40  0822               	movf	setDimmerLights_AdjGo@command,w
  6259  1F41  1181               	bcf	1,3
  6260  1F42  1D03               	skipz
  6261  1F43  1581               	bsf	1,3
  6262  1F44  0008               	return
  6263  1F45                     __end_of_setDimmerLights_AdjGo:	
  6264                           
  6265                           	psect	text23
  6266  1DE2                     __ptext23:	
  6267 ;; *************** function _Switch_Initialization *****************
  6268 ;; Defined at:
  6269 ;;		line 41 in file "../src/Switch_B1.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;		None               void
  6276 ;; Registers used:
  6277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;Total ram usage:        0 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    8
  6290 ;; This function calls:
  6291 ;;		_TouchPower
  6292 ;;		_setSw_Initialization
  6293 ;; This function is called by:
  6294 ;;		_main
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _Switch_Initialization
  6300  1DE2                     _Switch_Initialization:	
  6301                           
  6302                           ;Switch_B1.c: 42: TouchPower();
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6306  1DE2  319E  26E7  319D   	fcall	_TouchPower
  6307                           
  6308                           ;Switch_B1.c: 44: WPUB1 = 0;
  6309  1DE5  0024               	movlb	4	; select bank4
  6310  1DE6  108D               	bcf	13,1	;volatile
  6311                           
  6312                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6313  1DE7  3001               	movlw	1
  6314  1DE8  319F  2725         	fcall	_setSw_Initialization
  6315  1DEA  0008               	return
  6316  1DEB                     __end_of_Switch_Initialization:	
  6317                           
  6318                           	psect	text24
  6319  1F25                     __ptext24:	
  6320 ;; *************** function _setSw_Initialization *****************
  6321 ;; Defined at:
  6322 ;;		line 83 in file "../src/Switch_B1.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  sw              1    wreg     unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  sw              1    4[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;		None               void
  6329 ;; Registers used:
  6330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        1 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    7
  6343 ;; This function calls:
  6344 ;;		_setLED
  6345 ;; This function is called by:
  6346 ;;		_Switch_Initialization
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function _setSw_Initialization
  6352  1F25                     _setSw_Initialization:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6356                           ;setSw_Initialization@sw stored from wreg
  6357  1F25  0020               	movlb	0	; select bank0
  6358  1F26  00A4               	movwf	setSw_Initialization@sw
  6359                           
  6360                           ;Switch_B1.c: 84: setLED(sw, 1);
  6361  1F27  01A2               	clrf	setLED@command
  6362  1F28  0AA2               	incf	setLED@command,f
  6363  1F29  0824               	movf	setSw_Initialization@sw,w
  6364  1F2A  3189  2168  319F   	fcall	_setLED
  6365                           
  6366                           ;Switch_B1.c: 86: setLED(sw + 1, 1);
  6367  1F2D  0020               	movlb	0	; select bank0
  6368  1F2E  01A2               	clrf	setLED@command
  6369  1F2F  0AA2               	incf	setLED@command,f
  6370  1F30  0824               	movf	setSw_Initialization@sw,w
  6371  1F31  3E01               	addlw	1
  6372  1F32  3189  2168         	fcall	_setLED
  6373  1F34  0008               	return
  6374  1F35                     __end_of_setSw_Initialization:	
  6375                           
  6376                           	psect	text25
  6377  1EE7                     __ptext25:	
  6378 ;; *************** function _TouchPower *****************
  6379 ;; Defined at:
  6380 ;;		line 10 in file "../src/Switch_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		_Timeout_Counter
  6403 ;;		_set_TimeoutCleared
  6404 ;; This function is called by:
  6405 ;;		_Switch_Initialization
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _TouchPower
  6411  1EE7                     _TouchPower:	
  6412                           
  6413                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417  1EE7  2EED               	goto	l9143
  6418  1EE8                     l2302:	
  6419                           
  6420                           ;Switch_B1.c: 12: RC5 = 1;
  6421  1EE8  0020               	movlb	0	; select bank0
  6422  1EE9  168E               	bsf	14,5	;volatile
  6423                           
  6424                           ;Switch_B1.c: 13: Timeout_Counter();
  6425  1EEA  319F  27C1  319E   	fcall	_Timeout_Counter
  6426  1EED                     l9143:	
  6427  1EED  0020               	movlb	0	; select bank0
  6428  1EEE  1A8E               	btfsc	14,5	;volatile
  6429  1EEF  2EF3               	goto	l9147
  6430  1EF0  0021               	movlb	1	; select bank1
  6431  1EF1  1D2F               	btfss	(_myMain^(0+128)+15),2
  6432  1EF2  2EE8               	goto	l2302
  6433  1EF3                     l9147:	
  6434                           
  6435                           ;Switch_B1.c: 14: }
  6436                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6437  1EF3  319D  258C         	fcall	_set_TimeoutCleared
  6438  1EF5  0008               	return
  6439  1EF6                     __end_of_TouchPower:	
  6440                           
  6441                           	psect	text26
  6442  1D60                     __ptext26:	
  6443 ;; *************** function _RF_Main *****************
  6444 ;; Defined at:
  6445 ;;		line 16 in file "../src/RF_Control_B1.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;		None               void
  6452 ;; Registers used:
  6453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;Total ram usage:        0 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:   14
  6466 ;; This function calls:
  6467 ;;		_setRF_Main
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           
  6474                           ;psect for function _RF_Main
  6475  1D60                     _RF_Main:	
  6476                           
  6477                           ;RF_Control_B1.c: 18: setRF_Main();
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6481  1D60  3184  2423         	fcall	_setRF_Main
  6482  1D62  0008               	return
  6483  1D63                     __end_of_RF_Main:	
  6484                           
  6485                           	psect	text27
  6486  0423                     __ptext27:	
  6487 ;; *************** function _setRF_Main *****************
  6488 ;; Defined at:
  6489 ;;		line 52 in file "../src/RF_Control_B1.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  Receive_OK      1    0        unsigned char 
  6494 ;;  loop_f          1    0        unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        2 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   13
  6511 ;; This function calls:
  6512 ;;		_CC2500_ReadStatus
  6513 ;;		_CC2500_RxData
  6514 ;;		_CC2500_TxData
  6515 ;;		_CC2500_WriteCommand
  6516 ;;		_getBuz_GO
  6517 ;;		_getRxData
  6518 ;; This function is called by:
  6519 ;;		_RF_Main
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _setRF_Main
  6525  0423                     _setRF_Main:	
  6526                           
  6527                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6528                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6529                           
  6530                           ;incstack = 0
  6531                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6532  0423  0021               	movlb	1	; select bank1
  6533  0424  1C3E               	btfss	_RF1^(0+128),0
  6534  0425  0008               	return
  6535                           
  6536                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6537  0426  319F  2766  3184   	fcall	_getBuz_GO
  6538  0429  0020               	movlb	0	; select bank0
  6539  042A  0821               	movf	?_getBuz_GO+1,w
  6540  042B  0420               	iorwf	?_getBuz_GO,w
  6541  042C  1D03               	skipz
  6542  042D  0008               	return
  6543                           
  6544                           ;RF_Control_B1.c: 68: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6545  042E  01E8               	clrf	_setRF_Main$4902
  6546  042F  0AE8               	incf	_setRF_Main$4902,f
  6547  0430  1F0C               	btfss	12,6	;volatile
  6548  0431  1A0C               	btfsc	12,4	;volatile
  6549  0432  2C37               	goto	l9041
  6550  0433  1C0C               	btfss	12,0	;volatile
  6551  0434  188D               	btfsc	13,1	;volatile
  6552  0435  2C37               	goto	l9041
  6553  0436  01E8               	clrf	_setRF_Main$4902
  6554  0437                     l9041:	
  6555  0437  0868               	movf	_setRF_Main$4902,w
  6556  0438  0021               	movlb	1	; select bank1
  6557  0439  13BE               	bcf	_RF1^(0+128),7
  6558  043A  1D03               	skipz
  6559  043B  17BE               	bsf	_RF1^(0+128),7
  6560                           
  6561                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  6562  043C  1BBE               	btfsc	_RF1^(0+128),7
  6563  043D  1B3E               	btfsc	_RF1^(0+128),6
  6564  043E  2C44               	goto	l1912
  6565                           
  6566                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  6567  043F  01C0               	clrf	(_RF1^(0+128)+2)
  6568  0440  01C1               	clrf	((_RF1+1)^(0+128)+2)
  6569                           
  6570                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  6571  0441  14BF               	bsf	(_RF1^(0+128)+1),1
  6572                           
  6573                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  6574  0442  11BE               	bcf	_RF1^(0+128),3
  6575                           
  6576                           ;RF_Control_B1.c: 76: } else {
  6577  0443  0008               	return
  6578  0444                     l1912:	
  6579                           
  6580                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6581  0444  18BF               	btfsc	(_RF1^(0+128)+1),1
  6582  0445  1B3E               	btfsc	_RF1^(0+128),6
  6583  0446  2C5B               	goto	l9063
  6584                           
  6585                           ;RF_Control_B1.c: 78: RF1.Count++;
  6586  0447  3001               	movlw	1
  6587  0448  07C0               	addwf	(_RF1^(0+128)+2),f
  6588  0449  3000               	movlw	0
  6589  044A  3DC1               	addwfc	((_RF1+1)^(0+128)+2),f
  6590                           
  6591                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6592  044B  3002               	movlw	2
  6593  044C  3EBE               	addlw	_RF1& (0+255)
  6594  044D  0086               	movwf	6
  6595  044E  0187               	clrf	7
  6596  044F  3F40               	moviw [0]fsr1
  6597  0450  0645               	xorwf	(_RF1^(0+128)+7),w
  6598  0451  1D03               	skipz
  6599  0452  2C55               	goto	u9185
  6600  0453  3F41               	moviw [1]fsr1
  6601  0454  0646               	xorwf	((_RF1+1)^(0+128)+7),w
  6602  0455                     u9185:	
  6603  0455  1D03               	skipz
  6604  0456  2CCE               	goto	l9117
  6605                           
  6606                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6607  0457  01C0               	clrf	(_RF1^(0+128)+2)
  6608  0458  01C1               	clrf	((_RF1+1)^(0+128)+2)
  6609                           
  6610                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6611  0459  10BF               	bcf	(_RF1^(0+128)+1),1
  6612                           
  6613                           ;RF_Control_B1.c: 82: }
  6614                           ;RF_Control_B1.c: 83: } else {
  6615  045A  2CCE               	goto	l9117
  6616  045B                     l9063:	
  6617                           
  6618                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6619  045B  01C0               	clrf	(_RF1^(0+128)+2)
  6620  045C  01C1               	clrf	((_RF1+1)^(0+128)+2)
  6621                           
  6622                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6623  045D  10BF               	bcf	(_RF1^(0+128)+1),1
  6624                           
  6625                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6626  045E  193E               	btfsc	_RF1^(0+128),2
  6627  045F  1B3E               	btfsc	_RF1^(0+128),6
  6628  0460  2C7C               	goto	l1917
  6629                           
  6630                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6631  0461  113E               	bcf	_RF1^(0+128),2
  6632                           
  6633                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6634  0462  11BE               	bcf	_RF1^(0+128),3
  6635                           
  6636                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6637  0463  10BE               	bcf	_RF1^(0+128),1
  6638                           
  6639                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6640  0464  303B               	movlw	59
  6641  0465  3191  21A4  3184   	fcall	_CC2500_ReadStatus
  6642                           
  6643                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6644  0468  0021               	movlb	1	; select bank1
  6645  0469  085D               	movf	_s_data^(0+128),w
  6646  046A  1903               	btfsc	3,2
  6647  046B  2C78               	goto	l1918
  6648                           
  6649                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6650  046C  3036               	movlw	54
  6651  046D  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6652                           
  6653                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6654  0470  303B               	movlw	59
  6655  0471  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6656                           
  6657                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6658  0474  303A               	movlw	58
  6659  0475  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6660  0478                     l1918:	
  6661                           
  6662                           ;RF_Control_B1.c: 97: }
  6663                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6664  0478  318A  2286  3184   	fcall	_CC2500_TxData
  6665                           
  6666                           ;RF_Control_B1.c: 100: } else {
  6667  047B  2CCE               	goto	l9117
  6668  047C                     l1917:	
  6669                           
  6670                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6671  047C  1DBE               	btfss	_RF1^(0+128),3
  6672  047D  2CB9               	goto	l1920
  6673                           
  6674                           ;RF_Control_B1.c: 103: CC2500_RxData();
  6675  047E  318D  2501  3184   	fcall	_CC2500_RxData
  6676                           
  6677                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  6678  0481  0021               	movlb	1	; select bank1
  6679  0482  1CBE               	btfss	_RF1^(0+128),1
  6680  0483  2CCE               	goto	l9117
  6681                           
  6682                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  6683  0484  10BE               	bcf	_RF1^(0+128),1
  6684                           
  6685                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  6686  0485  12BF               	bcf	(_RF1^(0+128)+1),5
  6687                           
  6688                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  6689  0486  01C8               	clrf	(_RF1^(0+128)+10)
  6690  0487  01C9               	clrf	((_RF1+1)^(0+128)+10)
  6691                           
  6692                           ;RF_Control_B1.c: 115: getRxData();
  6693  0488  318B  2352  3184   	fcall	_getRxData
  6694                           
  6695                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6696  048B  0021               	movlb	1	; select bank1
  6697  048C  14BF               	bsf	(_RF1^(0+128)+1),1
  6698                           
  6699                           ;RF_Control_B1.c: 119: RB5 = RB5 == 1 ? 0 : 1;
  6700  048D  3020               	movlw	32
  6701  048E  0020               	movlb	0	; select bank0
  6702  048F  068D               	xorwf	13,f
  6703                           
  6704                           ;RF_Control_B1.c: 120: if (RF1.Checked == 1) {
  6705  0490  0021               	movlb	1	; select bank1
  6706  0491  1DBF               	btfss	(_RF1^(0+128)+1),3
  6707  0492  2CA0               	goto	l9101
  6708                           
  6709                           ;RF_Control_B1.c: 121: if (RF1.RunTime > 20) {
  6710  0493  3000               	movlw	0
  6711  0494  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6712  0495  3015               	movlw	21
  6713  0496  1903               	skipnz
  6714  0497  0245               	subwf	(_RF1^(0+128)+7),w
  6715  0498  1C03               	skipc
  6716  0499  2C9E               	goto	l9099
  6717                           
  6718                           ;RF_Control_B1.c: 122: RF1.RunTime = 20;
  6719  049A  3014               	movlw	20
  6720  049B  00C5               	movwf	(_RF1^(0+128)+7)
  6721  049C  3000               	movlw	0
  6722  049D  00C6               	movwf	(_RF1^(0+128)+8)
  6723  049E                     l9099:	
  6724                           
  6725                           ;RF_Control_B1.c: 123: }
  6726                           ;RF_Control_B1.c: 124: RF1.CheckCount = 0;
  6727  049E  01C2               	clrf	(_RF1^(0+128)+4)
  6728                           
  6729                           ;RF_Control_B1.c: 125: } else {
  6730  049F  2CCE               	goto	l9117
  6731  04A0                     l9101:	
  6732                           
  6733                           ;RF_Control_B1.c: 126: RF1.CheckCount++;
  6734  04A0  3001               	movlw	1
  6735  04A1  0020               	movlb	0	; select bank0
  6736  04A2  00E7               	movwf	??_setRF_Main
  6737  04A3  0867               	movf	??_setRF_Main,w
  6738  04A4  0021               	movlb	1	; select bank1
  6739  04A5  07C2               	addwf	(_RF1^(0+128)+4),f
  6740                           
  6741                           ;RF_Control_B1.c: 127: if (RF1.CheckCount == 2) {
  6742  04A6  0842               	movf	(_RF1^(0+128)+4),w
  6743  04A7  3A02               	xorlw	2
  6744  04A8  1D03               	skipz
  6745  04A9  2CCE               	goto	l9117
  6746                           
  6747                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6748  04AA  01C2               	clrf	(_RF1^(0+128)+4)
  6749                           
  6750                           ;RF_Control_B1.c: 129: RF1.CheckedCounter = 0;
  6751  04AB  01C3               	clrf	(_RF1^(0+128)+5)
  6752  04AC  01C4               	clrf	((_RF1+1)^(0+128)+5)
  6753                           
  6754                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 300) {
  6755  04AD  3001               	movlw	1
  6756  04AE  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6757  04AF  302C               	movlw	44
  6758  04B0  1903               	skipnz
  6759  04B1  0245               	subwf	(_RF1^(0+128)+7),w
  6760  04B2  1803               	skipnc
  6761  04B3  2CCE               	goto	l9117
  6762                           
  6763                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6764  04B4  300A               	movlw	10
  6765  04B5  07C5               	addwf	(_RF1^(0+128)+7),f
  6766  04B6  3000               	movlw	0
  6767  04B7  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  6768                           
  6769                           ;RF_Control_B1.c: 132: }
  6770                           ;RF_Control_B1.c: 133: }
  6771                           ;RF_Control_B1.c: 134: }
  6772                           ;RF_Control_B1.c: 135: }
  6773                           ;RF_Control_B1.c: 136: } else {
  6774  04B8  2CCE               	goto	l9117
  6775  04B9                     l1920:	
  6776                           
  6777                           ;RF_Control_B1.c: 138: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6778  04B9  1DBE               	btfss	_RF1^(0+128),3
  6779  04BA  18BE               	btfsc	_RF1^(0+128),1
  6780  04BB  2CCE               	goto	l9117
  6781                           
  6782                           ;RF_Control_B1.c: 139: RF1.RxStatus = 1;
  6783  04BC  15BE               	bsf	_RF1^(0+128),3
  6784                           
  6785                           ;RF_Control_B1.c: 140: RF1.Correction = 1;
  6786  04BD  16BF               	bsf	(_RF1^(0+128)+1),5
  6787                           
  6788                           ;RF_Control_B1.c: 142: CC2500_WriteCommand(0x36);
  6789  04BE  3036               	movlw	54
  6790  04BF  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6791                           
  6792                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x3B);
  6793  04C2  303B               	movlw	59
  6794  04C3  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6795                           
  6796                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x3A);
  6797  04C6  303A               	movlw	58
  6798  04C7  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6799                           
  6800                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x34);
  6801  04CA  3034               	movlw	52
  6802  04CB  3190  2097  3184   	fcall	_CC2500_WriteCommand
  6803  04CE                     l9117:	
  6804                           
  6805                           ;RF_Control_B1.c: 147: }
  6806                           ;RF_Control_B1.c: 149: }
  6807                           ;RF_Control_B1.c: 150: }
  6808                           ;RF_Control_B1.c: 151: }
  6809                           ;RF_Control_B1.c: 152: if (RF1.RxStatus == 1) {
  6810  04CE  0021               	movlb	1	; select bank1
  6811  04CF  1DBE               	btfss	_RF1^(0+128),3
  6812  04D0  2CEF               	goto	l9129
  6813                           
  6814                           ;RF_Control_B1.c: 153: RF1.CheckedCounter++;
  6815  04D1  3001               	movlw	1
  6816  04D2  07C3               	addwf	(_RF1^(0+128)+5),f
  6817  04D3  3000               	movlw	0
  6818  04D4  3DC4               	addwfc	((_RF1+1)^(0+128)+5),f
  6819                           
  6820                           ;RF_Control_B1.c: 154: if (RF1.CheckedCounter == 100) {
  6821  04D5  3005               	movlw	5
  6822  04D6  3EBE               	addlw	_RF1& (0+255)
  6823  04D7  0086               	movwf	6
  6824  04D8  0187               	clrf	7
  6825  04D9  3F40               	moviw [0]fsr1
  6826  04DA  3A64               	xorlw	100
  6827  04DB  1D03               	skipz
  6828  04DC  2CDF               	goto	u9315
  6829  04DD  3F41               	moviw [1]fsr1
  6830  04DE  3A00               	xorlw	0
  6831  04DF                     u9315:	
  6832  04DF  1D03               	skipz
  6833  04E0  2CEF               	goto	l9129
  6834                           
  6835                           ;RF_Control_B1.c: 155: RF1.CheckedCounter = 0;
  6836  04E1  01C3               	clrf	(_RF1^(0+128)+5)
  6837  04E2  01C4               	clrf	((_RF1+1)^(0+128)+5)
  6838                           
  6839                           ;RF_Control_B1.c: 156: RF1.CheckCount = 0;
  6840  04E3  01C2               	clrf	(_RF1^(0+128)+4)
  6841                           
  6842                           ;RF_Control_B1.c: 157: if (RF1.RunTime > 20) {
  6843  04E4  3000               	movlw	0
  6844  04E5  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6845  04E6  3015               	movlw	21
  6846  04E7  1903               	skipnz
  6847  04E8  0245               	subwf	(_RF1^(0+128)+7),w
  6848  04E9  1C03               	skipc
  6849  04EA  2CEF               	goto	l9129
  6850                           
  6851                           ;RF_Control_B1.c: 158: RF1.RunTime -= 10;
  6852  04EB  300A               	movlw	10
  6853  04EC  02C5               	subwf	(_RF1^(0+128)+7),f
  6854  04ED  3000               	movlw	0
  6855  04EE  3BC6               	subwfb	((_RF1+1)^(0+128)+7),f
  6856  04EF                     l9129:	
  6857                           
  6858                           ;RF_Control_B1.c: 159: }
  6859                           ;RF_Control_B1.c: 160: }
  6860                           ;RF_Control_B1.c: 161: }
  6861                           ;RF_Control_B1.c: 162: if (RF1.Correction == 1) {
  6862  04EF  1EBF               	btfss	(_RF1^(0+128)+1),5
  6863  04F0  0008               	return
  6864                           
  6865                           ;RF_Control_B1.c: 163: RF1.CorrectionCounter++;
  6866  04F1  3001               	movlw	1
  6867  04F2  07C8               	addwf	(_RF1^(0+128)+10),f
  6868  04F3  3000               	movlw	0
  6869  04F4  3DC9               	addwfc	((_RF1+1)^(0+128)+10),f
  6870                           
  6871                           ;RF_Control_B1.c: 164: if (RF1.CorrectionCounter >= 30000) {
  6872  04F5  3075               	movlw	117
  6873  04F6  0249               	subwf	((_RF1+1)^(0+128)+10),w
  6874  04F7  3030               	movlw	48
  6875  04F8  1903               	skipnz
  6876  04F9  0248               	subwf	(_RF1^(0+128)+10),w
  6877  04FA  1C03               	skipc
  6878  04FB  0008               	return
  6879                           
  6880                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter = 0;
  6881  04FC  01C8               	clrf	(_RF1^(0+128)+10)
  6882  04FD  01C9               	clrf	((_RF1+1)^(0+128)+10)
  6883                           
  6884                           ;RF_Control_B1.c: 166: RF1.RxStatus = 0;
  6885  04FE  11BE               	bcf	_RF1^(0+128),3
  6886                           
  6887                           ;RF_Control_B1.c: 167: RF1.ReceiveGO = 0;
  6888  04FF  10BE               	bcf	_RF1^(0+128),1
  6889  0500  0008               	return
  6890  0501                     __end_of_setRF_Main:	
  6891                           
  6892                           	psect	text28
  6893  0B52                     __ptext28:	
  6894 ;; *************** function _getRxData *****************
  6895 ;; Defined at:
  6896 ;;		line 250 in file "../src/RF_Control_B1.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:   12
  6917 ;; This function calls:
  6918 ;;		_setControl_Lights_Table
  6919 ;;		_setLog_Code
  6920 ;; This function is called by:
  6921 ;;		_setRF_Main
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           
  6926                           ;psect for function _getRxData
  6927  0B52                     _getRxData:	
  6928                           
  6929                           ;RF_Control_B1.c: 251: if (RF1.Learn == 1) {
  6930                           
  6931                           ;incstack = 0
  6932                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6933  0B52  0021               	movlb	1	; select bank1
  6934  0B53  1F3E               	btfss	_RF1^(0+128),6
  6935  0B54  2B65               	goto	l8537
  6936                           
  6937                           ;RF_Control_B1.c: 252: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6938  0B55  0022               	movlb	2	; select bank2
  6939  0B56  08A0               	movf	_RF_Data^(0+256),f
  6940  0B57  1D03               	skipz
  6941  0B58  2B62               	goto	l1951
  6942  0B59  0821               	movf	(_RF_Data^(0+256)+1),w
  6943  0B5A  3A64               	xorlw	100
  6944  0B5B  1D03               	skipz
  6945  0B5C  2B62               	goto	l1951
  6946                           
  6947                           ;RF_Control_B1.c: 253: setLog_Code();
  6948  0B5D  3193  2394         	fcall	_setLog_Code
  6949                           
  6950                           ;RF_Control_B1.c: 254: RF1.Checked = 1;
  6951  0B5F  0021               	movlb	1	; select bank1
  6952  0B60  15BF               	bsf	(_RF1^(0+128)+1),3
  6953                           
  6954                           ;RF_Control_B1.c: 255: } else {
  6955  0B61  0008               	return
  6956  0B62                     l1951:	
  6957                           
  6958                           ;RF_Control_B1.c: 256: RF1.Checked = 0;
  6959  0B62  0021               	movlb	1	; select bank1
  6960  0B63  11BF               	bcf	(_RF1^(0+128)+1),3
  6961                           
  6962                           ;RF_Control_B1.c: 257: }
  6963                           ;RF_Control_B1.c: 258: } else {
  6964  0B64  0008               	return
  6965  0B65                     l8537:	
  6966                           
  6967                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6968  0B65  0022               	movlb	2	; select bank2
  6969  0B66  08A0               	movf	_RF_Data^(0+256),f
  6970  0B67  1D03               	skipz
  6971  0B68  2BA3               	goto	l8559
  6972  0B69  0821               	movf	(_RF_Data^(0+256)+1),w
  6973  0B6A  3A02               	xorlw	2
  6974  0B6B  1D03               	skipz
  6975  0B6C  2BA3               	goto	l8559
  6976                           
  6977                           ;RF_Control_B1.c: 261: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6978  0B6D  082C               	movf	(_RF_Data^(0+256)+12),w
  6979  0B6E  3AFF               	xorlw	255
  6980  0B6F  1D03               	skipz
  6981  0B70  2B7D               	goto	l8549
  6982  0B71  082D               	movf	(_RF_Data^(0+256)+13),w
  6983  0B72  3AFF               	xorlw	255
  6984  0B73  1D03               	skipz
  6985  0B74  2B7D               	goto	l8549
  6986  0B75  082E               	movf	(_RF_Data^(0+256)+14),w
  6987  0B76  3AFF               	xorlw	255
  6988  0B77  1D03               	skipz
  6989  0B78  2B7D               	goto	l8549
  6990                           
  6991                           ;RF_Control_B1.c: 262: __nop();
  6992  0B79  0000               	nop
  6993                           
  6994                           ;RF_Control_B1.c: 263: RF1.Checked = 0;
  6995  0B7A  0021               	movlb	1	; select bank1
  6996  0B7B  11BF               	bcf	(_RF1^(0+128)+1),3
  6997                           
  6998                           ;RF_Control_B1.c: 264: } else {
  6999  0B7C  0008               	return
  7000  0B7D                     l8549:	
  7001                           
  7002                           ;RF_Control_B1.c: 265: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7003  0B7D  0020               	movlb	0	; select bank0
  7004  0B7E  086D               	movf	_product,w
  7005  0B7F  3E0C               	addlw	12
  7006  0B80  0086               	movwf	6
  7007  0B81  3001               	movlw	1	; select bank2/3
  7008  0B82  0087               	movwf	7
  7009  0B83  0022               	movlb	2	; select bank2
  7010  0B84  082C               	movf	(_RF_Data^(0+256)+12),w
  7011  0B85  0601               	xorwf	1,w
  7012  0B86  1D03               	skipz
  7013  0B87  0008               	return
  7014  0B88  0020               	movlb	0	; select bank0
  7015  0B89  086D               	movf	_product,w
  7016  0B8A  3E0D               	addlw	13
  7017  0B8B  0086               	movwf	6
  7018  0B8C  3001               	movlw	1	; select bank2/3
  7019  0B8D  0087               	movwf	7
  7020  0B8E  0022               	movlb	2	; select bank2
  7021  0B8F  082D               	movf	(_RF_Data^(0+256)+13),w
  7022  0B90  0601               	xorwf	1,w
  7023  0B91  1D03               	skipz
  7024  0B92  0008               	return
  7025  0B93  0020               	movlb	0	; select bank0
  7026  0B94  086D               	movf	_product,w
  7027  0B95  3E0E               	addlw	14
  7028  0B96  0086               	movwf	6
  7029  0B97  3001               	movlw	1	; select bank2/3
  7030  0B98  0087               	movwf	7
  7031  0B99  0022               	movlb	2	; select bank2
  7032  0B9A  082E               	movf	(_RF_Data^(0+256)+14),w
  7033  0B9B  0601               	xorwf	1,w
  7034  0B9C  1D03               	skipz
  7035  0B9D  0008               	return
  7036                           
  7037                           ;RF_Control_B1.c: 266: setControl_Lights_Table();
  7038  0B9E  318A  22EB         	fcall	_setControl_Lights_Table
  7039                           
  7040                           ;RF_Control_B1.c: 267: RF1.Checked = 1;
  7041  0BA0  0021               	movlb	1	; select bank1
  7042  0BA1  15BF               	bsf	(_RF1^(0+128)+1),3
  7043                           
  7044                           ;RF_Control_B1.c: 268: }
  7045                           ;RF_Control_B1.c: 269: }
  7046                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7047  0BA2  0008               	return
  7048  0BA3                     l8559:	
  7049  0BA3  0022               	movlb	2	; select bank2
  7050  0BA4  0820               	movf	_RF_Data^(0+256),w
  7051  0BA5  3AFF               	xorlw	255
  7052  0BA6  1D03               	skipz
  7053  0BA7  2BAE               	goto	l8565
  7054  0BA8  0821               	movf	(_RF_Data^(0+256)+1),w
  7055  0BA9  3A02               	xorlw	2
  7056  0BAA  1D03               	skipz
  7057  0BAB  2BAE               	goto	l8565
  7058                           
  7059                           ;RF_Control_B1.c: 271: __nop();
  7060  0BAC  0000               	nop
  7061                           
  7062                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7063  0BAD  0008               	return
  7064  0BAE                     l8565:	
  7065  0BAE  0022               	movlb	2	; select bank2
  7066  0BAF  08A0               	movf	_RF_Data^(0+256),f
  7067  0BB0  1D03               	skipz
  7068  0BB1  2BB8               	goto	l1961
  7069  0BB2  0821               	movf	(_RF_Data^(0+256)+1),w
  7070  0BB3  3A65               	xorlw	101
  7071  0BB4  1D03               	skipz
  7072  0BB5  2BB8               	goto	l1961
  7073                           
  7074                           ;RF_Control_B1.c: 273: __nop();
  7075  0BB6  0000               	nop
  7076                           
  7077                           ;RF_Control_B1.c: 274: } else {
  7078  0BB7  0008               	return
  7079  0BB8                     l1961:	
  7080                           
  7081                           ;RF_Control_B1.c: 275: RF1.Checked = 0;
  7082  0BB8  0021               	movlb	1	; select bank1
  7083  0BB9  11BF               	bcf	(_RF1^(0+128)+1),3
  7084  0BBA  0008               	return
  7085  0BBB                     __end_of_getRxData:	
  7086                           
  7087                           	psect	text29
  7088  1394                     __ptext29:	
  7089 ;; *************** function _setLog_Code *****************
  7090 ;; Defined at:
  7091 ;;		line 285 in file "../src/RF_Control_B1.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;		None
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;		None               void
  7098 ;; Registers used:
  7099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;Total ram usage:        1 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    7
  7112 ;; This function calls:
  7113 ;;		_setBuz
  7114 ;; This function is called by:
  7115 ;;		_getRxData
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function _setLog_Code
  7121  1394                     _setLog_Code:	
  7122                           
  7123                           ;RF_Control_B1.c: 286: product->Data[12]=RF_Data[12];
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7127  1394  0022               	movlb	2	; select bank2
  7128  1395  082C               	movf	(_RF_Data^(0+256)+12),w
  7129  1396  0020               	movlb	0	; select bank0
  7130  1397  00AD               	movwf	??_setLog_Code
  7131  1398  086D               	movf	_product,w
  7132  1399  3E0C               	addlw	12
  7133  139A  0086               	movwf	6
  7134  139B  3001               	movlw	1	; select bank2/3
  7135  139C  0087               	movwf	7
  7136  139D  082D               	movf	??_setLog_Code,w
  7137  139E  0081               	movwf	1
  7138                           
  7139                           ;RF_Control_B1.c: 287: product->Data[13]=RF_Data[13];
  7140  139F  0022               	movlb	2	; select bank2
  7141  13A0  082D               	movf	(_RF_Data^(0+256)+13),w
  7142  13A1  0020               	movlb	0	; select bank0
  7143  13A2  00AD               	movwf	??_setLog_Code
  7144  13A3  086D               	movf	_product,w
  7145  13A4  3E0D               	addlw	13
  7146  13A5  0086               	movwf	6
  7147  13A6  3001               	movlw	1	; select bank2/3
  7148  13A7  0087               	movwf	7
  7149  13A8  082D               	movf	??_setLog_Code,w
  7150  13A9  0081               	movwf	1
  7151                           
  7152                           ;RF_Control_B1.c: 288: product->Data[14]=RF_Data[14];
  7153  13AA  0022               	movlb	2	; select bank2
  7154  13AB  082E               	movf	(_RF_Data^(0+256)+14),w
  7155  13AC  0020               	movlb	0	; select bank0
  7156  13AD  00AD               	movwf	??_setLog_Code
  7157  13AE  086D               	movf	_product,w
  7158  13AF  3E0E               	addlw	14
  7159  13B0  0086               	movwf	6
  7160  13B1  3001               	movlw	1	; select bank2/3
  7161  13B2  0087               	movwf	7
  7162  13B3  082D               	movf	??_setLog_Code,w
  7163  13B4  0081               	movwf	1
  7164                           
  7165                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  7166  13B5  3064               	movlw	100
  7167  13B6  00A9               	movwf	setBuz@time
  7168  13B7  3000               	movlw	0
  7169  13B8  00AA               	movwf	setBuz@time+1
  7170  13B9  3001               	movlw	1
  7171  13BA  3188  2059  3193   	fcall	_setBuz
  7172                           
  7173                           ;RF_Control_B1.c: 290: RF1.Learn = 0;
  7174  13BD  0021               	movlb	1	; select bank1
  7175  13BE  133E               	bcf	_RF1^(0+128),6
  7176                           
  7177                           ;RF_Control_B1.c: 291: if (myMain.First) {
  7178  13BF  1FA0               	btfss	_myMain^(0+128),7
  7179  13C0  2BC3               	goto	l1966
  7180                           
  7181                           ;RF_Control_B1.c: 292: Memory.LoopSave=1;
  7182  13C1  0023               	movlb	3	; select bank3
  7183  13C2  1544               	bsf	(_Memory^(0+384)+36),2
  7184  13C3                     l1966:	
  7185                           
  7186                           ;RF_Control_B1.c: 293: }
  7187                           ;RF_Control_B1.c: 294: Memory.Modify=1;
  7188  13C3  0023               	movlb	3	; select bank3
  7189  13C4  1444               	bsf	(_Memory^(0+384)+36),0
  7190  13C5  0008               	return
  7191  13C6                     __end_of_setLog_Code:	
  7192                           
  7193                           	psect	text30
  7194  0AEB                     __ptext30:	
  7195 ;; *************** function _setControl_Lights_Table *****************
  7196 ;; Defined at:
  7197 ;;		line 298 in file "../src/RF_Control_B1.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;		None               void
  7204 ;; Registers used:
  7205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;Total ram usage:        0 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:   11
  7218 ;; This function calls:
  7219 ;;		_setBuz
  7220 ;;		_setDimmerLights
  7221 ;;		_setRFSW_AdjControl
  7222 ;;		_setRFSW_Control
  7223 ;;		_setRFSW_Status
  7224 ;;		_setSw_Status
  7225 ;;		_setTxData
  7226 ;; This function is called by:
  7227 ;;		_getRxData
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           
  7232                           ;psect for function _setControl_Lights_Table
  7233  0AEB                     _setControl_Lights_Table:	
  7234                           
  7235                           ;RF_Control_B1.c: 299: if (RF_Data[15] == 0x00) {
  7236                           
  7237                           ;incstack = 0
  7238                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7239  0AEB  0022               	movlb	2	; select bank2
  7240  0AEC  08AF               	movf	(_RF_Data^(0+256)+15),f
  7241  0AED  1D03               	skipz
  7242  0AEE  2B25               	goto	l8261
  7243                           
  7244                           ;RF_Control_B1.c: 301: setDimmerLights(1, 0);
  7245  0AEF  0020               	movlb	0	; select bank0
  7246  0AF0  01A4               	clrf	setDimmerLights@status
  7247  0AF1  3001               	movlw	1
  7248  0AF2  318D  25E8  318A   	fcall	_setDimmerLights
  7249                           
  7250                           ;RF_Control_B1.c: 302: setRFSW_Status(1, 0);
  7251  0AF5  0020               	movlb	0	; select bank0
  7252  0AF6  01A2               	clrf	setRFSW_Status@command
  7253  0AF7  3001               	movlw	1
  7254  0AF8  319E  26AD  318A   	fcall	_setRFSW_Status
  7255                           
  7256                           ;RF_Control_B1.c: 303: setSw_Status(1, 0);
  7257  0AFB  0020               	movlb	0	; select bank0
  7258  0AFC  01A2               	clrf	setSw_Status@command
  7259  0AFD  3001               	movlw	1
  7260  0AFE  319E  26C9  318A   	fcall	_setSw_Status
  7261                           
  7262                           ;RF_Control_B1.c: 316: product->Data[9]=0;
  7263  0B01  0020               	movlb	0	; select bank0
  7264  0B02  086D               	movf	_product,w
  7265  0B03  3E09               	addlw	9
  7266  0B04  0086               	movwf	6
  7267  0B05  3001               	movlw	1	; select bank2/3
  7268  0B06  0087               	movwf	7
  7269  0B07  0181               	clrf	1
  7270                           
  7271                           ;RF_Control_B1.c: 317: product->Data[11]=0;
  7272  0B08  086D               	movf	_product,w
  7273  0B09  3E0B               	addlw	11
  7274  0B0A  0086               	movwf	6
  7275  0B0B  3001               	movlw	1	; select bank2/3
  7276  0B0C  0087               	movwf	7
  7277  0B0D  0181               	clrf	1
  7278                           
  7279                           ;RF_Control_B1.c: 318: product->Data[15]=0;
  7280  0B0E  086D               	movf	_product,w
  7281  0B0F  3E0F               	addlw	15
  7282  0B10  0086               	movwf	6
  7283  0B11  3001               	movlw	1	; select bank2/3
  7284  0B12  0087               	movwf	7
  7285  0B13  0181               	clrf	1
  7286                           
  7287                           ;RF_Control_B1.c: 319: product->Data[17]=0;
  7288  0B14  086D               	movf	_product,w
  7289  0B15  3E11               	addlw	17
  7290  0B16  0086               	movwf	6
  7291  0B17  3001               	movlw	1	; select bank2/3
  7292  0B18  0087               	movwf	7
  7293  0B19  0181               	clrf	1
  7294                           
  7295                           ;RF_Control_B1.c: 320: setBuz(1, 100);
  7296  0B1A  3064               	movlw	100
  7297  0B1B  00A9               	movwf	setBuz@time
  7298  0B1C  3000               	movlw	0
  7299  0B1D  00AA               	movwf	setBuz@time+1
  7300  0B1E  3001               	movlw	1
  7301  0B1F  3188  2059  318A   	fcall	_setBuz
  7302                           
  7303                           ;RF_Control_B1.c: 321: setTxData();
  7304  0B22  3185  25C8         	fcall	_setTxData
  7305                           
  7306                           ;RF_Control_B1.c: 322: } else if (RF_Data[15] == 0x20) {
  7307  0B24  0008               	return
  7308  0B25                     l8261:	
  7309  0B25  0022               	movlb	2	; select bank2
  7310  0B26  082F               	movf	(_RF_Data^(0+256)+15),w
  7311  0B27  3A20               	xorlw	32
  7312  0B28  1D03               	skipz
  7313  0B29  2B40               	goto	l8267
  7314                           
  7315                           ;RF_Control_B1.c: 323: product->Data[9]=0;
  7316  0B2A  0020               	movlb	0	; select bank0
  7317  0B2B  086D               	movf	_product,w
  7318  0B2C  3E09               	addlw	9
  7319  0B2D  0086               	movwf	6
  7320  0B2E  3001               	movlw	1	; select bank2/3
  7321  0B2F  0087               	movwf	7
  7322  0B30  0181               	clrf	1
  7323                           
  7324                           ;RF_Control_B1.c: 324: product->Data[11]=0;
  7325  0B31  086D               	movf	_product,w
  7326  0B32  3E0B               	addlw	11
  7327  0B33  0086               	movwf	6
  7328  0B34  3001               	movlw	1	; select bank2/3
  7329  0B35  0087               	movwf	7
  7330  0B36  0181               	clrf	1
  7331                           
  7332                           ;RF_Control_B1.c: 325: product->Data[17]=0;
  7333  0B37  086D               	movf	_product,w
  7334  0B38  3E11               	addlw	17
  7335  0B39  0086               	movwf	6
  7336  0B3A  3001               	movlw	1	; select bank2/3
  7337  0B3B  0087               	movwf	7
  7338  0B3C  0181               	clrf	1
  7339                           
  7340                           ;RF_Control_B1.c: 326: setTxData();
  7341  0B3D  3185  25C8         	fcall	_setTxData
  7342                           
  7343                           ;RF_Control_B1.c: 327: }
  7344  0B3F  0008               	return
  7345  0B40                     l8267:	
  7346                           
  7347                           ;RF_Control_B1.c: 329: else if (RF_Data[15] == 0x01) {
  7348  0B40  0022               	movlb	2	; select bank2
  7349  0B41  082F               	movf	(_RF_Data^(0+256)+15),w
  7350  0B42  3A01               	xorlw	1
  7351  0B43  1D03               	skipz
  7352  0B44  2B49               	goto	l8271
  7353                           
  7354                           ;RF_Control_B1.c: 330: setRFSW_Control(1);
  7355  0B45  3001               	movlw	1
  7356  0B46  318F  2775         	fcall	_setRFSW_Control
  7357                           
  7358                           ;RF_Control_B1.c: 331: }
  7359  0B48  0008               	return
  7360  0B49                     l8271:	
  7361                           
  7362                           ;RF_Control_B1.c: 333: else if (RF_Data[15] == 0x11) {
  7363  0B49  0022               	movlb	2	; select bank2
  7364  0B4A  082F               	movf	(_RF_Data^(0+256)+15),w
  7365  0B4B  3A11               	xorlw	17
  7366  0B4C  1D03               	skipz
  7367  0B4D  0008               	return
  7368                           
  7369                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7370  0B4E  3001               	movlw	1
  7371  0B4F  3194  246A         	fcall	_setRFSW_AdjControl
  7372  0B51  0008               	return
  7373  0B52                     __end_of_setControl_Lights_Table:	
  7374                           
  7375                           	psect	text31
  7376  0F75                     __ptext31:	
  7377 ;; *************** function _setRFSW_Control *****************
  7378 ;; Defined at:
  7379 ;;		line 386 in file "../src/RF_Control_B1.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  sw              1    wreg     unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  sw              1   67[BANK0 ] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;		None               void
  7386 ;; Registers used:
  7387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;Total ram usage:        2 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    9
  7400 ;; This function calls:
  7401 ;;		_RfSWPointSelect
  7402 ;;		_setBuz
  7403 ;;		_setDelayOff_GO
  7404 ;;		_setDimmerLights_Switch
  7405 ;;		_setDimmerLights_Trigger
  7406 ;;		_setRF_DimmerLights
  7407 ;;		_setSw_Status
  7408 ;;		_setTxData
  7409 ;; This function is called by:
  7410 ;;		_setControl_Lights_Table
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _setRFSW_Control
  7416  0F75                     _setRFSW_Control:	
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7420                           ;setRFSW_Control@sw stored from wreg
  7421  0F75  0020               	movlb	0	; select bank0
  7422  0F76  00E3               	movwf	setRFSW_Control@sw
  7423                           
  7424                           ;RF_Control_B1.c: 387: RfSWPointSelect(sw);
  7425  0F77  0863               	movf	setRFSW_Control@sw,w
  7426  0F78  319E  262A  318F   	fcall	_RfSWPointSelect
  7427                           
  7428                           ;RF_Control_B1.c: 388: if (RFSW->Status == 0) {
  7429  0F7B  0879               	movf	_RFSW,w
  7430  0F7C  0086               	movwf	6
  7431  0F7D  0187               	clrf	7
  7432  0F7E  1801               	btfsc	1,0
  7433  0F7F  2FB4               	goto	l8109
  7434                           
  7435                           ;RF_Control_B1.c: 389: if (RF_Data[16] == 0x80) {
  7436  0F80  0022               	movlb	2	; select bank2
  7437  0F81  0830               	movf	(_RF_Data^(0+256)+16),w
  7438  0F82  3A80               	xorlw	128
  7439  0F83  1D03               	skipz
  7440  0F84  2F92               	goto	l8099
  7441                           
  7442                           ;RF_Control_B1.c: 390: setDelayOff_GO(sw, 1, RF_Data[17]);
  7443  0F85  0020               	movlb	0	; select bank0
  7444  0F86  01AA               	clrf	setDelayOff_GO@command
  7445  0F87  0AAA               	incf	setDelayOff_GO@command,f
  7446  0F88  0022               	movlb	2	; select bank2
  7447  0F89  0831               	movf	(_RF_Data^(0+256)+17),w
  7448  0F8A  0020               	movlb	0	; select bank0
  7449  0F8B  00E2               	movwf	??_setRFSW_Control
  7450  0F8C  0862               	movf	??_setRFSW_Control,w
  7451  0F8D  00AB               	movwf	setDelayOff_GO@value
  7452  0F8E  0863               	movf	setRFSW_Control@sw,w
  7453  0F8F  3189  21C6  318F   	fcall	_setDelayOff_GO
  7454  0F92                     l8099:	
  7455                           
  7456                           ;RF_Control_B1.c: 391: }
  7457                           ;RF_Control_B1.c: 392: RFSW->Status = 1;
  7458  0F92  0879               	movf	_RFSW,w
  7459  0F93  0086               	movwf	6
  7460  0F94  0187               	clrf	7
  7461  0F95  1401               	bsf	1,0
  7462                           
  7463                           ;RF_Control_B1.c: 393: setSw_Status(sw, 1);
  7464  0F96  0020               	movlb	0	; select bank0
  7465  0F97  01A2               	clrf	setSw_Status@command
  7466  0F98  0AA2               	incf	setSw_Status@command,f
  7467  0F99  0863               	movf	setRFSW_Control@sw,w
  7468  0F9A  319E  26C9  318F   	fcall	_setSw_Status
  7469                           
  7470                           ;RF_Control_B1.c: 395: setDimmerLights_Trigger(sw, 1);
  7471  0F9D  0020               	movlb	0	; select bank0
  7472  0F9E  01A2               	clrf	setDimmerLights_Trigger@command
  7473  0F9F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7474  0FA0  0863               	movf	setRFSW_Control@sw,w
  7475  0FA1  319F  2715  318F   	fcall	_setDimmerLights_Trigger
  7476                           
  7477                           ;RF_Control_B1.c: 396: setDimmerLights_Switch(sw, 1);
  7478  0FA4  0020               	movlb	0	; select bank0
  7479  0FA5  01A2               	clrf	setDimmerLights_Switch@command
  7480  0FA6  0AA2               	incf	setDimmerLights_Switch@command,f
  7481  0FA7  0863               	movf	setRFSW_Control@sw,w
  7482  0FA8  319F  2705  318F   	fcall	_setDimmerLights_Switch
  7483                           
  7484                           ;RF_Control_B1.c: 398: setRF_DimmerLights(sw, RFSW->Status);
  7485  0FAB  0879               	movf	_RFSW,w
  7486  0FAC  0086               	movwf	6
  7487  0FAD  0187               	clrf	7
  7488  0FAE  3000               	movlw	0
  7489  0FAF  1801               	btfsc	1,0
  7490  0FB0  3001               	movlw	1
  7491  0FB1  0020               	movlb	0	; select bank0
  7492  0FB2  00DD               	movwf	setRF_DimmerLights@on
  7493  0FB3  2FF0               	goto	L1
  7494  0FB4                     l8109:	
  7495                           ;RF_Control_B1.c: 399: } else {
  7496                           
  7497                           
  7498                           ;RF_Control_B1.c: 400: if (RF_Data[16] == 0x80) {
  7499  0FB4  0022               	movlb	2	; select bank2
  7500  0FB5  0830               	movf	(_RF_Data^(0+256)+16),w
  7501  0FB6  3A80               	xorlw	128
  7502  0FB7  1D03               	skipz
  7503  0FB8  2FCA               	goto	l8113
  7504                           
  7505                           ;RF_Control_B1.c: 401: setDelayOff_GO(sw, 1, RF_Data[17]);
  7506  0FB9  0020               	movlb	0	; select bank0
  7507  0FBA  01AA               	clrf	setDelayOff_GO@command
  7508  0FBB  0AAA               	incf	setDelayOff_GO@command,f
  7509  0FBC  0022               	movlb	2	; select bank2
  7510  0FBD  0831               	movf	(_RF_Data^(0+256)+17),w
  7511  0FBE  0020               	movlb	0	; select bank0
  7512  0FBF  00E2               	movwf	??_setRFSW_Control
  7513  0FC0  0862               	movf	??_setRFSW_Control,w
  7514  0FC1  00AB               	movwf	setDelayOff_GO@value
  7515  0FC2  0863               	movf	setRFSW_Control@sw,w
  7516  0FC3  3189  21C6  318F   	fcall	_setDelayOff_GO
  7517                           
  7518                           ;RF_Control_B1.c: 402: setRF_DimmerLights(sw, 1);
  7519  0FC6  0020               	movlb	0	; select bank0
  7520  0FC7  01DD               	clrf	setRF_DimmerLights@on
  7521  0FC8  0ADD               	incf	setRF_DimmerLights@on,f
  7522  0FC9  2FF0               	goto	L1
  7523  0FCA                     l8113:	
  7524                           ;RF_Control_B1.c: 403: } else {
  7525                           
  7526                           
  7527                           ;RF_Control_B1.c: 404: RFSW->Status = 0;
  7528  0FCA  0879               	movf	_RFSW,w
  7529  0FCB  0086               	movwf	6
  7530  0FCC  0187               	clrf	7
  7531  0FCD  1001               	bcf	1,0
  7532                           
  7533                           ;RF_Control_B1.c: 405: setSw_Status(sw, 0);
  7534  0FCE  0020               	movlb	0	; select bank0
  7535  0FCF  01A2               	clrf	setSw_Status@command
  7536  0FD0  0863               	movf	setRFSW_Control@sw,w
  7537  0FD1  319E  26C9  318F   	fcall	_setSw_Status
  7538                           
  7539                           ;RF_Control_B1.c: 407: setDimmerLights_Trigger(sw, 1);
  7540  0FD4  0020               	movlb	0	; select bank0
  7541  0FD5  01A2               	clrf	setDimmerLights_Trigger@command
  7542  0FD6  0AA2               	incf	setDimmerLights_Trigger@command,f
  7543  0FD7  0863               	movf	setRFSW_Control@sw,w
  7544  0FD8  319F  2715  318F   	fcall	_setDimmerLights_Trigger
  7545                           
  7546                           ;RF_Control_B1.c: 408: setDimmerLights_Switch(sw, RFSW->Status);
  7547  0FDB  0879               	movf	_RFSW,w
  7548  0FDC  0086               	movwf	6
  7549  0FDD  0187               	clrf	7
  7550  0FDE  3000               	movlw	0
  7551  0FDF  1801               	btfsc	1,0
  7552  0FE0  3001               	movlw	1
  7553  0FE1  0020               	movlb	0	; select bank0
  7554  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7555  0FE3  0863               	movf	setRFSW_Control@sw,w
  7556  0FE4  319F  2705  318F   	fcall	_setDimmerLights_Switch
  7557                           
  7558                           ;RF_Control_B1.c: 410: setDelayOff_GO(sw, 0, 0);
  7559  0FE7  0020               	movlb	0	; select bank0
  7560  0FE8  01AA               	clrf	setDelayOff_GO@command
  7561  0FE9  01AB               	clrf	setDelayOff_GO@value
  7562  0FEA  0863               	movf	setRFSW_Control@sw,w
  7563  0FEB  3189  21C6  318F   	fcall	_setDelayOff_GO
  7564                           
  7565                           ;RF_Control_B1.c: 411: setRF_DimmerLights(sw, 0);
  7566  0FEE  0020               	movlb	0	; select bank0
  7567  0FEF  01DD               	clrf	setRF_DimmerLights@on
  7568  0FF0                     L1:	
  7569  0FF0  0863               	movf	setRFSW_Control@sw,w
  7570  0FF1  318C  2426  318F   	fcall	_setRF_DimmerLights
  7571                           
  7572                           ;RF_Control_B1.c: 412: }
  7573                           ;RF_Control_B1.c: 413: }
  7574                           ;RF_Control_B1.c: 414: setBuz(1, 100);
  7575  0FF4  3064               	movlw	100
  7576  0FF5  0020               	movlb	0	; select bank0
  7577  0FF6  00A9               	movwf	setBuz@time
  7578  0FF7  3000               	movlw	0
  7579  0FF8  00AA               	movwf	setBuz@time+1
  7580  0FF9  3001               	movlw	1
  7581  0FFA  3188  2059  318F   	fcall	_setBuz
  7582                           
  7583                           ;RF_Control_B1.c: 415: setTxData();
  7584  0FFD  3185  25C8         	fcall	_setTxData
  7585  0FFF  0008               	return
  7586  1000                     __end_of_setRFSW_Control:	
  7587                           
  7588                           	psect	text32
  7589  09C6                     __ptext32:	
  7590 ;; *************** function _setDelayOff_GO *****************
  7591 ;; Defined at:
  7592 ;;		line 86 in file "../src/DelayOff_B1.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  sw              1    wreg     unsigned char 
  7595 ;;  command         1   10[BANK0 ] unsigned char 
  7596 ;;  value           1   11[BANK0 ] unsigned char 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  sw              1   14[BANK0 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;		None               void
  7601 ;; Registers used:
  7602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7608 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;Total ram usage:        5 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    7
  7615 ;; This function calls:
  7616 ;;		_DelayOffPointSelect
  7617 ;;		_DelayTimejudge
  7618 ;; This function is called by:
  7619 ;;		_setRFSW_Control
  7620 ;;		_Sw_DimmerOffFunc
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _setDelayOff_GO
  7626  09C6                     _setDelayOff_GO:	
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7630                           ;setDelayOff_GO@sw stored from wreg
  7631  09C6  0020               	movlb	0	; select bank0
  7632  09C7  00AE               	movwf	setDelayOff_GO@sw
  7633                           
  7634                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7635  09C8  082E               	movf	setDelayOff_GO@sw,w
  7636  09C9  319E  2609  3189   	fcall	_DelayOffPointSelect
  7637                           
  7638                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7639  09CC  0020               	movlb	0	; select bank0
  7640  09CD  0869               	movf	_DelayOff,w
  7641  09CE  0086               	movwf	6
  7642  09CF  0187               	clrf	7
  7643  09D0  1C01               	btfss	1,0
  7644  09D1  0008               	return
  7645                           
  7646                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7647  09D2  082A               	movf	setDelayOff_GO@command,w
  7648  09D3  3A01               	xorlw	1
  7649  09D4  3000               	movlw	0
  7650  09D5  1903               	skipnz
  7651  09D6  3001               	movlw	1
  7652  09D7  00AC               	movwf	??_setDelayOff_GO
  7653  09D8  0869               	movf	_DelayOff,w
  7654  09D9  0086               	movwf	6
  7655  09DA  0187               	clrf	7
  7656  09DB  0DAC               	rlf	??_setDelayOff_GO,f
  7657  09DC  0801               	movf	1,w
  7658  09DD  062C               	xorwf	??_setDelayOff_GO,w
  7659  09DE  39FD               	andlw	-3
  7660  09DF  062C               	xorwf	??_setDelayOff_GO,w
  7661  09E0  0081               	movwf	1
  7662                           
  7663                           ;DelayOff_B1.c: 90: if (command == 1) {
  7664  09E1  082A               	movf	setDelayOff_GO@command,w
  7665  09E2  3A01               	xorlw	1
  7666  09E3  1D03               	skipz
  7667  09E4  2A0E               	goto	l7913
  7668                           
  7669                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7670  09E5  082B               	movf	setDelayOff_GO@value,w
  7671  09E6  3192  2283  3189   	fcall	_DelayTimejudge
  7672  09E9  0020               	movlb	0	; select bank0
  7673  09EA  00AC               	movwf	??_setDelayOff_GO
  7674  09EB  0869               	movf	_DelayOff,w
  7675  09EC  0086               	movwf	6
  7676  09ED  0187               	clrf	7
  7677  09EE  082C               	movf	??_setDelayOff_GO,w
  7678  09EF  0081               	movwf	1
  7679                           
  7680                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7681  09F0  300F               	movlw	15
  7682  09F1  052B               	andwf	setDelayOff_GO@value,w
  7683  09F2  00AC               	movwf	??_setDelayOff_GO
  7684  09F3  082C               	movf	??_setDelayOff_GO,w
  7685  09F4  3A05               	xorlw	5
  7686  09F5  1903               	skipnz
  7687  09F6  29FB               	goto	l7907
  7688  09F7  082B               	movf	setDelayOff_GO@value,w
  7689  09F8  390F               	andlw	15
  7690  09F9  1D03               	btfss	3,2
  7691  09FA  2A01               	goto	l7911
  7692  09FB                     l7907:	
  7693  09FB  3026               	movlw	38
  7694  09FC  022B               	subwf	setDelayOff_GO@value,w
  7695  09FD  1803               	skipnc
  7696  09FE  2A01               	goto	l7911
  7697                           
  7698                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7699  09FF  082B               	movf	setDelayOff_GO@value,w
  7700  0A00  2A02               	goto	L2
  7701  0A01                     l7911:	
  7702                           ;DelayOff_B1.c: 94: } else {
  7703                           
  7704                           
  7705                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7706  0A01  3005               	movlw	5
  7707  0A02                     L2:	
  7708  0A02  00AC               	movwf	??_setDelayOff_GO
  7709  0A03  082E               	movf	setDelayOff_GO@sw,w
  7710  0A04  3E1A               	addlw	26
  7711  0A05  076D               	addwf	_product,w
  7712  0A06  00AD               	movwf	??_setDelayOff_GO+1
  7713  0A07  082D               	movf	??_setDelayOff_GO+1,w
  7714  0A08  0086               	movwf	6
  7715  0A09  3001               	movlw	1	; select bank2/3
  7716  0A0A  0087               	movwf	7
  7717  0A0B  082C               	movf	??_setDelayOff_GO,w
  7718  0A0C  0081               	movwf	1
  7719                           
  7720                           ;DelayOff_B1.c: 96: }
  7721                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7722  0A0D  2A1A               	goto	l7917
  7723  0A0E                     l7913:	
  7724  0A0E  08AA               	movf	setDelayOff_GO@command,f
  7725  0A0F  1D03               	skipz
  7726  0A10  2A1A               	goto	l7917
  7727                           
  7728                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7729  0A11  082E               	movf	setDelayOff_GO@sw,w
  7730  0A12  3E1A               	addlw	26
  7731  0A13  076D               	addwf	_product,w
  7732  0A14  00AC               	movwf	??_setDelayOff_GO
  7733  0A15  082C               	movf	??_setDelayOff_GO,w
  7734  0A16  0086               	movwf	6
  7735  0A17  3001               	movlw	1	; select bank2/3
  7736  0A18  0087               	movwf	7
  7737  0A19  0181               	clrf	1
  7738  0A1A                     l7917:	
  7739                           
  7740                           ;DelayOff_B1.c: 99: }
  7741                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7742  0A1A  0869               	movf	_DelayOff,w
  7743  0A1B  0086               	movwf	6
  7744  0A1C  0187               	clrf	7
  7745  0A1D  3000               	movlw	0
  7746  0A1E  3FC0               	movwi [0]fsr1
  7747  0A1F  3FC1               	movwi [1]fsr1
  7748                           
  7749                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7750  0A20  0869               	movf	_DelayOff,w
  7751  0A21  0086               	movwf	6
  7752  0A22  0187               	clrf	7
  7753  0A23  0181               	clrf	1
  7754  0A24  0008               	return
  7755  0A25                     __end_of_setDelayOff_GO:	
  7756                           
  7757                           	psect	text33
  7758  1283                     __ptext33:	
  7759 ;; *************** function _DelayTimejudge *****************
  7760 ;; Defined at:
  7761 ;;		line 106 in file "../src/DelayOff_B1.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  value           1    wreg     unsigned char 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  value           1    9[BANK0 ] unsigned char 
  7766 ;;  k               1    8[BANK0 ] unsigned char 
  7767 ;;  j               1    7[BANK0 ] unsigned char 
  7768 ;;  i               1    6[BANK0 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      unsigned char 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:        6 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		___bmul
  7787 ;; This function is called by:
  7788 ;;		_setDelayOff_GO
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _DelayTimejudge
  7794  1283                     _DelayTimejudge:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7798                           ;DelayTimejudge@value stored from wreg
  7799  1283  0020               	movlb	0	; select bank0
  7800  1284  00A9               	movwf	DelayTimejudge@value
  7801                           
  7802                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7803  1285  3005               	movlw	5
  7804  1286  00A4               	movwf	??_DelayTimejudge
  7805  1287  0824               	movf	??_DelayTimejudge,w
  7806  1288  00A6               	movwf	DelayTimejudge@i
  7807  1289  01A7               	clrf	DelayTimejudge@j
  7808  128A  01A8               	clrf	DelayTimejudge@k
  7809                           
  7810                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7811  128B  3031               	movlw	49
  7812  128C  0229               	subwf	DelayTimejudge@value,w
  7813  128D  1803               	skipnc
  7814  128E  2AAB               	goto	l7705
  7815                           
  7816                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7817  128F  0829               	movf	DelayTimejudge@value,w
  7818  1290  390F               	andlw	15
  7819  1291  00A4               	movwf	??_DelayTimejudge
  7820  1292  0824               	movf	??_DelayTimejudge,w
  7821  1293  00A7               	movwf	DelayTimejudge@j
  7822                           
  7823                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7824  1294  0829               	movf	DelayTimejudge@value,w
  7825  1295  00A4               	movwf	??_DelayTimejudge
  7826  1296  3004               	movlw	4
  7827  1297                     u7335:	
  7828  1297  36A4               	lsrf	??_DelayTimejudge,f
  7829  1298  0B89               	decfsz	9,f
  7830  1299  2A97               	goto	u7335
  7831  129A  0824               	movf	??_DelayTimejudge,w
  7832  129B  390F               	andlw	15
  7833  129C  00A5               	movwf	??_DelayTimejudge+1
  7834  129D  0825               	movf	??_DelayTimejudge+1,w
  7835  129E  00A8               	movwf	DelayTimejudge@k
  7836                           
  7837                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7838  129F  300A               	movlw	10
  7839  12A0  00A4               	movwf	??_DelayTimejudge
  7840  12A1  0824               	movf	??_DelayTimejudge,w
  7841  12A2  00A0               	movwf	___bmul@multiplicand
  7842  12A3  0828               	movf	DelayTimejudge@k,w
  7843  12A4  319F  2789         	fcall	___bmul
  7844  12A6  0020               	movlb	0	; select bank0
  7845  12A7  0727               	addwf	DelayTimejudge@j,w
  7846  12A8  00A5               	movwf	??_DelayTimejudge+1
  7847  12A9  0825               	movf	??_DelayTimejudge+1,w
  7848  12AA  00A6               	movwf	DelayTimejudge@i
  7849  12AB                     l7705:	
  7850                           
  7851                           ;DelayOff_B1.c: 112: }
  7852                           ;DelayOff_B1.c: 133: return i;
  7853  12AB  0826               	movf	DelayTimejudge@i,w
  7854  12AC  0008               	return
  7855  12AD                     __end_of_DelayTimejudge:	
  7856                           
  7857                           	psect	text34
  7858  1F89                     __ptext34:	
  7859 ;; *************** function ___bmul *****************
  7860 ;; Defined at:
  7861 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  multiplier      1    wreg     unsigned char 
  7864 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7867 ;;  product         1    2[BANK0 ] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      unsigned char 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7877 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;Total ram usage:        4 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    5
  7884 ;; This function calls:
  7885 ;;		Nothing
  7886 ;; This function is called by:
  7887 ;;		_DelayTimejudge
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           
  7892                           ;psect for function ___bmul
  7893  1F89                     ___bmul:	
  7894                           
  7895                           ;incstack = 0
  7896                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7897                           ;___bmul@multiplier stored from wreg
  7898  1F89  0020               	movlb	0	; select bank0
  7899  1F8A  00A3               	movwf	___bmul@multiplier
  7900  1F8B  01A2               	clrf	___bmul@product
  7901  1F8C                     l7675:	
  7902  1F8C  1C23               	btfss	___bmul@multiplier,0
  7903  1F8D  2F92               	goto	l7679
  7904  1F8E  0820               	movf	___bmul@multiplicand,w
  7905  1F8F  00A1               	movwf	??___bmul
  7906  1F90  0821               	movf	??___bmul,w
  7907  1F91  07A2               	addwf	___bmul@product,f
  7908  1F92                     l7679:	
  7909  1F92  1003               	clrc
  7910  1F93  0DA0               	rlf	___bmul@multiplicand,f
  7911  1F94  1003               	clrc
  7912  1F95  0CA3               	rrf	___bmul@multiplier,f
  7913  1F96  08A3               	movf	___bmul@multiplier,f
  7914  1F97  1D03               	skipz
  7915  1F98  2F8C               	goto	l7675
  7916  1F99  0822               	movf	___bmul@product,w
  7917  1F9A  0008               	return
  7918  1F9B                     __end_of___bmul:	
  7919                           
  7920                           	psect	text35
  7921  146A                     __ptext35:	
  7922 ;; *************** function _setRFSW_AdjControl *****************
  7923 ;; Defined at:
  7924 ;;		line 419 in file "../src/RF_Control_B1.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;  sw              1    wreg     unsigned char 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  sw              1   70[BANK0 ] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;		None               void
  7931 ;; Registers used:
  7932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;Total ram usage:        3 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:   10
  7945 ;; This function calls:
  7946 ;;		_RfSWPointSelect
  7947 ;;		_setRF_DimmerValue
  7948 ;;		_setTxData
  7949 ;; This function is called by:
  7950 ;;		_setControl_Lights_Table
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _setRFSW_AdjControl
  7956  146A                     _setRFSW_AdjControl:	
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7960                           ;setRFSW_AdjControl@sw stored from wreg
  7961  146A  0020               	movlb	0	; select bank0
  7962  146B  00E6               	movwf	setRFSW_AdjControl@sw
  7963                           
  7964                           ;RF_Control_B1.c: 420: RfSWPointSelect(sw);
  7965  146C  0866               	movf	setRFSW_AdjControl@sw,w
  7966  146D  319E  262A  3194   	fcall	_RfSWPointSelect
  7967                           
  7968                           ;RF_Control_B1.c: 421: if (RFSW->Status == 1) {
  7969  1470  0879               	movf	_RFSW,w
  7970  1471  0086               	movwf	6
  7971  1472  0187               	clrf	7
  7972  1473  1C01               	btfss	1,0
  7973  1474  2C7D               	goto	l8137
  7974                           
  7975                           ;RF_Control_B1.c: 422: Memory.Modify=1;
  7976  1475  0023               	movlb	3	; select bank3
  7977  1476  1444               	bsf	(_Memory^(0+384)+36),0
  7978                           
  7979                           ;RF_Control_B1.c: 423: setRF_DimmerValue(sw);
  7980  1477  0020               	movlb	0	; select bank0
  7981  1478  0866               	movf	setRFSW_AdjControl@sw,w
  7982  1479  3193  23C6  3194   	fcall	_setRF_DimmerValue
  7983                           
  7984                           ;RF_Control_B1.c: 424: } else {
  7985  147C  2C8F               	goto	l1993
  7986  147D                     l8137:	
  7987                           
  7988                           ;RF_Control_B1.c: 425: product->Data[9]=product->Data[20 + sw];
  7989  147D  0020               	movlb	0	; select bank0
  7990  147E  0866               	movf	setRFSW_AdjControl@sw,w
  7991  147F  3E14               	addlw	20
  7992  1480  076D               	addwf	_product,w
  7993  1481  00E4               	movwf	??_setRFSW_AdjControl
  7994  1482  0864               	movf	??_setRFSW_AdjControl,w
  7995  1483  0086               	movwf	6
  7996  1484  3001               	movlw	1	; select bank2/3
  7997  1485  0087               	movwf	7
  7998  1486  0801               	movf	1,w
  7999  1487  00E5               	movwf	??_setRFSW_AdjControl+1
  8000  1488  086D               	movf	_product,w
  8001  1489  3E09               	addlw	9
  8002  148A  0086               	movwf	6
  8003  148B  3001               	movlw	1	; select bank2/3
  8004  148C  0087               	movwf	7
  8005  148D  0865               	movf	??_setRFSW_AdjControl+1,w
  8006  148E  0081               	movwf	1
  8007  148F                     l1993:	
  8008                           
  8009                           ;RF_Control_B1.c: 426: }
  8010                           ;RF_Control_B1.c: 427: product->Data[17]=product->Data[26 + sw];
  8011  148F  0020               	movlb	0	; select bank0
  8012  1490  0866               	movf	setRFSW_AdjControl@sw,w
  8013  1491  3E1A               	addlw	26
  8014  1492  076D               	addwf	_product,w
  8015  1493  00E4               	movwf	??_setRFSW_AdjControl
  8016  1494  0864               	movf	??_setRFSW_AdjControl,w
  8017  1495  0086               	movwf	6
  8018  1496  3001               	movlw	1	; select bank2/3
  8019  1497  0087               	movwf	7
  8020  1498  0801               	movf	1,w
  8021  1499  00E5               	movwf	??_setRFSW_AdjControl+1
  8022  149A  086D               	movf	_product,w
  8023  149B  3E11               	addlw	17
  8024  149C  0086               	movwf	6
  8025  149D  3001               	movlw	1	; select bank2/3
  8026  149E  0087               	movwf	7
  8027  149F  0865               	movf	??_setRFSW_AdjControl+1,w
  8028  14A0  0081               	movwf	1
  8029                           
  8030                           ;RF_Control_B1.c: 428: setTxData();
  8031  14A1  3185  25C8         	fcall	_setTxData
  8032  14A3  0008               	return
  8033  14A4                     __end_of_setRFSW_AdjControl:	
  8034                           
  8035                           	psect	text36
  8036  13C6                     __ptext36:	
  8037 ;; *************** function _setRF_DimmerValue *****************
  8038 ;; Defined at:
  8039 ;;		line 439 in file "../src/RF_Control_B1.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  lights          1    wreg     unsigned char 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  lights          1   67[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;		None               void
  8046 ;; Registers used:
  8047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:        3 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    9
  8060 ;; This function calls:
  8061 ;;		_setDimmerLights_AdjRF
  8062 ;; This function is called by:
  8063 ;;		_setRFSW_AdjControl
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _setRF_DimmerValue
  8069  13C6                     _setRF_DimmerValue:	
  8070                           
  8071                           ;incstack = 0
  8072                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8073                           ;setRF_DimmerValue@lights stored from wreg
  8074  13C6  0020               	movlb	0	; select bank0
  8075  13C7  00E3               	movwf	setRF_DimmerValue@lights
  8076                           
  8077                           ;RF_Control_B1.c: 440: if (RF_Data[9] > 0x64) {
  8078  13C8  3065               	movlw	101
  8079  13C9  0022               	movlb	2	; select bank2
  8080  13CA  0229               	subwf	(_RF_Data^(0+256)+9),w
  8081  13CB  1C03               	skipc
  8082  13CC  2BD3               	goto	l7981
  8083                           
  8084                           ;RF_Control_B1.c: 441: RF_Data[9] = 0x64;
  8085  13CD  3064               	movlw	100
  8086  13CE  0020               	movlb	0	; select bank0
  8087  13CF  00E1               	movwf	??_setRF_DimmerValue
  8088  13D0  0861               	movf	??_setRF_DimmerValue,w
  8089  13D1  0022               	movlb	2	; select bank2
  8090  13D2  00A9               	movwf	(_RF_Data^(0+256)+9)
  8091  13D3                     l7981:	
  8092                           
  8093                           ;RF_Control_B1.c: 442: }
  8094                           ;RF_Control_B1.c: 443: product->Data[9]=RF_Data[9];
  8095  13D3  0829               	movf	(_RF_Data^(0+256)+9),w
  8096  13D4  0020               	movlb	0	; select bank0
  8097  13D5  00E1               	movwf	??_setRF_DimmerValue
  8098  13D6  086D               	movf	_product,w
  8099  13D7  3E09               	addlw	9
  8100  13D8  0086               	movwf	6
  8101  13D9  3001               	movlw	1	; select bank2/3
  8102  13DA  0087               	movwf	7
  8103  13DB  0861               	movf	??_setRF_DimmerValue,w
  8104  13DC  0081               	movwf	1
  8105                           
  8106                           ;RF_Control_B1.c: 444: product->Data[11]=lights;
  8107  13DD  0863               	movf	setRF_DimmerValue@lights,w
  8108  13DE  00E1               	movwf	??_setRF_DimmerValue
  8109  13DF  086D               	movf	_product,w
  8110  13E0  3E0B               	addlw	11
  8111  13E1  0086               	movwf	6
  8112  13E2  3001               	movlw	1	; select bank2/3
  8113  13E3  0087               	movwf	7
  8114  13E4  0861               	movf	??_setRF_DimmerValue,w
  8115  13E5  0081               	movwf	1
  8116                           
  8117                           ;RF_Control_B1.c: 445: product->Data[(20 + lights)]=product->Data[9];
  8118  13E6  086D               	movf	_product,w
  8119  13E7  3E09               	addlw	9
  8120  13E8  0086               	movwf	6
  8121  13E9  3001               	movlw	1	; select bank2/3
  8122  13EA  0087               	movwf	7
  8123  13EB  0801               	movf	1,w
  8124  13EC  00E1               	movwf	??_setRF_DimmerValue
  8125  13ED  0863               	movf	setRF_DimmerValue@lights,w
  8126  13EE  3E14               	addlw	20
  8127  13EF  076D               	addwf	_product,w
  8128  13F0  00E2               	movwf	??_setRF_DimmerValue+1
  8129  13F1  0862               	movf	??_setRF_DimmerValue+1,w
  8130  13F2  0086               	movwf	6
  8131  13F3  3001               	movlw	1	; select bank2/3
  8132  13F4  0087               	movwf	7
  8133  13F5  0861               	movf	??_setRF_DimmerValue,w
  8134  13F6  0081               	movwf	1
  8135                           
  8136                           ;RF_Control_B1.c: 446: setDimmerLights_AdjRF(lights);
  8137  13F7  0863               	movf	setRF_DimmerValue@lights,w
  8138  13F8  3191  21E9         	fcall	_setDimmerLights_AdjRF
  8139  13FA  0008               	return
  8140  13FB                     __end_of_setRF_DimmerValue:	
  8141                           
  8142                           	psect	text37
  8143  11E9                     __ptext37:	
  8144 ;; *************** function _setDimmerLights_AdjRF *****************
  8145 ;; Defined at:
  8146 ;;		line 688 in file "../src/Dimmer_B1.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  lights          1    wreg     unsigned char 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  lights          1   64[BANK0 ] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;		None               void
  8153 ;; Registers used:
  8154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;Total ram usage:        2 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    8
  8167 ;; This function calls:
  8168 ;;		_DimmerLightsPointSelect
  8169 ;;		_getPercentValue
  8170 ;; This function is called by:
  8171 ;;		_setRF_DimmerValue
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _setDimmerLights_AdjRF
  8177  11E9                     _setDimmerLights_AdjRF:	
  8178                           
  8179                           ;incstack = 0
  8180                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8181                           ;setDimmerLights_AdjRF@lights stored from wreg
  8182  11E9  0020               	movlb	0	; select bank0
  8183  11EA  00E0               	movwf	setDimmerLights_AdjRF@lights
  8184                           
  8185                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8186  11EB  0860               	movf	setDimmerLights_AdjRF@lights,w
  8187  11EC  319E  261F  3191   	fcall	_DimmerLightsPointSelect
  8188                           
  8189                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8190  11EF  0020               	movlb	0	; select bank0
  8191  11F0  086A               	movf	_DimmerLights,w
  8192  11F1  0086               	movwf	6
  8193  11F2  3001               	movlw	1	; select bank2/3
  8194  11F3  0087               	movwf	7
  8195  11F4  1501               	bsf	1,2
  8196                           
  8197                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8198  11F5  086A               	movf	_DimmerLights,w
  8199  11F6  0086               	movwf	6
  8200  11F7  3001               	movlw	1	; select bank2/3
  8201  11F8  0087               	movwf	7
  8202  11F9  1481               	bsf	1,1
  8203                           
  8204                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8205  11FA  086D               	movf	_product,w
  8206  11FB  3E09               	addlw	9
  8207  11FC  0086               	movwf	6
  8208  11FD  3001               	movlw	1	; select bank2/3
  8209  11FE  0087               	movwf	7
  8210  11FF  0801               	movf	1,w
  8211  1200  3189  210D         	fcall	_getPercentValue
  8212  1202  0020               	movlb	0	; select bank0
  8213  1203  00DF               	movwf	??_setDimmerLights_AdjRF
  8214  1204  086A               	movf	_DimmerLights,w
  8215  1205  3E05               	addlw	5
  8216  1206  0086               	movwf	6
  8217  1207  3001               	movlw	1	; select bank2/3
  8218  1208  0087               	movwf	7
  8219  1209  085F               	movf	??_setDimmerLights_AdjRF,w
  8220  120A  0081               	movwf	1
  8221  120B  0008               	return
  8222  120C                     __end_of_setDimmerLights_AdjRF:	
  8223                           
  8224                           	psect	text38
  8225  090D                     __ptext38:	
  8226 ;; *************** function _getPercentValue *****************
  8227 ;; Defined at:
  8228 ;;		line 761 in file "../src/Dimmer_B1.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  value           1    wreg     unsigned char 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  value           1   59[BANK0 ] unsigned char 
  8233 ;;  i               3   60[BANK0 ] float 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      unsigned char 
  8236 ;; Registers used:
  8237 ;;		wreg, status,2, status,0, pclath, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;Total ram usage:        6 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    7
  8250 ;; This function calls:
  8251 ;;		___awtoft
  8252 ;;		___ftadd
  8253 ;;		___ftdiv
  8254 ;;		___ftmul
  8255 ;;		___fttol
  8256 ;; This function is called by:
  8257 ;;		_setDimmerLights_AdjRF
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function _getPercentValue
  8263  090D                     _getPercentValue:	
  8264                           
  8265                           ;incstack = 0
  8266                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8267                           ;getPercentValue@value stored from wreg
  8268  090D  0020               	movlb	0	; select bank0
  8269  090E  00DB               	movwf	getPercentValue@value
  8270                           
  8271                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8272  090F  3000               	movlw	0
  8273  0910  00DC               	movwf	getPercentValue@i
  8274  0911  30E0               	movlw	224
  8275  0912  00DD               	movwf	getPercentValue@i+1
  8276  0913  3041               	movlw	65
  8277  0914  00DE               	movwf	getPercentValue@i+2
  8278                           
  8279                           ;Dimmer_B1.c: 764: i /= 100;
  8280  0915  3000               	movlw	0
  8281  0916  00AE               	movwf	___ftdiv@f2
  8282  0917  30C8               	movlw	200
  8283  0918  00AF               	movwf	___ftdiv@f2+1
  8284  0919  3042               	movlw	66
  8285  091A  00B0               	movwf	___ftdiv@f2+2
  8286  091B  085C               	movf	getPercentValue@i,w
  8287  091C  00B1               	movwf	___ftdiv@f1
  8288  091D  085D               	movf	getPercentValue@i+1,w
  8289  091E  00B2               	movwf	___ftdiv@f1+1
  8290  091F  085E               	movf	getPercentValue@i+2,w
  8291  0920  00B3               	movwf	___ftdiv@f1+2
  8292  0921  3187  2739  3189   	fcall	___ftdiv
  8293  0924  0020               	movlb	0	; select bank0
  8294  0925  082E               	movf	?___ftdiv,w
  8295  0926  00DC               	movwf	getPercentValue@i
  8296  0927  082F               	movf	?___ftdiv+1,w
  8297  0928  00DD               	movwf	getPercentValue@i+1
  8298  0929  0830               	movf	?___ftdiv+2,w
  8299  092A  00DE               	movwf	getPercentValue@i+2
  8300                           
  8301                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8302  092B  085B               	movf	getPercentValue@value,w
  8303  092C  00D9               	movwf	??_getPercentValue
  8304  092D  01DA               	clrf	??_getPercentValue+1
  8305  092E  09D9               	comf	??_getPercentValue,f
  8306  092F  09DA               	comf	??_getPercentValue+1,f
  8307  0930  0AD9               	incf	??_getPercentValue,f
  8308  0931  1903               	skipnz
  8309  0932  0ADA               	incf	??_getPercentValue+1,f
  8310  0933  0859               	movf	??_getPercentValue,w
  8311  0934  3E64               	addlw	100
  8312  0935  00A8               	movwf	___awtoft@c
  8313  0936  3000               	movlw	0
  8314  0937  3D5A               	addwfc	??_getPercentValue+1,w
  8315  0938  00A9               	movwf	___awtoft@c+1
  8316  0939  3191  2182  3189   	fcall	___awtoft
  8317  093C  0020               	movlb	0	; select bank0
  8318  093D  0828               	movf	?___awtoft,w
  8319  093E  00B1               	movwf	___ftmul@f2
  8320  093F  0829               	movf	?___awtoft+1,w
  8321  0940  00B2               	movwf	___ftmul@f2+1
  8322  0941  082A               	movf	?___awtoft+2,w
  8323  0942  00B3               	movwf	___ftmul@f2+2
  8324  0943  085C               	movf	getPercentValue@i,w
  8325  0944  00AE               	movwf	___ftmul@f1
  8326  0945  085D               	movf	getPercentValue@i+1,w
  8327  0946  00AF               	movwf	___ftmul@f1+1
  8328  0947  085E               	movf	getPercentValue@i+2,w
  8329  0948  00B0               	movwf	___ftmul@f1+2
  8330  0949  3186  2685  3189   	fcall	___ftmul
  8331  094C  0020               	movlb	0	; select bank0
  8332  094D  082E               	movf	?___ftmul,w
  8333  094E  00C1               	movwf	___ftadd@f2
  8334  094F  082F               	movf	?___ftmul+1,w
  8335  0950  00C2               	movwf	___ftadd@f2+1
  8336  0951  0830               	movf	?___ftmul+2,w
  8337  0952  00C3               	movwf	___ftadd@f2+2
  8338  0953  3000               	movlw	0
  8339  0954  00BE               	movwf	___ftadd@f1
  8340  0955  3000               	movlw	0
  8341  0956  00BF               	movwf	___ftadd@f1+1
  8342  0957  3042               	movlw	66
  8343  0958  00C0               	movwf	___ftadd@f1+2
  8344  0959  3183  232D  3189   	fcall	___ftadd
  8345  095C  0020               	movlb	0	; select bank0
  8346  095D  083E               	movf	?___ftadd,w
  8347  095E  00CB               	movwf	___fttol@f1
  8348  095F  083F               	movf	?___ftadd+1,w
  8349  0960  00CC               	movwf	___fttol@f1+1
  8350  0961  0840               	movf	?___ftadd+2,w
  8351  0962  00CD               	movwf	___fttol@f1+2
  8352  0963  318E  26EE         	fcall	___fttol
  8353  0965  0020               	movlb	0	; select bank0
  8354  0966  084B               	movf	?___fttol,w
  8355  0967  0008               	return
  8356  0968                     __end_of_getPercentValue:	
  8357                           
  8358                           	psect	text39
  8359  0685                     __ptext39:	
  8360 ;; *************** function ___ftmul *****************
  8361 ;; Defined at:
  8362 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  f1              3   14[BANK0 ] float 
  8365 ;;  f2              3   17[BANK0 ] float 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8368 ;;  sign            1   29[BANK0 ] unsigned char 
  8369 ;;  cntr            1   28[BANK0 ] unsigned char 
  8370 ;;  exp             1   24[BANK0 ] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  3   14[BANK0 ] float 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, pclath, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8380 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;Total ram usage:       16 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    6
  8387 ;; This function calls:
  8388 ;;		___ftpack
  8389 ;; This function is called by:
  8390 ;;		_getPercentValue
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           
  8395                           ;psect for function ___ftmul
  8396  0685                     ___ftmul:	
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8400  0685  0020               	movlb	0	; select bank0
  8401  0686  082E               	movf	___ftmul@f1,w
  8402  0687  00B4               	movwf	??___ftmul
  8403  0688  082F               	movf	___ftmul@f1+1,w
  8404  0689  00B5               	movwf	??___ftmul+1
  8405  068A  0830               	movf	___ftmul@f1+2,w
  8406  068B  00B6               	movwf	??___ftmul+2
  8407  068C  1003               	clrc
  8408  068D  0D35               	rlf	??___ftmul+1,w
  8409  068E  0D36               	rlf	??___ftmul+2,w
  8410  068F  00B7               	movwf	??___ftmul+3
  8411  0690  0837               	movf	??___ftmul+3,w
  8412  0691  00B8               	movwf	___ftmul@exp
  8413  0692  08B8               	movf	___ftmul@exp,f
  8414  0693  1D03               	skipz
  8415  0694  2E9C               	goto	l5489
  8416  0695  3000               	movlw	0
  8417  0696  00AE               	movwf	?___ftmul
  8418  0697  3000               	movlw	0
  8419  0698  00AF               	movwf	?___ftmul+1
  8420  0699  3000               	movlw	0
  8421  069A  00B0               	movwf	?___ftmul+2
  8422  069B  0008               	return
  8423  069C                     l5489:	
  8424  069C  0831               	movf	___ftmul@f2,w
  8425  069D  00B4               	movwf	??___ftmul
  8426  069E  0832               	movf	___ftmul@f2+1,w
  8427  069F  00B5               	movwf	??___ftmul+1
  8428  06A0  0833               	movf	___ftmul@f2+2,w
  8429  06A1  00B6               	movwf	??___ftmul+2
  8430  06A2  1003               	clrc
  8431  06A3  0D35               	rlf	??___ftmul+1,w
  8432  06A4  0D36               	rlf	??___ftmul+2,w
  8433  06A5  00B7               	movwf	??___ftmul+3
  8434  06A6  0837               	movf	??___ftmul+3,w
  8435  06A7  00BD               	movwf	___ftmul@sign
  8436  06A8  08BD               	movf	___ftmul@sign,f
  8437  06A9  1D03               	skipz
  8438  06AA  2EB2               	goto	l5495
  8439  06AB  3000               	movlw	0
  8440  06AC  00AE               	movwf	?___ftmul
  8441  06AD  3000               	movlw	0
  8442  06AE  00AF               	movwf	?___ftmul+1
  8443  06AF  3000               	movlw	0
  8444  06B0  00B0               	movwf	?___ftmul+2
  8445  06B1  0008               	return
  8446  06B2                     l5495:	
  8447  06B2  083D               	movf	___ftmul@sign,w
  8448  06B3  3E7B               	addlw	123
  8449  06B4  00B4               	movwf	??___ftmul
  8450  06B5  0834               	movf	??___ftmul,w
  8451  06B6  07B8               	addwf	___ftmul@exp,f
  8452  06B7  082E               	movf	___ftmul@f1,w
  8453  06B8  00B4               	movwf	??___ftmul
  8454  06B9  082F               	movf	___ftmul@f1+1,w
  8455  06BA  00B5               	movwf	??___ftmul+1
  8456  06BB  0830               	movf	___ftmul@f1+2,w
  8457  06BC  00B6               	movwf	??___ftmul+2
  8458  06BD  3010               	movlw	16
  8459  06BE                     u4095:	
  8460  06BE  36B6               	lsrf	??___ftmul+2,f
  8461  06BF  0CB5               	rrf	??___ftmul+1,f
  8462  06C0  0CB4               	rrf	??___ftmul,f
  8463  06C1  0B89               	decfsz	9,f
  8464  06C2  2EBE               	goto	u4095
  8465  06C3  0834               	movf	??___ftmul,w
  8466  06C4  00B7               	movwf	??___ftmul+3
  8467  06C5  0837               	movf	??___ftmul+3,w
  8468  06C6  00BD               	movwf	___ftmul@sign
  8469  06C7  0831               	movf	___ftmul@f2,w
  8470  06C8  00B4               	movwf	??___ftmul
  8471  06C9  0832               	movf	___ftmul@f2+1,w
  8472  06CA  00B5               	movwf	??___ftmul+1
  8473  06CB  0833               	movf	___ftmul@f2+2,w
  8474  06CC  00B6               	movwf	??___ftmul+2
  8475  06CD  3010               	movlw	16
  8476  06CE                     u4105:	
  8477  06CE  36B6               	lsrf	??___ftmul+2,f
  8478  06CF  0CB5               	rrf	??___ftmul+1,f
  8479  06D0  0CB4               	rrf	??___ftmul,f
  8480  06D1  0B89               	decfsz	9,f
  8481  06D2  2ECE               	goto	u4105
  8482  06D3  0834               	movf	??___ftmul,w
  8483  06D4  00B7               	movwf	??___ftmul+3
  8484  06D5  0837               	movf	??___ftmul+3,w
  8485  06D6  06BD               	xorwf	___ftmul@sign,f
  8486  06D7  3080               	movlw	128
  8487  06D8  00B4               	movwf	??___ftmul
  8488  06D9  0834               	movf	??___ftmul,w
  8489  06DA  05BD               	andwf	___ftmul@sign,f
  8490  06DB  17AF               	bsf	___ftmul@f1+1,7
  8491  06DC  17B2               	bsf	___ftmul@f2+1,7
  8492  06DD  30FF               	movlw	255
  8493  06DE  05B1               	andwf	___ftmul@f2,f
  8494  06DF  30FF               	movlw	255
  8495  06E0  05B2               	andwf	___ftmul@f2+1,f
  8496  06E1  3000               	movlw	0
  8497  06E2  05B3               	andwf	___ftmul@f2+2,f
  8498  06E3  3000               	movlw	0
  8499  06E4  00B9               	movwf	___ftmul@f3_as_product
  8500  06E5  3000               	movlw	0
  8501  06E6  00BA               	movwf	___ftmul@f3_as_product+1
  8502  06E7  3000               	movlw	0
  8503  06E8  00BB               	movwf	___ftmul@f3_as_product+2
  8504  06E9  3007               	movlw	7
  8505  06EA  00B4               	movwf	??___ftmul
  8506  06EB  0834               	movf	??___ftmul,w
  8507  06EC  00BC               	movwf	___ftmul@cntr
  8508  06ED                     l5507:	
  8509  06ED  1C2E               	btfss	___ftmul@f1,0
  8510  06EE  2EF5               	goto	l5511
  8511  06EF  0831               	movf	___ftmul@f2,w
  8512  06F0  07B9               	addwf	___ftmul@f3_as_product,f
  8513  06F1  0832               	movf	___ftmul@f2+1,w
  8514  06F2  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8515  06F3  0833               	movf	___ftmul@f2+2,w
  8516  06F4  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8517  06F5                     l5511:	
  8518  06F5  3001               	movlw	1
  8519  06F6                     u4125:	
  8520  06F6  36B0               	lsrf	___ftmul@f1+2,f
  8521  06F7  0CAF               	rrf	___ftmul@f1+1,f
  8522  06F8  0CAE               	rrf	___ftmul@f1,f
  8523  06F9  0B89               	decfsz	9,f
  8524  06FA  2EF6               	goto	u4125
  8525  06FB  3001               	movlw	1
  8526  06FC                     u4135:	
  8527  06FC  35B1               	lslf	___ftmul@f2,f
  8528  06FD  0DB2               	rlf	___ftmul@f2+1,f
  8529  06FE  0DB3               	rlf	___ftmul@f2+2,f
  8530  06FF  0B89               	decfsz	9,f
  8531  0700  2EFC               	goto	u4135
  8532  0701  3001               	movlw	1
  8533  0702  02BC               	subwf	___ftmul@cntr,f
  8534  0703  1D03               	btfss	3,2
  8535  0704  2EED               	goto	l5507
  8536  0705  3009               	movlw	9
  8537  0706  00B4               	movwf	??___ftmul
  8538  0707  0834               	movf	??___ftmul,w
  8539  0708  00BC               	movwf	___ftmul@cntr
  8540  0709                     l5519:	
  8541  0709  1C2E               	btfss	___ftmul@f1,0
  8542  070A  2F11               	goto	l5523
  8543  070B  0831               	movf	___ftmul@f2,w
  8544  070C  07B9               	addwf	___ftmul@f3_as_product,f
  8545  070D  0832               	movf	___ftmul@f2+1,w
  8546  070E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8547  070F  0833               	movf	___ftmul@f2+2,w
  8548  0710  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8549  0711                     l5523:	
  8550  0711  3001               	movlw	1
  8551  0712                     u4165:	
  8552  0712  36B0               	lsrf	___ftmul@f1+2,f
  8553  0713  0CAF               	rrf	___ftmul@f1+1,f
  8554  0714  0CAE               	rrf	___ftmul@f1,f
  8555  0715  0B89               	decfsz	9,f
  8556  0716  2F12               	goto	u4165
  8557  0717  3001               	movlw	1
  8558  0718                     u4175:	
  8559  0718  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8560  0719  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8561  071A  0CB9               	rrf	___ftmul@f3_as_product,f
  8562  071B  0B89               	decfsz	9,f
  8563  071C  2F18               	goto	u4175
  8564  071D  3001               	movlw	1
  8565  071E  02BC               	subwf	___ftmul@cntr,f
  8566  071F  1D03               	btfss	3,2
  8567  0720  2F09               	goto	l5519
  8568  0721  0839               	movf	___ftmul@f3_as_product,w
  8569  0722  00A0               	movwf	___ftpack@arg
  8570  0723  083A               	movf	___ftmul@f3_as_product+1,w
  8571  0724  00A1               	movwf	___ftpack@arg+1
  8572  0725  083B               	movf	___ftmul@f3_as_product+2,w
  8573  0726  00A2               	movwf	___ftpack@arg+2
  8574  0727  0838               	movf	___ftmul@exp,w
  8575  0728  00B4               	movwf	??___ftmul
  8576  0729  0834               	movf	??___ftmul,w
  8577  072A  00A3               	movwf	___ftpack@exp
  8578  072B  083D               	movf	___ftmul@sign,w
  8579  072C  00B5               	movwf	??___ftmul+1
  8580  072D  0835               	movf	??___ftmul+1,w
  8581  072E  00A4               	movwf	___ftpack@sign
  8582  072F  318A  2225         	fcall	___ftpack
  8583  0731  0020               	movlb	0	; select bank0
  8584  0732  0820               	movf	?___ftpack,w
  8585  0733  00AE               	movwf	?___ftmul
  8586  0734  0821               	movf	?___ftpack+1,w
  8587  0735  00AF               	movwf	?___ftmul+1
  8588  0736  0822               	movf	?___ftpack+2,w
  8589  0737  00B0               	movwf	?___ftmul+2
  8590  0738  0008               	return
  8591  0739                     __end_of___ftmul:	
  8592                           
  8593                           	psect	text40
  8594  032D                     __ptext40:	
  8595 ;; *************** function ___ftadd *****************
  8596 ;; Defined at:
  8597 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  f1              3   30[BANK0 ] float 
  8600 ;;  f2              3   33[BANK0 ] float 
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;  exp1            1   42[BANK0 ] unsigned char 
  8603 ;;  exp2            1   41[BANK0 ] unsigned char 
  8604 ;;  sign            1   40[BANK0 ] unsigned char 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  3   30[BANK0 ] float 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0, pclath, cstack
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8614 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;Total ram usage:       13 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    6
  8621 ;; This function calls:
  8622 ;;		___ftpack
  8623 ;; This function is called by:
  8624 ;;		_getPercentValue
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           
  8629                           ;psect for function ___ftadd
  8630  032D                     ___ftadd:	
  8631                           
  8632                           ;incstack = 0
  8633                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8634  032D  0020               	movlb	0	; select bank0
  8635  032E  083E               	movf	___ftadd@f1,w
  8636  032F  00C4               	movwf	??___ftadd
  8637  0330  083F               	movf	___ftadd@f1+1,w
  8638  0331  00C5               	movwf	??___ftadd+1
  8639  0332  0840               	movf	___ftadd@f1+2,w
  8640  0333  00C6               	movwf	??___ftadd+2
  8641  0334  1003               	clrc
  8642  0335  0D45               	rlf	??___ftadd+1,w
  8643  0336  0D46               	rlf	??___ftadd+2,w
  8644  0337  00C7               	movwf	??___ftadd+3
  8645  0338  0847               	movf	??___ftadd+3,w
  8646  0339  00CA               	movwf	___ftadd@exp1
  8647  033A  0841               	movf	___ftadd@f2,w
  8648  033B  00C4               	movwf	??___ftadd
  8649  033C  0842               	movf	___ftadd@f2+1,w
  8650  033D  00C5               	movwf	??___ftadd+1
  8651  033E  0843               	movf	___ftadd@f2+2,w
  8652  033F  00C6               	movwf	??___ftadd+2
  8653  0340  1003               	clrc
  8654  0341  0D45               	rlf	??___ftadd+1,w
  8655  0342  0D46               	rlf	??___ftadd+2,w
  8656  0343  00C7               	movwf	??___ftadd+3
  8657  0344  0847               	movf	??___ftadd+3,w
  8658  0345  00C9               	movwf	___ftadd@exp2
  8659  0346  084A               	movf	___ftadd@exp1,w
  8660  0347  1903               	btfsc	3,2
  8661  0348  2B55               	goto	l5377
  8662  0349  0849               	movf	___ftadd@exp2,w
  8663  034A  024A               	subwf	___ftadd@exp1,w
  8664  034B  1803               	skipnc
  8665  034C  2B5C               	goto	l5381
  8666  034D  034A               	decf	___ftadd@exp1,w
  8667  034E  3AFF               	xorlw	255
  8668  034F  0749               	addwf	___ftadd@exp2,w
  8669  0350  00C4               	movwf	??___ftadd
  8670  0351  3019               	movlw	25
  8671  0352  0244               	subwf	??___ftadd,w
  8672  0353  1C03               	skipc
  8673  0354  2B5C               	goto	l5381
  8674  0355                     l5377:	
  8675  0355  0841               	movf	___ftadd@f2,w
  8676  0356  00BE               	movwf	?___ftadd
  8677  0357  0842               	movf	___ftadd@f2+1,w
  8678  0358  00BF               	movwf	?___ftadd+1
  8679  0359  0843               	movf	___ftadd@f2+2,w
  8680  035A  00C0               	movwf	?___ftadd+2
  8681  035B  0008               	return
  8682  035C                     l5381:	
  8683  035C  0849               	movf	___ftadd@exp2,w
  8684  035D  1903               	btfsc	3,2
  8685  035E  0008               	return
  8686  035F  084A               	movf	___ftadd@exp1,w
  8687  0360  0249               	subwf	___ftadd@exp2,w
  8688  0361  1803               	skipnc
  8689  0362  2B6B               	goto	l5387
  8690  0363  0349               	decf	___ftadd@exp2,w
  8691  0364  3AFF               	xorlw	255
  8692  0365  074A               	addwf	___ftadd@exp1,w
  8693  0366  00C4               	movwf	??___ftadd
  8694  0367  3019               	movlw	25
  8695  0368  0244               	subwf	??___ftadd,w
  8696  0369  1803               	btfsc	3,0
  8697  036A  0008               	return
  8698  036B                     l5387:	
  8699  036B  3006               	movlw	6
  8700  036C  00C4               	movwf	??___ftadd
  8701  036D  0844               	movf	??___ftadd,w
  8702  036E  00C8               	movwf	___ftadd@sign
  8703  036F  1BC0               	btfsc	___ftadd@f1+2,7
  8704  0370  17C8               	bsf	___ftadd@sign,7
  8705  0371  1BC3               	btfsc	___ftadd@f2+2,7
  8706  0372  1748               	bsf	___ftadd@sign,6
  8707  0373  17BF               	bsf	___ftadd@f1+1,7
  8708  0374  30FF               	movlw	255
  8709  0375  05BE               	andwf	___ftadd@f1,f
  8710  0376  30FF               	movlw	255
  8711  0377  05BF               	andwf	___ftadd@f1+1,f
  8712  0378  3000               	movlw	0
  8713  0379  05C0               	andwf	___ftadd@f1+2,f
  8714  037A  17C2               	bsf	___ftadd@f2+1,7
  8715  037B  30FF               	movlw	255
  8716  037C  05C1               	andwf	___ftadd@f2,f
  8717  037D  30FF               	movlw	255
  8718  037E  05C2               	andwf	___ftadd@f2+1,f
  8719  037F  3000               	movlw	0
  8720  0380  05C3               	andwf	___ftadd@f2+2,f
  8721  0381  0849               	movf	___ftadd@exp2,w
  8722  0382  024A               	subwf	___ftadd@exp1,w
  8723  0383  1803               	skipnc
  8724  0384  2BA7               	goto	l5409
  8725  0385                     l5399:	
  8726  0385  3001               	movlw	1
  8727  0386                     u3855:	
  8728  0386  35C1               	lslf	___ftadd@f2,f
  8729  0387  0DC2               	rlf	___ftadd@f2+1,f
  8730  0388  0DC3               	rlf	___ftadd@f2+2,f
  8731  0389  0B89               	decfsz	9,f
  8732  038A  2B86               	goto	u3855
  8733  038B  3001               	movlw	1
  8734  038C  02C9               	subwf	___ftadd@exp2,f
  8735  038D  0849               	movf	___ftadd@exp2,w
  8736  038E  064A               	xorwf	___ftadd@exp1,w
  8737  038F  1903               	skipnz
  8738  0390  2BA2               	goto	l5407
  8739  0391  3001               	movlw	1
  8740  0392  02C8               	subwf	___ftadd@sign,f
  8741  0393  0848               	movf	___ftadd@sign,w
  8742  0394  3907               	andlw	7
  8743  0395  1903               	btfsc	3,2
  8744  0396  2BA2               	goto	l5407
  8745  0397  2B85               	goto	l5399
  8746  0398                     l5405:	
  8747  0398  3001               	movlw	1
  8748  0399                     u3885:	
  8749  0399  36C0               	lsrf	___ftadd@f1+2,f
  8750  039A  0CBF               	rrf	___ftadd@f1+1,f
  8751  039B  0CBE               	rrf	___ftadd@f1,f
  8752  039C  0B89               	decfsz	9,f
  8753  039D  2B99               	goto	u3885
  8754  039E  3001               	movlw	1
  8755  039F  00C4               	movwf	??___ftadd
  8756  03A0  0844               	movf	??___ftadd,w
  8757  03A1  07CA               	addwf	___ftadd@exp1,f
  8758  03A2                     l5407:	
  8759  03A2  084A               	movf	___ftadd@exp1,w
  8760  03A3  0649               	xorwf	___ftadd@exp2,w
  8761  03A4  1903               	btfsc	3,2
  8762  03A5  2BCC               	goto	l2810
  8763  03A6  2B98               	goto	l5405
  8764  03A7                     l5409:	
  8765  03A7  084A               	movf	___ftadd@exp1,w
  8766  03A8  0249               	subwf	___ftadd@exp2,w
  8767  03A9  1803               	skipnc
  8768  03AA  2BCC               	goto	l2810
  8769  03AB                     l5411:	
  8770  03AB  3001               	movlw	1
  8771  03AC                     u3915:	
  8772  03AC  35BE               	lslf	___ftadd@f1,f
  8773  03AD  0DBF               	rlf	___ftadd@f1+1,f
  8774  03AE  0DC0               	rlf	___ftadd@f1+2,f
  8775  03AF  0B89               	decfsz	9,f
  8776  03B0  2BAC               	goto	u3915
  8777  03B1  3001               	movlw	1
  8778  03B2  02CA               	subwf	___ftadd@exp1,f
  8779  03B3  0849               	movf	___ftadd@exp2,w
  8780  03B4  064A               	xorwf	___ftadd@exp1,w
  8781  03B5  1903               	skipnz
  8782  03B6  2BC8               	goto	l5419
  8783  03B7  3001               	movlw	1
  8784  03B8  02C8               	subwf	___ftadd@sign,f
  8785  03B9  0848               	movf	___ftadd@sign,w
  8786  03BA  3907               	andlw	7
  8787  03BB  1903               	btfsc	3,2
  8788  03BC  2BC8               	goto	l5419
  8789  03BD  2BAB               	goto	l5411
  8790  03BE                     l5417:	
  8791  03BE  3001               	movlw	1
  8792  03BF                     u3945:	
  8793  03BF  36C3               	lsrf	___ftadd@f2+2,f
  8794  03C0  0CC2               	rrf	___ftadd@f2+1,f
  8795  03C1  0CC1               	rrf	___ftadd@f2,f
  8796  03C2  0B89               	decfsz	9,f
  8797  03C3  2BBF               	goto	u3945
  8798  03C4  3001               	movlw	1
  8799  03C5  00C4               	movwf	??___ftadd
  8800  03C6  0844               	movf	??___ftadd,w
  8801  03C7  07C9               	addwf	___ftadd@exp2,f
  8802  03C8                     l5419:	
  8803  03C8  084A               	movf	___ftadd@exp1,w
  8804  03C9  0649               	xorwf	___ftadd@exp2,w
  8805  03CA  1D03               	skipz
  8806  03CB  2BBE               	goto	l5417
  8807  03CC                     l2810:	
  8808  03CC  1FC8               	btfss	___ftadd@sign,7
  8809  03CD  2BDE               	goto	l5423
  8810  03CE  30FF               	movlw	255
  8811  03CF  06BE               	xorwf	___ftadd@f1,f
  8812  03D0  30FF               	movlw	255
  8813  03D1  06BF               	xorwf	___ftadd@f1+1,f
  8814  03D2  30FF               	movlw	255
  8815  03D3  06C0               	xorwf	___ftadd@f1+2,f
  8816  03D4  3001               	movlw	1
  8817  03D5  07BE               	addwf	___ftadd@f1,f
  8818  03D6  3000               	movlw	0
  8819  03D7  1803               	skipnc
  8820  03D8  3001               	movlw	1
  8821  03D9  07BF               	addwf	___ftadd@f1+1,f
  8822  03DA  3000               	movlw	0
  8823  03DB  1803               	skipnc
  8824  03DC  3001               	movlw	1
  8825  03DD  07C0               	addwf	___ftadd@f1+2,f
  8826  03DE                     l5423:	
  8827  03DE  1F48               	btfss	___ftadd@sign,6
  8828  03DF  2BF0               	goto	l5427
  8829  03E0  30FF               	movlw	255
  8830  03E1  06C1               	xorwf	___ftadd@f2,f
  8831  03E2  30FF               	movlw	255
  8832  03E3  06C2               	xorwf	___ftadd@f2+1,f
  8833  03E4  30FF               	movlw	255
  8834  03E5  06C3               	xorwf	___ftadd@f2+2,f
  8835  03E6  3001               	movlw	1
  8836  03E7  07C1               	addwf	___ftadd@f2,f
  8837  03E8  3000               	movlw	0
  8838  03E9  1803               	skipnc
  8839  03EA  3001               	movlw	1
  8840  03EB  07C2               	addwf	___ftadd@f2+1,f
  8841  03EC  3000               	movlw	0
  8842  03ED  1803               	skipnc
  8843  03EE  3001               	movlw	1
  8844  03EF  07C3               	addwf	___ftadd@f2+2,f
  8845  03F0                     l5427:	
  8846  03F0  01C8               	clrf	___ftadd@sign
  8847  03F1  083E               	movf	___ftadd@f1,w
  8848  03F2  07C1               	addwf	___ftadd@f2,f
  8849  03F3  083F               	movf	___ftadd@f1+1,w
  8850  03F4  3DC2               	addwfc	___ftadd@f2+1,f
  8851  03F5  0840               	movf	___ftadd@f1+2,w
  8852  03F6  3DC3               	addwfc	___ftadd@f2+2,f
  8853  03F7  1FC3               	btfss	___ftadd@f2+2,7
  8854  03F8  2C0B               	goto	l5437
  8855  03F9  30FF               	movlw	255
  8856  03FA  06C1               	xorwf	___ftadd@f2,f
  8857  03FB  30FF               	movlw	255
  8858  03FC  06C2               	xorwf	___ftadd@f2+1,f
  8859  03FD  30FF               	movlw	255
  8860  03FE  06C3               	xorwf	___ftadd@f2+2,f
  8861  03FF  3001               	movlw	1
  8862  0400  07C1               	addwf	___ftadd@f2,f
  8863  0401  3000               	movlw	0
  8864  0402  1803               	skipnc
  8865  0403  3001               	movlw	1
  8866  0404  07C2               	addwf	___ftadd@f2+1,f
  8867  0405  3000               	movlw	0
  8868  0406  1803               	skipnc
  8869  0407  3001               	movlw	1
  8870  0408  07C3               	addwf	___ftadd@f2+2,f
  8871  0409  01C8               	clrf	___ftadd@sign
  8872  040A  0AC8               	incf	___ftadd@sign,f
  8873  040B                     l5437:	
  8874  040B  0841               	movf	___ftadd@f2,w
  8875  040C  00A0               	movwf	___ftpack@arg
  8876  040D  0842               	movf	___ftadd@f2+1,w
  8877  040E  00A1               	movwf	___ftpack@arg+1
  8878  040F  0843               	movf	___ftadd@f2+2,w
  8879  0410  00A2               	movwf	___ftpack@arg+2
  8880  0411  084A               	movf	___ftadd@exp1,w
  8881  0412  00C4               	movwf	??___ftadd
  8882  0413  0844               	movf	??___ftadd,w
  8883  0414  00A3               	movwf	___ftpack@exp
  8884  0415  0848               	movf	___ftadd@sign,w
  8885  0416  00C5               	movwf	??___ftadd+1
  8886  0417  0845               	movf	??___ftadd+1,w
  8887  0418  00A4               	movwf	___ftpack@sign
  8888  0419  318A  2225         	fcall	___ftpack
  8889  041B  0020               	movlb	0	; select bank0
  8890  041C  0820               	movf	?___ftpack,w
  8891  041D  00BE               	movwf	?___ftadd
  8892  041E  0821               	movf	?___ftpack+1,w
  8893  041F  00BF               	movwf	?___ftadd+1
  8894  0420  0822               	movf	?___ftpack+2,w
  8895  0421  00C0               	movwf	?___ftadd+2
  8896  0422  0008               	return
  8897  0423                     __end_of___ftadd:	
  8898                           
  8899                           	psect	text41
  8900  1F66                     __ptext41:	
  8901 ;; *************** function _getBuz_GO *****************
  8902 ;; Defined at:
  8903 ;;		line 82 in file "../src/Buzzer_B1.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  i               2    4[BANK0 ] int 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    0[BANK0 ] int 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;Total ram usage:        6 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; Hardware stack levels required when called:    5
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		_setRF_Main
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           
  8932                           ;psect for function _getBuz_GO
  8933  1F66                     _getBuz_GO:	
  8934                           
  8935                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8936                           
  8937                           ;incstack = 0
  8938                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8939  1F66  0021               	movlb	1	; select bank1
  8940  1F67  0C32               	rrf	_Buz1^(0+128),w
  8941  1F68  3901               	andlw	1
  8942  1F69  0020               	movlb	0	; select bank0
  8943  1F6A  00A2               	movwf	??_getBuz_GO
  8944  1F6B  01A3               	clrf	??_getBuz_GO+1
  8945  1F6C  0822               	movf	??_getBuz_GO,w
  8946  1F6D  00A4               	movwf	getBuz_GO@i
  8947  1F6E  0823               	movf	??_getBuz_GO+1,w
  8948  1F6F  00A5               	movwf	getBuz_GO@i+1
  8949                           
  8950                           ;Buzzer_B1.c: 84: return i;
  8951  1F70  0825               	movf	getBuz_GO@i+1,w
  8952  1F71  01A1               	clrf	?_getBuz_GO+1
  8953  1F72  07A1               	addwf	?_getBuz_GO+1,f
  8954  1F73  0824               	movf	getBuz_GO@i,w
  8955  1F74  01A0               	clrf	?_getBuz_GO
  8956  1F75  07A0               	addwf	?_getBuz_GO,f
  8957  1F76  0008               	return
  8958  1F77                     __end_of_getBuz_GO:	
  8959                           
  8960                           	psect	text42
  8961  0A86                     __ptext42:	
  8962 ;; *************** function _CC2500_TxData *****************
  8963 ;; Defined at:
  8964 ;;		line 32 in file "../src/CC2500_B1.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;		None
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;		None               void
  8971 ;; Registers used:
  8972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;Total ram usage:        2 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    7
  8985 ;; This function calls:
  8986 ;;		_CC2500_WriteByte
  8987 ;;		_CC2500_WriteCommand
  8988 ;;		_Timeout_Counter
  8989 ;;		_set_TimeoutCleared
  8990 ;; This function is called by:
  8991 ;;		_setRF_Main
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           
  8996                           ;psect for function _CC2500_TxData
  8997  0A86                     _CC2500_TxData:	
  8998                           
  8999                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9000                           ;CC2500_B1.c: 35: RC4 = 0;
  9001                           
  9002                           ;incstack = 0
  9003                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9004  0A86  0020               	movlb	0	; select bank0
  9005  0A87  120E               	bcf	14,4	;volatile
  9006                           
  9007                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9008  0A88  307F               	movlw	127
  9009  0A89  00A4               	movwf	??_CC2500_TxData
  9010  0A8A  0824               	movf	??_CC2500_TxData,w
  9011  0A8B  00FA               	movwf	_SPI0Buffer
  9012                           
  9013                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9014  0A8C  2A90               	goto	l8285
  9015  0A8D                     l8283:	
  9016                           
  9017                           ;CC2500_B1.c: 38: Timeout_Counter();
  9018  0A8D  319F  27C1  318A   	fcall	_Timeout_Counter
  9019  0A90                     l8285:	
  9020  0A90  0020               	movlb	0	; select bank0
  9021  0A91  1D0E               	btfss	14,2	;volatile
  9022  0A92  2A96               	goto	l8289
  9023  0A93  0021               	movlb	1	; select bank1
  9024  0A94  1D2F               	btfss	(_myMain^(0+128)+15),2
  9025  0A95  2A8D               	goto	l8283
  9026  0A96                     l8289:	
  9027                           
  9028                           ;CC2500_B1.c: 39: };
  9029                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9030  0A96  319D  258C  318A   	fcall	_set_TimeoutCleared
  9031                           
  9032                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9033  0A99  319F  27AD  318A   	fcall	_CC2500_WriteByte
  9034                           
  9035                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9036  0A9C  0021               	movlb	1	; select bank1
  9037  0A9D  085A               	movf	_Tx_Length^(0+128),w
  9038  0A9E  0020               	movlb	0	; select bank0
  9039  0A9F  00A4               	movwf	??_CC2500_TxData
  9040  0AA0  0824               	movf	??_CC2500_TxData,w
  9041  0AA1  00FA               	movwf	_SPI0Buffer
  9042                           
  9043                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9044  0AA2  319F  27AD  318A   	fcall	_CC2500_WriteByte
  9045                           
  9046                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9047  0AA5  0020               	movlb	0	; select bank0
  9048  0AA6  01A5               	clrf	CC2500_TxData@loop_e
  9049  0AA7                     l8303:	
  9050  0AA7  0021               	movlb	1	; select bank1
  9051  0AA8  085A               	movf	_Tx_Length^(0+128),w
  9052  0AA9  0020               	movlb	0	; select bank0
  9053  0AAA  0225               	subwf	CC2500_TxData@loop_e,w
  9054  0AAB  1803               	btfsc	3,0
  9055  0AAC  2ABF               	goto	l247
  9056                           
  9057                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9058  0AAD  0825               	movf	CC2500_TxData@loop_e,w
  9059  0AAE  3E20               	addlw	_RF_Data& (0+255)
  9060  0AAF  0086               	movwf	6
  9061  0AB0  3001               	movlw	1	; select bank2/3
  9062  0AB1  0087               	movwf	7
  9063  0AB2  0801               	movf	1,w
  9064  0AB3  00A4               	movwf	??_CC2500_TxData
  9065  0AB4  0824               	movf	??_CC2500_TxData,w
  9066  0AB5  00FA               	movwf	_SPI0Buffer
  9067                           
  9068                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9069  0AB6  319F  27AD  318A   	fcall	_CC2500_WriteByte
  9070  0AB9  3001               	movlw	1
  9071  0ABA  0020               	movlb	0	; select bank0
  9072  0ABB  00A4               	movwf	??_CC2500_TxData
  9073  0ABC  0824               	movf	??_CC2500_TxData,w
  9074  0ABD  07A5               	addwf	CC2500_TxData@loop_e,f
  9075  0ABE  2AA7               	goto	l8303
  9076  0ABF                     l247:	
  9077                           
  9078                           ;CC2500_B1.c: 48: }
  9079                           ;CC2500_B1.c: 49: RC4 = 1;
  9080  0ABF  160E               	bsf	14,4	;volatile
  9081                           
  9082                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9083  0AC0  3035               	movlw	53
  9084  0AC1  3190  2097  318A   	fcall	_CC2500_WriteCommand
  9085                           
  9086                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9087  0AC4  2AC8               	goto	l8309
  9088  0AC5                     l8307:	
  9089                           
  9090                           ;CC2500_B1.c: 52: Timeout_Counter();
  9091  0AC5  319F  27C1  318A   	fcall	_Timeout_Counter
  9092  0AC8                     l8309:	
  9093  0AC8  0020               	movlb	0	; select bank0
  9094  0AC9  180D               	btfsc	13,0	;volatile
  9095  0ACA  2ACE               	goto	l8313
  9096  0ACB  0021               	movlb	1	; select bank1
  9097  0ACC  1D2F               	btfss	(_myMain^(0+128)+15),2
  9098  0ACD  2AC5               	goto	l8307
  9099  0ACE                     l8313:	
  9100                           
  9101                           ;CC2500_B1.c: 53: };
  9102                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9103  0ACE  319D  258C  318A   	fcall	_set_TimeoutCleared
  9104                           
  9105                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9106  0AD1  2AD5               	goto	l8317
  9107  0AD2                     l8315:	
  9108                           
  9109                           ;CC2500_B1.c: 57: Timeout_Counter();
  9110  0AD2  319F  27C1  318A   	fcall	_Timeout_Counter
  9111  0AD5                     l8317:	
  9112  0AD5  0020               	movlb	0	; select bank0
  9113  0AD6  1C0D               	btfss	13,0	;volatile
  9114  0AD7  2ADB               	goto	l8321
  9115  0AD8  0021               	movlb	1	; select bank1
  9116  0AD9  1D2F               	btfss	(_myMain^(0+128)+15),2
  9117  0ADA  2AD2               	goto	l8315
  9118  0ADB                     l8321:	
  9119                           
  9120                           ;CC2500_B1.c: 58: };
  9121                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9122  0ADB  319D  258C  318A   	fcall	_set_TimeoutCleared
  9123                           
  9124                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9125  0ADE  3036               	movlw	54
  9126  0ADF  3190  2097  318A   	fcall	_CC2500_WriteCommand
  9127                           
  9128                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9129  0AE2  303B               	movlw	59
  9130  0AE3  3190  2097  318A   	fcall	_CC2500_WriteCommand
  9131                           
  9132                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9133  0AE6  303A               	movlw	58
  9134  0AE7  3190  2097         	fcall	_CC2500_WriteCommand
  9135                           
  9136                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9137  0AE9  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9138  0AEA  0008               	return
  9139  0AEB                     __end_of_CC2500_TxData:	
  9140                           
  9141                           	psect	text43
  9142  0D01                     __ptext43:	
  9143 ;; *************** function _CC2500_RxData *****************
  9144 ;; Defined at:
  9145 ;;		line 70 in file "../src/CC2500_B1.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;		None
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;		None               void
  9152 ;; Registers used:
  9153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;Total ram usage:        2 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    7
  9166 ;; This function calls:
  9167 ;;		_CC2500_ReadByte
  9168 ;;		_CC2500_ReadStatus
  9169 ;;		_CC2500_WriteByte
  9170 ;;		_Timeout_Counter
  9171 ;;		_set_TimeoutCleared
  9172 ;; This function is called by:
  9173 ;;		_setRF_Main
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _CC2500_RxData
  9179  0D01                     _CC2500_RxData:	
  9180                           
  9181                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9182                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9183                           
  9184                           ;incstack = 0
  9185                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9186  0D01  0020               	movlb	0	; select bank0
  9187  0D02  180D               	btfsc	13,0	;volatile
  9188  0D03  2D08               	goto	l8337
  9189  0D04  2D11               	goto	l8343
  9190  0D05                     l8335:	
  9191                           ;CC2500_B1.c: 76: {
  9192                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9193                           
  9194                           
  9195                           ;CC2500_B1.c: 78: Timeout_Counter();
  9196  0D05  319F  27C1  318D   	fcall	_Timeout_Counter
  9197  0D08                     l8337:	
  9198  0D08  0020               	movlb	0	; select bank0
  9199  0D09  1C0D               	btfss	13,0	;volatile
  9200  0D0A  2D0E               	goto	l8341
  9201  0D0B  0021               	movlb	1	; select bank1
  9202  0D0C  1D2F               	btfss	(_myMain^(0+128)+15),2
  9203  0D0D  2D05               	goto	l8335
  9204  0D0E                     l8341:	
  9205                           
  9206                           ;CC2500_B1.c: 79: };
  9207                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9208  0D0E  319D  258C  318D   	fcall	_set_TimeoutCleared
  9209  0D11                     l8343:	
  9210                           
  9211                           ;CC2500_B1.c: 81: }
  9212                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9213  0D11  303B               	movlw	59
  9214  0D12  3191  21A4  318D   	fcall	_CC2500_ReadStatus
  9215                           
  9216                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9217  0D15  0021               	movlb	1	; select bank1
  9218  0D16  085D               	movf	_s_data^(0+128),w
  9219  0D17  1903               	btfsc	3,2
  9220  0D18  0008               	return
  9221                           
  9222                           ;CC2500_B1.c: 86: RC4 = 0;
  9223  0D19  0020               	movlb	0	; select bank0
  9224  0D1A  120E               	bcf	14,4	;volatile
  9225                           
  9226                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9227  0D1B  30FF               	movlw	255
  9228  0D1C  00A4               	movwf	??_CC2500_RxData
  9229  0D1D  0824               	movf	??_CC2500_RxData,w
  9230  0D1E  00FA               	movwf	_SPI0Buffer
  9231                           
  9232                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9233  0D1F  2D26               	goto	l8353
  9234  0D20                     l8355:	
  9235  0D20  0021               	movlb	1	; select bank1
  9236  0D21  192F               	btfsc	(_myMain^(0+128)+15),2
  9237  0D22  2D29               	goto	l272
  9238                           
  9239                           ;CC2500_B1.c: 89: Timeout_Counter();
  9240  0D23  319F  27C1  318D   	fcall	_Timeout_Counter
  9241  0D26                     l8353:	
  9242  0D26  0020               	movlb	0	; select bank0
  9243  0D27  190E               	btfsc	14,2	;volatile
  9244  0D28  2D20               	goto	l8355
  9245  0D29                     l272:	
  9246                           
  9247                           ;CC2500_B1.c: 90: };
  9248                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9249  0D29  0021               	movlb	1	; select bank1
  9250  0D2A  192F               	btfsc	(_myMain^(0+128)+15),2
  9251  0D2B  2D6C               	goto	l273
  9252                           
  9253                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9254  0D2C  319F  27AD  318D   	fcall	_CC2500_WriteByte
  9255                           
  9256                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9257  0D2F  3190  2080  318D   	fcall	_CC2500_ReadByte
  9258                           
  9259                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9260  0D32  087A               	movf	_SPI0Buffer,w
  9261  0D33  0020               	movlb	0	; select bank0
  9262  0D34  00A4               	movwf	??_CC2500_RxData
  9263  0D35  0824               	movf	??_CC2500_RxData,w
  9264  0D36  0021               	movlb	1	; select bank1
  9265  0D37  00D9               	movwf	_Rx_Length^(0+128)
  9266                           
  9267                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9268  0D38  0020               	movlb	0	; select bank0
  9269  0D39  01A5               	clrf	CC2500_RxData@loop_f
  9270  0D3A                     l8369:	
  9271  0D3A  0021               	movlb	1	; select bank1
  9272  0D3B  0859               	movf	_Rx_Length^(0+128),w
  9273  0D3C  0020               	movlb	0	; select bank0
  9274  0D3D  0225               	subwf	CC2500_RxData@loop_f,w
  9275  0D3E  1803               	btfsc	3,0
  9276  0D3F  2D52               	goto	l8371
  9277                           
  9278                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9279  0D40  3190  2080  318D   	fcall	_CC2500_ReadByte
  9280                           
  9281                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9282  0D43  087A               	movf	_SPI0Buffer,w
  9283  0D44  0020               	movlb	0	; select bank0
  9284  0D45  00A4               	movwf	??_CC2500_RxData
  9285  0D46  0825               	movf	CC2500_RxData@loop_f,w
  9286  0D47  3E20               	addlw	_RF_Data& (0+255)
  9287  0D48  0086               	movwf	6
  9288  0D49  3001               	movlw	1	; select bank2/3
  9289  0D4A  0087               	movwf	7
  9290  0D4B  0824               	movf	??_CC2500_RxData,w
  9291  0D4C  0081               	movwf	1
  9292  0D4D  3001               	movlw	1
  9293  0D4E  00A4               	movwf	??_CC2500_RxData
  9294  0D4F  0824               	movf	??_CC2500_RxData,w
  9295  0D50  07A5               	addwf	CC2500_RxData@loop_f,f
  9296  0D51  2D3A               	goto	l8369
  9297  0D52                     l8371:	
  9298                           
  9299                           ;CC2500_B1.c: 99: }
  9300                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9301  0D52  3190  2080  318D   	fcall	_CC2500_ReadByte
  9302                           
  9303                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9304  0D55  087A               	movf	_SPI0Buffer,w
  9305  0D56  0020               	movlb	0	; select bank0
  9306  0D57  00A4               	movwf	??_CC2500_RxData
  9307  0D58  0824               	movf	??_CC2500_RxData,w
  9308  0D59  0021               	movlb	1	; select bank1
  9309  0D5A  00D8               	movwf	_RSSI^(0+128)
  9310                           
  9311                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9312  0D5B  3190  2080  318D   	fcall	_CC2500_ReadByte
  9313                           
  9314                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9315  0D5E  087A               	movf	_SPI0Buffer,w
  9316  0D5F  0020               	movlb	0	; select bank0
  9317  0D60  00A4               	movwf	??_CC2500_RxData
  9318  0D61  0824               	movf	??_CC2500_RxData,w
  9319  0D62  0021               	movlb	1	; select bank1
  9320  0D63  00D6               	movwf	_CRC^(0+128)
  9321                           
  9322                           ;CC2500_B1.c: 104: RC4 = 1;
  9323  0D64  0020               	movlb	0	; select bank0
  9324  0D65  160E               	bsf	14,4	;volatile
  9325                           
  9326                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9327  0D66  0021               	movlb	1	; select bank1
  9328  0D67  1BD6               	btfsc	_CRC^(0+128),7
  9329                           
  9330                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9331  0D68  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9332                           
  9333                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9334  0D69  11BE               	bcf	_RF1^(0+128),3
  9335                           
  9336                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9337  0D6A  14BE               	bsf	_RF1^(0+128),1
  9338                           
  9339                           ;CC2500_B1.c: 110: } else {
  9340  0D6B  2D6E               	goto	l8383
  9341  0D6C                     l273:	
  9342                           
  9343                           ;CC2500_B1.c: 111: RC4 = 1;
  9344  0D6C  0020               	movlb	0	; select bank0
  9345  0D6D  160E               	bsf	14,4	;volatile
  9346  0D6E                     l8383:	
  9347                           
  9348                           ;CC2500_B1.c: 112: }
  9349                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9350  0D6E  319D  258C         	fcall	_set_TimeoutCleared
  9351  0D70  0021               	movlb	1	; select bank1
  9352  0D71  0008               	return
  9353  0D72                     __end_of_CC2500_RxData:	
  9354                           
  9355                           	psect	text44
  9356  11A4                     __ptext44:	
  9357 ;; *************** function _CC2500_ReadStatus *****************
  9358 ;; Defined at:
  9359 ;;		line 304 in file "../src/CC2500_B1.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  status_addr     1    wreg     unsigned char 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9364 ;; Return value:  Size  Location     Type
  9365 ;;		None               void
  9366 ;; Registers used:
  9367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;Total ram usage:        2 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    6
  9380 ;; This function calls:
  9381 ;;		_CC2500_ReadByte
  9382 ;;		_CC2500_WriteByte
  9383 ;;		_Timeout_Counter
  9384 ;;		_set_TimeoutCleared
  9385 ;; This function is called by:
  9386 ;;		_CC2500_RxData
  9387 ;;		_setRF_Main
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function _CC2500_ReadStatus
  9393  11A4                     _CC2500_ReadStatus:	
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9397                           ;CC2500_ReadStatus@status_addr stored from wreg
  9398  11A4  0020               	movlb	0	; select bank0
  9399  11A5  00A3               	movwf	CC2500_ReadStatus@status_addr
  9400                           
  9401                           ;CC2500_B1.c: 305: RC4 = 0;
  9402  11A6  120E               	bcf	14,4	;volatile
  9403                           
  9404                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9405  11A7  0823               	movf	CC2500_ReadStatus@status_addr,w
  9406  11A8  3EC0               	addlw	192
  9407  11A9  00A2               	movwf	??_CC2500_ReadStatus
  9408  11AA  0822               	movf	??_CC2500_ReadStatus,w
  9409  11AB  00FA               	movwf	_SPI0Buffer
  9410                           
  9411                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9412  11AC  29B0               	goto	l8163
  9413  11AD                     l8161:	
  9414                           
  9415                           ;CC2500_B1.c: 309: Timeout_Counter();
  9416  11AD  319F  27C1  3191   	fcall	_Timeout_Counter
  9417  11B0                     l8163:	
  9418  11B0  0020               	movlb	0	; select bank0
  9419  11B1  1D0E               	btfss	14,2	;volatile
  9420  11B2  29B6               	goto	l8167
  9421  11B3  0021               	movlb	1	; select bank1
  9422  11B4  1D2F               	btfss	(_myMain^(0+128)+15),2
  9423  11B5  29AD               	goto	l8161
  9424  11B6                     l8167:	
  9425                           
  9426                           ;CC2500_B1.c: 310: };
  9427                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9428  11B6  319D  258C  3191   	fcall	_set_TimeoutCleared
  9429                           
  9430                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9431  11B9  319F  27AD  3191   	fcall	_CC2500_WriteByte
  9432                           
  9433                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9434  11BC  3190  2080         	fcall	_CC2500_ReadByte
  9435                           
  9436                           ;CC2500_B1.c: 315: RC4 = 1;
  9437  11BE  0020               	movlb	0	; select bank0
  9438  11BF  160E               	bsf	14,4	;volatile
  9439                           
  9440                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9441  11C0  087A               	movf	_SPI0Buffer,w
  9442  11C1  00A2               	movwf	??_CC2500_ReadStatus
  9443  11C2  0822               	movf	??_CC2500_ReadStatus,w
  9444  11C3  0021               	movlb	1	; select bank1
  9445  11C4  00DD               	movwf	_s_data^(0+128)
  9446  11C5  0008               	return
  9447  11C6                     __end_of_CC2500_ReadStatus:	
  9448                           
  9449                           	psect	text45
  9450  1080                     __ptext45:	
  9451 ;; *************** function _CC2500_ReadByte *****************
  9452 ;; Defined at:
  9453 ;;		line 238 in file "../src/CC2500_B1.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;		None               void
  9460 ;; Registers used:
  9461 ;;		wreg, status,2, status,0
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;Total ram usage:        2 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    5
  9474 ;; This function calls:
  9475 ;;		Nothing
  9476 ;; This function is called by:
  9477 ;;		_CC2500_RxData
  9478 ;;		_CC2500_ReadStatus
  9479 ;;		_CC2500_ReadREG
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _CC2500_ReadByte
  9485  1080                     _CC2500_ReadByte:	
  9486                           
  9487                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9488                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9489                           
  9490                           ;incstack = 0
  9491                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9492  1080  0020               	movlb	0	; select bank0
  9493  1081  01A1               	clrf	CC2500_ReadByte@loop_b
  9494  1082                     L3:	
  9495  1082  3008               	movlw	8
  9496  1083  0221               	subwf	CC2500_ReadByte@loop_b,w
  9497  1084  1803               	btfsc	3,0
  9498  1085  0008               	return
  9499                           
  9500                           ;CC2500_B1.c: 241: RC1 = 1;
  9501  1086  148E               	bsf	14,1	;volatile
  9502                           
  9503                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9504  1087  1003               	clrc
  9505  1088  0DFA               	rlf	_SPI0Buffer,f
  9506                           
  9507                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9508  1089  1D0E               	btfss	14,2	;volatile
  9509  108A  288D               	goto	l8029
  9510                           
  9511                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9512  108B  147A               	bsf	_SPI0Buffer,0
  9513  108C  2891               	goto	l8031
  9514  108D                     l8029:	
  9515                           
  9516                           ;CC2500_B1.c: 245: else
  9517                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9518  108D  30FE               	movlw	254
  9519  108E  00A0               	movwf	??_CC2500_ReadByte
  9520  108F  0820               	movf	??_CC2500_ReadByte,w
  9521  1090  05FA               	andwf	_SPI0Buffer,f
  9522  1091                     l8031:	
  9523                           
  9524                           ;CC2500_B1.c: 247: RC1 = 0;
  9525  1091  108E               	bcf	14,1	;volatile
  9526  1092  3001               	movlw	1
  9527  1093  00A0               	movwf	??_CC2500_ReadByte
  9528  1094  0820               	movf	??_CC2500_ReadByte,w
  9529  1095  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9530  1096  2882               	goto	L3
  9531  1097                     __end_of_CC2500_ReadByte:	
  9532                           
  9533                           	psect	text46
  9534  1D5D                     __ptext46:	
  9535 ;; *************** function _RF_Initialization *****************
  9536 ;; Defined at:
  9537 ;;		line 9 in file "../src/RF_Control_B1.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;		None               void
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0, pclath, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    6
  9558 ;; This function calls:
  9559 ;;		_setRF_Initialization
  9560 ;; This function is called by:
  9561 ;;		_main
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           
  9566                           ;psect for function _RF_Initialization
  9567  1D5D                     _RF_Initialization:	
  9568                           
  9569                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9570                           
  9571                           ;incstack = 0
  9572                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9573  1D5D  319E  264B         	fcall	_setRF_Initialization
  9574  1D5F  0008               	return
  9575  1D60                     __end_of_RF_Initialization:	
  9576                           
  9577                           	psect	text47
  9578  1E4B                     __ptext47:	
  9579 ;; *************** function _setRF_Initialization *****************
  9580 ;; Defined at:
  9581 ;;		line 43 in file "../src/RF_Control_B1.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;		None               void
  9588 ;; Registers used:
  9589 ;;		wreg
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        1 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    5
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_RF_Initialization
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _setRF_Initialization
  9611  1E4B                     _setRF_Initialization:	
  9612                           
  9613                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9614                           
  9615                           ;incstack = 0
  9616                           ; Regs used in _setRF_Initialization: [wreg]
  9617  1E4B  3015               	movlw	21
  9618  1E4C  0020               	movlb	0	; select bank0
  9619  1E4D  00A0               	movwf	??_setRF_Initialization
  9620  1E4E  0820               	movf	??_setRF_Initialization,w
  9621  1E4F  0021               	movlb	1	; select bank1
  9622  1E50  00DA               	movwf	_Tx_Length^(0+128)
  9623                           
  9624                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9625  1E51  3014               	movlw	20
  9626  1E52  00C5               	movwf	(_RF1^(0+128)+7)
  9627  1E53  3000               	movlw	0
  9628  1E54  00C6               	movwf	(_RF1^(0+128)+8)
  9629  1E55  0008               	return
  9630  1E56                     __end_of_setRF_Initialization:	
  9631                           
  9632                           	psect	text48
  9633  1D5A                     __ptext48:	
  9634 ;; *************** function _PowerFault_Main *****************
  9635 ;; Defined at:
  9636 ;;		line 17 in file "../src/PowerFault_B1.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;		None
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;		None               void
  9643 ;; Registers used:
  9644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;Total ram usage:        0 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:   11
  9657 ;; This function calls:
  9658 ;;		_setPowerFault_Main
  9659 ;; This function is called by:
  9660 ;;		_main
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function _PowerFault_Main
  9666  1D5A                     _PowerFault_Main:	
  9667                           
  9668                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9669                           
  9670                           ;incstack = 0
  9671                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9672  1D5A  318D  2572         	fcall	_setPowerFault_Main
  9673  1D5C  0008               	return
  9674  1D5D                     __end_of_PowerFault_Main:	
  9675                           
  9676                           	psect	text49
  9677  0D72                     __ptext49:	
  9678 ;; *************** function _setPowerFault_Main *****************
  9679 ;; Defined at:
  9680 ;;		line 55 in file "../src/PowerFault_B1.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;		None
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;		None               void
  9687 ;; Registers used:
  9688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;Total ram usage:        1 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:   10
  9701 ;; This function calls:
  9702 ;;		_getTemp_Safe
  9703 ;;		_setPowerFault_Exceptions
  9704 ;; This function is called by:
  9705 ;;		_PowerFault_Main
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _setPowerFault_Main
  9711  0D72                     _setPowerFault_Main:	
  9712                           
  9713                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9714                           
  9715                           ;incstack = 0
  9716                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9717  0D72  0021               	movlb	1	; select bank1
  9718  0D73  1C4A               	btfss	_PF1^(0+128),0
  9719  0D74  0008               	return
  9720                           
  9721                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9722  0D75  19CA               	btfsc	_PF1^(0+128),3
  9723  0D76  2D94               	goto	l8983
  9724                           
  9725                           ;PowerFault_B1.c: 58: PF1.Time++;
  9726  0D77  3001               	movlw	1
  9727  0D78  07CC               	addwf	(_PF1^(0+128)+2),f
  9728  0D79  3000               	movlw	0
  9729  0D7A  3DCD               	addwfc	((_PF1+1)^(0+128)+2),f
  9730                           
  9731                           ;PowerFault_B1.c: 60: {
  9732                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9733  0D7B  3002               	movlw	2
  9734  0D7C  024D               	subwf	((_PF1+1)^(0+128)+2),w
  9735  0D7D  30BC               	movlw	188
  9736  0D7E  1903               	skipnz
  9737  0D7F  024C               	subwf	(_PF1^(0+128)+2),w
  9738  0D80  1C03               	skipc
  9739  0D81  0008               	return
  9740  0D82  319D  25B9  318D   	fcall	_getTemp_Safe
  9741  0D85  3A01               	xorlw	1
  9742  0D86  1D03               	skipz
  9743  0D87  2D8E               	goto	l8981
  9744                           
  9745                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9746  0D88  0021               	movlb	1	; select bank1
  9747  0D89  01CC               	clrf	(_PF1^(0+128)+2)
  9748  0D8A  01CD               	clrf	((_PF1+1)^(0+128)+2)
  9749                           
  9750                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9751  0D8B  15CA               	bsf	_PF1^(0+128),3
  9752                           
  9753                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9754  0D8C  114A               	bcf	_PF1^(0+128),2
  9755                           
  9756                           ;PowerFault_B1.c: 65: } else {
  9757  0D8D  0008               	return
  9758  0D8E                     l8981:	
  9759                           
  9760                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9761  0D8E  30BC               	movlw	188
  9762  0D8F  0021               	movlb	1	; select bank1
  9763  0D90  00CC               	movwf	(_PF1^(0+128)+2)
  9764  0D91  3002               	movlw	2
  9765  0D92  00CD               	movwf	(_PF1^(0+128)+3)
  9766                           
  9767                           ;PowerFault_B1.c: 67: }
  9768                           ;PowerFault_B1.c: 68: }
  9769                           ;PowerFault_B1.c: 69: } else {
  9770  0D93  0008               	return
  9771  0D94                     l8983:	
  9772                           
  9773                           ;PowerFault_B1.c: 70: PF1.Time++;
  9774  0D94  3001               	movlw	1
  9775  0D95  07CC               	addwf	(_PF1^(0+128)+2),f
  9776  0D96  3000               	movlw	0
  9777  0D97  3DCD               	addwfc	((_PF1+1)^(0+128)+2),f
  9778                           
  9779                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9780  0D98  3000               	movlw	0
  9781  0D99  024D               	subwf	((_PF1+1)^(0+128)+2),w
  9782  0D9A  3002               	movlw	2
  9783  0D9B  1903               	skipnz
  9784  0D9C  024C               	subwf	(_PF1^(0+128)+2),w
  9785  0D9D  1C03               	skipc
  9786  0D9E  0008               	return
  9787                           
  9788                           ;PowerFault_B1.c: 72: {
  9789                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9790  0D9F  01CC               	clrf	(_PF1^(0+128)+2)
  9791  0DA0  01CD               	clrf	((_PF1+1)^(0+128)+2)
  9792                           
  9793                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9794  0DA1  11CA               	bcf	_PF1^(0+128),3
  9795                           
  9796                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9797  0DA2  1CCA               	btfss	_PF1^(0+128),1
  9798  0DA3  2DC2               	goto	l9005
  9799                           
  9800                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9801  0DA4  3001               	movlw	1
  9802  0DA5  024F               	subwf	((_PF1+1)^(0+128)+4),w
  9803  0DA6  3091               	movlw	145
  9804  0DA7  1903               	skipnz
  9805  0DA8  024E               	subwf	(_PF1^(0+128)+4),w
  9806  0DA9  1803               	skipnc
  9807  0DAA  2DE0               	goto	l9017
  9808  0DAB  3000               	movlw	0
  9809  0DAC  024F               	subwf	((_PF1+1)^(0+128)+4),w
  9810  0DAD  30C8               	movlw	200
  9811  0DAE  1903               	skipnz
  9812  0DAF  024E               	subwf	(_PF1^(0+128)+4),w
  9813  0DB0  1C03               	skipc
  9814  0DB1  2DE0               	goto	l9017
  9815                           
  9816                           ;PowerFault_B1.c: 78: PF1.Count++;
  9817  0DB2  3001               	movlw	1
  9818  0DB3  0020               	movlb	0	; select bank0
  9819  0DB4  00B1               	movwf	??_setPowerFault_Main
  9820  0DB5  0831               	movf	??_setPowerFault_Main,w
  9821  0DB6  0021               	movlb	1	; select bank1
  9822  0DB7  07CB               	addwf	(_PF1^(0+128)+1),f
  9823                           
  9824                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9825  0DB8  3002               	movlw	2
  9826  0DB9  024B               	subwf	(_PF1^(0+128)+1),w
  9827  0DBA  1C03               	skipc
  9828  0DBB  2DE2               	goto	l9019
  9829                           
  9830                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9831  0DBC  01CB               	clrf	(_PF1^(0+128)+1)
  9832                           
  9833                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9834  0DBD  3000               	movlw	0
  9835  0DBE  3194  2431  318D   	fcall	_setPowerFault_Exceptions
  9836                           
  9837                           ;PowerFault_B1.c: 82: }
  9838                           ;PowerFault_B1.c: 83: } else {
  9839  0DC1  2DE2               	goto	l9019
  9840  0DC2                     l9005:	
  9841                           ;PowerFault_B1.c: 85: }
  9842                           ;PowerFault_B1.c: 86: } else {
  9843                           
  9844                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9845                           
  9846                           
  9847                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9848  0DC2  3001               	movlw	1
  9849  0DC3  024F               	subwf	((_PF1+1)^(0+128)+4),w
  9850  0DC4  3090               	movlw	144
  9851  0DC5  1903               	skipnz
  9852  0DC6  024E               	subwf	(_PF1^(0+128)+4),w
  9853  0DC7  1803               	skipnc
  9854  0DC8  2DD0               	goto	l9009
  9855  0DC9  3000               	movlw	0
  9856  0DCA  024F               	subwf	((_PF1+1)^(0+128)+4),w
  9857  0DCB  30D3               	movlw	211
  9858  0DCC  1903               	skipnz
  9859  0DCD  024E               	subwf	(_PF1^(0+128)+4),w
  9860  0DCE  1803               	skipnc
  9861  0DCF  2DE0               	goto	l9017
  9862  0DD0                     l9009:	
  9863                           
  9864                           ;PowerFault_B1.c: 88: PF1.Count++;
  9865  0DD0  3001               	movlw	1
  9866  0DD1  0020               	movlb	0	; select bank0
  9867  0DD2  00B1               	movwf	??_setPowerFault_Main
  9868  0DD3  0831               	movf	??_setPowerFault_Main,w
  9869  0DD4  0021               	movlb	1	; select bank1
  9870  0DD5  07CB               	addwf	(_PF1^(0+128)+1),f
  9871                           
  9872                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9873  0DD6  3002               	movlw	2
  9874  0DD7  024B               	subwf	(_PF1^(0+128)+1),w
  9875  0DD8  1C03               	skipc
  9876  0DD9  2DE2               	goto	l9019
  9877                           
  9878                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9879  0DDA  01CB               	clrf	(_PF1^(0+128)+1)
  9880                           
  9881                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9882  0DDB  3001               	movlw	1
  9883  0DDC  3194  2431  318D   	fcall	_setPowerFault_Exceptions
  9884                           
  9885                           ;PowerFault_B1.c: 92: }
  9886                           ;PowerFault_B1.c: 93: } else {
  9887  0DDF  2DE2               	goto	l9019
  9888  0DE0                     l9017:	
  9889                           
  9890                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9891  0DE0  0021               	movlb	1	; select bank1
  9892  0DE1  01CB               	clrf	(_PF1^(0+128)+1)
  9893  0DE2                     l9019:	
  9894                           
  9895                           ;PowerFault_B1.c: 95: }
  9896                           ;PowerFault_B1.c: 97: }
  9897                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9898  0DE2  0021               	movlb	1	; select bank1
  9899  0DE3  1CCA               	btfss	_PF1^(0+128),1
  9900                           
  9901                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9902  0DE4  154A               	bsf	_PF1^(0+128),2
  9903                           
  9904                           ;PowerFault_B1.c: 100: }
  9905                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9906  0DE5  01CE               	clrf	(_PF1^(0+128)+4)
  9907  0DE6  01CF               	clrf	((_PF1+1)^(0+128)+4)
  9908  0DE7  0008               	return
  9909  0DE8                     __end_of_setPowerFault_Main:	
  9910                           
  9911                           	psect	text50
  9912  1431                     __ptext50:	
  9913 ;; *************** function _setPowerFault_Exceptions *****************
  9914 ;; Defined at:
  9915 ;;		line 107 in file "../src/PowerFault_B1.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;  command         1    wreg     unsigned char 
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;  command         1   16[BANK0 ] unsigned char 
  9920 ;;  i               1   15[BANK0 ] unsigned char 
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        3 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    9
  9937 ;; This function calls:
  9938 ;;		_DimmerLights_Exceptions
  9939 ;;		_setLED
  9940 ;;		_setRF_Enable
  9941 ;;		_setSw_Enable
  9942 ;; This function is called by:
  9943 ;;		_setPowerFault_Main
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           
  9948                           ;psect for function _setPowerFault_Exceptions
  9949  1431                     _setPowerFault_Exceptions:	
  9950                           
  9951                           ;incstack = 0
  9952                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9953                           ;setPowerFault_Exceptions@command stored from wreg
  9954  1431  0020               	movlb	0	; select bank0
  9955  1432  00B0               	movwf	setPowerFault_Exceptions@command
  9956                           
  9957                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9958  1433  0830               	movf	setPowerFault_Exceptions@command,w
  9959  1434  3A01               	xorlw	1
  9960  1435  3000               	movlw	0
  9961  1436  1D03               	skipz
  9962  1437  3001               	movlw	1
  9963  1438  00AE               	movwf	??_setPowerFault_Exceptions
  9964  1439  082E               	movf	??_setPowerFault_Exceptions,w
  9965  143A  00AF               	movwf	setPowerFault_Exceptions@i
  9966                           
  9967                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
  9968  143B  0830               	movf	setPowerFault_Exceptions@command,w
  9969  143C  0021               	movlb	1	; select bank1
  9970  143D  10CA               	bcf	_PF1^(0+128),1
  9971  143E  1D03               	skipz
  9972  143F  14CA               	bsf	_PF1^(0+128),1
  9973                           
  9974                           ;PowerFault_B1.c: 110: PF1.Safe = i;
  9975  1440  0020               	movlb	0	; select bank0
  9976  1441  082F               	movf	setPowerFault_Exceptions@i,w
  9977  1442  0021               	movlb	1	; select bank1
  9978  1443  114A               	bcf	_PF1^(0+128),2
  9979  1444  1D03               	skipz
  9980  1445  154A               	bsf	_PF1^(0+128),2
  9981                           
  9982                           ;PowerFault_B1.c: 111: if (command == 1) {
  9983  1446  0020               	movlb	0	; select bank0
  9984  1447  0830               	movf	setPowerFault_Exceptions@command,w
  9985  1448  3A01               	xorlw	1
  9986  1449  1D03               	skipz
  9987  144A  2C56               	goto	l1747
  9988                           
  9989                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
  9990  144B  3003               	movlw	3
  9991  144C  3195  2522  3194   	fcall	_DimmerLights_Exceptions
  9992                           
  9993                           ;PowerFault_B1.c: 114: setLED(2, 1);
  9994  144F  0020               	movlb	0	; select bank0
  9995  1450  01A2               	clrf	setLED@command
  9996  1451  0AA2               	incf	setLED@command,f
  9997  1452  3002               	movlw	2
  9998  1453  3189  2168  3194   	fcall	_setLED
  9999  1456                     l1747:	
 10000                           
 10001                           ;PowerFault_B1.c: 116: }
 10002                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
 10003  1456  0020               	movlb	0	; select bank0
 10004  1457  0830               	movf	setPowerFault_Exceptions@command,w
 10005  1458  3E0A               	addlw	10
 10006  1459  00AE               	movwf	??_setPowerFault_Exceptions
 10007  145A  082E               	movf	??_setPowerFault_Exceptions,w
 10008  145B  00A2               	movwf	setLED@command
 10009  145C  3063               	movlw	99
 10010  145D  3189  2168  3194   	fcall	_setLED
 10011                           
 10012                           ;PowerFault_B1.c: 119: setSw_Enable(i);
 10013  1460  0020               	movlb	0	; select bank0
 10014  1461  082F               	movf	setPowerFault_Exceptions@i,w
 10015  1462  319E  26D8  3194   	fcall	_setSw_Enable
 10016                           
 10017                           ;PowerFault_B1.c: 121: setRF_Enable(i);
 10018  1465  0020               	movlb	0	; select bank0
 10019  1466  082F               	movf	setPowerFault_Exceptions@i,w
 10020  1467  319E  26BB         	fcall	_setRF_Enable
 10021  1469  0008               	return
 10022  146A                     __end_of_setPowerFault_Exceptions:	
 10023                           
 10024                           	psect	text51
 10025  1ED8                     __ptext51:	
 10026 ;; *************** function _setSw_Enable *****************
 10027 ;; Defined at:
 10028 ;;		line 91 in file "../src/Switch_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;  command         1    wreg     unsigned char 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  command         1    2[BANK0 ] unsigned char 
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        1 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    6
 10049 ;; This function calls:
 10050 ;;		_SwPointSelect
 10051 ;; This function is called by:
 10052 ;;		_setOverTemp_Exceptions
 10053 ;;		_setPowerFault_Exceptions
 10054 ;;		_my_MainTime
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function _setSw_Enable
 10060  1ED8                     _setSw_Enable:	
 10061                           
 10062                           ;incstack = 0
 10063                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10064                           ;setSw_Enable@command stored from wreg
 10065  1ED8  0020               	movlb	0	; select bank0
 10066  1ED9  00A2               	movwf	setSw_Enable@command
 10067                           
 10068                           ;Switch_B1.c: 94: SwPointSelect(1);
 10069  1EDA  3001               	movlw	1
 10070  1EDB  319E  2635         	fcall	_SwPointSelect
 10071                           
 10072                           ;Switch_B1.c: 95: Sw->Enable = command;
 10073  1EDD  0020               	movlb	0	; select bank0
 10074  1EDE  086C               	movf	_Sw,w
 10075  1EDF  0086               	movwf	6
 10076  1EE0  3001               	movlw	1	; select bank2/3
 10077  1EE1  0087               	movwf	7
 10078  1EE2  0822               	movf	setSw_Enable@command,w
 10079  1EE3  1001               	bcf	1,0
 10080  1EE4  1D03               	skipz
 10081  1EE5  1401               	bsf	1,0
 10082  1EE6  0008               	return
 10083  1EE7                     __end_of_setSw_Enable:	
 10084                           
 10085                           	psect	text52
 10086  1EBB                     __ptext52:	
 10087 ;; *************** function _setRF_Enable *****************
 10088 ;; Defined at:
 10089 ;;		line 225 in file "../src/RF_Control_B1.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;  command         1    wreg     unsigned char 
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  command         1    0[BANK0 ] unsigned char 
 10094 ;; Return value:  Size  Location     Type
 10095 ;;		None               void
 10096 ;; Registers used:
 10097 ;;		wreg, status,2
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/0
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;Total ram usage:        1 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:    5
 10110 ;; This function calls:
 10111 ;;		Nothing
 10112 ;; This function is called by:
 10113 ;;		_setOverTemp_Exceptions
 10114 ;;		_setPowerFault_Exceptions
 10115 ;;		_my_MainTime
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _setRF_Enable
 10121  1EBB                     _setRF_Enable:	
 10122                           
 10123                           ;incstack = 0
 10124                           ; Regs used in _setRF_Enable: [wreg+status,2]
 10125                           ;setRF_Enable@command stored from wreg
 10126  1EBB  0020               	movlb	0	; select bank0
 10127  1EBC  00A0               	movwf	setRF_Enable@command
 10128                           
 10129                           ;RF_Control_B1.c: 226: RF1.Enable = command;
 10130  1EBD  0820               	movf	setRF_Enable@command,w
 10131  1EBE  0021               	movlb	1	; select bank1
 10132  1EBF  103E               	bcf	_RF1^(0+128),0
 10133  1EC0  1D03               	skipz
 10134  1EC1  143E               	bsf	_RF1^(0+128),0
 10135                           
 10136                           ;RF_Control_B1.c: 227: RF1.Learn = 0;
 10137  1EC2  133E               	bcf	_RF1^(0+128),6
 10138                           
 10139                           ;RF_Control_B1.c: 228: RF1.TransceiveGO = 0;
 10140  1EC3  113E               	bcf	_RF1^(0+128),2
 10141                           
 10142                           ;RF_Control_B1.c: 229: RF1.RxStatus = 0;
 10143  1EC4  11BE               	bcf	_RF1^(0+128),3
 10144                           
 10145                           ;RF_Control_B1.c: 230: RF1.ReceiveGO = 0;
 10146  1EC5  10BE               	bcf	_RF1^(0+128),1
 10147                           
 10148                           ;RF_Control_B1.c: 231: RF1.DebounceTime = 0;
 10149  1EC6  01C7               	clrf	(_RF1^(0+128)+9)
 10150                           
 10151                           ;RF_Control_B1.c: 232: RF1.Debounce = 0;
 10152  1EC7  12BE               	bcf	_RF1^(0+128),5
 10153  1EC8  0008               	return
 10154  1EC9                     __end_of_setRF_Enable:	
 10155                           
 10156                           	psect	text53
 10157  1522                     __ptext53:	
 10158 ;; *************** function _DimmerLights_Exceptions *****************
 10159 ;; Defined at:
 10160 ;;		line 522 in file "../src/Dimmer_B1.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;  status          1    wreg     unsigned char 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;  status          1   13[BANK0 ] unsigned char 
 10165 ;; Return value:  Size  Location     Type
 10166 ;;		None               void
 10167 ;; Registers used:
 10168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;Total ram usage:        1 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    8
 10181 ;; This function calls:
 10182 ;;		_getDimmerLights_StatusFlag
 10183 ;;		_setBuz
 10184 ;;		_setDimmerLights_ERROR
 10185 ;;		_setDimmerLights_TriggerERROR
 10186 ;; This function is called by:
 10187 ;;		_setOverTemp_Exceptions
 10188 ;;		_setPowerFault_Exceptions
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           
 10193                           ;psect for function _DimmerLights_Exceptions
 10194  1522                     _DimmerLights_Exceptions:	
 10195                           
 10196                           ;incstack = 0
 10197                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10198                           ;DimmerLights_Exceptions@status stored from wreg
 10199  1522  0020               	movlb	0	; select bank0
 10200  1523  00AD               	movwf	DimmerLights_Exceptions@status
 10201                           
 10202                           ;Dimmer_B1.c: 523: if (status == 1) {
 10203  1524  082D               	movf	DimmerLights_Exceptions@status,w
 10204  1525  3A01               	xorlw	1
 10205  1526  1D03               	skipz
 10206  1527  2D38               	goto	l8185
 10207                           
 10208                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 10209  1528  319D  25FF  3195   	fcall	_getDimmerLights_StatusFlag
 10210  152B  3A01               	xorlw	1
 10211  152C  1D03               	skipz
 10212  152D  2D50               	goto	l8193
 10213                           
 10214                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 10215  152E  302C               	movlw	44
 10216  152F  0020               	movlb	0	; select bank0
 10217  1530  00A9               	movwf	setBuz@time
 10218  1531  3001               	movlw	1
 10219  1532  00AA               	movwf	setBuz@time+1
 10220  1533  300A               	movlw	10
 10221  1534  3188  2059  3195   	fcall	_setBuz
 10222  1537  2D50               	goto	l8193
 10223  1538                     l8185:	
 10224                           ;Dimmer_B1.c: 537: } else if (status == 2)
 10225                           
 10226                           ;Dimmer_B1.c: 526: }
 10227                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 10228                           
 10229  1538  0020               	movlb	0	; select bank0
 10230  1539  082D               	movf	DimmerLights_Exceptions@status,w
 10231  153A  3A02               	xorlw	2
 10232  153B  1D03               	skipz
 10233  153C  2D4B               	goto	l8191
 10234                           
 10235                           ;Dimmer_B1.c: 538: {
 10236                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 10237  153D  302C               	movlw	44
 10238  153E  00A9               	movwf	setBuz@time
 10239  153F  3001               	movlw	1
 10240  1540  00AA               	movwf	setBuz@time+1
 10241  1541  3005               	movlw	5
 10242  1542  3188  2059  3195   	fcall	_setBuz
 10243                           
 10244                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 10245  1545  0A76               	incf	_Dimmer,w
 10246  1546  0086               	movwf	6
 10247  1547  3001               	movlw	1	; select bank2/3
 10248  1548  0087               	movwf	7
 10249  1549  0801               	movf	1,w
 10250  154A  2D51               	goto	L4
 10251  154B                     l8191:	
 10252                           ;Dimmer_B1.c: 541: } else if (status == 3)
 10253                           
 10254  154B  0020               	movlb	0	; select bank0
 10255  154C  082D               	movf	DimmerLights_Exceptions@status,w
 10256  154D  3A03               	xorlw	3
 10257  154E  1D03               	skipz
 10258  154F  2D54               	goto	l797
 10259  1550                     l8193:	
 10260                           
 10261                           ;Dimmer_B1.c: 542: {
 10262                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 10263  1550  3001               	movlw	1
 10264  1551                     L4:	
 10265  1551  3197  2706  3195   	fcall	_setDimmerLights_ERROR
 10266  1554                     l797:	
 10267                           
 10268                           ;Dimmer_B1.c: 552: }
 10269                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 10270  1554  0020               	movlb	0	; select bank0
 10271  1555  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10272  1556  3001               	movlw	1
 10273  1557  3192  22AD  3195   	fcall	_setDimmerLights_TriggerERROR
 10274                           
 10275                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 10276  155A  0021               	movlb	1	; select bank1
 10277  155B  1B20               	btfsc	_myMain^(0+128),6
 10278  155C  0008               	return
 10279                           
 10280                           ;Dimmer_B1.c: 565: myMain.i = 0;
 10281  155D  102E               	bcf	(_myMain^(0+128)+14),0
 10282                           
 10283                           ;Dimmer_B1.c: 566: myMain.j = 0;
 10284  155E  10AE               	bcf	(_myMain^(0+128)+14),1
 10285                           
 10286                           ;Dimmer_B1.c: 567: myMain.k = 1;
 10287  155F  152E               	bsf	(_myMain^(0+128)+14),2
 10288                           
 10289                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 10290  1560  01A7               	clrf	(_myMain^(0+128)+7)
 10291  1561  01A8               	clrf	((_myMain+1)^(0+128)+7)
 10292  1562  0008               	return
 10293  1563                     __end_of_DimmerLights_Exceptions:	
 10294                           
 10295                           	psect	text54
 10296  12AD                     __ptext54:	
 10297 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10298 ;; Defined at:
 10299 ;;		line 591 in file "../src/Dimmer_B1.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  lights          1    wreg     unsigned char 
 10302 ;;  command         1    2[BANK0 ] unsigned char 
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  lights          1    3[BANK0 ] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;		None               void
 10307 ;; Registers used:
 10308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10314 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;Total ram usage:        2 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    6
 10321 ;; This function calls:
 10322 ;;		_DimmerLightsPointSelect
 10323 ;; This function is called by:
 10324 ;;		_DimmerLights_Exceptions
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _setDimmerLights_TriggerERROR
 10330  12AD                     _setDimmerLights_TriggerERROR:	
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10334                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10335  12AD  0020               	movlb	0	; select bank0
 10336  12AE  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10337                           
 10338                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 10339  12AF  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10340  12B0  319E  261F         	fcall	_DimmerLightsPointSelect
 10341                           
 10342                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 10343  12B2  0020               	movlb	0	; select bank0
 10344  12B3  086A               	movf	_DimmerLights,w
 10345  12B4  3E08               	addlw	8
 10346  12B5  0086               	movwf	6
 10347  12B6  3001               	movlw	1	; select bank2/3
 10348  12B7  0087               	movwf	7
 10349  12B8  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10350  12B9  1101               	bcf	1,2
 10351  12BA  1D03               	skipz
 10352  12BB  1501               	bsf	1,2
 10353                           
 10354                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 10355  12BC  086A               	movf	_DimmerLights,w
 10356  12BD  3E08               	addlw	8
 10357  12BE  0086               	movwf	6
 10358  12BF  3001               	movlw	1	; select bank2/3
 10359  12C0  0087               	movwf	7
 10360  12C1  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10361  12C2  1081               	bcf	1,1
 10362  12C3  1D03               	skipz
 10363  12C4  1481               	bsf	1,1
 10364                           
 10365                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 10366  12C5  086A               	movf	_DimmerLights,w
 10367  12C6  3E08               	addlw	8
 10368  12C7  0086               	movwf	6
 10369  12C8  3001               	movlw	1	; select bank2/3
 10370  12C9  0087               	movwf	7
 10371  12CA  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10372  12CB  1201               	bcf	1,4
 10373  12CC  1D03               	skipz
 10374  12CD  1601               	bsf	1,4
 10375                           
 10376                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 10377  12CE  086A               	movf	_DimmerLights,w
 10378  12CF  3E08               	addlw	8
 10379  12D0  0086               	movwf	6
 10380  12D1  3001               	movlw	1	; select bank2/3
 10381  12D2  0087               	movwf	7
 10382  12D3  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10383  12D4  1181               	bcf	1,3
 10384  12D5  1D03               	skipz
 10385  12D6  1581               	bsf	1,3
 10386  12D7  0008               	return
 10387  12D8                     __end_of_setDimmerLights_TriggerERROR:	
 10388                           
 10389                           	psect	text55
 10390  1706                     __ptext55:	
 10391 ;; *************** function _setDimmerLights_ERROR *****************
 10392 ;; Defined at:
 10393 ;;		line 573 in file "../src/Dimmer_B1.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  lights          1    wreg     unsigned char 
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;  lights          1    5[BANK0 ] unsigned char 
 10398 ;; Return value:  Size  Location     Type
 10399 ;;		None               void
 10400 ;; Registers used:
 10401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;Total ram usage:        2 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    7
 10414 ;; This function calls:
 10415 ;;		_DimmerLightsPointSelect
 10416 ;;		_setLED
 10417 ;;		_setRFSW_Status
 10418 ;;		_setSw_Status
 10419 ;; This function is called by:
 10420 ;;		_DimmerLights_Exceptions
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           
 10425                           ;psect for function _setDimmerLights_ERROR
 10426  1706                     _setDimmerLights_ERROR:	
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10430                           ;setDimmerLights_ERROR@lights stored from wreg
 10431  1706  0020               	movlb	0	; select bank0
 10432  1707  00A5               	movwf	setDimmerLights_ERROR@lights
 10433                           
 10434                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 10435  1708  0825               	movf	setDimmerLights_ERROR@lights,w
 10436  1709  319E  261F  3197   	fcall	_DimmerLightsPointSelect
 10437                           
 10438                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 10439  170C  0020               	movlb	0	; select bank0
 10440  170D  086A               	movf	_DimmerLights,w
 10441  170E  0086               	movwf	6
 10442  170F  3001               	movlw	1	; select bank2/3
 10443  1710  0087               	movwf	7
 10444  1711  1E81               	btfss	1,5
 10445  1712  0008               	return
 10446                           
 10447                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 10448  1713  086A               	movf	_DimmerLights,w
 10449  1714  0086               	movwf	6
 10450  1715  3001               	movlw	1	; select bank2/3
 10451  1716  0087               	movwf	7
 10452  1717  1081               	bcf	1,1
 10453                           
 10454                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 10455  1718  086A               	movf	_DimmerLights,w
 10456  1719  0086               	movwf	6
 10457  171A  3001               	movlw	1	; select bank2/3
 10458  171B  0087               	movwf	7
 10459  171C  1181               	bcf	1,3
 10460                           
 10461                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 10462  171D  086A               	movf	_DimmerLights,w
 10463  171E  0086               	movwf	6
 10464  171F  3001               	movlw	1	; select bank2/3
 10465  1720  0087               	movwf	7
 10466  1721  1201               	bcf	1,4
 10467                           
 10468                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 10469  1722  086A               	movf	_DimmerLights,w
 10470  1723  0086               	movwf	6
 10471  1724  3001               	movlw	1	; select bank2/3
 10472  1725  0087               	movwf	7
 10473  1726  1301               	bcf	1,6
 10474                           
 10475                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 10476  1727  3007               	movlw	7
 10477  1728  00A4               	movwf	??_setDimmerLights_ERROR
 10478  1729  086A               	movf	_DimmerLights,w
 10479  172A  3E02               	addlw	2
 10480  172B  0086               	movwf	6
 10481  172C  3001               	movlw	1	; select bank2/3
 10482  172D  0087               	movwf	7
 10483  172E  0824               	movf	??_setDimmerLights_ERROR,w
 10484  172F  0081               	movwf	1
 10485                           
 10486                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10487  1730  086A               	movf	_DimmerLights,w
 10488  1731  3E06               	addlw	6
 10489  1732  0086               	movwf	6
 10490  1733  3001               	movlw	1	; select bank2/3
 10491  1734  0087               	movwf	7
 10492  1735  0801               	movf	1,w
 10493  1736  00A4               	movwf	??_setDimmerLights_ERROR
 10494  1737  086A               	movf	_DimmerLights,w
 10495  1738  3E04               	addlw	4
 10496  1739  0086               	movwf	6
 10497  173A  3001               	movlw	1	; select bank2/3
 10498  173B  0087               	movwf	7
 10499  173C  0824               	movf	??_setDimmerLights_ERROR,w
 10500  173D  0081               	movwf	1
 10501                           
 10502                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 10503  173E  0876               	movf	_Dimmer,w
 10504  173F  0086               	movwf	6
 10505  1740  3001               	movlw	1	; select bank2/3
 10506  1741  0087               	movwf	7
 10507  1742  1401               	bsf	1,0
 10508                           
 10509                           ;Dimmer_B1.c: 584: ;;
 10510                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 10511  1743  01A2               	clrf	setLED@command
 10512  1744  0AA2               	incf	setLED@command,f
 10513  1745  0825               	movf	setDimmerLights_ERROR@lights,w
 10514  1746  3189  2168  3197   	fcall	_setLED
 10515                           
 10516                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 10517  1749  0020               	movlb	0	; select bank0
 10518  174A  01A2               	clrf	setSw_Status@command
 10519  174B  0825               	movf	setDimmerLights_ERROR@lights,w
 10520  174C  319E  26C9  3197   	fcall	_setSw_Status
 10521                           
 10522                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 10523  174F  0020               	movlb	0	; select bank0
 10524  1750  01A2               	clrf	setRFSW_Status@command
 10525  1751  0825               	movf	setDimmerLights_ERROR@lights,w
 10526  1752  319E  26AD         	fcall	_setRFSW_Status
 10527  1754  0008               	return
 10528  1755                     __end_of_setDimmerLights_ERROR:	
 10529                           
 10530                           	psect	text56
 10531  1DB9                     __ptext56:	
 10532 ;; *************** function _getTemp_Safe *****************
 10533 ;; Defined at:
 10534 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;  result          1    0[BANK0 ] unsigned char 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  1    wreg      unsigned char 
 10541 ;; Registers used:
 10542 ;;		wreg, status,2
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        1 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_setPowerFault_Main
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _getTemp_Safe
 10564  1DB9                     _getTemp_Safe:	
 10565                           
 10566                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 10570  1DB9  3000               	movlw	0
 10571  1DBA  0021               	movlb	1	; select bank1
 10572  1DBB  1A5E               	btfsc	_Temp1^(0+128),4
 10573  1DBC  3001               	movlw	1
 10574  1DBD  0020               	movlb	0	; select bank0
 10575  1DBE  00A0               	movwf	getTemp_Safe@result
 10576                           
 10577                           ;OverTemperature_B1.c: 23: return result;
 10578  1DBF  0820               	movf	getTemp_Safe@result,w
 10579  1DC0  0008               	return
 10580  1DC1                     __end_of_getTemp_Safe:	
 10581                           
 10582                           	psect	text57
 10583  1D57                     __ptext57:	
 10584 ;; *************** function _PowerFault_Initialization *****************
 10585 ;; Defined at:
 10586 ;;		line 10 in file "../src/PowerFault_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		status,2, status,0, pclath, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    6
 10607 ;; This function calls:
 10608 ;;		_setPowerFault_Initialization
 10609 ;; This function is called by:
 10610 ;;		_main
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _PowerFault_Initialization
 10616  1D57                     _PowerFault_Initialization:	
 10617                           
 10618                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10622  1D57  319D  2588         	fcall	_setPowerFault_Initialization
 10623  1D59  0008               	return
 10624  1D5A                     __end_of_PowerFault_Initialization:	
 10625                           
 10626                           	psect	text58
 10627  1D88                     __ptext58:	
 10628 ;; *************** function _setPowerFault_Initialization *****************
 10629 ;; Defined at:
 10630 ;;		line 24 in file "../src/PowerFault_B1.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;		None
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;		None               void
 10637 ;; Registers used:
 10638 ;;		None
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;Total ram usage:        0 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:    5
 10651 ;; This function calls:
 10652 ;;		Nothing
 10653 ;; This function is called by:
 10654 ;;		_PowerFault_Initialization
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _setPowerFault_Initialization
 10660  1D88                     _setPowerFault_Initialization:	
 10661                           
 10662                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10663                           
 10664                           ;incstack = 0
 10665                           ; Regs used in _setPowerFault_Initialization: []
 10666  1D88  0021               	movlb	1	; select bank1
 10667  1D89  144A               	bsf	_PF1^(0+128),0
 10668                           
 10669                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10670  1D8A  154A               	bsf	_PF1^(0+128),2
 10671  1D8B  0008               	return
 10672  1D8C                     __end_of_setPowerFault_Initialization:	
 10673                           
 10674                           	psect	text59
 10675  1F77                     __ptext59:	
 10676 ;; *************** function _Mcu_Initialization *****************
 10677 ;; Defined at:
 10678 ;;		line 30 in file "../src/MCU_B1.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;		None
 10683 ;; Return value:  Size  Location     Type
 10684 ;;		None               void
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;Total ram usage:        0 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    6
 10699 ;; This function calls:
 10700 ;;		_ADC_Set
 10701 ;;		_Fosc_Set
 10702 ;;		_IOC_Set
 10703 ;;		_IO_Set
 10704 ;;		_TMR0_Set
 10705 ;;		_WDT_Set
 10706 ;; This function is called by:
 10707 ;;		_main
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _Mcu_Initialization
 10713  1F77                     _Mcu_Initialization:	
 10714                           
 10715                           ;MCU_B1.c: 32: Fosc_Set();
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10719  1F77  319D  2584  319F   	fcall	_Fosc_Set
 10720                           
 10721                           ;MCU_B1.c: 34: IO_Set();
 10722  1F7A  3190  20B0  319F   	fcall	_IO_Set
 10723                           
 10724                           ;MCU_B1.c: 36: TMR0_Set();
 10725  1F7D  319D  25B1  319F   	fcall	_TMR0_Set
 10726                           
 10727                           ;MCU_B1.c: 38: ;;
 10728                           ;MCU_B1.c: 40: ADC_Set();
 10729  1F80  319D  25AA  319F   	fcall	_ADC_Set
 10730                           
 10731                           ;MCU_B1.c: 44: ;;
 10732                           ;MCU_B1.c: 46: IOC_Set();
 10733  1F83  319E  26A0  319F   	fcall	_IOC_Set
 10734                           
 10735                           ;MCU_B1.c: 48: ;;
 10736                           ;MCU_B1.c: 50: ;;
 10737                           ;MCU_B1.c: 52: WDT_Set();
 10738  1F86  319E  2640         	fcall	_WDT_Set
 10739  1F88  0008               	return
 10740  1F89                     __end_of_Mcu_Initialization:	
 10741                           
 10742                           	psect	text60
 10743  1E40                     __ptext60:	
 10744 ;; *************** function _WDT_Set *****************
 10745 ;; Defined at:
 10746 ;;		line 902 in file "../src/MCU_B1.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;		None
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;		None               void
 10753 ;; Registers used:
 10754 ;;		wreg
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;Total ram usage:        1 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    5
 10767 ;; This function calls:
 10768 ;;		Nothing
 10769 ;; This function is called by:
 10770 ;;		_Mcu_Initialization
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function _WDT_Set
 10776  1E40                     _WDT_Set:	
 10777                           
 10778                           ;MCU_B1.c: 903: WDTCON = 0b00010111;;
 10779                           
 10780                           ;incstack = 0
 10781                           ; Regs used in _WDT_Set: [wreg]
 10782  1E40  3017               	movlw	23
 10783  1E41  0021               	movlb	1	; select bank1
 10784  1E42  0097               	movwf	23	;volatile
 10785                           
 10786                           ;MCU_B1.c: 904: WDT.Enable = 1;
 10787  1E43  1454               	bsf	_WDT^(0+128),0
 10788                           
 10789                           ;MCU_B1.c: 905: WDT.Count = 10;
 10790  1E44  300A               	movlw	10
 10791  1E45  0020               	movlb	0	; select bank0
 10792  1E46  00A0               	movwf	??_WDT_Set
 10793  1E47  0820               	movf	??_WDT_Set,w
 10794  1E48  0021               	movlb	1	; select bank1
 10795  1E49  00D5               	movwf	(_WDT^(0+128)+1)
 10796  1E4A  0008               	return
 10797  1E4B                     __end_of_WDT_Set:	
 10798                           
 10799                           	psect	text61
 10800  1DB1                     __ptext61:	
 10801 ;; *************** function _TMR0_Set *****************
 10802 ;; Defined at:
 10803 ;;		line 126 in file "../src/MCU_B1.c"
 10804 ;; Parameters:    Size  Location     Type
 10805 ;;		None
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;		None               void
 10810 ;; Registers used:
 10811 ;;		wreg, status,2
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;Total ram usage:        0 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    5
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_Mcu_Initialization
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function _TMR0_Set
 10833  1DB1                     _TMR0_Set:	
 10834                           
 10835                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10839  1DB1  0021               	movlb	1	; select bank1
 10840  1DB2  0195               	clrf	21	;volatile
 10841                           
 10842                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10843  1DB3  3042               	movlw	66
 10844  1DB4  0020               	movlb	0	; select bank0
 10845  1DB5  0095               	movwf	21	;volatile
 10846                           
 10847                           ;MCU_B1.c: 130: TMR0IE = 1;
 10848  1DB6  168B               	bsf	11,5	;volatile
 10849                           
 10850                           ;MCU_B1.c: 131: GIE = 1;
 10851  1DB7  178B               	bsf	11,7	;volatile
 10852  1DB8  0008               	return
 10853  1DB9                     __end_of_TMR0_Set:	
 10854                           
 10855                           	psect	text62
 10856  10B0                     __ptext62:	
 10857 ;; *************** function _IO_Set *****************
 10858 ;; Defined at:
 10859 ;;		line 60 in file "../src/MCU_B1.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;		None
 10864 ;; Return value:  Size  Location     Type
 10865 ;;		None               void
 10866 ;; Registers used:
 10867 ;;		wreg, status,2
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        0 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    5
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_Mcu_Initialization
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function _IO_Set
 10889  10B0                     _IO_Set:	
 10890                           
 10891                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10892                           
 10893                           ;incstack = 0
 10894                           ; Regs used in _IO_Set: [wreg+status,2]
 10895  10B0  3077               	movlw	119
 10896  10B1  0021               	movlb	1	; select bank1
 10897  10B2  008C               	movwf	12	;volatile
 10898                           
 10899                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10900  10B3  3007               	movlw	7
 10901  10B4  008D               	movwf	13	;volatile
 10902                           
 10903                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10904  10B5  300C               	movlw	12
 10905  10B6  008E               	movwf	14	;volatile
 10906                           
 10907                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10908  10B7  0022               	movlb	2	; select bank2
 10909  10B8  018C               	clrf	12	;volatile
 10910                           
 10911                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10912  10B9  3002               	movlw	2
 10913  10BA  008D               	movwf	13	;volatile
 10914                           
 10915                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10916  10BB  018E               	clrf	14	;volatile
 10917                           
 10918                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10919  10BC  3022               	movlw	34
 10920  10BD  0023               	movlb	3	; select bank3
 10921  10BE  008C               	movwf	12	;volatile
 10922                           
 10923                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10924  10BF  018D               	clrf	13	;volatile
 10925                           
 10926                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10927  10C0  018E               	clrf	14	;volatile
 10928                           
 10929                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10930  10C1  3077               	movlw	119
 10931  10C2  0020               	movlb	0	; select bank0
 10932  10C3  008C               	movwf	12	;volatile
 10933                           
 10934                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10935  10C4  3007               	movlw	7
 10936  10C5  008D               	movwf	13	;volatile
 10937                           
 10938                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10939  10C6  300C               	movlw	12
 10940  10C7  008E               	movwf	14	;volatile
 10941  10C8  0008               	return
 10942  10C9                     __end_of_IO_Set:	
 10943                           
 10944                           	psect	text63
 10945  1EA0                     __ptext63:	
 10946 ;; *************** function _IOC_Set *****************
 10947 ;; Defined at:
 10948 ;;		line 264 in file "../src/MCU_B1.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;		None
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;		None
 10953 ;; Return value:  Size  Location     Type
 10954 ;;		None               void
 10955 ;; Registers used:
 10956 ;;		wreg, status,2
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;Total ram usage:        0 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    5
 10969 ;; This function calls:
 10970 ;;		Nothing
 10971 ;; This function is called by:
 10972 ;;		_Mcu_Initialization
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _IOC_Set
 10978  1EA0                     _IOC_Set:	
 10979                           
 10980                           ;MCU_B1.c: 265: WPUB2 = 0;
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _IOC_Set: [wreg+status,2]
 10984  1EA0  0024               	movlb	4	; select bank4
 10985  1EA1  110D               	bcf	13,2	;volatile
 10986                           
 10987                           ;MCU_B1.c: 268: IOCBP = 0b00000100;
 10988  1EA2  3004               	movlw	4
 10989  1EA3  0027               	movlb	7	; select bank7
 10990  1EA4  0094               	movwf	20	;volatile
 10991                           
 10992                           ;MCU_B1.c: 269: IOCBN = 0b00000100;
 10993  1EA5  3004               	movlw	4
 10994  1EA6  0095               	movwf	21	;volatile
 10995                           
 10996                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
 10997  1EA7  0196               	clrf	22	;volatile
 10998                           
 10999                           ;MCU_B1.c: 291: IOCIE = 1;
 11000  1EA8  158B               	bsf	11,3	;volatile
 11001                           
 11002                           ;MCU_B1.c: 292: IOCIF = 0;
 11003  1EA9  100B               	bcf	11,0	;volatile
 11004                           
 11005                           ;MCU_B1.c: 293: PEIE = 1;
 11006  1EAA  170B               	bsf	11,6	;volatile
 11007                           
 11008                           ;MCU_B1.c: 294: GIE = 1;
 11009  1EAB  178B               	bsf	11,7	;volatile
 11010  1EAC  0008               	return
 11011  1EAD                     __end_of_IOC_Set:	
 11012                           
 11013                           	psect	text64
 11014  1D84                     __ptext64:	
 11015 ;; *************** function _Fosc_Set *****************
 11016 ;; Defined at:
 11017 ;;		line 56 in file "../src/MCU_B1.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;		None
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;		None
 11022 ;; Return value:  Size  Location     Type
 11023 ;;		None               void
 11024 ;; Registers used:
 11025 ;;		wreg
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:        0 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:    5
 11038 ;; This function calls:
 11039 ;;		Nothing
 11040 ;; This function is called by:
 11041 ;;		_Mcu_Initialization
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           
 11046                           ;psect for function _Fosc_Set
 11047  1D84                     _Fosc_Set:	
 11048                           
 11049                           ;MCU_B1.c: 57: OSCCON = 0x78;
 11050                           
 11051                           ;incstack = 0
 11052                           ; Regs used in _Fosc_Set: [wreg]
 11053  1D84  3078               	movlw	120
 11054  1D85  0021               	movlb	1	; select bank1
 11055  1D86  0099               	movwf	25	;volatile
 11056  1D87  0008               	return
 11057  1D88                     __end_of_Fosc_Set:	
 11058                           
 11059                           	psect	text65
 11060  1DAA                     __ptext65:	
 11061 ;; *************** function _ADC_Set *****************
 11062 ;; Defined at:
 11063 ;;		line 316 in file "../src/MCU_B1.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;		None               void
 11070 ;; Registers used:
 11071 ;;		wreg
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;Total ram usage:        0 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    5
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		_Mcu_Initialization
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function _ADC_Set
 11093  1DAA                     _ADC_Set:	
 11094                           
 11095                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
 11096                           
 11097                           ;incstack = 0
 11098                           ; Regs used in _ADC_Set: [wreg]
 11099  1DAA  30F2               	movlw	242
 11100  1DAB  0021               	movlb	1	; select bank1
 11101  1DAC  009E               	movwf	30	;volatile
 11102                           
 11103                           ;MCU_B1.c: 318: FVRCON = 0xc0;
 11104  1DAD  30C0               	movlw	192
 11105  1DAE  0022               	movlb	2	; select bank2
 11106  1DAF  0097               	movwf	23	;volatile
 11107  1DB0  0008               	return
 11108  1DB1                     __end_of_ADC_Set:	
 11109                           
 11110                           	psect	text66
 11111  1E7A                     __ptext66:	
 11112 ;; *************** function _LED_Main *****************
 11113 ;; Defined at:
 11114 ;;		line 47 in file "../src/LED_B1.c"
 11115 ;; Parameters:    Size  Location     Type
 11116 ;;		None
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;		None
 11119 ;; Return value:  Size  Location     Type
 11120 ;;		None               void
 11121 ;; Registers used:
 11122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:        0 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    7
 11135 ;; This function calls:
 11136 ;;		_setLED_Main
 11137 ;; This function is called by:
 11138 ;;		_main
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _LED_Main
 11144  1E7A                     _LED_Main:	
 11145                           
 11146                           ;LED_B1.c: 49: setLED_Main(1);
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11150  1E7A  3001               	movlw	1
 11151  1E7B  3194  24E1  319E   	fcall	_setLED_Main
 11152                           
 11153                           ;LED_B1.c: 52: setLED_Main(2);
 11154  1E7E  3002               	movlw	2
 11155  1E7F  3194  24E1  319E   	fcall	_setLED_Main
 11156                           
 11157                           ;LED_B1.c: 58: setLED_Main(99);
 11158  1E82  3063               	movlw	99
 11159  1E83  3194  24E1         	fcall	_setLED_Main
 11160  1E85  0008               	return
 11161  1E86                     __end_of_LED_Main:	
 11162                           
 11163                           	psect	text67
 11164  14E1                     __ptext67:	
 11165 ;; *************** function _setLED_Main *****************
 11166 ;; Defined at:
 11167 ;;		line 192 in file "../src/LED_B1.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  led             1    wreg     unsigned char 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  led             1    4[BANK0 ] unsigned char 
 11172 ;; Return value:  Size  Location     Type
 11173 ;;		None               void
 11174 ;; Registers used:
 11175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;Total ram usage:        3 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; Hardware stack levels required when called:    6
 11188 ;; This function calls:
 11189 ;;		_LedPointSelect
 11190 ;; This function is called by:
 11191 ;;		_LED_Main
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           
 11196                           ;psect for function _setLED_Main
 11197  14E1                     _setLED_Main:	
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11201                           ;setLED_Main@led stored from wreg
 11202  14E1  0020               	movlb	0	; select bank0
 11203  14E2  00A4               	movwf	setLED_Main@led
 11204                           
 11205                           ;LED_B1.c: 193: LedPointSelect(led);
 11206  14E3  0824               	movf	setLED_Main@led,w
 11207  14E4  3187  27E2  3194   	fcall	_LedPointSelect
 11208                           
 11209                           ;LED_B1.c: 194: if (LED->GO == 1) {
 11210  14E7  0020               	movlb	0	; select bank0
 11211  14E8  086B               	movf	_LED,w
 11212  14E9  0086               	movwf	6
 11213  14EA  3001               	movlw	1	; select bank2/3
 11214  14EB  0087               	movwf	7
 11215  14EC  1C81               	btfss	1,1
 11216  14ED  0008               	return
 11217                           
 11218                           ;LED_B1.c: 195: LED->Time++;
 11219  14EE  0A6B               	incf	_LED,w
 11220  14EF  0086               	movwf	6
 11221  14F0  3001               	movlw	1	; select bank2/3
 11222  14F1  0087               	movwf	7
 11223  14F2  3001               	movlw	1
 11224  14F3  0781               	addwf	1,f
 11225  14F4  3141               	addfsr 1,1
 11226  14F5  1803               	skipnc
 11227  14F6  0A81               	incf	1,f
 11228                           
 11229                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 11230  14F7  0A6B               	incf	_LED,w
 11231  14F8  0086               	movwf	6
 11232  14F9  3001               	movlw	1	; select bank2/3
 11233  14FA  0087               	movwf	7
 11234  14FB  3F40               	moviw [0]fsr1
 11235  14FC  00A2               	movwf	??_setLED_Main
 11236  14FD  3F41               	moviw [1]fsr1
 11237  14FE  00A3               	movwf	??_setLED_Main+1
 11238  14FF  3000               	movlw	0
 11239  1500  0223               	subwf	??_setLED_Main+1,w
 11240  1501  3032               	movlw	50
 11241  1502  1903               	skipnz
 11242  1503  0222               	subwf	??_setLED_Main,w
 11243  1504  1C03               	skipc
 11244  1505  0008               	return
 11245                           
 11246                           ;LED_B1.c: 197: LED->Time = 0;
 11247  1506  0A6B               	incf	_LED,w
 11248  1507  0086               	movwf	6
 11249  1508  3001               	movlw	1	; select bank2/3
 11250  1509  0087               	movwf	7
 11251  150A  3000               	movlw	0
 11252  150B  3FC0               	movwi [0]fsr1
 11253  150C  3FC1               	movwi [1]fsr1
 11254                           
 11255                           ;LED_B1.c: 199: if (led == 1) {
 11256  150D  0824               	movf	setLED_Main@led,w
 11257  150E  3A01               	xorlw	1
 11258  150F  1D03               	skipz
 11259  1510  2D14               	goto	l8805
 11260                           
 11261                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 11262  1511  3008               	movlw	8
 11263  1512  068C               	xorwf	12,f
 11264                           
 11265                           ;LED_B1.c: 201: }
 11266  1513  0008               	return
 11267  1514                     l8805:	
 11268                           
 11269                           ;LED_B1.c: 204: else if (led == 2) {
 11270  1514  0824               	movf	setLED_Main@led,w
 11271  1515  3A02               	xorlw	2
 11272  1516  1D03               	skipz
 11273  1517  2D1B               	goto	l8809
 11274                           
 11275                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 11276  1518  3080               	movlw	128
 11277  1519  068E               	xorwf	14,f
 11278                           
 11279                           ;LED_B1.c: 206: }
 11280  151A  0008               	return
 11281  151B                     l8809:	
 11282                           
 11283                           ;LED_B1.c: 214: else if (led == 99) {
 11284  151B  0824               	movf	setLED_Main@led,w
 11285  151C  3A63               	xorlw	99
 11286  151D  1D03               	skipz
 11287  151E  0008               	return
 11288                           
 11289                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 11290  151F  3020               	movlw	32
 11291  1520  068D               	xorwf	13,f
 11292  1521  0008               	return
 11293  1522                     __end_of_setLED_Main:	
 11294                           
 11295                           	psect	text68
 11296  1E6E                     __ptext68:	
 11297 ;; *************** function _LED_Initialization *****************
 11298 ;; Defined at:
 11299 ;;		line 31 in file "../src/LED_B1.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;		None
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;		None
 11304 ;; Return value:  Size  Location     Type
 11305 ;;		None               void
 11306 ;; Registers used:
 11307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;Total ram usage:        0 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    8
 11320 ;; This function calls:
 11321 ;;		_setLED_Initialization
 11322 ;; This function is called by:
 11323 ;;		_main
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _LED_Initialization
 11329  1E6E                     _LED_Initialization:	
 11330                           
 11331                           ;LED_B1.c: 33: setLED_Initialization(1);
 11332                           
 11333                           ;incstack = 0
 11334                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11335  1E6E  3001               	movlw	1
 11336  1E6F  319F  2755  319E   	fcall	_setLED_Initialization
 11337                           
 11338                           ;LED_B1.c: 36: setLED_Initialization(2);
 11339  1E72  3002               	movlw	2
 11340  1E73  319F  2755  319E   	fcall	_setLED_Initialization
 11341                           
 11342                           ;LED_B1.c: 42: setLED_Initialization(99);
 11343  1E76  3063               	movlw	99
 11344  1E77  319F  2755         	fcall	_setLED_Initialization
 11345  1E79  0008               	return
 11346  1E7A                     __end_of_LED_Initialization:	
 11347                           
 11348                           	psect	text69
 11349  1F55                     __ptext69:	
 11350 ;; *************** function _setLED_Initialization *****************
 11351 ;; Defined at:
 11352 ;;		line 63 in file "../src/LED_B1.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  led             1    wreg     unsigned char 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  led             1    4[BANK0 ] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;		None               void
 11359 ;; Registers used:
 11360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        1 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    7
 11373 ;; This function calls:
 11374 ;;		_LedPointSelect
 11375 ;;		_setLED
 11376 ;; This function is called by:
 11377 ;;		_LED_Initialization
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           
 11382                           ;psect for function _setLED_Initialization
 11383  1F55                     _setLED_Initialization:	
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11387                           ;setLED_Initialization@led stored from wreg
 11388  1F55  0020               	movlb	0	; select bank0
 11389  1F56  00A4               	movwf	setLED_Initialization@led
 11390                           
 11391                           ;LED_B1.c: 64: LedPointSelect(led);
 11392  1F57  0824               	movf	setLED_Initialization@led,w
 11393  1F58  3187  27E2  319F   	fcall	_LedPointSelect
 11394                           
 11395                           ;LED_B1.c: 65: LED->Enable = 1;
 11396  1F5B  0020               	movlb	0	; select bank0
 11397  1F5C  086B               	movf	_LED,w
 11398  1F5D  0086               	movwf	6
 11399  1F5E  3001               	movlw	1	; select bank2/3
 11400  1F5F  0087               	movwf	7
 11401  1F60  1401               	bsf	1,0
 11402                           
 11403                           ;LED_B1.c: 66: setLED(led, 0);
 11404  1F61  01A2               	clrf	setLED@command
 11405  1F62  0824               	movf	setLED_Initialization@led,w
 11406  1F63  3189  2168         	fcall	_setLED
 11407  1F65  0008               	return
 11408  1F66                     __end_of_setLED_Initialization:	
 11409                           
 11410                           	psect	text70
 11411  1102                     __ptext70:	
 11412 ;; *************** function _Flash_Memory_Main *****************
 11413 ;; Defined at:
 11414 ;;		line 797 in file "../src/MCU_B1.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;		None
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;		None
 11419 ;; Return value:  Size  Location     Type
 11420 ;;		None               void
 11421 ;; Registers used:
 11422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;Total ram usage:        0 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    8
 11435 ;; This function calls:
 11436 ;;		_Flash_Memory_Modify
 11437 ;; This function is called by:
 11438 ;;		_main
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           
 11443                           ;psect for function _Flash_Memory_Main
 11444  1102                     _Flash_Memory_Main:	
 11445                           
 11446                           ;MCU_B1.c: 798: if (Memory.GO == 1) {
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11450  1102  0023               	movlb	3	; select bank3
 11451  1103  1CC4               	btfss	(_Memory^(0+384)+36),1
 11452  1104  0008               	return
 11453                           
 11454                           ;MCU_B1.c: 799: if (Memory.Modify == 1) {
 11455  1105  1C44               	btfss	(_Memory^(0+384)+36),0
 11456  1106  291F               	goto	l1254
 11457                           
 11458                           ;MCU_B1.c: 800: Memory.Time++;
 11459  1107  3001               	movlw	1
 11460  1108  07C2               	addwf	(_Memory^(0+384)+34),f
 11461  1109  3000               	movlw	0
 11462  110A  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11463                           
 11464                           ;MCU_B1.c: 801: if (Memory.Time == 25)
 11465  110B  3022               	movlw	34
 11466  110C  3EA0               	addlw	_Memory& (0+255)
 11467  110D  0086               	movwf	6
 11468  110E  3001               	movlw	1	; select bank3/4
 11469  110F  0087               	movwf	7
 11470  1110  3F40               	moviw [0]fsr1
 11471  1111  3A19               	xorlw	25
 11472  1112  1D03               	skipz
 11473  1113  2916               	goto	u9675
 11474  1114  3F41               	moviw [1]fsr1
 11475  1115  3A00               	xorlw	0
 11476  1116                     u9675:	
 11477  1116  1D03               	skipz
 11478  1117  0008               	return
 11479                           
 11480                           ;MCU_B1.c: 802: {
 11481                           ;MCU_B1.c: 803: Memory.Time = 0;
 11482  1118  01C2               	clrf	(_Memory^(0+384)+34)
 11483  1119  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11484                           
 11485                           ;MCU_B1.c: 804: Memory.Modify = 0;
 11486  111A  1044               	bcf	(_Memory^(0+384)+36),0
 11487                           
 11488                           ;MCU_B1.c: 805: Memory.GO = 0;
 11489  111B  10C4               	bcf	(_Memory^(0+384)+36),1
 11490                           
 11491                           ;MCU_B1.c: 806: Flash_Memory_Modify();
 11492  111C  3195  25A6         	fcall	_Flash_Memory_Modify
 11493                           
 11494                           ;MCU_B1.c: 807: }
 11495                           ;MCU_B1.c: 808: } else {
 11496  111E  0008               	return
 11497  111F                     l1254:	
 11498                           
 11499                           ;MCU_B1.c: 809: Memory.GO = 0;
 11500  111F  10C4               	bcf	(_Memory^(0+384)+36),1
 11501  1120  0008               	return
 11502  1121                     __end_of_Flash_Memory_Main:	
 11503                           
 11504                           	psect	text71
 11505  15A6                     __ptext71:	
 11506 ;; *************** function _Flash_Memory_Modify *****************
 11507 ;; Defined at:
 11508 ;;		line 866 in file "../src/MCU_B1.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;  i               1    5[BANK0 ] unsigned char 
 11513 ;; Return value:  Size  Location     Type
 11514 ;;		None               void
 11515 ;; Registers used:
 11516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;Total ram usage:        2 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    7
 11529 ;; This function calls:
 11530 ;;		_Flash_Memory_Erasing
 11531 ;;		_Flash_Memory_Read
 11532 ;;		_Flash_Memory_Write
 11533 ;; This function is called by:
 11534 ;;		_Flash_Memory_Main
 11535 ;; This function uses a non-reentrant model
 11536 ;;
 11537                           
 11538                           
 11539                           ;psect for function _Flash_Memory_Modify
 11540  15A6                     _Flash_Memory_Modify:	
 11541                           
 11542                           ;MCU_B1.c: 867: char i = 0;
 11543                           
 11544                           ;incstack = 0
 11545                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11546  15A6  0020               	movlb	0	; select bank0
 11547  15A7  01A5               	clrf	Flash_Memory_Modify@i
 11548                           
 11549                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
 11550  15A8  01A5               	clrf	Flash_Memory_Modify@i
 11551  15A9  3020               	movlw	32
 11552  15AA  0225               	subwf	Flash_Memory_Modify@i,w
 11553  15AB  1803               	btfsc	3,0
 11554  15AC  2DC2               	goto	l8889
 11555  15AD                     l8883:	
 11556                           
 11557                           ;MCU_B1.c: 869: Memory.Data[i] = Flash_Memory_Read(i);
 11558  15AD  0825               	movf	Flash_Memory_Modify@i,w
 11559  15AE  3190  20C9  3195   	fcall	_Flash_Memory_Read
 11560  15B1  0020               	movlb	0	; select bank0
 11561  15B2  00A4               	movwf	??_Flash_Memory_Modify
 11562  15B3  0825               	movf	Flash_Memory_Modify@i,w
 11563  15B4  3EA0               	addlw	_Memory& (0+255)
 11564  15B5  0086               	movwf	6
 11565  15B6  3001               	movlw	1	; select bank3/4
 11566  15B7  0087               	movwf	7
 11567  15B8  0824               	movf	??_Flash_Memory_Modify,w
 11568  15B9  0081               	movwf	1
 11569  15BA  3001               	movlw	1
 11570  15BB  00A4               	movwf	??_Flash_Memory_Modify
 11571  15BC  0824               	movf	??_Flash_Memory_Modify,w
 11572  15BD  07A5               	addwf	Flash_Memory_Modify@i,f
 11573  15BE  3020               	movlw	32
 11574  15BF  0225               	subwf	Flash_Memory_Modify@i,w
 11575  15C0  1C03               	skipc
 11576  15C1  2DAD               	goto	l8883
 11577  15C2                     l8889:	
 11578                           
 11579                           ;MCU_B1.c: 870: }
 11580                           ;MCU_B1.c: 871: Memory.Data[0]=product->Data[12];
 11581  15C2  086D               	movf	_product,w
 11582  15C3  0086               	movwf	6
 11583  15C4  3001               	movlw	1	; select bank2/3
 11584  15C5  0087               	movwf	7
 11585  15C6  3001               	movlw	1	; select bank2/3
 11586  15C7  3F4C               	moviw [12]fsr1
 11587  15C8  0023               	movlb	3	; select bank3
 11588  15C9  00A0               	movwf	_Memory^(0+384)
 11589                           
 11590                           ;MCU_B1.c: 872: Memory.Data[1]=product->Data[13];
 11591  15CA  0020               	movlb	0	; select bank0
 11592  15CB  086D               	movf	_product,w
 11593  15CC  0086               	movwf	6
 11594  15CD  3001               	movlw	1	; select bank2/3
 11595  15CE  0087               	movwf	7
 11596  15CF  3001               	movlw	1	; select bank2/3
 11597  15D0  3F4D               	moviw [13]fsr1
 11598  15D1  0023               	movlb	3	; select bank3
 11599  15D2  00A1               	movwf	(_Memory^(0+384)+1)
 11600                           
 11601                           ;MCU_B1.c: 873: Memory.Data[2]=product->Data[14];
 11602  15D3  0020               	movlb	0	; select bank0
 11603  15D4  086D               	movf	_product,w
 11604  15D5  0086               	movwf	6
 11605  15D6  3001               	movlw	1	; select bank2/3
 11606  15D7  0087               	movwf	7
 11607  15D8  3001               	movlw	1	; select bank2/3
 11608  15D9  3F4E               	moviw [14]fsr1
 11609  15DA  0023               	movlb	3	; select bank3
 11610  15DB  00A2               	movwf	(_Memory^(0+384)+2)
 11611                           
 11612                           ;MCU_B1.c: 879: if (Memory.LoopSave == 1) {
 11613  15DC  1D44               	btfss	(_Memory^(0+384)+36),2
 11614  15DD  2DE2               	goto	l1276
 11615                           
 11616                           ;MCU_B1.c: 880: Memory.LoopSave = 0;
 11617  15DE  1144               	bcf	(_Memory^(0+384)+36),2
 11618                           
 11619                           ;MCU_B1.c: 881: myMain.FirstOpen = 0;
 11620  15DF  0021               	movlb	1	; select bank1
 11621  15E0  12A0               	bcf	_myMain^(0+128),5
 11622                           
 11623                           ;MCU_B1.c: 882: myMain.First = 0;
 11624  15E1  13A0               	bcf	_myMain^(0+128),7
 11625  15E2                     l1276:	
 11626                           
 11627                           ;MCU_B1.c: 884: }
 11628                           ;MCU_B1.c: 885: GIE = 0;
 11629  15E2  138B               	bcf	11,7	;volatile
 11630                           
 11631                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
 11632  15E3  319E  2662  3195   	fcall	_Flash_Memory_Erasing
 11633                           
 11634                           ;MCU_B1.c: 887: Flash_Memory_Write();
 11635  15E6  3193  2334         	fcall	_Flash_Memory_Write
 11636                           
 11637                           ;MCU_B1.c: 888: GIE = 1;
 11638  15E8  178B               	bsf	11,7	;volatile
 11639  15E9  0008               	return
 11640  15EA                     __end_of_Flash_Memory_Modify:	
 11641                           
 11642                           	psect	text72
 11643  1E62                     __ptext72:	
 11644 ;; *************** function _Flash_Memory_Erasing *****************
 11645 ;; Defined at:
 11646 ;;		line 855 in file "../src/MCU_B1.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;		None               void
 11653 ;; Registers used:
 11654 ;;		wreg, status,2, status,0, pclath, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;Total ram usage:        0 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    6
 11667 ;; This function calls:
 11668 ;;		_Flash_Memory_Unlock
 11669 ;; This function is called by:
 11670 ;;		_Flash_Memory_Modify
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           
 11675                           ;psect for function _Flash_Memory_Erasing
 11676  1E62                     _Flash_Memory_Erasing:	
 11677                           
 11678                           ;MCU_B1.c: 856: CFGS = 0;
 11679                           
 11680                           ;incstack = 0
 11681                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11682  1E62  0023               	movlb	3	; select bank3
 11683  1E63  1315               	bcf	21,6	;volatile
 11684                           
 11685                           ;MCU_B1.c: 857: PMADRH = 0x30;
 11686  1E64  3030               	movlw	48
 11687  1E65  0092               	movwf	18	;volatile
 11688                           
 11689                           ;MCU_B1.c: 858: PMADRL = 0x00;
 11690  1E66  0191               	clrf	17	;volatile
 11691                           
 11692                           ;MCU_B1.c: 859: FREE = 1;
 11693  1E67  1615               	bsf	21,4	;volatile
 11694                           
 11695                           ;MCU_B1.c: 860: WREN = 1;
 11696  1E68  1515               	bsf	21,2	;volatile
 11697                           
 11698                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 11699  1E69  319D  25D9         	fcall	_Flash_Memory_Unlock
 11700                           
 11701                           ;MCU_B1.c: 862: WREN = 0;
 11702  1E6B  0023               	movlb	3	; select bank3
 11703  1E6C  1115               	bcf	21,2	;volatile
 11704  1E6D  0008               	return
 11705  1E6E                     __end_of_Flash_Memory_Erasing:	
 11706                           
 11707                           	psect	text73
 11708  0501                     __ptext73:	
 11709 ;; *************** function _Flash_Memory_Initialization *****************
 11710 ;; Defined at:
 11711 ;;		line 756 in file "../src/MCU_B1.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;		None
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  i               1   62[BANK0 ] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;		None               void
 11718 ;; Registers used:
 11719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;Total ram usage:        2 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    8
 11732 ;; This function calls:
 11733 ;;		_Flash_Memory_Read
 11734 ;;		_Flash_Memory_Write
 11735 ;;		_setPercentValue
 11736 ;; This function is called by:
 11737 ;;		_main
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function _Flash_Memory_Initialization
 11743  0501                     _Flash_Memory_Initialization:	
 11744                           
 11745                           ;MCU_B1.c: 757: char i = 0;
 11746                           
 11747                           ;incstack = 0
 11748                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11749  0501  0020               	movlb	0	; select bank0
 11750  0502  01DE               	clrf	Flash_Memory_Initialization@i
 11751                           
 11752                           ;MCU_B1.c: 758: if (Flash_Memory_Read(31) == 0xaa) {
 11753  0503  301F               	movlw	31
 11754  0504  3190  20C9  3185   	fcall	_Flash_Memory_Read
 11755  0507  3AAA               	xorlw	170
 11756  0508  1D03               	skipz
 11757  0509  2D73               	goto	l9317
 11758                           
 11759                           ;MCU_B1.c: 759: product->Data[12] = Flash_Memory_Read(0);
 11760  050A  3000               	movlw	0
 11761  050B  3190  20C9  3185   	fcall	_Flash_Memory_Read
 11762  050E  0020               	movlb	0	; select bank0
 11763  050F  00DD               	movwf	??_Flash_Memory_Initialization
 11764  0510  086D               	movf	_product,w
 11765  0511  3E0C               	addlw	12
 11766  0512  0086               	movwf	6
 11767  0513  3001               	movlw	1	; select bank2/3
 11768  0514  0087               	movwf	7
 11769  0515  085D               	movf	??_Flash_Memory_Initialization,w
 11770  0516  0081               	movwf	1
 11771                           
 11772                           ;MCU_B1.c: 760: product->Data[13] = Flash_Memory_Read(1);
 11773  0517  3001               	movlw	1
 11774  0518  3190  20C9  3185   	fcall	_Flash_Memory_Read
 11775  051B  0020               	movlb	0	; select bank0
 11776  051C  00DD               	movwf	??_Flash_Memory_Initialization
 11777  051D  086D               	movf	_product,w
 11778  051E  3E0D               	addlw	13
 11779  051F  0086               	movwf	6
 11780  0520  3001               	movlw	1	; select bank2/3
 11781  0521  0087               	movwf	7
 11782  0522  085D               	movf	??_Flash_Memory_Initialization,w
 11783  0523  0081               	movwf	1
 11784                           
 11785                           ;MCU_B1.c: 761: product->Data[14] = Flash_Memory_Read(2);
 11786  0524  3002               	movlw	2
 11787  0525  3190  20C9  3185   	fcall	_Flash_Memory_Read
 11788  0528  0020               	movlb	0	; select bank0
 11789  0529  00DD               	movwf	??_Flash_Memory_Initialization
 11790  052A  086D               	movf	_product,w
 11791  052B  3E0E               	addlw	14
 11792  052C  0086               	movwf	6
 11793  052D  3001               	movlw	1	; select bank2/3
 11794  052E  0087               	movwf	7
 11795  052F  085D               	movf	??_Flash_Memory_Initialization,w
 11796  0530  0081               	movwf	1
 11797                           
 11798                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-60)*0.8)));
 11799  0531  3020               	movlw	32
 11800  0532  3195  25EA  3185   	fcall	_setPercentValue
 11801  0535  0020               	movlb	0	; select bank0
 11802  0536  00DD               	movwf	??_Flash_Memory_Initialization
 11803  0537  085D               	movf	??_Flash_Memory_Initialization,w
 11804  0538  00DE               	movwf	Flash_Memory_Initialization@i
 11805                           
 11806                           ;MCU_B1.c: 768: product->Data[21] = i;
 11807  0539  085E               	movf	Flash_Memory_Initialization@i,w
 11808  053A  00DD               	movwf	??_Flash_Memory_Initialization
 11809  053B  086D               	movf	_product,w
 11810  053C  3E15               	addlw	21
 11811  053D  0086               	movwf	6
 11812  053E  3001               	movlw	1	; select bank2/3
 11813  053F  0087               	movwf	7
 11814  0540  085D               	movf	??_Flash_Memory_Initialization,w
 11815  0541  0081               	movwf	1
 11816                           
 11817                           ;MCU_B1.c: 769: product->Data[22] = i;
 11818  0542  085E               	movf	Flash_Memory_Initialization@i,w
 11819  0543  00DD               	movwf	??_Flash_Memory_Initialization
 11820  0544  086D               	movf	_product,w
 11821  0545  3E16               	addlw	22
 11822  0546  0086               	movwf	6
 11823  0547  3001               	movlw	1	; select bank2/3
 11824  0548  0087               	movwf	7
 11825  0549  085D               	movf	??_Flash_Memory_Initialization,w
 11826  054A  0081               	movwf	1
 11827                           
 11828                           ;MCU_B1.c: 770: product->Data[23] = i;
 11829  054B  085E               	movf	Flash_Memory_Initialization@i,w
 11830  054C  00DD               	movwf	??_Flash_Memory_Initialization
 11831  054D  086D               	movf	_product,w
 11832  054E  3E17               	addlw	23
 11833  054F  0086               	movwf	6
 11834  0550  3001               	movlw	1	; select bank2/3
 11835  0551  0087               	movwf	7
 11836  0552  085D               	movf	??_Flash_Memory_Initialization,w
 11837  0553  0081               	movwf	1
 11838                           
 11839                           ;MCU_B1.c: 772: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11840  0554  086D               	movf	_product,w
 11841  0555  3E0C               	addlw	12
 11842  0556  0086               	movwf	6
 11843  0557  3001               	movlw	1	; select bank2/3
 11844  0558  0087               	movwf	7
 11845  0559  0801               	movf	1,w
 11846  055A  3AFF               	xorlw	255
 11847  055B  1D03               	skipz
 11848  055C  0008               	return
 11849  055D  086D               	movf	_product,w
 11850  055E  3E0D               	addlw	13
 11851  055F  0086               	movwf	6
 11852  0560  3001               	movlw	1	; select bank2/3
 11853  0561  0087               	movwf	7
 11854  0562  0801               	movf	1,w
 11855  0563  3AFF               	xorlw	255
 11856  0564  1D03               	skipz
 11857  0565  0008               	return
 11858  0566  086D               	movf	_product,w
 11859  0567  3E0E               	addlw	14
 11860  0568  0086               	movwf	6
 11861  0569  3001               	movlw	1	; select bank2/3
 11862  056A  0087               	movwf	7
 11863  056B  0801               	movf	1,w
 11864  056C  3AFF               	xorlw	255
 11865  056D  1D03               	skipz
 11866  056E  0008               	return
 11867                           
 11868                           ;MCU_B1.c: 773: myMain.FirstOpen = 1;
 11869  056F  0021               	movlb	1	; select bank1
 11870  0570  16A0               	bsf	_myMain^(0+128),5
 11871                           
 11872                           ;MCU_B1.c: 774: myMain.First = 1;
 11873  0571  17A0               	bsf	_myMain^(0+128),7
 11874                           
 11875                           ;MCU_B1.c: 775: }
 11876                           ;MCU_B1.c: 776: } else {
 11877  0572  0008               	return
 11878  0573                     l9317:	
 11879                           
 11880                           ;MCU_B1.c: 777: i = setPercentValue(((char)((100-60)*0.8)));
 11881  0573  3020               	movlw	32
 11882  0574  3195  25EA  3185   	fcall	_setPercentValue
 11883  0577  0020               	movlb	0	; select bank0
 11884  0578  00DD               	movwf	??_Flash_Memory_Initialization
 11885  0579  085D               	movf	??_Flash_Memory_Initialization,w
 11886  057A  00DE               	movwf	Flash_Memory_Initialization@i
 11887                           
 11888                           ;MCU_B1.c: 778: Memory.Data[0]=0xff;
 11889  057B  30FF               	movlw	255
 11890  057C  00DD               	movwf	??_Flash_Memory_Initialization
 11891  057D  085D               	movf	??_Flash_Memory_Initialization,w
 11892  057E  0023               	movlb	3	; select bank3
 11893  057F  00A0               	movwf	_Memory^(0+384)
 11894                           
 11895                           ;MCU_B1.c: 779: Memory.Data[1]=0xff;
 11896  0580  30FF               	movlw	255
 11897  0581  0020               	movlb	0	; select bank0
 11898  0582  00DD               	movwf	??_Flash_Memory_Initialization
 11899  0583  085D               	movf	??_Flash_Memory_Initialization,w
 11900  0584  0023               	movlb	3	; select bank3
 11901  0585  00A1               	movwf	(_Memory^(0+384)+1)
 11902                           
 11903                           ;MCU_B1.c: 780: Memory.Data[2]=0xff;
 11904  0586  30FF               	movlw	255
 11905  0587  0020               	movlb	0	; select bank0
 11906  0588  00DD               	movwf	??_Flash_Memory_Initialization
 11907  0589  085D               	movf	??_Flash_Memory_Initialization,w
 11908  058A  0023               	movlb	3	; select bank3
 11909  058B  00A2               	movwf	(_Memory^(0+384)+2)
 11910                           
 11911                           ;MCU_B1.c: 781: Memory.Data[3]=0xff;
 11912  058C  30FF               	movlw	255
 11913  058D  0020               	movlb	0	; select bank0
 11914  058E  00DD               	movwf	??_Flash_Memory_Initialization
 11915  058F  085D               	movf	??_Flash_Memory_Initialization,w
 11916  0590  0023               	movlb	3	; select bank3
 11917  0591  00A3               	movwf	(_Memory^(0+384)+3)
 11918                           
 11919                           ;MCU_B1.c: 782: Memory.Data[4]=0xff;
 11920  0592  30FF               	movlw	255
 11921  0593  0020               	movlb	0	; select bank0
 11922  0594  00DD               	movwf	??_Flash_Memory_Initialization
 11923  0595  085D               	movf	??_Flash_Memory_Initialization,w
 11924  0596  0023               	movlb	3	; select bank3
 11925  0597  00A4               	movwf	(_Memory^(0+384)+4)
 11926                           
 11927                           ;MCU_B1.c: 783: Memory.Data[5]=0xff;
 11928  0598  30FF               	movlw	255
 11929  0599  0020               	movlb	0	; select bank0
 11930  059A  00DD               	movwf	??_Flash_Memory_Initialization
 11931  059B  085D               	movf	??_Flash_Memory_Initialization,w
 11932  059C  0023               	movlb	3	; select bank3
 11933  059D  00A5               	movwf	(_Memory^(0+384)+5)
 11934                           
 11935                           ;MCU_B1.c: 784: Memory.Data[31]=0xaa;
 11936  059E  30AA               	movlw	170
 11937  059F  0020               	movlb	0	; select bank0
 11938  05A0  00DD               	movwf	??_Flash_Memory_Initialization
 11939  05A1  085D               	movf	??_Flash_Memory_Initialization,w
 11940  05A2  0023               	movlb	3	; select bank3
 11941  05A3  00BF               	movwf	(_Memory^(0+384)+31)
 11942                           
 11943                           ;MCU_B1.c: 785: product->Data[21] = i;
 11944  05A4  0020               	movlb	0	; select bank0
 11945  05A5  085E               	movf	Flash_Memory_Initialization@i,w
 11946  05A6  00DD               	movwf	??_Flash_Memory_Initialization
 11947  05A7  086D               	movf	_product,w
 11948  05A8  3E15               	addlw	21
 11949  05A9  0086               	movwf	6
 11950  05AA  3001               	movlw	1	; select bank2/3
 11951  05AB  0087               	movwf	7
 11952  05AC  085D               	movf	??_Flash_Memory_Initialization,w
 11953  05AD  0081               	movwf	1
 11954                           
 11955                           ;MCU_B1.c: 786: product->Data[22] = i;
 11956  05AE  085E               	movf	Flash_Memory_Initialization@i,w
 11957  05AF  00DD               	movwf	??_Flash_Memory_Initialization
 11958  05B0  086D               	movf	_product,w
 11959  05B1  3E16               	addlw	22
 11960  05B2  0086               	movwf	6
 11961  05B3  3001               	movlw	1	; select bank2/3
 11962  05B4  0087               	movwf	7
 11963  05B5  085D               	movf	??_Flash_Memory_Initialization,w
 11964  05B6  0081               	movwf	1
 11965                           
 11966                           ;MCU_B1.c: 787: product->Data[23] = i;
 11967  05B7  085E               	movf	Flash_Memory_Initialization@i,w
 11968  05B8  00DD               	movwf	??_Flash_Memory_Initialization
 11969  05B9  086D               	movf	_product,w
 11970  05BA  3E17               	addlw	23
 11971  05BB  0086               	movwf	6
 11972  05BC  3001               	movlw	1	; select bank2/3
 11973  05BD  0087               	movwf	7
 11974  05BE  085D               	movf	??_Flash_Memory_Initialization,w
 11975  05BF  0081               	movwf	1
 11976                           
 11977                           ;MCU_B1.c: 788: GIE = 0;
 11978  05C0  138B               	bcf	11,7	;volatile
 11979                           
 11980                           ;MCU_B1.c: 789: Flash_Memory_Write();
 11981  05C1  3193  2334         	fcall	_Flash_Memory_Write
 11982                           
 11983                           ;MCU_B1.c: 790: GIE = 1;
 11984  05C3  178B               	bsf	11,7	;volatile
 11985                           
 11986                           ;MCU_B1.c: 791: myMain.FirstOpen = 1;
 11987  05C4  0021               	movlb	1	; select bank1
 11988  05C5  16A0               	bsf	_myMain^(0+128),5
 11989                           
 11990                           ;MCU_B1.c: 792: myMain.First = 1;
 11991  05C6  17A0               	bsf	_myMain^(0+128),7
 11992  05C7  0008               	return
 11993  05C8                     __end_of_Flash_Memory_Initialization:	
 11994                           
 11995                           	psect	text74
 11996  1334                     __ptext74:	
 11997 ;; *************** function _Flash_Memory_Write *****************
 11998 ;; Defined at:
 11999 ;;		line 836 in file "../src/MCU_B1.c"
 12000 ;; Parameters:    Size  Location     Type
 12001 ;;		None
 12002 ;; Auto vars:     Size  Location     Type
 12003 ;;  i               1    1[BANK0 ] unsigned char 
 12004 ;; Return value:  Size  Location     Type
 12005 ;;		None               void
 12006 ;; Registers used:
 12007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12008 ;; Tracked objects:
 12009 ;;		On entry : 0/0
 12010 ;;		On exit  : 0/0
 12011 ;;		Unchanged: 0/0
 12012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;Total ram usage:        2 bytes
 12018 ;; Hardware stack levels used:    1
 12019 ;; Hardware stack levels required when called:    6
 12020 ;; This function calls:
 12021 ;;		_Flash_Memory_Unlock
 12022 ;; This function is called by:
 12023 ;;		_Flash_Memory_Initialization
 12024 ;;		_Flash_Memory_Modify
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           
 12029                           ;psect for function _Flash_Memory_Write
 12030  1334                     _Flash_Memory_Write:	
 12031                           
 12032                           ;MCU_B1.c: 837: char i = 0;
 12033                           
 12034                           ;incstack = 0
 12035                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12036  1334  0020               	movlb	0	; select bank0
 12037  1335  01A1               	clrf	Flash_Memory_Write@i
 12038                           
 12039                           ;MCU_B1.c: 838: CFGS = 0;
 12040  1336  0023               	movlb	3	; select bank3
 12041  1337  1315               	bcf	21,6	;volatile
 12042                           
 12043                           ;MCU_B1.c: 839: PMADRH = 0x30;
 12044  1338  3030               	movlw	48
 12045  1339  0092               	movwf	18	;volatile
 12046                           
 12047                           ;MCU_B1.c: 840: PMDATH = 0;
 12048  133A  0194               	clrf	20	;volatile
 12049                           
 12050                           ;MCU_B1.c: 841: FREE = 0;
 12051  133B  1215               	bcf	21,4	;volatile
 12052                           
 12053                           ;MCU_B1.c: 842: LWLO = 1;
 12054  133C  1695               	bsf	21,5	;volatile
 12055                           
 12056                           ;MCU_B1.c: 843: WREN = 1;
 12057  133D  1515               	bsf	21,2	;volatile
 12058                           
 12059                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 12060  133E  0020               	movlb	0	; select bank0
 12061  133F  01A1               	clrf	Flash_Memory_Write@i
 12062  1340  3020               	movlw	32
 12063  1341  0221               	subwf	Flash_Memory_Write@i,w
 12064  1342  1803               	btfsc	3,0
 12065  1343  2B5C               	goto	l1267
 12066  1344                     l8467:	
 12067                           
 12068                           ;MCU_B1.c: 845: PMADRL = i;
 12069  1344  0821               	movf	Flash_Memory_Write@i,w
 12070  1345  0023               	movlb	3	; select bank3
 12071  1346  0091               	movwf	17	;volatile
 12072                           
 12073                           ;MCU_B1.c: 846: PMDATL = Memory.Data[i];
 12074  1347  0020               	movlb	0	; select bank0
 12075  1348  0821               	movf	Flash_Memory_Write@i,w
 12076  1349  3EA0               	addlw	_Memory& (0+255)
 12077  134A  0086               	movwf	6
 12078  134B  3001               	movlw	1	; select bank3/4
 12079  134C  0087               	movwf	7
 12080  134D  0801               	movf	1,w
 12081  134E  0023               	movlb	3	; select bank3
 12082  134F  0093               	movwf	19	;volatile
 12083                           
 12084                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 12085  1350  319D  25D9  3193   	fcall	_Flash_Memory_Unlock
 12086  1353  3001               	movlw	1
 12087  1354  0020               	movlb	0	; select bank0
 12088  1355  00A0               	movwf	??_Flash_Memory_Write
 12089  1356  0820               	movf	??_Flash_Memory_Write,w
 12090  1357  07A1               	addwf	Flash_Memory_Write@i,f
 12091  1358  3020               	movlw	32
 12092  1359  0221               	subwf	Flash_Memory_Write@i,w
 12093  135A  1C03               	skipc
 12094  135B  2B44               	goto	l8467
 12095  135C                     l1267:	
 12096                           
 12097                           ;MCU_B1.c: 848: }
 12098                           ;MCU_B1.c: 849: LWLO = 0;
 12099  135C  0023               	movlb	3	; select bank3
 12100  135D  1295               	bcf	21,5	;volatile
 12101                           
 12102                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 12103  135E  319D  25D9         	fcall	_Flash_Memory_Unlock
 12104                           
 12105                           ;MCU_B1.c: 851: WREN = 0;
 12106  1360  0023               	movlb	3	; select bank3
 12107  1361  1115               	bcf	21,2	;volatile
 12108  1362  0008               	return
 12109  1363                     __end_of_Flash_Memory_Write:	
 12110                           
 12111                           	psect	text75
 12112  1DD9                     __ptext75:	
 12113 ;; *************** function _Flash_Memory_Unlock *****************
 12114 ;; Defined at:
 12115 ;;		line 815 in file "../src/MCU_B1.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;		None
 12120 ;; Return value:  Size  Location     Type
 12121 ;;		None               void
 12122 ;; Registers used:
 12123 ;;		wreg
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;Total ram usage:        0 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    5
 12136 ;; This function calls:
 12137 ;;		Nothing
 12138 ;; This function is called by:
 12139 ;;		_Flash_Memory_Write
 12140 ;;		_Flash_Memory_Erasing
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           
 12145                           ;psect for function _Flash_Memory_Unlock
 12146  1DD9                     _Flash_Memory_Unlock:	
 12147                           
 12148                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 12149                           
 12150                           ;incstack = 0
 12151                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12152  1DD9  3055               	movlw	85
 12153  1DDA  0023               	movlb	3	; select bank3
 12154  1DDB  0096               	movwf	22	;volatile
 12155                           
 12156                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 12157  1DDC  30AA               	movlw	170
 12158  1DDD  0096               	movwf	22	;volatile
 12159                           
 12160                           ;MCU_B1.c: 818: WR = 1;
 12161  1DDE  1495               	bsf	21,1	;volatile
 12162                           
 12163                           ;MCU_B1.c: 819: __nop();
 12164  1DDF  0000               	nop
 12165                           
 12166                           ;MCU_B1.c: 820: __nop();
 12167  1DE0  0000               	nop
 12168  1DE1  0008               	return
 12169  1DE2                     __end_of_Flash_Memory_Unlock:	
 12170                           
 12171                           	psect	text76
 12172  10C9                     __ptext76:	
 12173 ;; *************** function _Flash_Memory_Read *****************
 12174 ;; Defined at:
 12175 ;;		line 824 in file "../src/MCU_B1.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;  address         1    wreg     unsigned char 
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;  address         1    2[BANK0 ] unsigned char 
 12180 ;;  ret             1    3[BANK0 ] unsigned char 
 12181 ;;  i               1    1[BANK0 ] unsigned char 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      unsigned char 
 12184 ;; Registers used:
 12185 ;;		wreg, status,2
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        4 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    5
 12198 ;; This function calls:
 12199 ;;		Nothing
 12200 ;; This function is called by:
 12201 ;;		_Flash_Memory_Initialization
 12202 ;;		_Flash_Memory_Modify
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           
 12207                           ;psect for function _Flash_Memory_Read
 12208  10C9                     _Flash_Memory_Read:	
 12209                           
 12210                           ;incstack = 0
 12211                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12212                           ;Flash_Memory_Read@address stored from wreg
 12213  10C9  0020               	movlb	0	; select bank0
 12214  10CA  00A2               	movwf	Flash_Memory_Read@address
 12215                           
 12216                           ;MCU_B1.c: 825: char i = 0, ret = 0;
 12217  10CB  01A1               	clrf	Flash_Memory_Read@i
 12218  10CC  01A3               	clrf	Flash_Memory_Read@ret
 12219                           
 12220                           ;MCU_B1.c: 826: PMADRH = 0x30;
 12221  10CD  3030               	movlw	48
 12222  10CE  0023               	movlb	3	; select bank3
 12223  10CF  0092               	movwf	18	;volatile
 12224                           
 12225                           ;MCU_B1.c: 827: PMADRL = address;
 12226  10D0  0020               	movlb	0	; select bank0
 12227  10D1  0822               	movf	Flash_Memory_Read@address,w
 12228  10D2  0023               	movlb	3	; select bank3
 12229  10D3  0091               	movwf	17	;volatile
 12230                           
 12231                           ;MCU_B1.c: 828: CFGS = 0;
 12232  10D4  1315               	bcf	21,6	;volatile
 12233                           
 12234                           ;MCU_B1.c: 829: RD = 1;
 12235  10D5  1415               	bsf	21,0	;volatile
 12236                           
 12237                           ;MCU_B1.c: 830: i = PMDATH;
 12238  10D6  0814               	movf	20,w	;volatile
 12239  10D7  0020               	movlb	0	; select bank0
 12240  10D8  00A0               	movwf	??_Flash_Memory_Read
 12241  10D9  0820               	movf	??_Flash_Memory_Read,w
 12242  10DA  00A1               	movwf	Flash_Memory_Read@i
 12243                           
 12244                           ;MCU_B1.c: 831: ret = PMDATL;
 12245  10DB  0023               	movlb	3	; select bank3
 12246  10DC  0813               	movf	19,w	;volatile
 12247  10DD  0020               	movlb	0	; select bank0
 12248  10DE  00A0               	movwf	??_Flash_Memory_Read
 12249  10DF  0820               	movf	??_Flash_Memory_Read,w
 12250  10E0  00A3               	movwf	Flash_Memory_Read@ret
 12251                           
 12252                           ;MCU_B1.c: 832: return ret;
 12253  10E1  0823               	movf	Flash_Memory_Read@ret,w
 12254  10E2  0008               	return
 12255  10E3                     __end_of_Flash_Memory_Read:	
 12256                           
 12257                           	psect	text77
 12258  1DA3                     __ptext77:	
 12259 ;; *************** function _DimmerLights_Main *****************
 12260 ;; Defined at:
 12261 ;;		line 416 in file "../src/Dimmer_B1.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;		None
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;		None
 12266 ;; Return value:  Size  Location     Type
 12267 ;;		None               void
 12268 ;; Registers used:
 12269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;Total ram usage:        0 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:   11
 12282 ;; This function calls:
 12283 ;;		_DimmerLights_Close
 12284 ;;		_setDimmerLights_Main
 12285 ;; This function is called by:
 12286 ;;		_main
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function _DimmerLights_Main
 12292  1DA3                     _DimmerLights_Main:	
 12293                           
 12294                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 12295                           
 12296                           ;incstack = 0
 12297                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12298  1DA3  3001               	movlw	1
 12299  1DA4  3188  20B2  319D   	fcall	_setDimmerLights_Main
 12300                           
 12301                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 12302  1DA7  319F  27EB         	fcall	_DimmerLights_Close
 12303  1DA9  0008               	return
 12304  1DAA                     __end_of_DimmerLights_Main:	
 12305                           
 12306                           	psect	text78
 12307  08B2                     __ptext78:	
 12308 ;; *************** function _setDimmerLights_Main *****************
 12309 ;; Defined at:
 12310 ;;		line 434 in file "../src/Dimmer_B1.c"
 12311 ;; Parameters:    Size  Location     Type
 12312 ;;  lights          1    wreg     unsigned char 
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  lights          1   70[BANK0 ] unsigned char 
 12315 ;;  clear           1   69[BANK0 ] unsigned char 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;		None               void
 12318 ;; Registers used:
 12319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;Total ram usage:        2 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:   10
 12332 ;; This function calls:
 12333 ;;		_DimmerLightsPointSelect
 12334 ;;		_setBuz
 12335 ;;		_setDimmerLights
 12336 ;;		_setDimmerLights_Adj
 12337 ;; This function is called by:
 12338 ;;		_DimmerLights_Main
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           
 12343                           ;psect for function _setDimmerLights_Main
 12344  08B2                     _setDimmerLights_Main:	
 12345                           
 12346                           ;incstack = 0
 12347                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12348                           ;setDimmerLights_Main@lights stored from wreg
 12349  08B2  0020               	movlb	0	; select bank0
 12350  08B3  00E6               	movwf	setDimmerLights_Main@lights
 12351                           
 12352                           ;Dimmer_B1.c: 435: char clear = 1;
 12353  08B4  01E5               	clrf	setDimmerLights_Main@clear
 12354  08B5  0AE5               	incf	setDimmerLights_Main@clear,f
 12355                           
 12356                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 12357  08B6  0866               	movf	setDimmerLights_Main@lights,w
 12358  08B7  319E  261F  3188   	fcall	_DimmerLightsPointSelect
 12359                           
 12360                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 12361  08BA  0020               	movlb	0	; select bank0
 12362  08BB  086A               	movf	_DimmerLights,w
 12363  08BC  3E08               	addlw	8
 12364  08BD  0086               	movwf	6
 12365  08BE  3001               	movlw	1	; select bank2/3
 12366  08BF  0087               	movwf	7
 12367  08C0  1D01               	btfss	1,2
 12368  08C1  28DF               	goto	l8773
 12369                           
 12370                           ;Dimmer_B1.c: 457: if (clear == 1) {
 12371  08C2  0865               	movf	setDimmerLights_Main@clear,w
 12372  08C3  3A01               	xorlw	1
 12373  08C4  1D03               	skipz
 12374  08C5  0008               	return
 12375                           
 12376                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 12377  08C6  086A               	movf	_DimmerLights,w
 12378  08C7  3E08               	addlw	8
 12379  08C8  0086               	movwf	6
 12380  08C9  3001               	movlw	1	; select bank2/3
 12381  08CA  0087               	movwf	7
 12382  08CB  1101               	bcf	1,2
 12383                           
 12384                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 12385  08CC  086A               	movf	_DimmerLights,w
 12386  08CD  3E08               	addlw	8
 12387  08CE  0086               	movwf	6
 12388  08CF  3001               	movlw	1	; select bank2/3
 12389  08D0  0087               	movwf	7
 12390  08D1  1C81               	btfss	1,1
 12391  08D2  28D9               	goto	l8771
 12392                           
 12393                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 12394  08D3  01A4               	clrf	setDimmerLights@status
 12395  08D4  0AA4               	incf	setDimmerLights@status,f
 12396  08D5  0866               	movf	setDimmerLights_Main@lights,w
 12397  08D6  318D  25E8         	fcall	_setDimmerLights
 12398                           
 12399                           ;Dimmer_B1.c: 461: } else {
 12400  08D8  0008               	return
 12401  08D9                     l8771:	
 12402                           
 12403                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 12404  08D9  0020               	movlb	0	; select bank0
 12405  08DA  01A4               	clrf	setDimmerLights@status
 12406  08DB  0866               	movf	setDimmerLights_Main@lights,w
 12407  08DC  318D  25E8         	fcall	_setDimmerLights
 12408                           
 12409                           ;Dimmer_B1.c: 463: }
 12410                           ;Dimmer_B1.c: 467: }
 12411                           ;Dimmer_B1.c: 468: } else {
 12412  08DE  0008               	return
 12413  08DF                     l8773:	
 12414                           
 12415                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 12416  08DF  0020               	movlb	0	; select bank0
 12417  08E0  086A               	movf	_DimmerLights,w
 12418  08E1  3E08               	addlw	8
 12419  08E2  0086               	movwf	6
 12420  08E3  3001               	movlw	1	; select bank2/3
 12421  08E4  0087               	movwf	7
 12422  08E5  1E01               	btfss	1,4
 12423  08E6  0008               	return
 12424                           
 12425                           ;Dimmer_B1.c: 470: if (clear == 1) {
 12426  08E7  0865               	movf	setDimmerLights_Main@clear,w
 12427  08E8  3A01               	xorlw	1
 12428  08E9  1D03               	skipz
 12429  08EA  0008               	return
 12430                           
 12431                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 12432  08EB  086A               	movf	_DimmerLights,w
 12433  08EC  3E08               	addlw	8
 12434  08ED  0086               	movwf	6
 12435  08EE  3001               	movlw	1	; select bank2/3
 12436  08EF  0087               	movwf	7
 12437  08F0  1201               	bcf	1,4
 12438                           
 12439                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 12440  08F1  086A               	movf	_DimmerLights,w
 12441  08F2  3E08               	addlw	8
 12442  08F3  0086               	movwf	6
 12443  08F4  3001               	movlw	1	; select bank2/3
 12444  08F5  0087               	movwf	7
 12445  08F6  1D81               	btfss	1,3
 12446  08F7  2907               	goto	l8783
 12447                           
 12448                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 12449  08F8  01E2               	clrf	setDimmerLights_Adj@status
 12450  08F9  0AE2               	incf	setDimmerLights_Adj@status,f
 12451  08FA  0866               	movf	setDimmerLights_Main@lights,w
 12452  08FB  3194  24A4  3188   	fcall	_setDimmerLights_Adj
 12453                           
 12454                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 12455  08FE  3064               	movlw	100
 12456  08FF  0020               	movlb	0	; select bank0
 12457  0900  00A9               	movwf	setBuz@time
 12458  0901  3000               	movlw	0
 12459  0902  00AA               	movwf	setBuz@time+1
 12460  0903  3001               	movlw	1
 12461  0904  3188  2059         	fcall	_setBuz
 12462                           
 12463                           ;Dimmer_B1.c: 475: } else {
 12464  0906  0008               	return
 12465  0907                     l8783:	
 12466                           
 12467                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 12468  0907  0020               	movlb	0	; select bank0
 12469  0908  01E2               	clrf	setDimmerLights_Adj@status
 12470  0909  0866               	movf	setDimmerLights_Main@lights,w
 12471  090A  3194  24A4         	fcall	_setDimmerLights_Adj
 12472  090C  0008               	return
 12473  090D                     __end_of_setDimmerLights_Main:	
 12474                           
 12475                           	psect	text79
 12476  14A4                     __ptext79:	
 12477 ;; *************** function _setDimmerLights_Adj *****************
 12478 ;; Defined at:
 12479 ;;		line 655 in file "../src/Dimmer_B1.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;  lights          1    wreg     unsigned char 
 12482 ;;  status          1   66[BANK0 ] unsigned char 
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;  lights          1   68[BANK0 ] unsigned char 
 12485 ;; Return value:  Size  Location     Type
 12486 ;;		None               void
 12487 ;; Registers used:
 12488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12494 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;Total ram usage:        3 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; Hardware stack levels required when called:    9
 12501 ;; This function calls:
 12502 ;;		_DimmerLightsPointSelect
 12503 ;;		_setRF_DimmerLights
 12504 ;;		_setTxData
 12505 ;; This function is called by:
 12506 ;;		_setDimmerLights_Main
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function _setDimmerLights_Adj
 12512  14A4                     _setDimmerLights_Adj:	
 12513                           
 12514                           ;incstack = 0
 12515                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12516                           ;setDimmerLights_Adj@lights stored from wreg
 12517  14A4  0020               	movlb	0	; select bank0
 12518  14A5  00E4               	movwf	setDimmerLights_Adj@lights
 12519                           
 12520                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 12521  14A6  0864               	movf	setDimmerLights_Adj@lights,w
 12522  14A7  319E  261F  3194   	fcall	_DimmerLightsPointSelect
 12523                           
 12524                           ;Dimmer_B1.c: 657: if (status == 1) {
 12525  14AA  0020               	movlb	0	; select bank0
 12526  14AB  0862               	movf	setDimmerLights_Adj@status,w
 12527  14AC  3A01               	xorlw	1
 12528  14AD  1D03               	skipz
 12529  14AE  2CBA               	goto	l8421
 12530                           
 12531                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 12532  14AF  086A               	movf	_DimmerLights,w
 12533  14B0  0086               	movwf	6
 12534  14B1  3001               	movlw	1	; select bank2/3
 12535  14B2  0087               	movwf	7
 12536  14B3  1581               	bsf	1,3
 12537                           
 12538                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 12539  14B4  086A               	movf	_DimmerLights,w
 12540  14B5  0086               	movwf	6
 12541  14B6  3001               	movlw	1	; select bank2/3
 12542  14B7  0087               	movwf	7
 12543  14B8  1481               	bsf	1,1
 12544                           
 12545                           ;Dimmer_B1.c: 660: } else {
 12546  14B9  0008               	return
 12547  14BA                     l8421:	
 12548                           
 12549                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 12550  14BA  086A               	movf	_DimmerLights,w
 12551  14BB  0086               	movwf	6
 12552  14BC  3001               	movlw	1	; select bank2/3
 12553  14BD  0087               	movwf	7
 12554  14BE  1D81               	btfss	1,3
 12555  14BF  0008               	return
 12556                           
 12557                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 12558  14C0  086A               	movf	_DimmerLights,w
 12559  14C1  0086               	movwf	6
 12560  14C2  3001               	movlw	1	; select bank2/3
 12561  14C3  0087               	movwf	7
 12562  14C4  1081               	bcf	1,1
 12563                           
 12564                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 12565  14C5  086A               	movf	_DimmerLights,w
 12566  14C6  0086               	movwf	6
 12567  14C7  3001               	movlw	1	; select bank2/3
 12568  14C8  0087               	movwf	7
 12569  14C9  1181               	bcf	1,3
 12570                           
 12571                           ;Dimmer_B1.c: 665: ;;
 12572                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12573  14CA  086A               	movf	_DimmerLights,w
 12574  14CB  3E04               	addlw	4
 12575  14CC  0086               	movwf	6
 12576  14CD  3001               	movlw	1	; select bank2/3
 12577  14CE  0087               	movwf	7
 12578  14CF  0801               	movf	1,w
 12579  14D0  00E3               	movwf	??_setDimmerLights_Adj
 12580  14D1  086A               	movf	_DimmerLights,w
 12581  14D2  3E05               	addlw	5
 12582  14D3  0086               	movwf	6
 12583  14D4  3001               	movlw	1	; select bank2/3
 12584  14D5  0087               	movwf	7
 12585  14D6  0863               	movf	??_setDimmerLights_Adj,w
 12586  14D7  0081               	movwf	1
 12587                           
 12588                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 12589  14D8  01DD               	clrf	setRF_DimmerLights@on
 12590  14D9  0ADD               	incf	setRF_DimmerLights@on,f
 12591  14DA  0864               	movf	setDimmerLights_Adj@lights,w
 12592  14DB  318C  2426  3194   	fcall	_setRF_DimmerLights
 12593                           
 12594                           ;Dimmer_B1.c: 675: setTxData();
 12595  14DE  3185  25C8         	fcall	_setTxData
 12596  14E0  0008               	return
 12597  14E1                     __end_of_setDimmerLights_Adj:	
 12598                           
 12599                           	psect	text80
 12600  0DE8                     __ptext80:	
 12601 ;; *************** function _setDimmerLights *****************
 12602 ;; Defined at:
 12603 ;;		line 602 in file "../src/Dimmer_B1.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  lights          1    wreg     unsigned char 
 12606 ;;  status          1    4[BANK0 ] unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  lights          1    6[BANK0 ] unsigned char 
 12609 ;; Return value:  Size  Location     Type
 12610 ;;		None               void
 12611 ;; Registers used:
 12612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12613 ;; Tracked objects:
 12614 ;;		On entry : 0/0
 12615 ;;		On exit  : 0/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12618 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;Total ram usage:        3 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    7
 12625 ;; This function calls:
 12626 ;;		_DimmerLightsPointSelect
 12627 ;;		_setLED
 12628 ;;		_setMemory_GO
 12629 ;; This function is called by:
 12630 ;;		_setDimmerLights_Main
 12631 ;;		_setControl_Lights_Table
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           
 12636                           ;psect for function _setDimmerLights
 12637  0DE8                     _setDimmerLights:	
 12638                           
 12639                           ;incstack = 0
 12640                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12641                           ;setDimmerLights@lights stored from wreg
 12642  0DE8  0020               	movlb	0	; select bank0
 12643  0DE9  00A6               	movwf	setDimmerLights@lights
 12644                           
 12645                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 12646  0DEA  0826               	movf	setDimmerLights@lights,w
 12647  0DEB  319E  261F  318D   	fcall	_DimmerLightsPointSelect
 12648                           
 12649                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 12650  0DEE  0020               	movlb	0	; select bank0
 12651  0DEF  0826               	movf	setDimmerLights@lights,w
 12652  0DF0  00A5               	movwf	??_setDimmerLights
 12653  0DF1  0A76               	incf	_Dimmer,w
 12654  0DF2  0086               	movwf	6
 12655  0DF3  3001               	movlw	1	; select bank2/3
 12656  0DF4  0087               	movwf	7
 12657  0DF5  0825               	movf	??_setDimmerLights,w
 12658  0DF6  0081               	movwf	1
 12659                           
 12660                           ;Dimmer_B1.c: 605: if (status == 1) {
 12661  0DF7  0824               	movf	setDimmerLights@status,w
 12662  0DF8  3A01               	xorlw	1
 12663  0DF9  1D03               	skipz
 12664  0DFA  2E3C               	goto	l8067
 12665                           
 12666                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 12667  0DFB  086A               	movf	_DimmerLights,w
 12668  0DFC  0086               	movwf	6
 12669  0DFD  3001               	movlw	1	; select bank2/3
 12670  0DFE  0087               	movwf	7
 12671  0DFF  1681               	bsf	1,5
 12672                           
 12673                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 12674  0E00  01A2               	clrf	setLED@command
 12675  0E01  0826               	movf	setDimmerLights@lights,w
 12676  0E02  3189  2168  318D   	fcall	_setLED
 12677                           
 12678                           ;Dimmer_B1.c: 608: RC7=!0;
 12679  0E05  0020               	movlb	0	; select bank0
 12680  0E06  178E               	bsf	14,7	;volatile
 12681                           
 12682                           ;Dimmer_B1.c: 609: ;;
 12683                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 12684  0E07  086A               	movf	_DimmerLights,w
 12685  0E08  0086               	movwf	6
 12686  0E09  3001               	movlw	1	; select bank2/3
 12687  0E0A  0087               	movwf	7
 12688  0E0B  1481               	bsf	1,1
 12689                           
 12690                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 12691  0E0C  3007               	movlw	7
 12692  0E0D  00A5               	movwf	??_setDimmerLights
 12693  0E0E  086A               	movf	_DimmerLights,w
 12694  0E0F  3E02               	addlw	2
 12695  0E10  0086               	movwf	6
 12696  0E11  3001               	movlw	1	; select bank2/3
 12697  0E12  0087               	movwf	7
 12698  0E13  0825               	movf	??_setDimmerLights,w
 12699  0E14  0081               	movwf	1
 12700                           
 12701                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 12702  0E15  086A               	movf	_DimmerLights,w
 12703  0E16  0086               	movwf	6
 12704  0E17  3001               	movlw	1	; select bank2/3
 12705  0E18  0087               	movwf	7
 12706  0E19  1B01               	btfsc	1,6
 12707  0E1A  0008               	return
 12708                           
 12709                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 12710  0E1B  086A               	movf	_DimmerLights,w
 12711  0E1C  0086               	movwf	6
 12712  0E1D  3001               	movlw	1	; select bank2/3
 12713  0E1E  0087               	movwf	7
 12714  0E1F  1701               	bsf	1,6
 12715                           
 12716                           ;Dimmer_B1.c: 616: ;;
 12717                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 12718  0E20  3000               	movlw	0
 12719  0E21  3190  206A         	fcall	_setMemory_GO
 12720                           
 12721                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12722  0E23  0020               	movlb	0	; select bank0
 12723  0E24  086A               	movf	_DimmerLights,w
 12724  0E25  3E05               	addlw	5
 12725  0E26  0086               	movwf	6
 12726  0E27  3001               	movlw	1	; select bank2/3
 12727  0E28  0087               	movwf	7
 12728  0E29  0801               	movf	1,w
 12729  0E2A  00A5               	movwf	??_setDimmerLights
 12730  0E2B  086A               	movf	_DimmerLights,w
 12731  0E2C  3E04               	addlw	4
 12732  0E2D  0086               	movwf	6
 12733  0E2E  3001               	movlw	1	; select bank2/3
 12734  0E2F  0087               	movwf	7
 12735  0E30  0825               	movf	??_setDimmerLights,w
 12736  0E31  0081               	movwf	1
 12737                           
 12738                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12739  0E32  3020               	movlw	32
 12740  0E33  00A5               	movwf	??_setDimmerLights
 12741  0E34  086A               	movf	_DimmerLights,w
 12742  0E35  3E04               	addlw	4
 12743  0E36  0086               	movwf	6
 12744  0E37  3001               	movlw	1	; select bank2/3
 12745  0E38  0087               	movwf	7
 12746  0E39  0825               	movf	??_setDimmerLights,w
 12747  0E3A  0081               	movwf	1
 12748                           
 12749                           ;Dimmer_B1.c: 626: }
 12750                           ;Dimmer_B1.c: 627: } else {
 12751  0E3B  0008               	return
 12752  0E3C                     l8067:	
 12753                           
 12754                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 12755  0E3C  086A               	movf	_DimmerLights,w
 12756  0E3D  0086               	movwf	6
 12757  0E3E  3001               	movlw	1	; select bank2/3
 12758  0E3F  0087               	movwf	7
 12759  0E40  1281               	bcf	1,5
 12760                           
 12761                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12762  0E41  086A               	movf	_DimmerLights,w
 12763  0E42  3E06               	addlw	6
 12764  0E43  0086               	movwf	6
 12765  0E44  3001               	movlw	1	; select bank2/3
 12766  0E45  0087               	movwf	7
 12767  0E46  0801               	movf	1,w
 12768  0E47  00A5               	movwf	??_setDimmerLights
 12769  0E48  086A               	movf	_DimmerLights,w
 12770  0E49  3E04               	addlw	4
 12771  0E4A  0086               	movwf	6
 12772  0E4B  3001               	movlw	1	; select bank2/3
 12773  0E4C  0087               	movwf	7
 12774  0E4D  0825               	movf	??_setDimmerLights,w
 12775  0E4E  0081               	movwf	1
 12776                           
 12777                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 12778  0E4F  086A               	movf	_DimmerLights,w
 12779  0E50  0086               	movwf	6
 12780  0E51  3001               	movlw	1	; select bank2/3
 12781  0E52  0087               	movwf	7
 12782  0E53  1481               	bsf	1,1
 12783                           
 12784                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 12785  0E54  086A               	movf	_DimmerLights,w
 12786  0E55  0086               	movwf	6
 12787  0E56  3001               	movlw	1	; select bank2/3
 12788  0E57  0087               	movwf	7
 12789  0E58  1181               	bcf	1,3
 12790                           
 12791                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 12792  0E59  086A               	movf	_DimmerLights,w
 12793  0E5A  0086               	movwf	6
 12794  0E5B  3001               	movlw	1	; select bank2/3
 12795  0E5C  0087               	movwf	7
 12796  0E5D  1201               	bcf	1,4
 12797                           
 12798                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12799  0E5E  3007               	movlw	7
 12800  0E5F  00A5               	movwf	??_setDimmerLights
 12801  0E60  086A               	movf	_DimmerLights,w
 12802  0E61  3E02               	addlw	2
 12803  0E62  0086               	movwf	6
 12804  0E63  3001               	movlw	1	; select bank2/3
 12805  0E64  0087               	movwf	7
 12806  0E65  0825               	movf	??_setDimmerLights,w
 12807  0E66  0081               	movwf	1
 12808  0E67  0008               	return
 12809  0E68                     __end_of_setDimmerLights:	
 12810                           
 12811                           	psect	text81
 12812  0968                     __ptext81:	
 12813 ;; *************** function _setLED *****************
 12814 ;; Defined at:
 12815 ;;		line 70 in file "../src/LED_B1.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;  led             1    wreg     unsigned char 
 12818 ;;  command         1    2[BANK0 ] unsigned char 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  led             1    3[BANK0 ] unsigned char 
 12821 ;; Return value:  Size  Location     Type
 12822 ;;		None               void
 12823 ;; Registers used:
 12824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12830 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;Total ram usage:        2 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    6
 12837 ;; This function calls:
 12838 ;;		_LedPointSelect
 12839 ;; This function is called by:
 12840 ;;		_setDimmerLights_ERROR
 12841 ;;		_setDimmerLights
 12842 ;;		_setLED_Initialization
 12843 ;;		_setOverTemp_Exceptions
 12844 ;;		_setPowerFault_Exceptions
 12845 ;;		_setSw_Initialization
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849                           
 12850                           ;psect for function _setLED
 12851  0968                     _setLED:	
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12855                           ;setLED@led stored from wreg
 12856  0968  0020               	movlb	0	; select bank0
 12857  0969  00A3               	movwf	setLED@led
 12858                           
 12859                           ;LED_B1.c: 71: LedPointSelect(led);
 12860  096A  0823               	movf	setLED@led,w
 12861  096B  3187  27E2  3189   	fcall	_LedPointSelect
 12862                           
 12863                           ;LED_B1.c: 72: if (command == 0) {
 12864  096E  0020               	movlb	0	; select bank0
 12865  096F  08A2               	movf	setLED@command,f
 12866  0970  1D03               	skipz
 12867  0971  2984               	goto	l7943
 12868                           
 12869                           ;LED_B1.c: 74: if (led == 1) {
 12870  0972  0823               	movf	setLED@led,w
 12871  0973  3A01               	xorlw	1
 12872  0974  1D03               	skipz
 12873  0975  2978               	goto	l7935
 12874                           
 12875                           ;LED_B1.c: 78: RA3 = 1;
 12876  0976  158C               	bsf	12,3	;volatile
 12877                           
 12878                           ;LED_B1.c: 80: }
 12879  0977  0008               	return
 12880  0978                     l7935:	
 12881                           
 12882                           ;LED_B1.c: 83: else if (led == 2) {
 12883  0978  0823               	movf	setLED@led,w
 12884  0979  3A02               	xorlw	2
 12885  097A  1D03               	skipz
 12886  097B  297E               	goto	l7939
 12887                           
 12888                           ;LED_B1.c: 87: RC7 = 1;
 12889  097C  178E               	bsf	14,7	;volatile
 12890                           
 12891                           ;LED_B1.c: 89: }
 12892  097D  0008               	return
 12893  097E                     l7939:	
 12894                           
 12895                           ;LED_B1.c: 101: else if (led == 99) {
 12896  097E  0823               	movf	setLED@led,w
 12897  097F  3A63               	xorlw	99
 12898  0980  1D03               	skipz
 12899  0981  0008               	return
 12900                           
 12901                           ;LED_B1.c: 105: RB5 = 1;
 12902  0982  168D               	bsf	13,5	;volatile
 12903                           
 12904                           ;LED_B1.c: 107: }
 12905                           ;LED_B1.c: 109: } else if (command == 1) {
 12906  0983  0008               	return
 12907  0984                     l7943:	
 12908  0984  0822               	movf	setLED@command,w
 12909  0985  3A01               	xorlw	1
 12910  0986  1D03               	skipz
 12911  0987  299A               	goto	l7957
 12912                           
 12913                           ;LED_B1.c: 111: if (led == 1) {
 12914  0988  0823               	movf	setLED@led,w
 12915  0989  3A01               	xorlw	1
 12916  098A  1D03               	skipz
 12917  098B  298E               	goto	l7949
 12918                           
 12919                           ;LED_B1.c: 115: RA3 = 0;
 12920  098C  118C               	bcf	12,3	;volatile
 12921                           
 12922                           ;LED_B1.c: 117: }
 12923  098D  0008               	return
 12924  098E                     l7949:	
 12925                           
 12926                           ;LED_B1.c: 120: else if (led == 2) {
 12927  098E  0823               	movf	setLED@led,w
 12928  098F  3A02               	xorlw	2
 12929  0990  1D03               	skipz
 12930  0991  2994               	goto	l7953
 12931                           
 12932                           ;LED_B1.c: 124: RC7 = 0;
 12933  0992  138E               	bcf	14,7	;volatile
 12934                           
 12935                           ;LED_B1.c: 126: }
 12936  0993  0008               	return
 12937  0994                     l7953:	
 12938                           
 12939                           ;LED_B1.c: 138: else if (led == 99) {
 12940  0994  0823               	movf	setLED@led,w
 12941  0995  3A63               	xorlw	99
 12942  0996  1D03               	skipz
 12943  0997  0008               	return
 12944                           
 12945                           ;LED_B1.c: 142: RB5 = 0;
 12946  0998  128D               	bcf	13,5	;volatile
 12947                           
 12948                           ;LED_B1.c: 144: }
 12949                           ;LED_B1.c: 146: } else if (command == 10) {
 12950  0999  0008               	return
 12951  099A                     l7957:	
 12952  099A  0822               	movf	setLED@command,w
 12953  099B  3A0A               	xorlw	10
 12954  099C  1D03               	skipz
 12955  099D  29BC               	goto	l7973
 12956                           
 12957                           ;LED_B1.c: 147: LED->GO = 0;
 12958  099E  086B               	movf	_LED,w
 12959  099F  0086               	movwf	6
 12960  09A0  3001               	movlw	1	; select bank2/3
 12961  09A1  0087               	movwf	7
 12962  09A2  1081               	bcf	1,1
 12963                           
 12964                           ;LED_B1.c: 148: LED->Time = 0;
 12965  09A3  0A6B               	incf	_LED,w
 12966  09A4  0086               	movwf	6
 12967  09A5  3001               	movlw	1	; select bank2/3
 12968  09A6  0087               	movwf	7
 12969  09A7  3000               	movlw	0
 12970  09A8  3FC0               	movwi [0]fsr1
 12971  09A9  3FC1               	movwi [1]fsr1
 12972                           
 12973                           ;LED_B1.c: 150: if (led == 1) {
 12974  09AA  0823               	movf	setLED@led,w
 12975  09AB  3A01               	xorlw	1
 12976  09AC  1D03               	skipz
 12977  09AD  29B0               	goto	l7965
 12978                           
 12979                           ;LED_B1.c: 154: RA3 = 1;
 12980  09AE  158C               	bsf	12,3	;volatile
 12981                           
 12982                           ;LED_B1.c: 156: }
 12983  09AF  0008               	return
 12984  09B0                     l7965:	
 12985                           
 12986                           ;LED_B1.c: 159: else if (led == 2) {
 12987  09B0  0823               	movf	setLED@led,w
 12988  09B1  3A02               	xorlw	2
 12989  09B2  1D03               	skipz
 12990  09B3  29B6               	goto	l7969
 12991                           
 12992                           ;LED_B1.c: 163: RC7 = 1;
 12993  09B4  178E               	bsf	14,7	;volatile
 12994                           
 12995                           ;LED_B1.c: 165: }
 12996  09B5  0008               	return
 12997  09B6                     l7969:	
 12998                           
 12999                           ;LED_B1.c: 177: else if (led == 99) {
 13000  09B6  0823               	movf	setLED@led,w
 13001  09B7  3A63               	xorlw	99
 13002  09B8  1D03               	skipz
 13003  09B9  0008               	return
 13004                           
 13005                           ;LED_B1.c: 181: RB5 = 1;
 13006  09BA  168D               	bsf	13,5	;volatile
 13007                           
 13008                           ;LED_B1.c: 183: }
 13009                           ;LED_B1.c: 185: } else if (command == 11) {
 13010  09BB  0008               	return
 13011  09BC                     l7973:	
 13012  09BC  0822               	movf	setLED@command,w
 13013  09BD  3A0B               	xorlw	11
 13014  09BE  1D03               	skipz
 13015  09BF  0008               	return
 13016                           
 13017                           ;LED_B1.c: 186: LED->GO = 1;
 13018  09C0  086B               	movf	_LED,w
 13019  09C1  0086               	movwf	6
 13020  09C2  3001               	movlw	1	; select bank2/3
 13021  09C3  0087               	movwf	7
 13022  09C4  1481               	bsf	1,1
 13023  09C5  0008               	return
 13024  09C6                     __end_of_setLED:	
 13025                           
 13026                           	psect	text82
 13027  07E2                     __ptext82:	
 13028 ;; *************** function _LedPointSelect *****************
 13029 ;; Defined at:
 13030 ;;		line 7 in file "../src/LED_B1.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;  led             1    wreg     unsigned char 
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  led             1    1[BANK0 ] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;		None               void
 13037 ;; Registers used:
 13038 ;;		wreg
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;Total ram usage:        2 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    5
 13051 ;; This function calls:
 13052 ;;		Nothing
 13053 ;; This function is called by:
 13054 ;;		_setLED_Initialization
 13055 ;;		_setLED
 13056 ;;		_setLED_Main
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           
 13061                           ;psect for function _LedPointSelect
 13062  07E2                     _LedPointSelect:	
 13063                           
 13064                           ;incstack = 0
 13065                           ; Regs used in _LedPointSelect: [wreg]
 13066                           ;LedPointSelect@led stored from wreg
 13067  07E2  0020               	movlb	0	; select bank0
 13068  07E3  00A1               	movwf	LedPointSelect@led
 13069                           
 13070                           ;LED_B1.c: 9: if (led == 1) {
 13071  07E4  0821               	movf	LedPointSelect@led,w
 13072  07E5  3A01               	xorlw	1
 13073  07E6  1D03               	skipz
 13074  07E7  2FED               	goto	l7729
 13075                           
 13076                           ;LED_B1.c: 10: LED = &VarLED1;
 13077  07E8  3059               	movlw	_VarLED1& (0+255)
 13078  07E9  00A0               	movwf	??_LedPointSelect
 13079  07EA  0820               	movf	??_LedPointSelect,w
 13080  07EB  00EB               	movwf	_LED
 13081                           
 13082                           ;LED_B1.c: 11: }
 13083  07EC  0008               	return
 13084  07ED                     l7729:	
 13085                           
 13086                           ;LED_B1.c: 14: else if (led == 2) {
 13087  07ED  0821               	movf	LedPointSelect@led,w
 13088  07EE  3A02               	xorlw	2
 13089  07EF  1D03               	skipz
 13090  07F0  2FF6               	goto	l7733
 13091                           
 13092                           ;LED_B1.c: 15: LED = &VarLED2;
 13093  07F1  305D               	movlw	_VarLED2& (0+255)
 13094  07F2  00A0               	movwf	??_LedPointSelect
 13095  07F3  0820               	movf	??_LedPointSelect,w
 13096  07F4  00EB               	movwf	_LED
 13097                           
 13098                           ;LED_B1.c: 16: }
 13099  07F5  0008               	return
 13100  07F6                     l7733:	
 13101                           
 13102                           ;LED_B1.c: 24: else if (led == 99) {
 13103  07F6  0821               	movf	LedPointSelect@led,w
 13104  07F7  3A63               	xorlw	99
 13105  07F8  1D03               	skipz
 13106  07F9  0008               	return
 13107                           
 13108                           ;LED_B1.c: 25: LED = &VarErrLED;
 13109  07FA  3055               	movlw	_VarErrLED& (0+255)
 13110  07FB  00A0               	movwf	??_LedPointSelect
 13111  07FC  0820               	movf	??_LedPointSelect,w
 13112  07FD  00EB               	movwf	_LED
 13113  07FE  0008               	return
 13114  07FF                     __end_of_LedPointSelect:	
 13115                           
 13116                           	psect	text83
 13117  1FEB                     __ptext83:	
 13118 ;; *************** function _DimmerLights_Close *****************
 13119 ;; Defined at:
 13120 ;;		line 405 in file "../src/Dimmer_B1.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;		None
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;		None
 13125 ;; Return value:  Size  Location     Type
 13126 ;;		None               void
 13127 ;; Registers used:
 13128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;Total ram usage:        0 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    6
 13141 ;; This function calls:
 13142 ;;		_getDimmerLights_StatusFlag
 13143 ;;		_setMemory_GO
 13144 ;; This function is called by:
 13145 ;;		_DimmerLights_Main
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           
 13150                           ;psect for function _DimmerLights_Close
 13151  1FEB                     _DimmerLights_Close:	
 13152                           
 13153                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 13154                           
 13155                           ;incstack = 0
 13156                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13157  1FEB  0876               	movf	_Dimmer,w
 13158  1FEC  0086               	movwf	6
 13159  1FED  3001               	movlw	1	; select bank2/3
 13160  1FEE  0087               	movwf	7
 13161  1FEF  1C01               	btfss	1,0
 13162  1FF0  0008               	return
 13163                           
 13164                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 13165  1FF1  0876               	movf	_Dimmer,w
 13166  1FF2  0086               	movwf	6
 13167  1FF3  3001               	movlw	1	; select bank2/3
 13168  1FF4  0087               	movwf	7
 13169  1FF5  1001               	bcf	1,0
 13170                           
 13171                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 13172  1FF6  319D  25FF  319F   	fcall	_getDimmerLights_StatusFlag
 13173  1FF9  3800               	iorlw	0
 13174  1FFA  1D03               	skipz
 13175  1FFB  0008               	return
 13176                           
 13177                           ;Dimmer_B1.c: 409: ;;
 13178                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 13179  1FFC  3001               	movlw	1
 13180  1FFD  3190  206A         	fcall	_setMemory_GO
 13181  1FFF  0008               	return
 13182  2000                     __end_of_DimmerLights_Close:	
 13183                           
 13184                           	psect	text84
 13185  106A                     __ptext84:	
 13186 ;; *************** function _setMemory_GO *****************
 13187 ;; Defined at:
 13188 ;;		line 892 in file "../src/MCU_B1.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;  command         1    wreg     unsigned char 
 13191 ;; Auto vars:     Size  Location     Type
 13192 ;;  command         1    2[BANK0 ] unsigned char 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;		None               void
 13195 ;; Registers used:
 13196 ;;		wreg, status,2, status,0
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;Total ram usage:        3 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    5
 13209 ;; This function calls:
 13210 ;;		Nothing
 13211 ;; This function is called by:
 13212 ;;		_DimmerLights_Close
 13213 ;;		_setDimmerLights
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function _setMemory_GO
 13219  106A                     _setMemory_GO:	
 13220                           
 13221                           ;incstack = 0
 13222                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 13223                           ;setMemory_GO@command stored from wreg
 13224  106A  0020               	movlb	0	; select bank0
 13225  106B  00A2               	movwf	setMemory_GO@command
 13226                           
 13227                           ;MCU_B1.c: 893: Memory.GO = command;
 13228  106C  0822               	movf	setMemory_GO@command,w
 13229  106D  0023               	movlb	3	; select bank3
 13230  106E  10C4               	bcf	(_Memory^(0+384)+36),1
 13231  106F  1D03               	skipz
 13232  1070  14C4               	bsf	(_Memory^(0+384)+36),1
 13233                           
 13234                           ;MCU_B1.c: 894: if (command == 0) {
 13235  1071  0020               	movlb	0	; select bank0
 13236  1072  08A2               	movf	setMemory_GO@command,f
 13237  1073  1D03               	skipz
 13238  1074  0008               	return
 13239                           
 13240                           ;MCU_B1.c: 895: Memory.Time = command;
 13241  1075  0822               	movf	setMemory_GO@command,w
 13242  1076  00A0               	movwf	??_setMemory_GO
 13243  1077  01A1               	clrf	??_setMemory_GO+1
 13244  1078  0820               	movf	??_setMemory_GO,w
 13245  1079  0023               	movlb	3	; select bank3
 13246  107A  00C2               	movwf	(_Memory^(0+384)+34)
 13247  107B  0020               	movlb	0	; select bank0
 13248  107C  0821               	movf	??_setMemory_GO+1,w
 13249  107D  0023               	movlb	3	; select bank3
 13250  107E  00C3               	movwf	((_Memory+1)^(0+384)+34)
 13251  107F  0008               	return
 13252  1080                     __end_of_setMemory_GO:	
 13253                           
 13254                           	psect	text85
 13255  1DFF                     __ptext85:	
 13256 ;; *************** function _getDimmerLights_StatusFlag *****************
 13257 ;; Defined at:
 13258 ;;		line 484 in file "../src/Dimmer_B1.c"
 13259 ;; Parameters:    Size  Location     Type
 13260 ;;		None
 13261 ;; Auto vars:     Size  Location     Type
 13262 ;;  Status          1    0[BANK0 ] unsigned char 
 13263 ;; Return value:  Size  Location     Type
 13264 ;;                  1    wreg      unsigned char 
 13265 ;; Registers used:
 13266 ;;		wreg, status,2
 13267 ;; Tracked objects:
 13268 ;;		On entry : 0/0
 13269 ;;		On exit  : 0/0
 13270 ;;		Unchanged: 0/0
 13271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13276 ;;Total ram usage:        1 bytes
 13277 ;; Hardware stack levels used:    1
 13278 ;; Hardware stack levels required when called:    5
 13279 ;; This function calls:
 13280 ;;		Nothing
 13281 ;; This function is called by:
 13282 ;;		_DimmerLights_Close
 13283 ;;		_DimmerLights_Exceptions
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           
 13288                           ;psect for function _getDimmerLights_StatusFlag
 13289  1DFF                     _getDimmerLights_StatusFlag:	
 13290                           
 13291                           ;Dimmer_B1.c: 485: char Status = 0;
 13292                           
 13293                           ;incstack = 0
 13294                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13295  1DFF  0020               	movlb	0	; select bank0
 13296  1E00  01A0               	clrf	getDimmerLights_StatusFlag@Status
 13297                           
 13298                           ;Dimmer_B1.c: 496: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 13299  1E01  3000               	movlw	0
 13300  1E02  0022               	movlb	2	; select bank2
 13301  1E03  1B3D               	btfsc	_DimmerLights1^(0+256),6
 13302  1E04  3001               	movlw	1
 13303  1E05  0020               	movlb	0	; select bank0
 13304  1E06  00A0               	movwf	getDimmerLights_StatusFlag@Status
 13305                           
 13306                           ;Dimmer_B1.c: 499: return Status;
 13307  1E07  0820               	movf	getDimmerLights_StatusFlag@Status,w
 13308  1E08  0008               	return
 13309  1E09                     __end_of_getDimmerLights_StatusFlag:	
 13310                           
 13311                           	psect	text86
 13312  1E93                     __ptext86:	
 13313 ;; *************** function _DimmerLights_Initialization *****************
 13314 ;; Defined at:
 13315 ;;		line 343 in file "../src/Dimmer_B1.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;		None
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;		None
 13320 ;; Return value:  Size  Location     Type
 13321 ;;		None               void
 13322 ;; Registers used:
 13323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;Total ram usage:        1 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    7
 13336 ;; This function calls:
 13337 ;;		_Dimmer_Initialization
 13338 ;;		_setDimmerLights_Initialization
 13339 ;; This function is called by:
 13340 ;;		_main
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           
 13345                           ;psect for function _DimmerLights_Initialization
 13346  1E93                     _DimmerLights_Initialization:	
 13347                           
 13348                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 13349                           
 13350                           ;incstack = 0
 13351                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13352  1E93  303D               	movlw	_DimmerLights1& (0+255)
 13353  1E94  0020               	movlb	0	; select bank0
 13354  1E95  00A4               	movwf	??_DimmerLights_Initialization
 13355  1E96  0824               	movf	??_DimmerLights_Initialization,w
 13356  1E97  0021               	movlb	1	; select bank1
 13357  1E98  00D7               	movwf	_DimmerLights11^(0+128)
 13358                           
 13359                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 13360  1E99  3001               	movlw	1
 13361  1E9A  3192  22D8  319E   	fcall	_setDimmerLights_Initialization
 13362                           
 13363                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 13364  1E9D  319D  2591         	fcall	_Dimmer_Initialization
 13365  1E9F  0008               	return
 13366  1EA0                     __end_of_DimmerLights_Initialization:	
 13367                           
 13368                           	psect	text87
 13369  12D8                     __ptext87:	
 13370 ;; *************** function _setDimmerLights_Initialization *****************
 13371 ;; Defined at:
 13372 ;;		line 366 in file "../src/Dimmer_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  lights          1    wreg     unsigned char 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  lights          1    3[BANK0 ] unsigned char 
 13377 ;; Return value:  Size  Location     Type
 13378 ;;		None               void
 13379 ;; Registers used:
 13380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13381 ;; Tracked objects:
 13382 ;;		On entry : 0/0
 13383 ;;		On exit  : 0/0
 13384 ;;		Unchanged: 0/0
 13385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;Total ram usage:        2 bytes
 13391 ;; Hardware stack levels used:    1
 13392 ;; Hardware stack levels required when called:    6
 13393 ;; This function calls:
 13394 ;;		_DimmerLightsPointSelect
 13395 ;; This function is called by:
 13396 ;;		_DimmerLights_Initialization
 13397 ;; This function uses a non-reentrant model
 13398 ;;
 13399                           
 13400                           
 13401                           ;psect for function _setDimmerLights_Initialization
 13402  12D8                     _setDimmerLights_Initialization:	
 13403                           
 13404                           ;incstack = 0
 13405                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13406                           ;setDimmerLights_Initialization@lights stored from wreg
 13407  12D8  0020               	movlb	0	; select bank0
 13408  12D9  00A3               	movwf	setDimmerLights_Initialization@lights
 13409                           
 13410                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13411  12DA  0823               	movf	setDimmerLights_Initialization@lights,w
 13412  12DB  319E  261F         	fcall	_DimmerLightsPointSelect
 13413                           
 13414                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 13415  12DD  0020               	movlb	0	; select bank0
 13416  12DE  086A               	movf	_DimmerLights,w
 13417  12DF  3E09               	addlw	9
 13418  12E0  0086               	movwf	6
 13419  12E1  3001               	movlw	1	; select bank2/3
 13420  12E2  0087               	movwf	7
 13421  12E3  1501               	bsf	1,2
 13422                           
 13423                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13424  12E4  3020               	movlw	32
 13425  12E5  00A2               	movwf	??_setDimmerLights_Initialization
 13426  12E6  086A               	movf	_DimmerLights,w
 13427  12E7  3E05               	addlw	5
 13428  12E8  0086               	movwf	6
 13429  12E9  3001               	movlw	1	; select bank2/3
 13430  12EA  0087               	movwf	7
 13431  12EB  0822               	movf	??_setDimmerLights_Initialization,w
 13432  12EC  0081               	movwf	1
 13433                           
 13434                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13435  12ED  303C               	movlw	60
 13436  12EE  00A2               	movwf	??_setDimmerLights_Initialization
 13437  12EF  086A               	movf	_DimmerLights,w
 13438  12F0  3E06               	addlw	6
 13439  12F1  0086               	movwf	6
 13440  12F2  3001               	movlw	1	; select bank2/3
 13441  12F3  0087               	movwf	7
 13442  12F4  0822               	movf	??_setDimmerLights_Initialization,w
 13443  12F5  0081               	movwf	1
 13444                           
 13445                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13446  12F6  086A               	movf	_DimmerLights,w
 13447  12F7  3E06               	addlw	6
 13448  12F8  0086               	movwf	6
 13449  12F9  3001               	movlw	1	; select bank2/3
 13450  12FA  0087               	movwf	7
 13451  12FB  0801               	movf	1,w
 13452  12FC  00A2               	movwf	??_setDimmerLights_Initialization
 13453  12FD  086A               	movf	_DimmerLights,w
 13454  12FE  3E04               	addlw	4
 13455  12FF  0086               	movwf	6
 13456  1300  3001               	movlw	1	; select bank2/3
 13457  1301  0087               	movwf	7
 13458  1302  0822               	movf	??_setDimmerLights_Initialization,w
 13459  1303  0081               	movwf	1
 13460  1304  0008               	return
 13461  1305                     __end_of_setDimmerLights_Initialization:	
 13462                           
 13463                           	psect	text88
 13464  1D91                     __ptext88:	
 13465 ;; *************** function _Dimmer_Initialization *****************
 13466 ;; Defined at:
 13467 ;;		line 795 in file "../src/Dimmer_B1.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;		None
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;		None
 13472 ;; Return value:  Size  Location     Type
 13473 ;;		None               void
 13474 ;; Registers used:
 13475 ;;		wreg
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;Total ram usage:        1 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:    5
 13488 ;; This function calls:
 13489 ;;		Nothing
 13490 ;; This function is called by:
 13491 ;;		_DimmerLights_Initialization
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           
 13496                           ;psect for function _Dimmer_Initialization
 13497  1D91                     _Dimmer_Initialization:	
 13498                           
 13499                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _Dimmer_Initialization: [wreg]
 13503  1D91  3061               	movlw	_Dimmer1& (0+255)
 13504  1D92  0020               	movlb	0	; select bank0
 13505  1D93  00A0               	movwf	??_Dimmer_Initialization
 13506  1D94  0820               	movf	??_Dimmer_Initialization,w
 13507  1D95  00F6               	movwf	_Dimmer
 13508  1D96  0008               	return
 13509  1D97                     __end_of_Dimmer_Initialization:	
 13510                           
 13511                           	psect	text89
 13512  1D80                     __ptext89:	
 13513 ;; *************** function _DelayOff_Main *****************
 13514 ;; Defined at:
 13515 ;;		line 41 in file "../src/DelayOff_B1.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;		None               void
 13522 ;; Registers used:
 13523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:   10
 13536 ;; This function calls:
 13537 ;;		_DlyOff_Main
 13538 ;; This function is called by:
 13539 ;;		_main
 13540 ;; This function uses a non-reentrant model
 13541 ;;
 13542                           
 13543                           
 13544                           ;psect for function _DelayOff_Main
 13545  1D80                     _DelayOff_Main:	
 13546                           
 13547                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13548                           
 13549                           ;incstack = 0
 13550                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13551  1D80  3001               	movlw	1
 13552  1D81  318B  23BB         	fcall	_DlyOff_Main
 13553  1D83  0008               	return
 13554  1D84                     __end_of_DelayOff_Main:	
 13555                           
 13556                           	psect	text90
 13557  0BBB                     __ptext90:	
 13558 ;; *************** function _DlyOff_Main *****************
 13559 ;; Defined at:
 13560 ;;		line 62 in file "../src/DelayOff_B1.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  sw              1    wreg     unsigned char 
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;  sw              1   68[BANK0 ] unsigned char 
 13565 ;; Return value:  Size  Location     Type
 13566 ;;		None               void
 13567 ;; Registers used:
 13568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;Total ram usage:        3 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    9
 13581 ;; This function calls:
 13582 ;;		_DelayOffPointSelect
 13583 ;;		_setBuz
 13584 ;;		_setDimmerLights_Switch
 13585 ;;		_setDimmerLights_Trigger
 13586 ;;		_setRFSW_Status
 13587 ;;		_setRF_DimmerLights
 13588 ;;		_setSw_Status
 13589 ;;		_setTxData
 13590 ;; This function is called by:
 13591 ;;		_DelayOff_Main
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           
 13596                           ;psect for function _DlyOff_Main
 13597  0BBB                     _DlyOff_Main:	
 13598                           
 13599                           ;incstack = 0
 13600                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13601                           ;DlyOff_Main@sw stored from wreg
 13602  0BBB  0020               	movlb	0	; select bank0
 13603  0BBC  00E4               	movwf	DlyOff_Main@sw
 13604                           
 13605                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13606  0BBD  0864               	movf	DlyOff_Main@sw,w
 13607  0BBE  319E  2609  318B   	fcall	_DelayOffPointSelect
 13608                           
 13609                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13610  0BC1  0020               	movlb	0	; select bank0
 13611  0BC2  0869               	movf	_DelayOff,w
 13612  0BC3  0086               	movwf	6
 13613  0BC4  0187               	clrf	7
 13614  0BC5  1C81               	btfss	1,1
 13615  0BC6  0008               	return
 13616                           
 13617                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13618  0BC7  0869               	movf	_DelayOff,w
 13619  0BC8  0086               	movwf	6
 13620  0BC9  0187               	clrf	7
 13621  0BCA  3001               	movlw	1
 13622  0BCB  0781               	addwf	1,f
 13623  0BCC  3141               	addfsr 1,1
 13624  0BCD  1803               	skipnc
 13625  0BCE  0A81               	incf	1,f
 13626                           
 13627                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13628  0BCF  0869               	movf	_DelayOff,w
 13629  0BD0  0086               	movwf	6
 13630  0BD1  0187               	clrf	7
 13631  0BD2  3F40               	moviw [0]fsr1
 13632  0BD3  00E2               	movwf	??_DlyOff_Main
 13633  0BD4  3F41               	moviw [1]fsr1
 13634  0BD5  00E3               	movwf	??_DlyOff_Main+1
 13635  0BD6  3015               	movlw	21
 13636  0BD7  0263               	subwf	??_DlyOff_Main+1,w
 13637  0BD8  30E0               	movlw	224
 13638  0BD9  1903               	skipnz
 13639  0BDA  0262               	subwf	??_DlyOff_Main,w
 13640  0BDB  1C03               	skipc
 13641  0BDC  0008               	return
 13642                           
 13643                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13644  0BDD  0869               	movf	_DelayOff,w
 13645  0BDE  0086               	movwf	6
 13646  0BDF  0187               	clrf	7
 13647  0BE0  3000               	movlw	0
 13648  0BE1  3FC0               	movwi [0]fsr1
 13649  0BE2  3FC1               	movwi [1]fsr1
 13650                           
 13651                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13652  0BE3  3001               	movlw	1
 13653  0BE4  00E2               	movwf	??_DlyOff_Main
 13654  0BE5  0869               	movf	_DelayOff,w
 13655  0BE6  0086               	movwf	6
 13656  0BE7  0187               	clrf	7
 13657  0BE8  0862               	movf	??_DlyOff_Main,w
 13658  0BE9  0781               	addwf	1,f
 13659                           
 13660                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13661  0BEA  0869               	movf	_DelayOff,w
 13662  0BEB  0086               	movwf	6
 13663  0BEC  0187               	clrf	7
 13664  0BED  0869               	movf	_DelayOff,w
 13665  0BEE  0084               	movwf	4
 13666  0BEF  0185               	clrf	5
 13667  0BF0  0800               	movf	0,w
 13668  0BF1  0201               	subwf	1,w
 13669  0BF2  1C03               	skipc
 13670  0BF3  0008               	return
 13671                           
 13672                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13673  0BF4  0869               	movf	_DelayOff,w
 13674  0BF5  0086               	movwf	6
 13675  0BF6  0187               	clrf	7
 13676  0BF7  0181               	clrf	1
 13677                           
 13678                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13679  0BF8  0869               	movf	_DelayOff,w
 13680  0BF9  0086               	movwf	6
 13681  0BFA  0187               	clrf	7
 13682  0BFB  1081               	bcf	1,1
 13683                           
 13684                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13685  0BFC  01A2               	clrf	setSw_Status@command
 13686  0BFD  0864               	movf	DlyOff_Main@sw,w
 13687  0BFE  319E  26C9  318B   	fcall	_setSw_Status
 13688                           
 13689                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13690  0C01  0020               	movlb	0	; select bank0
 13691  0C02  01A2               	clrf	setRFSW_Status@command
 13692  0C03  0864               	movf	DlyOff_Main@sw,w
 13693  0C04  319E  26AD  318B   	fcall	_setRFSW_Status
 13694                           
 13695                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13696  0C07  0020               	movlb	0	; select bank0
 13697  0C08  01DD               	clrf	setRF_DimmerLights@on
 13698  0C09  0864               	movf	DlyOff_Main@sw,w
 13699  0C0A  318C  2426  318B   	fcall	_setRF_DimmerLights
 13700                           
 13701                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13702  0C0D  0020               	movlb	0	; select bank0
 13703  0C0E  01A2               	clrf	setDimmerLights_Trigger@command
 13704  0C0F  0AA2               	incf	setDimmerLights_Trigger@command,f
 13705  0C10  0864               	movf	DlyOff_Main@sw,w
 13706  0C11  319F  2715  318B   	fcall	_setDimmerLights_Trigger
 13707                           
 13708                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13709  0C14  0020               	movlb	0	; select bank0
 13710  0C15  01A2               	clrf	setDimmerLights_Switch@command
 13711  0C16  0864               	movf	DlyOff_Main@sw,w
 13712  0C17  319F  2705  318B   	fcall	_setDimmerLights_Switch
 13713                           
 13714                           ;DelayOff_B1.c: 78: setTxData();
 13715  0C1A  3185  25C8  318B   	fcall	_setTxData
 13716                           
 13717                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13718  0C1D  3064               	movlw	100
 13719  0C1E  0020               	movlb	0	; select bank0
 13720  0C1F  00A9               	movwf	setBuz@time
 13721  0C20  3000               	movlw	0
 13722  0C21  00AA               	movwf	setBuz@time+1
 13723  0C22  3001               	movlw	1
 13724  0C23  3188  2059         	fcall	_setBuz
 13725  0C25  0008               	return
 13726  0C26                     __end_of_DlyOff_Main:	
 13727                           
 13728                           	psect	text91
 13729  05C8                     __ptext91:	
 13730 ;; *************** function _setTxData *****************
 13731 ;; Defined at:
 13732 ;;		line 184 in file "../src/RF_Control_B1.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;		None
 13735 ;; Auto vars:     Size  Location     Type
 13736 ;;  i               1    0        unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;		None               void
 13739 ;; Registers used:
 13740 ;;		wreg, fsr1l, fsr1h
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;Total ram usage:        1 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; Hardware stack levels required when called:    5
 13753 ;; This function calls:
 13754 ;;		Nothing
 13755 ;; This function is called by:
 13756 ;;		_DlyOff_Main
 13757 ;;		_setDimmerLights_Adj
 13758 ;;		_setControl_Lights_Table
 13759 ;;		_setRFSW_Control
 13760 ;;		_setRFSW_AdjControl
 13761 ;;		_Sw_DimmerOnFunc
 13762 ;;		_Sw_DimmerOffFunc
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766                           
 13767                           ;psect for function _setTxData
 13768  05C8                     _setTxData:	
 13769                           
 13770                           ;RF_Control_B1.c: 185: char i;
 13771                           ;RF_Control_B1.c: 186: if (RF1.Enable == 1) {
 13772                           
 13773                           ;incstack = 0
 13774                           ; Regs used in _setTxData: [wregfsr1]
 13775  05C8  0021               	movlb	1	; select bank1
 13776  05C9  1C3E               	btfss	_RF1^(0+128),0
 13777  05CA  0008               	return
 13778                           
 13779                           ;RF_Control_B1.c: 188: RF1.TransceiveGO = 1;
 13780  05CB  153E               	bsf	_RF1^(0+128),2
 13781                           
 13782                           ;RF_Control_B1.c: 189: RF1.RunTime = 20;
 13783  05CC  3014               	movlw	20
 13784  05CD  00C5               	movwf	(_RF1^(0+128)+7)
 13785  05CE  3000               	movlw	0
 13786  05CF  00C6               	movwf	(_RF1^(0+128)+8)
 13787                           
 13788                           ;RF_Control_B1.c: 199: RF_Data[0] = 0x63;
 13789  05D0  3063               	movlw	99
 13790  05D1  0020               	movlb	0	; select bank0
 13791  05D2  00A0               	movwf	??_setTxData
 13792  05D3  0820               	movf	??_setTxData,w
 13793  05D4  0022               	movlb	2	; select bank2
 13794  05D5  00A0               	movwf	_RF_Data^(0+256)
 13795                           
 13796                           ;RF_Control_B1.c: 200: RF_Data[1] = 0x02;
 13797  05D6  3002               	movlw	2
 13798  05D7  0020               	movlb	0	; select bank0
 13799  05D8  00A0               	movwf	??_setTxData
 13800  05D9  0820               	movf	??_setTxData,w
 13801  05DA  0022               	movlb	2	; select bank2
 13802  05DB  00A1               	movwf	(_RF_Data^(0+256)+1)
 13803                           
 13804                           ;RF_Control_B1.c: 201: RF_Data[2] = product->Data[2];
 13805  05DC  0020               	movlb	0	; select bank0
 13806  05DD  086D               	movf	_product,w
 13807  05DE  0086               	movwf	6
 13808  05DF  3001               	movlw	1	; select bank2/3
 13809  05E0  0087               	movwf	7
 13810  05E1  3001               	movlw	1	; select bank2/3
 13811  05E2  3F42               	moviw [2]fsr1
 13812  05E3  0022               	movlb	2	; select bank2
 13813  05E4  00A2               	movwf	(_RF_Data^(0+256)+2)
 13814                           
 13815                           ;RF_Control_B1.c: 202: RF_Data[3] = product->Data[3];
 13816  05E5  0020               	movlb	0	; select bank0
 13817  05E6  086D               	movf	_product,w
 13818  05E7  0086               	movwf	6
 13819  05E8  3001               	movlw	1	; select bank2/3
 13820  05E9  0087               	movwf	7
 13821  05EA  3001               	movlw	1	; select bank2/3
 13822  05EB  3F43               	moviw [3]fsr1
 13823  05EC  0022               	movlb	2	; select bank2
 13824  05ED  00A3               	movwf	(_RF_Data^(0+256)+3)
 13825                           
 13826                           ;RF_Control_B1.c: 203: RF_Data[4] = product->Data[4];
 13827  05EE  0020               	movlb	0	; select bank0
 13828  05EF  086D               	movf	_product,w
 13829  05F0  0086               	movwf	6
 13830  05F1  3001               	movlw	1	; select bank2/3
 13831  05F2  0087               	movwf	7
 13832  05F3  3001               	movlw	1	; select bank2/3
 13833  05F4  3F44               	moviw [4]fsr1
 13834  05F5  0022               	movlb	2	; select bank2
 13835  05F6  00A4               	movwf	(_RF_Data^(0+256)+4)
 13836                           
 13837                           ;RF_Control_B1.c: 204: RF_Data[5] = product->Data[5];
 13838  05F7  0020               	movlb	0	; select bank0
 13839  05F8  086D               	movf	_product,w
 13840  05F9  0086               	movwf	6
 13841  05FA  3001               	movlw	1	; select bank2/3
 13842  05FB  0087               	movwf	7
 13843  05FC  3001               	movlw	1	; select bank2/3
 13844  05FD  3F45               	moviw [5]fsr1
 13845  05FE  0022               	movlb	2	; select bank2
 13846  05FF  00A5               	movwf	(_RF_Data^(0+256)+5)
 13847                           
 13848                           ;RF_Control_B1.c: 205: RF_Data[6] = product->Data[6];
 13849  0600  0020               	movlb	0	; select bank0
 13850  0601  086D               	movf	_product,w
 13851  0602  0086               	movwf	6
 13852  0603  3001               	movlw	1	; select bank2/3
 13853  0604  0087               	movwf	7
 13854  0605  3001               	movlw	1	; select bank2/3
 13855  0606  3F46               	moviw [6]fsr1
 13856  0607  0022               	movlb	2	; select bank2
 13857  0608  00A6               	movwf	(_RF_Data^(0+256)+6)
 13858                           
 13859                           ;RF_Control_B1.c: 206: RF_Data[7] = product->Data[7];
 13860  0609  0020               	movlb	0	; select bank0
 13861  060A  086D               	movf	_product,w
 13862  060B  0086               	movwf	6
 13863  060C  3001               	movlw	1	; select bank2/3
 13864  060D  0087               	movwf	7
 13865  060E  3001               	movlw	1	; select bank2/3
 13866  060F  3F47               	moviw [7]fsr1
 13867  0610  0022               	movlb	2	; select bank2
 13868  0611  00A7               	movwf	(_RF_Data^(0+256)+7)
 13869                           
 13870                           ;RF_Control_B1.c: 207: RF_Data[8] = product->Data[8];
 13871  0612  0020               	movlb	0	; select bank0
 13872  0613  086D               	movf	_product,w
 13873  0614  0086               	movwf	6
 13874  0615  3001               	movlw	1	; select bank2/3
 13875  0616  0087               	movwf	7
 13876  0617  3001               	movlw	1	; select bank2/3
 13877  0618  3F48               	moviw [8]fsr1
 13878  0619  0022               	movlb	2	; select bank2
 13879  061A  00A8               	movwf	(_RF_Data^(0+256)+8)
 13880                           
 13881                           ;RF_Control_B1.c: 208: RF_Data[9] = product->Data[9];
 13882  061B  0020               	movlb	0	; select bank0
 13883  061C  086D               	movf	_product,w
 13884  061D  0086               	movwf	6
 13885  061E  3001               	movlw	1	; select bank2/3
 13886  061F  0087               	movwf	7
 13887  0620  3001               	movlw	1	; select bank2/3
 13888  0621  3F49               	moviw [9]fsr1
 13889  0622  0022               	movlb	2	; select bank2
 13890  0623  00A9               	movwf	(_RF_Data^(0+256)+9)
 13891                           
 13892                           ;RF_Control_B1.c: 209: RF_Data[10] = product->Data[10];
 13893  0624  0020               	movlb	0	; select bank0
 13894  0625  086D               	movf	_product,w
 13895  0626  0086               	movwf	6
 13896  0627  3001               	movlw	1	; select bank2/3
 13897  0628  0087               	movwf	7
 13898  0629  3001               	movlw	1	; select bank2/3
 13899  062A  3F4A               	moviw [10]fsr1
 13900  062B  0022               	movlb	2	; select bank2
 13901  062C  00AA               	movwf	(_RF_Data^(0+256)+10)
 13902                           
 13903                           ;RF_Control_B1.c: 210: RF_Data[11] = product->Data[11];
 13904  062D  0020               	movlb	0	; select bank0
 13905  062E  086D               	movf	_product,w
 13906  062F  0086               	movwf	6
 13907  0630  3001               	movlw	1	; select bank2/3
 13908  0631  0087               	movwf	7
 13909  0632  3001               	movlw	1	; select bank2/3
 13910  0633  3F4B               	moviw [11]fsr1
 13911  0634  0022               	movlb	2	; select bank2
 13912  0635  00AB               	movwf	(_RF_Data^(0+256)+11)
 13913                           
 13914                           ;RF_Control_B1.c: 211: RF_Data[12] = product->Data[12];
 13915  0636  0020               	movlb	0	; select bank0
 13916  0637  086D               	movf	_product,w
 13917  0638  0086               	movwf	6
 13918  0639  3001               	movlw	1	; select bank2/3
 13919  063A  0087               	movwf	7
 13920  063B  3001               	movlw	1	; select bank2/3
 13921  063C  3F4C               	moviw [12]fsr1
 13922  063D  0022               	movlb	2	; select bank2
 13923  063E  00AC               	movwf	(_RF_Data^(0+256)+12)
 13924                           
 13925                           ;RF_Control_B1.c: 212: RF_Data[13] = product->Data[13];
 13926  063F  0020               	movlb	0	; select bank0
 13927  0640  086D               	movf	_product,w
 13928  0641  0086               	movwf	6
 13929  0642  3001               	movlw	1	; select bank2/3
 13930  0643  0087               	movwf	7
 13931  0644  3001               	movlw	1	; select bank2/3
 13932  0645  3F4D               	moviw [13]fsr1
 13933  0646  0022               	movlb	2	; select bank2
 13934  0647  00AD               	movwf	(_RF_Data^(0+256)+13)
 13935                           
 13936                           ;RF_Control_B1.c: 213: RF_Data[14] = product->Data[14];
 13937  0648  0020               	movlb	0	; select bank0
 13938  0649  086D               	movf	_product,w
 13939  064A  0086               	movwf	6
 13940  064B  3001               	movlw	1	; select bank2/3
 13941  064C  0087               	movwf	7
 13942  064D  3001               	movlw	1	; select bank2/3
 13943  064E  3F4E               	moviw [14]fsr1
 13944  064F  0022               	movlb	2	; select bank2
 13945  0650  00AE               	movwf	(_RF_Data^(0+256)+14)
 13946                           
 13947                           ;RF_Control_B1.c: 214: RF_Data[15] = product->Data[15];
 13948  0651  0020               	movlb	0	; select bank0
 13949  0652  086D               	movf	_product,w
 13950  0653  0086               	movwf	6
 13951  0654  3001               	movlw	1	; select bank2/3
 13952  0655  0087               	movwf	7
 13953  0656  3001               	movlw	1	; select bank2/3
 13954  0657  3F4F               	moviw [15]fsr1
 13955  0658  0022               	movlb	2	; select bank2
 13956  0659  00AF               	movwf	(_RF_Data^(0+256)+15)
 13957                           
 13958                           ;RF_Control_B1.c: 215: RF_Data[16] = product->Data[16];
 13959  065A  0020               	movlb	0	; select bank0
 13960  065B  086D               	movf	_product,w
 13961  065C  0086               	movwf	6
 13962  065D  3001               	movlw	1	; select bank2/3
 13963  065E  0087               	movwf	7
 13964  065F  3001               	movlw	1	; select bank2/3
 13965  0660  3F50               	moviw [16]fsr1
 13966  0661  0022               	movlb	2	; select bank2
 13967  0662  00B0               	movwf	(_RF_Data^(0+256)+16)
 13968                           
 13969                           ;RF_Control_B1.c: 216: RF_Data[17] = product->Data[17];
 13970  0663  0020               	movlb	0	; select bank0
 13971  0664  086D               	movf	_product,w
 13972  0665  0086               	movwf	6
 13973  0666  3001               	movlw	1	; select bank2/3
 13974  0667  0087               	movwf	7
 13975  0668  3001               	movlw	1	; select bank2/3
 13976  0669  3F51               	moviw [17]fsr1
 13977  066A  0022               	movlb	2	; select bank2
 13978  066B  00B1               	movwf	(_RF_Data^(0+256)+17)
 13979                           
 13980                           ;RF_Control_B1.c: 217: RF_Data[18] = product->Data[18];
 13981  066C  0020               	movlb	0	; select bank0
 13982  066D  086D               	movf	_product,w
 13983  066E  0086               	movwf	6
 13984  066F  3001               	movlw	1	; select bank2/3
 13985  0670  0087               	movwf	7
 13986  0671  3001               	movlw	1	; select bank2/3
 13987  0672  3F52               	moviw [18]fsr1
 13988  0673  0022               	movlb	2	; select bank2
 13989  0674  00B2               	movwf	(_RF_Data^(0+256)+18)
 13990                           
 13991                           ;RF_Control_B1.c: 218: RF_Data[19] = product->Data[19];
 13992  0675  0020               	movlb	0	; select bank0
 13993  0676  086D               	movf	_product,w
 13994  0677  0086               	movwf	6
 13995  0678  3001               	movlw	1	; select bank2/3
 13996  0679  0087               	movwf	7
 13997  067A  3001               	movlw	1	; select bank2/3
 13998  067B  3F53               	moviw [19]fsr1
 13999  067C  0022               	movlb	2	; select bank2
 14000  067D  00B3               	movwf	(_RF_Data^(0+256)+19)
 14001                           
 14002                           ;RF_Control_B1.c: 219: RF_Data[20] = 209;
 14003  067E  30D1               	movlw	209
 14004  067F  0020               	movlb	0	; select bank0
 14005  0680  00A0               	movwf	??_setTxData
 14006  0681  0820               	movf	??_setTxData,w
 14007  0682  0022               	movlb	2	; select bank2
 14008  0683  00B4               	movwf	(_RF_Data^(0+256)+20)
 14009  0684  0008               	return
 14010  0685                     __end_of_setTxData:	
 14011                           
 14012                           	psect	text92
 14013  1EC9                     __ptext92:	
 14014 ;; *************** function _setSw_Status *****************
 14015 ;; Defined at:
 14016 ;;		line 111 in file "../src/Switch_B1.c"
 14017 ;; Parameters:    Size  Location     Type
 14018 ;;  sw              1    wreg     unsigned char 
 14019 ;;  command         1    2[BANK0 ] unsigned char 
 14020 ;; Auto vars:     Size  Location     Type
 14021 ;;  sw              1    3[BANK0 ] unsigned char 
 14022 ;; Return value:  Size  Location     Type
 14023 ;;		None               void
 14024 ;; Registers used:
 14025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14026 ;; Tracked objects:
 14027 ;;		On entry : 0/0
 14028 ;;		On exit  : 0/0
 14029 ;;		Unchanged: 0/0
 14030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14031 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;Total ram usage:        2 bytes
 14036 ;; Hardware stack levels used:    1
 14037 ;; Hardware stack levels required when called:    6
 14038 ;; This function calls:
 14039 ;;		_SwPointSelect
 14040 ;; This function is called by:
 14041 ;;		_DlyOff_Main
 14042 ;;		_setDimmerLights_ERROR
 14043 ;;		_setControl_Lights_Table
 14044 ;;		_setRFSW_Control
 14045 ;; This function uses a non-reentrant model
 14046 ;;
 14047                           
 14048                           
 14049                           ;psect for function _setSw_Status
 14050  1EC9                     _setSw_Status:	
 14051                           
 14052                           ;incstack = 0
 14053                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14054                           ;setSw_Status@sw stored from wreg
 14055  1EC9  0020               	movlb	0	; select bank0
 14056  1ECA  00A3               	movwf	setSw_Status@sw
 14057                           
 14058                           ;Switch_B1.c: 112: SwPointSelect(sw);
 14059  1ECB  0823               	movf	setSw_Status@sw,w
 14060  1ECC  319E  2635         	fcall	_SwPointSelect
 14061                           
 14062                           ;Switch_B1.c: 113: Sw->Status = command;
 14063  1ECE  0020               	movlb	0	; select bank0
 14064  1ECF  086C               	movf	_Sw,w
 14065  1ED0  0086               	movwf	6
 14066  1ED1  3001               	movlw	1	; select bank2/3
 14067  1ED2  0087               	movwf	7
 14068  1ED3  0822               	movf	setSw_Status@command,w
 14069  1ED4  1301               	bcf	1,6
 14070  1ED5  1D03               	skipz
 14071  1ED6  1701               	bsf	1,6
 14072  1ED7  0008               	return
 14073  1ED8                     __end_of_setSw_Status:	
 14074                           
 14075                           	psect	text93
 14076  1E35                     __ptext93:	
 14077 ;; *************** function _SwPointSelect *****************
 14078 ;; Defined at:
 14079 ;;		line 21 in file "../src/Switch_B1.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  sw              1    wreg     unsigned char 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  sw              1    1[BANK0 ] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;		None               void
 14086 ;; Registers used:
 14087 ;;		wreg
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;Total ram usage:        2 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    5
 14100 ;; This function calls:
 14101 ;;		Nothing
 14102 ;; This function is called by:
 14103 ;;		_setSw_Enable
 14104 ;;		_setSw_Status
 14105 ;;		_setSw_Main
 14106 ;;		_Sw_Detect
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function _SwPointSelect
 14112  1E35                     _SwPointSelect:	
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in _SwPointSelect: [wreg]
 14116                           ;SwPointSelect@sw stored from wreg
 14117  1E35  0020               	movlb	0	; select bank0
 14118  1E36  00A1               	movwf	SwPointSelect@sw
 14119                           
 14120                           ;Switch_B1.c: 24: if (sw == 1) {
 14121  1E37  0821               	movf	SwPointSelect@sw,w
 14122  1E38  3A01               	xorlw	1
 14123  1E39  1D03               	skipz
 14124  1E3A  0008               	return
 14125                           
 14126                           ;Switch_B1.c: 25: Sw = &Sw1;
 14127  1E3B  304C               	movlw	_Sw1& (0+255)
 14128  1E3C  00A0               	movwf	??_SwPointSelect
 14129  1E3D  0820               	movf	??_SwPointSelect,w
 14130  1E3E  00EC               	movwf	_Sw
 14131  1E3F  0008               	return
 14132  1E40                     __end_of_SwPointSelect:	
 14133                           
 14134                           	psect	text94
 14135  0C26                     __ptext94:	
 14136 ;; *************** function _setRF_DimmerLights *****************
 14137 ;; Defined at:
 14138 ;;		line 450 in file "../src/RF_Control_B1.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  lights          1    wreg     unsigned char 
 14141 ;;  on              1   61[BANK0 ] unsigned char 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  lights          1   65[BANK0 ] unsigned char 
 14144 ;;  status          1   64[BANK0 ] unsigned char 
 14145 ;; Return value:  Size  Location     Type
 14146 ;;		None               void
 14147 ;; Registers used:
 14148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14149 ;; Tracked objects:
 14150 ;;		On entry : 0/0
 14151 ;;		On exit  : 0/0
 14152 ;;		Unchanged: 0/0
 14153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14154 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;Total ram usage:        5 bytes
 14159 ;; Hardware stack levels used:    1
 14160 ;; Hardware stack levels required when called:    8
 14161 ;; This function calls:
 14162 ;;		_setPercentValue
 14163 ;; This function is called by:
 14164 ;;		_DlyOff_Main
 14165 ;;		_setDimmerLights_Adj
 14166 ;;		_setRFSW_Control
 14167 ;;		_Sw_DimmerOnFunc
 14168 ;;		_Sw_DimmerOffFunc
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function _setRF_DimmerLights
 14174  0C26                     _setRF_DimmerLights:	
 14175                           
 14176                           ;incstack = 0
 14177                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14178                           ;setRF_DimmerLights@lights stored from wreg
 14179  0C26  0020               	movlb	0	; select bank0
 14180  0C27  00E1               	movwf	setRF_DimmerLights@lights
 14181                           
 14182                           ;RF_Control_B1.c: 451: char status;
 14183                           ;RF_Control_B1.c: 452: status = 1;
 14184  0C28  01E0               	clrf	setRF_DimmerLights@status
 14185  0C29  0AE0               	incf	setRF_DimmerLights@status,f
 14186                           
 14187                           ;RF_Control_B1.c: 453: status <<= (lights - 1);
 14188  0C2A  0861               	movf	setRF_DimmerLights@lights,w
 14189  0C2B  3EFF               	addlw	-1
 14190  0C2C  0A89               	incf	9,f
 14191  0C2D  2C30               	goto	u7530
 14192  0C2E                     u7535:	
 14193  0C2E  1003               	clrc
 14194  0C2F  0DE0               	rlf	setRF_DimmerLights@status,f
 14195  0C30                     u7530:	
 14196  0C30  3EFF               	addlw	-1
 14197  0C31  1D03               	skipz
 14198  0C32  2C2E               	goto	u7535
 14199                           
 14200                           ;RF_Control_B1.c: 454: product->Data[11]=lights;
 14201  0C33  0861               	movf	setRF_DimmerLights@lights,w
 14202  0C34  00DE               	movwf	??_setRF_DimmerLights
 14203  0C35  086D               	movf	_product,w
 14204  0C36  3E0B               	addlw	11
 14205  0C37  0086               	movwf	6
 14206  0C38  3001               	movlw	1	; select bank2/3
 14207  0C39  0087               	movwf	7
 14208  0C3A  085E               	movf	??_setRF_DimmerLights,w
 14209  0C3B  0081               	movwf	1
 14210                           
 14211                           ;RF_Control_B1.c: 457: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 14212  0C3C  3020               	movlw	32
 14213  0C3D  3195  25EA  318C   	fcall	_setPercentValue
 14214  0C40  0020               	movlb	0	; select bank0
 14215  0C41  00DE               	movwf	??_setRF_DimmerLights
 14216  0C42  0861               	movf	setRF_DimmerLights@lights,w
 14217  0C43  3E14               	addlw	20
 14218  0C44  076D               	addwf	_product,w
 14219  0C45  00DF               	movwf	??_setRF_DimmerLights+1
 14220  0C46  085F               	movf	??_setRF_DimmerLights+1,w
 14221  0C47  0086               	movwf	6
 14222  0C48  3001               	movlw	1	; select bank2/3
 14223  0C49  0087               	movwf	7
 14224  0C4A  085E               	movf	??_setRF_DimmerLights,w
 14225  0C4B  0081               	movwf	1
 14226                           
 14227                           ;RF_Control_B1.c: 460: product->Data[9]=product->Data[20 + lights];
 14228  0C4C  0861               	movf	setRF_DimmerLights@lights,w
 14229  0C4D  3E14               	addlw	20
 14230  0C4E  076D               	addwf	_product,w
 14231  0C4F  00DE               	movwf	??_setRF_DimmerLights
 14232  0C50  085E               	movf	??_setRF_DimmerLights,w
 14233  0C51  0086               	movwf	6
 14234  0C52  3001               	movlw	1	; select bank2/3
 14235  0C53  0087               	movwf	7
 14236  0C54  0801               	movf	1,w
 14237  0C55  00DF               	movwf	??_setRF_DimmerLights+1
 14238  0C56  086D               	movf	_product,w
 14239  0C57  3E09               	addlw	9
 14240  0C58  0086               	movwf	6
 14241  0C59  3001               	movlw	1	; select bank2/3
 14242  0C5A  0087               	movwf	7
 14243  0C5B  085F               	movf	??_setRF_DimmerLights+1,w
 14244  0C5C  0081               	movwf	1
 14245                           
 14246                           ;RF_Control_B1.c: 461: product->Data[17]=product->Data[26 + lights];
 14247  0C5D  0861               	movf	setRF_DimmerLights@lights,w
 14248  0C5E  3E1A               	addlw	26
 14249  0C5F  076D               	addwf	_product,w
 14250  0C60  00DE               	movwf	??_setRF_DimmerLights
 14251  0C61  085E               	movf	??_setRF_DimmerLights,w
 14252  0C62  0086               	movwf	6
 14253  0C63  3001               	movlw	1	; select bank2/3
 14254  0C64  0087               	movwf	7
 14255  0C65  0801               	movf	1,w
 14256  0C66  00DF               	movwf	??_setRF_DimmerLights+1
 14257  0C67  086D               	movf	_product,w
 14258  0C68  3E11               	addlw	17
 14259  0C69  0086               	movwf	6
 14260  0C6A  3001               	movlw	1	; select bank2/3
 14261  0C6B  0087               	movwf	7
 14262  0C6C  085F               	movf	??_setRF_DimmerLights+1,w
 14263  0C6D  0081               	movwf	1
 14264                           
 14265                           ;RF_Control_B1.c: 462: if (on == 1) {
 14266  0C6E  085D               	movf	setRF_DimmerLights@on,w
 14267  0C6F  3A01               	xorlw	1
 14268  0C70  1D03               	skipz
 14269  0C71  2C82               	goto	l7841
 14270                           
 14271                           ;RF_Control_B1.c: 463: product->Data[15]=(product->Data[15] | status);
 14272  0C72  086D               	movf	_product,w
 14273  0C73  3E0F               	addlw	15
 14274  0C74  0086               	movwf	6
 14275  0C75  3001               	movlw	1	; select bank2/3
 14276  0C76  0087               	movwf	7
 14277  0C77  0801               	movf	1,w
 14278  0C78  0460               	iorwf	setRF_DimmerLights@status,w
 14279  0C79  00DE               	movwf	??_setRF_DimmerLights
 14280  0C7A  086D               	movf	_product,w
 14281  0C7B  3E0F               	addlw	15
 14282  0C7C  0086               	movwf	6
 14283  0C7D  3001               	movlw	1	; select bank2/3
 14284  0C7E  0087               	movwf	7
 14285  0C7F  085E               	movf	??_setRF_DimmerLights,w
 14286  0C80  0081               	movwf	1
 14287                           
 14288                           ;RF_Control_B1.c: 464: } else {
 14289  0C81  0008               	return
 14290  0C82                     l7841:	
 14291                           
 14292                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15]&(~status));
 14293  0C82  086D               	movf	_product,w
 14294  0C83  3E0F               	addlw	15
 14295  0C84  0086               	movwf	6
 14296  0C85  3001               	movlw	1	; select bank2/3
 14297  0C86  0087               	movwf	7
 14298  0C87  0960               	comf	setRF_DimmerLights@status,w
 14299  0C88  0501               	andwf	1,w
 14300  0C89  00DE               	movwf	??_setRF_DimmerLights
 14301  0C8A  086D               	movf	_product,w
 14302  0C8B  3E0F               	addlw	15
 14303  0C8C  0086               	movwf	6
 14304  0C8D  3001               	movlw	1	; select bank2/3
 14305  0C8E  0087               	movwf	7
 14306  0C8F  085E               	movf	??_setRF_DimmerLights,w
 14307  0C90  0081               	movwf	1
 14308  0C91  0008               	return
 14309  0C92                     __end_of_setRF_DimmerLights:	
 14310                           
 14311                           	psect	text95
 14312  15EA                     __ptext95:	
 14313 ;; *************** function _setPercentValue *****************
 14314 ;; Defined at:
 14315 ;;		line 777 in file "../src/Dimmer_B1.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  value           1    wreg     unsigned char 
 14318 ;; Auto vars:     Size  Location     Type
 14319 ;;  value           1   57[BANK0 ] unsigned char 
 14320 ;;  i               3   58[BANK0 ] float 
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  1    wreg      unsigned char 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0, pclath, cstack
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;Total ram usage:        4 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    7
 14337 ;; This function calls:
 14338 ;;		___awtoft
 14339 ;;		___ftdiv
 14340 ;;		___fttol
 14341 ;; This function is called by:
 14342 ;;		_Flash_Memory_Initialization
 14343 ;;		_setRF_DimmerLights
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function _setPercentValue
 14349  15EA                     _setPercentValue:	
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14353                           ;setPercentValue@value stored from wreg
 14354  15EA  0020               	movlb	0	; select bank0
 14355  15EB  00D9               	movwf	setPercentValue@value
 14356                           
 14357                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14358  15EC  3000               	movlw	0
 14359  15ED  00DA               	movwf	setPercentValue@i
 14360  15EE  30E0               	movlw	224
 14361  15EF  00DB               	movwf	setPercentValue@i+1
 14362  15F0  3041               	movlw	65
 14363  15F1  00DC               	movwf	setPercentValue@i+2
 14364                           
 14365                           ;Dimmer_B1.c: 780: i /= 100;
 14366  15F2  3000               	movlw	0
 14367  15F3  00AE               	movwf	___ftdiv@f2
 14368  15F4  30C8               	movlw	200
 14369  15F5  00AF               	movwf	___ftdiv@f2+1
 14370  15F6  3042               	movlw	66
 14371  15F7  00B0               	movwf	___ftdiv@f2+2
 14372  15F8  085A               	movf	setPercentValue@i,w
 14373  15F9  00B1               	movwf	___ftdiv@f1
 14374  15FA  085B               	movf	setPercentValue@i+1,w
 14375  15FB  00B2               	movwf	___ftdiv@f1+1
 14376  15FC  085C               	movf	setPercentValue@i+2,w
 14377  15FD  00B3               	movwf	___ftdiv@f1+2
 14378  15FE  3187  2739  3195   	fcall	___ftdiv
 14379  1601  0020               	movlb	0	; select bank0
 14380  1602  082E               	movf	?___ftdiv,w
 14381  1603  00DA               	movwf	setPercentValue@i
 14382  1604  082F               	movf	?___ftdiv+1,w
 14383  1605  00DB               	movwf	setPercentValue@i+1
 14384  1606  0830               	movf	?___ftdiv+2,w
 14385  1607  00DC               	movwf	setPercentValue@i+2
 14386                           
 14387                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14388  1608  0859               	movf	setPercentValue@value,w
 14389  1609  3EE0               	addlw	224
 14390  160A  00A8               	movwf	___awtoft@c
 14391  160B  30FF               	movlw	255
 14392  160C  1803               	skipnc
 14393  160D  3000               	movlw	0
 14394  160E  00A9               	movwf	___awtoft@c+1
 14395  160F  3191  2182  3195   	fcall	___awtoft
 14396  1612  0020               	movlb	0	; select bank0
 14397  1613  0828               	movf	?___awtoft,w
 14398  1614  00B1               	movwf	___ftdiv@f1
 14399  1615  0829               	movf	?___awtoft+1,w
 14400  1616  00B2               	movwf	___ftdiv@f1+1
 14401  1617  082A               	movf	?___awtoft+2,w
 14402  1618  00B3               	movwf	___ftdiv@f1+2
 14403  1619  085A               	movf	setPercentValue@i,w
 14404  161A  00AE               	movwf	___ftdiv@f2
 14405  161B  085B               	movf	setPercentValue@i+1,w
 14406  161C  00AF               	movwf	___ftdiv@f2+1
 14407  161D  085C               	movf	setPercentValue@i+2,w
 14408  161E  00B0               	movwf	___ftdiv@f2+2
 14409  161F  3187  2739  3195   	fcall	___ftdiv
 14410  1622  0020               	movlb	0	; select bank0
 14411  1623  082E               	movf	?___ftdiv,w
 14412  1624  00CB               	movwf	___fttol@f1
 14413  1625  082F               	movf	?___ftdiv+1,w
 14414  1626  00CC               	movwf	___fttol@f1+1
 14415  1627  0830               	movf	?___ftdiv+2,w
 14416  1628  00CD               	movwf	___fttol@f1+2
 14417  1629  318E  26EE         	fcall	___fttol
 14418  162B  0020               	movlb	0	; select bank0
 14419  162C  034B               	decf	?___fttol,w
 14420  162D  3AFF               	xorlw	255
 14421  162E  3E64               	addlw	100
 14422  162F  0008               	return
 14423  1630                     __end_of_setPercentValue:	
 14424                           
 14425                           	psect	text96
 14426  0EEE                     __ptext96:	
 14427 ;; *************** function ___fttol *****************
 14428 ;; Defined at:
 14429 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  f1              3   43[BANK0 ] float 
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;  lval            4   52[BANK0 ] unsigned long 
 14434 ;;  exp1            1   56[BANK0 ] unsigned char 
 14435 ;;  sign1           1   51[BANK0 ] unsigned char 
 14436 ;; Return value:  Size  Location     Type
 14437 ;;                  4   43[BANK0 ] long 
 14438 ;; Registers used:
 14439 ;;		wreg, status,2, status,0
 14440 ;; Tracked objects:
 14441 ;;		On entry : 0/0
 14442 ;;		On exit  : 0/0
 14443 ;;		Unchanged: 0/0
 14444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14445 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;Total ram usage:       14 bytes
 14450 ;; Hardware stack levels used:    1
 14451 ;; Hardware stack levels required when called:    5
 14452 ;; This function calls:
 14453 ;;		Nothing
 14454 ;; This function is called by:
 14455 ;;		_getPercentValue
 14456 ;;		_setPercentValue
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           
 14461                           ;psect for function ___fttol
 14462  0EEE                     ___fttol:	
 14463                           
 14464                           ;incstack = 0
 14465                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14466  0EEE  0020               	movlb	0	; select bank0
 14467  0EEF  084B               	movf	___fttol@f1,w
 14468  0EF0  00CF               	movwf	??___fttol
 14469  0EF1  084C               	movf	___fttol@f1+1,w
 14470  0EF2  00D0               	movwf	??___fttol+1
 14471  0EF3  084D               	movf	___fttol@f1+2,w
 14472  0EF4  00D1               	movwf	??___fttol+2
 14473  0EF5  1003               	clrc
 14474  0EF6  0D50               	rlf	??___fttol+1,w
 14475  0EF7  0D51               	rlf	??___fttol+2,w
 14476  0EF8  00D2               	movwf	??___fttol+3
 14477  0EF9  0852               	movf	??___fttol+3,w
 14478  0EFA  00D8               	movwf	___fttol@exp1
 14479  0EFB  08D8               	movf	___fttol@exp1,f
 14480  0EFC  1D03               	skipz
 14481  0EFD  2F07               	goto	l5539
 14482  0EFE  3000               	movlw	0
 14483  0EFF  00CE               	movwf	?___fttol+3
 14484  0F00  3000               	movlw	0
 14485  0F01  00CD               	movwf	?___fttol+2
 14486  0F02  3000               	movlw	0
 14487  0F03  00CC               	movwf	?___fttol+1
 14488  0F04  3000               	movlw	0
 14489  0F05  00CB               	movwf	?___fttol
 14490  0F06  0008               	return
 14491  0F07                     l5539:	
 14492  0F07  084B               	movf	___fttol@f1,w
 14493  0F08  00CF               	movwf	??___fttol
 14494  0F09  084C               	movf	___fttol@f1+1,w
 14495  0F0A  00D0               	movwf	??___fttol+1
 14496  0F0B  084D               	movf	___fttol@f1+2,w
 14497  0F0C  00D1               	movwf	??___fttol+2
 14498  0F0D  3017               	movlw	23
 14499  0F0E                     u4205:	
 14500  0F0E  36D1               	lsrf	??___fttol+2,f
 14501  0F0F  0CD0               	rrf	??___fttol+1,f
 14502  0F10  0CCF               	rrf	??___fttol,f
 14503  0F11  0B89               	decfsz	9,f
 14504  0F12  2F0E               	goto	u4205
 14505  0F13  084F               	movf	??___fttol,w
 14506  0F14  00D2               	movwf	??___fttol+3
 14507  0F15  0852               	movf	??___fttol+3,w
 14508  0F16  00D3               	movwf	___fttol@sign1
 14509  0F17  17CC               	bsf	___fttol@f1+1,7
 14510  0F18  30FF               	movlw	255
 14511  0F19  05CB               	andwf	___fttol@f1,f
 14512  0F1A  30FF               	movlw	255
 14513  0F1B  05CC               	andwf	___fttol@f1+1,f
 14514  0F1C  3000               	movlw	0
 14515  0F1D  05CD               	andwf	___fttol@f1+2,f
 14516  0F1E  084B               	movf	___fttol@f1,w
 14517  0F1F  00D4               	movwf	___fttol@lval
 14518  0F20  084C               	movf	___fttol@f1+1,w
 14519  0F21  00D5               	movwf	___fttol@lval+1
 14520  0F22  084D               	movf	___fttol@f1+2,w
 14521  0F23  00D6               	movwf	___fttol@lval+2
 14522  0F24  01D7               	clrf	___fttol@lval+3
 14523  0F25  308E               	movlw	142
 14524  0F26  02D8               	subwf	___fttol@exp1,f
 14525  0F27  1FD8               	btfss	___fttol@exp1,7
 14526  0F28  2F45               	goto	l5559
 14527  0F29  0858               	movf	___fttol@exp1,w
 14528  0F2A  3A80               	xorlw	128
 14529  0F2B  3E8F               	addlw	143
 14530  0F2C  1803               	skipnc
 14531  0F2D  2F37               	goto	l5557
 14532  0F2E  3000               	movlw	0
 14533  0F2F  00CE               	movwf	?___fttol+3
 14534  0F30  3000               	movlw	0
 14535  0F31  00CD               	movwf	?___fttol+2
 14536  0F32  3000               	movlw	0
 14537  0F33  00CC               	movwf	?___fttol+1
 14538  0F34  3000               	movlw	0
 14539  0F35  00CB               	movwf	?___fttol
 14540  0F36  0008               	return
 14541  0F37                     l5557:	
 14542  0F37  3001               	movlw	1
 14543  0F38                     u4235:	
 14544  0F38  36D7               	lsrf	___fttol@lval+3,f
 14545  0F39  0CD6               	rrf	___fttol@lval+2,f
 14546  0F3A  0CD5               	rrf	___fttol@lval+1,f
 14547  0F3B  0CD4               	rrf	___fttol@lval,f
 14548  0F3C  0B89               	decfsz	9,f
 14549  0F3D  2F38               	goto	u4235
 14550  0F3E  3001               	movlw	1
 14551  0F3F  00CF               	movwf	??___fttol
 14552  0F40  084F               	movf	??___fttol,w
 14553  0F41  07D8               	addwf	___fttol@exp1,f
 14554  0F42  1903               	btfsc	3,2
 14555  0F43  2F5E               	goto	l5569
 14556  0F44  2F37               	goto	l5557
 14557  0F45                     l5559:	
 14558  0F45  3018               	movlw	24
 14559  0F46  0258               	subwf	___fttol@exp1,w
 14560  0F47  1C03               	skipc
 14561  0F48  2F5B               	goto	l5567
 14562  0F49  3000               	movlw	0
 14563  0F4A  00CE               	movwf	?___fttol+3
 14564  0F4B  3000               	movlw	0
 14565  0F4C  00CD               	movwf	?___fttol+2
 14566  0F4D  3000               	movlw	0
 14567  0F4E  00CC               	movwf	?___fttol+1
 14568  0F4F  3000               	movlw	0
 14569  0F50  00CB               	movwf	?___fttol
 14570  0F51  0008               	return
 14571  0F52                     l5565:	
 14572  0F52  3001               	movlw	1
 14573  0F53                     u4265:	
 14574  0F53  35D4               	lslf	___fttol@lval,f
 14575  0F54  0DD5               	rlf	___fttol@lval+1,f
 14576  0F55  0DD6               	rlf	___fttol@lval+2,f
 14577  0F56  0DD7               	rlf	___fttol@lval+3,f
 14578  0F57  0B89               	decfsz	9,f
 14579  0F58  2F53               	goto	u4265
 14580  0F59  3001               	movlw	1
 14581  0F5A  02D8               	subwf	___fttol@exp1,f
 14582  0F5B                     l5567:	
 14583  0F5B  08D8               	movf	___fttol@exp1,f
 14584  0F5C  1D03               	skipz
 14585  0F5D  2F52               	goto	l5565
 14586  0F5E                     l5569:	
 14587  0F5E  0853               	movf	___fttol@sign1,w
 14588  0F5F  1903               	btfsc	3,2
 14589  0F60  2F6C               	goto	l5573
 14590  0F61  09D4               	comf	___fttol@lval,f
 14591  0F62  09D5               	comf	___fttol@lval+1,f
 14592  0F63  09D6               	comf	___fttol@lval+2,f
 14593  0F64  09D7               	comf	___fttol@lval+3,f
 14594  0F65  0AD4               	incf	___fttol@lval,f
 14595  0F66  1903               	skipnz
 14596  0F67  0AD5               	incf	___fttol@lval+1,f
 14597  0F68  1903               	skipnz
 14598  0F69  0AD6               	incf	___fttol@lval+2,f
 14599  0F6A  1903               	skipnz
 14600  0F6B  0AD7               	incf	___fttol@lval+3,f
 14601  0F6C                     l5573:	
 14602  0F6C  0857               	movf	___fttol@lval+3,w
 14603  0F6D  00CE               	movwf	?___fttol+3
 14604  0F6E  0856               	movf	___fttol@lval+2,w
 14605  0F6F  00CD               	movwf	?___fttol+2
 14606  0F70  0855               	movf	___fttol@lval+1,w
 14607  0F71  00CC               	movwf	?___fttol+1
 14608  0F72  0854               	movf	___fttol@lval,w
 14609  0F73  00CB               	movwf	?___fttol
 14610  0F74  0008               	return
 14611  0F75                     __end_of___fttol:	
 14612                           
 14613                           	psect	text97
 14614  0739                     __ptext97:	
 14615 ;; *************** function ___ftdiv *****************
 14616 ;; Defined at:
 14617 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14618 ;; Parameters:    Size  Location     Type
 14619 ;;  f2              3   14[BANK0 ] float 
 14620 ;;  f1              3   17[BANK0 ] float 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;  f3              3   25[BANK0 ] float 
 14623 ;;  sign            1   29[BANK0 ] unsigned char 
 14624 ;;  exp             1   28[BANK0 ] unsigned char 
 14625 ;;  cntr            1   24[BANK0 ] unsigned char 
 14626 ;; Return value:  Size  Location     Type
 14627 ;;                  3   14[BANK0 ] float 
 14628 ;; Registers used:
 14629 ;;		wreg, status,2, status,0, pclath, cstack
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14635 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;Total ram usage:       16 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; Hardware stack levels required when called:    6
 14642 ;; This function calls:
 14643 ;;		___ftpack
 14644 ;; This function is called by:
 14645 ;;		_getPercentValue
 14646 ;;		_setPercentValue
 14647 ;; This function uses a non-reentrant model
 14648 ;;
 14649                           
 14650                           
 14651                           ;psect for function ___ftdiv
 14652  0739                     ___ftdiv:	
 14653                           
 14654                           ;incstack = 0
 14655                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14656  0739  0020               	movlb	0	; select bank0
 14657  073A  0831               	movf	___ftdiv@f1,w
 14658  073B  00B4               	movwf	??___ftdiv
 14659  073C  0832               	movf	___ftdiv@f1+1,w
 14660  073D  00B5               	movwf	??___ftdiv+1
 14661  073E  0833               	movf	___ftdiv@f1+2,w
 14662  073F  00B6               	movwf	??___ftdiv+2
 14663  0740  1003               	clrc
 14664  0741  0D35               	rlf	??___ftdiv+1,w
 14665  0742  0D36               	rlf	??___ftdiv+2,w
 14666  0743  00B7               	movwf	??___ftdiv+3
 14667  0744  0837               	movf	??___ftdiv+3,w
 14668  0745  00BC               	movwf	___ftdiv@exp
 14669  0746  08BC               	movf	___ftdiv@exp,f
 14670  0747  1D03               	skipz
 14671  0748  2F50               	goto	l5447
 14672  0749  3000               	movlw	0
 14673  074A  00AE               	movwf	?___ftdiv
 14674  074B  3000               	movlw	0
 14675  074C  00AF               	movwf	?___ftdiv+1
 14676  074D  3000               	movlw	0
 14677  074E  00B0               	movwf	?___ftdiv+2
 14678  074F  0008               	return
 14679  0750                     l5447:	
 14680  0750  082E               	movf	___ftdiv@f2,w
 14681  0751  00B4               	movwf	??___ftdiv
 14682  0752  082F               	movf	___ftdiv@f2+1,w
 14683  0753  00B5               	movwf	??___ftdiv+1
 14684  0754  0830               	movf	___ftdiv@f2+2,w
 14685  0755  00B6               	movwf	??___ftdiv+2
 14686  0756  1003               	clrc
 14687  0757  0D35               	rlf	??___ftdiv+1,w
 14688  0758  0D36               	rlf	??___ftdiv+2,w
 14689  0759  00B7               	movwf	??___ftdiv+3
 14690  075A  0837               	movf	??___ftdiv+3,w
 14691  075B  00BD               	movwf	___ftdiv@sign
 14692  075C  08BD               	movf	___ftdiv@sign,f
 14693  075D  1D03               	skipz
 14694  075E  2F66               	goto	l5453
 14695  075F  3000               	movlw	0
 14696  0760  00AE               	movwf	?___ftdiv
 14697  0761  3000               	movlw	0
 14698  0762  00AF               	movwf	?___ftdiv+1
 14699  0763  3000               	movlw	0
 14700  0764  00B0               	movwf	?___ftdiv+2
 14701  0765  0008               	return
 14702  0766                     l5453:	
 14703  0766  3000               	movlw	0
 14704  0767  00B9               	movwf	___ftdiv@f3
 14705  0768  3000               	movlw	0
 14706  0769  00BA               	movwf	___ftdiv@f3+1
 14707  076A  3000               	movlw	0
 14708  076B  00BB               	movwf	___ftdiv@f3+2
 14709  076C  3089               	movlw	137
 14710  076D  073D               	addwf	___ftdiv@sign,w
 14711  076E  00B4               	movwf	??___ftdiv
 14712  076F  0834               	movf	??___ftdiv,w
 14713  0770  02BC               	subwf	___ftdiv@exp,f
 14714  0771  0831               	movf	___ftdiv@f1,w
 14715  0772  00B4               	movwf	??___ftdiv
 14716  0773  0832               	movf	___ftdiv@f1+1,w
 14717  0774  00B5               	movwf	??___ftdiv+1
 14718  0775  0833               	movf	___ftdiv@f1+2,w
 14719  0776  00B6               	movwf	??___ftdiv+2
 14720  0777  3010               	movlw	16
 14721  0778                     u4015:	
 14722  0778  36B6               	lsrf	??___ftdiv+2,f
 14723  0779  0CB5               	rrf	??___ftdiv+1,f
 14724  077A  0CB4               	rrf	??___ftdiv,f
 14725  077B  0B89               	decfsz	9,f
 14726  077C  2F78               	goto	u4015
 14727  077D  0834               	movf	??___ftdiv,w
 14728  077E  00B7               	movwf	??___ftdiv+3
 14729  077F  0837               	movf	??___ftdiv+3,w
 14730  0780  00BD               	movwf	___ftdiv@sign
 14731  0781  082E               	movf	___ftdiv@f2,w
 14732  0782  00B4               	movwf	??___ftdiv
 14733  0783  082F               	movf	___ftdiv@f2+1,w
 14734  0784  00B5               	movwf	??___ftdiv+1
 14735  0785  0830               	movf	___ftdiv@f2+2,w
 14736  0786  00B6               	movwf	??___ftdiv+2
 14737  0787  3010               	movlw	16
 14738  0788                     u4025:	
 14739  0788  36B6               	lsrf	??___ftdiv+2,f
 14740  0789  0CB5               	rrf	??___ftdiv+1,f
 14741  078A  0CB4               	rrf	??___ftdiv,f
 14742  078B  0B89               	decfsz	9,f
 14743  078C  2F88               	goto	u4025
 14744  078D  0834               	movf	??___ftdiv,w
 14745  078E  00B7               	movwf	??___ftdiv+3
 14746  078F  0837               	movf	??___ftdiv+3,w
 14747  0790  06BD               	xorwf	___ftdiv@sign,f
 14748  0791  3080               	movlw	128
 14749  0792  00B4               	movwf	??___ftdiv
 14750  0793  0834               	movf	??___ftdiv,w
 14751  0794  05BD               	andwf	___ftdiv@sign,f
 14752  0795  17B2               	bsf	___ftdiv@f1+1,7
 14753  0796  30FF               	movlw	255
 14754  0797  05B1               	andwf	___ftdiv@f1,f
 14755  0798  30FF               	movlw	255
 14756  0799  05B2               	andwf	___ftdiv@f1+1,f
 14757  079A  3000               	movlw	0
 14758  079B  05B3               	andwf	___ftdiv@f1+2,f
 14759  079C  17AF               	bsf	___ftdiv@f2+1,7
 14760  079D  30FF               	movlw	255
 14761  079E  05AE               	andwf	___ftdiv@f2,f
 14762  079F  30FF               	movlw	255
 14763  07A0  05AF               	andwf	___ftdiv@f2+1,f
 14764  07A1  3000               	movlw	0
 14765  07A2  05B0               	andwf	___ftdiv@f2+2,f
 14766  07A3  3018               	movlw	24
 14767  07A4  00B4               	movwf	??___ftdiv
 14768  07A5  0834               	movf	??___ftdiv,w
 14769  07A6  00B8               	movwf	___ftdiv@cntr
 14770  07A7                     l5467:	
 14771  07A7  3001               	movlw	1
 14772  07A8                     u4035:	
 14773  07A8  35B9               	lslf	___ftdiv@f3,f
 14774  07A9  0DBA               	rlf	___ftdiv@f3+1,f
 14775  07AA  0DBB               	rlf	___ftdiv@f3+2,f
 14776  07AB  0B89               	decfsz	9,f
 14777  07AC  2FA8               	goto	u4035
 14778  07AD  0830               	movf	___ftdiv@f2+2,w
 14779  07AE  0233               	subwf	___ftdiv@f1+2,w
 14780  07AF  1D03               	skipz
 14781  07B0  2FB7               	goto	u4045
 14782  07B1  082F               	movf	___ftdiv@f2+1,w
 14783  07B2  0232               	subwf	___ftdiv@f1+1,w
 14784  07B3  1D03               	skipz
 14785  07B4  2FB7               	goto	u4045
 14786  07B5  082E               	movf	___ftdiv@f2,w
 14787  07B6  0231               	subwf	___ftdiv@f1,w
 14788  07B7                     u4045:	
 14789  07B7  1C03               	skipc
 14790  07B8  2FC0               	goto	l5475
 14791  07B9  082E               	movf	___ftdiv@f2,w
 14792  07BA  02B1               	subwf	___ftdiv@f1,f
 14793  07BB  082F               	movf	___ftdiv@f2+1,w
 14794  07BC  3BB2               	subwfb	___ftdiv@f1+1,f
 14795  07BD  0830               	movf	___ftdiv@f2+2,w
 14796  07BE  3BB3               	subwfb	___ftdiv@f1+2,f
 14797  07BF  1439               	bsf	___ftdiv@f3,0
 14798  07C0                     l5475:	
 14799  07C0  3001               	movlw	1
 14800  07C1                     u4055:	
 14801  07C1  35B1               	lslf	___ftdiv@f1,f
 14802  07C2  0DB2               	rlf	___ftdiv@f1+1,f
 14803  07C3  0DB3               	rlf	___ftdiv@f1+2,f
 14804  07C4  0B89               	decfsz	9,f
 14805  07C5  2FC1               	goto	u4055
 14806  07C6  3001               	movlw	1
 14807  07C7  02B8               	subwf	___ftdiv@cntr,f
 14808  07C8  1D03               	btfss	3,2
 14809  07C9  2FA7               	goto	l5467
 14810  07CA  0839               	movf	___ftdiv@f3,w
 14811  07CB  00A0               	movwf	___ftpack@arg
 14812  07CC  083A               	movf	___ftdiv@f3+1,w
 14813  07CD  00A1               	movwf	___ftpack@arg+1
 14814  07CE  083B               	movf	___ftdiv@f3+2,w
 14815  07CF  00A2               	movwf	___ftpack@arg+2
 14816  07D0  083C               	movf	___ftdiv@exp,w
 14817  07D1  00B4               	movwf	??___ftdiv
 14818  07D2  0834               	movf	??___ftdiv,w
 14819  07D3  00A3               	movwf	___ftpack@exp
 14820  07D4  083D               	movf	___ftdiv@sign,w
 14821  07D5  00B5               	movwf	??___ftdiv+1
 14822  07D6  0835               	movf	??___ftdiv+1,w
 14823  07D7  00A4               	movwf	___ftpack@sign
 14824  07D8  318A  2225         	fcall	___ftpack
 14825  07DA  0020               	movlb	0	; select bank0
 14826  07DB  0820               	movf	?___ftpack,w
 14827  07DC  00AE               	movwf	?___ftdiv
 14828  07DD  0821               	movf	?___ftpack+1,w
 14829  07DE  00AF               	movwf	?___ftdiv+1
 14830  07DF  0822               	movf	?___ftpack+2,w
 14831  07E0  00B0               	movwf	?___ftdiv+2
 14832  07E1  0008               	return
 14833  07E2                     __end_of___ftdiv:	
 14834                           
 14835                           	psect	text98
 14836  1182                     __ptext98:	
 14837 ;; *************** function ___awtoft *****************
 14838 ;; Defined at:
 14839 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  c               2    8[BANK0 ] int 
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;  sign            1   13[BANK0 ] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  3    8[BANK0 ] float 
 14846 ;; Registers used:
 14847 ;;		wreg, status,2, status,0, pclath, cstack
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14853 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;Total ram usage:        6 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    6
 14860 ;; This function calls:
 14861 ;;		___ftpack
 14862 ;; This function is called by:
 14863 ;;		_getPercentValue
 14864 ;;		_setPercentValue
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           
 14869                           ;psect for function ___awtoft
 14870  1182                     ___awtoft:	
 14871                           
 14872                           ;incstack = 0
 14873                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14874  1182  0020               	movlb	0	; select bank0
 14875  1183  01AD               	clrf	___awtoft@sign
 14876  1184  1FA9               	btfss	___awtoft@c+1,7
 14877  1185  298D               	goto	l7657
 14878  1186  09A8               	comf	___awtoft@c,f
 14879  1187  09A9               	comf	___awtoft@c+1,f
 14880  1188  0AA8               	incf	___awtoft@c,f
 14881  1189  1903               	skipnz
 14882  118A  0AA9               	incf	___awtoft@c+1,f
 14883  118B  01AD               	clrf	___awtoft@sign
 14884  118C  0AAD               	incf	___awtoft@sign,f
 14885  118D                     l7657:	
 14886  118D  0828               	movf	___awtoft@c,w
 14887  118E  00A0               	movwf	___ftpack@arg
 14888  118F  0829               	movf	___awtoft@c+1,w
 14889  1190  00A1               	movwf	___ftpack@arg+1
 14890  1191  01A2               	clrf	___ftpack@arg+2
 14891  1192  308E               	movlw	142
 14892  1193  00AB               	movwf	??___awtoft
 14893  1194  082B               	movf	??___awtoft,w
 14894  1195  00A3               	movwf	___ftpack@exp
 14895  1196  082D               	movf	___awtoft@sign,w
 14896  1197  00AC               	movwf	??___awtoft+1
 14897  1198  082C               	movf	??___awtoft+1,w
 14898  1199  00A4               	movwf	___ftpack@sign
 14899  119A  318A  2225         	fcall	___ftpack
 14900  119C  0020               	movlb	0	; select bank0
 14901  119D  0820               	movf	?___ftpack,w
 14902  119E  00A8               	movwf	?___awtoft
 14903  119F  0821               	movf	?___ftpack+1,w
 14904  11A0  00A9               	movwf	?___awtoft+1
 14905  11A1  0822               	movf	?___ftpack+2,w
 14906  11A2  00AA               	movwf	?___awtoft+2
 14907  11A3  0008               	return
 14908  11A4                     __end_of___awtoft:	
 14909                           
 14910                           	psect	text99
 14911  0A25                     __ptext99:	
 14912 ;; *************** function ___ftpack *****************
 14913 ;; Defined at:
 14914 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;  arg             3    0[BANK0 ] unsigned um
 14917 ;;  exp             1    3[BANK0 ] unsigned char 
 14918 ;;  sign            1    4[BANK0 ] unsigned char 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;		None
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  3    0[BANK0 ] float 
 14923 ;; Registers used:
 14924 ;;		wreg, status,2, status,0
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14930 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;Total ram usage:        8 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:    5
 14937 ;; This function calls:
 14938 ;;		Nothing
 14939 ;; This function is called by:
 14940 ;;		___awtoft
 14941 ;;		___ftadd
 14942 ;;		___ftdiv
 14943 ;;		___ftmul
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function ___ftpack
 14949  0A25                     ___ftpack:	
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14953  0A25  0020               	movlb	0	; select bank0
 14954  0A26  0823               	movf	___ftpack@exp,w
 14955  0A27  1903               	btfsc	3,2
 14956  0A28  2A2E               	goto	l5331
 14957  0A29  0822               	movf	___ftpack@arg+2,w
 14958  0A2A  0421               	iorwf	___ftpack@arg+1,w
 14959  0A2B  0420               	iorwf	___ftpack@arg,w
 14960  0A2C  1D03               	skipz
 14961  0A2D  2A3F               	goto	l5337
 14962  0A2E                     l5331:	
 14963  0A2E  3000               	movlw	0
 14964  0A2F  00A0               	movwf	?___ftpack
 14965  0A30  3000               	movlw	0
 14966  0A31  00A1               	movwf	?___ftpack+1
 14967  0A32  3000               	movlw	0
 14968  0A33  00A2               	movwf	?___ftpack+2
 14969  0A34  0008               	return
 14970  0A35                     l5335:	
 14971  0A35  3001               	movlw	1
 14972  0A36  00A5               	movwf	??___ftpack
 14973  0A37  0825               	movf	??___ftpack,w
 14974  0A38  07A3               	addwf	___ftpack@exp,f
 14975  0A39  3001               	movlw	1
 14976  0A3A                     u3665:	
 14977  0A3A  36A2               	lsrf	___ftpack@arg+2,f
 14978  0A3B  0CA1               	rrf	___ftpack@arg+1,f
 14979  0A3C  0CA0               	rrf	___ftpack@arg,f
 14980  0A3D  0B89               	decfsz	9,f
 14981  0A3E  2A3A               	goto	u3665
 14982  0A3F                     l5337:	
 14983  0A3F  30FE               	movlw	254
 14984  0A40  0522               	andwf	___ftpack@arg+2,w
 14985  0A41  1903               	btfsc	3,2
 14986  0A42  2A58               	goto	l2781
 14987  0A43  2A35               	goto	l5335
 14988  0A44                     l5339:	
 14989  0A44  3001               	movlw	1
 14990  0A45  00A5               	movwf	??___ftpack
 14991  0A46  0825               	movf	??___ftpack,w
 14992  0A47  07A3               	addwf	___ftpack@exp,f
 14993  0A48  3001               	movlw	1
 14994  0A49  07A0               	addwf	___ftpack@arg,f
 14995  0A4A  3000               	movlw	0
 14996  0A4B  1803               	skipnc
 14997  0A4C  3001               	movlw	1
 14998  0A4D  07A1               	addwf	___ftpack@arg+1,f
 14999  0A4E  3000               	movlw	0
 15000  0A4F  1803               	skipnc
 15001  0A50  3001               	movlw	1
 15002  0A51  07A2               	addwf	___ftpack@arg+2,f
 15003  0A52  3001               	movlw	1
 15004  0A53                     u3685:	
 15005  0A53  36A2               	lsrf	___ftpack@arg+2,f
 15006  0A54  0CA1               	rrf	___ftpack@arg+1,f
 15007  0A55  0CA0               	rrf	___ftpack@arg,f
 15008  0A56  0B89               	decfsz	9,f
 15009  0A57  2A53               	goto	u3685
 15010  0A58                     l2781:	
 15011  0A58  30FF               	movlw	255
 15012  0A59  0522               	andwf	___ftpack@arg+2,w
 15013  0A5A  1903               	btfsc	3,2
 15014  0A5B  2A65               	goto	l5347
 15015  0A5C  2A44               	goto	l5339
 15016  0A5D                     l5345:	
 15017  0A5D  3001               	movlw	1
 15018  0A5E  02A3               	subwf	___ftpack@exp,f
 15019  0A5F  3001               	movlw	1
 15020  0A60                     u3705:	
 15021  0A60  35A0               	lslf	___ftpack@arg,f
 15022  0A61  0DA1               	rlf	___ftpack@arg+1,f
 15023  0A62  0DA2               	rlf	___ftpack@arg+2,f
 15024  0A63  0B89               	decfsz	9,f
 15025  0A64  2A60               	goto	u3705
 15026  0A65                     l5347:	
 15027  0A65  1FA1               	btfss	___ftpack@arg+1,7
 15028  0A66  2A5D               	goto	l5345
 15029  0A67  1823               	btfsc	___ftpack@exp,0
 15030  0A68  2A6F               	goto	l2787
 15031  0A69  30FF               	movlw	255
 15032  0A6A  05A0               	andwf	___ftpack@arg,f
 15033  0A6B  307F               	movlw	127
 15034  0A6C  05A1               	andwf	___ftpack@arg+1,f
 15035  0A6D  30FF               	movlw	255
 15036  0A6E  05A2               	andwf	___ftpack@arg+2,f
 15037  0A6F                     l2787:	
 15038  0A6F  1003               	clrc
 15039  0A70  0CA3               	rrf	___ftpack@exp,f
 15040  0A71  0823               	movf	___ftpack@exp,w
 15041  0A72  00A5               	movwf	??___ftpack
 15042  0A73  01A6               	clrf	??___ftpack+1
 15043  0A74  01A7               	clrf	??___ftpack+2
 15044  0A75  3010               	movlw	16
 15045  0A76                     u3735:	
 15046  0A76  35A5               	lslf	??___ftpack,f
 15047  0A77  0DA6               	rlf	??___ftpack+1,f
 15048  0A78  0DA7               	rlf	??___ftpack+2,f
 15049  0A79  0B89               	decfsz	9,f
 15050  0A7A  2A76               	goto	u3735
 15051  0A7B  0825               	movf	??___ftpack,w
 15052  0A7C  04A0               	iorwf	___ftpack@arg,f
 15053  0A7D  0826               	movf	??___ftpack+1,w
 15054  0A7E  04A1               	iorwf	___ftpack@arg+1,f
 15055  0A7F  0827               	movf	??___ftpack+2,w
 15056  0A80  04A2               	iorwf	___ftpack@arg+2,f
 15057  0A81  0824               	movf	___ftpack@sign,w
 15058  0A82  1903               	btfsc	3,2
 15059  0A83  0008               	return
 15060  0A84  17A2               	bsf	___ftpack@arg+2,7
 15061  0A85  0008               	return
 15062  0A86                     __end_of___ftpack:	
 15063                           
 15064                           	psect	text100
 15065  1EAD                     __ptext100:	
 15066 ;; *************** function _setRFSW_Status *****************
 15067 ;; Defined at:
 15068 ;;		line 432 in file "../src/RF_Control_B1.c"
 15069 ;; Parameters:    Size  Location     Type
 15070 ;;  sw              1    wreg     unsigned char 
 15071 ;;  command         1    2[BANK0 ] unsigned char 
 15072 ;; Auto vars:     Size  Location     Type
 15073 ;;  sw              1    3[BANK0 ] unsigned char 
 15074 ;; Return value:  Size  Location     Type
 15075 ;;		None               void
 15076 ;; Registers used:
 15077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15078 ;; Tracked objects:
 15079 ;;		On entry : 0/0
 15080 ;;		On exit  : 0/0
 15081 ;;		Unchanged: 0/0
 15082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15083 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;Total ram usage:        2 bytes
 15088 ;; Hardware stack levels used:    1
 15089 ;; Hardware stack levels required when called:    6
 15090 ;; This function calls:
 15091 ;;		_RfSWPointSelect
 15092 ;; This function is called by:
 15093 ;;		_DlyOff_Main
 15094 ;;		_setDimmerLights_ERROR
 15095 ;;		_setControl_Lights_Table
 15096 ;;		_Sw_DimmerOnFunc
 15097 ;;		_Sw_DimmerAdjFunc
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           
 15102                           ;psect for function _setRFSW_Status
 15103  1EAD                     _setRFSW_Status:	
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15107                           ;setRFSW_Status@sw stored from wreg
 15108  1EAD  0020               	movlb	0	; select bank0
 15109  1EAE  00A3               	movwf	setRFSW_Status@sw
 15110                           
 15111                           ;RF_Control_B1.c: 433: RfSWPointSelect(sw);
 15112  1EAF  0823               	movf	setRFSW_Status@sw,w
 15113  1EB0  319E  262A         	fcall	_RfSWPointSelect
 15114                           
 15115                           ;RF_Control_B1.c: 434: RFSW->Status = command;
 15116  1EB2  0879               	movf	_RFSW,w
 15117  1EB3  0086               	movwf	6
 15118  1EB4  0187               	clrf	7
 15119  1EB5  0020               	movlb	0	; select bank0
 15120  1EB6  0822               	movf	setRFSW_Status@command,w
 15121  1EB7  1001               	bcf	1,0
 15122  1EB8  1D03               	skipz
 15123  1EB9  1401               	bsf	1,0
 15124  1EBA  0008               	return
 15125  1EBB                     __end_of_setRFSW_Status:	
 15126                           
 15127                           	psect	text101
 15128  1E2A                     __ptext101:	
 15129 ;; *************** function _RfSWPointSelect *****************
 15130 ;; Defined at:
 15131 ;;		line 367 in file "../src/RF_Control_B1.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;  sw              1    wreg     unsigned char 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  sw              1    1[BANK0 ] unsigned char 
 15136 ;; Return value:  Size  Location     Type
 15137 ;;		None               void
 15138 ;; Registers used:
 15139 ;;		wreg
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;Total ram usage:        2 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    5
 15152 ;; This function calls:
 15153 ;;		Nothing
 15154 ;; This function is called by:
 15155 ;;		_setRFSW_Control
 15156 ;;		_setRFSW_AdjControl
 15157 ;;		_setRFSW_Status
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161                           
 15162                           ;psect for function _RfSWPointSelect
 15163  1E2A                     _RfSWPointSelect:	
 15164                           
 15165                           ;incstack = 0
 15166                           ; Regs used in _RfSWPointSelect: [wreg]
 15167                           ;RfSWPointSelect@sw stored from wreg
 15168  1E2A  0020               	movlb	0	; select bank0
 15169  1E2B  00A1               	movwf	RfSWPointSelect@sw
 15170                           
 15171                           ;RF_Control_B1.c: 369: if (sw == 1) {
 15172  1E2C  0821               	movf	RfSWPointSelect@sw,w
 15173  1E2D  3A01               	xorlw	1
 15174  1E2E  1D03               	skipz
 15175  1E2F  0008               	return
 15176                           
 15177                           ;RF_Control_B1.c: 370: RFSW = &RFSW1;
 15178  1E30  30EE               	movlw	_RFSW1& (0+255)
 15179  1E31  00A0               	movwf	??_RfSWPointSelect
 15180  1E32  0820               	movf	??_RfSWPointSelect,w
 15181  1E33  00F9               	movwf	_RFSW
 15182  1E34  0008               	return
 15183  1E35                     __end_of_RfSWPointSelect:	
 15184                           
 15185                           	psect	text102
 15186  1F15                     __ptext102:	
 15187 ;; *************** function _setDimmerLights_Trigger *****************
 15188 ;; Defined at:
 15189 ;;		line 714 in file "../src/Dimmer_B1.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;  lights          1    wreg     unsigned char 
 15192 ;;  command         1    2[BANK0 ] unsigned char 
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;  lights          1    3[BANK0 ] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;		None               void
 15197 ;; Registers used:
 15198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;Total ram usage:        2 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    6
 15211 ;; This function calls:
 15212 ;;		_DimmerLightsPointSelect
 15213 ;; This function is called by:
 15214 ;;		_DlyOff_Main
 15215 ;;		_setRFSW_Control
 15216 ;;		_Sw_DimmerOnFunc
 15217 ;;		_Sw_DimmerOffFunc
 15218 ;; This function uses a non-reentrant model
 15219 ;;
 15220                           
 15221                           
 15222                           ;psect for function _setDimmerLights_Trigger
 15223  1F15                     _setDimmerLights_Trigger:	
 15224                           
 15225                           ;incstack = 0
 15226                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15227                           ;setDimmerLights_Trigger@lights stored from wreg
 15228  1F15  0020               	movlb	0	; select bank0
 15229  1F16  00A3               	movwf	setDimmerLights_Trigger@lights
 15230                           
 15231                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 15232  1F17  0823               	movf	setDimmerLights_Trigger@lights,w
 15233  1F18  319E  261F         	fcall	_DimmerLightsPointSelect
 15234                           
 15235                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 15236  1F1A  0020               	movlb	0	; select bank0
 15237  1F1B  086A               	movf	_DimmerLights,w
 15238  1F1C  3E08               	addlw	8
 15239  1F1D  0086               	movwf	6
 15240  1F1E  3001               	movlw	1	; select bank2/3
 15241  1F1F  0087               	movwf	7
 15242  1F20  0822               	movf	setDimmerLights_Trigger@command,w
 15243  1F21  1101               	bcf	1,2
 15244  1F22  1D03               	skipz
 15245  1F23  1501               	bsf	1,2
 15246  1F24  0008               	return
 15247  1F25                     __end_of_setDimmerLights_Trigger:	
 15248                           
 15249                           	psect	text103
 15250  1F05                     __ptext103:	
 15251 ;; *************** function _setDimmerLights_Switch *****************
 15252 ;; Defined at:
 15253 ;;		line 702 in file "../src/Dimmer_B1.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  lights          1    wreg     unsigned char 
 15256 ;;  command         1    2[BANK0 ] unsigned char 
 15257 ;; Auto vars:     Size  Location     Type
 15258 ;;  lights          1    3[BANK0 ] unsigned char 
 15259 ;; Return value:  Size  Location     Type
 15260 ;;		None               void
 15261 ;; Registers used:
 15262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15263 ;; Tracked objects:
 15264 ;;		On entry : 0/0
 15265 ;;		On exit  : 0/0
 15266 ;;		Unchanged: 0/0
 15267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15268 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;Total ram usage:        2 bytes
 15273 ;; Hardware stack levels used:    1
 15274 ;; Hardware stack levels required when called:    6
 15275 ;; This function calls:
 15276 ;;		_DimmerLightsPointSelect
 15277 ;; This function is called by:
 15278 ;;		_DlyOff_Main
 15279 ;;		_setRFSW_Control
 15280 ;;		_Sw_DimmerOnFunc
 15281 ;;		_Sw_DimmerOffFunc
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function _setDimmerLights_Switch
 15287  1F05                     _setDimmerLights_Switch:	
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15291                           ;setDimmerLights_Switch@lights stored from wreg
 15292  1F05  0020               	movlb	0	; select bank0
 15293  1F06  00A3               	movwf	setDimmerLights_Switch@lights
 15294                           
 15295                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 15296  1F07  0823               	movf	setDimmerLights_Switch@lights,w
 15297  1F08  319E  261F         	fcall	_DimmerLightsPointSelect
 15298                           
 15299                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 15300  1F0A  0020               	movlb	0	; select bank0
 15301  1F0B  086A               	movf	_DimmerLights,w
 15302  1F0C  3E08               	addlw	8
 15303  1F0D  0086               	movwf	6
 15304  1F0E  3001               	movlw	1	; select bank2/3
 15305  1F0F  0087               	movwf	7
 15306  1F10  0822               	movf	setDimmerLights_Switch@command,w
 15307  1F11  1081               	bcf	1,1
 15308  1F12  1D03               	skipz
 15309  1F13  1481               	bsf	1,1
 15310  1F14  0008               	return
 15311  1F15                     __end_of_setDimmerLights_Switch:	
 15312                           
 15313                           	psect	text104
 15314  1E1F                     __ptext104:	
 15315 ;; *************** function _DimmerLightsPointSelect *****************
 15316 ;; Defined at:
 15317 ;;		line 324 in file "../src/Dimmer_B1.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;  lights          1    wreg     unsigned char 
 15320 ;; Auto vars:     Size  Location     Type
 15321 ;;  lights          1    1[BANK0 ] unsigned char 
 15322 ;; Return value:  Size  Location     Type
 15323 ;;		None               void
 15324 ;; Registers used:
 15325 ;;		wreg
 15326 ;; Tracked objects:
 15327 ;;		On entry : 0/0
 15328 ;;		On exit  : 0/0
 15329 ;;		Unchanged: 0/0
 15330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;Total ram usage:        2 bytes
 15336 ;; Hardware stack levels used:    1
 15337 ;; Hardware stack levels required when called:    5
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_setDimmerLights_Initialization
 15342 ;;		_setDimmerLights_Main
 15343 ;;		_setDimmerLights_ERROR
 15344 ;;		_setDimmerLights_TriggerERROR
 15345 ;;		_setDimmerLights
 15346 ;;		_setDimmerLights_Adj
 15347 ;;		_setDimmerLights_AdjRF
 15348 ;;		_setDimmerLights_Switch
 15349 ;;		_setDimmerLights_AdjGo
 15350 ;;		_setDimmerLights_Trigger
 15351 ;;		_setDimmerLights_TriggerAdj
 15352 ;;		_setDimmerLights_GO
 15353 ;;		_setDimmerLights_MaxmumValue
 15354 ;;		_setDimmerLights_Clear
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           
 15359                           ;psect for function _DimmerLightsPointSelect
 15360  1E1F                     _DimmerLightsPointSelect:	
 15361                           
 15362                           ;incstack = 0
 15363                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15364                           ;DimmerLightsPointSelect@lights stored from wreg
 15365  1E1F  0020               	movlb	0	; select bank0
 15366  1E20  00A1               	movwf	DimmerLightsPointSelect@lights
 15367                           
 15368                           ;Dimmer_B1.c: 326: if (lights == 1) {
 15369  1E21  0821               	movf	DimmerLightsPointSelect@lights,w
 15370  1E22  3A01               	xorlw	1
 15371  1E23  1D03               	skipz
 15372  1E24  0008               	return
 15373                           
 15374                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 15375  1E25  303D               	movlw	_DimmerLights1& (0+255)
 15376  1E26  00A0               	movwf	??_DimmerLightsPointSelect
 15377  1E27  0820               	movf	??_DimmerLightsPointSelect,w
 15378  1E28  00EA               	movwf	_DimmerLights
 15379  1E29  0008               	return
 15380  1E2A                     __end_of_DimmerLightsPointSelect:	
 15381                           
 15382                           	psect	text105
 15383  0859                     __ptext105:	
 15384 ;; *************** function _setBuz *****************
 15385 ;; Defined at:
 15386 ;;		line 22 in file "../src/Buzzer_B1.c"
 15387 ;; Parameters:    Size  Location     Type
 15388 ;;  count           1    wreg     unsigned char 
 15389 ;;  time            2    9[BANK0 ] int 
 15390 ;; Auto vars:     Size  Location     Type
 15391 ;;  count           1   12[BANK0 ] unsigned char 
 15392 ;; Return value:  Size  Location     Type
 15393 ;;		None               void
 15394 ;; Registers used:
 15395 ;;		wreg, status,2, status,0, pclath, cstack
 15396 ;; Tracked objects:
 15397 ;;		On entry : 0/0
 15398 ;;		On exit  : 0/0
 15399 ;;		Unchanged: 0/0
 15400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15401 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;Total ram usage:        4 bytes
 15406 ;; Hardware stack levels used:    1
 15407 ;; Hardware stack levels required when called:    6
 15408 ;; This function calls:
 15409 ;;		___awdiv
 15410 ;; This function is called by:
 15411 ;;		_DlyOff_Main
 15412 ;;		_setDimmerLights_Main
 15413 ;;		_DimmerLights_Exceptions
 15414 ;;		_setOverTemp_Exceptions
 15415 ;;		_setLog_Code
 15416 ;;		_setControl_Lights_Table
 15417 ;;		_setRFSW_Control
 15418 ;;		_setSw_Main
 15419 ;;		_Sw_DimmerOnFunc
 15420 ;;		_my_MainTime
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           
 15425                           ;psect for function _setBuz
 15426  0859                     _setBuz:	
 15427                           
 15428                           ;incstack = 0
 15429                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15430                           ;setBuz@count stored from wreg
 15431  0859  0020               	movlb	0	; select bank0
 15432  085A  00AC               	movwf	setBuz@count
 15433                           
 15434                           ;Buzzer_B1.c: 23: time /= 10;
 15435  085B  300A               	movlw	10
 15436  085C  00A0               	movwf	___awdiv@divisor
 15437  085D  3000               	movlw	0
 15438  085E  00A1               	movwf	___awdiv@divisor+1
 15439  085F  082A               	movf	setBuz@time+1,w
 15440  0860  01A3               	clrf	___awdiv@dividend+1
 15441  0861  07A3               	addwf	___awdiv@dividend+1,f
 15442  0862  0829               	movf	setBuz@time,w
 15443  0863  01A2               	clrf	___awdiv@dividend
 15444  0864  07A2               	addwf	___awdiv@dividend,f
 15445  0865  3197  2755  3188   	fcall	___awdiv
 15446  0868  0020               	movlb	0	; select bank0
 15447  0869  0821               	movf	?___awdiv+1,w
 15448  086A  01AA               	clrf	setBuz@time+1
 15449  086B  07AA               	addwf	setBuz@time+1,f
 15450  086C  0820               	movf	?___awdiv,w
 15451  086D  01A9               	clrf	setBuz@time
 15452  086E  07A9               	addwf	setBuz@time,f
 15453                           
 15454                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15455  086F  0021               	movlb	1	; select bank1
 15456  0870  1C32               	btfss	_Buz1^(0+128),0
 15457  0871  0008               	return
 15458                           
 15459                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15460  0872  18B2               	btfsc	_Buz1^(0+128),1
 15461  0873  288A               	goto	l92
 15462                           
 15463                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15464  0874  14B2               	bsf	_Buz1^(0+128),1
 15465                           
 15466                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15467  0875  01B3               	clrf	(_Buz1^(0+128)+1)
 15468  0876  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15469                           
 15470                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15471  0877  0020               	movlb	0	; select bank0
 15472  0878  082C               	movf	setBuz@count,w
 15473  0879  00AB               	movwf	??_setBuz
 15474  087A  082B               	movf	??_setBuz,w
 15475  087B  0021               	movlb	1	; select bank1
 15476  087C  00B5               	movwf	(_Buz1^(0+128)+3)
 15477                           
 15478                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15479  087D  0020               	movlb	0	; select bank0
 15480  087E  082A               	movf	setBuz@time+1,w
 15481  087F  0021               	movlb	1	; select bank1
 15482  0880  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15483  0881  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15484  0882  0020               	movlb	0	; select bank0
 15485  0883  0829               	movf	setBuz@time,w
 15486  0884  0021               	movlb	1	; select bank1
 15487  0885  01B8               	clrf	(_Buz1^(0+128)+6)
 15488  0886  07B8               	addwf	(_Buz1^(0+128)+6),f
 15489                           
 15490                           ;Buzzer_B1.c: 30: RB3 = 1;
 15491  0887  0020               	movlb	0	; select bank0
 15492  0888  158D               	bsf	13,3	;volatile
 15493                           
 15494                           ;Buzzer_B1.c: 31: } else {
 15495  0889  0008               	return
 15496  088A                     l92:	
 15497                           
 15498                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15499  088A  19B2               	btfsc	_Buz1^(0+128),3
 15500  088B  289E               	goto	l94
 15501                           
 15502                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15503  088C  15B2               	bsf	_Buz1^(0+128),3
 15504                           
 15505                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15506  088D  0020               	movlb	0	; select bank0
 15507  088E  082C               	movf	setBuz@count,w
 15508  088F  00AB               	movwf	??_setBuz
 15509  0890  082B               	movf	??_setBuz,w
 15510  0891  0021               	movlb	1	; select bank1
 15511  0892  00B6               	movwf	(_Buz1^(0+128)+4)
 15512                           
 15513                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15514  0893  0020               	movlb	0	; select bank0
 15515  0894  082A               	movf	setBuz@time+1,w
 15516  0895  0021               	movlb	1	; select bank1
 15517  0896  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15518  0897  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15519  0898  0020               	movlb	0	; select bank0
 15520  0899  0829               	movf	setBuz@time,w
 15521  089A  0021               	movlb	1	; select bank1
 15522  089B  01BA               	clrf	(_Buz1^(0+128)+8)
 15523  089C  07BA               	addwf	(_Buz1^(0+128)+8),f
 15524                           
 15525                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15526  089D  0008               	return
 15527  089E                     l94:	
 15528  089E  1A32               	btfsc	_Buz1^(0+128),4
 15529  089F  0008               	return
 15530                           
 15531                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15532  08A0  1632               	bsf	_Buz1^(0+128),4
 15533                           
 15534                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15535  08A1  0020               	movlb	0	; select bank0
 15536  08A2  082C               	movf	setBuz@count,w
 15537  08A3  00AB               	movwf	??_setBuz
 15538  08A4  082B               	movf	??_setBuz,w
 15539  08A5  0021               	movlb	1	; select bank1
 15540  08A6  00B7               	movwf	(_Buz1^(0+128)+5)
 15541                           
 15542                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15543  08A7  0020               	movlb	0	; select bank0
 15544  08A8  082A               	movf	setBuz@time+1,w
 15545  08A9  0021               	movlb	1	; select bank1
 15546  08AA  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15547  08AB  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15548  08AC  0020               	movlb	0	; select bank0
 15549  08AD  0829               	movf	setBuz@time,w
 15550  08AE  0021               	movlb	1	; select bank1
 15551  08AF  01BC               	clrf	(_Buz1^(0+128)+10)
 15552  08B0  07BC               	addwf	(_Buz1^(0+128)+10),f
 15553  08B1  0008               	return
 15554  08B2                     __end_of_setBuz:	
 15555                           
 15556                           	psect	text106
 15557  1755                     __ptext106:	
 15558 ;; *************** function ___awdiv *****************
 15559 ;; Defined at:
 15560 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15561 ;; Parameters:    Size  Location     Type
 15562 ;;  divisor         2    0[BANK0 ] int 
 15563 ;;  dividend        2    2[BANK0 ] int 
 15564 ;; Auto vars:     Size  Location     Type
 15565 ;;  quotient        2    7[BANK0 ] int 
 15566 ;;  sign            1    6[BANK0 ] unsigned char 
 15567 ;;  counter         1    5[BANK0 ] unsigned char 
 15568 ;; Return value:  Size  Location     Type
 15569 ;;                  2    0[BANK0 ] int 
 15570 ;; Registers used:
 15571 ;;		wreg, status,2, status,0
 15572 ;; Tracked objects:
 15573 ;;		On entry : 0/0
 15574 ;;		On exit  : 0/0
 15575 ;;		Unchanged: 0/0
 15576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15578 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15581 ;;Total ram usage:        9 bytes
 15582 ;; Hardware stack levels used:    1
 15583 ;; Hardware stack levels required when called:    5
 15584 ;; This function calls:
 15585 ;;		Nothing
 15586 ;; This function is called by:
 15587 ;;		_setBuz
 15588 ;; This function uses a non-reentrant model
 15589 ;;
 15590                           
 15591                           
 15592                           ;psect for function ___awdiv
 15593  1755                     ___awdiv:	
 15594                           
 15595                           ;incstack = 0
 15596                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15597  1755  0020               	movlb	0	; select bank0
 15598  1756  01A6               	clrf	___awdiv@sign
 15599  1757  1FA1               	btfss	___awdiv@divisor+1,7
 15600  1758  2F60               	goto	l7753
 15601  1759  09A0               	comf	___awdiv@divisor,f
 15602  175A  09A1               	comf	___awdiv@divisor+1,f
 15603  175B  0AA0               	incf	___awdiv@divisor,f
 15604  175C  1903               	skipnz
 15605  175D  0AA1               	incf	___awdiv@divisor+1,f
 15606  175E  01A6               	clrf	___awdiv@sign
 15607  175F  0AA6               	incf	___awdiv@sign,f
 15608  1760                     l7753:	
 15609  1760  1FA3               	btfss	___awdiv@dividend+1,7
 15610  1761  2F6B               	goto	l7759
 15611  1762  09A2               	comf	___awdiv@dividend,f
 15612  1763  09A3               	comf	___awdiv@dividend+1,f
 15613  1764  0AA2               	incf	___awdiv@dividend,f
 15614  1765  1903               	skipnz
 15615  1766  0AA3               	incf	___awdiv@dividend+1,f
 15616  1767  3001               	movlw	1
 15617  1768  00A4               	movwf	??___awdiv
 15618  1769  0824               	movf	??___awdiv,w
 15619  176A  06A6               	xorwf	___awdiv@sign,f
 15620  176B                     l7759:	
 15621  176B  01A7               	clrf	___awdiv@quotient
 15622  176C  01A8               	clrf	___awdiv@quotient+1
 15623  176D  0821               	movf	___awdiv@divisor+1,w
 15624  176E  0420               	iorwf	___awdiv@divisor,w
 15625  176F  1903               	skipnz
 15626  1770  2F9A               	goto	l7781
 15627  1771  01A5               	clrf	___awdiv@counter
 15628  1772  0AA5               	incf	___awdiv@counter,f
 15629  1773                     l7769:	
 15630  1773  1BA1               	btfsc	___awdiv@divisor+1,7
 15631  1774  2F7F               	goto	l7771
 15632  1775  3001               	movlw	1
 15633  1776                     u7425:	
 15634  1776  35A0               	lslf	___awdiv@divisor,f
 15635  1777  0DA1               	rlf	___awdiv@divisor+1,f
 15636  1778  0B89               	decfsz	9,f
 15637  1779  2F76               	goto	u7425
 15638  177A  3001               	movlw	1
 15639  177B  00A4               	movwf	??___awdiv
 15640  177C  0824               	movf	??___awdiv,w
 15641  177D  07A5               	addwf	___awdiv@counter,f
 15642  177E  2F73               	goto	l7769
 15643  177F                     l7771:	
 15644  177F  3001               	movlw	1
 15645  1780                     u7445:	
 15646  1780  35A7               	lslf	___awdiv@quotient,f
 15647  1781  0DA8               	rlf	___awdiv@quotient+1,f
 15648  1782  0B89               	decfsz	9,f
 15649  1783  2F80               	goto	u7445
 15650  1784  0821               	movf	___awdiv@divisor+1,w
 15651  1785  0223               	subwf	___awdiv@dividend+1,w
 15652  1786  1D03               	skipz
 15653  1787  2F8A               	goto	u7455
 15654  1788  0820               	movf	___awdiv@divisor,w
 15655  1789  0222               	subwf	___awdiv@dividend,w
 15656  178A                     u7455:	
 15657  178A  1C03               	skipc
 15658  178B  2F91               	goto	l7777
 15659  178C  0820               	movf	___awdiv@divisor,w
 15660  178D  02A2               	subwf	___awdiv@dividend,f
 15661  178E  0821               	movf	___awdiv@divisor+1,w
 15662  178F  3BA3               	subwfb	___awdiv@dividend+1,f
 15663  1790  1427               	bsf	___awdiv@quotient,0
 15664  1791                     l7777:	
 15665  1791  3001               	movlw	1
 15666  1792                     u7465:	
 15667  1792  36A1               	lsrf	___awdiv@divisor+1,f
 15668  1793  0CA0               	rrf	___awdiv@divisor,f
 15669  1794  0B89               	decfsz	9,f
 15670  1795  2F92               	goto	u7465
 15671  1796  3001               	movlw	1
 15672  1797  02A5               	subwf	___awdiv@counter,f
 15673  1798  1D03               	btfss	3,2
 15674  1799  2F7F               	goto	l7771
 15675  179A                     l7781:	
 15676  179A  0826               	movf	___awdiv@sign,w
 15677  179B  1903               	btfsc	3,2
 15678  179C  2FA2               	goto	l7785
 15679  179D  09A7               	comf	___awdiv@quotient,f
 15680  179E  09A8               	comf	___awdiv@quotient+1,f
 15681  179F  0AA7               	incf	___awdiv@quotient,f
 15682  17A0  1903               	skipnz
 15683  17A1  0AA8               	incf	___awdiv@quotient+1,f
 15684  17A2                     l7785:	
 15685  17A2  0828               	movf	___awdiv@quotient+1,w
 15686  17A3  01A1               	clrf	?___awdiv+1
 15687  17A4  07A1               	addwf	?___awdiv+1,f
 15688  17A5  0827               	movf	___awdiv@quotient,w
 15689  17A6  01A0               	clrf	?___awdiv
 15690  17A7  07A0               	addwf	?___awdiv,f
 15691  17A8  0008               	return
 15692  17A9                     __end_of___awdiv:	
 15693                           
 15694                           	psect	text107
 15695  1D7C                     __ptext107:	
 15696 ;; *************** function _DelayOff_Initialization *****************
 15697 ;; Defined at:
 15698 ;;		line 26 in file "../src/DelayOff_B1.c"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;		None
 15701 ;; Auto vars:     Size  Location     Type
 15702 ;;		None
 15703 ;; Return value:  Size  Location     Type
 15704 ;;		None               void
 15705 ;; Registers used:
 15706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;Total ram usage:        0 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    7
 15719 ;; This function calls:
 15720 ;;		_DlyOff_Initialization
 15721 ;; This function is called by:
 15722 ;;		_main
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           
 15727                           ;psect for function _DelayOff_Initialization
 15728  1D7C                     _DelayOff_Initialization:	
 15729                           
 15730                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15731                           
 15732                           ;incstack = 0
 15733                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15734  1D7C  3001               	movlw	1
 15735  1D7D  319E  2614         	fcall	_DlyOff_Initialization
 15736  1D7F  0008               	return
 15737  1D80                     __end_of_DelayOff_Initialization:	
 15738                           
 15739                           	psect	text108
 15740  1E14                     __ptext108:	
 15741 ;; *************** function _DlyOff_Initialization *****************
 15742 ;; Defined at:
 15743 ;;		line 56 in file "../src/DelayOff_B1.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  sw              1    wreg     unsigned char 
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;  sw              1    2[BANK0 ] unsigned char 
 15748 ;; Return value:  Size  Location     Type
 15749 ;;		None               void
 15750 ;; Registers used:
 15751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15752 ;; Tracked objects:
 15753 ;;		On entry : 0/0
 15754 ;;		On exit  : 0/0
 15755 ;;		Unchanged: 0/0
 15756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;Total ram usage:        1 bytes
 15762 ;; Hardware stack levels used:    1
 15763 ;; Hardware stack levels required when called:    6
 15764 ;; This function calls:
 15765 ;;		_DelayOffPointSelect
 15766 ;; This function is called by:
 15767 ;;		_DelayOff_Initialization
 15768 ;; This function uses a non-reentrant model
 15769 ;;
 15770                           
 15771                           
 15772                           ;psect for function _DlyOff_Initialization
 15773  1E14                     _DlyOff_Initialization:	
 15774                           
 15775                           ;incstack = 0
 15776                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15777                           ;DlyOff_Initialization@sw stored from wreg
 15778  1E14  0020               	movlb	0	; select bank0
 15779  1E15  00A2               	movwf	DlyOff_Initialization@sw
 15780                           
 15781                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15782  1E16  0822               	movf	DlyOff_Initialization@sw,w
 15783  1E17  319E  2609         	fcall	_DelayOffPointSelect
 15784                           
 15785                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15786  1E19  0020               	movlb	0	; select bank0
 15787  1E1A  0869               	movf	_DelayOff,w
 15788  1E1B  0086               	movwf	6
 15789  1E1C  0187               	clrf	7
 15790  1E1D  1401               	bsf	1,0
 15791  1E1E  0008               	return
 15792  1E1F                     __end_of_DlyOff_Initialization:	
 15793                           
 15794                           	psect	text109
 15795  1E09                     __ptext109:	
 15796 ;; *************** function _DelayOffPointSelect *****************
 15797 ;; Defined at:
 15798 ;;		line 7 in file "../src/DelayOff_B1.c"
 15799 ;; Parameters:    Size  Location     Type
 15800 ;;  sw              1    wreg     unsigned char 
 15801 ;; Auto vars:     Size  Location     Type
 15802 ;;  sw              1    1[BANK0 ] unsigned char 
 15803 ;; Return value:  Size  Location     Type
 15804 ;;		None               void
 15805 ;; Registers used:
 15806 ;;		wreg
 15807 ;; Tracked objects:
 15808 ;;		On entry : 0/0
 15809 ;;		On exit  : 0/0
 15810 ;;		Unchanged: 0/0
 15811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;Total ram usage:        2 bytes
 15817 ;; Hardware stack levels used:    1
 15818 ;; Hardware stack levels required when called:    5
 15819 ;; This function calls:
 15820 ;;		Nothing
 15821 ;; This function is called by:
 15822 ;;		_DlyOff_Initialization
 15823 ;;		_DlyOff_Main
 15824 ;;		_setDelayOff_GO
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function _DelayOffPointSelect
 15830  1E09                     _DelayOffPointSelect:	
 15831                           
 15832                           ;incstack = 0
 15833                           ; Regs used in _DelayOffPointSelect: [wreg]
 15834                           ;DelayOffPointSelect@sw stored from wreg
 15835  1E09  0020               	movlb	0	; select bank0
 15836  1E0A  00A1               	movwf	DelayOffPointSelect@sw
 15837                           
 15838                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15839  1E0B  0821               	movf	DelayOffPointSelect@sw,w
 15840  1E0C  3A01               	xorlw	1
 15841  1E0D  1D03               	skipz
 15842  1E0E  0008               	return
 15843                           
 15844                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15845  1E0F  30EC               	movlw	_DlySw1& (0+255)
 15846  1E10  00A0               	movwf	??_DelayOffPointSelect
 15847  1E11  0820               	movf	??_DelayOffPointSelect,w
 15848  1E12  00E9               	movwf	_DelayOff
 15849  1E13  0008               	return
 15850  1E14                     __end_of_DelayOffPointSelect:	
 15851                           
 15852                           	psect	text110
 15853  1FD6                     __ptext110:	
 15854 ;; *************** function _CC2500_PowerOnInitial *****************
 15855 ;; Defined at:
 15856 ;;		line 122 in file "../src/CC2500_B1.c"
 15857 ;; Parameters:    Size  Location     Type
 15858 ;;		None
 15859 ;; Auto vars:     Size  Location     Type
 15860 ;;		None
 15861 ;; Return value:  Size  Location     Type
 15862 ;;		None               void
 15863 ;; Registers used:
 15864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15865 ;; Tracked objects:
 15866 ;;		On entry : 0/0
 15867 ;;		On exit  : 0/0
 15868 ;;		Unchanged: 0/0
 15869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15874 ;;Total ram usage:        0 bytes
 15875 ;; Hardware stack levels used:    1
 15876 ;; Hardware stack levels required when called:    8
 15877 ;; This function calls:
 15878 ;;		_CC2500_ClearRXFIFO
 15879 ;;		_CC2500_ClearTXFIFO
 15880 ;;		_CC2500_FrequencyCabr
 15881 ;;		_CC2500_InitPATable
 15882 ;;		_CC2500_InitSetREG
 15883 ;;		_CC2500_PowerRST
 15884 ;;		_CC2500_SIDLEMode
 15885 ;; This function is called by:
 15886 ;;		_main
 15887 ;; This function uses a non-reentrant model
 15888 ;;
 15889                           
 15890                           
 15891                           ;psect for function _CC2500_PowerOnInitial
 15892  1FD6                     _CC2500_PowerOnInitial:	
 15893                           
 15894                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 15895                           
 15896                           ;incstack = 0
 15897                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15898  1FD6  3195  2563  319F   	fcall	_CC2500_PowerRST
 15899                           
 15900                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 15901  1FD9  3192  2259  319F   	fcall	_CC2500_InitSetREG
 15902                           
 15903                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 15904  1FDC  3190  20E3  319F   	fcall	_CC2500_InitPATable
 15905                           
 15906                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 15907  1FDF  319D  2574  319F   	fcall	_CC2500_ClearTXFIFO
 15908                           
 15909                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 15910  1FE2  319D  2570  319F   	fcall	_CC2500_ClearRXFIFO
 15911                           
 15912                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 15913  1FE5  319E  2656  319F   	fcall	_CC2500_FrequencyCabr
 15914                           
 15915                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 15916  1FE8  319D  2578         	fcall	_CC2500_SIDLEMode
 15917  1FEA  0008               	return
 15918  1FEB                     __end_of_CC2500_PowerOnInitial:	
 15919                           
 15920                           	psect	text111
 15921  1D78                     __ptext111:	
 15922 ;; *************** function _CC2500_SIDLEMode *****************
 15923 ;; Defined at:
 15924 ;;		line 212 in file "../src/CC2500_B1.c"
 15925 ;; Parameters:    Size  Location     Type
 15926 ;;		None
 15927 ;; Auto vars:     Size  Location     Type
 15928 ;;		None
 15929 ;; Return value:  Size  Location     Type
 15930 ;;		None               void
 15931 ;; Registers used:
 15932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;Total ram usage:        0 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    7
 15945 ;; This function calls:
 15946 ;;		_CC2500_WriteCommand
 15947 ;; This function is called by:
 15948 ;;		_CC2500_PowerOnInitial
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           
 15953                           ;psect for function _CC2500_SIDLEMode
 15954  1D78                     _CC2500_SIDLEMode:	
 15955                           
 15956                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 15957                           
 15958                           ;incstack = 0
 15959                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15960  1D78  3036               	movlw	54
 15961  1D79  3190  2097         	fcall	_CC2500_WriteCommand
 15962  1D7B  0008               	return
 15963  1D7C                     __end_of_CC2500_SIDLEMode:	
 15964                           
 15965                           	psect	text112
 15966  1563                     __ptext112:	
 15967 ;; *************** function _CC2500_PowerRST *****************
 15968 ;; Defined at:
 15969 ;;		line 135 in file "../src/CC2500_B1.c"
 15970 ;; Parameters:    Size  Location     Type
 15971 ;;		None
 15972 ;; Auto vars:     Size  Location     Type
 15973 ;;		None
 15974 ;; Return value:  Size  Location     Type
 15975 ;;		None               void
 15976 ;; Registers used:
 15977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15978 ;; Tracked objects:
 15979 ;;		On entry : 0/0
 15980 ;;		On exit  : 0/0
 15981 ;;		Unchanged: 0/0
 15982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;Total ram usage:        1 bytes
 15988 ;; Hardware stack levels used:    1
 15989 ;; Hardware stack levels required when called:    6
 15990 ;; This function calls:
 15991 ;;		_CC2500_WriteByte
 15992 ;;		_DelayTime_1us
 15993 ;;		_Timeout_Counter
 15994 ;;		_set_TimeoutCleared
 15995 ;; This function is called by:
 15996 ;;		_CC2500_PowerOnInitial
 15997 ;; This function uses a non-reentrant model
 15998 ;;
 15999                           
 16000                           
 16001                           ;psect for function _CC2500_PowerRST
 16002  1563                     _CC2500_PowerRST:	
 16003                           
 16004                           ;CC2500_B1.c: 136: RC1 = 0;
 16005                           
 16006                           ;incstack = 0
 16007                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16008  1563  0020               	movlb	0	; select bank0
 16009  1564  108E               	bcf	14,1	;volatile
 16010                           
 16011                           ;CC2500_B1.c: 137: RC0 = 0;
 16012  1565  100E               	bcf	14,0	;volatile
 16013                           
 16014                           ;CC2500_B1.c: 138: RC4 = 1;
 16015  1566  160E               	bsf	14,4	;volatile
 16016                           
 16017                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16018  1567  300A               	movlw	10
 16019  1568  00A0               	movwf	DelayTime_1us@count
 16020  1569  3000               	movlw	0
 16021  156A  00A1               	movwf	DelayTime_1us@count+1
 16022  156B  3192  220C  3195   	fcall	_DelayTime_1us
 16023                           
 16024                           ;CC2500_B1.c: 140: RC4 = 0;
 16025  156E  0020               	movlb	0	; select bank0
 16026  156F  120E               	bcf	14,4	;volatile
 16027                           
 16028                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16029  1570  300A               	movlw	10
 16030  1571  00A0               	movwf	DelayTime_1us@count
 16031  1572  3000               	movlw	0
 16032  1573  00A1               	movwf	DelayTime_1us@count+1
 16033  1574  3192  220C  3195   	fcall	_DelayTime_1us
 16034                           
 16035                           ;CC2500_B1.c: 142: RC4 = 1;
 16036  1577  0020               	movlb	0	; select bank0
 16037  1578  160E               	bsf	14,4	;volatile
 16038                           
 16039                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16040  1579  3028               	movlw	40
 16041  157A  00A0               	movwf	DelayTime_1us@count
 16042  157B  3000               	movlw	0
 16043  157C  00A1               	movwf	DelayTime_1us@count+1
 16044  157D  3192  220C  3195   	fcall	_DelayTime_1us
 16045                           
 16046                           ;CC2500_B1.c: 144: RC4 = 0;
 16047  1580  0020               	movlb	0	; select bank0
 16048  1581  120E               	bcf	14,4	;volatile
 16049                           
 16050                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16051  1582  3030               	movlw	48
 16052  1583  00A6               	movwf	??_CC2500_PowerRST
 16053  1584  0826               	movf	??_CC2500_PowerRST,w
 16054  1585  00FA               	movwf	_SPI0Buffer
 16055                           
 16056                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16057  1586  2D8A               	goto	l8645
 16058  1587                     l8643:	
 16059                           
 16060                           ;CC2500_B1.c: 147: Timeout_Counter();
 16061  1587  319F  27C1  3195   	fcall	_Timeout_Counter
 16062  158A                     l8645:	
 16063  158A  0020               	movlb	0	; select bank0
 16064  158B  1D0E               	btfss	14,2	;volatile
 16065  158C  2D90               	goto	l8649
 16066  158D  0021               	movlb	1	; select bank1
 16067  158E  1D2F               	btfss	(_myMain^(0+128)+15),2
 16068  158F  2D87               	goto	l8643
 16069  1590                     l8649:	
 16070                           
 16071                           ;CC2500_B1.c: 148: };
 16072                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16073  1590  319D  258C  3195   	fcall	_set_TimeoutCleared
 16074                           
 16075                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16076  1593  319F  27AD  3195   	fcall	_CC2500_WriteByte
 16077                           
 16078                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16079  1596  2D9A               	goto	l8655
 16080  1597                     l8653:	
 16081                           
 16082                           ;CC2500_B1.c: 152: Timeout_Counter();
 16083  1597  319F  27C1  3195   	fcall	_Timeout_Counter
 16084  159A                     l8655:	
 16085  159A  0020               	movlb	0	; select bank0
 16086  159B  1D0E               	btfss	14,2	;volatile
 16087  159C  2DA0               	goto	l8659
 16088  159D  0021               	movlb	1	; select bank1
 16089  159E  1D2F               	btfss	(_myMain^(0+128)+15),2
 16090  159F  2D97               	goto	l8653
 16091  15A0                     l8659:	
 16092                           
 16093                           ;CC2500_B1.c: 153: };
 16094                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16095  15A0  319D  258C         	fcall	_set_TimeoutCleared
 16096                           
 16097                           ;CC2500_B1.c: 155: RC0 = 0;
 16098  15A2  0020               	movlb	0	; select bank0
 16099  15A3  100E               	bcf	14,0	;volatile
 16100                           
 16101                           ;CC2500_B1.c: 156: RC4 = 1;
 16102  15A4  160E               	bsf	14,4	;volatile
 16103  15A5  0008               	return
 16104  15A6                     __end_of_CC2500_PowerRST:	
 16105                           
 16106                           	psect	text113
 16107  1259                     __ptext113:	
 16108 ;; *************** function _CC2500_InitSetREG *****************
 16109 ;; Defined at:
 16110 ;;		line 162 in file "../src/CC2500_B1.c"
 16111 ;; Parameters:    Size  Location     Type
 16112 ;;		None
 16113 ;; Auto vars:     Size  Location     Type
 16114 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16115 ;;  temp2           1    7[BANK0 ] unsigned char 
 16116 ;;  temp1           1    6[BANK0 ] unsigned char 
 16117 ;; Return value:  Size  Location     Type
 16118 ;;		None               void
 16119 ;; Registers used:
 16120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16121 ;; Tracked objects:
 16122 ;;		On entry : 0/0
 16123 ;;		On exit  : 0/0
 16124 ;;		Unchanged: 0/0
 16125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16127 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16129 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;Total ram usage:        4 bytes
 16131 ;; Hardware stack levels used:    1
 16132 ;; Hardware stack levels required when called:    7
 16133 ;; This function calls:
 16134 ;;		_CC2500_WriteREG
 16135 ;; This function is called by:
 16136 ;;		_CC2500_PowerOnInitial
 16137 ;; This function uses a non-reentrant model
 16138 ;;
 16139                           
 16140                           
 16141                           ;psect for function _CC2500_InitSetREG
 16142  1259                     _CC2500_InitSetREG:	
 16143                           
 16144                           ;CC2500_B1.c: 163: unsigned char loop_c;
 16145                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 16146                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 16147                           
 16148                           ;incstack = 0
 16149                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16150  1259  0020               	movlb	0	; select bank0
 16151  125A  01A8               	clrf	CC2500_InitSetREG@loop_c
 16152  125B                     L5:	
 16153  125B  302F               	movlw	47
 16154  125C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16155  125D  1803               	btfsc	3,0
 16156  125E  0008               	return
 16157                           
 16158                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 16159  125F  0828               	movf	CC2500_InitSetREG@loop_c,w
 16160  1260  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16161  1261  0084               	movwf	4
 16162  1262  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16163  1263  1803               	skipnc
 16164  1264  3E01               	addlw	1
 16165  1265  0085               	movwf	5
 16166  1266  0800               	movf	0,w	;code access
 16167  1267  00A5               	movwf	??_CC2500_InitSetREG
 16168  1268  0825               	movf	??_CC2500_InitSetREG,w
 16169  1269  00A6               	movwf	CC2500_InitSetREG@temp1
 16170                           
 16171                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 16172  126A  0828               	movf	CC2500_InitSetREG@loop_c,w
 16173  126B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16174  126C  0084               	movwf	4
 16175  126D  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16176  126E  1803               	skipnc
 16177  126F  3E01               	addlw	1
 16178  1270  0085               	movwf	5
 16179  1271  0800               	movf	0,w	;code access
 16180  1272  00A5               	movwf	??_CC2500_InitSetREG
 16181  1273  0825               	movf	??_CC2500_InitSetREG,w
 16182  1274  00A7               	movwf	CC2500_InitSetREG@temp2
 16183                           
 16184                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 16185  1275  0827               	movf	CC2500_InitSetREG@temp2,w
 16186  1276  00A5               	movwf	??_CC2500_InitSetREG
 16187  1277  0825               	movf	??_CC2500_InitSetREG,w
 16188  1278  00A2               	movwf	CC2500_WriteREG@value
 16189  1279  0826               	movf	CC2500_InitSetREG@temp1,w
 16190  127A  3191  2161  3192   	fcall	_CC2500_WriteREG
 16191  127D  3001               	movlw	1
 16192  127E  0020               	movlb	0	; select bank0
 16193  127F  00A5               	movwf	??_CC2500_InitSetREG
 16194  1280  0825               	movf	??_CC2500_InitSetREG,w
 16195  1281  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16196  1282  2A5B               	goto	L5
 16197  1283                     __end_of_CC2500_InitSetREG:	
 16198                           
 16199                           	psect	text114
 16200  10E3                     __ptext114:	
 16201 ;; *************** function _CC2500_InitPATable *****************
 16202 ;; Defined at:
 16203 ;;		line 177 in file "../src/CC2500_B1.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;		None
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16208 ;;  temp            1    6[BANK0 ] unsigned char 
 16209 ;; Return value:  Size  Location     Type
 16210 ;;		None               void
 16211 ;; Registers used:
 16212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16213 ;; Tracked objects:
 16214 ;;		On entry : 0/0
 16215 ;;		On exit  : 0/0
 16216 ;;		Unchanged: 0/0
 16217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;Total ram usage:        3 bytes
 16223 ;; Hardware stack levels used:    1
 16224 ;; Hardware stack levels required when called:    7
 16225 ;; This function calls:
 16226 ;;		_CC2500_WriteREG
 16227 ;; This function is called by:
 16228 ;;		_CC2500_PowerOnInitial
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232                           
 16233                           ;psect for function _CC2500_InitPATable
 16234  10E3                     _CC2500_InitPATable:	
 16235                           
 16236                           ;CC2500_B1.c: 178: unsigned char loop_d;
 16237                           ;CC2500_B1.c: 179: unsigned char temp;
 16238                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 16239                           
 16240                           ;incstack = 0
 16241                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16242  10E3  0020               	movlb	0	; select bank0
 16243  10E4  01A7               	clrf	CC2500_InitPATable@loop_d
 16244  10E5                     L6:	
 16245  10E5  3008               	movlw	8
 16246  10E6  0227               	subwf	CC2500_InitPATable@loop_d,w
 16247  10E7  1803               	btfsc	3,0
 16248  10E8  0008               	return
 16249                           
 16250                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 16251  10E9  0827               	movf	CC2500_InitPATable@loop_d,w
 16252  10EA  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16253  10EB  0084               	movwf	4
 16254  10EC  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16255  10ED  1803               	skipnc
 16256  10EE  3E01               	addlw	1
 16257  10EF  0085               	movwf	5
 16258  10F0  0800               	movf	0,w	;code access
 16259  10F1  00A5               	movwf	??_CC2500_InitPATable
 16260  10F2  0825               	movf	??_CC2500_InitPATable,w
 16261  10F3  00A6               	movwf	CC2500_InitPATable@temp
 16262                           
 16263                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 16264  10F4  0826               	movf	CC2500_InitPATable@temp,w
 16265  10F5  00A5               	movwf	??_CC2500_InitPATable
 16266  10F6  0825               	movf	??_CC2500_InitPATable,w
 16267  10F7  00A2               	movwf	CC2500_WriteREG@value
 16268  10F8  303E               	movlw	62
 16269  10F9  3191  2161  3190   	fcall	_CC2500_WriteREG
 16270  10FC  3001               	movlw	1
 16271  10FD  0020               	movlb	0	; select bank0
 16272  10FE  00A5               	movwf	??_CC2500_InitPATable
 16273  10FF  0825               	movf	??_CC2500_InitPATable,w
 16274  1100  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16275  1101  28E5               	goto	L6
 16276  1102                     __end_of_CC2500_InitPATable:	
 16277                           
 16278                           	psect	text115
 16279  1161                     __ptext115:	
 16280 ;; *************** function _CC2500_WriteREG *****************
 16281 ;; Defined at:
 16282 ;;		line 254 in file "../src/CC2500_B1.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  w_addr          1    wreg     unsigned char 
 16285 ;;  value           1    2[BANK0 ] unsigned char 
 16286 ;; Auto vars:     Size  Location     Type
 16287 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;		None               void
 16290 ;; Registers used:
 16291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;Total ram usage:        3 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    6
 16304 ;; This function calls:
 16305 ;;		_CC2500_WriteByte
 16306 ;;		_Timeout_Counter
 16307 ;;		_set_TimeoutCleared
 16308 ;; This function is called by:
 16309 ;;		_CC2500_InitSetREG
 16310 ;;		_CC2500_InitPATable
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           
 16315                           ;psect for function _CC2500_WriteREG
 16316  1161                     _CC2500_WriteREG:	
 16317                           
 16318                           ;incstack = 0
 16319                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16320                           ;CC2500_WriteREG@w_addr stored from wreg
 16321  1161  0020               	movlb	0	; select bank0
 16322  1162  00A4               	movwf	CC2500_WriteREG@w_addr
 16323                           
 16324                           ;CC2500_B1.c: 255: RC4 = 0;
 16325  1163  120E               	bcf	14,4	;volatile
 16326                           
 16327                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 16328  1164  0824               	movf	CC2500_WriteREG@w_addr,w
 16329  1165  00A3               	movwf	??_CC2500_WriteREG
 16330  1166  0823               	movf	??_CC2500_WriteREG,w
 16331  1167  00FA               	movwf	_SPI0Buffer
 16332                           
 16333                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 16334  1168  296C               	goto	l8403
 16335  1169                     l8401:	
 16336                           
 16337                           ;CC2500_B1.c: 258: Timeout_Counter();
 16338  1169  319F  27C1  3191   	fcall	_Timeout_Counter
 16339  116C                     l8403:	
 16340  116C  0020               	movlb	0	; select bank0
 16341  116D  1D0E               	btfss	14,2	;volatile
 16342  116E  2972               	goto	l8407
 16343  116F  0021               	movlb	1	; select bank1
 16344  1170  1D2F               	btfss	(_myMain^(0+128)+15),2
 16345  1171  2969               	goto	l8401
 16346  1172                     l8407:	
 16347                           
 16348                           ;CC2500_B1.c: 259: };
 16349                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 16350  1172  319D  258C  3191   	fcall	_set_TimeoutCleared
 16351                           
 16352                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 16353  1175  319F  27AD  3191   	fcall	_CC2500_WriteByte
 16354                           
 16355                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 16356  1178  0020               	movlb	0	; select bank0
 16357  1179  0822               	movf	CC2500_WriteREG@value,w
 16358  117A  00A3               	movwf	??_CC2500_WriteREG
 16359  117B  0823               	movf	??_CC2500_WriteREG,w
 16360  117C  00FA               	movwf	_SPI0Buffer
 16361                           
 16362                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 16363  117D  319F  27AD         	fcall	_CC2500_WriteByte
 16364                           
 16365                           ;CC2500_B1.c: 265: RC4 = 1;
 16366  117F  0020               	movlb	0	; select bank0
 16367  1180  160E               	bsf	14,4	;volatile
 16368  1181  0008               	return
 16369  1182                     __end_of_CC2500_WriteREG:	
 16370                           
 16371                           	psect	text116
 16372  1E56                     __ptext116:	
 16373 ;; *************** function _CC2500_FrequencyCabr *****************
 16374 ;; Defined at:
 16375 ;;		line 204 in file "../src/CC2500_B1.c"
 16376 ;; Parameters:    Size  Location     Type
 16377 ;;		None
 16378 ;; Auto vars:     Size  Location     Type
 16379 ;;		None
 16380 ;; Return value:  Size  Location     Type
 16381 ;;		None               void
 16382 ;; Registers used:
 16383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16384 ;; Tracked objects:
 16385 ;;		On entry : 0/0
 16386 ;;		On exit  : 0/0
 16387 ;;		Unchanged: 0/0
 16388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;Total ram usage:        0 bytes
 16394 ;; Hardware stack levels used:    1
 16395 ;; Hardware stack levels required when called:    7
 16396 ;; This function calls:
 16397 ;;		_CC2500_WriteCommand
 16398 ;;		_DelayTime_1us
 16399 ;; This function is called by:
 16400 ;;		_CC2500_PowerOnInitial
 16401 ;; This function uses a non-reentrant model
 16402 ;;
 16403                           
 16404                           
 16405                           ;psect for function _CC2500_FrequencyCabr
 16406  1E56                     _CC2500_FrequencyCabr:	
 16407                           
 16408                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16412  1E56  3033               	movlw	51
 16413  1E57  3190  2097  319E   	fcall	_CC2500_WriteCommand
 16414                           
 16415                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 16416  1E5A  30E8               	movlw	232
 16417  1E5B  0020               	movlb	0	; select bank0
 16418  1E5C  00A0               	movwf	DelayTime_1us@count
 16419  1E5D  3003               	movlw	3
 16420  1E5E  00A1               	movwf	DelayTime_1us@count+1
 16421  1E5F  3192  220C         	fcall	_DelayTime_1us
 16422  1E61  0008               	return
 16423  1E62                     __end_of_CC2500_FrequencyCabr:	
 16424                           
 16425                           	psect	text117
 16426  120C                     __ptext117:	
 16427 ;; *************** function _DelayTime_1us *****************
 16428 ;; Defined at:
 16429 ;;		line 323 in file "../src/CC2500_B1.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  count           2    0[BANK0 ] int 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  j               2    4[BANK0 ] unsigned int 
 16434 ;;  i               2    2[BANK0 ] unsigned int 
 16435 ;; Return value:  Size  Location     Type
 16436 ;;		None               void
 16437 ;; Registers used:
 16438 ;;		wreg, status,2
 16439 ;; Tracked objects:
 16440 ;;		On entry : 0/0
 16441 ;;		On exit  : 0/0
 16442 ;;		Unchanged: 0/0
 16443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;Total ram usage:        6 bytes
 16449 ;; Hardware stack levels used:    1
 16450 ;; Hardware stack levels required when called:    5
 16451 ;; This function calls:
 16452 ;;		Nothing
 16453 ;; This function is called by:
 16454 ;;		_CC2500_PowerRST
 16455 ;;		_CC2500_FrequencyCabr
 16456 ;; This function uses a non-reentrant model
 16457 ;;
 16458                           
 16459                           
 16460                           ;psect for function _DelayTime_1us
 16461  120C                     _DelayTime_1us:	
 16462                           
 16463                           ;CC2500_B1.c: 324: unsigned int i, j;
 16464                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 16465                           
 16466                           ;incstack = 0
 16467                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16468  120C  3001               	movlw	1
 16469  120D  0020               	movlb	0	; select bank0
 16470  120E  00A2               	movwf	DelayTime_1us@i
 16471  120F  3000               	movlw	0
 16472  1210  00A3               	movwf	DelayTime_1us@i+1
 16473  1211                     l366:	
 16474  1211  0821               	movf	DelayTime_1us@count+1,w
 16475  1212  0223               	subwf	DelayTime_1us@i+1,w
 16476  1213  1D03               	skipz
 16477  1214  2A17               	goto	u8235
 16478  1215  0820               	movf	DelayTime_1us@count,w
 16479  1216  0222               	subwf	DelayTime_1us@i,w
 16480  1217                     u8235:	
 16481  1217  1803               	btfsc	3,0
 16482  1218  0008               	return
 16483                           
 16484                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 16485  1219  01A4               	clrf	DelayTime_1us@j
 16486  121A  01A5               	clrf	DelayTime_1us@j+1
 16487  121B  3000               	movlw	0
 16488  121C  0225               	subwf	DelayTime_1us@j+1,w
 16489  121D  3002               	movlw	2
 16490  121E  1903               	skipnz
 16491  121F  0224               	subwf	DelayTime_1us@j,w
 16492  1220  1803               	btfsc	3,0
 16493  1221  2A2D               	goto	l8395
 16494  1222                     l8393:	
 16495  1222  3001               	movlw	1
 16496  1223  07A4               	addwf	DelayTime_1us@j,f
 16497  1224  3000               	movlw	0
 16498  1225  3DA5               	addwfc	DelayTime_1us@j+1,f
 16499  1226  3000               	movlw	0
 16500  1227  0225               	subwf	DelayTime_1us@j+1,w
 16501  1228  3002               	movlw	2
 16502  1229  1903               	skipnz
 16503  122A  0224               	subwf	DelayTime_1us@j,w
 16504  122B  1C03               	skipc
 16505  122C  2A22               	goto	l8393
 16506  122D                     l8395:	
 16507  122D  3001               	movlw	1
 16508  122E  07A2               	addwf	DelayTime_1us@i,f
 16509  122F  3000               	movlw	0
 16510  1230  3DA3               	addwfc	DelayTime_1us@i+1,f
 16511  1231  2A11               	goto	l366
 16512  1232                     __end_of_DelayTime_1us:	
 16513                           
 16514                           	psect	text118
 16515  1D74                     __ptext118:	
 16516 ;; *************** function _CC2500_ClearTXFIFO *****************
 16517 ;; Defined at:
 16518 ;;		line 190 in file "../src/CC2500_B1.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;		None
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;		None
 16523 ;; Return value:  Size  Location     Type
 16524 ;;		None               void
 16525 ;; Registers used:
 16526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;Total ram usage:        0 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    7
 16539 ;; This function calls:
 16540 ;;		_CC2500_WriteCommand
 16541 ;; This function is called by:
 16542 ;;		_CC2500_PowerOnInitial
 16543 ;; This function uses a non-reentrant model
 16544 ;;
 16545                           
 16546                           
 16547                           ;psect for function _CC2500_ClearTXFIFO
 16548  1D74                     _CC2500_ClearTXFIFO:	
 16549                           
 16550                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 16551                           
 16552                           ;incstack = 0
 16553                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16554  1D74  303B               	movlw	59
 16555  1D75  3190  2097         	fcall	_CC2500_WriteCommand
 16556  1D77  0008               	return
 16557  1D78                     __end_of_CC2500_ClearTXFIFO:	
 16558                           
 16559                           	psect	text119
 16560  1D70                     __ptext119:	
 16561 ;; *************** function _CC2500_ClearRXFIFO *****************
 16562 ;; Defined at:
 16563 ;;		line 197 in file "../src/CC2500_B1.c"
 16564 ;; Parameters:    Size  Location     Type
 16565 ;;		None
 16566 ;; Auto vars:     Size  Location     Type
 16567 ;;		None
 16568 ;; Return value:  Size  Location     Type
 16569 ;;		None               void
 16570 ;; Registers used:
 16571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;Total ram usage:        0 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; Hardware stack levels required when called:    7
 16584 ;; This function calls:
 16585 ;;		_CC2500_WriteCommand
 16586 ;; This function is called by:
 16587 ;;		_CC2500_PowerOnInitial
 16588 ;; This function uses a non-reentrant model
 16589 ;;
 16590                           
 16591                           
 16592                           ;psect for function _CC2500_ClearRXFIFO
 16593  1D70                     _CC2500_ClearRXFIFO:	
 16594                           
 16595                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 16596                           
 16597                           ;incstack = 0
 16598                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16599  1D70  303A               	movlw	58
 16600  1D71  3190  2097         	fcall	_CC2500_WriteCommand
 16601  1D73  0008               	return
 16602  1D74                     __end_of_CC2500_ClearRXFIFO:	
 16603                           
 16604                           	psect	text120
 16605  1097                     __ptext120:	
 16606 ;; *************** function _CC2500_WriteCommand *****************
 16607 ;; Defined at:
 16608 ;;		line 288 in file "../src/CC2500_B1.c"
 16609 ;; Parameters:    Size  Location     Type
 16610 ;;  command         1    wreg     unsigned char 
 16611 ;; Auto vars:     Size  Location     Type
 16612 ;;  command         1    3[BANK0 ] unsigned char 
 16613 ;; Return value:  Size  Location     Type
 16614 ;;		None               void
 16615 ;; Registers used:
 16616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16617 ;; Tracked objects:
 16618 ;;		On entry : 0/0
 16619 ;;		On exit  : 0/0
 16620 ;;		Unchanged: 0/0
 16621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;Total ram usage:        2 bytes
 16627 ;; Hardware stack levels used:    1
 16628 ;; Hardware stack levels required when called:    6
 16629 ;; This function calls:
 16630 ;;		_CC2500_WriteByte
 16631 ;;		_Timeout_Counter
 16632 ;;		_set_TimeoutCleared
 16633 ;; This function is called by:
 16634 ;;		_CC2500_TxData
 16635 ;;		_CC2500_ClearTXFIFO
 16636 ;;		_CC2500_ClearRXFIFO
 16637 ;;		_CC2500_FrequencyCabr
 16638 ;;		_CC2500_SIDLEMode
 16639 ;;		_setRF_Main
 16640 ;;		_RF_RxDisable
 16641 ;; This function uses a non-reentrant model
 16642 ;;
 16643                           
 16644                           
 16645                           ;psect for function _CC2500_WriteCommand
 16646  1097                     _CC2500_WriteCommand:	
 16647                           
 16648                           ;incstack = 0
 16649                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16650                           ;CC2500_WriteCommand@command stored from wreg
 16651  1097  0020               	movlb	0	; select bank0
 16652  1098  00A3               	movwf	CC2500_WriteCommand@command
 16653                           
 16654                           ;CC2500_B1.c: 289: RC4 = 0;
 16655  1099  120E               	bcf	14,4	;volatile
 16656                           
 16657                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 16658  109A  0823               	movf	CC2500_WriteCommand@command,w
 16659  109B  00A2               	movwf	??_CC2500_WriteCommand
 16660  109C  0822               	movf	??_CC2500_WriteCommand,w
 16661  109D  00FA               	movwf	_SPI0Buffer
 16662                           
 16663                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 16664  109E  28A2               	goto	l8147
 16665  109F                     l8145:	
 16666                           
 16667                           ;CC2500_B1.c: 293: Timeout_Counter();
 16668  109F  319F  27C1  3190   	fcall	_Timeout_Counter
 16669  10A2                     l8147:	
 16670  10A2  0020               	movlb	0	; select bank0
 16671  10A3  1D0E               	btfss	14,2	;volatile
 16672  10A4  28A8               	goto	l8151
 16673  10A5  0021               	movlb	1	; select bank1
 16674  10A6  1D2F               	btfss	(_myMain^(0+128)+15),2
 16675  10A7  289F               	goto	l8145
 16676  10A8                     l8151:	
 16677                           
 16678                           ;CC2500_B1.c: 294: };
 16679                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 16680  10A8  319D  258C  3190   	fcall	_set_TimeoutCleared
 16681                           
 16682                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 16683  10AB  319F  27AD         	fcall	_CC2500_WriteByte
 16684                           
 16685                           ;CC2500_B1.c: 298: RC4 = 1;
 16686  10AD  0020               	movlb	0	; select bank0
 16687  10AE  160E               	bsf	14,4	;volatile
 16688  10AF  0008               	return
 16689  10B0                     __end_of_CC2500_WriteCommand:	
 16690                           
 16691                           	psect	text121
 16692  1D8C                     __ptext121:	
 16693 ;; *************** function _set_TimeoutCleared *****************
 16694 ;; Defined at:
 16695 ;;		line 217 in file "../src/main_B1.c"
 16696 ;; Parameters:    Size  Location     Type
 16697 ;;		None
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;		None
 16700 ;; Return value:  Size  Location     Type
 16701 ;;		None               void
 16702 ;; Registers used:
 16703 ;;		status,2
 16704 ;; Tracked objects:
 16705 ;;		On entry : 0/0
 16706 ;;		On exit  : 0/0
 16707 ;;		Unchanged: 0/0
 16708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;Total ram usage:        0 bytes
 16714 ;; Hardware stack levels used:    1
 16715 ;; Hardware stack levels required when called:    5
 16716 ;; This function calls:
 16717 ;;		Nothing
 16718 ;; This function is called by:
 16719 ;;		_CC2500_TxData
 16720 ;;		_CC2500_RxData
 16721 ;;		_CC2500_PowerRST
 16722 ;;		_CC2500_WriteREG
 16723 ;;		_CC2500_WriteCommand
 16724 ;;		_CC2500_ReadStatus
 16725 ;;		_getAD
 16726 ;;		_TouchPower
 16727 ;;		_CC2500_ReadREG
 16728 ;; This function uses a non-reentrant model
 16729 ;;
 16730                           
 16731                           
 16732                           ;psect for function _set_TimeoutCleared
 16733  1D8C                     _set_TimeoutCleared:	
 16734                           
 16735                           ;main_B1.c: 218: myMain.Timeout = 0;
 16736                           
 16737                           ;incstack = 0
 16738                           ; Regs used in _set_TimeoutCleared: [status,2]
 16739  1D8C  0021               	movlb	1	; select bank1
 16740  1D8D  112F               	bcf	(_myMain^(0+128)+15),2
 16741                           
 16742                           ;main_B1.c: 219: myMain.Timeout_Counter = 0;
 16743  1D8E  01B0               	clrf	(_myMain^(0+128)+16)
 16744  1D8F  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16745  1D90  0008               	return
 16746  1D91                     __end_of_set_TimeoutCleared:	
 16747                           
 16748                           	psect	text122
 16749  1FC1                     __ptext122:	
 16750 ;; *************** function _Timeout_Counter *****************
 16751 ;; Defined at:
 16752 ;;		line 208 in file "../src/main_B1.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;		None
 16755 ;; Auto vars:     Size  Location     Type
 16756 ;;		None
 16757 ;; Return value:  Size  Location     Type
 16758 ;;		None               void
 16759 ;; Registers used:
 16760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16761 ;; Tracked objects:
 16762 ;;		On entry : 0/0
 16763 ;;		On exit  : 0/0
 16764 ;;		Unchanged: 0/0
 16765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;Total ram usage:        0 bytes
 16771 ;; Hardware stack levels used:    1
 16772 ;; Hardware stack levels required when called:    5
 16773 ;; This function calls:
 16774 ;;		Nothing
 16775 ;; This function is called by:
 16776 ;;		_CC2500_TxData
 16777 ;;		_CC2500_RxData
 16778 ;;		_CC2500_PowerRST
 16779 ;;		_CC2500_WriteREG
 16780 ;;		_CC2500_WriteCommand
 16781 ;;		_CC2500_ReadStatus
 16782 ;;		_getAD
 16783 ;;		_TouchPower
 16784 ;;		_CC2500_ReadREG
 16785 ;; This function uses a non-reentrant model
 16786 ;;
 16787                           
 16788                           
 16789                           ;psect for function _Timeout_Counter
 16790  1FC1                     _Timeout_Counter:	
 16791                           
 16792                           ;main_B1.c: 209: myMain.Timeout_Counter++;
 16793                           
 16794                           ;incstack = 0
 16795                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16796  1FC1  3001               	movlw	1
 16797  1FC2  0021               	movlb	1	; select bank1
 16798  1FC3  07B0               	addwf	(_myMain^(0+128)+16),f
 16799  1FC4  3000               	movlw	0
 16800  1FC5  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16801                           
 16802                           ;main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 16803  1FC6  3010               	movlw	16
 16804  1FC7  3EA0               	addlw	_myMain& (0+255)
 16805  1FC8  0086               	movwf	6
 16806  1FC9  0187               	clrf	7
 16807  1FCA  3F40               	moviw [0]fsr1
 16808  1FCB  3A10               	xorlw	16
 16809  1FCC  1D03               	skipz
 16810  1FCD  2FD0               	goto	u7775
 16811  1FCE  3F41               	moviw [1]fsr1
 16812  1FCF  3A27               	xorlw	39
 16813  1FD0                     u7775:	
 16814  1FD0  1D03               	skipz
 16815  1FD1  0008               	return
 16816                           
 16817                           ;main_B1.c: 211: myMain.Timeout_Counter = 0;
 16818  1FD2  01B0               	clrf	(_myMain^(0+128)+16)
 16819  1FD3  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16820                           
 16821                           ;main_B1.c: 212: myMain.Timeout = 1;
 16822  1FD4  152F               	bsf	(_myMain^(0+128)+15),2
 16823  1FD5  0008               	return
 16824  1FD6                     __end_of_Timeout_Counter:	
 16825                           
 16826                           	psect	text123
 16827  1FAD                     __ptext123:	
 16828 ;; *************** function _CC2500_WriteByte *****************
 16829 ;; Defined at:
 16830 ;;		line 222 in file "../src/CC2500_B1.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;		None
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16835 ;; Return value:  Size  Location     Type
 16836 ;;		None               void
 16837 ;; Registers used:
 16838 ;;		wreg, status,2, status,0
 16839 ;; Tracked objects:
 16840 ;;		On entry : 0/0
 16841 ;;		On exit  : 0/0
 16842 ;;		Unchanged: 0/0
 16843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16845 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;Total ram usage:        2 bytes
 16849 ;; Hardware stack levels used:    1
 16850 ;; Hardware stack levels required when called:    5
 16851 ;; This function calls:
 16852 ;;		Nothing
 16853 ;; This function is called by:
 16854 ;;		_CC2500_TxData
 16855 ;;		_CC2500_RxData
 16856 ;;		_CC2500_PowerRST
 16857 ;;		_CC2500_WriteREG
 16858 ;;		_CC2500_WriteCommand
 16859 ;;		_CC2500_ReadStatus
 16860 ;;		_CC2500_ReadREG
 16861 ;; This function uses a non-reentrant model
 16862 ;;
 16863                           
 16864                           
 16865                           ;psect for function _CC2500_WriteByte
 16866  1FAD                     _CC2500_WriteByte:	
 16867                           
 16868                           ;CC2500_B1.c: 223: unsigned char loop_a;
 16869                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 16870                           
 16871                           ;incstack = 0
 16872                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16873  1FAD  0020               	movlb	0	; select bank0
 16874  1FAE  01A1               	clrf	CC2500_WriteByte@loop_a
 16875  1FAF                     L7:	
 16876  1FAF  3008               	movlw	8
 16877  1FB0  0221               	subwf	CC2500_WriteByte@loop_a,w
 16878  1FB1  1803               	btfsc	3,0
 16879  1FB2  0008               	return
 16880                           
 16881                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 16882  1FB3  1FFA               	btfss	_SPI0Buffer,7
 16883  1FB4  2FB7               	goto	l322
 16884                           
 16885                           ;CC2500_B1.c: 226: RC0 = 1;
 16886  1FB5  140E               	bsf	14,0	;volatile
 16887  1FB6  2FB8               	goto	l323
 16888  1FB7                     l322:	
 16889                           
 16890                           ;CC2500_B1.c: 227: else
 16891                           ;CC2500_B1.c: 228: RC0 = 0;
 16892  1FB7  100E               	bcf	14,0	;volatile
 16893  1FB8                     l323:	
 16894                           
 16895                           ;CC2500_B1.c: 229: RC1 = 1;
 16896  1FB8  148E               	bsf	14,1	;volatile
 16897                           
 16898                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 16899  1FB9  1003               	clrc
 16900  1FBA  0DFA               	rlf	_SPI0Buffer,f
 16901                           
 16902                           ;CC2500_B1.c: 231: RC1 = 0;
 16903  1FBB  108E               	bcf	14,1	;volatile
 16904  1FBC  3001               	movlw	1
 16905  1FBD  00A0               	movwf	??_CC2500_WriteByte
 16906  1FBE  0820               	movf	??_CC2500_WriteByte,w
 16907  1FBF  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16908  1FC0  2FAF               	goto	L7
 16909  1FC1                     __end_of_CC2500_WriteByte:	
 16910                           
 16911                           	psect	text124
 16912  16BC                     __ptext124:	
 16913 ;; *************** function _Buzzer_Main *****************
 16914 ;; Defined at:
 16915 ;;		line 46 in file "../src/Buzzer_B1.c"
 16916 ;; Parameters:    Size  Location     Type
 16917 ;;		None
 16918 ;; Auto vars:     Size  Location     Type
 16919 ;;		None
 16920 ;; Return value:  Size  Location     Type
 16921 ;;		None               void
 16922 ;; Registers used:
 16923 ;;		wreg, status,2, status,0
 16924 ;; Tracked objects:
 16925 ;;		On entry : 0/0
 16926 ;;		On exit  : 0/0
 16927 ;;		Unchanged: 0/0
 16928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;Total ram usage:        1 bytes
 16934 ;; Hardware stack levels used:    1
 16935 ;; Hardware stack levels required when called:    5
 16936 ;; This function calls:
 16937 ;;		Nothing
 16938 ;; This function is called by:
 16939 ;;		_main
 16940 ;; This function uses a non-reentrant model
 16941 ;;
 16942                           
 16943                           
 16944                           ;psect for function _Buzzer_Main
 16945  16BC                     _Buzzer_Main:	
 16946                           
 16947                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16948                           
 16949                           ;incstack = 0
 16950                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16951  16BC  0021               	movlb	1	; select bank1
 16952  16BD  1CB2               	btfss	_Buz1^(0+128),1
 16953  16BE  0008               	return
 16954                           
 16955                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16956  16BF  3001               	movlw	1
 16957  16C0  07B3               	addwf	(_Buz1^(0+128)+1),f
 16958  16C1  3000               	movlw	0
 16959  16C2  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16960                           
 16961                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16962  16C3  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16963  16C4  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16964  16C5  1D03               	skipz
 16965  16C6  2EC9               	goto	u9555
 16966  16C7  0838               	movf	(_Buz1^(0+128)+6),w
 16967  16C8  0233               	subwf	(_Buz1^(0+128)+1),w
 16968  16C9                     u9555:	
 16969  16C9  1C03               	skipc
 16970  16CA  0008               	return
 16971                           
 16972                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16973  16CB  01B3               	clrf	(_Buz1^(0+128)+1)
 16974  16CC  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16975                           
 16976                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16977  16CD  12B2               	bcf	_Buz1^(0+128),5
 16978  16CE  0020               	movlb	0	; select bank0
 16979  16CF  1D8D               	btfss	13,3	;volatile
 16980  16D0  2ED3               	goto	l9251
 16981  16D1  0021               	movlb	1	; select bank1
 16982  16D2  16B2               	bsf	_Buz1^(0+128),5
 16983  16D3                     l9251:	
 16984                           
 16985                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16986  16D3  0021               	movlb	1	; select bank1
 16987  16D4  1AB2               	btfsc	_Buz1^(0+128),5
 16988  16D5  2EFF               	goto	l102
 16989                           
 16990                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16991  16D6  08B5               	movf	(_Buz1^(0+128)+3),f
 16992  16D7  1D03               	skipz
 16993  16D8  2EFB               	goto	l103
 16994                           
 16995                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16996  16D9  1DB2               	btfss	_Buz1^(0+128),3
 16997  16DA  2EE9               	goto	l104
 16998                           
 16999                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17000  16DB  11B2               	bcf	_Buz1^(0+128),3
 17001                           
 17002                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17003  16DC  0836               	movf	(_Buz1^(0+128)+4),w
 17004  16DD  0020               	movlb	0	; select bank0
 17005  16DE  00A0               	movwf	??_Buzzer_Main
 17006  16DF  0820               	movf	??_Buzzer_Main,w
 17007  16E0  0021               	movlb	1	; select bank1
 17008  16E1  00B5               	movwf	(_Buz1^(0+128)+3)
 17009                           
 17010                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17011  16E2  083B               	movf	((_Buz1+1)^(0+128)+8),w
 17012  16E3  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17013  16E4  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17014  16E5  083A               	movf	(_Buz1^(0+128)+8),w
 17015  16E6  01B8               	clrf	(_Buz1^(0+128)+6)
 17016  16E7  07B8               	addwf	(_Buz1^(0+128)+6),f
 17017                           
 17018                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17019  16E8  0008               	return
 17020  16E9                     l104:	
 17021  16E9  1E32               	btfss	_Buz1^(0+128),4
 17022  16EA  2EF9               	goto	l106
 17023                           
 17024                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17025  16EB  1232               	bcf	_Buz1^(0+128),4
 17026                           
 17027                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17028  16EC  0837               	movf	(_Buz1^(0+128)+5),w
 17029  16ED  0020               	movlb	0	; select bank0
 17030  16EE  00A0               	movwf	??_Buzzer_Main
 17031  16EF  0820               	movf	??_Buzzer_Main,w
 17032  16F0  0021               	movlb	1	; select bank1
 17033  16F1  00B5               	movwf	(_Buz1^(0+128)+3)
 17034                           
 17035                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17036  16F2  083D               	movf	((_Buz1+1)^(0+128)+10),w
 17037  16F3  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17038  16F4  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17039  16F5  083C               	movf	(_Buz1^(0+128)+10),w
 17040  16F6  01B8               	clrf	(_Buz1^(0+128)+6)
 17041  16F7  07B8               	addwf	(_Buz1^(0+128)+6),f
 17042                           
 17043                           ;Buzzer_B1.c: 62: } else {
 17044  16F8  0008               	return
 17045  16F9                     l106:	
 17046                           
 17047                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17048  16F9  10B2               	bcf	_Buz1^(0+128),1
 17049                           
 17050                           ;Buzzer_B1.c: 64: }
 17051                           ;Buzzer_B1.c: 65: } else {
 17052  16FA  0008               	return
 17053  16FB                     l103:	
 17054                           
 17055                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17056  16FB  16B2               	bsf	_Buz1^(0+128),5
 17057                           
 17058                           ;Buzzer_B1.c: 68: RB3 = 1;
 17059  16FC  0020               	movlb	0	; select bank0
 17060  16FD  158D               	bsf	13,3	;volatile
 17061                           
 17062                           ;Buzzer_B1.c: 69: }
 17063                           ;Buzzer_B1.c: 70: } else {
 17064  16FE  0008               	return
 17065  16FF                     l102:	
 17066                           
 17067                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17068  16FF  12B2               	bcf	_Buz1^(0+128),5
 17069                           
 17070                           ;Buzzer_B1.c: 73: RB3 = 0;
 17071  1700  0020               	movlb	0	; select bank0
 17072  1701  118D               	bcf	13,3	;volatile
 17073                           
 17074                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17075  1702  3001               	movlw	1
 17076  1703  0021               	movlb	1	; select bank1
 17077  1704  02B5               	subwf	(_Buz1^(0+128)+3),f
 17078  1705  0008               	return
 17079  1706                     __end_of_Buzzer_Main:	
 17080                           
 17081                           	psect	text125
 17082  1D54                     __ptext125:	
 17083 ;; *************** function _Buzzer_Initialization *****************
 17084 ;; Defined at:
 17085 ;;		line 11 in file "../src/Buzzer_B1.c"
 17086 ;; Parameters:    Size  Location     Type
 17087 ;;		None
 17088 ;; Auto vars:     Size  Location     Type
 17089 ;;		None
 17090 ;; Return value:  Size  Location     Type
 17091 ;;		None               void
 17092 ;; Registers used:
 17093 ;;		None
 17094 ;; Tracked objects:
 17095 ;;		On entry : 0/0
 17096 ;;		On exit  : 0/0
 17097 ;;		Unchanged: 0/0
 17098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17103 ;;Total ram usage:        0 bytes
 17104 ;; Hardware stack levels used:    1
 17105 ;; Hardware stack levels required when called:    5
 17106 ;; This function calls:
 17107 ;;		Nothing
 17108 ;; This function is called by:
 17109 ;;		_main
 17110 ;; This function uses a non-reentrant model
 17111 ;;
 17112                           
 17113                           
 17114                           ;psect for function _Buzzer_Initialization
 17115  1D54                     _Buzzer_Initialization:	
 17116                           
 17117                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17118                           
 17119                           ;incstack = 0
 17120                           ; Regs used in _Buzzer_Initialization: []
 17121  1D54  0021               	movlb	1	; select bank1
 17122  1D55  1432               	bsf	_Buz1^(0+128),0
 17123  1D56  0008               	return
 17124  1D57                     __end_of_Buzzer_Initialization:	
 17125                           
 17126                           	psect	intentry
 17127  0004                     __pintentry:	
 17128 ;; *************** function _ISR *****************
 17129 ;; Defined at:
 17130 ;;		line 107 in file "../src/MCU_B1.c"
 17131 ;; Parameters:    Size  Location     Type
 17132 ;;		None
 17133 ;; Auto vars:     Size  Location     Type
 17134 ;;		None
 17135 ;; Return value:  Size  Location     Type
 17136 ;;		None               void
 17137 ;; Registers used:
 17138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17139 ;; Tracked objects:
 17140 ;;		On entry : 0/0
 17141 ;;		On exit  : 0/0
 17142 ;;		Unchanged: 0/0
 17143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;Total ram usage:        1 bytes
 17149 ;; Hardware stack levels used:    1
 17150 ;; Hardware stack levels required when called:    4
 17151 ;; This function calls:
 17152 ;;		_IOC_ISR
 17153 ;;		_TMR0_ISR
 17154 ;; This function is called by:
 17155 ;;		Interrupt level 1
 17156 ;; This function uses a non-reentrant model
 17157 ;;
 17158                           
 17159  0004                     _ISR:	
 17160                           
 17161                           ;incstack = 0
 17162                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17163  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17164  0005  3180               	pagesel	$
 17165  0006  0020               	movlb	0	; select bank0
 17166  0007  087F               	movf	127,w
 17167  0008  00F5               	movwf	??_ISR
 17168                           
 17169                           ;MCU_B1.c: 109: IOC_ISR();
 17170  0009  319E  2686  3180   	fcall	_IOC_ISR
 17171                           
 17172                           ;MCU_B1.c: 111: TMR0_ISR();
 17173  000C  3191  21C6         	fcall	_TMR0_ISR
 17174  000E  0875               	movf	??_ISR,w
 17175  000F  0020               	movlb	0	; select bank0
 17176  0010  00FF               	movwf	127
 17177  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17178  0012  0009               	retfie
 17179  0013                     __end_of_ISR:	
 17180                           
 17181                           	psect	text127
 17182  11C6                     __ptext127:	
 17183 ;; *************** function _TMR0_ISR *****************
 17184 ;; Defined at:
 17185 ;;		line 135 in file "../src/MCU_B1.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;		None
 17188 ;; Auto vars:     Size  Location     Type
 17189 ;;		None
 17190 ;; Return value:  Size  Location     Type
 17191 ;;		None               void
 17192 ;; Registers used:
 17193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17194 ;; Tracked objects:
 17195 ;;		On entry : 0/0
 17196 ;;		On exit  : 0/0
 17197 ;;		Unchanged: 0/0
 17198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;Total ram usage:        0 bytes
 17204 ;; Hardware stack levels used:    1
 17205 ;; Hardware stack levels required when called:    2
 17206 ;; This function calls:
 17207 ;;		_setDimmerLights_IntrControl
 17208 ;; This function is called by:
 17209 ;;		_ISR
 17210 ;; This function uses a non-reentrant model
 17211 ;;
 17212                           
 17213                           
 17214                           ;psect for function _TMR0_ISR
 17215  11C6                     _TMR0_ISR:	
 17216                           
 17217                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17218                           
 17219                           ;incstack = 0
 17220                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17221  11C6  1E8B               	btfss	11,5	;volatile
 17222  11C7  0008               	return
 17223  11C8  1D0B               	btfss	11,2	;volatile
 17224  11C9  0008               	return
 17225                           
 17226                           ;MCU_B1.c: 138: TMR0 = (256-190);
 17227  11CA  3042               	movlw	66
 17228  11CB  0020               	movlb	0	; select bank0
 17229  11CC  0095               	movwf	21	;volatile
 17230                           
 17231                           ;MCU_B1.c: 139: TMR0IF = 0;
 17232  11CD  110B               	bcf	11,2	;volatile
 17233                           
 17234                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 17235  11CE  3001               	movlw	1
 17236  11CF  3180  2046  3191   	fcall	_setDimmerLights_IntrControl
 17237                           
 17238                           ;MCU_B1.c: 160: Timer0.Count++;
 17239  11D2  3001               	movlw	1
 17240  11D3  0022               	movlb	2	; select bank2
 17241  11D4  07B6               	addwf	(_Timer0^(0+256)+1),f
 17242  11D5  3000               	movlw	0
 17243  11D6  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 17244                           
 17245                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 17246  11D7  3001               	movlw	1
 17247  11D8  3E35               	addlw	_Timer0& (0+255)
 17248  11D9  0086               	movwf	6
 17249  11DA  3001               	movlw	1	; select bank2/3
 17250  11DB  0087               	movwf	7
 17251  11DC  3F40               	moviw [0]fsr1
 17252  11DD  3A64               	xorlw	100
 17253  11DE  1D03               	skipz
 17254  11DF  29E2               	goto	u696_25
 17255  11E0  3F41               	moviw [1]fsr1
 17256  11E1  3A00               	xorlw	0
 17257  11E2                     u696_25:	
 17258  11E2  1D03               	skipz
 17259  11E3  0008               	return
 17260                           
 17261                           ;MCU_B1.c: 162: Timer0.Count = 0;
 17262  11E4  01B6               	clrf	(_Timer0^(0+256)+1)
 17263  11E5  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 17264                           
 17265                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 17266  11E6  0021               	movlb	1	; select bank1
 17267  11E7  14A0               	bsf	_myMain^(0+128),1
 17268  11E8  0008               	return
 17269  11E9                     __end_of_TMR0_ISR:	
 17270                           
 17271                           	psect	text128
 17272  0046                     __ptext128:	
 17273 ;; *************** function _setDimmerLights_IntrControl *****************
 17274 ;; Defined at:
 17275 ;;		line 94 in file "../src/Dimmer_B1.c"
 17276 ;; Parameters:    Size  Location     Type
 17277 ;;  lights          1    wreg     unsigned char 
 17278 ;; Auto vars:     Size  Location     Type
 17279 ;;  lights          1    4[COMMON] unsigned char 
 17280 ;; Return value:  Size  Location     Type
 17281 ;;		None               void
 17282 ;; Registers used:
 17283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17284 ;; Tracked objects:
 17285 ;;		On entry : 0/0
 17286 ;;		On exit  : 0/0
 17287 ;;		Unchanged: 0/0
 17288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17293 ;;Total ram usage:        3 bytes
 17294 ;; Hardware stack levels used:    1
 17295 ;; Hardware stack levels required when called:    1
 17296 ;; This function calls:
 17297 ;;		_DimmerIntrPointSelect
 17298 ;; This function is called by:
 17299 ;;		_TMR0_ISR
 17300 ;; This function uses a non-reentrant model
 17301 ;;
 17302                           
 17303                           
 17304                           ;psect for function _setDimmerLights_IntrControl
 17305  0046                     _setDimmerLights_IntrControl:	
 17306                           
 17307                           ;incstack = 0
 17308                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17309                           ;setDimmerLights_IntrControl@lights stored from wreg
 17310  0046  00F4               	movwf	setDimmerLights_IntrControl@lights
 17311                           
 17312                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 17313  0047  0874               	movf	setDimmerLights_IntrControl@lights,w
 17314  0048  319D  25F5  3180   	fcall	_DimmerIntrPointSelect
 17315                           
 17316                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 17317  004B  0877               	movf	_DimmerLightsIntr,w
 17318  004C  0086               	movwf	6
 17319  004D  3001               	movlw	1	; select bank2/3
 17320  004E  0087               	movwf	7
 17321  004F  1C01               	btfss	1,0
 17322  0050  289C               	goto	i1l6697
 17323                           
 17324                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 17325  0051  3001               	movlw	1
 17326  0052  00F2               	movwf	??_setDimmerLights_IntrControl
 17327  0053  0877               	movf	_DimmerLightsIntr,w
 17328  0054  3E03               	addlw	3
 17329  0055  0086               	movwf	6
 17330  0056  3001               	movlw	1	; select bank2/3
 17331  0057  0087               	movwf	7
 17332  0058  0872               	movf	??_setDimmerLights_IntrControl,w
 17333  0059  0781               	addwf	1,f
 17334                           
 17335                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 17336  005A  0876               	movf	_Dimmer,w
 17337  005B  3E02               	addlw	2
 17338  005C  0086               	movwf	6
 17339  005D  3001               	movlw	1	; select bank2/3
 17340  005E  0087               	movwf	7
 17341  005F  0877               	movf	_DimmerLightsIntr,w
 17342  0060  3E04               	addlw	4
 17343  0061  0084               	movwf	4
 17344  0062  3001               	movlw	1	; select bank2/3
 17345  0063  0085               	movwf	5
 17346  0064  0800               	movf	0,w
 17347  0065  0701               	addwf	1,w
 17348  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 17349  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17350  0068  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 17351  0069  0877               	movf	_DimmerLightsIntr,w
 17352  006A  3E03               	addlw	3
 17353  006B  0086               	movwf	6
 17354  006C  3001               	movlw	1	; select bank2/3
 17355  006D  0087               	movwf	7
 17356  006E  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17357  006F  3A80               	xorlw	128
 17358  0070  3C80               	sublw	128
 17359  0071  1D03               	skipz
 17360  0072  2875               	goto	u573_25
 17361  0073  0872               	movf	??_setDimmerLights_IntrControl,w
 17362  0074  0201               	subwf	1,w
 17363  0075                     u573_25:	
 17364  0075  1C03               	skipc
 17365  0076  29A0               	goto	i1l6755
 17366                           
 17367                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 17368  0077  0877               	movf	_DimmerLightsIntr,w
 17369  0078  3E03               	addlw	3
 17370  0079  0086               	movwf	6
 17371  007A  3001               	movlw	1	; select bank2/3
 17372  007B  0087               	movwf	7
 17373  007C  0181               	clrf	1
 17374                           
 17375                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 17376  007D  0877               	movf	_DimmerLightsIntr,w
 17377  007E  0086               	movwf	6
 17378  007F  3001               	movlw	1	; select bank2/3
 17379  0080  0087               	movwf	7
 17380  0081  1001               	bcf	1,0
 17381                           
 17382                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 17383  0082  0877               	movf	_DimmerLightsIntr,w
 17384  0083  0086               	movwf	6
 17385  0084  3001               	movlw	1	; select bank2/3
 17386  0085  0087               	movwf	7
 17387  0086  1F01               	btfss	1,6
 17388  0087  29A0               	goto	i1l6755
 17389                           
 17390                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 17391  0088  0877               	movf	_DimmerLightsIntr,w
 17392  0089  3E08               	addlw	8
 17393  008A  0086               	movwf	6
 17394  008B  3001               	movlw	1	; select bank2/3
 17395  008C  0087               	movwf	7
 17396  008D  1401               	bsf	1,0
 17397                           
 17398                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 17399  008E  0877               	movf	_DimmerLightsIntr,w
 17400  008F  3E08               	addlw	8
 17401  0090  0086               	movwf	6
 17402  0091  3001               	movlw	1	; select bank2/3
 17403  0092  0087               	movwf	7
 17404  0093  1681               	bsf	1,5
 17405                           
 17406                           ;Dimmer_B1.c: 107: if (lights == 1) {
 17407  0094  0874               	movf	setDimmerLights_IntrControl@lights,w
 17408  0095  3A01               	xorlw	1
 17409  0096  1D03               	skipz
 17410  0097  29A0               	goto	i1l6755
 17411                           
 17412                           ;Dimmer_B1.c: 108: RA7 = 1;
 17413  0098  0020               	movlb	0	; select bank0
 17414  0099  178C               	bsf	12,7	;volatile
 17415                           
 17416                           ;Dimmer_B1.c: 109: RB4=1;
 17417  009A  160D               	bsf	13,4	;volatile
 17418                           
 17419                           ;Dimmer_B1.c: 110: }
 17420                           ;Dimmer_B1.c: 122: }
 17421                           ;Dimmer_B1.c: 123: }
 17422                           ;Dimmer_B1.c: 124: } else {
 17423  009B  29A0               	goto	i1l6755
 17424  009C                     i1l6697:	
 17425                           
 17426                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 17427  009C  0877               	movf	_DimmerLightsIntr,w
 17428  009D  3E08               	addlw	8
 17429  009E  0086               	movwf	6
 17430  009F  3001               	movlw	1	; select bank2/3
 17431  00A0  0087               	movwf	7
 17432  00A1  1C01               	btfss	1,0
 17433  00A2  29A0               	goto	i1l6755
 17434                           
 17435                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 17436  00A3  0877               	movf	_DimmerLightsIntr,w
 17437  00A4  3E08               	addlw	8
 17438  00A5  0086               	movwf	6
 17439  00A6  3001               	movlw	1	; select bank2/3
 17440  00A7  0087               	movwf	7
 17441  00A8  1001               	bcf	1,0
 17442                           
 17443                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 17444  00A9  0877               	movf	_DimmerLightsIntr,w
 17445  00AA  0086               	movwf	6
 17446  00AB  3001               	movlw	1	; select bank2/3
 17447  00AC  0087               	movwf	7
 17448  00AD  1C81               	btfss	1,1
 17449  00AE  29A0               	goto	i1l6755
 17450                           
 17451                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 17452  00AF  3001               	movlw	1
 17453  00B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17454  00B1  0A77               	incf	_DimmerLightsIntr,w
 17455  00B2  0086               	movwf	6
 17456  00B3  3001               	movlw	1	; select bank2/3
 17457  00B4  0087               	movwf	7
 17458  00B5  0872               	movf	??_setDimmerLights_IntrControl,w
 17459  00B6  0781               	addwf	1,f
 17460                           
 17461                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17462  00B7  0A77               	incf	_DimmerLightsIntr,w
 17463  00B8  0086               	movwf	6
 17464  00B9  3001               	movlw	1	; select bank2/3
 17465  00BA  0087               	movwf	7
 17466  00BB  0877               	movf	_DimmerLightsIntr,w
 17467  00BC  3E02               	addlw	2
 17468  00BD  0084               	movwf	4
 17469  00BE  3001               	movlw	1	; select bank2/3
 17470  00BF  0085               	movwf	5
 17471  00C0  0800               	movf	0,w
 17472  00C1  0201               	subwf	1,w
 17473  00C2  1C03               	skipc
 17474  00C3  29A0               	goto	i1l6755
 17475                           
 17476                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 17477  00C4  0A77               	incf	_DimmerLightsIntr,w
 17478  00C5  0086               	movwf	6
 17479  00C6  3001               	movlw	1	; select bank2/3
 17480  00C7  0087               	movwf	7
 17481  00C8  0181               	clrf	1
 17482                           
 17483                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 17484  00C9  0877               	movf	_DimmerLightsIntr,w
 17485  00CA  0086               	movwf	6
 17486  00CB  3001               	movlw	1	; select bank2/3
 17487  00CC  0087               	movwf	7
 17488  00CD  1D81               	btfss	1,3
 17489  00CE  2905               	goto	i1l6723
 17490                           
 17491                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 17492  00CF  0877               	movf	_DimmerLightsIntr,w
 17493  00D0  0086               	movwf	6
 17494  00D1  3001               	movlw	1	; select bank2/3
 17495  00D2  0087               	movwf	7
 17496  00D3  1A01               	btfsc	1,4
 17497  00D4  28EC               	goto	i1l6717
 17498                           
 17499                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17500  00D5  0877               	movf	_DimmerLightsIntr,w
 17501  00D6  3E04               	addlw	4
 17502  00D7  0086               	movwf	6
 17503  00D8  3001               	movlw	1	; select bank2/3
 17504  00D9  0087               	movwf	7
 17505  00DA  3021               	movlw	33
 17506  00DB  0201               	subwf	1,w
 17507  00DC  1C03               	skipc
 17508  00DD  28E6               	goto	i1l6715
 17509                           
 17510                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 17511  00DE  0877               	movf	_DimmerLightsIntr,w
 17512  00DF  3E04               	addlw	4
 17513  00E0  0086               	movwf	6
 17514  00E1  3001               	movlw	1	; select bank2/3
 17515  00E2  0087               	movwf	7
 17516  00E3  3001               	movlw	1
 17517  00E4  0281               	subwf	1,f
 17518                           
 17519                           ;Dimmer_B1.c: 135: } else {
 17520  00E5  29A0               	goto	i1l6755
 17521  00E6                     i1l6715:	
 17522                           
 17523                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 17524  00E6  0877               	movf	_DimmerLightsIntr,w
 17525  00E7  0086               	movwf	6
 17526  00E8  3001               	movlw	1	; select bank2/3
 17527  00E9  0087               	movwf	7
 17528  00EA  1601               	bsf	1,4
 17529                           
 17530                           ;Dimmer_B1.c: 137: }
 17531                           ;Dimmer_B1.c: 138: } else {
 17532  00EB  29A0               	goto	i1l6755
 17533  00EC                     i1l6717:	
 17534                           
 17535                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17536  00EC  0877               	movf	_DimmerLightsIntr,w
 17537  00ED  3E04               	addlw	4
 17538  00EE  0086               	movwf	6
 17539  00EF  3001               	movlw	1	; select bank2/3
 17540  00F0  0087               	movwf	7
 17541  00F1  303C               	movlw	60
 17542  00F2  0201               	subwf	1,w
 17543  00F3  1803               	skipnc
 17544  00F4  28FF               	goto	i1l6721
 17545                           
 17546                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 17547  00F5  3001               	movlw	1
 17548  00F6  00F2               	movwf	??_setDimmerLights_IntrControl
 17549  00F7  0877               	movf	_DimmerLightsIntr,w
 17550  00F8  3E04               	addlw	4
 17551  00F9  0086               	movwf	6
 17552  00FA  3001               	movlw	1	; select bank2/3
 17553  00FB  0087               	movwf	7
 17554  00FC  0872               	movf	??_setDimmerLights_IntrControl,w
 17555  00FD  0781               	addwf	1,f
 17556                           
 17557                           ;Dimmer_B1.c: 141: } else {
 17558  00FE  29A0               	goto	i1l6755
 17559  00FF                     i1l6721:	
 17560                           
 17561                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 17562  00FF  0877               	movf	_DimmerLightsIntr,w
 17563  0100  0086               	movwf	6
 17564  0101  3001               	movlw	1	; select bank2/3
 17565  0102  0087               	movwf	7
 17566  0103  1201               	bcf	1,4
 17567                           
 17568                           ;Dimmer_B1.c: 143: }
 17569                           ;Dimmer_B1.c: 144: }
 17570                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 17571  0104  29A0               	goto	i1l6755
 17572  0105                     i1l6723:	
 17573  0105  0877               	movf	_DimmerLightsIntr,w
 17574  0106  0086               	movwf	6
 17575  0107  3001               	movlw	1	; select bank2/3
 17576  0108  0087               	movwf	7
 17577  0109  1D01               	btfss	1,2
 17578  010A  294C               	goto	i1l6737
 17579                           
 17580                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17581  010B  0877               	movf	_DimmerLightsIntr,w
 17582  010C  3E05               	addlw	5
 17583  010D  0086               	movwf	6
 17584  010E  3001               	movlw	1	; select bank2/3
 17585  010F  0087               	movwf	7
 17586  0110  0877               	movf	_DimmerLightsIntr,w
 17587  0111  3E04               	addlw	4
 17588  0112  0084               	movwf	4
 17589  0113  3001               	movlw	1	; select bank2/3
 17590  0114  0085               	movwf	5
 17591  0115  0800               	movf	0,w
 17592  0116  0201               	subwf	1,w
 17593  0117  1803               	skipnc
 17594  0118  2921               	goto	i1l6729
 17595                           
 17596                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 17597  0119  0877               	movf	_DimmerLightsIntr,w
 17598  011A  3E04               	addlw	4
 17599  011B  0086               	movwf	6
 17600  011C  3001               	movlw	1	; select bank2/3
 17601  011D  0087               	movwf	7
 17602  011E  3001               	movlw	1
 17603  011F  0281               	subwf	1,f
 17604                           
 17605                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17606  0120  2938               	goto	i1l6733
 17607  0121                     i1l6729:	
 17608  0121  0877               	movf	_DimmerLightsIntr,w
 17609  0122  3E04               	addlw	4
 17610  0123  0086               	movwf	6
 17611  0124  3001               	movlw	1	; select bank2/3
 17612  0125  0087               	movwf	7
 17613  0126  0877               	movf	_DimmerLightsIntr,w
 17614  0127  3E05               	addlw	5
 17615  0128  0084               	movwf	4
 17616  0129  3001               	movlw	1	; select bank2/3
 17617  012A  0085               	movwf	5
 17618  012B  0800               	movf	0,w
 17619  012C  0201               	subwf	1,w
 17620  012D  1803               	skipnc
 17621  012E  2938               	goto	i1l6733
 17622                           
 17623                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 17624  012F  3001               	movlw	1
 17625  0130  00F2               	movwf	??_setDimmerLights_IntrControl
 17626  0131  0877               	movf	_DimmerLightsIntr,w
 17627  0132  3E04               	addlw	4
 17628  0133  0086               	movwf	6
 17629  0134  3001               	movlw	1	; select bank2/3
 17630  0135  0087               	movwf	7
 17631  0136  0872               	movf	??_setDimmerLights_IntrControl,w
 17632  0137  0781               	addwf	1,f
 17633  0138                     i1l6733:	
 17634                           
 17635                           ;Dimmer_B1.c: 150: }
 17636                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17637  0138  0877               	movf	_DimmerLightsIntr,w
 17638  0139  3E05               	addlw	5
 17639  013A  0086               	movwf	6
 17640  013B  3001               	movlw	1	; select bank2/3
 17641  013C  0087               	movwf	7
 17642  013D  0877               	movf	_DimmerLightsIntr,w
 17643  013E  3E04               	addlw	4
 17644  013F  0084               	movwf	4
 17645  0140  3001               	movlw	1	; select bank2/3
 17646  0141  0085               	movwf	5
 17647  0142  0800               	movf	0,w
 17648  0143  0601               	xorwf	1,w
 17649  0144  1D03               	skipz
 17650  0145  29A0               	goto	i1l6755
 17651                           
 17652                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 17653  0146  0877               	movf	_DimmerLightsIntr,w
 17654  0147  0086               	movwf	6
 17655  0148  3001               	movlw	1	; select bank2/3
 17656  0149  0087               	movwf	7
 17657  014A  1101               	bcf	1,2
 17658  014B  2967               	goto	i1l6743
 17659  014C                     i1l6737:	
 17660                           ;Dimmer_B1.c: 154: }
 17661                           ;Dimmer_B1.c: 155: } else {
 17662                           
 17663                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 17664                           
 17665                           
 17666                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 17667  014C  0877               	movf	_DimmerLightsIntr,w
 17668  014D  0086               	movwf	6
 17669  014E  3001               	movlw	1	; select bank2/3
 17670  014F  0087               	movwf	7
 17671  0150  1E81               	btfss	1,5
 17672  0151  296D               	goto	i1l6745
 17673                           
 17674                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 17675  0152  0877               	movf	_DimmerLightsIntr,w
 17676  0153  3E04               	addlw	4
 17677  0154  0086               	movwf	6
 17678  0155  3001               	movlw	1	; select bank2/3
 17679  0156  0087               	movwf	7
 17680  0157  3001               	movlw	1
 17681  0158  0281               	subwf	1,f
 17682                           
 17683                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17684  0159  0877               	movf	_DimmerLightsIntr,w
 17685  015A  3E05               	addlw	5
 17686  015B  0086               	movwf	6
 17687  015C  3001               	movlw	1	; select bank2/3
 17688  015D  0087               	movwf	7
 17689  015E  0877               	movf	_DimmerLightsIntr,w
 17690  015F  3E04               	addlw	4
 17691  0160  0084               	movwf	4
 17692  0161  3001               	movlw	1	; select bank2/3
 17693  0162  0085               	movwf	5
 17694  0163  0800               	movf	0,w
 17695  0164  0201               	subwf	1,w
 17696  0165  1C03               	skipc
 17697  0166  29A0               	goto	i1l6755
 17698  0167                     i1l6743:	
 17699                           
 17700                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 17701  0167  0877               	movf	_DimmerLightsIntr,w
 17702  0168  0086               	movwf	6
 17703  0169  3001               	movlw	1	; select bank2/3
 17704  016A  0087               	movwf	7
 17705  016B  1081               	bcf	1,1
 17706                           
 17707                           ;Dimmer_B1.c: 160: }
 17708                           ;Dimmer_B1.c: 161: } else {
 17709  016C  29A0               	goto	i1l6755
 17710  016D                     i1l6745:	
 17711                           
 17712                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 17713  016D  3001               	movlw	1
 17714  016E  00F2               	movwf	??_setDimmerLights_IntrControl
 17715  016F  0877               	movf	_DimmerLightsIntr,w
 17716  0170  3E04               	addlw	4
 17717  0171  0086               	movwf	6
 17718  0172  3001               	movlw	1	; select bank2/3
 17719  0173  0087               	movwf	7
 17720  0174  0872               	movf	??_setDimmerLights_IntrControl,w
 17721  0175  0781               	addwf	1,f
 17722                           
 17723                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17724  0176  0877               	movf	_DimmerLightsIntr,w
 17725  0177  3E04               	addlw	4
 17726  0178  0086               	movwf	6
 17727  0179  3001               	movlw	1	; select bank2/3
 17728  017A  0087               	movwf	7
 17729  017B  0877               	movf	_DimmerLightsIntr,w
 17730  017C  3E06               	addlw	6
 17731  017D  0084               	movwf	4
 17732  017E  3001               	movlw	1	; select bank2/3
 17733  017F  0085               	movwf	5
 17734  0180  0800               	movf	0,w
 17735  0181  0201               	subwf	1,w
 17736  0182  1C03               	skipc
 17737  0183  29A0               	goto	i1l6755
 17738                           
 17739                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 17740  0184  0877               	movf	_DimmerLightsIntr,w
 17741  0185  0086               	movwf	6
 17742  0186  3001               	movlw	1	; select bank2/3
 17743  0187  0087               	movwf	7
 17744  0188  1081               	bcf	1,1
 17745                           
 17746                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 17747  0189  0877               	movf	_DimmerLightsIntr,w
 17748  018A  0086               	movwf	6
 17749  018B  3001               	movlw	1	; select bank2/3
 17750  018C  0087               	movwf	7
 17751  018D  1301               	bcf	1,6
 17752                           
 17753                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 17754  018E  0877               	movf	_DimmerLightsIntr,w
 17755  018F  3E09               	addlw	9
 17756  0190  0086               	movwf	6
 17757  0191  3001               	movlw	1	; select bank2/3
 17758  0192  0087               	movwf	7
 17759  0193  1501               	bsf	1,2
 17760                           
 17761                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 17762  0194  0876               	movf	_Dimmer,w
 17763  0195  0086               	movwf	6
 17764  0196  3001               	movlw	1	; select bank2/3
 17765  0197  0087               	movwf	7
 17766  0198  1401               	bsf	1,0
 17767                           
 17768                           ;Dimmer_B1.c: 169: if (lights == 1) {
 17769  0199  0874               	movf	setDimmerLights_IntrControl@lights,w
 17770  019A  3A01               	xorlw	1
 17771  019B  1D03               	skipz
 17772  019C  29A0               	goto	i1l6755
 17773                           
 17774                           ;Dimmer_B1.c: 170: RA3 = 0;
 17775  019D  0020               	movlb	0	; select bank0
 17776  019E  118C               	bcf	12,3	;volatile
 17777                           
 17778                           ;Dimmer_B1.c: 171: RC7=!1;
 17779  019F  138E               	bcf	14,7	;volatile
 17780  01A0                     i1l6755:	
 17781                           ;Dimmer_B1.c: 172: }
 17782                           ;Dimmer_B1.c: 184: ;;
 17783                           
 17784                           
 17785                           ;Dimmer_B1.c: 185: }
 17786                           ;Dimmer_B1.c: 186: }
 17787                           ;Dimmer_B1.c: 187: }
 17788                           ;Dimmer_B1.c: 188: }
 17789                           ;Dimmer_B1.c: 189: }
 17790                           ;Dimmer_B1.c: 190: }
 17791                           ;Dimmer_B1.c: 191: }
 17792                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 17793  01A0  0877               	movf	_DimmerLightsIntr,w
 17794  01A1  3E08               	addlw	8
 17795  01A2  0086               	movwf	6
 17796  01A3  3001               	movlw	1	; select bank2/3
 17797  01A4  0087               	movwf	7
 17798  01A5  1E81               	btfss	1,5
 17799  01A6  29CC               	goto	i1l6769
 17800                           
 17801                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 17802  01A7  3001               	movlw	1
 17803  01A8  00F2               	movwf	??_setDimmerLights_IntrControl
 17804  01A9  0877               	movf	_DimmerLightsIntr,w
 17805  01AA  3E07               	addlw	7
 17806  01AB  0086               	movwf	6
 17807  01AC  3001               	movlw	1	; select bank2/3
 17808  01AD  0087               	movwf	7
 17809  01AE  0872               	movf	??_setDimmerLights_IntrControl,w
 17810  01AF  0781               	addwf	1,f
 17811                           
 17812                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 17813  01B0  0877               	movf	_DimmerLightsIntr,w
 17814  01B1  3E07               	addlw	7
 17815  01B2  0086               	movwf	6
 17816  01B3  3001               	movlw	1	; select bank2/3
 17817  01B4  0087               	movwf	7
 17818  01B5  3005               	movlw	5
 17819  01B6  0201               	subwf	1,w
 17820  01B7  1C03               	skipc
 17821  01B8  29CC               	goto	i1l6769
 17822                           
 17823                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 17824  01B9  0877               	movf	_DimmerLightsIntr,w
 17825  01BA  3E07               	addlw	7
 17826  01BB  0086               	movwf	6
 17827  01BC  3001               	movlw	1	; select bank2/3
 17828  01BD  0087               	movwf	7
 17829  01BE  0181               	clrf	1
 17830                           
 17831                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 17832  01BF  0877               	movf	_DimmerLightsIntr,w
 17833  01C0  3E08               	addlw	8
 17834  01C1  0086               	movwf	6
 17835  01C2  3001               	movlw	1	; select bank2/3
 17836  01C3  0087               	movwf	7
 17837  01C4  1281               	bcf	1,5
 17838                           
 17839                           ;Dimmer_B1.c: 199: if (lights == 1) {
 17840  01C5  0874               	movf	setDimmerLights_IntrControl@lights,w
 17841  01C6  3A01               	xorlw	1
 17842  01C7  1D03               	skipz
 17843  01C8  29CC               	goto	i1l6769
 17844                           
 17845                           ;Dimmer_B1.c: 200: RA7 = 0;
 17846  01C9  0020               	movlb	0	; select bank0
 17847  01CA  138C               	bcf	12,7	;volatile
 17848                           
 17849                           ;Dimmer_B1.c: 201: RB4=0;
 17850  01CB  120D               	bcf	13,4	;volatile
 17851  01CC                     i1l6769:	
 17852                           
 17853                           ;Dimmer_B1.c: 202: }
 17854                           ;Dimmer_B1.c: 214: }
 17855                           ;Dimmer_B1.c: 215: }
 17856                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 17857  01CC  0877               	movf	_DimmerLightsIntr,w
 17858  01CD  3E09               	addlw	9
 17859  01CE  0086               	movwf	6
 17860  01CF  3001               	movlw	1	; select bank2/3
 17861  01D0  0087               	movwf	7
 17862  01D1  1E81               	btfss	1,5
 17863  01D2  0008               	return
 17864                           
 17865                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 17866  01D3  3001               	movlw	1
 17867  01D4  00F2               	movwf	??_setDimmerLights_IntrControl
 17868  01D5  0877               	movf	_DimmerLightsIntr,w
 17869  01D6  3E0A               	addlw	10
 17870  01D7  0086               	movwf	6
 17871  01D8  3001               	movlw	1	; select bank2/3
 17872  01D9  0087               	movwf	7
 17873  01DA  0872               	movf	??_setDimmerLights_IntrControl,w
 17874  01DB  0781               	addwf	1,f
 17875                           
 17876                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 17877  01DC  0877               	movf	_DimmerLightsIntr,w
 17878  01DD  3E0A               	addlw	10
 17879  01DE  0086               	movwf	6
 17880  01DF  3001               	movlw	1	; select bank2/3
 17881  01E0  0087               	movwf	7
 17882  01E1  0801               	movf	1,w
 17883  01E2  3A46               	xorlw	70
 17884  01E3  1D03               	skipz
 17885  01E4  0008               	return
 17886                           
 17887                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 17888  01E5  0877               	movf	_DimmerLightsIntr,w
 17889  01E6  3E0A               	addlw	10
 17890  01E7  0086               	movwf	6
 17891  01E8  3001               	movlw	1	; select bank2/3
 17892  01E9  0087               	movwf	7
 17893  01EA  0181               	clrf	1
 17894                           
 17895                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 17896  01EB  0877               	movf	_DimmerLightsIntr,w
 17897  01EC  3E09               	addlw	9
 17898  01ED  0086               	movwf	6
 17899  01EE  3001               	movlw	1	; select bank2/3
 17900  01EF  0087               	movwf	7
 17901  01F0  1281               	bcf	1,5
 17902  01F1  0008               	return
 17903  01F2                     __end_of_setDimmerLights_IntrControl:	
 17904                           
 17905                           	psect	text129
 17906  1DF5                     __ptext129:	
 17907 ;; *************** function _DimmerIntrPointSelect *****************
 17908 ;; Defined at:
 17909 ;;		line 72 in file "../src/Dimmer_B1.c"
 17910 ;; Parameters:    Size  Location     Type
 17911 ;;  lights          1    wreg     unsigned char 
 17912 ;; Auto vars:     Size  Location     Type
 17913 ;;  lights          1    1[COMMON] unsigned char 
 17914 ;; Return value:  Size  Location     Type
 17915 ;;		None               void
 17916 ;; Registers used:
 17917 ;;		wreg
 17918 ;; Tracked objects:
 17919 ;;		On entry : 0/0
 17920 ;;		On exit  : 0/0
 17921 ;;		Unchanged: 0/0
 17922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;Total ram usage:        2 bytes
 17928 ;; Hardware stack levels used:    1
 17929 ;; This function calls:
 17930 ;;		Nothing
 17931 ;; This function is called by:
 17932 ;;		_setDimmerLights_IntrControl
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           
 17937                           ;psect for function _DimmerIntrPointSelect
 17938  1DF5                     _DimmerIntrPointSelect:	
 17939                           
 17940                           ;incstack = 0
 17941                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17942                           ;DimmerIntrPointSelect@lights stored from wreg
 17943  1DF5  00F1               	movwf	DimmerIntrPointSelect@lights
 17944                           
 17945                           ;Dimmer_B1.c: 74: if (lights == 1) {
 17946  1DF6  0871               	movf	DimmerIntrPointSelect@lights,w
 17947  1DF7  3A01               	xorlw	1
 17948  1DF8  1D03               	skipz
 17949  1DF9  0008               	return
 17950                           
 17951                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 17952  1DFA  303D               	movlw	_DimmerLights1& (0+255)
 17953  1DFB  00F0               	movwf	??_DimmerIntrPointSelect
 17954  1DFC  0870               	movf	??_DimmerIntrPointSelect,w
 17955  1DFD  00F7               	movwf	_DimmerLightsIntr
 17956  1DFE  0008               	return
 17957  1DFF                     __end_of_DimmerIntrPointSelect:	
 17958                           
 17959                           	psect	text130
 17960  1E86                     __ptext130:	
 17961 ;; *************** function _IOC_ISR *****************
 17962 ;; Defined at:
 17963 ;;		line 298 in file "../src/MCU_B1.c"
 17964 ;; Parameters:    Size  Location     Type
 17965 ;;		None
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;		None
 17968 ;; Return value:  Size  Location     Type
 17969 ;;		None               void
 17970 ;; Registers used:
 17971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17972 ;; Tracked objects:
 17973 ;;		On entry : 0/0
 17974 ;;		On exit  : 0/0
 17975 ;;		Unchanged: 0/0
 17976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17981 ;;Total ram usage:        0 bytes
 17982 ;; Hardware stack levels used:    1
 17983 ;; Hardware stack levels required when called:    3
 17984 ;; This function calls:
 17985 ;;		_setDimmerReClock
 17986 ;; This function is called by:
 17987 ;;		_ISR
 17988 ;; This function uses a non-reentrant model
 17989 ;;
 17990                           
 17991                           
 17992                           ;psect for function _IOC_ISR
 17993  1E86                     _IOC_ISR:	
 17994                           
 17995                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 17996                           
 17997                           ;incstack = 0
 17998                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17999  1E86  1D8B               	btfss	11,3	;volatile
 18000  1E87  0008               	return
 18001  1E88  0027               	movlb	7	; select bank7
 18002  1E89  1D16               	btfss	22,2	;volatile
 18003  1E8A  0008               	return
 18004                           
 18005                           ;MCU_B1.c: 300: IOCBF2 = 0;
 18006  1E8B  1116               	bcf	22,2	;volatile
 18007                           
 18008                           ;MCU_B1.c: 301: IOCIF = 0;
 18009  1E8C  100B               	bcf	11,0	;volatile
 18010                           
 18011                           ;MCU_B1.c: 302: if (myMain.PowerON == 1) {
 18012  1E8D  0021               	movlb	1	; select bank1
 18013  1E8E  1C20               	btfss	_myMain^(0+128),0
 18014  1E8F  0008               	return
 18015                           
 18016                           ;MCU_B1.c: 304: setDimmerReClock();
 18017  1E90  319D  256C         	fcall	_setDimmerReClock
 18018  1E92  0008               	return
 18019  1E93                     __end_of_IOC_ISR:	
 18020                           
 18021                           	psect	text131
 18022  1D6C                     __ptext131:	
 18023 ;; *************** function _setDimmerReClock *****************
 18024 ;; Defined at:
 18025 ;;		line 170 in file "../src/MCU_B1.c"
 18026 ;; Parameters:    Size  Location     Type
 18027 ;;		None
 18028 ;; Auto vars:     Size  Location     Type
 18029 ;;		None
 18030 ;; Return value:  Size  Location     Type
 18031 ;;		None               void
 18032 ;; Registers used:
 18033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18034 ;; Tracked objects:
 18035 ;;		On entry : 0/0
 18036 ;;		On exit  : 0/0
 18037 ;;		Unchanged: 0/0
 18038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18043 ;;Total ram usage:        0 bytes
 18044 ;; Hardware stack levels used:    1
 18045 ;; Hardware stack levels required when called:    2
 18046 ;; This function calls:
 18047 ;;		_setDimmerLights_IntrIOC_GO
 18048 ;; This function is called by:
 18049 ;;		_IOC_ISR
 18050 ;; This function uses a non-reentrant model
 18051 ;;
 18052                           
 18053                           
 18054                           ;psect for function _setDimmerReClock
 18055  1D6C                     _setDimmerReClock:	
 18056                           
 18057                           ;MCU_B1.c: 175: setDimmerLights_IntrIOC_GO(1);
 18058                           
 18059                           ;incstack = 0
 18060                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18061  1D6C  3001               	movlw	1
 18062  1D6D  3193  2305         	fcall	_setDimmerLights_IntrIOC_GO
 18063  1D6F  0008               	return
 18064  1D70                     __end_of_setDimmerReClock:	
 18065                           
 18066                           	psect	text132
 18067  1305                     __ptext132:	
 18068 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18069 ;; Defined at:
 18070 ;;		line 28 in file "../src/Dimmer_B1.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;  lights          1    wreg     unsigned char 
 18073 ;; Auto vars:     Size  Location     Type
 18074 ;;  lights          1    2[COMMON] unsigned char 
 18075 ;; Return value:  Size  Location     Type
 18076 ;;		None               void
 18077 ;; Registers used:
 18078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18079 ;; Tracked objects:
 18080 ;;		On entry : 0/0
 18081 ;;		On exit  : 0/0
 18082 ;;		Unchanged: 0/0
 18083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;Total ram usage:        1 bytes
 18089 ;; Hardware stack levels used:    1
 18090 ;; Hardware stack levels required when called:    1
 18091 ;; This function calls:
 18092 ;;		_DimmerIntrIOCPointSelect
 18093 ;; This function is called by:
 18094 ;;		_setDimmerReClock
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _setDimmerLights_IntrIOC_GO
 18100  1305                     _setDimmerLights_IntrIOC_GO:	
 18101                           
 18102                           ;incstack = 0
 18103                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18104                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18105  1305  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18106                           
 18107                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18108  1306  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18109  1307  319D  25EB  3193   	fcall	_DimmerIntrIOCPointSelect
 18110                           
 18111                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18112  130A  0878               	movf	_DimmerLightsIntrIOC,w
 18113  130B  0086               	movwf	6
 18114  130C  3001               	movlw	1	; select bank2/3
 18115  130D  0087               	movwf	7
 18116  130E  1801               	btfsc	1,0
 18117  130F  0008               	return
 18118  1310  0878               	movf	_DimmerLightsIntrIOC,w
 18119  1311  3E09               	addlw	9
 18120  1312  0086               	movwf	6
 18121  1313  3001               	movlw	1	; select bank2/3
 18122  1314  0087               	movwf	7
 18123  1315  1A81               	btfsc	1,5
 18124  1316  0008               	return
 18125                           
 18126                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18127  1317  0878               	movf	_DimmerLightsIntrIOC,w
 18128  1318  0086               	movwf	6
 18129  1319  3001               	movlw	1	; select bank2/3
 18130  131A  0087               	movwf	7
 18131  131B  1401               	bsf	1,0
 18132                           
 18133                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18134  131C  0878               	movf	_DimmerLightsIntrIOC,w
 18135  131D  3E09               	addlw	9
 18136  131E  0086               	movwf	6
 18137  131F  3001               	movlw	1	; select bank2/3
 18138  1320  0087               	movwf	7
 18139  1321  1681               	bsf	1,5
 18140                           
 18141                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 18142  1322  0020               	movlb	0	; select bank0
 18143  1323  1D0D               	btfss	13,2	;volatile
 18144  1324  2B2D               	goto	i1l6347
 18145                           
 18146                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 18147  1325  0876               	movf	_Dimmer,w
 18148  1326  3E02               	addlw	2
 18149  1327  0086               	movwf	6
 18150  1328  3001               	movlw	1	; select bank2/3
 18151  1329  0087               	movwf	7
 18152  132A  0181               	clrf	1
 18153  132B  0A81               	incf	1,f
 18154                           
 18155                           ;Dimmer_B1.c: 37: } else {
 18156  132C  0008               	return
 18157  132D                     i1l6347:	
 18158                           
 18159                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 18160  132D  0876               	movf	_Dimmer,w
 18161  132E  3E02               	addlw	2
 18162  132F  0086               	movwf	6
 18163  1330  3001               	movlw	1	; select bank2/3
 18164  1331  0087               	movwf	7
 18165  1332  0181               	clrf	1
 18166  1333  0008               	return
 18167  1334                     __end_of_setDimmerLights_IntrIOC_GO:	
 18168                           
 18169                           	psect	text133
 18170  1DEB                     __ptext133:	
 18171 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18172 ;; Defined at:
 18173 ;;		line 8 in file "../src/Dimmer_B1.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;  lights          1    wreg     unsigned char 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  lights          1    1[COMMON] unsigned char 
 18178 ;; Return value:  Size  Location     Type
 18179 ;;		None               void
 18180 ;; Registers used:
 18181 ;;		wreg
 18182 ;; Tracked objects:
 18183 ;;		On entry : 0/0
 18184 ;;		On exit  : 0/0
 18185 ;;		Unchanged: 0/0
 18186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;Total ram usage:        2 bytes
 18192 ;; Hardware stack levels used:    1
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_setDimmerLights_IntrIOC_GO
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           
 18201                           ;psect for function _DimmerIntrIOCPointSelect
 18202  1DEB                     _DimmerIntrIOCPointSelect:	
 18203                           
 18204                           ;incstack = 0
 18205                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18206                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18207  1DEB  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18208                           
 18209                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18210  1DEC  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18211  1DED  3A01               	xorlw	1
 18212  1DEE  1D03               	skipz
 18213  1DEF  0008               	return
 18214                           
 18215                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18216  1DF0  303D               	movlw	_DimmerLights1& (0+255)
 18217  1DF1  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18218  1DF2  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18219  1DF3  00F8               	movwf	_DimmerLightsIntrIOC
 18220  1DF4  0008               	return
 18221  1DF5                     __end_of_DimmerIntrIOCPointSelect:	
 18222  007E                     btemp	set	126	;btemp
 18223  007E                     pic14e$flags	set	126
 18224  007E                     wtemp	set	126
 18225  007E                     wtemp0	set	126
 18226  0080                     wtemp1	set	128
 18227  0082                     wtemp2	set	130
 18228  0084                     wtemp3	set	132
 18229  0086                     wtemp4	set	134
 18230  0088                     wtemp5	set	136
 18231  007F                     wtemp6	set	127
 18232  007E                     ttemp	set	126
 18233  007E                     ttemp0	set	126
 18234  0081                     ttemp1	set	129
 18235  0084                     ttemp2	set	132
 18236  0087                     ttemp3	set	135
 18237  007F                     ttemp4	set	127
 18238  007E                     ltemp	set	126
 18239  007E                     ltemp0	set	126
 18240  0082                     ltemp1	set	130
 18241  0086                     ltemp2	set	134
 18242  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         193
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     73      78
    BANK1            80      0      79
    BANK2            80      4      72
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  126584
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2141
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9243
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9243
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9209
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   28622
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   28622
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12665
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12271
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1446
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1525
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1525
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   37975
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   37975
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37032
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14485
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15160
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15005
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14912
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    7195
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    7195
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    7161
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      62
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5385
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     290
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2948
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1618
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1618
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13269
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13139
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8848
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2023
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1463
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     130
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13306
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13306
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     613
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     717
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     110
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     136      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     136      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 27 11:13:23 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 088A  
                                     l94 089E                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1182                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1E09               _getDimmerLights_StatusFlag 1DFF  
                 __end_of_setDelayOff_GO 0A25                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 08B2                             ___ftadd@sign 0048  
                                    l102 16FF                                      l103 16FB  
                                    l104 16E9                                      l106 16F9  
                                    l322 1FB7                                      l323 1FB8  
                                    l247 0ABF                                      l272 0D29  
                                    l273 0D6C                                      l366 1211  
                                    l797 1554                                      _GIE 005F  
                                    _CRC 00D6                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000D  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00CA                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 006B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00D4  
        setPowerFault_Exceptions@command 0030                                      _Sw1 014C  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1FC1  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1D54  
                        __end_of_ADC_Set 1DB1                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0DE8                    _setDimmerLights_ERROR 1706  
                  _setDimmerLights_AdjRF 11E9                    _setDimmerLights_AdjGo 1F35  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                        _PowerFault_Main 1D5A                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1E93                             ___ftdiv@sign 003D  
                                   l1254 111F                                     l2302 1EE8  
               ?_DimmerLightsPointSelect 0070                                     l1267 135C  
                                   l1276 15E2                          __end_of_IOC_Set 1EAD  
                                   l2607 16BA                                     l1920 04B9  
                                   l1912 0444                                     l2810 03CC  
                                   l1747 1456                                     l1917 047C  
                                   l1918 0478                                     l1951 0B62  
                                   l1961 0BB8                                     l5331 0A2E  
                                   l5411 03AB                                     l2781 0A58  
                                   l5405 0398                                     l1966 13C3  
                                   l5335 0A35                                     l5423 03DE  
                                   l5407 03A2                                     l5511 06F5  
                                   l5345 0A5D                                     l5337 0A3F  
                                   l5417 03BE                                     l5409 03A7  
                                   l1993 148F                                     l2787 0A6F  
                                   l5347 0A65                                     l5339 0A44  
                                   l5427 03F0                                     l5419 03C8  
                                   l5523 0711                                     l5507 06ED  
                                   l5453 0766                                     l5437 040B  
                                   l5381 035C                                     l5447 0750  
                                   l8031 1091                                     l5519 0709  
                                   l5377 0355                                     l8113 0FCA  
                                   l5475 07C0                                     l5467 07A7  
                                   l5539 0F07                                     l5387 036B  
                                   l5573 0F6C                                     l5565 0F52  
                                   l5557 0F37                                     l9005 0DC2  
                                   l8029 108D                                     l8109 0FB4  
                                   l9101 04A0                                     l8151 10A8  
                                   l5567 0F5B                                     l5559 0F45  
                                   l8303 0AA7                                     l5399 0385  
                                   l5495 06B2                                     l8145 109F  
                                   l8401 1169                                     l5569 0F5E  
                                   l9017 0DE0                                     l9009 0DD0  
                                   l8161 11AD                                     l8321 0ADB  
                                   l8313 0ACE                                     l5489 069C  
                                   l8137 147D                                     l9041 0437  
                                   l8147 10A2                                     l8403 116C  
                                   l8067 0E3C                                     l9019 0DE2  
                                   l8163 11B0                                     l8315 0AD2  
                                   l8307 0AC5                                     l8421 14BA  
                                   l8341 0D0E                                     l8317 0AD5  
                                   l8309 0AC8                                     l8261 0B25  
                                   l9117 04CE                                     l9205 02A8  
                                   l8407 1172                                     l8191 154B  
                                   l8167 11B6                                     l8335 0D05  
                                   l8343 0D11                                     l8271 0B49  
                                   l9063 045B                                     l9143 1EED  
                                   l9215 02DA                                     l8511 1656  
                                   l8193 1550                                     l8185 1538  
                                   l8353 0D26                                     l8337 0D08  
                                   l7705 12AB                                     l9129 04EF  
                                   l9251 16D3                                     l8371 0D52  
                                   l8355 0D20                                     l8283 0A8D  
                                   l8099 0F92                                     l8267 0B40  
                                   l9147 1EF3                                     l8515 1662  
                                   l7733 07F6                                     l9317 0573  
                                   l8285 0A90                                     l9181 023D  
                                   l9165 0208                                     l8383 0D6E  
                                   l7911 0A01                                     l9191 026A  
                                   l8393 1222                                     l7753 1760  
                                   l7657 118D                                     l7841 0C82  
                                   l7729 07ED                                     l8369 0D3A  
                                   l8289 0A96                                     l7913 0A0E  
                                   l8537 0B65                                     l9433 16A3  
                                   l9521 0830                                     l8395 122D  
                                   l8643 1587                                     l7771 177F  
                                   l8467 1344                                     l7675 1F8C  
                                   l7907 09FB                                     l9099 049E  
                                   l8653 1597                                     l8645 158A  
                                   l7781 179A                                     l8805 1514  
                                   l7917 0A1A                                     l8565 0BAE  
                                   l8549 0B7D                                     l8629 0CDD  
                                   l9381 1422                                     l9517 0825  
                  _myMain_Initialization 1EF6                                     l8655 159A  
                                   l7759 176B                                     l7935 0978  
                                   l7943 0984                                     l7679 1F92  
                                   l8559 0BA3                                     l8649 1590  
                                   l7785 17A2                                     l7777 1791  
                                   l7769 1773                                     l7953 0994  
                                   l8809 151B                                     l8593 17EE  
                                   l8921 0E84                                     l8659 15A0  
                                   l7939 097E                                     l8771 08D9  
                                   l8923 0E8A                                     l7965 09B0  
                                   l7973 09BC                                     l7949 098E  
                                   l7957 099A                                     l8773 08DF  
                                   l7981 13D3                                     l8783 0907  
                                   l8871 1134                                     l7969 09B6  
                                   l8945 0EB7                                     l8865 112C  
                                   _CFGS 0CAE                                     l8883 15AD  
                                   l8955 0ECE                                     l8867 112F  
                                   l8981 0D8E                                     l8957 0ED0  
                                   l8983 0D94                             __CFG_WDTE$ON 0000  
                                   l8889 15C2                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4015 0778  
                                   u4025 0788                                     u4105 06CE  
                                   u4035 07A8                                     u4045 07B7  
                                   u4205 0F0E                                     u4125 06F6  
                                   u4055 07C1                                     u4135 06FC  
                                   u4235 0F38                                     u4165 0712  
                                   u4175 0718                                     u4095 06BE  
                                   u3705 0A60                                     u4265 0F53  
                                   _PEIE 005E                                     u3735 0A76  
                                   u3665 0A3A                                     u3915 03AC  
                                   u3685 0A53                                     u3855 0386  
                                   u3945 03BF                                     u3885 0399  
                                   u7335 1297                                     u7425 1776  
                                   u7530 0C30                                     u8235 1217  
                                   u7445 1780                                     u7455 178A  
                                   u7535 0C2E                                     u7465 1792  
                                   u9315 04DF                                     u9185 0455  
                                   u7775 1FD0                                     u9555 16C9  
                                   u9715 1419                                     u9725 1428  
                                   u9745 1250                                     u9675 1116  
                                   _LWLO 0CAD                                     u9765 1687  
                                   _RFSW 0079                                     u9775 16B2  
                                   _TMR0 0015                                     _RSSI 00D8  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 0801                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 1D5A                      __end_of_DlyOff_Main 0C26  
                        __end_of_RF_Main 1D63                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1E4B                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1D6C  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1431  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 14A4  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 0076                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1E86  
          __end_of_DimmerIntrPointSelect 1DFF                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 002A                setPowerFault_Exceptions@i 002F  
                                  ?_main 0164                          __end_of___awdiv 17A9  
                        __end_of___ftadd 0423                          __end_of___ftdiv 07E2  
                        __end_of___ftmul 0739                          ___awdiv@divisor 0020  
                        __end_of___fttol 0F75             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                   _setDimmerLights_Switch 1F05  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1FD6  
                          __CFG_WRT$HALF 0000                                    _Temp1 00DE  
     __end_of_setDimmerLights_IntrIOC_GO 1334               _setDimmerLights_IntrIOC_GO 1305  
                       __end_of_TMR0_ISR 11E9             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1DB9                                    _getAD 1121  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1563  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1FAD  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1F66                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0C26  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 090D                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 0859                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1D88                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E68  
                   _setSw_Initialization 1F25                  setOverTemp_Exceptions@i 002F  
                                 ??_main 0069                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0AEB  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000A  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 1D5D  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1E2A  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0025                     __end_of_getTemp_Safe 1DC1  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0BBB                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                        ?_getPowerFault_AD 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 11A4                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0A86                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F15                                   i1l6347 132D  
                                 i1l6721 00FF                                   i1l6715 00E6  
                                 i1l6723 0105                                   i1l6733 0138  
                                 i1l6717 00EC                                   i1l6743 0167  
                                 i1l6745 016D                                   i1l6729 0121  
                                 i1l6737 014C                                   i1l6755 01A0  
                                 i1l6769 01CC                                   i1l6697 009C  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                                 u573_25 0075                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 10B0  
                                 u696_25 11E2                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1D91  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1FEB  
                                 _Dimmer 0076                                   _DlySw1 00EC  
             __end_of_Mcu_Initialization 1F89                      __end_of_Buzzer_Main 1706  
                                 _Memory 01A0                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1F55               _setDimmerLights_TriggerAdj 1F45  
                                 ___bmul 1F89            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DC                                   _s_data 00DD  
                                 _setLED 0968                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0859                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 01F2              _setDimmerLights_IntrControl 0046  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1E40  
                getPowerFault_AD@channel 0025                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1DD1                          _RfSWPointSelect 1E2A  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0015                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1EE7                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0968         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1D8C    __size_of_setPowerFault_Initialization 0004  
           _setPowerFault_Initialization 1D88                  __end_of__initialization 0042  
            ??_PowerFault_Initialization 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1141                            __end_of_getAD 1141  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1E6E  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0041  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1D91                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1D70                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1DD9  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D7                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1D66                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 0069                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 16BC  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1D6C  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1D7C  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 1DC9  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006A                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0008  
                     getTemp_Safe@result 0020                              setBuz@count 002C  
                             __pmaintext 0801                      _CC2500_WriteCommand 1097  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
                   __size_of_my_MainTime 0046            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 0075                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00BD                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1DAA  
              _PowerFault_Initialization 1D57                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13FB                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1E56                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 146A  
                __end_of_RfSWPointSelect 1E35                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 1E86                          ?_setTemp_Enable 0070  
                                _IOC_Set 1EA0                     __size_of_setLog_Code 0032  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1102  
                      _Flash_Memory_Read 10C9              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                                _RF_Data 0120                                  _RF_Main 1D60  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1E40          __end_of_setControl_Lights_Table 0B52  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 17A9                          _setPercentValue 15EA  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 0161             __end_of_CC2500_FrequencyCabr 1E62  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1F77  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0159                                  _VarLED2 015D  
                      __end_of_getRxData 0BBB               __end_of_setPowerFault_Main 0DE8  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1DF5  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1F25  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1DB9  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1F15                                  ___awdiv 1755  
                                ___ftadd 032D                           ??_setSw_Enable 0022  
                                ___ftdiv 0739                                  ___ftmul 0685  
                                ___fttol 0EEE                      __end_of_Switch_Main 106A  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 1676  
                                __ptext2 1DD1                                  __ptext3 1EF6  
                                __ptext4 13FB                                  __ptext5 1232  
                                __ptext6 1121                                  __ptext7 1F9B  
                                __ptext8 0002                                  __ptext9 1D69  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1DF5                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1121                __end_of_Flash_Memory_Read 10E3  
                             _setRF_Main 0423                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1D80                        _DimmerLights_Main 1DA3  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1E1F               __end_of_CC2500_ClearRXFIFO 1D74  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1D78  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006D  
                         _LedPointSelect 07E2                      _DelayOffPointSelect 1E09  
                                clrloop0 1D9E           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1DEB                     end_of_initialization 0042  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1259  
                          _DelayTime_1us 120C                        __end_of_setTxData 0685  
             __end_of_Flash_Memory_Write 1363                                  init_ram 1D97  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1D98  
                             _setSw_Main 01F2                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 11A4                              ?_getPF_Safe 0070  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1F55  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0D01                            _CC2500_TxData 0A86  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1EC9  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0027            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 15A6  
                _DimmerLights_Exceptions 1522                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1DD9                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1DAA                       _Mcu_Initialization 1F77  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$5938 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 07FF  
                __end_of_Sw_DimmerOnFunc 1800                  __end_of_setPercentValue 1630  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1283  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 146A  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 14A4  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 11C6  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 10C9  
                   _setRF_Initialization 1E4B                              _Switch_Main 1066  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1E1F  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1FD6  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1F9B                __size_of_Sw_DimmerAdjFunc 0031  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1DEB  
                      __size_of_TMR0_ISR 0023          __size_of_setOverTemp_Exceptions 0046  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 1080            __size_of_setDimmerLights_Main 005B  
                         __end_of_setLED 09C6                           __end_of_setBuz 08B2  
                   _CC2500_FrequencyCabr 1E56                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F75  
                      __size_of_WDT_Main 0012                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 13C6                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 2000                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1102          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EEE                     __end_of_setSw_Enable 1EE7  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1D8C  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 0155                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0036  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1ED8  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1D69  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D9                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00DA  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1D78  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 13FB  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4902 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                            __pcstackBANK2 0164  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                   _setOverTemp_Exceptions 1630  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DE                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1D63  
                              _getBuz_GO 1F66                         _getPowerFault_AD 1232  
      __size_of_setPowerFault_Exceptions 0039      __end_of_Flash_Memory_Initialization 05C8  
            _Flash_Memory_Initialization 0501                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1EAD  
                              __ptext101 1E2A                                __ptext110 1FD6  
                              __ptext102 1F15                                __ptext111 1D78  
                              __ptext103 1F05                                __ptext120 1097  
                              __ptext112 1563                                __ptext104 1E1F  
                              __ptext121 1D8C                                __ptext113 1259  
                              __ptext105 0859                                __ptext130 1E86  
                              __ptext122 1FC1                                __ptext114 10E3  
                              __ptext106 1755                                __ptext131 1D6C  
                              __ptext123 1FAD                                __ptext115 1161  
                              __ptext107 1D7C                                __ptext132 1305  
                              __ptext124 16BC                                __ptext116 1E56  
                              __ptext108 1E14                                __ptext133 1DEB  
                              __ptext125 1D54                                __ptext117 120C  
                              __ptext109 1E09                                 ?___ftadd 003E  
                              __ptext118 1D74                                __ptext127 11C6  
                              __ptext119 1D70                                __ptext128 0046  
                              __ptext129 1DF5                                _getRxData 0B52  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 1000  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1D57                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1EF6                       _setPowerFault_Main 0D72  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 004F  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 013B            __end_of_setDimmerLights_ERROR 1755  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 120C  
          __end_of_setDimmerLights_AdjGo 1F45                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00DB           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F05  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0020  
                           _setRF_Enable 1EBB                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1E35                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1522                      _DimmerLightsIntrIOC 0078  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1D69  
                      _CC2500_rfSettings 102F                                 _LED_Main 1E7A  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 1D9D                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 05C8      __end_of_DimmerLights_Initialization 1EA0  
            _DimmerLights_Initialization 1E93                       _CC2500_ClearRXFIFO 1D70  
                     _CC2500_ClearTXFIFO 1D74           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1DC9                     ??_setPowerFault_Main 0031  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003A                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 1334                               ?_getRxData 0070  
                               _TMR0_ISR 11C6                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR0_Set 1DB1  
                       _Sw_DimmerAdjFunc 1363                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                      __end_of_my_MainTime 16BC  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00D2  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 10B0  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1F9B  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0C92                    __size_of_setTemp_Main 0086  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 000F  
                               _DelayOff 0069                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                       __end_of_getPF_Safe 1DD1  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1E6E  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 13C6  
                  _DlyOff_Initialization 1E14                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1D84                         __size_of_WDT_Set 000B  
                  _Switch_Initialization 1DE2                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1EAD  
                           _setMemory_GO 106A                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1431                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1FAD             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 12D8    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 12AD                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0E68                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1ED8  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 1182                         ??_LedPointSelect 0020  
                               ___ftpack 0A25                             _setSw_Status 1EC9  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 14E1  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0C92  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                               __ptext10 0E68                                 __ptext11 1630  
                               __ptext20 1363                                 __ptext12 1DC9  
                               __ptext21 1F45                                 __ptext13 1D66  
                               __ptext30 0AEB                                 __ptext22 1F35  
                               __ptext14 1D63                                 __ptext31 0F75  
                               __ptext23 1DE2                                 __ptext15 1066  
                               __ptext40 032D                                 __ptext32 09C6  
                               __ptext24 1F25                                 __ptext16 01F2  
                               __ptext41 1F66                                 __ptext33 1283  
                               __ptext25 1EE7                                 __ptext17 1DC1  
                               __ptext50 1431                                 __ptext42 0A86  
                               __ptext34 1F89                                 __ptext26 1D60  
                               __ptext18 17A9                                 __ptext51 1ED8  
                               __ptext43 0D01                                 __ptext35 146A  
                               __ptext27 0423                                 __ptext19 0C92  
                               __ptext60 1E40                                 __ptext52 1EBB  
                               __ptext44 11A4                                 __ptext36 13C6  
                               __ptext28 0B52                                 __ptext61 1DB1  
                               __ptext53 1522                                 __ptext45 1080  
                               __ptext37 11E9                                 __ptext29 1394  
                               __ptext70 1102                                 __ptext62 10B0  
                               __ptext54 12AD                                 __ptext46 1D5D  
                               __ptext38 090D                                 __ptext71 15A6  
                               __ptext63 1EA0                                 __ptext55 1706  
                               __ptext47 1E4B                                 __ptext39 0685  
                               __ptext80 0DE8                                 __ptext72 1E62  
                               __ptext64 1D84                                 __ptext56 1DB9  
                               __ptext48 1D5A                                 __ptext81 0968  
                               __ptext73 0501                                 __ptext65 1DAA  
                               __ptext57 1D57                                 __ptext49 0D72  
                               __ptext90 0BBB                                 __ptext82 07E2  
                               __ptext74 1334                                 __ptext66 1E7A  
                               __ptext58 1D88                                 __ptext91 05C8  
                               __ptext83 1FEB                                 __ptext75 1DD9  
                               __ptext67 14E1                                 __ptext59 1F77  
                               __ptext92 1EC9                                 __ptext84 106A  
                               __ptext76 10C9                                 __ptext68 1E6E  
                               __ptext93 1E35                                 __ptext85 1DFF  
                               __ptext77 1DA3                                 __ptext69 1F55  
                               __ptext94 0C26                                 __ptext86 1E93  
                               __ptext78 08B2                                 __ptext95 15EA  
                               __ptext87 12D8                                 __ptext79 14A4  
                               __ptext96 0EEE                                 __ptext88 1D91  
                               __ptext97 0739                                 __ptext89 1D80  
                               __ptext98 1182                                 __ptext99 0A25  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000B  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1EBB  
          __end_of_Dimmer_Initialization 1D97             __end_of_setDimmerLights_Main 090D  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1DC1                 __end_of_CC2500_SIDLEMode 1D7C  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1E14  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1FEB  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0004  
                            getPF_Safe@i 0020                          _CC2500_ReadByte 1080  
                            _my_MainTime 1676                       _CC2500_InitPATable 10E3  
    __size_of_getDimmerLights_StatusFlag 000A            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0501                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 0164  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 0166  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1563  
            __end_of_Flash_Memory_Modify 15EA                        ??_getPercentValue 0059  
                            _setLog_Code 1394              __end_of_Flash_Memory_Unlock 1DE2  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1161  
                     __end_of_setSw_Main 032D                            _Transceive_OK 03D9  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1283                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1259                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1305  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 12D8              __end_of_setDimmerLights_Adj 14E1  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1D5D  
   __size_of_setDimmerLights_IntrControl 01AC                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1E62                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1D80  
    __size_of_setDimmerLights_IntrIOC_GO 002F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1D84  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 09C6  
       __size_of_setControl_Lights_Table 0067                   __end_of_DelayTimejudge 12AD  
         __end_of_setOverTemp_Exceptions 1676     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1232                 __end_of_Sw_DimmerAdjFunc 1394  
                __end_of_CC2500_ReadByte 1097             __end_of_setSw_Initialization 1F35  
                        _Timeout_Counter 1FC1                     getPercentValue@value 005B  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 1E7A  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1D66  
               __size_of_Sw_DimmerOnFunc 0057                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1D60                 __end_of_Sw_DimmerOffFunc 0D01  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0D72                    __end_of_CC2500_TxData 0AEB  
                         ??_getTemp_Safe 0020                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 15A6  
