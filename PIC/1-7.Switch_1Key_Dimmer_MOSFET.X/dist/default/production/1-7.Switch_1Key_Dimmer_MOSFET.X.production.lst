

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 26 10:44:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK4
  2044  1FBF                     __pidataBANK4:	
  2045                           
  2046                           ;initializer for __product
  2047  1FBF  3463               	retlw	99
  2048  1FC0  3402               	retlw	2
  2049  1FC1  3400               	retlw	0
  2050  1FC2  3400               	retlw	0
  2051  1FC3  3400               	retlw	0
  2052  1FC4  3400               	retlw	0
  2053  1FC5  3400               	retlw	0
  2054  1FC6  3400               	retlw	0
  2055  1FC7  3400               	retlw	0
  2056  1FC8  3400               	retlw	0
  2057  1FC9  3400               	retlw	0
  2058  1FCA  3400               	retlw	0
  2059  1FCB  34FF               	retlw	255
  2060  1FCC  34FF               	retlw	255
  2061  1FCD  34FF               	retlw	255
  2062  1FCE  3400               	retlw	0
  2063  1FCF  3400               	retlw	0
  2064  1FD0  3400               	retlw	0
  2065  1FD1  3400               	retlw	0
  2066  1FD2  3400               	retlw	0
  2067  1FD3  3400               	retlw	0
  2068  1FD4  3400               	retlw	0
  2069  1FD5  3400               	retlw	0
  2070  1FD6  3400               	retlw	0
  2071  1FD7  3400               	retlw	0
  2072  1FD8  3400               	retlw	0
  2073  1FD9  3400               	retlw	0
  2074  1FDA  3400               	retlw	0
  2075  1FDB  3400               	retlw	0
  2076  1FDC  3400               	retlw	0
  2077  1FDD  3400               	retlw	0
  2078  1FDE  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006E                     __pnvBANK0:	
  2193  006E                     _product:	
  2194  006E                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0018                     _T1CON	set	24
  2199  0017                     _TMR1H	set	23
  2200  0016                     _TMR1L	set	22
  2201  005F                     _GIE	set	95
  2202  005B                     _IOCIE	set	91
  2203  0058                     _IOCIF	set	88
  2204  005E                     _PEIE	set	94
  2205  0060                     _RA0	set	96
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  006B                     _RB3	set	107
  2211  006C                     _RB4	set	108
  2212  006D                     _RB5	set	109
  2213  0070                     _RC0	set	112
  2214  0071                     _RC1	set	113
  2215  0073                     _RC3	set	115
  2216  0074                     _RC4	set	116
  2217  0075                     _RC5	set	117
  2218  0088                     _TMR1IF	set	136
  2219  009D                     _ADCON0	set	157
  2220  009E                     _ADCON1	set	158
  2221  009C                     _ADRESH	set	156
  2222  009B                     _ADRESL	set	155
  2223  0099                     _OSCCON	set	153
  2224  008C                     _TRISA	set	140
  2225  008D                     _TRISB	set	141
  2226  008E                     _TRISC	set	142
  2227  0097                     _WDTCON	set	151
  2228  04E9                     _GO_nDONE	set	1257
  2229  0488                     _TMR1IE	set	1160
  2230  0117                     _FVRCON	set	279
  2231  010C                     _LATA	set	268
  2232  010D                     _LATB	set	269
  2233  010E                     _LATC	set	270
  2234  018C                     _ANSELA	set	396
  2235  018D                     _ANSELB	set	397
  2236  018E                     _ANSELC	set	398
  2237  0192                     _PMADRH	set	402
  2238  0191                     _PMADRL	set	401
  2239  0196                     _PMCON2	set	406
  2240  0194                     _PMDATH	set	404
  2241  0193                     _PMDATL	set	403
  2242  0CAE                     _CFGS	set	3246
  2243  0CAC                     _FREE	set	3244
  2244  0CAD                     _LWLO	set	3245
  2245  0CA8                     _RD	set	3240
  2246  0CA9                     _WR	set	3241
  2247  0CAA                     _WREN	set	3242
  2248  1069                     _WPUB1	set	4201
  2249  106A                     _WPUB2	set	4202
  2250  0396                     _IOCBF	set	918
  2251  0395                     _IOCBN	set	917
  2252  0394                     _IOCBP	set	916
  2253  1CB2                     _IOCBF2	set	7346
  2254                           
  2255                           ; #config settings
  2256  0000                     
  2257                           	psect	cinit
  2258  0015                     start_initialization:	
  2259  0015                     __initialization:	
  2260                           
  2261                           ; Clear objects allocated to BITCOMMON
  2262  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2263                           
  2264                           ; Clear objects allocated to COMMON
  2265  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2266  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2267  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2268  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2269  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK0
  2272  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2273                           
  2274                           ; Clear objects allocated to BANK1
  2275  001C  30A0               	movlw	low __pbssBANK1
  2276  001D  0084               	movwf	4
  2277  001E  3000               	movlw	high __pbssBANK1
  2278  001F  0085               	movwf	5
  2279  0020  3049               	movlw	73
  2280  0021  319C  2466  3180   	fcall	clear_ram0
  2281                           
  2282                           ; Clear objects allocated to BANK2
  2283  0024  3020               	movlw	low __pbssBANK2
  2284  0025  0084               	movwf	4
  2285  0026  3001               	movlw	high __pbssBANK2
  2286  0027  0085               	movwf	5
  2287  0028  3050               	movlw	80
  2288  0029  319C  2466  3180   	fcall	clear_ram0
  2289                           
  2290                           ; Clear objects allocated to BANK3
  2291  002C  30A0               	movlw	low __pbssBANK3
  2292  002D  0084               	movwf	4
  2293  002E  3001               	movlw	high __pbssBANK3
  2294  002F  0085               	movwf	5
  2295  0030  3046               	movlw	70
  2296  0031  319C  2466  3180   	fcall	clear_ram0
  2297                           
  2298                           ; Initialize objects allocated to BANK4
  2299  0034  30BF               	movlw	low __pidataBANK4
  2300  0035  0084               	movwf	4
  2301  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2302  0037  0085               	movwf	5
  2303  0038  3020               	movlw	low __pdataBANK4
  2304  0039  0086               	movwf	6
  2305  003A  3002               	movlw	high __pdataBANK4
  2306  003B  0087               	movwf	7
  2307  003C  3020               	movlw	32
  2308  003D  319C  2460         	fcall	init_ram
  2309  003F                     end_of_initialization:	
  2310                           ;End of C runtime variable initialization code
  2311                           
  2312  003F                     __end_of__initialization:	
  2313  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2314  0040  0020               	movlb	0
  2315  0041  3196  2E9A         	ljmp	_main	;jump to C main() function
  2316                           
  2317                           	psect	bitbssCOMMON
  2318  03E8                     __pbitbssCOMMON:	
  2319  03E8                     _Receive_OK:	
  2320  03E8                     	ds	1
  2321  03E9                     _Transceive_OK:	
  2322  03E9                     	ds	1
  2323                           
  2324                           	psect	bssCOMMON
  2325  0078                     __pbssCOMMON:	
  2326  0078                     _DelayOff:	
  2327  0078                     	ds	1
  2328  0079                     _DimmerLightsIntr:	
  2329  0079                     	ds	1
  2330  007A                     _LED:	
  2331  007A                     	ds	1
  2332  007B                     _SPI0Buffer:	
  2333  007B                     	ds	1
  2334  007C                     _Sw:	
  2335  007C                     	ds	1
  2336                           
  2337                           	psect	bssBANK0
  2338  006F                     __pbssBANK0:	
  2339  006F                     _DimmerLights:	
  2340  006F                     	ds	1
  2341                           
  2342                           	psect	bssBANK1
  2343  00A0                     __pbssBANK1:	
  2344  00A0                     _myMain:	
  2345  00A0                     	ds	16
  2346  00B0                     _Buz1:	
  2347  00B0                     	ds	12
  2348  00BC                     _RF1:	
  2349  00BC                     	ds	12
  2350  00C8                     _Timer1:	
  2351  00C8                     	ds	3
  2352  00CB                     _WDT:	
  2353  00CB                     	ds	2
  2354  00CD                     _CRC:	
  2355  00CD                     	ds	1
  2356  00CE                     _DimmerLights11:	
  2357  00CE                     	ds	1
  2358  00CF                     _DimmerLightsIntrIOC:	
  2359  00CF                     	ds	1
  2360  00D0                     _RSSI:	
  2361  00D0                     	ds	1
  2362  00D1                     _Rx_Length:	
  2363  00D1                     	ds	1
  2364  00D2                     _SwDetect:	
  2365  00D2                     	ds	1
  2366  00D3                     _Tx_Length:	
  2367  00D3                     	ds	1
  2368  00D4                     _r_address:	
  2369  00D4                     	ds	1
  2370  00D5                     _r_data:	
  2371  00D5                     	ds	1
  2372  00D6                     _s_data:	
  2373  00D6                     	ds	1
  2374  00D7                     _Temp:	
  2375  00D7                     	ds	18
  2376                           
  2377                           	psect	bssBANK2
  2378  0120                     __pbssBANK2:	
  2379  0120                     _RF_Data:	
  2380  0120                     	ds	30
  2381  013E                     _Dimmer:	
  2382  013E                     	ds	3
  2383  0141                     _RF_Count:	
  2384  0141                     	ds	2
  2385  0143                     _Load:	
  2386  0143                     	ds	45
  2387                           
  2388                           	psect	bssBANK3
  2389  01A0                     __pbssBANK3:	
  2390  01A0                     _Memory:	
  2391  01A0                     	ds	37
  2392  01C5                     _DimmerLights1:	
  2393  01C5                     	ds	15
  2394  01D4                     _Sw1:	
  2395  01D4                     	ds	9
  2396  01DD                     _DlySw1:	
  2397  01DD                     	ds	5
  2398  01E2                     _VarErrLED:	
  2399  01E2                     	ds	4
  2400                           
  2401                           	psect	dataBANK4
  2402  0220                     __pdataBANK4:	
  2403  0220                     __product:	
  2404  0220                     	ds	32
  2405                           
  2406                           	psect	clrtext
  2407  1C66                     clear_ram0:	
  2408                           ;	Called with FSR0 containing the base address, and
  2409                           ;	WREG with the size to clear
  2410                           
  2411  1C66  0064               	clrwdt	;clear the watchdog before getting into this loop
  2412  1C67                     clrloop0:	
  2413  1C67  0180               	clrf	0	;clear RAM location pointed to by FSR
  2414  1C68  3101               	addfsr 0,1
  2415  1C69  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2416  1C6A  2C67               	goto	clrloop0	;have we reached the end yet?
  2417  1C6B  3400               	retlw	0	;all done for this memory range, return
  2418                           
  2419                           	psect	inittext
  2420  1C60                     init_ram:	
  2421  1C60  00FE               	movwf	126
  2422  1C61                     initloop:	
  2423  1C61  0012               	moviw fsr0++
  2424  1C62  001E               	movwi fsr1++
  2425  1C63  0BFE               	decfsz	126,f
  2426  1C64  2C61               	goto	initloop
  2427  1C65  3400               	retlw	0
  2428                           
  2429                           	psect	cstackBANK1
  2430  00E9                     __pcstackBANK1:	
  2431  00E9                     setRF_Main@loop_f:	
  2432                           
  2433                           ; 1 bytes @ 0x0
  2434  00E9                     	ds	1
  2435  00EA                     setRF_Main@Receive_OK:	
  2436                           
  2437                           ; 1 bytes @ 0x1
  2438  00EA                     	ds	1
  2439  00EB                     setRF_Main@error:	
  2440                           
  2441                           ; 1 bytes @ 0x2
  2442  00EB                     	ds	1
  2443  00EC                     ?_main:	
  2444  00EC                     main@argc:	
  2445                           ; 2 bytes @ 0x3
  2446                           
  2447                           
  2448                           ; 2 bytes @ 0x3
  2449  00EC                     	ds	2
  2450  00EE                     main@argv:	
  2451                           
  2452                           ; 2 bytes @ 0x5
  2453  00EE                     	ds	2
  2454                           
  2455                           	psect	cstackCOMMON
  2456  0070                     __pcstackCOMMON:	
  2457  0070                     ?_Timeout_Counter:	
  2458  0070                     ?_set_TimeoutCleared:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_CC2500_WriteByte:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_WriteCommand:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_ReadStatus:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ReadByte:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_PowerRST:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_InitSetREG:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_InitPATable:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_ClearTXFIFO:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ClearRXFIFO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_FrequencyCabr:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_SIDLEMode:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_DlyOff_Initialization:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_DlyOff_Main:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_setDimmerLights_ErrorClose:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setDimmerLights_Initialization:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_Dimmer_Initialization:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setDimmerLights_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setDimmerLights_Line:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setTxData:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setLED_Initialization:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setLED_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_Fosc_Set:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_IO_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_TMR1_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_ADC_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_IOC_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_WDT_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_IOC_ISR:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_TMR1_ISR:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Flash_Memory_Write:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Flash_Memory_Modify:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_WDT_Clearing:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_myMain_Initialization:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_Temp_Initialization:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_Load_Initialization:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_Switch_Initialization:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_RF_Initialization:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_getLoad_AD:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_getTemp_AD:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_my_MainTimer:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Temp_Main:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_Load_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_Switch_Main:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_RF_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setLoad_AH_AL_Restore:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setTemp_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setTemp_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setRF_Initialization:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setRF_Main:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_getRxData:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setLog_Code:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setControl_Lights_Table:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setRFSW_Control:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setRFSW_AdjControl:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRF_DimmerValue:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setSw_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setSw_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DimmerIntrIOCPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ??_DimmerIntrIOCPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DimmerIntrPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ??_DimmerIntrPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_IntrControl:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DimmerLightsPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_SwOn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_SwOff:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_AdjControl:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setDimmerLights_AdjRF:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_LedPointSelect:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LED_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Mcu_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_ISR:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setDimmerReClock:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Unlock:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Erasing:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setMemory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setMemory_LoopSave:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_WDT_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setMain_Exception:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRF_Learn:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_TouchPower:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_SwPointSelect:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_DelayTimejudge:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_getMain_All_Error_Status:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0070                     ?_getLoad_OK:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ?_getMain_LightsStatus:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ?_setPercentValue:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     ?_getPercentValue:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0070                     ?_Flash_Memory_Read:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_getRF_KeyStatus:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?_getSw_KeyStatus:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_getDelayOff_GO:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getDimmerLights_Status:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getAll_DimmerLights_AdjGO:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_getDimmer_LoadOK:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_getDimmerLights_Line:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getMain_Lights_Count:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_getMain_LoadOK:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     getSw_KeyStatus@sw:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797                           
  2798                           ; 1 bytes @ 0x0
  2799  0070                     	ds	1
  2800  0071                     DimmerIntrIOCPointSelect@lights:	
  2801  0071                     DimmerIntrPointSelect@lights:	
  2802                           ; 1 bytes @ 0x1
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x1
  2806  0071                     	ds	1
  2807  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2808  0072                     ??_setDimmerLights_IntrControl:	
  2809                           ; 0 bytes @ 0x2
  2810                           
  2811  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2812                           ; 0 bytes @ 0x2
  2813                           
  2814                           
  2815                           ; 1 bytes @ 0x2
  2816  0072                     	ds	1
  2817  0073                     ??_IOC_ISR:	
  2818  0073                     ??_setDimmerReClock:	
  2819                           ; 0 bytes @ 0x3
  2820                           
  2821                           
  2822                           ; 0 bytes @ 0x3
  2823  0073                     	ds	3
  2824  0076                     setDimmerLights_IntrControl@lights:	
  2825                           
  2826                           ; 1 bytes @ 0x6
  2827  0076                     	ds	1
  2828  0077                     ??_TMR1_ISR:	
  2829  0077                     ??_ISR:	
  2830                           ; 0 bytes @ 0x7
  2831                           
  2832                           
  2833                           ; 0 bytes @ 0x7
  2834  0077                     	ds	1
  2835                           
  2836                           	psect	cstackBANK0
  2837  0020                     __pcstackBANK0:	
  2838  0020                     ??_Timeout_Counter:	
  2839  0020                     ??_set_TimeoutCleared:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_CC2500_WriteByte:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_CC2500_ReadByte:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ?_DelayTime_1us:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Dimmer_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_getMain_All_Error_Status:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_getLoad_OK:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_setDimmerLights_Line:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ?_setRF_DimmerLights:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_setTxData:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_Fosc_Set:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_IO_Set:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_TMR1_Set:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_ADC_Set:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_IOC_Set:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_WDT_Set:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_Flash_Memory_Read:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ?_setMemory_Data:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Flash_Memory_Write:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_WDT_Clearing:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_myMain_Initialization:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_Temp_Initialization:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_setLoad_AH_AL_Restore:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_setTemp_Initialization:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_setRF_Initialization:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_getRF_KeyStatus:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_getSw_KeyStatus:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_Buzzer_Initialization:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Buzzer_Main:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_DelayOffPointSelect:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_DimmerLightsPointSelect:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_getAll_DimmerLights_AdjGO:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getDimmer_LoadOK:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_getDimmerLights_Line:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_LedPointSelect:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_Flash_Memory_Unlock:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Flash_Memory_Erasing:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_setMemory_Modify:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_setMemory_LoopSave:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_WDT_Main:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_getMain_Lights_Count:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_setRF_Learn:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_TouchPower:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_SwPointSelect:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ?___bmul:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ?_getBuz_GO:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0020                     ?_getAD:	
  2978                           ; 2 bytes @ 0x0
  2979                           
  2980  0020                     ?___awdiv:	
  2981                           ; 2 bytes @ 0x0
  2982                           
  2983  0020                     ?___ftpack:	
  2984                           ; 2 bytes @ 0x0
  2985                           
  2986  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  2987                           ; 3 bytes @ 0x0
  2988                           
  2989  0020                     getDimmer_LoadOK@status:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0020                     setDimmerLights_Line@lights:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0020                     getDimmerLights_Line@line:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0020                     getAD@adcon1:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     setMemory_Data@data:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0020                     getMain_Lights_Count@count:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0020                     getLoad_OK@ok:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0020                     setRF_DimmerLights@on:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0020                     ___bmul@multiplicand:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0020                     DelayTime_1us@count:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0020                     ___awdiv@divisor:	
  3020                           ; 2 bytes @ 0x0
  3021                           
  3022  0020                     ___ftpack@arg:	
  3023                           ; 2 bytes @ 0x0
  3024                           
  3025                           
  3026                           ; 3 bytes @ 0x0
  3027  0020                     	ds	1
  3028  0021                     ??_setRF_DimmerLights:	
  3029  0021                     ??_setMemory_Data:	
  3030                           ; 0 bytes @ 0x1
  3031                           
  3032  0021                     ??_RF_Initialization:	
  3033                           ; 0 bytes @ 0x1
  3034                           
  3035  0021                     ??_Mcu_Initialization:	
  3036                           ; 0 bytes @ 0x1
  3037                           
  3038  0021                     ??_getMain_LoadOK:	
  3039                           ; 0 bytes @ 0x1
  3040                           
  3041  0021                     ??___bmul:	
  3042                           ; 0 bytes @ 0x1
  3043                           
  3044  0021                     CC2500_WriteByte@loop_a:	
  3045                           ; 0 bytes @ 0x1
  3046                           
  3047  0021                     CC2500_ReadByte@loop_b:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  0021                     DelayOffPointSelect@sw:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  0021                     DimmerLightsPointSelect@lights:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  0021                     LedPointSelect@led:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059  0021                     Flash_Memory_Read@i:	
  3060                           ; 1 bytes @ 0x1
  3061                           
  3062  0021                     Flash_Memory_Write@i:	
  3063                           ; 1 bytes @ 0x1
  3064                           
  3065  0021                     setMemory_Modify@command:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0021                     setMemory_LoopSave@command:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0021                     getMain_Lights_Count@status2:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0021                     setLoad_AH_AL_Restore@i:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0021                     setRF_Learn@command:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080  0021                     getRF_KeyStatus@key:	
  3081                           ; 1 bytes @ 0x1
  3082                           
  3083  0021                     SwPointSelect@sw:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0021                     getSw_KeyStatus@status:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0021                     _getMain_All_Error_Status$3737:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092                           
  3093                           ; 2 bytes @ 0x1
  3094  0021                     	ds	1
  3095  0022                     ??_CC2500_WriteCommand:	
  3096  0022                     ??_CC2500_ReadStatus:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     ??_DelayTime_1us:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     ?_CC2500_WriteREG:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0022                     ??_DlyOff_Initialization:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0022                     ??_setDimmerLights_Initialization:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0022                     ?_setDimmerLights_Trigger:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0022                     ?_setDimmerLights_TriggerAdj:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0022                     ?_setLED:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0022                     ??_setLED_Main:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0022                     ??_Load_Initialization:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0022                     ??_getBuz_GO:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0022                     ??_getDelayOff_GO:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0022                     ??_getDimmerLights_Status:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0022                     CC2500_WriteREG@value:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0022                     DlyOff_Initialization@sw:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     getDelayOff_GO@sw:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     getDimmerLights_Status@lights:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     setDimmerLights_Trigger@command:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setDimmerLights_TriggerAdj@command:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     setLED@command:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     Flash_Memory_Read@address:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     setMemory_Data@address:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     getMain_Lights_Count@status3:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     getMain_LoadOK@ok:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0022                     _getRF_KeyStatus$5474:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0022                     _getSw_KeyStatus$6527:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0022                     ___bmul@product:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0022                     DelayTime_1us@i:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0022                     ___awdiv@dividend:	
  3181                           ; 2 bytes @ 0x2
  3182                           
  3183                           
  3184                           ; 2 bytes @ 0x2
  3185  0022                     	ds	1
  3186  0023                     ??_CC2500_WriteREG:	
  3187  0023                     ??_setDimmerLights_Trigger:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_TriggerAdj:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_setLED:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_DelayOff_Initialization:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_getAD:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     CC2500_WriteCommand@command:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     CC2500_ReadStatus@status_addr:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     getDelayOff_GO@go:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setDimmerLights_Initialization@lights:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     getDimmerLights_Status@status:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     setLED@led:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     getAD@adcon0:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     Flash_Memory_Read@ret:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     getMain_Lights_Count@status1:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setRF_DimmerLights@status:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     ___bmul@multiplier:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     ___ftpack@exp:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     _getMain_All_Error_Status$3746:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241                           
  3242                           ; 2 bytes @ 0x3
  3243  0023                     	ds	1
  3244  0024                     ??_CC2500_ClearTXFIFO:	
  3245  0024                     ??_CC2500_ClearRXFIFO:	
  3246                           ; 0 bytes @ 0x4
  3247                           
  3248  0024                     ??_CC2500_SIDLEMode:	
  3249                           ; 0 bytes @ 0x4
  3250                           
  3251  0024                     ??_DelayTimejudge:	
  3252                           ; 0 bytes @ 0x4
  3253                           
  3254  0024                     ??_getMain_LightsStatus:	
  3255                           ; 0 bytes @ 0x4
  3256                           
  3257  0024                     ??_setLED_Initialization:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??_Flash_Memory_Modify:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     ??_getLoad_AD:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??_getTemp_AD:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     ??_setSw_Initialization:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_CC2500_TxData:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ??_CC2500_RxData:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_DimmerLights_Initialization:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??___awdiv:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     CC2500_WriteREG@w_addr:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     setDimmerLights_Trigger@lights:	
  3288                           ; 1 bytes @ 0x4
  3289                           
  3290  0024                     setDimmerLights_TriggerAdj@lights:	
  3291                           ; 1 bytes @ 0x4
  3292                           
  3293  0024                     setLED_Initialization@led:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     setLED_Main@led:	
  3297                           ; 1 bytes @ 0x4
  3298                           
  3299  0024                     setRF_DimmerLights@lights:	
  3300                           ; 1 bytes @ 0x4
  3301                           
  3302  0024                     setSw_Initialization@sw:	
  3303                           ; 1 bytes @ 0x4
  3304                           
  3305  0024                     ___ftpack@sign:	
  3306                           ; 1 bytes @ 0x4
  3307                           
  3308  0024                     getBuz_GO@i:	
  3309                           ; 1 bytes @ 0x4
  3310                           
  3311  0024                     DelayTime_1us@j:	
  3312                           ; 2 bytes @ 0x4
  3313                           
  3314                           
  3315                           ; 2 bytes @ 0x4
  3316  0024                     	ds	1
  3317  0025                     ??_CC2500_InitSetREG:	
  3318  0025                     ??_CC2500_InitPATable:	
  3319                           ; 0 bytes @ 0x5
  3320                           
  3321  0025                     ??_Switch_Initialization:	
  3322                           ; 0 bytes @ 0x5
  3323                           
  3324  0025                     ??___ftpack:	
  3325                           ; 0 bytes @ 0x5
  3326                           
  3327  0025                     ??_setDimmerLights_AdjControl:	
  3328                           ; 0 bytes @ 0x5
  3329                           
  3330  0025                     ??_LED_Initialization:	
  3331                           ; 0 bytes @ 0x5
  3332                           
  3333  0025                     ??_LED_Main:	
  3334                           ; 0 bytes @ 0x5
  3335                           
  3336  0025                     CC2500_TxData@loop_e:	
  3337                           ; 0 bytes @ 0x5
  3338                           
  3339  0025                     CC2500_RxData@loop_f:	
  3340                           ; 1 bytes @ 0x5
  3341                           
  3342  0025                     Flash_Memory_Modify@i:	
  3343                           ; 1 bytes @ 0x5
  3344                           
  3345  0025                     getMain_LightsStatus@count:	
  3346                           ; 1 bytes @ 0x5
  3347                           
  3348  0025                     getMain_All_Error_Status@command:	
  3349                           ; 1 bytes @ 0x5
  3350                           
  3351  0025                     getTemp_AD@channel:	
  3352                           ; 1 bytes @ 0x5
  3353                           
  3354  0025                     ___awdiv@counter:	
  3355                           ; 1 bytes @ 0x5
  3356                           
  3357                           
  3358                           ; 1 bytes @ 0x5
  3359  0025                     	ds	1
  3360  0026                     ??_CC2500_PowerRST:	
  3361  0026                     ??_CC2500_FrequencyCabr:	
  3362                           ; 0 bytes @ 0x6
  3363                           
  3364  0026                     CC2500_InitSetREG@temp1:	
  3365                           ; 0 bytes @ 0x6
  3366                           
  3367  0026                     CC2500_InitPATable@temp:	
  3368                           ; 1 bytes @ 0x6
  3369                           
  3370  0026                     DelayTimejudge@i:	
  3371                           ; 1 bytes @ 0x6
  3372                           
  3373  0026                     setDimmerLights_AdjControl@idle:	
  3374                           ; 1 bytes @ 0x6
  3375                           
  3376  0026                     getMain_All_Error_Status@status:	
  3377                           ; 1 bytes @ 0x6
  3378                           
  3379  0026                     getLoad_AD@channel:	
  3380                           ; 1 bytes @ 0x6
  3381                           
  3382  0026                     ___awdiv@sign:	
  3383                           ; 1 bytes @ 0x6
  3384                           
  3385  0026                     getMain_LightsStatus@i:	
  3386                           ; 1 bytes @ 0x6
  3387                           
  3388                           
  3389                           ; 2 bytes @ 0x6
  3390  0026                     	ds	1
  3391  0027                     CC2500_InitSetREG@temp2:	
  3392  0027                     CC2500_InitPATable@loop_d:	
  3393                           ; 1 bytes @ 0x7
  3394                           
  3395  0027                     DelayTimejudge@j:	
  3396                           ; 1 bytes @ 0x7
  3397                           
  3398  0027                     _setDimmerLights_AdjControl$2402:	
  3399                           ; 1 bytes @ 0x7
  3400                           
  3401  0027                     getLoad_AD@k:	
  3402                           ; 1 bytes @ 0x7
  3403                           
  3404  0027                     ___awdiv@quotient:	
  3405                           ; 1 bytes @ 0x7
  3406                           
  3407                           
  3408                           ; 2 bytes @ 0x7
  3409  0027                     	ds	1
  3410  0028                     ?___awtoft:	
  3411  0028                     CC2500_InitSetREG@loop_c:	
  3412                           ; 3 bytes @ 0x8
  3413                           
  3414  0028                     DelayTimejudge@k:	
  3415                           ; 1 bytes @ 0x8
  3416                           
  3417  0028                     setDimmerLights_AdjControl@sw:	
  3418                           ; 1 bytes @ 0x8
  3419                           
  3420  0028                     getMain_LightsStatus@status:	
  3421                           ; 1 bytes @ 0x8
  3422                           
  3423  0028                     getLoad_AD@j:	
  3424                           ; 1 bytes @ 0x8
  3425                           
  3426  0028                     ___awtoft@c:	
  3427                           ; 1 bytes @ 0x8
  3428                           
  3429                           
  3430                           ; 2 bytes @ 0x8
  3431  0028                     	ds	1
  3432  0029                     ??_Load_Main:	
  3433  0029                     ?_setBuz:	
  3434                           ; 0 bytes @ 0x9
  3435                           
  3436  0029                     ??_CC2500_PowerOnInitial:	
  3437                           ; 0 bytes @ 0x9
  3438                           
  3439  0029                     ??_Flash_Memory_Main:	
  3440                           ; 0 bytes @ 0x9
  3441                           
  3442  0029                     DelayTimejudge@value:	
  3443                           ; 0 bytes @ 0x9
  3444                           
  3445  0029                     getLoad_AD@i:	
  3446                           ; 1 bytes @ 0x9
  3447                           
  3448  0029                     setBuz@time:	
  3449                           ; 1 bytes @ 0x9
  3450                           
  3451                           
  3452                           ; 2 bytes @ 0x9
  3453  0029                     	ds	1
  3454  002A                     ?_setDelayOff_GO:	
  3455  002A                     setDelayOff_GO@command:	
  3456                           ; 0 bytes @ 0xA
  3457                           
  3458                           
  3459                           ; 1 bytes @ 0xA
  3460  002A                     	ds	1
  3461  002B                     ??_setBuz:	
  3462  002B                     ??___awtoft:	
  3463                           ; 0 bytes @ 0xB
  3464                           
  3465  002B                     setDelayOff_GO@value:	
  3466                           ; 0 bytes @ 0xB
  3467                           
  3468  002B                     Load_Main@j:	
  3469                           ; 1 bytes @ 0xB
  3470                           
  3471                           
  3472                           ; 1 bytes @ 0xB
  3473  002B                     	ds	1
  3474  002C                     ??_setDelayOff_GO:	
  3475  002C                     setBuz@count:	
  3476                           ; 0 bytes @ 0xC
  3477                           
  3478  002C                     Load_Main@adjgo:	
  3479                           ; 1 bytes @ 0xC
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0xC
  3483  002C                     	ds	1
  3484  002D                     ??_my_MainTimer:	
  3485  002D                     ??_setTemp_Main:	
  3486                           ; 0 bytes @ 0xD
  3487                           
  3488  002D                     ??_setLog_Code:	
  3489                           ; 0 bytes @ 0xD
  3490                           
  3491  002D                     ??_setDimmerLights_SwOn:	
  3492                           ; 0 bytes @ 0xD
  3493                           
  3494  002D                     _Load_Main$4095:	
  3495                           ; 0 bytes @ 0xD
  3496                           
  3497  002D                     ___awtoft@sign:	
  3498                           ; 1 bytes @ 0xD
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0xD
  3502  002D                     	ds	1
  3503  002E                     ?___ftdiv:	
  3504  002E                     ?___ftmul:	
  3505                           ; 3 bytes @ 0xE
  3506                           
  3507  002E                     setDelayOff_GO@sw:	
  3508                           ; 3 bytes @ 0xE
  3509                           
  3510  002E                     setDimmerLights_SwOn@idle:	
  3511                           ; 1 bytes @ 0xE
  3512                           
  3513  002E                     Load_Main@error:	
  3514                           ; 1 bytes @ 0xE
  3515                           
  3516  002E                     ___ftdiv@f2:	
  3517                           ; 1 bytes @ 0xE
  3518                           
  3519  002E                     ___ftmul@f1:	
  3520                           ; 3 bytes @ 0xE
  3521                           
  3522                           
  3523                           ; 3 bytes @ 0xE
  3524  002E                     	ds	1
  3525  002F                     ??_Temp_Main:	
  3526  002F                     ??_setDimmerLights_SwOff:	
  3527                           ; 0 bytes @ 0xF
  3528                           
  3529  002F                     setDimmerLights_SwOn@sw:	
  3530                           ; 0 bytes @ 0xF
  3531                           
  3532  002F                     setDimmerLights_SwOff@command:	
  3533                           ; 1 bytes @ 0xF
  3534                           
  3535  002F                     Load_Main@i:	
  3536                           ; 1 bytes @ 0xF
  3537                           
  3538                           
  3539                           ; 1 bytes @ 0xF
  3540  002F                     	ds	1
  3541  0030                     setDimmerLights_SwOff@sw:	
  3542                           
  3543                           ; 1 bytes @ 0x10
  3544  0030                     	ds	1
  3545  0031                     ??_setDimmerLights_ErrorClose:	
  3546  0031                     ??_setRFSW_Control:	
  3547                           ; 0 bytes @ 0x11
  3548                           
  3549  0031                     ??_setSw_Main:	
  3550                           ; 0 bytes @ 0x11
  3551                           
  3552  0031                     ___ftdiv@f1:	
  3553                           ; 0 bytes @ 0x11
  3554                           
  3555  0031                     ___ftmul@f2:	
  3556                           ; 3 bytes @ 0x11
  3557                           
  3558                           
  3559                           ; 3 bytes @ 0x11
  3560  0031                     	ds	1
  3561  0032                     setDimmerLights_ErrorClose@count:	
  3562  0032                     setRFSW_Control@status:	
  3563                           ; 1 bytes @ 0x12
  3564                           
  3565                           
  3566                           ; 1 bytes @ 0x12
  3567  0032                     	ds	1
  3568  0033                     setDimmerLights_ErrorClose@lights:	
  3569  0033                     setRFSW_Control@sw:	
  3570                           ; 1 bytes @ 0x13
  3571                           
  3572  0033                     setSw_Main@sw:	
  3573                           ; 1 bytes @ 0x13
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0x13
  3577  0033                     	ds	1
  3578  0034                     ??___ftdiv:	
  3579  0034                     ??___ftmul:	
  3580                           ; 0 bytes @ 0x14
  3581                           
  3582  0034                     setDimmerLights_ErrorClose@i:	
  3583                           ; 0 bytes @ 0x14
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x14
  3587  0034                     	ds	2
  3588  0036                     ??_DlyOff_Main:	
  3589  0036                     ??_setMain_Exception:	
  3590                           ; 0 bytes @ 0x16
  3591                           
  3592                           
  3593                           ; 0 bytes @ 0x16
  3594  0036                     	ds	2
  3595  0038                     DlyOff_Main@sw:	
  3596  0038                     setMain_Exception@buz:	
  3597                           ; 1 bytes @ 0x18
  3598                           
  3599  0038                     ___ftdiv@cntr:	
  3600                           ; 1 bytes @ 0x18
  3601                           
  3602  0038                     ___ftmul@exp:	
  3603                           ; 1 bytes @ 0x18
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x18
  3607  0038                     	ds	1
  3608  0039                     ??_DelayOff_Main:	
  3609  0039                     _setMain_Exception$3721:	
  3610                           ; 0 bytes @ 0x19
  3611                           
  3612  0039                     ___ftdiv@f3:	
  3613                           ; 2 bytes @ 0x19
  3614                           
  3615  0039                     ___ftmul@f3_as_product:	
  3616                           ; 3 bytes @ 0x19
  3617                           
  3618                           
  3619                           ; 3 bytes @ 0x19
  3620  0039                     	ds	2
  3621  003B                     setMain_Exception@status:	
  3622                           
  3623                           ; 1 bytes @ 0x1B
  3624  003B                     	ds	1
  3625  003C                     setMain_Exception@command:	
  3626  003C                     ___ftdiv@exp:	
  3627                           ; 1 bytes @ 0x1C
  3628                           
  3629  003C                     ___ftmul@cntr:	
  3630                           ; 1 bytes @ 0x1C
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x1C
  3634  003C                     	ds	1
  3635  003D                     ??_Switch_Main:	
  3636  003D                     ___ftdiv@sign:	
  3637                           ; 0 bytes @ 0x1D
  3638                           
  3639  003D                     ___ftmul@sign:	
  3640                           ; 1 bytes @ 0x1D
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x1D
  3644  003D                     	ds	1
  3645  003E                     ?___ftneg:	
  3646  003E                     Switch_Main@error:	
  3647                           ; 3 bytes @ 0x1E
  3648                           
  3649  003E                     ___ftneg@f1:	
  3650                           ; 1 bytes @ 0x1E
  3651                           
  3652                           
  3653                           ; 3 bytes @ 0x1E
  3654  003E                     	ds	3
  3655  0041                     ??___ftneg:	
  3656  0041                     ?___ftadd:	
  3657                           ; 0 bytes @ 0x21
  3658                           
  3659  0041                     ___ftadd@f1:	
  3660                           ; 3 bytes @ 0x21
  3661                           
  3662                           
  3663                           ; 3 bytes @ 0x21
  3664  0041                     	ds	3
  3665  0044                     ___ftadd@f2:	
  3666                           
  3667                           ; 3 bytes @ 0x24
  3668  0044                     	ds	3
  3669  0047                     ??___ftadd:	
  3670                           
  3671                           ; 0 bytes @ 0x27
  3672  0047                     	ds	4
  3673  004B                     ___ftadd@sign:	
  3674                           
  3675                           ; 1 bytes @ 0x2B
  3676  004B                     	ds	1
  3677  004C                     ___ftadd@exp2:	
  3678                           
  3679                           ; 1 bytes @ 0x2C
  3680  004C                     	ds	1
  3681  004D                     ___ftadd@exp1:	
  3682                           
  3683                           ; 1 bytes @ 0x2D
  3684  004D                     	ds	1
  3685  004E                     ?___fttol:	
  3686  004E                     ___fttol@f1:	
  3687                           ; 4 bytes @ 0x2E
  3688                           
  3689                           
  3690                           ; 3 bytes @ 0x2E
  3691  004E                     	ds	4
  3692  0052                     ??___fttol:	
  3693                           
  3694                           ; 0 bytes @ 0x32
  3695  0052                     	ds	4
  3696  0056                     ___fttol@sign1:	
  3697                           
  3698                           ; 1 bytes @ 0x36
  3699  0056                     	ds	1
  3700  0057                     ___fttol@lval:	
  3701                           
  3702                           ; 4 bytes @ 0x37
  3703  0057                     	ds	4
  3704  005B                     ___fttol@exp1:	
  3705                           
  3706                           ; 1 bytes @ 0x3B
  3707  005B                     	ds	1
  3708  005C                     ??_setPercentValue:	
  3709  005C                     ??_getPercentValue:	
  3710                           ; 0 bytes @ 0x3C
  3711                           
  3712                           
  3713                           ; 0 bytes @ 0x3C
  3714  005C                     	ds	2
  3715  005E                     getPercentValue@value:	
  3716  005E                     setPercentValue@value:	
  3717                           ; 1 bytes @ 0x3E
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0x3E
  3721  005E                     	ds	1
  3722  005F                     getPercentValue@i:	
  3723  005F                     setPercentValue@i:	
  3724                           ; 3 bytes @ 0x3F
  3725                           
  3726                           
  3727                           ; 3 bytes @ 0x3F
  3728  005F                     	ds	3
  3729  0062                     ?_setDimmerLights:	
  3730  0062                     ?_setDimmerLights_Adj:	
  3731                           ; 0 bytes @ 0x42
  3732                           
  3733  0062                     ??_setDimmerLights_AdjRF:	
  3734                           ; 0 bytes @ 0x42
  3735                           
  3736  0062                     ??_Flash_Memory_Initialization:	
  3737                           ; 0 bytes @ 0x42
  3738                           
  3739  0062                     setDimmerLights@status:	
  3740                           ; 0 bytes @ 0x42
  3741                           
  3742  0062                     setDimmerLights_Adj@status:	
  3743                           ; 1 bytes @ 0x42
  3744                           
  3745                           
  3746                           ; 1 bytes @ 0x42
  3747  0062                     	ds	1
  3748  0063                     ??_setDimmerLights:	
  3749  0063                     ??_setDimmerLights_Adj:	
  3750                           ; 0 bytes @ 0x43
  3751                           
  3752  0063                     setDimmerLights_AdjRF@lights:	
  3753                           ; 0 bytes @ 0x43
  3754                           
  3755  0063                     Flash_Memory_Initialization@i:	
  3756                           ; 1 bytes @ 0x43
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0x43
  3760  0063                     	ds	1
  3761  0064                     ??_setRF_DimmerValue:	
  3762                           
  3763                           ; 0 bytes @ 0x44
  3764  0064                     	ds	1
  3765  0065                     setDimmerLights@lights:	
  3766  0065                     setDimmerLights_Adj@lights:	
  3767                           ; 1 bytes @ 0x45
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x45
  3771  0065                     	ds	1
  3772  0066                     ??_setDimmerLights_Main:	
  3773  0066                     setDimmerLights_Main@lights:	
  3774                           ; 0 bytes @ 0x46
  3775                           
  3776  0066                     setRF_DimmerValue@lights:	
  3777                           ; 1 bytes @ 0x46
  3778                           
  3779                           
  3780                           ; 1 bytes @ 0x46
  3781  0066                     	ds	1
  3782  0067                     ??_setRFSW_AdjControl:	
  3783  0067                     ??_DimmerLights_Main:	
  3784                           ; 0 bytes @ 0x47
  3785                           
  3786                           
  3787                           ; 0 bytes @ 0x47
  3788  0067                     	ds	2
  3789  0069                     setRFSW_AdjControl@status:	
  3790  0069                     _DimmerLights_Main$2338:	
  3791                           ; 1 bytes @ 0x49
  3792                           
  3793                           
  3794                           ; 2 bytes @ 0x49
  3795  0069                     	ds	1
  3796  006A                     setRFSW_AdjControl@sw:	
  3797                           
  3798                           ; 1 bytes @ 0x4A
  3799  006A                     	ds	1
  3800  006B                     ??_getRxData:	
  3801  006B                     ??_setControl_Lights_Table:	
  3802                           ; 0 bytes @ 0x4B
  3803                           
  3804                           
  3805                           ; 0 bytes @ 0x4B
  3806  006B                     	ds	1
  3807  006C                     getRxData@error:	
  3808                           
  3809                           ; 1 bytes @ 0x4C
  3810  006C                     	ds	1
  3811  006D                     ??_setRF_Main:	
  3812                           
  3813                           ; 0 bytes @ 0x4D
  3814  006D                     	ds	1
  3815  006E                     ??_RF_Main:	
  3816  006E                     ??_main:	
  3817                           ; 0 bytes @ 0x4E
  3818                           
  3819                           
  3820                           	psect	maintext
  3821  169A                     __pmaintext:	
  3822                           ; 0 bytes @ 0x4E
  3823 ;;
  3824 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3825 ;;
  3826 ;; *************** function _main *****************
  3827 ;; Defined at:
  3828 ;;		line 7 in file "../src/Main_B1.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  argc            2    3[BANK1 ] int 
  3831 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;		None
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  2    3[BANK1 ] int 
  3836 ;; Registers used:
  3837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 17F/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3843 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;Total ram usage:        4 bytes
  3848 ;; Hardware stack levels required when called:   15
  3849 ;; This function calls:
  3850 ;;		_Buzzer_Initialization
  3851 ;;		_Buzzer_Main
  3852 ;;		_CC2500_PowerOnInitial
  3853 ;;		_DelayOff_Initialization
  3854 ;;		_DelayOff_Main
  3855 ;;		_DimmerLights_Initialization
  3856 ;;		_DimmerLights_Main
  3857 ;;		_Flash_Memory_Initialization
  3858 ;;		_Flash_Memory_Main
  3859 ;;		_LED_Initialization
  3860 ;;		_LED_Main
  3861 ;;		_Load_Initialization
  3862 ;;		_Load_Main
  3863 ;;		_Mcu_Initialization
  3864 ;;		_RF_Initialization
  3865 ;;		_RF_Main
  3866 ;;		_Switch_Initialization
  3867 ;;		_Switch_Main
  3868 ;;		_Temp_Initialization
  3869 ;;		_Temp_Main
  3870 ;;		_WDT_Main
  3871 ;;		_getLoad_AD
  3872 ;;		_getTemp_AD
  3873 ;;		_myMain_Initialization
  3874 ;;		_my_MainTimer
  3875 ;; This function is called by:
  3876 ;;		Startup code after reset
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           
  3881                           ;psect for function _main
  3882  169A                     _main:	
  3883                           
  3884                           ;Main_B1.c: 8: myMain_Initialization();
  3885                           
  3886                           ;incstack = 0
  3887                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3888  169A  319D  257D  3196   	fcall	_myMain_Initialization
  3889                           
  3890                           ;Main_B1.c: 9: Mcu_Initialization();
  3891  169D  319E  2622  3196   	fcall	_Mcu_Initialization
  3892                           
  3893                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3894  16A0  3186  2613  3196   	fcall	_Flash_Memory_Initialization
  3895                           
  3896                           ;Main_B1.c: 11: LED_Initialization();
  3897  16A3  319C  2444  3196   	fcall	_LED_Initialization
  3898                           
  3899                           ;Main_B1.c: 12: Buzzer_Initialization();
  3900  16A6  319C  241D  3196   	fcall	_Buzzer_Initialization
  3901                           
  3902                           ;Main_B1.c: 14: ;;
  3903                           ;Main_B1.c: 15: Temp_Initialization();
  3904  16A9  319C  2426  3196   	fcall	_Temp_Initialization
  3905                           
  3906                           ;Main_B1.c: 16: Load_Initialization();
  3907  16AC  319C  2455  3196   	fcall	_Load_Initialization
  3908                           
  3909                           ;Main_B1.c: 17: ;;
  3910                           ;Main_B1.c: 18: DelayOff_Initialization();
  3911  16AF  319C  243C  3196   	fcall	_DelayOff_Initialization
  3912                           
  3913                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3914  16B2  319D  2546  3196   	fcall	_DimmerLights_Initialization
  3915                           
  3916                           ;Main_B1.c: 21: ;;
  3917                           ;Main_B1.c: 22: ;;
  3918                           ;Main_B1.c: 23: ;;
  3919                           ;Main_B1.c: 24: Switch_Initialization();
  3920  16B5  319C  2495  3196   	fcall	_Switch_Initialization
  3921                           
  3922                           ;Main_B1.c: 25: RF_Initialization();
  3923  16B8  319C  2420  3196   	fcall	_RF_Initialization
  3924                           
  3925                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3926  16BB  319E  2696  3196   	fcall	_CC2500_PowerOnInitial
  3927  16BE                     l7773:	
  3928                           ;Main_B1.c: 27: ;;
  3929                           ;Main_B1.c: 29: while (1) {
  3930                           
  3931                           
  3932                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3933  16BE  0021               	movlb	1	; select bank1
  3934  16BF  1C20               	btfss	_myMain^(0+128),0
  3935  16C0  2EC9               	goto	l7777
  3936                           
  3937                           ;Main_B1.c: 37: getLoad_AD(0x05);
  3938  16C1  3005               	movlw	5
  3939  16C2  318C  246D  3196   	fcall	_getLoad_AD
  3940                           
  3941                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3942  16C5  3009               	movlw	9
  3943  16C6  3193  23CF  3196   	fcall	_getTemp_AD
  3944  16C9                     l7777:	
  3945                           
  3946                           ;Main_B1.c: 56: }
  3947                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3948  16C9  0021               	movlb	1	; select bank1
  3949  16CA  1C48               	btfss	_Timer1^(0+128),0
  3950  16CB  2EBE               	goto	l7773
  3951                           
  3952                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3953  16CC  1048               	bcf	_Timer1^(0+128),0
  3954                           
  3955                           ;Main_B1.c: 94: my_MainTimer();
  3956  16CD  3195  2559  3196   	fcall	_my_MainTimer
  3957                           
  3958                           ;Main_B1.c: 95: WDT_Main();
  3959  16D0  319E  2634  3196   	fcall	_WDT_Main
  3960                           
  3961                           ;Main_B1.c: 96: ;;
  3962                           ;Main_B1.c: 97: ;;
  3963                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3964  16D3  0021               	movlb	1	; select bank1
  3965  16D4  1C20               	btfss	_myMain^(0+128),0
  3966  16D5  2EBE               	goto	l7773
  3967                           
  3968                           ;Main_B1.c: 99: Flash_Memory_Main();
  3969  16D6  3193  2363  3196   	fcall	_Flash_Memory_Main
  3970                           
  3971                           ;Main_B1.c: 101: LED_Main();
  3972  16D9  319C  2448  3196   	fcall	_LED_Main
  3973                           
  3974                           ;Main_B1.c: 102: Buzzer_Main();
  3975  16DC  3195  250F  3196   	fcall	_Buzzer_Main
  3976                           
  3977                           ;Main_B1.c: 104: ;;
  3978                           ;Main_B1.c: 105: Temp_Main();
  3979  16DF  319C  2429  3196   	fcall	_Temp_Main
  3980                           
  3981                           ;Main_B1.c: 106: Load_Main();
  3982  16E2  3181  21B2  3196   	fcall	_Load_Main
  3983                           
  3984                           ;Main_B1.c: 107: ;;
  3985                           ;Main_B1.c: 109: ;;
  3986                           ;Main_B1.c: 110: DimmerLights_Main();
  3987  16E5  3191  21FE  3196   	fcall	_DimmerLights_Main
  3988                           
  3989                           ;Main_B1.c: 111: Switch_Main();
  3990  16E8  319F  277F  3196   	fcall	_Switch_Main
  3991                           
  3992                           ;Main_B1.c: 112: ;;
  3993                           ;Main_B1.c: 113: ;;
  3994                           ;Main_B1.c: 115: RF_Main();
  3995  16EB  319C  2423  3196   	fcall	_RF_Main
  3996                           
  3997                           ;Main_B1.c: 116: DelayOff_Main();
  3998  16EE  319C  2440  3196   	fcall	_DelayOff_Main
  3999                           
  4000                           ;Main_B1.c: 117: ;;
  4001  16F1  2EBE               	goto	l7773
  4002  16F2                     __end_of_main:	
  4003                           ;Main_B1.c: 125: }
  4004                           ;Main_B1.c: 126: }
  4005                           ;Main_B1.c: 160: }
  4006                           ;Main_B1.c: 161: return (0);
  4007                           ;	Return value of _main is never used
  4008                           
  4009                           
  4010                           	psect	text1
  4011  1559                     __ptext1:	
  4012 ;; *************** function _my_MainTimer *****************
  4013 ;; Defined at:
  4014 ;;		line 180 in file "../src/Main_B1.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;		None               void
  4021 ;; Registers used:
  4022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;Total ram usage:        0 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    7
  4035 ;; This function calls:
  4036 ;;		_setBuz
  4037 ;; This function is called by:
  4038 ;;		_main
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _my_MainTimer
  4044  1559                     _my_MainTimer:	
  4045                           
  4046                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4050  1559  0021               	movlb	1	; select bank1
  4051  155A  1820               	btfsc	_myMain^(0+128),0
  4052  155B  2D7B               	goto	l7519
  4053                           
  4054                           ;Main_B1.c: 183: myMain.PowerCount++;
  4055  155C  3001               	movlw	1
  4056  155D  07A2               	addwf	(_myMain^(0+128)+2),f
  4057  155E  3000               	movlw	0
  4058  155F  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4059                           
  4060                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  4061  1560  3002               	movlw	2
  4062  1561  3EA0               	addlw	_myMain& (0+255)
  4063  1562  0086               	movwf	6
  4064  1563  0187               	clrf	7
  4065  1564  3F40               	moviw [0]fsr1
  4066  1565  3A96               	xorlw	150
  4067  1566  1D03               	skipz
  4068  1567  2D6A               	goto	u7435
  4069  1568  3F41               	moviw [1]fsr1
  4070  1569  3A00               	xorlw	0
  4071  156A                     u7435:	
  4072  156A  1D03               	skipz
  4073  156B  2D92               	goto	l7529
  4074                           
  4075                           ;Main_B1.c: 185: {
  4076                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  4077  156C  01A2               	clrf	(_myMain^(0+128)+2)
  4078  156D  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4079                           
  4080                           ;Main_B1.c: 187: myMain.PowerON = 1;
  4081  156E  1420               	bsf	_myMain^(0+128),0
  4082                           
  4083                           ;Main_B1.c: 193: setBuz(3, 50);
  4084  156F  3032               	movlw	50
  4085  1570  0020               	movlb	0	; select bank0
  4086  1571  00A9               	movwf	setBuz@time
  4087  1572  3000               	movlw	0
  4088  1573  00AA               	movwf	setBuz@time+1
  4089  1574  3003               	movlw	3
  4090  1575  3196  26F2  3195   	fcall	_setBuz
  4091                           
  4092                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4093  1578  0021               	movlb	1	; select bank1
  4094  1579  1620               	bsf	_myMain^(0+128),4
  4095                           
  4096                           ;Main_B1.c: 203: }
  4097                           ;Main_B1.c: 204: } else {
  4098  157A  2D92               	goto	l7529
  4099  157B                     l7519:	
  4100                           
  4101                           ;Main_B1.c: 212: myMain.Count1++;
  4102  157B  3001               	movlw	1
  4103  157C  07A6               	addwf	(_myMain^(0+128)+6),f
  4104  157D  3000               	movlw	0
  4105  157E  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4106                           
  4107                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  4108  157F  3006               	movlw	6
  4109  1580  3EA0               	addlw	_myMain& (0+255)
  4110  1581  0086               	movwf	6
  4111  1582  0187               	clrf	7
  4112  1583  3F40               	moviw [0]fsr1
  4113  1584  3A64               	xorlw	100
  4114  1585  1D03               	skipz
  4115  1586  2D89               	goto	u7445
  4116  1587  3F41               	moviw [1]fsr1
  4117  1588  3A00               	xorlw	0
  4118  1589                     u7445:	
  4119  1589  1D03               	skipz
  4120  158A  2D92               	goto	l7529
  4121                           
  4122                           ;Main_B1.c: 214: {
  4123                           ;Main_B1.c: 215: myMain.Count1 = 0;
  4124  158B  01A6               	clrf	(_myMain^(0+128)+6)
  4125  158C  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4126                           
  4127                           ;Main_B1.c: 227: if (myMain.Flag) {
  4128  158D  1CA0               	btfss	_myMain^(0+128),1
  4129  158E  2D91               	goto	l1382
  4130                           
  4131                           ;Main_B1.c: 228: myMain.Flag = 0;
  4132  158F  10A0               	bcf	_myMain^(0+128),1
  4133                           
  4134                           ;Main_B1.c: 237: } else {
  4135  1590  2D92               	goto	l7529
  4136  1591                     l1382:	
  4137                           
  4138                           ;Main_B1.c: 238: myMain.Flag = 1;
  4139  1591  14A0               	bsf	_myMain^(0+128),1
  4140  1592                     l7529:	
  4141                           
  4142                           ;Main_B1.c: 247: }
  4143                           ;Main_B1.c: 248: }
  4144                           ;Main_B1.c: 250: }
  4145                           ;Main_B1.c: 252: myMain.Count2++;
  4146  1592  3001               	movlw	1
  4147  1593  07A8               	addwf	(_myMain^(0+128)+8),f
  4148  1594  3000               	movlw	0
  4149  1595  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4150                           
  4151                           ;Main_B1.c: 253: if (myMain.Count2 == 100) {
  4152  1596  3008               	movlw	8
  4153  1597  3EA0               	addlw	_myMain& (0+255)
  4154  1598  0086               	movwf	6
  4155  1599  0187               	clrf	7
  4156  159A  3F40               	moviw [0]fsr1
  4157  159B  3A64               	xorlw	100
  4158  159C  1D03               	skipz
  4159  159D  2DA0               	goto	u7465
  4160  159E  3F41               	moviw [1]fsr1
  4161  159F  3A00               	xorlw	0
  4162  15A0                     u7465:	
  4163  15A0  1D03               	skipz
  4164  15A1  0008               	return
  4165                           
  4166                           ;Main_B1.c: 254: myMain.Count2 = 0;
  4167  15A2  01A8               	clrf	(_myMain^(0+128)+8)
  4168  15A3  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4169  15A4  0008               	return
  4170  15A5                     __end_of_my_MainTimer:	
  4171                           
  4172                           	psect	text2
  4173  1D7D                     __ptext2:	
  4174 ;; *************** function _myMain_Initialization *****************
  4175 ;; Defined at:
  4176 ;;		line 167 in file "../src/Main_B1.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, fsr1l, fsr1h
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        1 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    5
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function _myMain_Initialization
  4206  1D7D                     _myMain_Initialization:	
  4207                           
  4208                           ;Main_B1.c: 169: product = &_product;
  4209                           
  4210                           ;incstack = 0
  4211                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4212  1D7D  3020               	movlw	__product& (0+255)
  4213  1D7E  0020               	movlb	0	; select bank0
  4214  1D7F  00A0               	movwf	??_myMain_Initialization
  4215  1D80  0820               	movf	??_myMain_Initialization,w
  4216  1D81  00EE               	movwf	_product
  4217                           
  4218                           ;Main_B1.c: 170: product->Data[20] = 209;
  4219  1D82  30D1               	movlw	209
  4220  1D83  00A0               	movwf	??_myMain_Initialization
  4221  1D84  086E               	movf	_product,w
  4222  1D85  3E14               	addlw	20
  4223  1D86  0086               	movwf	6
  4224  1D87  3002               	movlw	2	; select bank4/5
  4225  1D88  0087               	movwf	7
  4226  1D89  0820               	movf	??_myMain_Initialization,w
  4227  1D8A  0081               	movwf	1
  4228  1D8B  0008               	return
  4229  1D8C                     __end_of_myMain_Initialization:	
  4230                           
  4231                           	psect	text3
  4232  13CF                     __ptext3:	
  4233 ;; *************** function _getTemp_AD *****************
  4234 ;; Defined at:
  4235 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  channel         1    wreg     unsigned char 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  channel         1    5[BANK0 ] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;		None               void
  4242 ;; Registers used:
  4243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;Total ram usage:        2 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    7
  4256 ;; This function calls:
  4257 ;;		_getAD
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _getTemp_AD
  4265  13CF                     _getTemp_AD:	
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4269                           ;getTemp_AD@channel stored from wreg
  4270  13CF  0020               	movlb	0	; select bank0
  4271  13D0  00A5               	movwf	getTemp_AD@channel
  4272                           
  4273                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4274  13D1  0021               	movlb	1	; select bank1
  4275  13D2  1D57               	btfss	_Temp^(0+128),2
  4276  13D3  0008               	return
  4277                           
  4278                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4279  13D4  1657               	bsf	_Temp^(0+128),4
  4280                           
  4281                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4282  13D5  30F0               	movlw	240
  4283  13D6  0020               	movlb	0	; select bank0
  4284  13D7  00A4               	movwf	??_getTemp_AD
  4285  13D8  0824               	movf	??_getTemp_AD,w
  4286  13D9  00A0               	movwf	getAD@adcon1
  4287  13DA  0825               	movf	getTemp_AD@channel,w
  4288  13DB  319F  279F  3193   	fcall	_getAD
  4289  13DE  0020               	movlb	0	; select bank0
  4290  13DF  0821               	movf	?_getAD+1,w
  4291  13E0  0021               	movlb	1	; select bank1
  4292  13E1  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4293  13E2  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4294  13E3  0020               	movlb	0	; select bank0
  4295  13E4  0820               	movf	?_getAD,w
  4296  13E5  0021               	movlb	1	; select bank1
  4297  13E6  01E3               	clrf	(_Temp^(0+128)+12)
  4298  13E7  07E3               	addwf	(_Temp^(0+128)+12),f
  4299                           
  4300                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4301  13E8  0864               	movf	((_Temp+1)^(0+128)+12),w
  4302  13E9  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4303  13EA  1D03               	skipz
  4304  13EB  2BEE               	goto	u7405
  4305  13EC  0863               	movf	(_Temp^(0+128)+12),w
  4306  13ED  025F               	subwf	(_Temp^(0+128)+8),w
  4307  13EE                     u7405:	
  4308  13EE  1803               	skipnc
  4309  13EF  2BF7               	goto	l7501
  4310                           
  4311                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4312  13F0  0864               	movf	((_Temp+1)^(0+128)+12),w
  4313  13F1  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4314  13F2  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4315  13F3  0863               	movf	(_Temp^(0+128)+12),w
  4316  13F4  01DF               	clrf	(_Temp^(0+128)+8)
  4317  13F5  07DF               	addwf	(_Temp^(0+128)+8),f
  4318                           
  4319                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4320  13F6  0008               	return
  4321  13F7                     l7501:	
  4322  13F7  0864               	movf	((_Temp+1)^(0+128)+12),w
  4323  13F8  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4324  13F9  1D03               	skipz
  4325  13FA  2BFD               	goto	u7415
  4326  13FB  0863               	movf	(_Temp^(0+128)+12),w
  4327  13FC  0261               	subwf	(_Temp^(0+128)+10),w
  4328  13FD                     u7415:	
  4329  13FD  1803               	skipnc
  4330  13FE  0008               	return
  4331                           
  4332                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4333  13FF  0864               	movf	((_Temp+1)^(0+128)+12),w
  4334  1400  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4335  1401  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4336  1402  0863               	movf	(_Temp^(0+128)+12),w
  4337  1403  01E1               	clrf	(_Temp^(0+128)+10)
  4338  1404  07E1               	addwf	(_Temp^(0+128)+10),f
  4339  1405  0008               	return
  4340  1406                     __end_of_getTemp_AD:	
  4341                           
  4342                           	psect	text4
  4343  0C6D                     __ptext4:	
  4344 ;; *************** function _getLoad_AD *****************
  4345 ;; Defined at:
  4346 ;;		line 15 in file "../src/OverLoad_B1.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  channel         1    wreg     unsigned char 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  channel         1    6[BANK0 ] unsigned char 
  4351 ;;  i               1    9[BANK0 ] unsigned char 
  4352 ;;  j               1    8[BANK0 ] unsigned char 
  4353 ;;  k               1    7[BANK0 ] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;Total ram usage:        6 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    7
  4370 ;; This function calls:
  4371 ;;		_getAD
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _getLoad_AD
  4379  0C6D                     _getLoad_AD:	
  4380                           
  4381                           ;incstack = 0
  4382                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4383                           ;getLoad_AD@channel stored from wreg
  4384  0C6D  0020               	movlb	0	; select bank0
  4385  0C6E  00A6               	movwf	getLoad_AD@channel
  4386                           
  4387                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4388  0C6F  01A9               	clrf	getLoad_AD@i
  4389  0C70  01A8               	clrf	getLoad_AD@j
  4390  0C71  01A7               	clrf	getLoad_AD@k
  4391                           
  4392                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4393  0C72  0022               	movlb	2	; select bank2
  4394  0C73  1E43               	btfss	_Load^(0+256),4
  4395  0C74  0008               	return
  4396                           
  4397                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4398  0C75  30F3               	movlw	243
  4399  0C76  0020               	movlb	0	; select bank0
  4400  0C77  00A4               	movwf	??_getLoad_AD
  4401  0C78  0824               	movf	??_getLoad_AD,w
  4402  0C79  00A0               	movwf	getAD@adcon1
  4403  0C7A  0826               	movf	getLoad_AD@channel,w
  4404  0C7B  319F  279F  318C   	fcall	_getAD
  4405  0C7E  0020               	movlb	0	; select bank0
  4406  0C7F  0821               	movf	?_getAD+1,w
  4407  0C80  0022               	movlb	2	; select bank2
  4408  0C81  01E5               	clrf	((_Load+1)^(0+256)+33)
  4409  0C82  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4410  0C83  0020               	movlb	0	; select bank0
  4411  0C84  0820               	movf	?_getAD,w
  4412  0C85  0022               	movlb	2	; select bank2
  4413  0C86  01E4               	clrf	(_Load^(0+256)+33)
  4414  0C87  07E4               	addwf	(_Load^(0+256)+33),f
  4415                           
  4416                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4417  0C88  0020               	movlb	0	; select bank0
  4418  0C89  01A9               	clrf	getLoad_AD@i
  4419  0C8A  3004               	movlw	4
  4420  0C8B  0229               	subwf	getLoad_AD@i,w
  4421  0C8C  1803               	btfsc	3,0
  4422  0C8D  2CBB               	goto	l7471
  4423  0C8E                     l7459:	
  4424                           
  4425                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4426  0C8E  3529               	lslf	getLoad_AD@i,w
  4427  0C8F  3E4E               	addlw	(_Load+11)& (0+255)
  4428  0C90  0086               	movwf	6
  4429  0C91  3001               	movlw	1	; select bank2/3
  4430  0C92  0087               	movwf	7
  4431  0C93  3F40               	moviw [0]fsr1
  4432  0C94  00A4               	movwf	??_getLoad_AD
  4433  0C95  3F41               	moviw [1]fsr1
  4434  0C96  00A5               	movwf	??_getLoad_AD+1
  4435  0C97  0022               	movlb	2	; select bank2
  4436  0C98  0865               	movf	((_Load+1)^(0+256)+33),w
  4437  0C99  0020               	movlb	0	; select bank0
  4438  0C9A  0225               	subwf	??_getLoad_AD+1,w
  4439  0C9B  1D03               	skipz
  4440  0C9C  2CA1               	goto	u7315
  4441  0C9D  0022               	movlb	2	; select bank2
  4442  0C9E  0864               	movf	(_Load^(0+256)+33),w
  4443  0C9F  0020               	movlb	0	; select bank0
  4444  0CA0  0224               	subwf	??_getLoad_AD,w
  4445  0CA1                     u7315:	
  4446  0CA1  1803               	skipnc
  4447  0CA2  2CB3               	goto	l7467
  4448  0CA3  08A8               	movf	getLoad_AD@j,f
  4449  0CA4  1D03               	skipz
  4450  0CA5  2CB3               	goto	l7467
  4451                           
  4452                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4453  0CA6  3529               	lslf	getLoad_AD@i,w
  4454  0CA7  3E4E               	addlw	(_Load+11)& (0+255)
  4455  0CA8  0086               	movwf	6
  4456  0CA9  3001               	movlw	1	; select bank2/3
  4457  0CAA  0087               	movwf	7
  4458  0CAB  0022               	movlb	2	; select bank2
  4459  0CAC  0864               	movf	(_Load^(0+256)+33),w
  4460  0CAD  3FC0               	movwi [0]fsr1
  4461  0CAE  0865               	movf	((_Load+1)^(0+256)+33),w
  4462  0CAF  3FC1               	movwi [1]fsr1
  4463                           
  4464                           ;OverLoad_B1.c: 24: j = 1;
  4465  0CB0  0020               	movlb	0	; select bank0
  4466  0CB1  01A8               	clrf	getLoad_AD@j
  4467  0CB2  0AA8               	incf	getLoad_AD@j,f
  4468  0CB3                     l7467:	
  4469  0CB3  3001               	movlw	1
  4470  0CB4  00A4               	movwf	??_getLoad_AD
  4471  0CB5  0824               	movf	??_getLoad_AD,w
  4472  0CB6  07A9               	addwf	getLoad_AD@i,f
  4473  0CB7  3004               	movlw	4
  4474  0CB8  0229               	subwf	getLoad_AD@i,w
  4475  0CB9  1C03               	skipc
  4476  0CBA  2C8E               	goto	l7459
  4477  0CBB                     l7471:	
  4478                           
  4479                           ;OverLoad_B1.c: 25: }
  4480                           ;OverLoad_B1.c: 26: }
  4481                           ;OverLoad_B1.c: 27: if (j == 0) {
  4482  0CBB  08A8               	movf	getLoad_AD@j,f
  4483  0CBC  1D03               	skipz
  4484  0CBD  0008               	return
  4485                           
  4486                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4487  0CBE  01A9               	clrf	getLoad_AD@i
  4488  0CBF                     L1:	
  4489  0CBF  3004               	movlw	4
  4490  0CC0  0229               	subwf	getLoad_AD@i,w
  4491  0CC1  1803               	btfsc	3,0
  4492  0CC2  0008               	return
  4493                           
  4494                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4495  0CC3  3529               	lslf	getLoad_AD@i,w
  4496  0CC4  3E58               	addlw	(_Load+21)& (0+255)
  4497  0CC5  0086               	movwf	6
  4498  0CC6  3001               	movlw	1	; select bank2/3
  4499  0CC7  0087               	movwf	7
  4500  0CC8  3F40               	moviw [0]fsr1
  4501  0CC9  00A4               	movwf	??_getLoad_AD
  4502  0CCA  3F41               	moviw [1]fsr1
  4503  0CCB  00A5               	movwf	??_getLoad_AD+1
  4504  0CCC  0825               	movf	??_getLoad_AD+1,w
  4505  0CCD  0022               	movlb	2	; select bank2
  4506  0CCE  0265               	subwf	((_Load+1)^(0+256)+33),w
  4507  0CCF  1D03               	skipz
  4508  0CD0  2CD5               	goto	u7365
  4509  0CD1  0020               	movlb	0	; select bank0
  4510  0CD2  0824               	movf	??_getLoad_AD,w
  4511  0CD3  0022               	movlb	2	; select bank2
  4512  0CD4  0264               	subwf	(_Load^(0+256)+33),w
  4513  0CD5                     u7365:	
  4514  0CD5  1803               	skipnc
  4515  0CD6  2CE8               	goto	l7487
  4516  0CD7  0020               	movlb	0	; select bank0
  4517  0CD8  08A7               	movf	getLoad_AD@k,f
  4518  0CD9  1D03               	skipz
  4519  0CDA  2CE8               	goto	l7487
  4520                           
  4521                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4522  0CDB  3529               	lslf	getLoad_AD@i,w
  4523  0CDC  3E58               	addlw	(_Load+21)& (0+255)
  4524  0CDD  0086               	movwf	6
  4525  0CDE  3001               	movlw	1	; select bank2/3
  4526  0CDF  0087               	movwf	7
  4527  0CE0  0022               	movlb	2	; select bank2
  4528  0CE1  0864               	movf	(_Load^(0+256)+33),w
  4529  0CE2  3FC0               	movwi [0]fsr1
  4530  0CE3  0865               	movf	((_Load+1)^(0+256)+33),w
  4531  0CE4  3FC1               	movwi [1]fsr1
  4532                           
  4533                           ;OverLoad_B1.c: 31: k = 1;
  4534  0CE5  0020               	movlb	0	; select bank0
  4535  0CE6  01A7               	clrf	getLoad_AD@k
  4536  0CE7  0AA7               	incf	getLoad_AD@k,f
  4537  0CE8                     l7487:	
  4538  0CE8  3001               	movlw	1
  4539  0CE9  0020               	movlb	0	; select bank0
  4540  0CEA  00A4               	movwf	??_getLoad_AD
  4541  0CEB  0824               	movf	??_getLoad_AD,w
  4542  0CEC  07A9               	addwf	getLoad_AD@i,f
  4543  0CED  2CBF               	goto	L1
  4544  0CEE                     __end_of_getLoad_AD:	
  4545                           
  4546                           	psect	text5
  4547  1F9F                     __ptext5:	
  4548 ;; *************** function _getAD *****************
  4549 ;; Defined at:
  4550 ;;		line 454 in file "../src/MCU_B1.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  adcon0          1    wreg     unsigned char 
  4553 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  2    0[BANK0 ] int 
  4558 ;; Registers used:
  4559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;Total ram usage:        4 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    6
  4572 ;; This function calls:
  4573 ;;		_Timeout_Counter
  4574 ;;		_set_TimeoutCleared
  4575 ;; This function is called by:
  4576 ;;		_getLoad_AD
  4577 ;;		_getTemp_AD
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _getAD
  4583  1F9F                     _getAD:	
  4584                           
  4585                           ;incstack = 0
  4586                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4587                           ;getAD@adcon0 stored from wreg
  4588  1F9F  0020               	movlb	0	; select bank0
  4589  1FA0  00A3               	movwf	getAD@adcon0
  4590                           
  4591                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4592  1FA1  0823               	movf	getAD@adcon0,w
  4593  1FA2  0021               	movlb	1	; select bank1
  4594  1FA3  009D               	movwf	29	;volatile
  4595                           
  4596                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4597  1FA4  0020               	movlb	0	; select bank0
  4598  1FA5  0820               	movf	getAD@adcon1,w
  4599  1FA6  0021               	movlb	1	; select bank1
  4600  1FA7  009E               	movwf	30	;volatile
  4601                           
  4602                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4603  1FA8  149D               	bsf	29,1	;volatile
  4604                           
  4605                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4606  1FA9  2FAD               	goto	l6877
  4607  1FAA                     l6875:	
  4608                           
  4609                           ;MCU_B1.c: 459: Timeout_Counter();
  4610  1FAA  319E  2681  319F   	fcall	_Timeout_Counter
  4611  1FAD                     l6877:	
  4612  1FAD  0021               	movlb	1	; select bank1
  4613  1FAE  1C9D               	btfss	29,1	;volatile
  4614  1FAF  2FB2               	goto	l6881
  4615  1FB0  1D2D               	btfss	(_myMain^(0+128)+13),2
  4616  1FB1  2FAA               	goto	l6875
  4617  1FB2                     l6881:	
  4618                           
  4619                           ;MCU_B1.c: 460: };
  4620                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4621  1FB2  319C  2450         	fcall	_set_TimeoutCleared
  4622                           
  4623                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4624  1FB4  0021               	movlb	1	; select bank1
  4625  1FB5  081C               	movf	28,w	;volatile
  4626  1FB6  0020               	movlb	0	; select bank0
  4627  1FB7  01A1               	clrf	?_getAD+1
  4628  1FB8  07A1               	addwf	?_getAD+1,f
  4629  1FB9  0021               	movlb	1	; select bank1
  4630  1FBA  081B               	movf	27,w	;volatile
  4631  1FBB  0020               	movlb	0	; select bank0
  4632  1FBC  01A0               	clrf	?_getAD
  4633  1FBD  07A0               	addwf	?_getAD,f
  4634  1FBE  0008               	return
  4635  1FBF                     __end_of_getAD:	
  4636                           
  4637                           	psect	text6
  4638  1E34                     __ptext6:	
  4639 ;; *************** function _WDT_Main *****************
  4640 ;; Defined at:
  4641 ;;		line 1033 in file "../src/MCU_B1.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;		None
  4646 ;; Return value:  Size  Location     Type
  4647 ;;		None               void
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0, pclath, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;Total ram usage:        1 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    6
  4662 ;; This function calls:
  4663 ;;		_WDT_Clearing
  4664 ;; This function is called by:
  4665 ;;		_main
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _WDT_Main
  4671  1E34                     _WDT_Main:	
  4672                           
  4673                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4677  1E34  0021               	movlb	1	; select bank1
  4678  1E35  1C4B               	btfss	_WDT^(0+128),0
  4679  1E36  0008               	return
  4680                           
  4681                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4682  1E37  3001               	movlw	1
  4683  1E38  02CC               	subwf	(_WDT^(0+128)+1),f
  4684  1E39  084C               	movf	(_WDT^(0+128)+1),w
  4685  1E3A  3AFF               	xorlw	255
  4686  1E3B  1903               	skipnz
  4687  1E3C  0008               	return
  4688                           
  4689                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4690  1E3D  3064               	movlw	100
  4691  1E3E  0020               	movlb	0	; select bank0
  4692  1E3F  00A0               	movwf	??_WDT_Main
  4693  1E40  0820               	movf	??_WDT_Main,w
  4694  1E41  0021               	movlb	1	; select bank1
  4695  1E42  00CC               	movwf	(_WDT^(0+128)+1)
  4696                           
  4697                           ;MCU_B1.c: 1037: WDT_Clearing();
  4698  1E43  3180  2002         	fcall	_WDT_Clearing
  4699  1E45  0008               	return
  4700  1E46                     __end_of_WDT_Main:	
  4701                           
  4702                           	psect	text7
  4703  0002                     __ptext7:	
  4704 ;; *************** function _WDT_Clearing *****************
  4705 ;; Defined at:
  4706 ;;		line 1043 in file "../src/MCU_B1.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;		None               void
  4713 ;; Registers used:
  4714 ;;		None
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        0 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    5
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_WDT_Main
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _WDT_Clearing
  4736  0002                     _WDT_Clearing:	
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _WDT_Clearing: []
  4740  0002  0064               	clrwdt	;# 
  4741  0003  0008               	return
  4742  0004                     __end_of_WDT_Clearing:	
  4743                           
  4744                           	psect	text8
  4745  1C29                     __ptext8:	
  4746 ;; *************** function _Temp_Main *****************
  4747 ;; Defined at:
  4748 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;		None               void
  4755 ;; Registers used:
  4756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    8
  4769 ;; This function calls:
  4770 ;;		_setTemp_Main
  4771 ;; This function is called by:
  4772 ;;		_main
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _Temp_Main
  4778  1C29                     _Temp_Main:	
  4779                           
  4780                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4784  1C29  318D  25FE         	fcall	_setTemp_Main
  4785  1C2B  0008               	return
  4786  1C2C                     __end_of_Temp_Main:	
  4787                           
  4788                           	psect	text9
  4789  0DFE                     __ptext9:	
  4790 ;; *************** function _setTemp_Main *****************
  4791 ;; Defined at:
  4792 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;Total ram usage:        2 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    7
  4813 ;; This function calls:
  4814 ;;		_getMain_All_Error_Status
  4815 ;;		_setBuz
  4816 ;; This function is called by:
  4817 ;;		_Temp_Main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _setTemp_Main
  4823  0DFE                     _setTemp_Main:	
  4824                           
  4825                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4829  0DFE  0021               	movlb	1	; select bank1
  4830  0DFF  1C57               	btfss	_Temp^(0+128),0
  4831  0E00  2E9F               	goto	l1686
  4832                           
  4833                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4834  0E01  1957               	btfsc	_Temp^(0+128),2
  4835  0E02  2E12               	goto	l6985
  4836                           
  4837                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4838  0E03  3001               	movlw	1
  4839  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  4840  0E05  3000               	movlw	0
  4841  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4842                           
  4843                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4844  0E07  3001               	movlw	1
  4845  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4846  0E09  30F4               	movlw	244
  4847  0E0A  1903               	skipnz
  4848  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  4849  0E0C  1C03               	skipc
  4850  0E0D  0008               	return
  4851                           
  4852                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4853  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  4854  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4855                           
  4856                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4857  0E10  1557               	bsf	_Temp^(0+128),2
  4858                           
  4859                           ;OverTemperature_B1.c: 64: }
  4860                           ;OverTemperature_B1.c: 65: } else {
  4861  0E11  0008               	return
  4862  0E12                     l6985:	
  4863                           
  4864                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  4865  0E12  3002               	movlw	2
  4866  0E13  3192  2292  318D   	fcall	_getMain_All_Error_Status
  4867  0E16  3800               	iorlw	0
  4868  0E17  1D03               	skipz
  4869  0E18  0008               	return
  4870                           
  4871                           ;OverTemperature_B1.c: 67: Temp.Time++;
  4872  0E19  3001               	movlw	1
  4873  0E1A  0021               	movlb	1	; select bank1
  4874  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  4875  0E1C  3000               	movlw	0
  4876  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4877                           
  4878                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  4879  0E1E  3000               	movlw	0
  4880  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4881  0E20  3005               	movlw	5
  4882  0E21  1903               	skipnz
  4883  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  4884  0E23  1C03               	skipc
  4885  0E24  0008               	return
  4886                           
  4887                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  4888  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  4889  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4890                           
  4891                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  4892  0E27  1E57               	btfss	_Temp^(0+128),4
  4893  0E28  0008               	return
  4894                           
  4895                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  4896  0E29  1157               	bcf	_Temp^(0+128),2
  4897                           
  4898                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4899  0E2A  300A               	movlw	10
  4900  0E2B  3ED7               	addlw	_Temp& (0+255)
  4901  0E2C  0086               	movwf	6
  4902  0E2D  0187               	clrf	7
  4903  0E2E  3008               	movlw	8
  4904  0E2F  3ED7               	addlw	_Temp& (0+255)
  4905  0E30  0084               	movwf	4
  4906  0E31  0185               	clrf	5
  4907  0E32  3F40               	moviw [0]fsr1
  4908  0E33  0700               	addwf	0,w
  4909  0E34  0020               	movlb	0	; select bank0
  4910  0E35  00AD               	movwf	??_setTemp_Main
  4911  0E36  3101               	addfsr 0,1
  4912  0E37  3F41               	moviw [1]fsr1
  4913  0E38  3D00               	addwfc	0,w
  4914  0E39  00AE               	movwf	??_setTemp_Main+1
  4915  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  4916  0E3B  0CAD               	rrf	??_setTemp_Main,f
  4917  0E3C  082D               	movf	??_setTemp_Main,w
  4918  0E3D  0021               	movlb	1	; select bank1
  4919  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  4920  0E3F  0020               	movlb	0	; select bank0
  4921  0E40  082E               	movf	??_setTemp_Main+1,w
  4922  0E41  0021               	movlb	1	; select bank1
  4923  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  4924                           
  4925                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  4926  0E43  30C7               	movlw	199
  4927  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  4928  0E45  3001               	movlw	1
  4929  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  4930                           
  4931                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  4932  0E47  309F               	movlw	159
  4933  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  4934  0E49  3001               	movlw	1
  4935  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  4936                           
  4937                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  4938  0E4B  1CD7               	btfss	_Temp^(0+128),1
  4939  0E4C  2E6D               	goto	l7017
  4940                           
  4941                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  4942  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  4943  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4944  0E4F  1D03               	skipz
  4945  0E50  2E53               	goto	u6505
  4946  0E51  0865               	movf	(_Temp^(0+128)+14),w
  4947  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  4948  0E53                     u6505:	
  4949  0E53  1C03               	skipc
  4950  0E54  2E6B               	goto	l7015
  4951                           
  4952                           ;OverTemperature_B1.c: 91: Temp.Count++;
  4953  0E55  3001               	movlw	1
  4954  0E56  0020               	movlb	0	; select bank0
  4955  0E57  00AD               	movwf	??_setTemp_Main
  4956  0E58  082D               	movf	??_setTemp_Main,w
  4957  0E59  0021               	movlb	1	; select bank1
  4958  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  4959                           
  4960                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  4961  0E5B  3003               	movlw	3
  4962  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  4963  0E5D  1C03               	skipc
  4964  0E5E  2E83               	goto	l7029
  4965                           
  4966                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  4967  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  4968                           
  4969                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  4970  0E60  10D7               	bcf	_Temp^(0+128),1
  4971                           
  4972                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  4973  0E61  3064               	movlw	100
  4974  0E62  0020               	movlb	0	; select bank0
  4975  0E63  00A9               	movwf	setBuz@time
  4976  0E64  3000               	movlw	0
  4977  0E65  00AA               	movwf	setBuz@time+1
  4978  0E66  3002               	movlw	2
  4979  0E67  3196  26F2  318D   	fcall	_setBuz
  4980                           
  4981                           ;OverTemperature_B1.c: 96: }
  4982                           ;OverTemperature_B1.c: 97: } else {
  4983  0E6A  2E83               	goto	l7029
  4984  0E6B                     l7015:	
  4985                           
  4986                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4987  0E6B  0021               	movlb	1	; select bank1
  4988  0E6C  2E82               	goto	l7027
  4989  0E6D                     l7017:	
  4990                           ;OverTemperature_B1.c: 99: }
  4991                           ;OverTemperature_B1.c: 100: } else {
  4992                           
  4993                           
  4994                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4995  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  4996  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  4997  0E6F  1D03               	skipz
  4998  0E70  2E73               	goto	u6525
  4999  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5000  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5001  0E73                     u6525:	
  5002  0E73  1C03               	skipc
  5003  0E74  2E82               	goto	l7027
  5004                           
  5005                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5006  0E75  3001               	movlw	1
  5007  0E76  0020               	movlb	0	; select bank0
  5008  0E77  00AD               	movwf	??_setTemp_Main
  5009  0E78  082D               	movf	??_setTemp_Main,w
  5010  0E79  0021               	movlb	1	; select bank1
  5011  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5012                           
  5013                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5014  0E7B  3003               	movlw	3
  5015  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5016  0E7D  1C03               	skipc
  5017  0E7E  2E83               	goto	l7029
  5018                           
  5019                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5020  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5021                           
  5022                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5023  0E80  14D7               	bsf	_Temp^(0+128),1
  5024                           
  5025                           ;OverTemperature_B1.c: 106: }
  5026                           ;OverTemperature_B1.c: 107: } else {
  5027  0E81  2E83               	goto	l7029
  5028  0E82                     l7027:	
  5029                           
  5030                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5031  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5032  0E83                     l7029:	
  5033                           
  5034                           ;OverTemperature_B1.c: 109: }
  5035                           ;OverTemperature_B1.c: 110: }
  5036                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5037  0E83  0021               	movlb	1	; select bank1
  5038  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5039  0E85  0020               	movlb	0	; select bank0
  5040  0E86  00AD               	movwf	??_setTemp_Main
  5041  0E87  086E               	movf	_product,w
  5042  0E88  3E18               	addlw	24
  5043  0E89  0086               	movwf	6
  5044  0E8A  3002               	movlw	2	; select bank4/5
  5045  0E8B  0087               	movwf	7
  5046  0E8C  082D               	movf	??_setTemp_Main,w
  5047  0E8D  0081               	movwf	1
  5048                           
  5049                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5050  0E8E  0021               	movlb	1	; select bank1
  5051  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5052  0E90  0020               	movlb	0	; select bank0
  5053  0E91  00AD               	movwf	??_setTemp_Main
  5054  0E92  086E               	movf	_product,w
  5055  0E93  3E19               	addlw	25
  5056  0E94  0086               	movwf	6
  5057  0E95  3002               	movlw	2	; select bank4/5
  5058  0E96  0087               	movwf	7
  5059  0E97  082D               	movf	??_setTemp_Main,w
  5060  0E98  0081               	movwf	1
  5061                           
  5062                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5063  0E99  0021               	movlb	1	; select bank1
  5064  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5065  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5066                           
  5067                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5068  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5069  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5070                           
  5071                           ;OverTemperature_B1.c: 120: }
  5072                           ;OverTemperature_B1.c: 121: }
  5073                           ;OverTemperature_B1.c: 122: }
  5074                           ;OverTemperature_B1.c: 123: }
  5075                           ;OverTemperature_B1.c: 124: } else {
  5076  0E9E  0008               	return
  5077  0E9F                     l1686:	
  5078                           
  5079                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5080  0E9F  1C20               	btfss	_myMain^(0+128),0
  5081  0EA0  0008               	return
  5082                           
  5083                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5084  0EA1  1457               	bsf	_Temp^(0+128),0
  5085  0EA2  0008               	return
  5086  0EA3                     __end_of_setTemp_Main:	
  5087                           
  5088                           	psect	text10
  5089  1C26                     __ptext10:	
  5090 ;; *************** function _Temp_Initialization *****************
  5091 ;; Defined at:
  5092 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;		None               void
  5099 ;; Registers used:
  5100 ;;		status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        0 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    6
  5113 ;; This function calls:
  5114 ;;		_setTemp_Initialization
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _Temp_Initialization
  5122  1C26                     _Temp_Initialization:	
  5123                           
  5124                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5125                           
  5126                           ;incstack = 0
  5127                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5128  1C26  319C  241C         	fcall	_setTemp_Initialization
  5129  1C28  0008               	return
  5130  1C29                     __end_of_Temp_Initialization:	
  5131                           
  5132                           	psect	text11
  5133  1C1C                     __ptext11:	
  5134 ;; *************** function _setTemp_Initialization *****************
  5135 ;; Defined at:
  5136 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		None
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;Total ram usage:        0 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    5
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_Temp_Initialization
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _setTemp_Initialization
  5166  1C1C                     _setTemp_Initialization:	
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _setTemp_Initialization: []
  5170  1C1C  0008               	return
  5171  1C1D                     __end_of_setTemp_Initialization:	
  5172                           
  5173                           	psect	text12
  5174  1F7F                     __ptext12:	
  5175 ;; *************** function _Switch_Main *****************
  5176 ;; Defined at:
  5177 ;;		line 72 in file "../src/Switch_B1.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  error           1   30[BANK0 ] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;		None               void
  5184 ;; Registers used:
  5185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;Total ram usage:        2 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:   11
  5198 ;; This function calls:
  5199 ;;		_TouchPower
  5200 ;;		_getMain_All_Error_Status
  5201 ;;		_setMain_Exception
  5202 ;;		_setSw_Main
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _Switch_Main
  5210  1F7F                     _Switch_Main:	
  5211                           
  5212                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5216  1F7F  3000               	movlw	0
  5217  1F80  3192  2292  319F   	fcall	_getMain_All_Error_Status
  5218  1F83  0020               	movlb	0	; select bank0
  5219  1F84  00BD               	movwf	??_Switch_Main
  5220  1F85  083D               	movf	??_Switch_Main,w
  5221  1F86  00BE               	movwf	Switch_Main@error
  5222                           
  5223                           ;Switch_B1.c: 74: if (error != 0) {
  5224  1F87  083E               	movf	Switch_Main@error,w
  5225  1F88  1903               	btfsc	3,2
  5226  1F89  2F8F               	goto	l2380
  5227                           
  5228                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5229  1F8A  0021               	movlb	1	; select bank1
  5230  1F8B  1852               	btfsc	_SwDetect^(0+128),0
  5231  1F8C  2F98               	goto	l7697
  5232                           
  5233                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5234  1F8D  1452               	bsf	_SwDetect^(0+128),0
  5235  1F8E  2F93               	goto	L2
  5236  1F8F                     l2380:	
  5237                           ;Switch_B1.c: 80: }
  5238                           ;Switch_B1.c: 81: } else {
  5239                           
  5240                           ;Switch_B1.c: 78: setMain_Exception(error);
  5241                           
  5242                           
  5243                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5244  1F8F  0021               	movlb	1	; select bank1
  5245  1F90  1C52               	btfss	_SwDetect^(0+128),0
  5246  1F91  2F98               	goto	l7697
  5247                           
  5248                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5249  1F92  1052               	bcf	_SwDetect^(0+128),0
  5250  1F93                     L2:	
  5251                           
  5252                           ;Switch_B1.c: 85: setMain_Exception(error);
  5253  1F93  0020               	movlb	0	; select bank0
  5254  1F94  083E               	movf	Switch_Main@error,w
  5255  1F95  3188  201C  319F   	fcall	_setMain_Exception
  5256  1F98                     l7697:	
  5257                           
  5258                           ;Switch_B1.c: 87: }
  5259                           ;Switch_B1.c: 88: }
  5260                           ;Switch_B1.c: 91: setSw_Main(1);
  5261  1F98  3001               	movlw	1
  5262  1F99  3180  2043  319F   	fcall	_setSw_Main
  5263                           
  5264                           ;Switch_B1.c: 103: TouchPower();
  5265  1F9C  319E  26AB         	fcall	_TouchPower
  5266  1F9E  0008               	return
  5267  1F9F                     __end_of_Switch_Main:	
  5268                           
  5269                           	psect	text13
  5270  0043                     __ptext13:	
  5271 ;; *************** function _setSw_Main *****************
  5272 ;; Defined at:
  5273 ;;		line 137 in file "../src/Switch_B1.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  sw              1    wreg     unsigned char 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  sw              1   19[BANK0 ] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;Total ram usage:        3 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    9
  5294 ;; This function calls:
  5295 ;;		_SwPointSelect
  5296 ;;		_getSw_KeyStatus
  5297 ;;		_setBuz
  5298 ;;		_setDimmerLights_AdjControl
  5299 ;;		_setDimmerLights_SwOff
  5300 ;;		_setDimmerLights_SwOn
  5301 ;;		_setRF_Learn
  5302 ;; This function is called by:
  5303 ;;		_Switch_Main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _setSw_Main
  5309  0043                     _setSw_Main:	
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5313                           ;setSw_Main@sw stored from wreg
  5314  0043  0020               	movlb	0	; select bank0
  5315  0044  00B3               	movwf	setSw_Main@sw
  5316                           
  5317                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5318  0045  0833               	movf	setSw_Main@sw,w
  5319  0046  319C  24FF  3180   	fcall	_SwPointSelect
  5320                           
  5321                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5322  0049  087C               	movf	_Sw,w
  5323  004A  0086               	movwf	6
  5324  004B  3001               	movlw	1	; select bank2/3
  5325  004C  0087               	movwf	7
  5326  004D  1C01               	btfss	1,0
  5327  004E  29A9               	goto	l2390
  5328                           
  5329                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5330  004F  0021               	movlb	1	; select bank1
  5331  0050  1852               	btfsc	_SwDetect^(0+128),0
  5332  0051  286D               	goto	l7169
  5333                           
  5334                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5335  0052  0A7C               	incf	_Sw,w
  5336  0053  0086               	movwf	6
  5337  0054  3001               	movlw	1	; select bank2/3
  5338  0055  0087               	movwf	7
  5339  0056  1081               	bcf	1,1
  5340                           
  5341                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5342  0057  0020               	movlb	0	; select bank0
  5343  0058  0833               	movf	setSw_Main@sw,w
  5344  0059  319D  25FF  3180   	fcall	_getSw_KeyStatus
  5345  005C  3A01               	xorlw	1
  5346  005D  3000               	movlw	0
  5347  005E  1903               	skipnz
  5348  005F  3001               	movlw	1
  5349  0060  0020               	movlb	0	; select bank0
  5350  0061  00B1               	movwf	??_setSw_Main
  5351  0062  087C               	movf	_Sw,w
  5352  0063  0086               	movwf	6
  5353  0064  3001               	movlw	1	; select bank2/3
  5354  0065  0087               	movwf	7
  5355  0066  0DB1               	rlf	??_setSw_Main,f
  5356  0067  0801               	movf	1,w
  5357  0068  0631               	xorwf	??_setSw_Main,w
  5358  0069  39FD               	andlw	-3
  5359  006A  0631               	xorwf	??_setSw_Main,w
  5360  006B  0081               	movwf	1
  5361                           
  5362                           ;Switch_B1.c: 143: } else {
  5363  006C  2882               	goto	l2392
  5364  006D                     l7169:	
  5365                           
  5366                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5367  006D  0A7C               	incf	_Sw,w
  5368  006E  0086               	movwf	6
  5369  006F  3001               	movlw	1	; select bank2/3
  5370  0070  0087               	movwf	7
  5371  0071  1881               	btfsc	1,1
  5372  0072  2882               	goto	l2392
  5373                           
  5374                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5375  0073  0A7C               	incf	_Sw,w
  5376  0074  0086               	movwf	6
  5377  0075  3001               	movlw	1	; select bank2/3
  5378  0076  0087               	movwf	7
  5379  0077  1481               	bsf	1,1
  5380                           
  5381                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5382  0078  087C               	movf	_Sw,w
  5383  0079  0086               	movwf	6
  5384  007A  3001               	movlw	1	; select bank2/3
  5385  007B  0087               	movwf	7
  5386  007C  1081               	bcf	1,1
  5387                           
  5388                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5389  007D  087C               	movf	_Sw,w
  5390  007E  0086               	movwf	6
  5391  007F  3001               	movlw	1	; select bank2/3
  5392  0080  0087               	movwf	7
  5393  0081  1501               	bsf	1,2
  5394  0082                     l2392:	
  5395                           
  5396                           ;Switch_B1.c: 148: }
  5397                           ;Switch_B1.c: 149: }
  5398                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5399  0082  087C               	movf	_Sw,w
  5400  0083  0086               	movwf	6
  5401  0084  3001               	movlw	1	; select bank2/3
  5402  0085  0087               	movwf	7
  5403  0086  1C81               	btfss	1,1
  5404  0087  2952               	goto	l7219
  5405                           
  5406                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5407  0088  087C               	movf	_Sw,w
  5408  0089  0086               	movwf	6
  5409  008A  3001               	movlw	1	; select bank2/3
  5410  008B  0087               	movwf	7
  5411  008C  1901               	btfsc	1,2
  5412  008D  28B0               	goto	l7185
  5413                           
  5414                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5415  008E  3001               	movlw	1
  5416  008F  0020               	movlb	0	; select bank0
  5417  0090  00B1               	movwf	??_setSw_Main
  5418  0091  087C               	movf	_Sw,w
  5419  0092  3E02               	addlw	2
  5420  0093  0086               	movwf	6
  5421  0094  3001               	movlw	1	; select bank2/3
  5422  0095  0087               	movwf	7
  5423  0096  0831               	movf	??_setSw_Main,w
  5424  0097  0781               	addwf	1,f
  5425                           
  5426                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5427  0098  087C               	movf	_Sw,w
  5428  0099  3E02               	addlw	2
  5429  009A  0086               	movwf	6
  5430  009B  3001               	movlw	1	; select bank2/3
  5431  009C  0087               	movwf	7
  5432  009D  3005               	movlw	5
  5433  009E  0201               	subwf	1,w
  5434  009F  1C03               	skipc
  5435  00A0  0008               	return
  5436                           
  5437                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5438  00A1  087C               	movf	_Sw,w
  5439  00A2  3E02               	addlw	2
  5440  00A3  0086               	movwf	6
  5441  00A4  3001               	movlw	1	; select bank2/3
  5442  00A5  0087               	movwf	7
  5443  00A6  0181               	clrf	1
  5444                           
  5445                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5446  00A7  087C               	movf	_Sw,w
  5447  00A8  0086               	movwf	6
  5448  00A9  3001               	movlw	1	; select bank2/3
  5449  00AA  0087               	movwf	7
  5450  00AB  1501               	bsf	1,2
  5451                           
  5452                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5453  00AC  0833               	movf	setSw_Main@sw,w
  5454  00AD  3194  2406         	fcall	_setDimmerLights_SwOn
  5455                           
  5456                           ;Switch_B1.c: 162: }
  5457                           ;Switch_B1.c: 163: } else {
  5458  00AF  0008               	return
  5459  00B0                     l7185:	
  5460                           
  5461                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5462  00B0  087C               	movf	_Sw,w
  5463  00B1  0086               	movwf	6
  5464  00B2  3001               	movlw	1	; select bank2/3
  5465  00B3  0087               	movwf	7
  5466  00B4  1981               	btfsc	1,3
  5467  00B5  28E2               	goto	l7195
  5468                           
  5469                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5470  00B6  087C               	movf	_Sw,w
  5471  00B7  3E03               	addlw	3
  5472  00B8  0086               	movwf	6
  5473  00B9  3001               	movlw	1	; select bank2/3
  5474  00BA  0087               	movwf	7
  5475  00BB  3001               	movlw	1
  5476  00BC  0781               	addwf	1,f
  5477  00BD  3141               	addfsr 1,1
  5478  00BE  1803               	skipnc
  5479  00BF  0A81               	incf	1,f
  5480                           
  5481                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5482  00C0  087C               	movf	_Sw,w
  5483  00C1  3E03               	addlw	3
  5484  00C2  0086               	movwf	6
  5485  00C3  3001               	movlw	1	; select bank2/3
  5486  00C4  0087               	movwf	7
  5487  00C5  3F40               	moviw [0]fsr1
  5488  00C6  0020               	movlb	0	; select bank0
  5489  00C7  00B1               	movwf	??_setSw_Main
  5490  00C8  3F41               	moviw [1]fsr1
  5491  00C9  00B2               	movwf	??_setSw_Main+1
  5492  00CA  3000               	movlw	0
  5493  00CB  0232               	subwf	??_setSw_Main+1,w
  5494  00CC  3096               	movlw	150
  5495  00CD  1903               	skipnz
  5496  00CE  0231               	subwf	??_setSw_Main,w
  5497  00CF  1C03               	skipc
  5498  00D0  0008               	return
  5499                           
  5500                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5501  00D1  087C               	movf	_Sw,w
  5502  00D2  3E03               	addlw	3
  5503  00D3  0086               	movwf	6
  5504  00D4  3001               	movlw	1	; select bank2/3
  5505  00D5  0087               	movwf	7
  5506  00D6  3000               	movlw	0
  5507  00D7  3FC0               	movwi [0]fsr1
  5508  00D8  3FC1               	movwi [1]fsr1
  5509                           
  5510                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5511  00D9  087C               	movf	_Sw,w
  5512  00DA  0086               	movwf	6
  5513  00DB  3001               	movlw	1	; select bank2/3
  5514  00DC  0087               	movwf	7
  5515  00DD  1581               	bsf	1,3
  5516                           
  5517                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5518  00DE  0833               	movf	setSw_Main@sw,w
  5519  00DF  3192  22F8         	fcall	_setDimmerLights_AdjControl
  5520                           
  5521                           ;Switch_B1.c: 174: }
  5522                           ;Switch_B1.c: 175: } else {
  5523  00E1  0008               	return
  5524  00E2                     l7195:	
  5525                           
  5526                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5527  00E2  087C               	movf	_Sw,w
  5528  00E3  0086               	movwf	6
  5529  00E4  3001               	movlw	1	; select bank2/3
  5530  00E5  0087               	movwf	7
  5531  00E6  1A01               	btfsc	1,4
  5532  00E7  2920               	goto	l7209
  5533                           
  5534                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5535  00E8  087C               	movf	_Sw,w
  5536  00E9  3E05               	addlw	5
  5537  00EA  0086               	movwf	6
  5538  00EB  3001               	movlw	1	; select bank2/3
  5539  00EC  0087               	movwf	7
  5540  00ED  3001               	movlw	1
  5541  00EE  0781               	addwf	1,f
  5542  00EF  3141               	addfsr 1,1
  5543  00F0  1803               	skipnc
  5544  00F1  0A81               	incf	1,f
  5545                           
  5546                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5547  00F2  087C               	movf	_Sw,w
  5548  00F3  3E05               	addlw	5
  5549  00F4  0086               	movwf	6
  5550  00F5  3001               	movlw	1	; select bank2/3
  5551  00F6  0087               	movwf	7
  5552  00F7  3F40               	moviw [0]fsr1
  5553  00F8  0020               	movlb	0	; select bank0
  5554  00F9  00B1               	movwf	??_setSw_Main
  5555  00FA  3F41               	moviw [1]fsr1
  5556  00FB  00B2               	movwf	??_setSw_Main+1
  5557  00FC  3000               	movlw	0
  5558  00FD  0232               	subwf	??_setSw_Main+1,w
  5559  00FE  3096               	movlw	150
  5560  00FF  1903               	skipnz
  5561  0100  0231               	subwf	??_setSw_Main,w
  5562  0101  1C03               	skipc
  5563  0102  0008               	return
  5564                           
  5565                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5566  0103  087C               	movf	_Sw,w
  5567  0104  3E05               	addlw	5
  5568  0105  0086               	movwf	6
  5569  0106  3001               	movlw	1	; select bank2/3
  5570  0107  0087               	movwf	7
  5571  0108  3000               	movlw	0
  5572  0109  3FC0               	movwi [0]fsr1
  5573  010A  3FC1               	movwi [1]fsr1
  5574                           
  5575                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5576  010B  087C               	movf	_Sw,w
  5577  010C  0086               	movwf	6
  5578  010D  3001               	movlw	1	; select bank2/3
  5579  010E  0087               	movwf	7
  5580  010F  1601               	bsf	1,4
  5581                           
  5582                           ;Switch_B1.c: 183: setRF_Learn(1);
  5583  0110  3001               	movlw	1
  5584  0111  319E  266D  3180   	fcall	_setRF_Learn
  5585                           
  5586                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5587  0114  0021               	movlb	1	; select bank1
  5588  0115  1EA0               	btfss	_myMain^(0+128),5
  5589  0116  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 186: setBuz(2, 100);
  5592  0117  3064               	movlw	100
  5593  0118  0020               	movlb	0	; select bank0
  5594  0119  00A9               	movwf	setBuz@time
  5595  011A  3000               	movlw	0
  5596  011B  00AA               	movwf	setBuz@time+1
  5597  011C  3002               	movlw	2
  5598  011D  3196  26F2         	fcall	_setBuz
  5599                           
  5600                           ;Switch_B1.c: 187: }
  5601                           ;Switch_B1.c: 189: }
  5602                           ;Switch_B1.c: 190: } else {
  5603  011F  0008               	return
  5604  0120                     l7209:	
  5605                           
  5606                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5607  0120  087C               	movf	_Sw,w
  5608  0121  0086               	movwf	6
  5609  0122  3001               	movlw	1	; select bank2/3
  5610  0123  0087               	movwf	7
  5611  0124  1A81               	btfsc	1,5
  5612  0125  0008               	return
  5613                           
  5614                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5615  0126  087C               	movf	_Sw,w
  5616  0127  3E07               	addlw	7
  5617  0128  0086               	movwf	6
  5618  0129  3001               	movlw	1	; select bank2/3
  5619  012A  0087               	movwf	7
  5620  012B  3001               	movlw	1
  5621  012C  0781               	addwf	1,f
  5622  012D  3141               	addfsr 1,1
  5623  012E  1803               	skipnc
  5624  012F  0A81               	incf	1,f
  5625                           
  5626                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5627  0130  087C               	movf	_Sw,w
  5628  0131  3E07               	addlw	7
  5629  0132  0086               	movwf	6
  5630  0133  3001               	movlw	1	; select bank2/3
  5631  0134  0087               	movwf	7
  5632  0135  3F40               	moviw [0]fsr1
  5633  0136  0020               	movlb	0	; select bank0
  5634  0137  00B1               	movwf	??_setSw_Main
  5635  0138  3F41               	moviw [1]fsr1
  5636  0139  00B2               	movwf	??_setSw_Main+1
  5637  013A  3001               	movlw	1
  5638  013B  0232               	subwf	??_setSw_Main+1,w
  5639  013C  302C               	movlw	44
  5640  013D  1903               	skipnz
  5641  013E  0231               	subwf	??_setSw_Main,w
  5642  013F  1C03               	skipc
  5643  0140  0008               	return
  5644                           
  5645                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5646  0141  087C               	movf	_Sw,w
  5647  0142  3E07               	addlw	7
  5648  0143  0086               	movwf	6
  5649  0144  3001               	movlw	1	; select bank2/3
  5650  0145  0087               	movwf	7
  5651  0146  3000               	movlw	0
  5652  0147  3FC0               	movwi [0]fsr1
  5653  0148  3FC1               	movwi [1]fsr1
  5654                           
  5655                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5656  0149  087C               	movf	_Sw,w
  5657  014A  0086               	movwf	6
  5658  014B  3001               	movlw	1	; select bank2/3
  5659  014C  0087               	movwf	7
  5660  014D  1681               	bsf	1,5
  5661                           
  5662                           ;Switch_B1.c: 198: setRF_Learn(0);
  5663  014E  3000               	movlw	0
  5664  014F  319E  266D         	fcall	_setRF_Learn
  5665                           
  5666                           ;Switch_B1.c: 201: }
  5667                           ;Switch_B1.c: 202: }
  5668                           ;Switch_B1.c: 203: }
  5669                           ;Switch_B1.c: 204: }
  5670                           ;Switch_B1.c: 205: }
  5671                           ;Switch_B1.c: 206: } else {
  5672  0151  0008               	return
  5673  0152                     l7219:	
  5674                           
  5675                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5676  0152  087C               	movf	_Sw,w
  5677  0153  0086               	movwf	6
  5678  0154  3001               	movlw	1	; select bank2/3
  5679  0155  0087               	movwf	7
  5680  0156  1D01               	btfss	1,2
  5681  0157  0008               	return
  5682                           
  5683                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5684  0158  3001               	movlw	1
  5685  0159  0020               	movlb	0	; select bank0
  5686  015A  00B1               	movwf	??_setSw_Main
  5687  015B  087C               	movf	_Sw,w
  5688  015C  3E02               	addlw	2
  5689  015D  0086               	movwf	6
  5690  015E  3001               	movlw	1	; select bank2/3
  5691  015F  0087               	movwf	7
  5692  0160  0831               	movf	??_setSw_Main,w
  5693  0161  0781               	addwf	1,f
  5694                           
  5695                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5696  0162  087C               	movf	_Sw,w
  5697  0163  3E02               	addlw	2
  5698  0164  0086               	movwf	6
  5699  0165  3001               	movlw	1	; select bank2/3
  5700  0166  0087               	movwf	7
  5701  0167  3005               	movlw	5
  5702  0168  0201               	subwf	1,w
  5703  0169  1C03               	skipc
  5704  016A  0008               	return
  5705                           
  5706                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5707  016B  087C               	movf	_Sw,w
  5708  016C  3E02               	addlw	2
  5709  016D  0086               	movwf	6
  5710  016E  3001               	movlw	1	; select bank2/3
  5711  016F  0087               	movwf	7
  5712  0170  0181               	clrf	1
  5713                           
  5714                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5715  0171  087C               	movf	_Sw,w
  5716  0172  0086               	movwf	6
  5717  0173  3001               	movlw	1	; select bank2/3
  5718  0174  0087               	movwf	7
  5719  0175  1101               	bcf	1,2
  5720                           
  5721                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5722  0176  087C               	movf	_Sw,w
  5723  0177  3E03               	addlw	3
  5724  0178  0086               	movwf	6
  5725  0179  3001               	movlw	1	; select bank2/3
  5726  017A  0087               	movwf	7
  5727  017B  3000               	movlw	0
  5728  017C  3FC0               	movwi [0]fsr1
  5729  017D  3FC1               	movwi [1]fsr1
  5730                           
  5731                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5732  017E  087C               	movf	_Sw,w
  5733  017F  0086               	movwf	6
  5734  0180  3001               	movlw	1	; select bank2/3
  5735  0181  0087               	movwf	7
  5736  0182  1181               	bcf	1,3
  5737                           
  5738                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5739  0183  087C               	movf	_Sw,w
  5740  0184  3E05               	addlw	5
  5741  0185  0086               	movwf	6
  5742  0186  3001               	movlw	1	; select bank2/3
  5743  0187  0087               	movwf	7
  5744  0188  3000               	movlw	0
  5745  0189  3FC0               	movwi [0]fsr1
  5746  018A  3FC1               	movwi [1]fsr1
  5747                           
  5748                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5749  018B  087C               	movf	_Sw,w
  5750  018C  0086               	movwf	6
  5751  018D  3001               	movlw	1	; select bank2/3
  5752  018E  0087               	movwf	7
  5753  018F  1201               	bcf	1,4
  5754                           
  5755                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5756  0190  087C               	movf	_Sw,w
  5757  0191  3E07               	addlw	7
  5758  0192  0086               	movwf	6
  5759  0193  3001               	movlw	1	; select bank2/3
  5760  0194  0087               	movwf	7
  5761  0195  3000               	movlw	0
  5762  0196  3FC0               	movwi [0]fsr1
  5763  0197  3FC1               	movwi [1]fsr1
  5764                           
  5765                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5766  0198  087C               	movf	_Sw,w
  5767  0199  0086               	movwf	6
  5768  019A  3001               	movlw	1	; select bank2/3
  5769  019B  0087               	movwf	7
  5770  019C  1281               	bcf	1,5
  5771                           
  5772                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5773  019D  0021               	movlb	1	; select bank1
  5774  019E  1852               	btfsc	_SwDetect^(0+128),0
  5775  019F  29A5               	goto	l7245
  5776                           
  5777                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5778  01A0  0020               	movlb	0	; select bank0
  5779  01A1  0833               	movf	setSw_Main@sw,w
  5780  01A2  3194  24C6  3180   	fcall	_setDimmerLights_SwOff
  5781  01A5                     l7245:	
  5782                           
  5783                           ;Switch_B1.c: 221: }
  5784                           ;Switch_B1.c: 224: setRF_Learn(0);
  5785  01A5  3000               	movlw	0
  5786  01A6  319E  266D         	fcall	_setRF_Learn
  5787                           
  5788                           ;Switch_B1.c: 226: }
  5789                           ;Switch_B1.c: 227: }
  5790                           ;Switch_B1.c: 228: }
  5791                           ;Switch_B1.c: 229: } else {
  5792  01A8  0008               	return
  5793  01A9                     l2390:	
  5794                           
  5795                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5796  01A9  0021               	movlb	1	; select bank1
  5797  01AA  1C20               	btfss	_myMain^(0+128),0
  5798  01AB  0008               	return
  5799                           
  5800                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5801  01AC  087C               	movf	_Sw,w
  5802  01AD  0086               	movwf	6
  5803  01AE  3001               	movlw	1	; select bank2/3
  5804  01AF  0087               	movwf	7
  5805  01B0  1401               	bsf	1,0
  5806  01B1  0008               	return
  5807  01B2                     __end_of_setSw_Main:	
  5808                           
  5809                           	psect	text14
  5810  1E6D                     __ptext14:	
  5811 ;; *************** function _setRF_Learn *****************
  5812 ;; Defined at:
  5813 ;;		line 23 in file "../src/RF_Control_B1.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  command         1    wreg     unsigned char 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  command         1    1[BANK0 ] unsigned char 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;		None               void
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;Total ram usage:        2 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    5
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_setSw_Main
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _setRF_Learn
  5843  1E6D                     _setRF_Learn:	
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5847                           ;setRF_Learn@command stored from wreg
  5848  1E6D  0020               	movlb	0	; select bank0
  5849  1E6E  00A1               	movwf	setRF_Learn@command
  5850                           
  5851                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5852  1E6F  0821               	movf	setRF_Learn@command,w
  5853  1E70  3A01               	xorlw	1
  5854  1E71  3000               	movlw	0
  5855  1E72  1903               	skipnz
  5856  1E73  3001               	movlw	1
  5857  1E74  00A0               	movwf	??_setRF_Learn
  5858  1E75  0EA0               	swapf	??_setRF_Learn,f
  5859  1E76  0DA0               	rlf	??_setRF_Learn,f
  5860  1E77  0DA0               	rlf	??_setRF_Learn,f
  5861  1E78  0021               	movlb	1	; select bank1
  5862  1E79  083C               	movf	_RF1^(0+128),w
  5863  1E7A  0020               	movlb	0	; select bank0
  5864  1E7B  0620               	xorwf	??_setRF_Learn,w
  5865  1E7C  39BF               	andlw	-65
  5866  1E7D  0620               	xorwf	??_setRF_Learn,w
  5867  1E7E  0021               	movlb	1	; select bank1
  5868  1E7F  00BC               	movwf	_RF1^(0+128)
  5869  1E80  0008               	return
  5870  1E81                     __end_of_setRF_Learn:	
  5871                           
  5872                           	psect	text15
  5873  12F8                     __ptext15:	
  5874 ;; *************** function _setDimmerLights_AdjControl *****************
  5875 ;; Defined at:
  5876 ;;		line 558 in file "../src/Dimmer_B1.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  sw              1    wreg     unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  sw              1    8[BANK0 ] unsigned char 
  5881 ;;  idle            1    6[BANK0 ] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;		None               void
  5884 ;; Registers used:
  5885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;Total ram usage:        4 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    7
  5898 ;; This function calls:
  5899 ;;		_DimmerLightsPointSelect
  5900 ;;		_getAll_DimmerLights_AdjGO
  5901 ;;		_setDimmerLights_TriggerAdj
  5902 ;; This function is called by:
  5903 ;;		_setSw_Main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _setDimmerLights_AdjControl
  5909  12F8                     _setDimmerLights_AdjControl:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5913                           ;setDimmerLights_AdjControl@sw stored from wreg
  5914  12F8  0020               	movlb	0	; select bank0
  5915  12F9  00A8               	movwf	setDimmerLights_AdjControl@sw
  5916                           
  5917                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  5918  12FA  0828               	movf	setDimmerLights_AdjControl@sw,w
  5919  12FB  319C  24C8  3192   	fcall	_DimmerLightsPointSelect
  5920                           
  5921                           ;Dimmer_B1.c: 560: char idle = 0;
  5922  12FE  0020               	movlb	0	; select bank0
  5923  12FF  01A6               	clrf	setDimmerLights_AdjControl@idle
  5924                           
  5925                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5926  1300  01A7               	clrf	_setDimmerLights_AdjControl$2402
  5927  1301  319C  24A8  3192   	fcall	_getAll_DimmerLights_AdjGO
  5928  1304  3A01               	xorlw	1
  5929  1305  1D03               	skipz
  5930  1306  2B0D               	goto	l6413
  5931  1307  0022               	movlb	2	; select bank2
  5932  1308  1CBE               	btfss	_Dimmer^(0+256),1
  5933  1309  2B0D               	goto	l6413
  5934  130A  0020               	movlb	0	; select bank0
  5935  130B  01A7               	clrf	_setDimmerLights_AdjControl$2402
  5936  130C  0AA7               	incf	_setDimmerLights_AdjControl$2402,f
  5937  130D                     l6413:	
  5938  130D  0020               	movlb	0	; select bank0
  5939  130E  0827               	movf	_setDimmerLights_AdjControl$2402,w
  5940  130F  00A5               	movwf	??_setDimmerLights_AdjControl
  5941  1310  0825               	movf	??_setDimmerLights_AdjControl,w
  5942  1311  00A6               	movwf	setDimmerLights_AdjControl@idle
  5943                           
  5944                           ;Dimmer_B1.c: 564: if (idle == 0) {
  5945  1312  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5946  1313  1D03               	skipz
  5947  1314  0008               	return
  5948                           
  5949                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  5950  1315  086F               	movf	_DimmerLights,w
  5951  1316  3E09               	addlw	9
  5952  1317  0086               	movwf	6
  5953  1318  3001               	movlw	1	; select bank2/3
  5954  1319  0087               	movwf	7
  5955  131A  1F01               	btfss	1,6
  5956  131B  0008               	return
  5957                           
  5958                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  5959  131C  086F               	movf	_DimmerLights,w
  5960  131D  3E09               	addlw	9
  5961  131E  0086               	movwf	6
  5962  131F  3001               	movlw	1	; select bank2/3
  5963  1320  0087               	movwf	7
  5964  1321  1781               	bsf	1,7
  5965                           
  5966                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  5967  1322  086F               	movf	_DimmerLights,w
  5968  1323  0086               	movwf	6
  5969  1324  3001               	movlw	1	; select bank2/3
  5970  1325  0087               	movwf	7
  5971  1326  1681               	bsf	1,5
  5972                           
  5973                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  5974  1327  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5975  1328  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5976  1329  0828               	movf	setDimmerLights_AdjControl@sw,w
  5977  132A  319F  275F         	fcall	_setDimmerLights_TriggerAdj
  5978  132C  0008               	return
  5979  132D                     __end_of_setDimmerLights_AdjControl:	
  5980                           
  5981                           	psect	text16
  5982  1DFF                     __ptext16:	
  5983 ;; *************** function _getSw_KeyStatus *****************
  5984 ;; Defined at:
  5985 ;;		line 237 in file "../src/Switch_B1.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  sw              1    wreg     unsigned char 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  sw              1    0[COMMON] unsigned char 
  5990 ;;  status          1    1[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      unsigned char 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;Total ram usage:        3 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    5
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_setSw_Main
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _getSw_KeyStatus
  6016  1DFF                     _getSw_KeyStatus:	
  6017                           
  6018                           ;Switch_B1.c: 238: char status = 0;
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6022  1DFF  0020               	movlb	0	; select bank0
  6023  1E00  01A1               	clrf	getSw_KeyStatus@status
  6024                           
  6025                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6026  1E01  01A2               	clrf	_getSw_KeyStatus$6527
  6027  1E02  0AA2               	incf	_getSw_KeyStatus$6527,f
  6028  1E03  1F0C               	btfss	12,6	;volatile
  6029  1E04  1A0C               	btfsc	12,4	;volatile
  6030  1E05  2E0A               	goto	l6595
  6031  1E06  1C0C               	btfss	12,0	;volatile
  6032  1E07  1B8C               	btfsc	12,7	;volatile
  6033  1E08  2E0A               	goto	l6595
  6034  1E09  01A2               	clrf	_getSw_KeyStatus$6527
  6035  1E0A                     l6595:	
  6036  1E0A  0822               	movf	_getSw_KeyStatus$6527,w
  6037  1E0B  00A0               	movwf	??_getSw_KeyStatus
  6038  1E0C  0820               	movf	??_getSw_KeyStatus,w
  6039  1E0D  00A1               	movwf	getSw_KeyStatus@status
  6040                           
  6041                           ;Switch_B1.c: 261: return status;
  6042  1E0E  0821               	movf	getSw_KeyStatus@status,w
  6043  1E0F  0008               	return
  6044  1E10                     __end_of_getSw_KeyStatus:	
  6045                           
  6046                           	psect	text17
  6047  1CFF                     __ptext17:	
  6048 ;; *************** function _SwPointSelect *****************
  6049 ;; Defined at:
  6050 ;;		line 25 in file "../src/Switch_B1.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  sw              1    wreg     unsigned char 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;  sw              1    1[BANK0 ] unsigned char 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;		None               void
  6057 ;; Registers used:
  6058 ;;		wreg
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;Total ram usage:        2 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    5
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_setSw_Main
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _SwPointSelect
  6080  1CFF                     _SwPointSelect:	
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _SwPointSelect: [wreg]
  6084                           ;SwPointSelect@sw stored from wreg
  6085  1CFF  0020               	movlb	0	; select bank0
  6086  1D00  00A1               	movwf	SwPointSelect@sw
  6087                           
  6088                           ;Switch_B1.c: 28: if (sw == 1) {
  6089  1D01  0821               	movf	SwPointSelect@sw,w
  6090  1D02  3A01               	xorlw	1
  6091  1D03  1D03               	skipz
  6092  1D04  0008               	return
  6093                           
  6094                           ;Switch_B1.c: 29: Sw = &Sw1;
  6095  1D05  30D4               	movlw	_Sw1& (0+255)
  6096  1D06  00A0               	movwf	??_SwPointSelect
  6097  1D07  0820               	movf	??_SwPointSelect,w
  6098  1D08  00FC               	movwf	_Sw
  6099  1D09  0008               	return
  6100  1D0A                     __end_of_SwPointSelect:	
  6101                           
  6102                           	psect	text18
  6103  081C                     __ptext18:	
  6104 ;; *************** function _setMain_Exception *****************
  6105 ;; Defined at:
  6106 ;;		line 278 in file "../src/Main_B1.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  command         1    wreg     unsigned char 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  command         1   28[BANK0 ] unsigned char 
  6111 ;;  status          1   27[BANK0 ] unsigned char 
  6112 ;;  buz             1   24[BANK0 ] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;		None               void
  6115 ;; Registers used:
  6116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;Total ram usage:        7 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:   10
  6129 ;; This function calls:
  6130 ;;		_getDimmerLights_Line
  6131 ;;		_getMain_LightsStatus
  6132 ;;		_setBuz
  6133 ;;		_setDimmerLights_ErrorClose
  6134 ;;		_setLED
  6135 ;; This function is called by:
  6136 ;;		_Switch_Main
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           
  6141                           ;psect for function _setMain_Exception
  6142  081C                     _setMain_Exception:	
  6143                           
  6144                           ;incstack = 0
  6145                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6146                           ;setMain_Exception@command stored from wreg
  6147  081C  0020               	movlb	0	; select bank0
  6148  081D  00BC               	movwf	setMain_Exception@command
  6149                           
  6150                           ;Main_B1.c: 279: char status = 0, buz = 0;
  6151  081E  01BB               	clrf	setMain_Exception@status
  6152  081F  01B8               	clrf	setMain_Exception@buz
  6153                           
  6154                           ;Main_B1.c: 296: status = command == 3 ? getDimmerLights_Line() : 255;
  6155  0820  083C               	movf	setMain_Exception@command,w
  6156  0821  3A03               	xorlw	3
  6157  0822  1903               	skipnz
  6158  0823  2828               	goto	l6919
  6159  0824  30FF               	movlw	255
  6160  0825  00B9               	movwf	_setMain_Exception$3721
  6161  0826  3000               	movlw	0
  6162  0827  2831               	goto	L3
  6163  0828                     l6919:	
  6164  0828  319C  24F4  3188   	fcall	_getDimmerLights_Line
  6165  082B  0020               	movlb	0	; select bank0
  6166  082C  00B6               	movwf	??_setMain_Exception
  6167  082D  01B7               	clrf	??_setMain_Exception+1
  6168  082E  0836               	movf	??_setMain_Exception,w
  6169  082F  00B9               	movwf	_setMain_Exception$3721
  6170  0830  0837               	movf	??_setMain_Exception+1,w
  6171  0831                     L3:	
  6172  0831  00BA               	movwf	_setMain_Exception$3721+1
  6173  0832  0839               	movf	_setMain_Exception$3721,w
  6174  0833  00B6               	movwf	??_setMain_Exception
  6175  0834  0836               	movf	??_setMain_Exception,w
  6176  0835  00BB               	movwf	setMain_Exception@status
  6177                           
  6178                           ;Main_B1.c: 298: if (command == 0) {
  6179  0836  08BC               	movf	setMain_Exception@command,f
  6180  0837  1D03               	skipz
  6181  0838  283B               	goto	l6927
  6182                           
  6183                           ;Main_B1.c: 299: setLED(99, 10);
  6184  0839  300A               	movlw	10
  6185  083A  283D               	goto	L4
  6186  083B                     l6927:	
  6187                           ;Main_B1.c: 300: } else {
  6188                           
  6189                           
  6190                           ;Main_B1.c: 301: setLED(99, 11);
  6191  083B  300B               	movlw	11
  6192  083C  0020               	movlb	0	; select bank0
  6193  083D                     L4:	
  6194  083D  00B6               	movwf	??_setMain_Exception
  6195  083E  0836               	movf	??_setMain_Exception,w
  6196  083F  00A2               	movwf	setLED@command
  6197  0840  3063               	movlw	99
  6198  0841  3193  232D  3188   	fcall	_setLED
  6199                           
  6200                           ;Main_B1.c: 302: }
  6201                           ;Main_B1.c: 304: if (command != 0) {
  6202  0844  0020               	movlb	0	; select bank0
  6203  0845  083C               	movf	setMain_Exception@command,w
  6204  0846  1903               	btfsc	3,2
  6205  0847  0008               	return
  6206                           
  6207                           ;Main_B1.c: 305: switch (command) {
  6208  0848  2869               	goto	l6943
  6209  0849                     l6933:	
  6210                           ;Main_B1.c: 306: case 2:
  6211                           
  6212                           
  6213                           ;Main_B1.c: 307: if (getMain_LightsStatus() == 1) {
  6214  0849  3191  21A5  3188   	fcall	_getMain_LightsStatus
  6215  084C  3A01               	xorlw	1
  6216  084D  1D03               	skipz
  6217  084E  2872               	goto	l6945
  6218                           
  6219                           ;Main_B1.c: 308: setBuz(10, 300);
  6220  084F  302C               	movlw	44
  6221  0850  0020               	movlb	0	; select bank0
  6222  0851  00A9               	movwf	setBuz@time
  6223  0852  3001               	movlw	1
  6224  0853  00AA               	movwf	setBuz@time+1
  6225  0854  300A               	movlw	10
  6226  0855  3196  26F2  3188   	fcall	_setBuz
  6227                           
  6228                           ;Main_B1.c: 309: }
  6229                           ;Main_B1.c: 310: break;
  6230  0858  2872               	goto	l6945
  6231  0859                     l6937:	
  6232                           ;Main_B1.c: 311: case 3:
  6233                           
  6234                           
  6235                           ;Main_B1.c: 312: if (getMain_LightsStatus() == 1) {
  6236  0859  3191  21A5  3188   	fcall	_getMain_LightsStatus
  6237  085C  3A01               	xorlw	1
  6238  085D  1D03               	skipz
  6239  085E  2872               	goto	l6945
  6240                           
  6241                           ;Main_B1.c: 313: setBuz(5, 300);
  6242  085F  302C               	movlw	44
  6243  0860  0020               	movlb	0	; select bank0
  6244  0861  00A9               	movwf	setBuz@time
  6245  0862  3001               	movlw	1
  6246  0863  00AA               	movwf	setBuz@time+1
  6247  0864  3005               	movlw	5
  6248  0865  3196  26F2  3188   	fcall	_setBuz
  6249                           
  6250                           ;Main_B1.c: 316: }
  6251                           
  6252                           ;Main_B1.c: 314: }
  6253                           ;Main_B1.c: 315: break;
  6254  0868  2872               	goto	l6945
  6255  0869                     l6943:	
  6256  0869  0020               	movlb	0	; select bank0
  6257  086A  083C               	movf	setMain_Exception@command,w
  6258                           
  6259                           ; Switch size 1, requested type "space"
  6260                           ; Number of cases is 2, Range of values is 2 to 3
  6261                           ; switch strategies available:
  6262                           ; Name         Instructions Cycles
  6263                           ; simple_byte            7     4 (average)
  6264                           ; direct_byte           13     9 (fixed)
  6265                           ; jumptable            263     9 (fixed)
  6266                           ;	Chosen strategy is simple_byte
  6267  086B  3A02               	xorlw	2	; case 2
  6268  086C  1903               	skipnz
  6269  086D  2849               	goto	l6933
  6270  086E  3A01               	xorlw	1	; case 3
  6271  086F  1903               	skipnz
  6272  0870  2859               	goto	l6937
  6273  0871  2872               	goto	l6945
  6274  0872                     l6945:	
  6275                           
  6276                           ;Main_B1.c: 317: setDimmerLights_ErrorClose(status);
  6277  0872  0020               	movlb	0	; select bank0
  6278  0873  083B               	movf	setMain_Exception@status,w
  6279  0874  3196  2642         	fcall	_setDimmerLights_ErrorClose
  6280  0876  0020               	movlb	0	; select bank0
  6281  0877  0008               	return
  6282  0878                     __end_of_setMain_Exception:	
  6283                           
  6284                           	psect	text19
  6285  1CF4                     __ptext19:	
  6286 ;; *************** function _getDimmerLights_Line *****************
  6287 ;; Defined at:
  6288 ;;		line 707 in file "../src/Dimmer_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  line            1    0[BANK0 ] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      unsigned char 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:        1 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    5
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_setMain_Exception
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _getDimmerLights_Line
  6318  1CF4                     _getDimmerLights_Line:	
  6319                           
  6320                           ;Dimmer_B1.c: 708: char line = 0;
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6324  1CF4  0020               	movlb	0	; select bank0
  6325  1CF5  01A0               	clrf	getDimmerLights_Line@line
  6326                           
  6327                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  6328  1CF6  0023               	movlb	3	; select bank3
  6329  1CF7  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6330  1CF8  2CFC               	goto	l6435
  6331                           
  6332                           ;Dimmer_B1.c: 711: line = 1;
  6333  1CF9  0020               	movlb	0	; select bank0
  6334  1CFA  01A0               	clrf	getDimmerLights_Line@line
  6335  1CFB  0AA0               	incf	getDimmerLights_Line@line,f
  6336  1CFC                     l6435:	
  6337                           
  6338                           ;Dimmer_B1.c: 712: }
  6339                           ;Dimmer_B1.c: 724: return line;
  6340  1CFC  0020               	movlb	0	; select bank0
  6341  1CFD  0820               	movf	getDimmerLights_Line@line,w
  6342  1CFE  0008               	return
  6343  1CFF                     __end_of_getDimmerLights_Line:	
  6344                           
  6345                           	psect	text20
  6346  1C95                     __ptext20:	
  6347 ;; *************** function _Switch_Initialization *****************
  6348 ;; Defined at:
  6349 ;;		line 46 in file "../src/Switch_B1.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;		None               void
  6356 ;; Registers used:
  6357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:        0 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    8
  6370 ;; This function calls:
  6371 ;;		_TouchPower
  6372 ;;		_setSw_Initialization
  6373 ;; This function is called by:
  6374 ;;		_main
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           
  6379                           ;psect for function _Switch_Initialization
  6380  1C95                     _Switch_Initialization:	
  6381                           
  6382                           ;Switch_B1.c: 47: TouchPower();
  6383                           
  6384                           ;incstack = 0
  6385                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6386  1C95  319E  26AB  319C   	fcall	_TouchPower
  6387                           
  6388                           ;Switch_B1.c: 49: WPUB1 = 0;
  6389  1C98  0024               	movlb	4	; select bank4
  6390  1C99  108D               	bcf	13,1	;volatile
  6391                           
  6392                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6393  1C9A  3001               	movlw	1
  6394  1C9B  319D  25BC         	fcall	_setSw_Initialization
  6395  1C9D  0008               	return
  6396  1C9E                     __end_of_Switch_Initialization:	
  6397                           
  6398                           	psect	text21
  6399  1DBC                     __ptext21:	
  6400 ;; *************** function _setSw_Initialization *****************
  6401 ;; Defined at:
  6402 ;;		line 109 in file "../src/Switch_B1.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  sw              1    wreg     unsigned char 
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  sw              1    4[BANK0 ] unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;		None               void
  6409 ;; Registers used:
  6410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;Total ram usage:        1 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    7
  6423 ;; This function calls:
  6424 ;;		_setLED
  6425 ;; This function is called by:
  6426 ;;		_Switch_Initialization
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           
  6431                           ;psect for function _setSw_Initialization
  6432  1DBC                     _setSw_Initialization:	
  6433                           
  6434                           ;incstack = 0
  6435                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6436                           ;setSw_Initialization@sw stored from wreg
  6437  1DBC  0020               	movlb	0	; select bank0
  6438  1DBD  00A4               	movwf	setSw_Initialization@sw
  6439                           
  6440                           ;Switch_B1.c: 110: setLED(sw, 1);
  6441  1DBE  01A2               	clrf	setLED@command
  6442  1DBF  0AA2               	incf	setLED@command,f
  6443  1DC0  0824               	movf	setSw_Initialization@sw,w
  6444  1DC1  3193  232D  319D   	fcall	_setLED
  6445                           
  6446                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6447  1DC4  0020               	movlb	0	; select bank0
  6448  1DC5  01A2               	clrf	setLED@command
  6449  1DC6  0AA2               	incf	setLED@command,f
  6450  1DC7  0824               	movf	setSw_Initialization@sw,w
  6451  1DC8  3E01               	addlw	1
  6452  1DC9  3193  232D         	fcall	_setLED
  6453  1DCB  0008               	return
  6454  1DCC                     __end_of_setSw_Initialization:	
  6455                           
  6456                           	psect	text22
  6457  1EAB                     __ptext22:	
  6458 ;; *************** function _TouchPower *****************
  6459 ;; Defined at:
  6460 ;;		line 10 in file "../src/Switch_B1.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;		None               void
  6467 ;; Registers used:
  6468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:        0 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    6
  6481 ;; This function calls:
  6482 ;;		_Timeout_Counter
  6483 ;;		_set_TimeoutCleared
  6484 ;; This function is called by:
  6485 ;;		_Switch_Initialization
  6486 ;;		_Switch_Main
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function _TouchPower
  6492  1EAB                     _TouchPower:	
  6493                           
  6494                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6495                           
  6496                           ;incstack = 0
  6497                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6498  1EAB  0020               	movlb	0	; select bank0
  6499  1EAC  180D               	btfsc	13,0	;volatile
  6500  1EAD  0008               	return
  6501                           
  6502                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6503  1EAE  0021               	movlb	1	; select bank1
  6504  1EAF  1C20               	btfss	_myMain^(0+128),0
  6505  1EB0  0008               	return
  6506  1EB1  2EB7               	goto	l7151
  6507  1EB2                     l2366:	
  6508                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6509                           
  6510                           
  6511                           ;Switch_B1.c: 14: RB0 = 1;
  6512  1EB2  0020               	movlb	0	; select bank0
  6513  1EB3  140D               	bsf	13,0	;volatile
  6514                           
  6515                           ;Switch_B1.c: 15: Timeout_Counter();
  6516  1EB4  319E  2681  319E   	fcall	_Timeout_Counter
  6517  1EB7                     l7151:	
  6518  1EB7  0020               	movlb	0	; select bank0
  6519  1EB8  180D               	btfsc	13,0	;volatile
  6520  1EB9  2EBD               	goto	l7155
  6521  1EBA  0021               	movlb	1	; select bank1
  6522  1EBB  1D2D               	btfss	(_myMain^(0+128)+13),2
  6523  1EBC  2EB2               	goto	l2366
  6524  1EBD                     l7155:	
  6525                           
  6526                           ;Switch_B1.c: 16: }
  6527                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6528  1EBD  319C  2450         	fcall	_set_TimeoutCleared
  6529  1EBF  0008               	return
  6530  1EC0                     __end_of_TouchPower:	
  6531                           
  6532                           	psect	text23
  6533  1C23                     __ptext23:	
  6534 ;; *************** function _RF_Main *****************
  6535 ;; Defined at:
  6536 ;;		line 16 in file "../src/RF_Control_B1.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;		None               void
  6543 ;; Registers used:
  6544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;Total ram usage:        0 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:   14
  6557 ;; This function calls:
  6558 ;;		_setRF_Main
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _RF_Main
  6566  1C23                     _RF_Main:	
  6567                           
  6568                           ;RF_Control_B1.c: 18: setRF_Main();
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6572  1C23  3185  2523         	fcall	_setRF_Main
  6573  1C25  0008               	return
  6574  1C26                     __end_of_RF_Main:	
  6575                           
  6576                           	psect	text24
  6577  0523                     __ptext24:	
  6578 ;; *************** function _setRF_Main *****************
  6579 ;; Defined at:
  6580 ;;		line 52 in file "../src/RF_Control_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  error           1    2[BANK1 ] unsigned char 
  6585 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6586 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:        4 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:   13
  6603 ;; This function calls:
  6604 ;;		_CC2500_ReadStatus
  6605 ;;		_CC2500_RxData
  6606 ;;		_CC2500_TxData
  6607 ;;		_CC2500_WriteCommand
  6608 ;;		_getBuz_GO
  6609 ;;		_getMain_All_Error_Status
  6610 ;;		_getRF_KeyStatus
  6611 ;;		_getRxData
  6612 ;; This function is called by:
  6613 ;;		_RF_Main
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _setRF_Main
  6619  0523                     _setRF_Main:	
  6620                           
  6621                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6622                           
  6623                           ;incstack = 0
  6624                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6625  0523  0021               	movlb	1	; select bank1
  6626  0524  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6627  0525  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6628  0526  01EB               	clrf	setRF_Main@error^(0+128)
  6629                           
  6630                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6631  0527  1C3C               	btfss	_RF1^(0+128),0
  6632  0528  2E0F               	goto	l2003
  6633                           
  6634                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6635  0529  319D  25DD  3185   	fcall	_getBuz_GO
  6636  052C  0020               	movlb	0	; select bank0
  6637  052D  0821               	movf	?_getBuz_GO+1,w
  6638  052E  0420               	iorwf	?_getBuz_GO,w
  6639  052F  1D03               	skipz
  6640  0530  0008               	return
  6641                           
  6642                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6643  0531  3000               	movlw	0
  6644  0532  3192  2292  3185   	fcall	_getMain_All_Error_Status
  6645  0535  3800               	iorlw	0
  6646  0536  1D03               	skipz
  6647  0537  2D4C               	goto	l2005
  6648                           
  6649                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6650  0538  319D  25EE  3185   	fcall	_getRF_KeyStatus
  6651  053B  3A01               	xorlw	1
  6652  053C  3000               	movlw	0
  6653  053D  1903               	skipnz
  6654  053E  3001               	movlw	1
  6655  053F  0020               	movlb	0	; select bank0
  6656  0540  00ED               	movwf	??_setRF_Main
  6657  0541  0CED               	rrf	??_setRF_Main,f
  6658  0542  0CED               	rrf	??_setRF_Main,f
  6659  0543  0021               	movlb	1	; select bank1
  6660  0544  083C               	movf	_RF1^(0+128),w
  6661  0545  0020               	movlb	0	; select bank0
  6662  0546  066D               	xorwf	??_setRF_Main,w
  6663  0547  397F               	andlw	-129
  6664  0548  066D               	xorwf	??_setRF_Main,w
  6665  0549  0021               	movlb	1	; select bank1
  6666  054A  00BC               	movwf	_RF1^(0+128)
  6667                           
  6668                           ;RF_Control_B1.c: 65: } else {
  6669  054B  2D4E               	goto	l2006
  6670  054C                     l2005:	
  6671                           
  6672                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6673  054C  0021               	movlb	1	; select bank1
  6674  054D  13BC               	bcf	_RF1^(0+128),7
  6675  054E                     l2006:	
  6676                           
  6677                           ;RF_Control_B1.c: 70: }
  6678                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6679  054E  1BBC               	btfsc	_RF1^(0+128),7
  6680  054F  1B3C               	btfsc	_RF1^(0+128),6
  6681  0550  2D56               	goto	l2007
  6682                           
  6683                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6684  0551  01BE               	clrf	(_RF1^(0+128)+2)
  6685  0552  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6686                           
  6687                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6688  0553  14BD               	bsf	(_RF1^(0+128)+1),1
  6689                           
  6690                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6691  0554  11BC               	bcf	_RF1^(0+128),3
  6692                           
  6693                           ;RF_Control_B1.c: 76: } else {
  6694  0555  0008               	return
  6695  0556                     l2007:	
  6696                           
  6697                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6698  0556  18BD               	btfsc	(_RF1^(0+128)+1),1
  6699  0557  1B3C               	btfsc	_RF1^(0+128),6
  6700  0558  2D6D               	goto	l7067
  6701                           
  6702                           ;RF_Control_B1.c: 78: RF1.Count++;
  6703  0559  3001               	movlw	1
  6704  055A  07BE               	addwf	(_RF1^(0+128)+2),f
  6705  055B  3000               	movlw	0
  6706  055C  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6707                           
  6708                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6709  055D  3002               	movlw	2
  6710  055E  3EBC               	addlw	_RF1& (0+255)
  6711  055F  0086               	movwf	6
  6712  0560  0187               	clrf	7
  6713  0561  3F40               	moviw [0]fsr1
  6714  0562  0643               	xorwf	(_RF1^(0+128)+7),w
  6715  0563  1D03               	skipz
  6716  0564  2D67               	goto	u6625
  6717  0565  3F41               	moviw [1]fsr1
  6718  0566  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6719  0567                     u6625:	
  6720  0567  1D03               	skipz
  6721  0568  2DDC               	goto	l7119
  6722                           
  6723                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6724  0569  01BE               	clrf	(_RF1^(0+128)+2)
  6725  056A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6726                           
  6727                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6728  056B  10BD               	bcf	(_RF1^(0+128)+1),1
  6729                           
  6730                           ;RF_Control_B1.c: 82: }
  6731                           ;RF_Control_B1.c: 83: } else {
  6732  056C  2DDC               	goto	l7119
  6733  056D                     l7067:	
  6734                           
  6735                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6736  056D  01BE               	clrf	(_RF1^(0+128)+2)
  6737  056E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6738                           
  6739                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6740  056F  10BD               	bcf	(_RF1^(0+128)+1),1
  6741                           
  6742                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6743  0570  193C               	btfsc	_RF1^(0+128),2
  6744  0571  1B3C               	btfsc	_RF1^(0+128),6
  6745  0572  2D8E               	goto	l2012
  6746                           
  6747                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6748  0573  113C               	bcf	_RF1^(0+128),2
  6749                           
  6750                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6751  0574  11BC               	bcf	_RF1^(0+128),3
  6752                           
  6753                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6754  0575  10BC               	bcf	_RF1^(0+128),1
  6755                           
  6756                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6757  0576  303B               	movlw	59
  6758  0577  3190  209B  3185   	fcall	_CC2500_ReadStatus
  6759                           
  6760                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6761  057A  0021               	movlb	1	; select bank1
  6762  057B  0856               	movf	_s_data^(0+128),w
  6763  057C  1903               	btfsc	3,2
  6764  057D  2D8A               	goto	l2013
  6765                           
  6766                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6767  057E  3036               	movlw	54
  6768  057F  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6769                           
  6770                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6771  0582  303B               	movlw	59
  6772  0583  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6773                           
  6774                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6775  0586  303A               	movlw	58
  6776  0587  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6777  058A                     l2013:	
  6778                           
  6779                           ;RF_Control_B1.c: 97: }
  6780                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6781  058A  318A  2258  3185   	fcall	_CC2500_TxData
  6782                           
  6783                           ;RF_Control_B1.c: 100: } else {
  6784  058D  2DDC               	goto	l7119
  6785  058E                     l2012:	
  6786                           
  6787                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6788  058E  1DBC               	btfss	_RF1^(0+128),3
  6789  058F  2DC7               	goto	l2015
  6790                           
  6791                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6792  0590  318B  2388  3185   	fcall	_CC2500_RxData
  6793                           
  6794                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6795  0593  0021               	movlb	1	; select bank1
  6796  0594  1CBC               	btfss	_RF1^(0+128),1
  6797  0595  2DDC               	goto	l7119
  6798                           
  6799                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6800  0596  10BC               	bcf	_RF1^(0+128),1
  6801                           
  6802                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6803  0597  12BD               	bcf	(_RF1^(0+128)+1),5
  6804                           
  6805                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6806  0598  01C6               	clrf	(_RF1^(0+128)+10)
  6807  0599  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6808                           
  6809                           ;RF_Control_B1.c: 117: getRxData();
  6810  059A  318B  23F9  3185   	fcall	_getRxData
  6811                           
  6812                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  6813  059D  0021               	movlb	1	; select bank1
  6814  059E  14BD               	bsf	(_RF1^(0+128)+1),1
  6815                           
  6816                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  6817  059F  1DBD               	btfss	(_RF1^(0+128)+1),3
  6818  05A0  2DAE               	goto	l7103
  6819                           
  6820                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  6821  05A1  3000               	movlw	0
  6822  05A2  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6823  05A3  300B               	movlw	11
  6824  05A4  1903               	skipnz
  6825  05A5  0243               	subwf	(_RF1^(0+128)+7),w
  6826  05A6  1C03               	skipc
  6827  05A7  2DAC               	goto	l7101
  6828                           
  6829                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  6830  05A8  300A               	movlw	10
  6831  05A9  00C3               	movwf	(_RF1^(0+128)+7)
  6832  05AA  3000               	movlw	0
  6833  05AB  00C4               	movwf	(_RF1^(0+128)+8)
  6834  05AC                     l7101:	
  6835                           
  6836                           ;RF_Control_B1.c: 125: }
  6837                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6838  05AC  01C0               	clrf	(_RF1^(0+128)+4)
  6839                           
  6840                           ;RF_Control_B1.c: 127: } else {
  6841  05AD  2DDC               	goto	l7119
  6842  05AE                     l7103:	
  6843                           
  6844                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6845  05AE  3001               	movlw	1
  6846  05AF  0020               	movlb	0	; select bank0
  6847  05B0  00ED               	movwf	??_setRF_Main
  6848  05B1  086D               	movf	??_setRF_Main,w
  6849  05B2  0021               	movlb	1	; select bank1
  6850  05B3  07C0               	addwf	(_RF1^(0+128)+4),f
  6851                           
  6852                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6853  05B4  0840               	movf	(_RF1^(0+128)+4),w
  6854  05B5  3A02               	xorlw	2
  6855  05B6  1D03               	skipz
  6856  05B7  2DDC               	goto	l7119
  6857                           
  6858                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6859  05B8  01C0               	clrf	(_RF1^(0+128)+4)
  6860                           
  6861                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6862  05B9  01C1               	clrf	(_RF1^(0+128)+5)
  6863  05BA  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6864                           
  6865                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  6866  05BB  3000               	movlw	0
  6867  05BC  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6868  05BD  30C8               	movlw	200
  6869  05BE  1903               	skipnz
  6870  05BF  0243               	subwf	(_RF1^(0+128)+7),w
  6871  05C0  1803               	skipnc
  6872  05C1  2DDC               	goto	l7119
  6873                           
  6874                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6875  05C2  300A               	movlw	10
  6876  05C3  07C3               	addwf	(_RF1^(0+128)+7),f
  6877  05C4  3000               	movlw	0
  6878  05C5  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6879                           
  6880                           ;RF_Control_B1.c: 134: }
  6881                           ;RF_Control_B1.c: 135: }
  6882                           ;RF_Control_B1.c: 136: }
  6883                           ;RF_Control_B1.c: 137: }
  6884                           ;RF_Control_B1.c: 138: } else {
  6885  05C6  2DDC               	goto	l7119
  6886  05C7                     l2015:	
  6887                           
  6888                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6889  05C7  1DBC               	btfss	_RF1^(0+128),3
  6890  05C8  18BC               	btfsc	_RF1^(0+128),1
  6891  05C9  2DDC               	goto	l7119
  6892                           
  6893                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6894  05CA  15BC               	bsf	_RF1^(0+128),3
  6895                           
  6896                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6897  05CB  16BD               	bsf	(_RF1^(0+128)+1),5
  6898                           
  6899                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6900  05CC  3036               	movlw	54
  6901  05CD  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6902                           
  6903                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6904  05D0  303B               	movlw	59
  6905  05D1  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6906                           
  6907                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6908  05D4  303A               	movlw	58
  6909  05D5  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6910                           
  6911                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  6912  05D8  3034               	movlw	52
  6913  05D9  319E  26EF  3185   	fcall	_CC2500_WriteCommand
  6914  05DC                     l7119:	
  6915                           
  6916                           ;RF_Control_B1.c: 148: }
  6917                           ;RF_Control_B1.c: 150: }
  6918                           ;RF_Control_B1.c: 151: }
  6919                           ;RF_Control_B1.c: 152: }
  6920                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  6921  05DC  0021               	movlb	1	; select bank1
  6922  05DD  1DBC               	btfss	_RF1^(0+128),3
  6923  05DE  2DFD               	goto	l7131
  6924                           
  6925                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6926  05DF  3001               	movlw	1
  6927  05E0  07C1               	addwf	(_RF1^(0+128)+5),f
  6928  05E1  3000               	movlw	0
  6929  05E2  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  6930                           
  6931                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  6932  05E3  3005               	movlw	5
  6933  05E4  3EBC               	addlw	_RF1& (0+255)
  6934  05E5  0086               	movwf	6
  6935  05E6  0187               	clrf	7
  6936  05E7  3F40               	moviw [0]fsr1
  6937  05E8  3A64               	xorlw	100
  6938  05E9  1D03               	skipz
  6939  05EA  2DED               	goto	u6755
  6940  05EB  3F41               	moviw [1]fsr1
  6941  05EC  3A00               	xorlw	0
  6942  05ED                     u6755:	
  6943  05ED  1D03               	skipz
  6944  05EE  2DFD               	goto	l7131
  6945                           
  6946                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6947  05EF  01C1               	clrf	(_RF1^(0+128)+5)
  6948  05F0  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6949                           
  6950                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  6951  05F1  01C0               	clrf	(_RF1^(0+128)+4)
  6952                           
  6953                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  6954  05F2  3000               	movlw	0
  6955  05F3  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6956  05F4  300B               	movlw	11
  6957  05F5  1903               	skipnz
  6958  05F6  0243               	subwf	(_RF1^(0+128)+7),w
  6959  05F7  1C03               	skipc
  6960  05F8  2DFD               	goto	l7131
  6961                           
  6962                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  6963  05F9  300A               	movlw	10
  6964  05FA  02C3               	subwf	(_RF1^(0+128)+7),f
  6965  05FB  3000               	movlw	0
  6966  05FC  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6967  05FD                     l7131:	
  6968                           
  6969                           ;RF_Control_B1.c: 160: }
  6970                           ;RF_Control_B1.c: 161: }
  6971                           ;RF_Control_B1.c: 162: }
  6972                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  6973  05FD  1EBD               	btfss	(_RF1^(0+128)+1),5
  6974  05FE  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  6977  05FF  3001               	movlw	1
  6978  0600  07C6               	addwf	(_RF1^(0+128)+10),f
  6979  0601  3000               	movlw	0
  6980  0602  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6981                           
  6982                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  6983  0603  3075               	movlw	117
  6984  0604  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6985  0605  3030               	movlw	48
  6986  0606  1903               	skipnz
  6987  0607  0246               	subwf	(_RF1^(0+128)+10),w
  6988  0608  1C03               	skipc
  6989  0609  0008               	return
  6990                           
  6991                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  6992  060A  01C6               	clrf	(_RF1^(0+128)+10)
  6993  060B  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6994                           
  6995                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  6996  060C  11BC               	bcf	_RF1^(0+128),3
  6997                           
  6998                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  6999  060D  10BC               	bcf	_RF1^(0+128),1
  7000                           
  7001                           ;RF_Control_B1.c: 169: }
  7002                           ;RF_Control_B1.c: 170: }
  7003                           ;RF_Control_B1.c: 171: }
  7004                           ;RF_Control_B1.c: 172: }
  7005                           ;RF_Control_B1.c: 179: } else {
  7006  060E  0008               	return
  7007  060F                     l2003:	
  7008                           
  7009                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7010  060F  1C20               	btfss	_myMain^(0+128),0
  7011  0610  0008               	return
  7012                           
  7013                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7014  0611  143C               	bsf	_RF1^(0+128),0
  7015  0612  0008               	return
  7016  0613                     __end_of_setRF_Main:	
  7017                           
  7018                           	psect	text25
  7019  0BF9                     __ptext25:	
  7020 ;; *************** function _getRxData *****************
  7021 ;; Defined at:
  7022 ;;		line 269 in file "../src/RF_Control_B1.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  error           1   76[BANK0 ] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;		None               void
  7029 ;; Registers used:
  7030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        2 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:   12
  7043 ;; This function calls:
  7044 ;;		_getMain_All_Error_Status
  7045 ;;		_setControl_Lights_Table
  7046 ;;		_setLog_Code
  7047 ;; This function is called by:
  7048 ;;		_setRF_Main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _getRxData
  7054  0BF9                     _getRxData:	
  7055                           
  7056                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7060  0BF9  3000               	movlw	0
  7061  0BFA  3192  2292  318B   	fcall	_getMain_All_Error_Status
  7062  0BFD  0020               	movlb	0	; select bank0
  7063  0BFE  00EB               	movwf	??_getRxData
  7064  0BFF  086B               	movf	??_getRxData,w
  7065  0C00  00EC               	movwf	getRxData@error
  7066                           
  7067                           ;RF_Control_B1.c: 271: if (error == 0) {
  7068  0C01  08EC               	movf	getRxData@error,f
  7069  0C02  1D03               	skipz
  7070  0C03  0008               	return
  7071                           
  7072                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7073  0C04  0021               	movlb	1	; select bank1
  7074  0C05  1F3C               	btfss	_RF1^(0+128),6
  7075  0C06  2C17               	goto	l6543
  7076                           
  7077                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7078  0C07  0022               	movlb	2	; select bank2
  7079  0C08  08A0               	movf	_RF_Data^(0+256),f
  7080  0C09  1D03               	skipz
  7081  0C0A  2C14               	goto	l2054
  7082  0C0B  0821               	movf	(_RF_Data^(0+256)+1),w
  7083  0C0C  3A64               	xorlw	100
  7084  0C0D  1D03               	skipz
  7085  0C0E  2C14               	goto	l2054
  7086                           
  7087                           ;RF_Control_B1.c: 274: setLog_Code();
  7088  0C0F  3193  2399         	fcall	_setLog_Code
  7089                           
  7090                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7091  0C11  0021               	movlb	1	; select bank1
  7092  0C12  15BD               	bsf	(_RF1^(0+128)+1),3
  7093                           
  7094                           ;RF_Control_B1.c: 276: } else {
  7095  0C13  0008               	return
  7096  0C14                     l2054:	
  7097                           
  7098                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7099  0C14  0021               	movlb	1	; select bank1
  7100  0C15  11BD               	bcf	(_RF1^(0+128)+1),3
  7101                           
  7102                           ;RF_Control_B1.c: 278: }
  7103                           ;RF_Control_B1.c: 279: } else {
  7104  0C16  0008               	return
  7105  0C17                     l6543:	
  7106                           
  7107                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7108  0C17  0022               	movlb	2	; select bank2
  7109  0C18  08A0               	movf	_RF_Data^(0+256),f
  7110  0C19  1D03               	skipz
  7111  0C1A  2C55               	goto	l6565
  7112  0C1B  0821               	movf	(_RF_Data^(0+256)+1),w
  7113  0C1C  3A02               	xorlw	2
  7114  0C1D  1D03               	skipz
  7115  0C1E  2C55               	goto	l6565
  7116                           
  7117                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7118  0C1F  082C               	movf	(_RF_Data^(0+256)+12),w
  7119  0C20  3AFF               	xorlw	255
  7120  0C21  1D03               	skipz
  7121  0C22  2C2F               	goto	l6555
  7122  0C23  082D               	movf	(_RF_Data^(0+256)+13),w
  7123  0C24  3AFF               	xorlw	255
  7124  0C25  1D03               	skipz
  7125  0C26  2C2F               	goto	l6555
  7126  0C27  082E               	movf	(_RF_Data^(0+256)+14),w
  7127  0C28  3AFF               	xorlw	255
  7128  0C29  1D03               	skipz
  7129  0C2A  2C2F               	goto	l6555
  7130                           
  7131                           ;RF_Control_B1.c: 283: __nop();
  7132  0C2B  0000               	nop
  7133                           
  7134                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7135  0C2C  0021               	movlb	1	; select bank1
  7136  0C2D  11BD               	bcf	(_RF1^(0+128)+1),3
  7137                           
  7138                           ;RF_Control_B1.c: 285: } else {
  7139  0C2E  0008               	return
  7140  0C2F                     l6555:	
  7141                           
  7142                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7143  0C2F  0020               	movlb	0	; select bank0
  7144  0C30  086E               	movf	_product,w
  7145  0C31  3E0C               	addlw	12
  7146  0C32  0086               	movwf	6
  7147  0C33  3002               	movlw	2	; select bank4/5
  7148  0C34  0087               	movwf	7
  7149  0C35  0022               	movlb	2	; select bank2
  7150  0C36  082C               	movf	(_RF_Data^(0+256)+12),w
  7151  0C37  0601               	xorwf	1,w
  7152  0C38  1D03               	skipz
  7153  0C39  0008               	return
  7154  0C3A  0020               	movlb	0	; select bank0
  7155  0C3B  086E               	movf	_product,w
  7156  0C3C  3E0D               	addlw	13
  7157  0C3D  0086               	movwf	6
  7158  0C3E  3002               	movlw	2	; select bank4/5
  7159  0C3F  0087               	movwf	7
  7160  0C40  0022               	movlb	2	; select bank2
  7161  0C41  082D               	movf	(_RF_Data^(0+256)+13),w
  7162  0C42  0601               	xorwf	1,w
  7163  0C43  1D03               	skipz
  7164  0C44  0008               	return
  7165  0C45  0020               	movlb	0	; select bank0
  7166  0C46  086E               	movf	_product,w
  7167  0C47  3E0E               	addlw	14
  7168  0C48  0086               	movwf	6
  7169  0C49  3002               	movlw	2	; select bank4/5
  7170  0C4A  0087               	movwf	7
  7171  0C4B  0022               	movlb	2	; select bank2
  7172  0C4C  082E               	movf	(_RF_Data^(0+256)+14),w
  7173  0C4D  0601               	xorwf	1,w
  7174  0C4E  1D03               	skipz
  7175  0C4F  0008               	return
  7176                           
  7177                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7178  0C50  3189  2132         	fcall	_setControl_Lights_Table
  7179                           
  7180                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7181  0C52  0021               	movlb	1	; select bank1
  7182  0C53  15BD               	bsf	(_RF1^(0+128)+1),3
  7183                           
  7184                           ;RF_Control_B1.c: 289: }
  7185                           ;RF_Control_B1.c: 290: }
  7186                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7187  0C54  0008               	return
  7188  0C55                     l6565:	
  7189  0C55  0022               	movlb	2	; select bank2
  7190  0C56  0820               	movf	_RF_Data^(0+256),w
  7191  0C57  3AFF               	xorlw	255
  7192  0C58  1D03               	skipz
  7193  0C59  2C60               	goto	l6571
  7194  0C5A  0821               	movf	(_RF_Data^(0+256)+1),w
  7195  0C5B  3A02               	xorlw	2
  7196  0C5C  1D03               	skipz
  7197  0C5D  2C60               	goto	l6571
  7198                           
  7199                           ;RF_Control_B1.c: 292: __nop();
  7200  0C5E  0000               	nop
  7201                           
  7202                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7203  0C5F  0008               	return
  7204  0C60                     l6571:	
  7205  0C60  0022               	movlb	2	; select bank2
  7206  0C61  08A0               	movf	_RF_Data^(0+256),f
  7207  0C62  1D03               	skipz
  7208  0C63  2C6A               	goto	l2064
  7209  0C64  0821               	movf	(_RF_Data^(0+256)+1),w
  7210  0C65  3A65               	xorlw	101
  7211  0C66  1D03               	skipz
  7212  0C67  2C6A               	goto	l2064
  7213                           
  7214                           ;RF_Control_B1.c: 294: __nop();
  7215  0C68  0000               	nop
  7216                           
  7217                           ;RF_Control_B1.c: 295: } else {
  7218  0C69  0008               	return
  7219  0C6A                     l2064:	
  7220                           
  7221                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7222  0C6A  0021               	movlb	1	; select bank1
  7223  0C6B  11BD               	bcf	(_RF1^(0+128)+1),3
  7224                           
  7225                           ;RF_Control_B1.c: 297: }
  7226                           ;RF_Control_B1.c: 302: }
  7227                           ;RF_Control_B1.c: 303: } else {
  7228  0C6C  0008               	return
  7229  0C6D                     __end_of_getRxData:	
  7230                           ;RF_Control_B1.c: 304: ;
  7231                           
  7232                           
  7233                           	psect	text26
  7234  1399                     __ptext26:	
  7235 ;; *************** function _setLog_Code *****************
  7236 ;; Defined at:
  7237 ;;		line 309 in file "../src/RF_Control_B1.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;		None               void
  7244 ;; Registers used:
  7245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;Total ram usage:        1 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    7
  7258 ;; This function calls:
  7259 ;;		_setBuz
  7260 ;;		_setMemory_LoopSave
  7261 ;;		_setMemory_Modify
  7262 ;; This function is called by:
  7263 ;;		_getRxData
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           
  7268                           ;psect for function _setLog_Code
  7269  1399                     _setLog_Code:	
  7270                           
  7271                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7272                           
  7273                           ;incstack = 0
  7274                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7275  1399  0021               	movlb	1	; select bank1
  7276  139A  133C               	bcf	_RF1^(0+128),6
  7277                           
  7278                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7279  139B  0022               	movlb	2	; select bank2
  7280  139C  082C               	movf	(_RF_Data^(0+256)+12),w
  7281  139D  0020               	movlb	0	; select bank0
  7282  139E  00AD               	movwf	??_setLog_Code
  7283  139F  086E               	movf	_product,w
  7284  13A0  3E0C               	addlw	12
  7285  13A1  0086               	movwf	6
  7286  13A2  3002               	movlw	2	; select bank4/5
  7287  13A3  0087               	movwf	7
  7288  13A4  082D               	movf	??_setLog_Code,w
  7289  13A5  0081               	movwf	1
  7290                           
  7291                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7292  13A6  0022               	movlb	2	; select bank2
  7293  13A7  082D               	movf	(_RF_Data^(0+256)+13),w
  7294  13A8  0020               	movlb	0	; select bank0
  7295  13A9  00AD               	movwf	??_setLog_Code
  7296  13AA  086E               	movf	_product,w
  7297  13AB  3E0D               	addlw	13
  7298  13AC  0086               	movwf	6
  7299  13AD  3002               	movlw	2	; select bank4/5
  7300  13AE  0087               	movwf	7
  7301  13AF  082D               	movf	??_setLog_Code,w
  7302  13B0  0081               	movwf	1
  7303                           
  7304                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7305  13B1  0022               	movlb	2	; select bank2
  7306  13B2  082E               	movf	(_RF_Data^(0+256)+14),w
  7307  13B3  0020               	movlb	0	; select bank0
  7308  13B4  00AD               	movwf	??_setLog_Code
  7309  13B5  086E               	movf	_product,w
  7310  13B6  3E0E               	addlw	14
  7311  13B7  0086               	movwf	6
  7312  13B8  3002               	movlw	2	; select bank4/5
  7313  13B9  0087               	movwf	7
  7314  13BA  082D               	movf	??_setLog_Code,w
  7315  13BB  0081               	movwf	1
  7316                           
  7317                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7318  13BC  3064               	movlw	100
  7319  13BD  00A9               	movwf	setBuz@time
  7320  13BE  3000               	movlw	0
  7321  13BF  00AA               	movwf	setBuz@time+1
  7322  13C0  3001               	movlw	1
  7323  13C1  3196  26F2  3193   	fcall	_setBuz
  7324                           
  7325                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7326  13C4  0021               	movlb	1	; select bank1
  7327  13C5  1EA0               	btfss	_myMain^(0+128),5
  7328  13C6  2BCB               	goto	l2070
  7329                           
  7330                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7331  13C7  3001               	movlw	1
  7332  13C8  3190  2066  3193   	fcall	_setMemory_LoopSave
  7333  13CB                     l2070:	
  7334                           
  7335                           ;RF_Control_B1.c: 317: }
  7336                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7337  13CB  3001               	movlw	1
  7338  13CC  319E  2646         	fcall	_setMemory_Modify
  7339  13CE  0008               	return
  7340  13CF                     __end_of_setLog_Code:	
  7341                           
  7342                           	psect	text27
  7343  1066                     __ptext27:	
  7344 ;; *************** function _setMemory_LoopSave *****************
  7345 ;; Defined at:
  7346 ;;		line 1006 in file "../src/MCU_B1.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  command         1    wreg     unsigned char 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  command         1    1[BANK0 ] unsigned char 
  7351 ;; Return value:  Size  Location     Type
  7352 ;;		None               void
  7353 ;; Registers used:
  7354 ;;		wreg, status,2, status,0
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;Total ram usage:        2 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    5
  7367 ;; This function calls:
  7368 ;;		Nothing
  7369 ;; This function is called by:
  7370 ;;		_setLog_Code
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           
  7375                           ;psect for function _setMemory_LoopSave
  7376  1066                     _setMemory_LoopSave:	
  7377                           
  7378                           ;incstack = 0
  7379                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7380                           ;setMemory_LoopSave@command stored from wreg
  7381  1066  0020               	movlb	0	; select bank0
  7382  1067  00A1               	movwf	setMemory_LoopSave@command
  7383                           
  7384                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7385  1068  0821               	movf	setMemory_LoopSave@command,w
  7386  1069  3A01               	xorlw	1
  7387  106A  3000               	movlw	0
  7388  106B  1903               	skipnz
  7389  106C  3001               	movlw	1
  7390  106D  00A0               	movwf	??_setMemory_LoopSave
  7391  106E  0DA0               	rlf	??_setMemory_LoopSave,f
  7392  106F  0DA0               	rlf	??_setMemory_LoopSave,f
  7393  1070  0023               	movlb	3	; select bank3
  7394  1071  0844               	movf	(_Memory^(0+384)+36),w
  7395  1072  0020               	movlb	0	; select bank0
  7396  1073  0620               	xorwf	??_setMemory_LoopSave,w
  7397  1074  39FB               	andlw	-5
  7398  1075  0620               	xorwf	??_setMemory_LoopSave,w
  7399  1076  0023               	movlb	3	; select bank3
  7400  1077  00C4               	movwf	(_Memory^(0+384)+36)
  7401  1078  0008               	return
  7402  1079                     __end_of_setMemory_LoopSave:	
  7403                           
  7404                           	psect	text28
  7405  0932                     __ptext28:	
  7406 ;; *************** function _setControl_Lights_Table *****************
  7407 ;; Defined at:
  7408 ;;		line 322 in file "../src/RF_Control_B1.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;		None               void
  7415 ;; Registers used:
  7416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;Total ram usage:        0 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:   11
  7429 ;; This function calls:
  7430 ;;		_setBuz
  7431 ;;		_setDimmerLights_ErrorClose
  7432 ;;		_setRFSW_AdjControl
  7433 ;;		_setRFSW_Control
  7434 ;;		_setTxData
  7435 ;; This function is called by:
  7436 ;;		_getRxData
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function _setControl_Lights_Table
  7442  0932                     _setControl_Lights_Table:	
  7443                           
  7444                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7445                           
  7446                           ;incstack = 0
  7447                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7448  0932  2976               	goto	l6175
  7449  0933                     l6153:	
  7450                           ;RF_Control_B1.c: 324: case 0x00:
  7451                           
  7452                           
  7453                           ;RF_Control_B1.c: 326: setDimmerLights_ErrorClose(255);
  7454  0933  30FF               	movlw	255
  7455  0934  3196  2642  3189   	fcall	_setDimmerLights_ErrorClose
  7456                           
  7457                           ;RF_Control_B1.c: 328: product->Data[9]=0;
  7458  0937  0020               	movlb	0	; select bank0
  7459  0938  086E               	movf	_product,w
  7460  0939  3E09               	addlw	9
  7461  093A  0086               	movwf	6
  7462  093B  3002               	movlw	2	; select bank4/5
  7463  093C  0087               	movwf	7
  7464  093D  0181               	clrf	1
  7465                           
  7466                           ;RF_Control_B1.c: 329: product->Data[11]=0;
  7467  093E  086E               	movf	_product,w
  7468  093F  3E0B               	addlw	11
  7469  0940  0086               	movwf	6
  7470  0941  3002               	movlw	2	; select bank4/5
  7471  0942  0087               	movwf	7
  7472  0943  0181               	clrf	1
  7473                           
  7474                           ;RF_Control_B1.c: 330: product->Data[15]=0;
  7475  0944  086E               	movf	_product,w
  7476  0945  3E0F               	addlw	15
  7477  0946  0086               	movwf	6
  7478  0947  3002               	movlw	2	; select bank4/5
  7479  0948  0087               	movwf	7
  7480  0949  0181               	clrf	1
  7481                           
  7482                           ;RF_Control_B1.c: 331: product->Data[17]=0;
  7483  094A  086E               	movf	_product,w
  7484  094B  3E11               	addlw	17
  7485  094C  0086               	movwf	6
  7486  094D  3002               	movlw	2	; select bank4/5
  7487  094E  0087               	movwf	7
  7488  094F  0181               	clrf	1
  7489                           
  7490                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  7491  0950  3064               	movlw	100
  7492  0951  00A9               	movwf	setBuz@time
  7493  0952  3000               	movlw	0
  7494  0953  00AA               	movwf	setBuz@time+1
  7495  0954  3001               	movlw	1
  7496  0955  3196  26F2         	fcall	_setBuz
  7497                           
  7498                           ;RF_Control_B1.c: 334: break;
  7499  0957  0008               	return
  7500  0958                     l6165:	
  7501                           ;RF_Control_B1.c: 335: case 0x20:
  7502                           
  7503                           
  7504                           ;RF_Control_B1.c: 336: product->Data[9]=0;
  7505  0958  0020               	movlb	0	; select bank0
  7506  0959  086E               	movf	_product,w
  7507  095A  3E09               	addlw	9
  7508  095B  0086               	movwf	6
  7509  095C  3002               	movlw	2	; select bank4/5
  7510  095D  0087               	movwf	7
  7511  095E  0181               	clrf	1
  7512                           
  7513                           ;RF_Control_B1.c: 337: product->Data[11]=0;
  7514  095F  086E               	movf	_product,w
  7515  0960  3E0B               	addlw	11
  7516  0961  0086               	movwf	6
  7517  0962  3002               	movlw	2	; select bank4/5
  7518  0963  0087               	movwf	7
  7519  0964  0181               	clrf	1
  7520                           
  7521                           ;RF_Control_B1.c: 338: product->Data[17]=0;
  7522  0965  086E               	movf	_product,w
  7523  0966  3E11               	addlw	17
  7524  0967  0086               	movwf	6
  7525  0968  3002               	movlw	2	; select bank4/5
  7526  0969  0087               	movwf	7
  7527  096A  0181               	clrf	1
  7528                           
  7529                           ;RF_Control_B1.c: 339: setTxData();
  7530  096B  3186  26EF         	fcall	_setTxData
  7531                           
  7532                           ;RF_Control_B1.c: 340: break;
  7533  096D  0008               	return
  7534  096E                     l6169:	
  7535                           ;RF_Control_B1.c: 341: case 0x01:
  7536                           
  7537                           
  7538                           ;RF_Control_B1.c: 343: setRFSW_Control(1);
  7539  096E  3001               	movlw	1
  7540  096F  3195  25F3         	fcall	_setRFSW_Control
  7541                           
  7542                           ;RF_Control_B1.c: 355: break;
  7543                           
  7544                           ;RF_Control_B1.c: 351: case 0x03:
  7545                           
  7546                           ;RF_Control_B1.c: 350: break;
  7547                           
  7548                           ;RF_Control_B1.c: 346: case 0x02:
  7549                           
  7550                           ;RF_Control_B1.c: 345: break;
  7551  0971  0008               	return
  7552  0972                     l6171:	
  7553                           ;RF_Control_B1.c: 356: case 0x11:
  7554                           
  7555                           
  7556                           ;RF_Control_B1.c: 359: setRFSW_AdjControl(1);
  7557  0972  3001               	movlw	1
  7558  0973  3194  2443         	fcall	_setRFSW_AdjControl
  7559                           
  7560                           ;RF_Control_B1.c: 377: }
  7561                           
  7562                           ;RF_Control_B1.c: 376: break;
  7563                           
  7564                           ;RF_Control_B1.c: 370: case 0x31:
  7565                           
  7566                           ;RF_Control_B1.c: 369: break;
  7567                           
  7568                           ;RF_Control_B1.c: 363: case 0x21:
  7569                           
  7570                           ;RF_Control_B1.c: 362: break;
  7571  0975  0008               	return
  7572  0976                     l6175:	
  7573  0976  0022               	movlb	2	; select bank2
  7574  0977  082F               	movf	(_RF_Data^(0+256)+15),w
  7575                           
  7576                           ; Switch size 1, requested type "space"
  7577                           ; Number of cases is 8, Range of values is 0 to 49
  7578                           ; switch strategies available:
  7579                           ; Name         Instructions Cycles
  7580                           ; simple_byte           25    13 (average)
  7581                           ; direct_byte          106     6 (fixed)
  7582                           ; jumptable            260     6 (fixed)
  7583                           ;	Chosen strategy is simple_byte
  7584  0978  3A00               	xorlw	0	; case 0
  7585  0979  1903               	skipnz
  7586  097A  2933               	goto	l6153
  7587  097B  3A01               	xorlw	1	; case 1
  7588  097C  1903               	skipnz
  7589  097D  296E               	goto	l6169
  7590  097E  3A03               	xorlw	3	; case 2
  7591  097F  1903               	skipnz
  7592  0980  2991               	goto	l2084
  7593  0981  3A01               	xorlw	1	; case 3
  7594  0982  1903               	skipnz
  7595  0983  2991               	goto	l2084
  7596  0984  3A12               	xorlw	18	; case 17
  7597  0985  1903               	skipnz
  7598  0986  2972               	goto	l6171
  7599  0987  3A31               	xorlw	49	; case 32
  7600  0988  1903               	skipnz
  7601  0989  2958               	goto	l6165
  7602  098A  3A01               	xorlw	1	; case 33
  7603  098B  1903               	skipnz
  7604  098C  2991               	goto	l2084
  7605  098D  3A10               	xorlw	16	; case 49
  7606  098E  1903               	skipnz
  7607  098F  2991               	goto	l2084
  7608  0990  2991               	goto	l2084
  7609  0991                     l2084:	
  7610  0991  0008               	return
  7611  0992                     __end_of_setControl_Lights_Table:	
  7612                           
  7613                           	psect	text29
  7614  15F3                     __ptext29:	
  7615 ;; *************** function _setRFSW_Control *****************
  7616 ;; Defined at:
  7617 ;;		line 404 in file "../src/RF_Control_B1.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  sw              1    wreg     unsigned char 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  sw              1   19[BANK0 ] unsigned char 
  7622 ;;  status          1   18[BANK0 ] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;Total ram usage:        3 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    9
  7639 ;; This function calls:
  7640 ;;		_getDelayOff_GO
  7641 ;;		_getDimmerLights_Status
  7642 ;;		_setBuz
  7643 ;;		_setDelayOff_GO
  7644 ;;		_setDimmerLights_SwOff
  7645 ;;		_setDimmerLights_SwOn
  7646 ;;		_setRF_DimmerLights
  7647 ;;		_setTxData
  7648 ;; This function is called by:
  7649 ;;		_setControl_Lights_Table
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _setRFSW_Control
  7655  15F3                     _setRFSW_Control:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7659                           ;setRFSW_Control@sw stored from wreg
  7660  15F3  0020               	movlb	0	; select bank0
  7661  15F4  00B3               	movwf	setRFSW_Control@sw
  7662                           
  7663                           ;RF_Control_B1.c: 405: char status = 0;
  7664  15F5  01B2               	clrf	setRFSW_Control@status
  7665                           
  7666                           ;RF_Control_B1.c: 408: if (RF_Data[16] == 0x80) {
  7667  15F6  0022               	movlb	2	; select bank2
  7668  15F7  0830               	movf	(_RF_Data^(0+256)+16),w
  7669  15F8  3A80               	xorlw	128
  7670  15F9  1D03               	skipz
  7671  15FA  2E26               	goto	l6007
  7672                           
  7673                           ;RF_Control_B1.c: 409: setDelayOff_GO(sw, 1, RF_Data[17]);
  7674  15FB  0020               	movlb	0	; select bank0
  7675  15FC  01AA               	clrf	setDelayOff_GO@command
  7676  15FD  0AAA               	incf	setDelayOff_GO@command,f
  7677  15FE  0022               	movlb	2	; select bank2
  7678  15FF  0831               	movf	(_RF_Data^(0+256)+17),w
  7679  1600  0020               	movlb	0	; select bank0
  7680  1601  00B1               	movwf	??_setRFSW_Control
  7681  1602  0831               	movf	??_setRFSW_Control,w
  7682  1603  00AB               	movwf	setDelayOff_GO@value
  7683  1604  0833               	movf	setRFSW_Control@sw,w
  7684  1605  3188  2078  3195   	fcall	_setDelayOff_GO
  7685                           
  7686                           ;RF_Control_B1.c: 410: if (getDimmerLights_Status(sw) == 1) {
  7687  1608  0020               	movlb	0	; select bank0
  7688  1609  0833               	movf	setRFSW_Control@sw,w
  7689  160A  319D  258C  3195   	fcall	_getDimmerLights_Status
  7690  160D  3A01               	xorlw	1
  7691  160E  1D03               	skipz
  7692  160F  2E35               	goto	l6011
  7693                           
  7694                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  7695  1610  3064               	movlw	100
  7696  1611  0020               	movlb	0	; select bank0
  7697  1612  00A9               	movwf	setBuz@time
  7698  1613  3000               	movlw	0
  7699  1614  00AA               	movwf	setBuz@time+1
  7700  1615  3001               	movlw	1
  7701  1616  3196  26F2  3195   	fcall	_setBuz
  7702                           
  7703                           ;RF_Control_B1.c: 412: status = 1;
  7704  1619  0020               	movlb	0	; select bank0
  7705  161A  01B2               	clrf	setRFSW_Control@status
  7706  161B  0AB2               	incf	setRFSW_Control@status,f
  7707                           
  7708                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 1);
  7709  161C  01A0               	clrf	setRF_DimmerLights@on
  7710  161D  0AA0               	incf	setRF_DimmerLights@on,f
  7711  161E  0833               	movf	setRFSW_Control@sw,w
  7712  161F  3197  27A4  3195   	fcall	_setRF_DimmerLights
  7713                           
  7714                           ;RF_Control_B1.c: 414: setTxData();
  7715  1622  3186  26EF  3195   	fcall	_setTxData
  7716                           
  7717                           ;RF_Control_B1.c: 416: }
  7718                           ;RF_Control_B1.c: 417: } else {
  7719  1625  2E35               	goto	l6011
  7720  1626                     l6007:	
  7721                           
  7722                           ;RF_Control_B1.c: 419: if (getDelayOff_GO(sw) == 1) {
  7723  1626  0020               	movlb	0	; select bank0
  7724  1627  0833               	movf	setRFSW_Control@sw,w
  7725  1628  319D  259C  3195   	fcall	_getDelayOff_GO
  7726  162B  3A01               	xorlw	1
  7727  162C  1D03               	skipz
  7728  162D  2E35               	goto	l6011
  7729                           
  7730                           ;RF_Control_B1.c: 420: setDelayOff_GO(sw, 0, 0);
  7731  162E  0020               	movlb	0	; select bank0
  7732  162F  01AA               	clrf	setDelayOff_GO@command
  7733  1630  01AB               	clrf	setDelayOff_GO@value
  7734  1631  0833               	movf	setRFSW_Control@sw,w
  7735  1632  3188  2078  3195   	fcall	_setDelayOff_GO
  7736  1635                     l6011:	
  7737                           
  7738                           ;RF_Control_B1.c: 421: }
  7739                           ;RF_Control_B1.c: 423: }
  7740                           ;RF_Control_B1.c: 424: if (status == 0) {
  7741  1635  0020               	movlb	0	; select bank0
  7742  1636  08B2               	movf	setRFSW_Control@status,f
  7743  1637  1D03               	skipz
  7744  1638  0008               	return
  7745                           
  7746                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7747  1639  0833               	movf	setRFSW_Control@sw,w
  7748  163A  3194  2406  3195   	fcall	_setDimmerLights_SwOn
  7749                           
  7750                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7751  163D  0020               	movlb	0	; select bank0
  7752  163E  0833               	movf	setRFSW_Control@sw,w
  7753  163F  3194  24C6         	fcall	_setDimmerLights_SwOff
  7754  1641  0008               	return
  7755  1642                     __end_of_setRFSW_Control:	
  7756                           
  7757                           	psect	text30
  7758  1406                     __ptext30:	
  7759 ;; *************** function _setDimmerLights_SwOn *****************
  7760 ;; Defined at:
  7761 ;;		line 517 in file "../src/Dimmer_B1.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  sw              1    wreg     unsigned char 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  sw              1   15[BANK0 ] unsigned char 
  7766 ;;  idle            1   14[BANK0 ] unsigned char 
  7767 ;; Return value:  Size  Location     Type
  7768 ;;		None               void
  7769 ;; Registers used:
  7770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;Total ram usage:        3 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    7
  7783 ;; This function calls:
  7784 ;;		_DimmerLightsPointSelect
  7785 ;;		_getAll_DimmerLights_AdjGO
  7786 ;;		_setBuz
  7787 ;;		_setDimmerLights_Trigger
  7788 ;; This function is called by:
  7789 ;;		_setRFSW_Control
  7790 ;;		_setSw_Main
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           
  7795                           ;psect for function _setDimmerLights_SwOn
  7796  1406                     _setDimmerLights_SwOn:	
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7800                           ;setDimmerLights_SwOn@sw stored from wreg
  7801  1406  0020               	movlb	0	; select bank0
  7802  1407  00AF               	movwf	setDimmerLights_SwOn@sw
  7803                           
  7804                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  7805  1408  082F               	movf	setDimmerLights_SwOn@sw,w
  7806  1409  319C  24C8  3194   	fcall	_DimmerLightsPointSelect
  7807                           
  7808                           ;Dimmer_B1.c: 519: char idle = 0;
  7809  140C  0020               	movlb	0	; select bank0
  7810  140D  01AE               	clrf	setDimmerLights_SwOn@idle
  7811                           
  7812                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7813  140E  319C  24A8  3194   	fcall	_getAll_DimmerLights_AdjGO
  7814  1411  3A01               	xorlw	1
  7815  1412  3000               	movlw	0
  7816  1413  1903               	skipnz
  7817  1414  3001               	movlw	1
  7818  1415  0020               	movlb	0	; select bank0
  7819  1416  00AD               	movwf	??_setDimmerLights_SwOn
  7820  1417  082D               	movf	??_setDimmerLights_SwOn,w
  7821  1418  00AE               	movwf	setDimmerLights_SwOn@idle
  7822                           
  7823                           ;Dimmer_B1.c: 523: if (idle == 0) {
  7824  1419  08AE               	movf	setDimmerLights_SwOn@idle,f
  7825  141A  1D03               	skipz
  7826  141B  0008               	return
  7827                           
  7828                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  7829  141C  086F               	movf	_DimmerLights,w
  7830  141D  3E09               	addlw	9
  7831  141E  0086               	movwf	6
  7832  141F  3001               	movlw	1	; select bank2/3
  7833  1420  0087               	movwf	7
  7834  1421  1701               	bsf	1,6
  7835                           
  7836                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  7837  1422  3064               	movlw	100
  7838  1423  00A9               	movwf	setBuz@time
  7839  1424  3000               	movlw	0
  7840  1425  00AA               	movwf	setBuz@time+1
  7841  1426  3001               	movlw	1
  7842  1427  3196  26F2  3194   	fcall	_setBuz
  7843                           
  7844                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  7845  142A  0020               	movlb	0	; select bank0
  7846  142B  086F               	movf	_DimmerLights,w
  7847  142C  0086               	movwf	6
  7848  142D  3001               	movlw	1	; select bank2/3
  7849  142E  0087               	movwf	7
  7850  142F  1A81               	btfsc	1,5
  7851  1430  2C3C               	goto	l5821
  7852                           
  7853                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  7854  1431  086F               	movf	_DimmerLights,w
  7855  1432  0086               	movwf	6
  7856  1433  3001               	movlw	1	; select bank2/3
  7857  1434  0087               	movwf	7
  7858  1435  1681               	bsf	1,5
  7859                           
  7860                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  7861  1436  01A2               	clrf	setDimmerLights_Trigger@command
  7862  1437  0AA2               	incf	setDimmerLights_Trigger@command,f
  7863  1438  082F               	movf	setDimmerLights_SwOn@sw,w
  7864  1439  319F  2722         	fcall	_setDimmerLights_Trigger
  7865                           
  7866                           ;Dimmer_B1.c: 529: } else {
  7867  143B  0008               	return
  7868  143C                     l5821:	
  7869                           
  7870                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  7871  143C  0020               	movlb	0	; select bank0
  7872  143D  086F               	movf	_DimmerLights,w
  7873  143E  0086               	movwf	6
  7874  143F  3001               	movlw	1	; select bank2/3
  7875  1440  0087               	movwf	7
  7876  1441  1281               	bcf	1,5
  7877  1442  0008               	return
  7878  1443                     __end_of_setDimmerLights_SwOn:	
  7879                           
  7880                           	psect	text31
  7881  1443                     __ptext31:	
  7882 ;; *************** function _setRFSW_AdjControl *****************
  7883 ;; Defined at:
  7884 ;;		line 433 in file "../src/RF_Control_B1.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  sw              1    wreg     unsigned char 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;  sw              1   74[BANK0 ] unsigned char 
  7889 ;;  status          1   73[BANK0 ] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;		None               void
  7892 ;; Registers used:
  7893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;Total ram usage:        4 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:   10
  7906 ;; This function calls:
  7907 ;;		_getDimmerLights_Status
  7908 ;;		_setMemory_Modify
  7909 ;;		_setRF_DimmerValue
  7910 ;;		_setTxData
  7911 ;; This function is called by:
  7912 ;;		_setControl_Lights_Table
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _setRFSW_AdjControl
  7918  1443                     _setRFSW_AdjControl:	
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7922                           ;setRFSW_AdjControl@sw stored from wreg
  7923  1443  0020               	movlb	0	; select bank0
  7924  1444  00EA               	movwf	setRFSW_AdjControl@sw
  7925                           
  7926                           ;RF_Control_B1.c: 434: char status = 0;
  7927  1445  01E9               	clrf	setRFSW_AdjControl@status
  7928                           
  7929                           ;RF_Control_B1.c: 436: status = getDimmerLights_Status(sw);
  7930  1446  086A               	movf	setRFSW_AdjControl@sw,w
  7931  1447  319D  258C  3194   	fcall	_getDimmerLights_Status
  7932  144A  0020               	movlb	0	; select bank0
  7933  144B  00E7               	movwf	??_setRFSW_AdjControl
  7934  144C  0867               	movf	??_setRFSW_AdjControl,w
  7935  144D  00E9               	movwf	setRFSW_AdjControl@status
  7936                           
  7937                           ;RF_Control_B1.c: 439: if (status == 1) {
  7938  144E  0869               	movf	setRFSW_AdjControl@status,w
  7939  144F  3A01               	xorlw	1
  7940  1450  1D03               	skipz
  7941  1451  2C5C               	goto	l6025
  7942                           
  7943                           ;RF_Control_B1.c: 440: setMemory_Modify(1);
  7944  1452  3001               	movlw	1
  7945  1453  319E  2646  3194   	fcall	_setMemory_Modify
  7946                           
  7947                           ;RF_Control_B1.c: 441: setRF_DimmerValue(sw);
  7948  1456  0020               	movlb	0	; select bank0
  7949  1457  086A               	movf	setRFSW_AdjControl@sw,w
  7950  1458  3192  2260  3194   	fcall	_setRF_DimmerValue
  7951                           
  7952                           ;RF_Control_B1.c: 442: } else {
  7953  145B  2C6E               	goto	l2096
  7954  145C                     l6025:	
  7955                           
  7956                           ;RF_Control_B1.c: 443: product->Data[9]=product->Data[20 + sw];
  7957  145C  0020               	movlb	0	; select bank0
  7958  145D  086A               	movf	setRFSW_AdjControl@sw,w
  7959  145E  3E14               	addlw	20
  7960  145F  076E               	addwf	_product,w
  7961  1460  00E7               	movwf	??_setRFSW_AdjControl
  7962  1461  0867               	movf	??_setRFSW_AdjControl,w
  7963  1462  0086               	movwf	6
  7964  1463  3002               	movlw	2	; select bank4/5
  7965  1464  0087               	movwf	7
  7966  1465  0801               	movf	1,w
  7967  1466  00E8               	movwf	??_setRFSW_AdjControl+1
  7968  1467  086E               	movf	_product,w
  7969  1468  3E09               	addlw	9
  7970  1469  0086               	movwf	6
  7971  146A  3002               	movlw	2	; select bank4/5
  7972  146B  0087               	movwf	7
  7973  146C  0868               	movf	??_setRFSW_AdjControl+1,w
  7974  146D  0081               	movwf	1
  7975  146E                     l2096:	
  7976                           
  7977                           ;RF_Control_B1.c: 444: }
  7978                           ;RF_Control_B1.c: 445: product->Data[17]=product->Data[26 + sw];
  7979  146E  0020               	movlb	0	; select bank0
  7980  146F  086A               	movf	setRFSW_AdjControl@sw,w
  7981  1470  3E1A               	addlw	26
  7982  1471  076E               	addwf	_product,w
  7983  1472  00E7               	movwf	??_setRFSW_AdjControl
  7984  1473  0867               	movf	??_setRFSW_AdjControl,w
  7985  1474  0086               	movwf	6
  7986  1475  3002               	movlw	2	; select bank4/5
  7987  1476  0087               	movwf	7
  7988  1477  0801               	movf	1,w
  7989  1478  00E8               	movwf	??_setRFSW_AdjControl+1
  7990  1479  086E               	movf	_product,w
  7991  147A  3E11               	addlw	17
  7992  147B  0086               	movwf	6
  7993  147C  3002               	movlw	2	; select bank4/5
  7994  147D  0087               	movwf	7
  7995  147E  0868               	movf	??_setRFSW_AdjControl+1,w
  7996  147F  0081               	movwf	1
  7997                           
  7998                           ;RF_Control_B1.c: 446: setTxData();
  7999  1480  3186  26EF         	fcall	_setTxData
  8000  1482  0008               	return
  8001  1483                     __end_of_setRFSW_AdjControl:	
  8002                           
  8003                           	psect	text32
  8004  1260                     __ptext32:	
  8005 ;; *************** function _setRF_DimmerValue *****************
  8006 ;; Defined at:
  8007 ;;		line 451 in file "../src/RF_Control_B1.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  lights          1    wreg     unsigned char 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  lights          1   70[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;Total ram usage:        3 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    9
  8028 ;; This function calls:
  8029 ;;		_setDimmerLights_AdjRF
  8030 ;; This function is called by:
  8031 ;;		_setRFSW_AdjControl
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _setRF_DimmerValue
  8037  1260                     _setRF_DimmerValue:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8041                           ;setRF_DimmerValue@lights stored from wreg
  8042  1260  0020               	movlb	0	; select bank0
  8043  1261  00E6               	movwf	setRF_DimmerValue@lights
  8044                           
  8045                           ;RF_Control_B1.c: 452: if (RF_Data[9] > 0x64) {
  8046  1262  3065               	movlw	101
  8047  1263  0022               	movlb	2	; select bank2
  8048  1264  0229               	subwf	(_RF_Data^(0+256)+9),w
  8049  1265  1C03               	skipc
  8050  1266  2A6D               	goto	l5907
  8051                           
  8052                           ;RF_Control_B1.c: 453: RF_Data[9] = 0x64;
  8053  1267  3064               	movlw	100
  8054  1268  0020               	movlb	0	; select bank0
  8055  1269  00E4               	movwf	??_setRF_DimmerValue
  8056  126A  0864               	movf	??_setRF_DimmerValue,w
  8057  126B  0022               	movlb	2	; select bank2
  8058  126C  00A9               	movwf	(_RF_Data^(0+256)+9)
  8059  126D                     l5907:	
  8060                           
  8061                           ;RF_Control_B1.c: 454: }
  8062                           ;RF_Control_B1.c: 455: product->Data[9]=RF_Data[9];
  8063  126D  0829               	movf	(_RF_Data^(0+256)+9),w
  8064  126E  0020               	movlb	0	; select bank0
  8065  126F  00E4               	movwf	??_setRF_DimmerValue
  8066  1270  086E               	movf	_product,w
  8067  1271  3E09               	addlw	9
  8068  1272  0086               	movwf	6
  8069  1273  3002               	movlw	2	; select bank4/5
  8070  1274  0087               	movwf	7
  8071  1275  0864               	movf	??_setRF_DimmerValue,w
  8072  1276  0081               	movwf	1
  8073                           
  8074                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
  8075  1277  0866               	movf	setRF_DimmerValue@lights,w
  8076  1278  00E4               	movwf	??_setRF_DimmerValue
  8077  1279  086E               	movf	_product,w
  8078  127A  3E0B               	addlw	11
  8079  127B  0086               	movwf	6
  8080  127C  3002               	movlw	2	; select bank4/5
  8081  127D  0087               	movwf	7
  8082  127E  0864               	movf	??_setRF_DimmerValue,w
  8083  127F  0081               	movwf	1
  8084                           
  8085                           ;RF_Control_B1.c: 457: product->Data[(20 + lights)]=RF_Data[9];
  8086  1280  0022               	movlb	2	; select bank2
  8087  1281  0829               	movf	(_RF_Data^(0+256)+9),w
  8088  1282  0020               	movlb	0	; select bank0
  8089  1283  00E4               	movwf	??_setRF_DimmerValue
  8090  1284  0866               	movf	setRF_DimmerValue@lights,w
  8091  1285  3E14               	addlw	20
  8092  1286  076E               	addwf	_product,w
  8093  1287  00E5               	movwf	??_setRF_DimmerValue+1
  8094  1288  0865               	movf	??_setRF_DimmerValue+1,w
  8095  1289  0086               	movwf	6
  8096  128A  3002               	movlw	2	; select bank4/5
  8097  128B  0087               	movwf	7
  8098  128C  0864               	movf	??_setRF_DimmerValue,w
  8099  128D  0081               	movwf	1
  8100                           
  8101                           ;RF_Control_B1.c: 458: setDimmerLights_AdjRF(lights);
  8102  128E  0866               	movf	setRF_DimmerValue@lights,w
  8103  128F  3190  20BD         	fcall	_setDimmerLights_AdjRF
  8104  1291  0008               	return
  8105  1292                     __end_of_setRF_DimmerValue:	
  8106                           
  8107                           	psect	text33
  8108  10BD                     __ptext33:	
  8109 ;; *************** function _setDimmerLights_AdjRF *****************
  8110 ;; Defined at:
  8111 ;;		line 758 in file "../src/Dimmer_B1.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  lights          1    wreg     unsigned char 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  lights          1   67[BANK0 ] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;		None               void
  8118 ;; Registers used:
  8119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;Total ram usage:        2 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    8
  8132 ;; This function calls:
  8133 ;;		_DimmerLightsPointSelect
  8134 ;;		_getPercentValue
  8135 ;; This function is called by:
  8136 ;;		_setRF_DimmerValue
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _setDimmerLights_AdjRF
  8142  10BD                     _setDimmerLights_AdjRF:	
  8143                           
  8144                           ;incstack = 0
  8145                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8146                           ;setDimmerLights_AdjRF@lights stored from wreg
  8147  10BD  0020               	movlb	0	; select bank0
  8148  10BE  00E3               	movwf	setDimmerLights_AdjRF@lights
  8149                           
  8150                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  8151  10BF  0863               	movf	setDimmerLights_AdjRF@lights,w
  8152  10C0  319C  24C8  3190   	fcall	_DimmerLightsPointSelect
  8153                           
  8154                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  8155  10C3  0020               	movlb	0	; select bank0
  8156  10C4  086F               	movf	_DimmerLights,w
  8157  10C5  0086               	movwf	6
  8158  10C6  3001               	movlw	1	; select bank2/3
  8159  10C7  0087               	movwf	7
  8160  10C8  1501               	bsf	1,2
  8161                           
  8162                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  8163  10C9  086F               	movf	_DimmerLights,w
  8164  10CA  0086               	movwf	6
  8165  10CB  3001               	movlw	1	; select bank2/3
  8166  10CC  0087               	movwf	7
  8167  10CD  1481               	bsf	1,1
  8168                           
  8169                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8170  10CE  086E               	movf	_product,w
  8171  10CF  3E09               	addlw	9
  8172  10D0  0086               	movwf	6
  8173  10D1  3002               	movlw	2	; select bank4/5
  8174  10D2  0087               	movwf	7
  8175  10D3  0801               	movf	1,w
  8176  10D4  318A  22BD         	fcall	_getPercentValue
  8177  10D6  0020               	movlb	0	; select bank0
  8178  10D7  00E2               	movwf	??_setDimmerLights_AdjRF
  8179  10D8  086F               	movf	_DimmerLights,w
  8180  10D9  3E05               	addlw	5
  8181  10DA  0086               	movwf	6
  8182  10DB  3001               	movlw	1	; select bank2/3
  8183  10DC  0087               	movwf	7
  8184  10DD  0862               	movf	??_setDimmerLights_AdjRF,w
  8185  10DE  0081               	movwf	1
  8186  10DF  0008               	return
  8187  10E0                     __end_of_setDimmerLights_AdjRF:	
  8188                           
  8189                           	psect	text34
  8190  0ABD                     __ptext34:	
  8191 ;; *************** function _getPercentValue *****************
  8192 ;; Defined at:
  8193 ;;		line 870 in file "../src/Dimmer_B1.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  value           1    wreg     unsigned char 
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;  value           1   62[BANK0 ] unsigned char 
  8198 ;;  i               3   63[BANK0 ] float 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      unsigned char 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0, pclath, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:        6 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    7
  8215 ;; This function calls:
  8216 ;;		___awtoft
  8217 ;;		___ftadd
  8218 ;;		___ftdiv
  8219 ;;		___ftmul
  8220 ;;		___ftneg
  8221 ;;		___fttol
  8222 ;; This function is called by:
  8223 ;;		_setDimmerLights_AdjRF
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _getPercentValue
  8229  0ABD                     _getPercentValue:	
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8233                           ;getPercentValue@value stored from wreg
  8234  0ABD  0020               	movlb	0	; select bank0
  8235  0ABE  00DE               	movwf	getPercentValue@value
  8236                           
  8237                           ;Dimmer_B1.c: 878: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8238  0ABF  3000               	movlw	0
  8239  0AC0  00DF               	movwf	getPercentValue@i
  8240  0AC1  3050               	movlw	80
  8241  0AC2  00E0               	movwf	getPercentValue@i+1
  8242  0AC3  3042               	movlw	66
  8243  0AC4  00E1               	movwf	getPercentValue@i+2
  8244                           
  8245                           ;Dimmer_B1.c: 879: i /= 100;
  8246  0AC5  3000               	movlw	0
  8247  0AC6  00AE               	movwf	___ftdiv@f2
  8248  0AC7  30C8               	movlw	200
  8249  0AC8  00AF               	movwf	___ftdiv@f2+1
  8250  0AC9  3042               	movlw	66
  8251  0ACA  00B0               	movwf	___ftdiv@f2+2
  8252  0ACB  085F               	movf	getPercentValue@i,w
  8253  0ACC  00B1               	movwf	___ftdiv@f1
  8254  0ACD  0860               	movf	getPercentValue@i+1,w
  8255  0ACE  00B2               	movwf	___ftdiv@f1+1
  8256  0ACF  0861               	movf	getPercentValue@i+2,w
  8257  0AD0  00B3               	movwf	___ftdiv@f1+2
  8258  0AD1  318E  26A3  318A   	fcall	___ftdiv
  8259  0AD4  0020               	movlb	0	; select bank0
  8260  0AD5  082E               	movf	?___ftdiv,w
  8261  0AD6  00DF               	movwf	getPercentValue@i
  8262  0AD7  082F               	movf	?___ftdiv+1,w
  8263  0AD8  00E0               	movwf	getPercentValue@i+1
  8264  0AD9  0830               	movf	?___ftdiv+2,w
  8265  0ADA  00E1               	movwf	getPercentValue@i+2
  8266                           
  8267                           ;Dimmer_B1.c: 881: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8268  0ADB  085E               	movf	getPercentValue@value,w
  8269  0ADC  00DC               	movwf	??_getPercentValue
  8270  0ADD  01DD               	clrf	??_getPercentValue+1
  8271  0ADE  09DC               	comf	??_getPercentValue,f
  8272  0ADF  09DD               	comf	??_getPercentValue+1,f
  8273  0AE0  0ADC               	incf	??_getPercentValue,f
  8274  0AE1  1903               	skipnz
  8275  0AE2  0ADD               	incf	??_getPercentValue+1,f
  8276  0AE3  085C               	movf	??_getPercentValue,w
  8277  0AE4  3E64               	addlw	100
  8278  0AE5  00A8               	movwf	___awtoft@c
  8279  0AE6  3000               	movlw	0
  8280  0AE7  3D5D               	addwfc	??_getPercentValue+1,w
  8281  0AE8  00A9               	movwf	___awtoft@c+1
  8282  0AE9  3190  2079  318A   	fcall	___awtoft
  8283  0AEC  0020               	movlb	0	; select bank0
  8284  0AED  0828               	movf	?___awtoft,w
  8285  0AEE  00B1               	movwf	___ftmul@f2
  8286  0AEF  0829               	movf	?___awtoft+1,w
  8287  0AF0  00B2               	movwf	___ftmul@f2+1
  8288  0AF1  082A               	movf	?___awtoft+2,w
  8289  0AF2  00B3               	movwf	___ftmul@f2+2
  8290  0AF3  085F               	movf	getPercentValue@i,w
  8291  0AF4  00AE               	movwf	___ftmul@f1
  8292  0AF5  0860               	movf	getPercentValue@i+1,w
  8293  0AF6  00AF               	movwf	___ftmul@f1+1
  8294  0AF7  0861               	movf	getPercentValue@i+2,w
  8295  0AF8  00B0               	movwf	___ftmul@f1+2
  8296  0AF9  318F  274C  318A   	fcall	___ftmul
  8297  0AFC  0020               	movlb	0	; select bank0
  8298  0AFD  082E               	movf	?___ftmul,w
  8299  0AFE  00BE               	movwf	___ftneg@f1
  8300  0AFF  082F               	movf	?___ftmul+1,w
  8301  0B00  00BF               	movwf	___ftneg@f1+1
  8302  0B01  0830               	movf	?___ftmul+2,w
  8303  0B02  00C0               	movwf	___ftneg@f1+2
  8304  0B03  319C  2483  318A   	fcall	___ftneg
  8305  0B06  0020               	movlb	0	; select bank0
  8306  0B07  083E               	movf	?___ftneg,w
  8307  0B08  00C4               	movwf	___ftadd@f2
  8308  0B09  083F               	movf	?___ftneg+1,w
  8309  0B0A  00C5               	movwf	___ftadd@f2+1
  8310  0B0B  0840               	movf	?___ftneg+2,w
  8311  0B0C  00C6               	movwf	___ftadd@f2+2
  8312  0B0D  3000               	movlw	0
  8313  0B0E  00C1               	movwf	___ftadd@f1
  8314  0B0F  3080               	movlw	128
  8315  0B10  00C2               	movwf	___ftadd@f1+1
  8316  0B11  3042               	movlw	66
  8317  0B12  00C3               	movwf	___ftadd@f1+2
  8318  0B13  3184  242D  318A   	fcall	___ftadd
  8319  0B16  0020               	movlb	0	; select bank0
  8320  0B17  0841               	movf	?___ftadd,w
  8321  0B18  00CE               	movwf	___fttol@f1
  8322  0B19  0842               	movf	?___ftadd+1,w
  8323  0B1A  00CF               	movwf	___fttol@f1+1
  8324  0B1B  0843               	movf	?___ftadd+2,w
  8325  0B1C  00D0               	movwf	___fttol@f1+2
  8326  0B1D  318C  24EE         	fcall	___fttol
  8327  0B1F  0020               	movlb	0	; select bank0
  8328  0B20  084E               	movf	?___fttol,w
  8329  0B21  0008               	return
  8330  0B22                     __end_of_getPercentValue:	
  8331                           
  8332                           	psect	text35
  8333  0F4C                     __ptext35:	
  8334 ;; *************** function ___ftmul *****************
  8335 ;; Defined at:
  8336 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  f1              3   14[BANK0 ] float 
  8339 ;;  f2              3   17[BANK0 ] float 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8342 ;;  sign            1   29[BANK0 ] unsigned char 
  8343 ;;  cntr            1   28[BANK0 ] unsigned char 
  8344 ;;  exp             1   24[BANK0 ] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  3   14[BANK0 ] float 
  8347 ;; Registers used:
  8348 ;;		wreg, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:       16 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    6
  8361 ;; This function calls:
  8362 ;;		___ftpack
  8363 ;; This function is called by:
  8364 ;;		_getPercentValue
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function ___ftmul
  8370  0F4C                     ___ftmul:	
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8374  0F4C  0020               	movlb	0	; select bank0
  8375  0F4D  082E               	movf	___ftmul@f1,w
  8376  0F4E  00B4               	movwf	??___ftmul
  8377  0F4F  082F               	movf	___ftmul@f1+1,w
  8378  0F50  00B5               	movwf	??___ftmul+1
  8379  0F51  0830               	movf	___ftmul@f1+2,w
  8380  0F52  00B6               	movwf	??___ftmul+2
  8381  0F53  1003               	clrc
  8382  0F54  0D35               	rlf	??___ftmul+1,w
  8383  0F55  0D36               	rlf	??___ftmul+2,w
  8384  0F56  00B7               	movwf	??___ftmul+3
  8385  0F57  0837               	movf	??___ftmul+3,w
  8386  0F58  00B8               	movwf	___ftmul@exp
  8387  0F59  08B8               	movf	___ftmul@exp,f
  8388  0F5A  1D03               	skipz
  8389  0F5B  2F63               	goto	l5539
  8390  0F5C  3000               	movlw	0
  8391  0F5D  00AE               	movwf	?___ftmul
  8392  0F5E  3000               	movlw	0
  8393  0F5F  00AF               	movwf	?___ftmul+1
  8394  0F60  3000               	movlw	0
  8395  0F61  00B0               	movwf	?___ftmul+2
  8396  0F62  0008               	return
  8397  0F63                     l5539:	
  8398  0F63  0831               	movf	___ftmul@f2,w
  8399  0F64  00B4               	movwf	??___ftmul
  8400  0F65  0832               	movf	___ftmul@f2+1,w
  8401  0F66  00B5               	movwf	??___ftmul+1
  8402  0F67  0833               	movf	___ftmul@f2+2,w
  8403  0F68  00B6               	movwf	??___ftmul+2
  8404  0F69  1003               	clrc
  8405  0F6A  0D35               	rlf	??___ftmul+1,w
  8406  0F6B  0D36               	rlf	??___ftmul+2,w
  8407  0F6C  00B7               	movwf	??___ftmul+3
  8408  0F6D  0837               	movf	??___ftmul+3,w
  8409  0F6E  00BD               	movwf	___ftmul@sign
  8410  0F6F  08BD               	movf	___ftmul@sign,f
  8411  0F70  1D03               	skipz
  8412  0F71  2F79               	goto	l5545
  8413  0F72  3000               	movlw	0
  8414  0F73  00AE               	movwf	?___ftmul
  8415  0F74  3000               	movlw	0
  8416  0F75  00AF               	movwf	?___ftmul+1
  8417  0F76  3000               	movlw	0
  8418  0F77  00B0               	movwf	?___ftmul+2
  8419  0F78  0008               	return
  8420  0F79                     l5545:	
  8421  0F79  083D               	movf	___ftmul@sign,w
  8422  0F7A  3E7B               	addlw	123
  8423  0F7B  00B4               	movwf	??___ftmul
  8424  0F7C  0834               	movf	??___ftmul,w
  8425  0F7D  07B8               	addwf	___ftmul@exp,f
  8426  0F7E  082E               	movf	___ftmul@f1,w
  8427  0F7F  00B4               	movwf	??___ftmul
  8428  0F80  082F               	movf	___ftmul@f1+1,w
  8429  0F81  00B5               	movwf	??___ftmul+1
  8430  0F82  0830               	movf	___ftmul@f1+2,w
  8431  0F83  00B6               	movwf	??___ftmul+2
  8432  0F84  3010               	movlw	16
  8433  0F85                     u4415:	
  8434  0F85  36B6               	lsrf	??___ftmul+2,f
  8435  0F86  0CB5               	rrf	??___ftmul+1,f
  8436  0F87  0CB4               	rrf	??___ftmul,f
  8437  0F88  0B89               	decfsz	9,f
  8438  0F89  2F85               	goto	u4415
  8439  0F8A  0834               	movf	??___ftmul,w
  8440  0F8B  00B7               	movwf	??___ftmul+3
  8441  0F8C  0837               	movf	??___ftmul+3,w
  8442  0F8D  00BD               	movwf	___ftmul@sign
  8443  0F8E  0831               	movf	___ftmul@f2,w
  8444  0F8F  00B4               	movwf	??___ftmul
  8445  0F90  0832               	movf	___ftmul@f2+1,w
  8446  0F91  00B5               	movwf	??___ftmul+1
  8447  0F92  0833               	movf	___ftmul@f2+2,w
  8448  0F93  00B6               	movwf	??___ftmul+2
  8449  0F94  3010               	movlw	16
  8450  0F95                     u4425:	
  8451  0F95  36B6               	lsrf	??___ftmul+2,f
  8452  0F96  0CB5               	rrf	??___ftmul+1,f
  8453  0F97  0CB4               	rrf	??___ftmul,f
  8454  0F98  0B89               	decfsz	9,f
  8455  0F99  2F95               	goto	u4425
  8456  0F9A  0834               	movf	??___ftmul,w
  8457  0F9B  00B7               	movwf	??___ftmul+3
  8458  0F9C  0837               	movf	??___ftmul+3,w
  8459  0F9D  06BD               	xorwf	___ftmul@sign,f
  8460  0F9E  3080               	movlw	128
  8461  0F9F  00B4               	movwf	??___ftmul
  8462  0FA0  0834               	movf	??___ftmul,w
  8463  0FA1  05BD               	andwf	___ftmul@sign,f
  8464  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8465  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8466  0FA4  30FF               	movlw	255
  8467  0FA5  05B1               	andwf	___ftmul@f2,f
  8468  0FA6  30FF               	movlw	255
  8469  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8470  0FA8  3000               	movlw	0
  8471  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8472  0FAA  3000               	movlw	0
  8473  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8474  0FAC  3000               	movlw	0
  8475  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8476  0FAE  3000               	movlw	0
  8477  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8478  0FB0  3007               	movlw	7
  8479  0FB1  00B4               	movwf	??___ftmul
  8480  0FB2  0834               	movf	??___ftmul,w
  8481  0FB3  00BC               	movwf	___ftmul@cntr
  8482  0FB4                     l5557:	
  8483  0FB4  1C2E               	btfss	___ftmul@f1,0
  8484  0FB5  2FBC               	goto	l5561
  8485  0FB6  0831               	movf	___ftmul@f2,w
  8486  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8487  0FB8  0832               	movf	___ftmul@f2+1,w
  8488  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8489  0FBA  0833               	movf	___ftmul@f2+2,w
  8490  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8491  0FBC                     l5561:	
  8492  0FBC  3001               	movlw	1
  8493  0FBD                     u4445:	
  8494  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8495  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8496  0FBF  0CAE               	rrf	___ftmul@f1,f
  8497  0FC0  0B89               	decfsz	9,f
  8498  0FC1  2FBD               	goto	u4445
  8499  0FC2  3001               	movlw	1
  8500  0FC3                     u4455:	
  8501  0FC3  35B1               	lslf	___ftmul@f2,f
  8502  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8503  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8504  0FC6  0B89               	decfsz	9,f
  8505  0FC7  2FC3               	goto	u4455
  8506  0FC8  3001               	movlw	1
  8507  0FC9  02BC               	subwf	___ftmul@cntr,f
  8508  0FCA  1D03               	btfss	3,2
  8509  0FCB  2FB4               	goto	l5557
  8510  0FCC  3009               	movlw	9
  8511  0FCD  00B4               	movwf	??___ftmul
  8512  0FCE  0834               	movf	??___ftmul,w
  8513  0FCF  00BC               	movwf	___ftmul@cntr
  8514  0FD0                     l5569:	
  8515  0FD0  1C2E               	btfss	___ftmul@f1,0
  8516  0FD1  2FD8               	goto	l5573
  8517  0FD2  0831               	movf	___ftmul@f2,w
  8518  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8519  0FD4  0832               	movf	___ftmul@f2+1,w
  8520  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8521  0FD6  0833               	movf	___ftmul@f2+2,w
  8522  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8523  0FD8                     l5573:	
  8524  0FD8  3001               	movlw	1
  8525  0FD9                     u4485:	
  8526  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8527  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8528  0FDB  0CAE               	rrf	___ftmul@f1,f
  8529  0FDC  0B89               	decfsz	9,f
  8530  0FDD  2FD9               	goto	u4485
  8531  0FDE  3001               	movlw	1
  8532  0FDF                     u4495:	
  8533  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8534  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8535  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8536  0FE2  0B89               	decfsz	9,f
  8537  0FE3  2FDF               	goto	u4495
  8538  0FE4  3001               	movlw	1
  8539  0FE5  02BC               	subwf	___ftmul@cntr,f
  8540  0FE6  1D03               	btfss	3,2
  8541  0FE7  2FD0               	goto	l5569
  8542  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8543  0FE9  00A0               	movwf	___ftpack@arg
  8544  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8545  0FEB  00A1               	movwf	___ftpack@arg+1
  8546  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8547  0FED  00A2               	movwf	___ftpack@arg+2
  8548  0FEE  0838               	movf	___ftmul@exp,w
  8549  0FEF  00B4               	movwf	??___ftmul
  8550  0FF0  0834               	movf	??___ftmul,w
  8551  0FF1  00A3               	movwf	___ftpack@exp
  8552  0FF2  083D               	movf	___ftmul@sign,w
  8553  0FF3  00B5               	movwf	??___ftmul+1
  8554  0FF4  0835               	movf	??___ftmul+1,w
  8555  0FF5  00A4               	movwf	___ftpack@sign
  8556  0FF6  3189  2192         	fcall	___ftpack
  8557  0FF8  0020               	movlb	0	; select bank0
  8558  0FF9  0820               	movf	?___ftpack,w
  8559  0FFA  00AE               	movwf	?___ftmul
  8560  0FFB  0821               	movf	?___ftpack+1,w
  8561  0FFC  00AF               	movwf	?___ftmul+1
  8562  0FFD  0822               	movf	?___ftpack+2,w
  8563  0FFE  00B0               	movwf	?___ftmul+2
  8564  0FFF  0008               	return
  8565  1000                     __end_of___ftmul:	
  8566                           
  8567                           	psect	text36
  8568  1E46                     __ptext36:	
  8569 ;; *************** function _setMemory_Modify *****************
  8570 ;; Defined at:
  8571 ;;		line 1000 in file "../src/MCU_B1.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  command         1    wreg     unsigned char 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  command         1    1[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;		None               void
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;Total ram usage:        2 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    5
  8592 ;; This function calls:
  8593 ;;		Nothing
  8594 ;; This function is called by:
  8595 ;;		_setLog_Code
  8596 ;;		_setRFSW_AdjControl
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function _setMemory_Modify
  8602  1E46                     _setMemory_Modify:	
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8606                           ;setMemory_Modify@command stored from wreg
  8607  1E46  0020               	movlb	0	; select bank0
  8608  1E47  00A1               	movwf	setMemory_Modify@command
  8609                           
  8610                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8611  1E48  0821               	movf	setMemory_Modify@command,w
  8612  1E49  3A01               	xorlw	1
  8613  1E4A  3000               	movlw	0
  8614  1E4B  1903               	skipnz
  8615  1E4C  3001               	movlw	1
  8616  1E4D  00A0               	movwf	??_setMemory_Modify
  8617  1E4E  0023               	movlb	3	; select bank3
  8618  1E4F  0844               	movf	(_Memory^(0+384)+36),w
  8619  1E50  0020               	movlb	0	; select bank0
  8620  1E51  0620               	xorwf	??_setMemory_Modify,w
  8621  1E52  39FE               	andlw	-2
  8622  1E53  0620               	xorwf	??_setMemory_Modify,w
  8623  1E54  0023               	movlb	3	; select bank3
  8624  1E55  00C4               	movwf	(_Memory^(0+384)+36)
  8625                           
  8626                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8627  1E56  01C2               	clrf	(_Memory^(0+384)+34)
  8628  1E57  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8629  1E58  0008               	return
  8630  1E59                     __end_of_setMemory_Modify:	
  8631                           
  8632                           	psect	text37
  8633  1DEE                     __ptext37:	
  8634 ;; *************** function _getRF_KeyStatus *****************
  8635 ;; Defined at:
  8636 ;;		line 187 in file "../src/RF_Control_B1.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;		None
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;  key             1    1[BANK0 ] unsigned char 
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      unsigned char 
  8643 ;; Registers used:
  8644 ;;		wreg, status,2
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;Total ram usage:        3 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    5
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_setRF_Main
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           
  8665                           ;psect for function _getRF_KeyStatus
  8666  1DEE                     _getRF_KeyStatus:	
  8667                           
  8668                           ;RF_Control_B1.c: 188: char key = 0;
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8672  1DEE  0020               	movlb	0	; select bank0
  8673  1DEF  01A1               	clrf	getRF_KeyStatus@key
  8674                           
  8675                           ;RF_Control_B1.c: 198: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8676  1DF0  01A2               	clrf	_getRF_KeyStatus$5474
  8677  1DF1  0AA2               	incf	_getRF_KeyStatus$5474,f
  8678  1DF2  1F0C               	btfss	12,6	;volatile
  8679  1DF3  1A0C               	btfsc	12,4	;volatile
  8680  1DF4  2DF9               	goto	l6523
  8681  1DF5  1C0C               	btfss	12,0	;volatile
  8682  1DF6  1B8C               	btfsc	12,7	;volatile
  8683  1DF7  2DF9               	goto	l6523
  8684  1DF8  01A2               	clrf	_getRF_KeyStatus$5474
  8685  1DF9                     l6523:	
  8686  1DF9  0822               	movf	_getRF_KeyStatus$5474,w
  8687  1DFA  00A0               	movwf	??_getRF_KeyStatus
  8688  1DFB  0820               	movf	??_getRF_KeyStatus,w
  8689  1DFC  00A1               	movwf	getRF_KeyStatus@key
  8690                           
  8691                           ;RF_Control_B1.c: 200: return key;
  8692  1DFD  0821               	movf	getRF_KeyStatus@key,w
  8693  1DFE  0008               	return
  8694  1DFF                     __end_of_getRF_KeyStatus:	
  8695                           
  8696                           	psect	text38
  8697  1DDD                     __ptext38:	
  8698 ;; *************** function _getBuz_GO *****************
  8699 ;; Defined at:
  8700 ;;		line 82 in file "../src/Buzzer_B1.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;		None
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  i               2    4[BANK0 ] int 
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  2    0[BANK0 ] int 
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8714 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;Total ram usage:        6 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    5
  8721 ;; This function calls:
  8722 ;;		Nothing
  8723 ;; This function is called by:
  8724 ;;		_setRF_Main
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function _getBuz_GO
  8730  1DDD                     _getBuz_GO:	
  8731                           
  8732                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8736  1DDD  0021               	movlb	1	; select bank1
  8737  1DDE  0C30               	rrf	_Buz1^(0+128),w
  8738  1DDF  3901               	andlw	1
  8739  1DE0  0020               	movlb	0	; select bank0
  8740  1DE1  00A2               	movwf	??_getBuz_GO
  8741  1DE2  01A3               	clrf	??_getBuz_GO+1
  8742  1DE3  0822               	movf	??_getBuz_GO,w
  8743  1DE4  00A4               	movwf	getBuz_GO@i
  8744  1DE5  0823               	movf	??_getBuz_GO+1,w
  8745  1DE6  00A5               	movwf	getBuz_GO@i+1
  8746                           
  8747                           ;Buzzer_B1.c: 84: return i;
  8748  1DE7  0825               	movf	getBuz_GO@i+1,w
  8749  1DE8  01A1               	clrf	?_getBuz_GO+1
  8750  1DE9  07A1               	addwf	?_getBuz_GO+1,f
  8751  1DEA  0824               	movf	getBuz_GO@i,w
  8752  1DEB  01A0               	clrf	?_getBuz_GO
  8753  1DEC  07A0               	addwf	?_getBuz_GO,f
  8754  1DED  0008               	return
  8755  1DEE                     __end_of_getBuz_GO:	
  8756                           
  8757                           	psect	text39
  8758  0A58                     __ptext39:	
  8759 ;; *************** function _CC2500_TxData *****************
  8760 ;; Defined at:
  8761 ;;		line 32 in file "../src/CC2500_B1.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;		None               void
  8768 ;; Registers used:
  8769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        2 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    7
  8782 ;; This function calls:
  8783 ;;		_CC2500_WriteByte
  8784 ;;		_CC2500_WriteCommand
  8785 ;;		_Timeout_Counter
  8786 ;;		_set_TimeoutCleared
  8787 ;; This function is called by:
  8788 ;;		_setRF_Main
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _CC2500_TxData
  8794  0A58                     _CC2500_TxData:	
  8795                           
  8796                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8797                           ;CC2500_B1.c: 35: RC0 = 0;
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8801  0A58  0020               	movlb	0	; select bank0
  8802  0A59  100E               	bcf	14,0	;volatile
  8803                           
  8804                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8805  0A5A  307F               	movlw	127
  8806  0A5B  00A4               	movwf	??_CC2500_TxData
  8807  0A5C  0824               	movf	??_CC2500_TxData,w
  8808  0A5D  00FB               	movwf	_SPI0Buffer
  8809                           
  8810                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8811  0A5E  2A62               	goto	l6187
  8812  0A5F                     l6185:	
  8813                           
  8814                           ;CC2500_B1.c: 38: Timeout_Counter();
  8815  0A5F  319E  2681  318A   	fcall	_Timeout_Counter
  8816  0A62                     l6187:	
  8817  0A62  0020               	movlb	0	; select bank0
  8818  0A63  1E8E               	btfss	14,5	;volatile
  8819  0A64  2A68               	goto	l6191
  8820  0A65  0021               	movlb	1	; select bank1
  8821  0A66  1D2D               	btfss	(_myMain^(0+128)+13),2
  8822  0A67  2A5F               	goto	l6185
  8823  0A68                     l6191:	
  8824                           
  8825                           ;CC2500_B1.c: 39: };
  8826                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8827  0A68  319C  2450  318A   	fcall	_set_TimeoutCleared
  8828                           
  8829                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8830  0A6B  319E  2659  318A   	fcall	_CC2500_WriteByte
  8831                           
  8832                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8833  0A6E  0021               	movlb	1	; select bank1
  8834  0A6F  0853               	movf	_Tx_Length^(0+128),w
  8835  0A70  0020               	movlb	0	; select bank0
  8836  0A71  00A4               	movwf	??_CC2500_TxData
  8837  0A72  0824               	movf	??_CC2500_TxData,w
  8838  0A73  00FB               	movwf	_SPI0Buffer
  8839                           
  8840                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8841  0A74  319E  2659  318A   	fcall	_CC2500_WriteByte
  8842                           
  8843                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8844  0A77  0020               	movlb	0	; select bank0
  8845  0A78  01A5               	clrf	CC2500_TxData@loop_e
  8846  0A79                     l6205:	
  8847  0A79  0021               	movlb	1	; select bank1
  8848  0A7A  0853               	movf	_Tx_Length^(0+128),w
  8849  0A7B  0020               	movlb	0	; select bank0
  8850  0A7C  0225               	subwf	CC2500_TxData@loop_e,w
  8851  0A7D  1803               	btfsc	3,0
  8852  0A7E  2A91               	goto	l231
  8853                           
  8854                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8855  0A7F  0825               	movf	CC2500_TxData@loop_e,w
  8856  0A80  3E20               	addlw	_RF_Data& (0+255)
  8857  0A81  0086               	movwf	6
  8858  0A82  3001               	movlw	1	; select bank2/3
  8859  0A83  0087               	movwf	7
  8860  0A84  0801               	movf	1,w
  8861  0A85  00A4               	movwf	??_CC2500_TxData
  8862  0A86  0824               	movf	??_CC2500_TxData,w
  8863  0A87  00FB               	movwf	_SPI0Buffer
  8864                           
  8865                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8866  0A88  319E  2659  318A   	fcall	_CC2500_WriteByte
  8867  0A8B  3001               	movlw	1
  8868  0A8C  0020               	movlb	0	; select bank0
  8869  0A8D  00A4               	movwf	??_CC2500_TxData
  8870  0A8E  0824               	movf	??_CC2500_TxData,w
  8871  0A8F  07A5               	addwf	CC2500_TxData@loop_e,f
  8872  0A90  2A79               	goto	l6205
  8873  0A91                     l231:	
  8874                           
  8875                           ;CC2500_B1.c: 48: }
  8876                           ;CC2500_B1.c: 49: RC0 = 1;
  8877  0A91  140E               	bsf	14,0	;volatile
  8878                           
  8879                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8880  0A92  3035               	movlw	53
  8881  0A93  319E  26EF  318A   	fcall	_CC2500_WriteCommand
  8882                           
  8883                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8884  0A96  2A9A               	goto	l6211
  8885  0A97                     l6209:	
  8886                           
  8887                           ;CC2500_B1.c: 52: Timeout_Counter();
  8888  0A97  319E  2681  318A   	fcall	_Timeout_Counter
  8889  0A9A                     l6211:	
  8890  0A9A  0020               	movlb	0	; select bank0
  8891  0A9B  188E               	btfsc	14,1	;volatile
  8892  0A9C  2AA0               	goto	l6215
  8893  0A9D  0021               	movlb	1	; select bank1
  8894  0A9E  1D2D               	btfss	(_myMain^(0+128)+13),2
  8895  0A9F  2A97               	goto	l6209
  8896  0AA0                     l6215:	
  8897                           
  8898                           ;CC2500_B1.c: 53: };
  8899                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8900  0AA0  319C  2450  318A   	fcall	_set_TimeoutCleared
  8901                           
  8902                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8903  0AA3  2AA7               	goto	l6219
  8904  0AA4                     l6217:	
  8905                           
  8906                           ;CC2500_B1.c: 57: Timeout_Counter();
  8907  0AA4  319E  2681  318A   	fcall	_Timeout_Counter
  8908  0AA7                     l6219:	
  8909  0AA7  0020               	movlb	0	; select bank0
  8910  0AA8  1C8E               	btfss	14,1	;volatile
  8911  0AA9  2AAD               	goto	l6223
  8912  0AAA  0021               	movlb	1	; select bank1
  8913  0AAB  1D2D               	btfss	(_myMain^(0+128)+13),2
  8914  0AAC  2AA4               	goto	l6217
  8915  0AAD                     l6223:	
  8916                           
  8917                           ;CC2500_B1.c: 58: };
  8918                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8919  0AAD  319C  2450  318A   	fcall	_set_TimeoutCleared
  8920                           
  8921                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8922  0AB0  3036               	movlw	54
  8923  0AB1  319E  26EF  318A   	fcall	_CC2500_WriteCommand
  8924                           
  8925                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8926  0AB4  303B               	movlw	59
  8927  0AB5  319E  26EF  318A   	fcall	_CC2500_WriteCommand
  8928                           
  8929                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8930  0AB8  303A               	movlw	58
  8931  0AB9  319E  26EF         	fcall	_CC2500_WriteCommand
  8932                           
  8933                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8934  0ABB  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8935  0ABC  0008               	return
  8936  0ABD                     __end_of_CC2500_TxData:	
  8937                           
  8938                           	psect	text40
  8939  0B88                     __ptext40:	
  8940 ;; *************** function _CC2500_RxData *****************
  8941 ;; Defined at:
  8942 ;;		line 70 in file "../src/CC2500_B1.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        2 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    7
  8963 ;; This function calls:
  8964 ;;		_CC2500_ReadByte
  8965 ;;		_CC2500_ReadStatus
  8966 ;;		_CC2500_WriteByte
  8967 ;;		_Timeout_Counter
  8968 ;;		_set_TimeoutCleared
  8969 ;; This function is called by:
  8970 ;;		_setRF_Main
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _CC2500_RxData
  8976  0B88                     _CC2500_RxData:	
  8977                           
  8978                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8979                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8980                           
  8981                           ;incstack = 0
  8982                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8983  0B88  0020               	movlb	0	; select bank0
  8984  0B89  188E               	btfsc	14,1	;volatile
  8985  0B8A  2B8F               	goto	l6239
  8986  0B8B  2B98               	goto	l6245
  8987  0B8C                     l6237:	
  8988                           ;CC2500_B1.c: 76: {
  8989                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8990                           
  8991                           
  8992                           ;CC2500_B1.c: 78: Timeout_Counter();
  8993  0B8C  319E  2681  318B   	fcall	_Timeout_Counter
  8994  0B8F                     l6239:	
  8995  0B8F  0020               	movlb	0	; select bank0
  8996  0B90  1C8E               	btfss	14,1	;volatile
  8997  0B91  2B95               	goto	l6243
  8998  0B92  0021               	movlb	1	; select bank1
  8999  0B93  1D2D               	btfss	(_myMain^(0+128)+13),2
  9000  0B94  2B8C               	goto	l6237
  9001  0B95                     l6243:	
  9002                           
  9003                           ;CC2500_B1.c: 79: };
  9004                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9005  0B95  319C  2450  318B   	fcall	_set_TimeoutCleared
  9006  0B98                     l6245:	
  9007                           
  9008                           ;CC2500_B1.c: 81: }
  9009                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9010  0B98  303B               	movlw	59
  9011  0B99  3190  209B  318B   	fcall	_CC2500_ReadStatus
  9012                           
  9013                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9014  0B9C  0021               	movlb	1	; select bank1
  9015  0B9D  0856               	movf	_s_data^(0+128),w
  9016  0B9E  1903               	btfsc	3,2
  9017  0B9F  0008               	return
  9018                           
  9019                           ;CC2500_B1.c: 86: RC0 = 0;
  9020  0BA0  0020               	movlb	0	; select bank0
  9021  0BA1  100E               	bcf	14,0	;volatile
  9022                           
  9023                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9024  0BA2  30FF               	movlw	255
  9025  0BA3  00A4               	movwf	??_CC2500_RxData
  9026  0BA4  0824               	movf	??_CC2500_RxData,w
  9027  0BA5  00FB               	movwf	_SPI0Buffer
  9028                           
  9029                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9030  0BA6  2BAD               	goto	l6255
  9031  0BA7                     l6257:	
  9032  0BA7  0021               	movlb	1	; select bank1
  9033  0BA8  192D               	btfsc	(_myMain^(0+128)+13),2
  9034  0BA9  2BB0               	goto	l256
  9035                           
  9036                           ;CC2500_B1.c: 89: Timeout_Counter();
  9037  0BAA  319E  2681  318B   	fcall	_Timeout_Counter
  9038  0BAD                     l6255:	
  9039  0BAD  0020               	movlb	0	; select bank0
  9040  0BAE  1A8E               	btfsc	14,5	;volatile
  9041  0BAF  2BA7               	goto	l6257
  9042  0BB0                     l256:	
  9043                           
  9044                           ;CC2500_B1.c: 90: };
  9045                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9046  0BB0  0021               	movlb	1	; select bank1
  9047  0BB1  192D               	btfsc	(_myMain^(0+128)+13),2
  9048  0BB2  2BF3               	goto	l257
  9049                           
  9050                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9051  0BB3  319E  2659  318B   	fcall	_CC2500_WriteByte
  9052                           
  9053                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9054  0BB6  319E  26C0  318B   	fcall	_CC2500_ReadByte
  9055                           
  9056                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9057  0BB9  087B               	movf	_SPI0Buffer,w
  9058  0BBA  0020               	movlb	0	; select bank0
  9059  0BBB  00A4               	movwf	??_CC2500_RxData
  9060  0BBC  0824               	movf	??_CC2500_RxData,w
  9061  0BBD  0021               	movlb	1	; select bank1
  9062  0BBE  00D1               	movwf	_Rx_Length^(0+128)
  9063                           
  9064                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9065  0BBF  0020               	movlb	0	; select bank0
  9066  0BC0  01A5               	clrf	CC2500_RxData@loop_f
  9067  0BC1                     l6271:	
  9068  0BC1  0021               	movlb	1	; select bank1
  9069  0BC2  0851               	movf	_Rx_Length^(0+128),w
  9070  0BC3  0020               	movlb	0	; select bank0
  9071  0BC4  0225               	subwf	CC2500_RxData@loop_f,w
  9072  0BC5  1803               	btfsc	3,0
  9073  0BC6  2BD9               	goto	l6273
  9074                           
  9075                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9076  0BC7  319E  26C0  318B   	fcall	_CC2500_ReadByte
  9077                           
  9078                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9079  0BCA  087B               	movf	_SPI0Buffer,w
  9080  0BCB  0020               	movlb	0	; select bank0
  9081  0BCC  00A4               	movwf	??_CC2500_RxData
  9082  0BCD  0825               	movf	CC2500_RxData@loop_f,w
  9083  0BCE  3E20               	addlw	_RF_Data& (0+255)
  9084  0BCF  0086               	movwf	6
  9085  0BD0  3001               	movlw	1	; select bank2/3
  9086  0BD1  0087               	movwf	7
  9087  0BD2  0824               	movf	??_CC2500_RxData,w
  9088  0BD3  0081               	movwf	1
  9089  0BD4  3001               	movlw	1
  9090  0BD5  00A4               	movwf	??_CC2500_RxData
  9091  0BD6  0824               	movf	??_CC2500_RxData,w
  9092  0BD7  07A5               	addwf	CC2500_RxData@loop_f,f
  9093  0BD8  2BC1               	goto	l6271
  9094  0BD9                     l6273:	
  9095                           
  9096                           ;CC2500_B1.c: 99: }
  9097                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9098  0BD9  319E  26C0  318B   	fcall	_CC2500_ReadByte
  9099                           
  9100                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9101  0BDC  087B               	movf	_SPI0Buffer,w
  9102  0BDD  0020               	movlb	0	; select bank0
  9103  0BDE  00A4               	movwf	??_CC2500_RxData
  9104  0BDF  0824               	movf	??_CC2500_RxData,w
  9105  0BE0  0021               	movlb	1	; select bank1
  9106  0BE1  00D0               	movwf	_RSSI^(0+128)
  9107                           
  9108                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9109  0BE2  319E  26C0  318B   	fcall	_CC2500_ReadByte
  9110                           
  9111                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9112  0BE5  087B               	movf	_SPI0Buffer,w
  9113  0BE6  0020               	movlb	0	; select bank0
  9114  0BE7  00A4               	movwf	??_CC2500_RxData
  9115  0BE8  0824               	movf	??_CC2500_RxData,w
  9116  0BE9  0021               	movlb	1	; select bank1
  9117  0BEA  00CD               	movwf	_CRC^(0+128)
  9118                           
  9119                           ;CC2500_B1.c: 104: RC0 = 1;
  9120  0BEB  0020               	movlb	0	; select bank0
  9121  0BEC  140E               	bsf	14,0	;volatile
  9122                           
  9123                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9124  0BED  0021               	movlb	1	; select bank1
  9125  0BEE  1BCD               	btfsc	_CRC^(0+128),7
  9126                           
  9127                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9128  0BEF  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9129                           
  9130                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9131  0BF0  11BC               	bcf	_RF1^(0+128),3
  9132                           
  9133                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9134  0BF1  14BC               	bsf	_RF1^(0+128),1
  9135                           
  9136                           ;CC2500_B1.c: 110: } else {
  9137  0BF2  2BF5               	goto	l6285
  9138  0BF3                     l257:	
  9139                           
  9140                           ;CC2500_B1.c: 111: RC0 = 1;
  9141  0BF3  0020               	movlb	0	; select bank0
  9142  0BF4  140E               	bsf	14,0	;volatile
  9143  0BF5                     l6285:	
  9144                           
  9145                           ;CC2500_B1.c: 112: }
  9146                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9147  0BF5  319C  2450         	fcall	_set_TimeoutCleared
  9148  0BF7  0021               	movlb	1	; select bank1
  9149  0BF8  0008               	return
  9150  0BF9                     __end_of_CC2500_RxData:	
  9151                           
  9152                           	psect	text41
  9153  109B                     __ptext41:	
  9154 ;; *************** function _CC2500_ReadStatus *****************
  9155 ;; Defined at:
  9156 ;;		line 304 in file "../src/CC2500_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  status_addr     1    wreg     unsigned char 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9161 ;; Return value:  Size  Location     Type
  9162 ;;		None               void
  9163 ;; Registers used:
  9164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        2 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    6
  9177 ;; This function calls:
  9178 ;;		_CC2500_ReadByte
  9179 ;;		_CC2500_WriteByte
  9180 ;;		_Timeout_Counter
  9181 ;;		_set_TimeoutCleared
  9182 ;; This function is called by:
  9183 ;;		_CC2500_RxData
  9184 ;;		_setRF_Main
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           
  9189                           ;psect for function _CC2500_ReadStatus
  9190  109B                     _CC2500_ReadStatus:	
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9194                           ;CC2500_ReadStatus@status_addr stored from wreg
  9195  109B  0020               	movlb	0	; select bank0
  9196  109C  00A3               	movwf	CC2500_ReadStatus@status_addr
  9197                           
  9198                           ;CC2500_B1.c: 305: RC0 = 0;
  9199  109D  100E               	bcf	14,0	;volatile
  9200                           
  9201                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9202  109E  0823               	movf	CC2500_ReadStatus@status_addr,w
  9203  109F  3EC0               	addlw	192
  9204  10A0  00A2               	movwf	??_CC2500_ReadStatus
  9205  10A1  0822               	movf	??_CC2500_ReadStatus,w
  9206  10A2  00FB               	movwf	_SPI0Buffer
  9207                           
  9208                           ;CC2500_B1.c: 308: while (RC5 == 1 && myMain.Timeout == 0) {
  9209  10A3  28A7               	goto	l6051
  9210  10A4                     l6049:	
  9211                           
  9212                           ;CC2500_B1.c: 309: Timeout_Counter();
  9213  10A4  319E  2681  3190   	fcall	_Timeout_Counter
  9214  10A7                     l6051:	
  9215  10A7  0020               	movlb	0	; select bank0
  9216  10A8  1E8E               	btfss	14,5	;volatile
  9217  10A9  28AD               	goto	l6055
  9218  10AA  0021               	movlb	1	; select bank1
  9219  10AB  1D2D               	btfss	(_myMain^(0+128)+13),2
  9220  10AC  28A4               	goto	l6049
  9221  10AD                     l6055:	
  9222                           
  9223                           ;CC2500_B1.c: 310: };
  9224                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9225  10AD  319C  2450  3190   	fcall	_set_TimeoutCleared
  9226                           
  9227                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9228  10B0  319E  2659  3190   	fcall	_CC2500_WriteByte
  9229                           
  9230                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9231  10B3  319E  26C0         	fcall	_CC2500_ReadByte
  9232                           
  9233                           ;CC2500_B1.c: 315: RC0 = 1;
  9234  10B5  0020               	movlb	0	; select bank0
  9235  10B6  140E               	bsf	14,0	;volatile
  9236                           
  9237                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9238  10B7  087B               	movf	_SPI0Buffer,w
  9239  10B8  00A2               	movwf	??_CC2500_ReadStatus
  9240  10B9  0822               	movf	??_CC2500_ReadStatus,w
  9241  10BA  0021               	movlb	1	; select bank1
  9242  10BB  00D6               	movwf	_s_data^(0+128)
  9243  10BC  0008               	return
  9244  10BD                     __end_of_CC2500_ReadStatus:	
  9245                           
  9246                           	psect	text42
  9247  1EC0                     __ptext42:	
  9248 ;; *************** function _CC2500_ReadByte *****************
  9249 ;; Defined at:
  9250 ;;		line 238 in file "../src/CC2500_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        2 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    5
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_CC2500_RxData
  9275 ;;		_CC2500_ReadStatus
  9276 ;;		_CC2500_ReadREG
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           
  9281                           ;psect for function _CC2500_ReadByte
  9282  1EC0                     _CC2500_ReadByte:	
  9283                           
  9284                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9285                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9289  1EC0  0020               	movlb	0	; select bank0
  9290  1EC1  01A1               	clrf	CC2500_ReadByte@loop_b
  9291  1EC2                     L5:	
  9292  1EC2  3008               	movlw	8
  9293  1EC3  0221               	subwf	CC2500_ReadByte@loop_b,w
  9294  1EC4  1803               	btfsc	3,0
  9295  1EC5  0008               	return
  9296                           
  9297                           ;CC2500_B1.c: 241: RC3 = 1;
  9298  1EC6  158E               	bsf	14,3	;volatile
  9299                           
  9300                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9301  1EC7  1003               	clrc
  9302  1EC8  0DFB               	rlf	_SPI0Buffer,f
  9303                           
  9304                           ;CC2500_B1.c: 243: if (RC5 == 1)
  9305  1EC9  1E8E               	btfss	14,5	;volatile
  9306  1ECA  2ECD               	goto	l5955
  9307                           
  9308                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9309  1ECB  147B               	bsf	_SPI0Buffer,0
  9310  1ECC  2ED1               	goto	l5957
  9311  1ECD                     l5955:	
  9312                           
  9313                           ;CC2500_B1.c: 245: else
  9314                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9315  1ECD  30FE               	movlw	254
  9316  1ECE  00A0               	movwf	??_CC2500_ReadByte
  9317  1ECF  0820               	movf	??_CC2500_ReadByte,w
  9318  1ED0  05FB               	andwf	_SPI0Buffer,f
  9319  1ED1                     l5957:	
  9320                           
  9321                           ;CC2500_B1.c: 247: RC3 = 0;
  9322  1ED1  118E               	bcf	14,3	;volatile
  9323  1ED2  3001               	movlw	1
  9324  1ED3  00A0               	movwf	??_CC2500_ReadByte
  9325  1ED4  0820               	movf	??_CC2500_ReadByte,w
  9326  1ED5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9327  1ED6  2EC2               	goto	L5
  9328  1ED7                     __end_of_CC2500_ReadByte:	
  9329                           
  9330                           	psect	text43
  9331  1C20                     __ptext43:	
  9332 ;; *************** function _RF_Initialization *****************
  9333 ;; Defined at:
  9334 ;;		line 9 in file "../src/RF_Control_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        0 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    6
  9355 ;; This function calls:
  9356 ;;		_setRF_Initialization
  9357 ;; This function is called by:
  9358 ;;		_main
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _RF_Initialization
  9364  1C20                     _RF_Initialization:	
  9365                           
  9366                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9370  1C20  319C  24E9         	fcall	_setRF_Initialization
  9371  1C22  0008               	return
  9372  1C23                     __end_of_RF_Initialization:	
  9373                           
  9374                           	psect	text44
  9375  1CE9                     __ptext44:	
  9376 ;; *************** function _setRF_Initialization *****************
  9377 ;; Defined at:
  9378 ;;		line 43 in file "../src/RF_Control_B1.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;		None               void
  9385 ;; Registers used:
  9386 ;;		wreg
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        1 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    5
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_RF_Initialization
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _setRF_Initialization
  9408  1CE9                     _setRF_Initialization:	
  9409                           
  9410                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _setRF_Initialization: [wreg]
  9414  1CE9  3015               	movlw	21
  9415  1CEA  0020               	movlb	0	; select bank0
  9416  1CEB  00A0               	movwf	??_setRF_Initialization
  9417  1CEC  0820               	movf	??_setRF_Initialization,w
  9418  1CED  0021               	movlb	1	; select bank1
  9419  1CEE  00D3               	movwf	_Tx_Length^(0+128)
  9420                           
  9421                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9422  1CEF  300A               	movlw	10
  9423  1CF0  00C3               	movwf	(_RF1^(0+128)+7)
  9424  1CF1  3000               	movlw	0
  9425  1CF2  00C4               	movwf	(_RF1^(0+128)+8)
  9426  1CF3  0008               	return
  9427  1CF4                     __end_of_setRF_Initialization:	
  9428                           
  9429                           	psect	text45
  9430  1E22                     __ptext45:	
  9431 ;; *************** function _Mcu_Initialization *****************
  9432 ;; Defined at:
  9433 ;;		line 30 in file "../src/MCU_B1.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;		None
  9438 ;; Return value:  Size  Location     Type
  9439 ;;		None               void
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0, pclath, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;Total ram usage:        0 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    6
  9454 ;; This function calls:
  9455 ;;		_ADC_Set
  9456 ;;		_Fosc_Set
  9457 ;;		_IOC_Set
  9458 ;;		_IO_Set
  9459 ;;		_TMR1_Set
  9460 ;;		_WDT_Set
  9461 ;; This function is called by:
  9462 ;;		_main
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function _Mcu_Initialization
  9468  1E22                     _Mcu_Initialization:	
  9469                           
  9470                           ;MCU_B1.c: 32: Fosc_Set();
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9474  1E22  319C  244C  319E   	fcall	_Fosc_Set
  9475                           
  9476                           ;MCU_B1.c: 34: IO_Set();
  9477  1E25  319E  26D7  319E   	fcall	_IO_Set
  9478                           
  9479                           ;MCU_B1.c: 36: ;;
  9480                           ;MCU_B1.c: 38: TMR1_Set();
  9481  1E28  319D  253A  319E   	fcall	_TMR1_Set
  9482                           
  9483                           ;MCU_B1.c: 40: ADC_Set();
  9484  1E2B  319C  246C  319E   	fcall	_ADC_Set
  9485                           
  9486                           ;MCU_B1.c: 42: ;;
  9487                           ;MCU_B1.c: 44: ;;
  9488                           ;MCU_B1.c: 46: IOC_Set();
  9489  1E2E  319D  2553  319E   	fcall	_IOC_Set
  9490                           
  9491                           ;MCU_B1.c: 48: ;;
  9492                           ;MCU_B1.c: 50: ;;
  9493                           ;MCU_B1.c: 52: WDT_Set();
  9494  1E31  319C  24DE         	fcall	_WDT_Set
  9495  1E33  0008               	return
  9496  1E34                     __end_of_Mcu_Initialization:	
  9497                           
  9498                           	psect	text46
  9499  1CDE                     __ptext46:	
  9500 ;; *************** function _WDT_Set *****************
  9501 ;; Defined at:
  9502 ;;		line 1019 in file "../src/MCU_B1.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;		None
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        1 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    5
  9523 ;; This function calls:
  9524 ;;		Nothing
  9525 ;; This function is called by:
  9526 ;;		_Mcu_Initialization
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _WDT_Set
  9532  1CDE                     _WDT_Set:	
  9533                           
  9534                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9535                           
  9536                           ;incstack = 0
  9537                           ; Regs used in _WDT_Set: [wreg]
  9538  1CDE  3017               	movlw	23
  9539  1CDF  0021               	movlb	1	; select bank1
  9540  1CE0  0097               	movwf	23	;volatile
  9541                           
  9542                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9543  1CE1  144B               	bsf	_WDT^(0+128),0
  9544                           
  9545                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9546  1CE2  300A               	movlw	10
  9547  1CE3  0020               	movlb	0	; select bank0
  9548  1CE4  00A0               	movwf	??_WDT_Set
  9549  1CE5  0820               	movf	??_WDT_Set,w
  9550  1CE6  0021               	movlb	1	; select bank1
  9551  1CE7  00CC               	movwf	(_WDT^(0+128)+1)
  9552  1CE8  0008               	return
  9553  1CE9                     __end_of_WDT_Set:	
  9554                           
  9555                           	psect	text47
  9556  1D3A                     __ptext47:	
  9557 ;; *************** function _TMR1_Set *****************
  9558 ;; Defined at:
  9559 ;;		line 199 in file "../src/MCU_B1.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;		None
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;		None
  9564 ;; Return value:  Size  Location     Type
  9565 ;;		None               void
  9566 ;; Registers used:
  9567 ;;		wreg
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;Total ram usage:        0 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; Hardware stack levels required when called:    5
  9580 ;; This function calls:
  9581 ;;		Nothing
  9582 ;; This function is called by:
  9583 ;;		_Mcu_Initialization
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           
  9588                           ;psect for function _TMR1_Set
  9589  1D3A                     _TMR1_Set:	
  9590                           
  9591                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9592                           
  9593                           ;incstack = 0
  9594                           ; Regs used in _TMR1_Set: [wreg]
  9595  1D3A  3041               	movlw	65
  9596  1D3B  0020               	movlb	0	; select bank0
  9597  1D3C  0098               	movwf	24	;volatile
  9598                           
  9599                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9600  1D3D  30FA               	movlw	250
  9601  1D3E  0097               	movwf	23	;volatile
  9602                           
  9603                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9604  1D3F  3038               	movlw	56
  9605  1D40  0096               	movwf	22	;volatile
  9606                           
  9607                           ;MCU_B1.c: 203: TMR1IE = 1;
  9608  1D41  0021               	movlb	1	; select bank1
  9609  1D42  1411               	bsf	17,0	;volatile
  9610                           
  9611                           ;MCU_B1.c: 204: PEIE = 1;
  9612  1D43  170B               	bsf	11,6	;volatile
  9613                           
  9614                           ;MCU_B1.c: 205: GIE = 1;
  9615  1D44  178B               	bsf	11,7	;volatile
  9616  1D45  0008               	return
  9617  1D46                     __end_of_TMR1_Set:	
  9618                           
  9619                           	psect	text48
  9620  1ED7                     __ptext48:	
  9621 ;; *************** function _IO_Set *****************
  9622 ;; Defined at:
  9623 ;;		line 60 in file "../src/MCU_B1.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;		None
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;		None
  9628 ;; Return value:  Size  Location     Type
  9629 ;;		None               void
  9630 ;; Registers used:
  9631 ;;		wreg, status,2
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;Total ram usage:        0 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    5
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_Mcu_Initialization
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function _IO_Set
  9653  1ED7                     _IO_Set:	
  9654                           
  9655                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _IO_Set: [wreg+status,2]
  9659  1ED7  30F7               	movlw	247
  9660  1ED8  0021               	movlb	1	; select bank1
  9661  1ED9  008C               	movwf	12	;volatile
  9662                           
  9663                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9664  1EDA  3004               	movlw	4
  9665  1EDB  008D               	movwf	13	;volatile
  9666                           
  9667                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9668  1EDC  3026               	movlw	38
  9669  1EDD  008E               	movwf	14	;volatile
  9670                           
  9671                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9672  1EDE  0022               	movlb	2	; select bank2
  9673  1EDF  018C               	clrf	12	;volatile
  9674                           
  9675                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9676  1EE0  018D               	clrf	13	;volatile
  9677                           
  9678                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9679  1EE1  018E               	clrf	14	;volatile
  9680                           
  9681                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9682  1EE2  300E               	movlw	14
  9683  1EE3  0023               	movlb	3	; select bank3
  9684  1EE4  008C               	movwf	12	;volatile
  9685                           
  9686                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9687  1EE5  018D               	clrf	13	;volatile
  9688                           
  9689                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9690  1EE6  018E               	clrf	14	;volatile
  9691                           
  9692                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9693  1EE7  30F7               	movlw	247
  9694  1EE8  0020               	movlb	0	; select bank0
  9695  1EE9  008C               	movwf	12	;volatile
  9696                           
  9697                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9698  1EEA  3004               	movlw	4
  9699  1EEB  008D               	movwf	13	;volatile
  9700                           
  9701                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9702  1EEC  3026               	movlw	38
  9703  1EED  008E               	movwf	14	;volatile
  9704  1EEE  0008               	return
  9705  1EEF                     __end_of_IO_Set:	
  9706                           
  9707                           	psect	text49
  9708  1D53                     __ptext49:	
  9709 ;; *************** function _IOC_Set *****************
  9710 ;; Defined at:
  9711 ;;		line 366 in file "../src/MCU_B1.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;		None               void
  9718 ;; Registers used:
  9719 ;;		wreg, status,2
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        0 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		Nothing
  9734 ;; This function is called by:
  9735 ;;		_Mcu_Initialization
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _IOC_Set
  9741  1D53                     _IOC_Set:	
  9742                           
  9743                           ;MCU_B1.c: 367: WPUB2 = 0;
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _IOC_Set: [wreg+status,2]
  9747  1D53  0024               	movlb	4	; select bank4
  9748  1D54  110D               	bcf	13,2	;volatile
  9749                           
  9750                           ;MCU_B1.c: 382: IOCBP = 0b00000100;
  9751  1D55  3004               	movlw	4
  9752  1D56  0027               	movlb	7	; select bank7
  9753  1D57  0094               	movwf	20	;volatile
  9754                           
  9755                           ;MCU_B1.c: 383: IOCBN = 0b00000100;
  9756  1D58  3004               	movlw	4
  9757  1D59  0095               	movwf	21	;volatile
  9758                           
  9759                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9760  1D5A  0196               	clrf	22	;volatile
  9761                           
  9762                           ;MCU_B1.c: 394: IOCIE = 1;
  9763  1D5B  158B               	bsf	11,3	;volatile
  9764                           
  9765                           ;MCU_B1.c: 395: IOCIF = 0;
  9766  1D5C  100B               	bcf	11,0	;volatile
  9767                           
  9768                           ;MCU_B1.c: 396: PEIE = 1;
  9769  1D5D  170B               	bsf	11,6	;volatile
  9770                           
  9771                           ;MCU_B1.c: 397: GIE = 1;
  9772  1D5E  178B               	bsf	11,7	;volatile
  9773  1D5F  0008               	return
  9774  1D60                     __end_of_IOC_Set:	
  9775                           
  9776                           	psect	text50
  9777  1C4C                     __ptext50:	
  9778 ;; *************** function _Fosc_Set *****************
  9779 ;; Defined at:
  9780 ;;		line 56 in file "../src/MCU_B1.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;		None
  9785 ;; Return value:  Size  Location     Type
  9786 ;;		None               void
  9787 ;; Registers used:
  9788 ;;		wreg
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;Total ram usage:        0 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    5
  9801 ;; This function calls:
  9802 ;;		Nothing
  9803 ;; This function is called by:
  9804 ;;		_Mcu_Initialization
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function _Fosc_Set
  9810  1C4C                     _Fosc_Set:	
  9811                           
  9812                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9813                           
  9814                           ;incstack = 0
  9815                           ; Regs used in _Fosc_Set: [wreg]
  9816  1C4C  3078               	movlw	120
  9817  1C4D  0021               	movlb	1	; select bank1
  9818  1C4E  0099               	movwf	25	;volatile
  9819  1C4F  0008               	return
  9820  1C50                     __end_of_Fosc_Set:	
  9821                           
  9822                           	psect	text51
  9823  1C6C                     __ptext51:	
  9824 ;; *************** function _ADC_Set *****************
  9825 ;; Defined at:
  9826 ;;		line 420 in file "../src/MCU_B1.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;		None
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;		None               void
  9833 ;; Registers used:
  9834 ;;		wreg
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;Total ram usage:        0 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    5
  9847 ;; This function calls:
  9848 ;;		Nothing
  9849 ;; This function is called by:
  9850 ;;		_Mcu_Initialization
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function _ADC_Set
  9856  1C6C                     _ADC_Set:	
  9857                           
  9858                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _ADC_Set: [wreg]
  9862  1C6C  30F3               	movlw	243
  9863  1C6D  0021               	movlb	1	; select bank1
  9864  1C6E  009E               	movwf	30	;volatile
  9865                           
  9866                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9867  1C6F  30C1               	movlw	193
  9868  1C70  0022               	movlb	2	; select bank2
  9869  1C71  0097               	movwf	23	;volatile
  9870  1C72  0008               	return
  9871  1C73                     __end_of_ADC_Set:	
  9872                           
  9873                           	psect	text52
  9874  01B2                     __ptext52:	
  9875 ;; *************** function _Load_Main *****************
  9876 ;; Defined at:
  9877 ;;		line 39 in file "../src/OverLoad_B1.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  i               1   15[BANK0 ] unsigned char 
  9882 ;;  error           1   14[BANK0 ] unsigned char 
  9883 ;;  adjgo           1   12[BANK0 ] unsigned char 
  9884 ;;  j               1   11[BANK0 ] unsigned char 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;Total ram usage:        7 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    8
  9901 ;; This function calls:
  9902 ;;		_getAll_DimmerLights_AdjGO
  9903 ;;		_getMain_All_Error_Status
  9904 ;;		_getMain_LightsStatus
  9905 ;;		_getMain_Lights_Count
  9906 ;;		_getMain_LoadOK
  9907 ;;		_setLoad_AH_AL_Restore
  9908 ;; This function is called by:
  9909 ;;		_main
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _Load_Main
  9915  01B2                     _Load_Main:	
  9916                           
  9917                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  9918                           
  9919                           ;incstack = 0
  9920                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9921  01B2  0020               	movlb	0	; select bank0
  9922  01B3  01AF               	clrf	Load_Main@i
  9923  01B4  01AB               	clrf	Load_Main@j
  9924  01B5  3000               	movlw	0
  9925  01B6  3192  2292  3181   	fcall	_getMain_All_Error_Status
  9926  01B9  0020               	movlb	0	; select bank0
  9927  01BA  00A9               	movwf	??_Load_Main
  9928  01BB  0829               	movf	??_Load_Main,w
  9929  01BC  00AE               	movwf	Load_Main@error
  9930  01BD  01AC               	clrf	Load_Main@adjgo
  9931                           
  9932                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  9933  01BE  0022               	movlb	2	; select bank2
  9934  01BF  1C43               	btfss	_Load^(0+256),0
  9935  01C0  2AF0               	goto	l1541
  9936                           
  9937                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
  9938  01C1  319C  24A8  3181   	fcall	_getAll_DimmerLights_AdjGO
  9939  01C4  0020               	movlb	0	; select bank0
  9940  01C5  00A9               	movwf	??_Load_Main
  9941  01C6  0829               	movf	??_Load_Main,w
  9942  01C7  00AC               	movwf	Load_Main@adjgo
  9943                           
  9944                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  9945  01C8  01AD               	clrf	_Load_Main$4095
  9946  01C9  3191  21A5  3181   	fcall	_getMain_LightsStatus
  9947  01CC  3A01               	xorlw	1
  9948  01CD  1D03               	skipz
  9949  01CE  29D8               	goto	l7557
  9950  01CF  0020               	movlb	0	; select bank0
  9951  01D0  08AE               	movf	Load_Main@error,f
  9952  01D1  1D03               	skipz
  9953  01D2  29D8               	goto	l7557
  9954  01D3  08AC               	movf	Load_Main@adjgo,f
  9955  01D4  1D03               	skipz
  9956  01D5  29D8               	goto	l7557
  9957  01D6  01AD               	clrf	_Load_Main$4095
  9958  01D7  0AAD               	incf	_Load_Main$4095,f
  9959  01D8                     l7557:	
  9960  01D8  0020               	movlb	0	; select bank0
  9961  01D9  082D               	movf	_Load_Main$4095,w
  9962  01DA  0022               	movlb	2	; select bank2
  9963  01DB  10C3               	bcf	_Load^(0+256),1
  9964  01DC  1D03               	skipz
  9965  01DD  14C3               	bsf	_Load^(0+256),1
  9966                           
  9967                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  9968  01DE  319D  2560  3181   	fcall	_getMain_LoadOK
  9969  01E1  3A01               	xorlw	1
  9970  01E2  1D03               	skipz
  9971  01E3  29E9               	goto	l1544
  9972  01E4  0022               	movlb	2	; select bank2
  9973  01E5  19C3               	btfsc	_Load^(0+256),3
  9974  01E6  29E9               	goto	l1544
  9975                           
  9976                           ;OverLoad_B1.c: 49: Load.Run = 1;
  9977  01E7  15C3               	bsf	_Load^(0+256),3
  9978                           
  9979                           ;OverLoad_B1.c: 50: Load.OK = 0;
  9980  01E8  13C3               	bcf	_Load^(0+256),7
  9981  01E9                     l1544:	
  9982                           
  9983                           ;OverLoad_B1.c: 51: }
  9984                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  9985  01E9  0022               	movlb	2	; select bank2
  9986  01EA  1CC3               	btfss	_Load^(0+256),1
  9987  01EB  2AC0               	goto	l1545
  9988                           
  9989                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  9990  01EC  1543               	bsf	_Load^(0+256),2
  9991                           
  9992                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  9993  01ED  1E43               	btfss	_Load^(0+256),4
  9994  01EE  2ABE               	goto	l1546
  9995                           
  9996                           ;OverLoad_B1.c: 58: Load.Time++;
  9997  01EF  3001               	movlw	1
  9998  01F0  07C4               	addwf	(_Load^(0+256)+1),f
  9999  01F1  3000               	movlw	0
 10000  01F2  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10001                           
 10002                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10003  01F3  3000               	movlw	0
 10004  01F4  0245               	subwf	((_Load+1)^(0+256)+1),w
 10005  01F5  3005               	movlw	5
 10006  01F6  1903               	skipnz
 10007  01F7  0244               	subwf	(_Load^(0+256)+1),w
 10008  01F8  1C03               	skipc
 10009  01F9  0008               	return
 10010                           
 10011                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10012  01FA  01C4               	clrf	(_Load^(0+256)+1)
 10013  01FB  01C5               	clrf	((_Load+1)^(0+256)+1)
 10014                           
 10015                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10016  01FC  1243               	bcf	_Load^(0+256),4
 10017                           
 10018                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10019  01FD  0020               	movlb	0	; select bank0
 10020  01FE  01AF               	clrf	Load_Main@i
 10021  01FF  3004               	movlw	4
 10022  0200  022F               	subwf	Load_Main@i,w
 10023  0201  1803               	btfsc	3,0
 10024  0202  2A2D               	goto	l7583
 10025  0203                     l7577:	
 10026                           
 10027                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10028  0203  352F               	lslf	Load_Main@i,w
 10029  0204  3E4E               	addlw	(_Load+11)& (0+255)
 10030  0205  0086               	movwf	6
 10031  0206  3001               	movlw	1	; select bank2/3
 10032  0207  0087               	movwf	7
 10033  0208  3F40               	moviw [0]fsr1
 10034  0209  00A9               	movwf	??_Load_Main
 10035  020A  3F41               	moviw [1]fsr1
 10036  020B  00AA               	movwf	??_Load_Main+1
 10037  020C  0829               	movf	??_Load_Main,w
 10038  020D  0022               	movlb	2	; select bank2
 10039  020E  07C8               	addwf	(_Load^(0+256)+5),f
 10040  020F  0020               	movlb	0	; select bank0
 10041  0210  082A               	movf	??_Load_Main+1,w
 10042  0211  0022               	movlb	2	; select bank2
 10043  0212  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10044                           
 10045                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10046  0213  0020               	movlb	0	; select bank0
 10047  0214  352F               	lslf	Load_Main@i,w
 10048  0215  3E58               	addlw	(_Load+21)& (0+255)
 10049  0216  0086               	movwf	6
 10050  0217  3001               	movlw	1	; select bank2/3
 10051  0218  0087               	movwf	7
 10052  0219  3F40               	moviw [0]fsr1
 10053  021A  00A9               	movwf	??_Load_Main
 10054  021B  3F41               	moviw [1]fsr1
 10055  021C  00AA               	movwf	??_Load_Main+1
 10056  021D  0829               	movf	??_Load_Main,w
 10057  021E  0022               	movlb	2	; select bank2
 10058  021F  07CA               	addwf	(_Load^(0+256)+7),f
 10059  0220  0020               	movlb	0	; select bank0
 10060  0221  082A               	movf	??_Load_Main+1,w
 10061  0222  0022               	movlb	2	; select bank2
 10062  0223  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10063  0224  3001               	movlw	1
 10064  0225  0020               	movlb	0	; select bank0
 10065  0226  00A9               	movwf	??_Load_Main
 10066  0227  0829               	movf	??_Load_Main,w
 10067  0228  07AF               	addwf	Load_Main@i,f
 10068  0229  3004               	movlw	4
 10069  022A  022F               	subwf	Load_Main@i,w
 10070  022B  1C03               	skipc
 10071  022C  2A03               	goto	l7577
 10072  022D                     l7583:	
 10073                           
 10074                           ;OverLoad_B1.c: 66: }
 10075                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10076  022D  3002               	movlw	2
 10077  022E  0022               	movlb	2	; select bank2
 10078  022F                     u7585:	
 10079  022F  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10080  0230  0CC8               	rrf	(_Load^(0+256)+5),f
 10081  0231  0B89               	decfsz	9,f
 10082  0232  2A2F               	goto	u7585
 10083                           
 10084                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10085  0233  3002               	movlw	2
 10086  0234                     u7595:	
 10087  0234  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10088  0235  0CCA               	rrf	(_Load^(0+256)+7),f
 10089  0236  0B89               	decfsz	9,f
 10090  0237  2A34               	goto	u7595
 10091                           
 10092                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10093  0238  3188  2000  3181   	fcall	_setLoad_AH_AL_Restore
 10094                           
 10095                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10096  023B  0022               	movlb	2	; select bank2
 10097  023C  0849               	movf	((_Load+1)^(0+256)+5),w
 10098  023D  024B               	subwf	((_Load+1)^(0+256)+7),w
 10099  023E  1D03               	skipz
 10100  023F  2A42               	goto	u7605
 10101  0240  0848               	movf	(_Load^(0+256)+5),w
 10102  0241  024A               	subwf	(_Load^(0+256)+7),w
 10103  0242                     u7605:	
 10104  0242  1803               	skipnc
 10105  0243  0008               	return
 10106                           
 10107                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10108  0244  3005               	movlw	5
 10109  0245  3E43               	addlw	_Load& (0+255)
 10110  0246  0086               	movwf	6
 10111  0247  3001               	movlw	1	; select bank2/3
 10112  0248  0087               	movwf	7
 10113  0249  094A               	comf	(_Load^(0+256)+7),w
 10114  024A  0020               	movlb	0	; select bank0
 10115  024B  00A9               	movwf	??_Load_Main
 10116  024C  0022               	movlb	2	; select bank2
 10117  024D  094B               	comf	((_Load+1)^(0+256)+7),w
 10118  024E  0020               	movlb	0	; select bank0
 10119  024F  00AA               	movwf	??_Load_Main+1
 10120  0250  0AA9               	incf	??_Load_Main,f
 10121  0251  1903               	skipnz
 10122  0252  0AAA               	incf	??_Load_Main+1,f
 10123  0253  3F40               	moviw [0]fsr1
 10124  0254  0729               	addwf	??_Load_Main,w
 10125  0255  0022               	movlb	2	; select bank2
 10126  0256  00E2               	movwf	(_Load^(0+256)+31)
 10127  0257  3F41               	moviw [1]fsr1
 10128  0258  0020               	movlb	0	; select bank0
 10129  0259  3D2A               	addwfc	??_Load_Main+1,w
 10130  025A  0022               	movlb	2	; select bank2
 10131  025B  00E3               	movwf	(_Load^(0+256)+32)
 10132                           
 10133                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10134  025C  01C8               	clrf	(_Load^(0+256)+5)
 10135  025D  01C9               	clrf	((_Load+1)^(0+256)+5)
 10136                           
 10137                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10138  025E  01CA               	clrf	(_Load^(0+256)+7)
 10139  025F  01CB               	clrf	((_Load+1)^(0+256)+7)
 10140                           
 10141                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10142  0260  319D  25AC  3181   	fcall	_getMain_Lights_Count
 10143  0263  0020               	movlb	0	; select bank0
 10144  0264  00A9               	movwf	??_Load_Main
 10145  0265  0829               	movf	??_Load_Main,w
 10146  0266  0022               	movlb	2	; select bank2
 10147  0267  00EE               	movwf	(_Load^(0+256)+43)
 10148                           
 10149                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10150  0268  1DC3               	btfss	_Load^(0+256),3
 10151  0269  2A8F               	goto	l7615
 10152                           
 10153                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10154  026A  3002               	movlw	2
 10155  026B  026C               	subwf	(_Load^(0+256)+41),w
 10156  026C  1803               	skipnc
 10157  026D  2A8F               	goto	l7615
 10158                           
 10159                           ;OverLoad_B1.c: 79: Load.Count++;
 10160  026E  3001               	movlw	1
 10161  026F  0020               	movlb	0	; select bank0
 10162  0270  00A9               	movwf	??_Load_Main
 10163  0271  0829               	movf	??_Load_Main,w
 10164  0272  0022               	movlb	2	; select bank2
 10165  0273  07EC               	addwf	(_Load^(0+256)+41),f
 10166                           
 10167                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10168  0274  086C               	movf	(_Load^(0+256)+41),w
 10169  0275  3A01               	xorlw	1
 10170  0276  1D03               	skipz
 10171  0277  2A7C               	goto	l7607
 10172                           
 10173                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*55);
 10174  0278  304C               	movlw	76
 10175  0279  00E8               	movwf	(_Load^(0+256)+37)
 10176  027A  3004               	movlw	4
 10177  027B  2A87               	goto	L6
 10178  027C                     l7607:	
 10179                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10180                           
 10181  027C  086C               	movf	(_Load^(0+256)+41),w
 10182  027D  3A02               	xorlw	2
 10183  027E  1D03               	skipz
 10184  027F  2A8F               	goto	l7615
 10185                           
 10186                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10187  0280  086E               	movf	(_Load^(0+256)+43),w
 10188  0281  3A01               	xorlw	1
 10189  0282  1D03               	skipz
 10190  0283  2A89               	goto	l7613
 10191                           
 10192                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*55);
 10193  0284  3063               	movlw	99
 10194  0285  00E8               	movwf	(_Load^(0+256)+37)
 10195  0286  3000               	movlw	0
 10196  0287                     L6:	
 10197  0287  00E9               	movwf	(_Load^(0+256)+38)
 10198                           
 10199                           ;OverLoad_B1.c: 85: } else {
 10200  0288  2A8F               	goto	l7615
 10201  0289                     l7613:	
 10202                           
 10203                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.8*55) + Load.TotalLoad;
 10204  0289  084C               	movf	(_Load^(0+256)+9),w
 10205  028A  3E63               	addlw	99
 10206  028B  00E8               	movwf	(_Load^(0+256)+37)
 10207  028C  3000               	movlw	0
 10208  028D  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10209  028E  00E9               	movwf	((_Load+1)^(0+256)+37)
 10210  028F                     l7615:	
 10211                           
 10212                           ;OverLoad_B1.c: 87: }
 10213                           ;OverLoad_B1.c: 88: }
 10214                           ;OverLoad_B1.c: 89: }
 10215                           ;OverLoad_B1.c: 90: }
 10216                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10217  028F  0869               	movf	((_Load+1)^(0+256)+37),w
 10218  0290  0263               	subwf	((_Load+1)^(0+256)+31),w
 10219  0291  1D03               	skipz
 10220  0292  2A95               	goto	u7665
 10221  0293  0868               	movf	(_Load^(0+256)+37),w
 10222  0294  0262               	subwf	(_Load^(0+256)+31),w
 10223  0295                     u7665:	
 10224  0295  1C03               	skipc
 10225  0296  2AA4               	goto	l7625
 10226                           
 10227                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10228  0297  3001               	movlw	1
 10229  0298  0020               	movlb	0	; select bank0
 10230  0299  00A9               	movwf	??_Load_Main
 10231  029A  0829               	movf	??_Load_Main,w
 10232  029B  0022               	movlb	2	; select bank2
 10233  029C  07ED               	addwf	(_Load^(0+256)+42),f
 10234                           
 10235                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10236  029D  3003               	movlw	3
 10237  029E  026D               	subwf	(_Load^(0+256)+42),w
 10238  029F  1C03               	skipc
 10239  02A0  0008               	return
 10240                           
 10241                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10242  02A1  01ED               	clrf	(_Load^(0+256)+42)
 10243                           
 10244                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10245  02A2  16C3               	bsf	_Load^(0+256),5
 10246                           
 10247                           ;OverLoad_B1.c: 109: }
 10248                           ;OverLoad_B1.c: 110: } else {
 10249  02A3  0008               	return
 10250  02A4                     l7625:	
 10251                           
 10252                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10253  02A4  01ED               	clrf	(_Load^(0+256)+42)
 10254                           
 10255                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10256  02A5  1DC3               	btfss	_Load^(0+256),3
 10257  02A6  0008               	return
 10258                           
 10259                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10260  02A7  1BC3               	btfsc	_Load^(0+256),7
 10261  02A8  0008               	return
 10262                           
 10263                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10264  02A9  3001               	movlw	1
 10265  02AA  0020               	movlb	0	; select bank0
 10266  02AB  00A9               	movwf	??_Load_Main
 10267  02AC  0829               	movf	??_Load_Main,w
 10268  02AD  0022               	movlb	2	; select bank2
 10269  02AE  07EF               	addwf	(_Load^(0+256)+44),f
 10270                           
 10271                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10272  02AF  3003               	movlw	3
 10273  02B0  026F               	subwf	(_Load^(0+256)+44),w
 10274  02B1  1C03               	skipc
 10275  02B2  0008               	return
 10276                           
 10277                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10278  02B3  01EF               	clrf	(_Load^(0+256)+44)
 10279                           
 10280                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10281  02B4  17C3               	bsf	_Load^(0+256),7
 10282                           
 10283                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10284  02B5  11C3               	bcf	_Load^(0+256),3
 10285                           
 10286                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10287  02B6  01EC               	clrf	(_Load^(0+256)+41)
 10288                           
 10289                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10290  02B7  0863               	movf	((_Load+1)^(0+256)+31),w
 10291  02B8  01CD               	clrf	((_Load+1)^(0+256)+9)
 10292  02B9  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10293  02BA  0862               	movf	(_Load^(0+256)+31),w
 10294  02BB  01CC               	clrf	(_Load^(0+256)+9)
 10295  02BC  07CC               	addwf	(_Load^(0+256)+9),f
 10296                           
 10297                           ;OverLoad_B1.c: 130: }
 10298                           ;OverLoad_B1.c: 131: }
 10299                           ;OverLoad_B1.c: 132: }
 10300                           ;OverLoad_B1.c: 133: }
 10301                           ;OverLoad_B1.c: 134: }
 10302                           ;OverLoad_B1.c: 135: }
 10303                           ;OverLoad_B1.c: 136: } else {
 10304  02BD  0008               	return
 10305  02BE                     l1546:	
 10306                           
 10307                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10308  02BE  1643               	bsf	_Load^(0+256),4
 10309                           
 10310                           ;OverLoad_B1.c: 138: }
 10311                           ;OverLoad_B1.c: 139: } else {
 10312  02BF  0008               	return
 10313  02C0                     l1545:	
 10314                           
 10315                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10316  02C0  1D43               	btfss	_Load^(0+256),2
 10317  02C1  2ADE               	goto	l7673
 10318  02C2  0020               	movlb	0	; select bank0
 10319  02C3  082E               	movf	Load_Main@error,w
 10320  02C4  3A03               	xorlw	3
 10321  02C5  1903               	skipnz
 10322  02C6  2ADE               	goto	l7673
 10323                           
 10324                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10325  02C7  0022               	movlb	2	; select bank2
 10326  02C8  1143               	bcf	_Load^(0+256),2
 10327                           
 10328                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10329  02C9  01C4               	clrf	(_Load^(0+256)+1)
 10330  02CA  01C5               	clrf	((_Load+1)^(0+256)+1)
 10331                           
 10332                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10333  02CB  1243               	bcf	_Load^(0+256),4
 10334                           
 10335                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10336  02CC  3188  2000  3181   	fcall	_setLoad_AH_AL_Restore
 10337                           
 10338                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10339  02CF  0022               	movlb	2	; select bank2
 10340  02D0  01EC               	clrf	(_Load^(0+256)+41)
 10341                           
 10342                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10343  02D1  01ED               	clrf	(_Load^(0+256)+42)
 10344                           
 10345                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10346  02D2  01EF               	clrf	(_Load^(0+256)+44)
 10347                           
 10348                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10349  02D3  01C8               	clrf	(_Load^(0+256)+5)
 10350  02D4  01C9               	clrf	((_Load+1)^(0+256)+5)
 10351                           
 10352                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10353  02D5  01CA               	clrf	(_Load^(0+256)+7)
 10354  02D6  01CB               	clrf	((_Load+1)^(0+256)+7)
 10355                           
 10356                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10357  02D7  01E2               	clrf	(_Load^(0+256)+31)
 10358  02D8  01E3               	clrf	((_Load+1)^(0+256)+31)
 10359                           
 10360                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10361  02D9  01E8               	clrf	(_Load^(0+256)+37)
 10362  02DA  01E9               	clrf	((_Load+1)^(0+256)+37)
 10363                           
 10364                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10365  02DB  01EE               	clrf	(_Load^(0+256)+43)
 10366                           
 10367                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10368  02DC  11C3               	bcf	_Load^(0+256),3
 10369                           
 10370                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10371  02DD  17C3               	bsf	_Load^(0+256),7
 10372  02DE                     l7673:	
 10373                           
 10374                           ;OverLoad_B1.c: 164: }
 10375                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10376  02DE  0022               	movlb	2	; select bank2
 10377  02DF  1EC3               	btfss	_Load^(0+256),5
 10378  02E0  0008               	return
 10379                           
 10380                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10381  02E1  3001               	movlw	1
 10382  02E2  07C6               	addwf	(_Load^(0+256)+3),f
 10383  02E3  3000               	movlw	0
 10384  02E4  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10385                           
 10386                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10387  02E5  3003               	movlw	3
 10388  02E6  0247               	subwf	((_Load+1)^(0+256)+3),w
 10389  02E7  30E8               	movlw	232
 10390  02E8  1903               	skipnz
 10391  02E9  0246               	subwf	(_Load^(0+256)+3),w
 10392  02EA  1C03               	skipc
 10393  02EB  0008               	return
 10394                           
 10395                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10396  02EC  01C6               	clrf	(_Load^(0+256)+3)
 10397  02ED  01C7               	clrf	((_Load+1)^(0+256)+3)
 10398                           
 10399                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10400  02EE  12C3               	bcf	_Load^(0+256),5
 10401                           
 10402                           ;OverLoad_B1.c: 176: }
 10403                           ;OverLoad_B1.c: 177: }
 10404                           ;OverLoad_B1.c: 178: }
 10405                           ;OverLoad_B1.c: 179: } else {
 10406  02EF  0008               	return
 10407  02F0                     l1541:	
 10408                           
 10409                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10410  02F0  0021               	movlb	1	; select bank1
 10411  02F1  1C20               	btfss	_myMain^(0+128),0
 10412  02F2  0008               	return
 10413                           
 10414                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10415  02F3  0022               	movlb	2	; select bank2
 10416  02F4  1443               	bsf	_Load^(0+256),0
 10417  02F5  0008               	return
 10418  02F6                     __end_of_Load_Main:	
 10419                           
 10420                           	psect	text53
 10421  1D60                     __ptext53:	
 10422 ;; *************** function _getMain_LoadOK *****************
 10423 ;; Defined at:
 10424 ;;		line 436 in file "../src/Main_B1.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;  ok              1    2[BANK0 ] unsigned char 
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      unsigned char 
 10431 ;; Registers used:
 10432 ;;		wreg, status,2, pclath, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;Total ram usage:        2 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    6
 10445 ;; This function calls:
 10446 ;;		_getDimmer_LoadOK
 10447 ;; This function is called by:
 10448 ;;		_Load_Main
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           
 10453                           ;psect for function _getMain_LoadOK
 10454  1D60                     _getMain_LoadOK:	
 10455                           
 10456                           ;Main_B1.c: 437: char ok = 0;
 10457                           
 10458                           ;incstack = 0
 10459                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10460  1D60  0020               	movlb	0	; select bank0
 10461  1D61  01A2               	clrf	getMain_LoadOK@ok
 10462                           
 10463                           ;Main_B1.c: 443: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10464  1D62  319C  247B         	fcall	_getDimmer_LoadOK
 10465  1D64  3A01               	xorlw	1
 10466  1D65  3000               	movlw	0
 10467  1D66  1903               	skipnz
 10468  1D67  3001               	movlw	1
 10469  1D68  0020               	movlb	0	; select bank0
 10470  1D69  00A1               	movwf	??_getMain_LoadOK
 10471  1D6A  0821               	movf	??_getMain_LoadOK,w
 10472  1D6B  00A2               	movwf	getMain_LoadOK@ok
 10473                           
 10474                           ;Main_B1.c: 445: return ok;
 10475  1D6C  0822               	movf	getMain_LoadOK@ok,w
 10476  1D6D  0008               	return
 10477  1D6E                     __end_of_getMain_LoadOK:	
 10478                           
 10479                           	psect	text54
 10480  1C7B                     __ptext54:	
 10481 ;; *************** function _getDimmer_LoadOK *****************
 10482 ;; Defined at:
 10483 ;;		line 611 in file "../src/Dimmer_B1.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;		None
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  status          1    0[BANK0 ] unsigned char 
 10488 ;; Return value:  Size  Location     Type
 10489 ;;                  1    wreg      unsigned char 
 10490 ;; Registers used:
 10491 ;;		wreg, status,2
 10492 ;; Tracked objects:
 10493 ;;		On entry : 0/0
 10494 ;;		On exit  : 0/0
 10495 ;;		Unchanged: 0/0
 10496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;Total ram usage:        1 bytes
 10502 ;; Hardware stack levels used:    1
 10503 ;; Hardware stack levels required when called:    5
 10504 ;; This function calls:
 10505 ;;		Nothing
 10506 ;; This function is called by:
 10507 ;;		_getMain_LoadOK
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           
 10512                           ;psect for function _getDimmer_LoadOK
 10513  1C7B                     _getDimmer_LoadOK:	
 10514                           
 10515                           ;Dimmer_B1.c: 612: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10519  1C7B  3000               	movlw	0
 10520  1C7C  0022               	movlb	2	; select bank2
 10521  1C7D  18BE               	btfsc	_Dimmer^(0+256),1
 10522  1C7E  3001               	movlw	1
 10523  1C7F  0020               	movlb	0	; select bank0
 10524  1C80  00A0               	movwf	getDimmer_LoadOK@status
 10525                           
 10526                           ;Dimmer_B1.c: 613: return status;
 10527  1C81  0820               	movf	getDimmer_LoadOK@status,w
 10528  1C82  0008               	return
 10529  1C83                     __end_of_getDimmer_LoadOK:	
 10530                           
 10531                           	psect	text55
 10532  1DAC                     __ptext55:	
 10533 ;; *************** function _getMain_Lights_Count *****************
 10534 ;; Defined at:
 10535 ;;		line 406 in file "../src/Main_B1.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;		None
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;  status1         1    3[BANK0 ] unsigned char 
 10540 ;;  status3         1    2[BANK0 ] unsigned char 
 10541 ;;  status2         1    1[BANK0 ] unsigned char 
 10542 ;;  count           1    0[BANK0 ] unsigned char 
 10543 ;; Return value:  Size  Location     Type
 10544 ;;                  1    wreg      unsigned char 
 10545 ;; Registers used:
 10546 ;;		wreg, status,2, status,0
 10547 ;; Tracked objects:
 10548 ;;		On entry : 0/0
 10549 ;;		On exit  : 0/0
 10550 ;;		Unchanged: 0/0
 10551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;Total ram usage:        4 bytes
 10557 ;; Hardware stack levels used:    1
 10558 ;; Hardware stack levels required when called:    5
 10559 ;; This function calls:
 10560 ;;		Nothing
 10561 ;; This function is called by:
 10562 ;;		_Load_Main
 10563 ;; This function uses a non-reentrant model
 10564 ;;
 10565                           
 10566                           
 10567                           ;psect for function _getMain_Lights_Count
 10568  1DAC                     _getMain_Lights_Count:	
 10569                           
 10570                           ;Main_B1.c: 407: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10571                           
 10572                           ;incstack = 0
 10573                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10574  1DAC  0020               	movlb	0	; select bank0
 10575  1DAD  01A3               	clrf	getMain_Lights_Count@status1
 10576  1DAE  01A1               	clrf	getMain_Lights_Count@status2
 10577  1DAF  01A2               	clrf	getMain_Lights_Count@status3
 10578  1DB0  01A0               	clrf	getMain_Lights_Count@count
 10579                           
 10580                           ;Main_B1.c: 411: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10581  1DB1  3000               	movlw	0
 10582  1DB2  0023               	movlb	3	; select bank3
 10583  1DB3  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10584  1DB4  3001               	movlw	1
 10585  1DB5  0020               	movlb	0	; select bank0
 10586  1DB6  00A3               	movwf	getMain_Lights_Count@status1
 10587                           
 10588                           ;Main_B1.c: 432: return count = (status1 + status2 + status3);
 10589  1DB7  0823               	movf	getMain_Lights_Count@status1,w
 10590  1DB8  0721               	addwf	getMain_Lights_Count@status2,w
 10591  1DB9  0722               	addwf	getMain_Lights_Count@status3,w
 10592  1DBA  00A0               	movwf	getMain_Lights_Count@count
 10593  1DBB  0008               	return
 10594  1DBC                     __end_of_getMain_Lights_Count:	
 10595                           
 10596                           	psect	text56
 10597  1CA8                     __ptext56:	
 10598 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10599 ;; Defined at:
 10600 ;;		line 502 in file "../src/Dimmer_B1.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;		None
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10605 ;; Return value:  Size  Location     Type
 10606 ;;                  1    wreg      unsigned char 
 10607 ;; Registers used:
 10608 ;;		wreg, status,2
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;Total ram usage:        1 bytes
 10619 ;; Hardware stack levels used:    1
 10620 ;; Hardware stack levels required when called:    5
 10621 ;; This function calls:
 10622 ;;		Nothing
 10623 ;; This function is called by:
 10624 ;;		_setDimmerLights_SwOn
 10625 ;;		_setDimmerLights_AdjControl
 10626 ;;		_Load_Main
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           
 10631                           ;psect for function _getAll_DimmerLights_AdjGO
 10632  1CA8                     _getAll_DimmerLights_AdjGO:	
 10633                           
 10634                           ;Dimmer_B1.c: 503: char adjgo = 0;
 10635                           
 10636                           ;incstack = 0
 10637                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10638  1CA8  0020               	movlb	0	; select bank0
 10639  1CA9  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10640                           
 10641                           ;Dimmer_B1.c: 511: adjgo = DimmerLights1.AdjGo == 1;
 10642  1CAA  3000               	movlw	0
 10643  1CAB  0023               	movlb	3	; select bank3
 10644  1CAC  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10645  1CAD  3001               	movlw	1
 10646  1CAE  0020               	movlb	0	; select bank0
 10647  1CAF  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10648                           
 10649                           ;Dimmer_B1.c: 513: return adjgo;
 10650  1CB0  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10651  1CB1  0008               	return
 10652  1CB2                     __end_of_getAll_DimmerLights_AdjGO:	
 10653                           
 10654                           	psect	text57
 10655  1C55                     __ptext57:	
 10656 ;; *************** function _Load_Initialization *****************
 10657 ;; Defined at:
 10658 ;;		line 9 in file "../src/OverLoad_B1.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;		None               void
 10665 ;; Registers used:
 10666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:    6
 10679 ;; This function calls:
 10680 ;;		_setLoad_AH_AL_Restore
 10681 ;; This function is called by:
 10682 ;;		_main
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function _Load_Initialization
 10688  1C55                     _Load_Initialization:	
 10689                           
 10690                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10694  1C55  0022               	movlb	2	; select bank2
 10695  1C56  17C3               	bsf	_Load^(0+256),7
 10696                           
 10697                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10698  1C57  3188  2000         	fcall	_setLoad_AH_AL_Restore
 10699  1C59  0008               	return
 10700  1C5A                     __end_of_Load_Initialization:	
 10701                           
 10702                           	psect	text58
 10703  0800                     __ptext58:	
 10704 ;; *************** function _setLoad_AH_AL_Restore *****************
 10705 ;; Defined at:
 10706 ;;		line 207 in file "../src/OverLoad_B1.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;		None
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  i               1    1[BANK0 ] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;		None               void
 10713 ;; Registers used:
 10714 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        2 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    5
 10727 ;; This function calls:
 10728 ;;		Nothing
 10729 ;; This function is called by:
 10730 ;;		_Load_Initialization
 10731 ;;		_Load_Main
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function _setLoad_AH_AL_Restore
 10737  0800                     _setLoad_AH_AL_Restore:	
 10738                           
 10739                           ;OverLoad_B1.c: 208: char i;
 10740                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 10741                           
 10742                           ;incstack = 0
 10743                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10744  0800  0020               	movlb	0	; select bank0
 10745  0801  01A1               	clrf	setLoad_AH_AL_Restore@i
 10746  0802                     L7:	
 10747  0802  3005               	movlw	5
 10748  0803  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10749  0804  1803               	btfsc	3,0
 10750  0805  0008               	return
 10751                           
 10752                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 10753  0806  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10754  0807  3E4E               	addlw	(_Load+11)& (0+255)
 10755  0808  0086               	movwf	6
 10756  0809  3001               	movlw	1	; select bank2/3
 10757  080A  0087               	movwf	7
 10758  080B  3000               	movlw	0
 10759  080C  3FC0               	movwi [0]fsr1
 10760  080D  3FC1               	movwi [1]fsr1
 10761                           
 10762                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 10763  080E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10764  080F  3E58               	addlw	(_Load+21)& (0+255)
 10765  0810  0086               	movwf	6
 10766  0811  3001               	movlw	1	; select bank2/3
 10767  0812  0087               	movwf	7
 10768  0813  30FF               	movlw	255
 10769  0814  3FC0               	movwi [0]fsr1
 10770  0815  30FF               	movlw	255
 10771  0816  3FC1               	movwi [1]fsr1
 10772  0817  3001               	movlw	1
 10773  0818  00A0               	movwf	??_setLoad_AH_AL_Restore
 10774  0819  0820               	movf	??_setLoad_AH_AL_Restore,w
 10775  081A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10776  081B  2802               	goto	L7
 10777  081C                     __end_of_setLoad_AH_AL_Restore:	
 10778                           
 10779                           	psect	text59
 10780  1C48                     __ptext59:	
 10781 ;; *************** function _LED_Main *****************
 10782 ;; Defined at:
 10783 ;;		line 47 in file "../src/LED_B1.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;		None               void
 10790 ;; Registers used:
 10791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    7
 10804 ;; This function calls:
 10805 ;;		_setLED_Main
 10806 ;; This function is called by:
 10807 ;;		_main
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           
 10812                           ;psect for function _LED_Main
 10813  1C48                     _LED_Main:	
 10814                           
 10815                           ;LED_B1.c: 62: setLED_Main(99);
 10816                           
 10817                           ;incstack = 0
 10818                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10819  1C48  3063               	movlw	99
 10820  1C49  3192  22C5         	fcall	_setLED_Main
 10821  1C4B  0008               	return
 10822  1C4C                     __end_of_LED_Main:	
 10823                           
 10824                           	psect	text60
 10825  12C5                     __ptext60:	
 10826 ;; *************** function _setLED_Main *****************
 10827 ;; Defined at:
 10828 ;;		line 221 in file "../src/LED_B1.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  led             1    wreg     unsigned char 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;  led             1    4[BANK0 ] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        3 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    6
 10849 ;; This function calls:
 10850 ;;		_LedPointSelect
 10851 ;; This function is called by:
 10852 ;;		_LED_Main
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _setLED_Main
 10858  12C5                     _setLED_Main:	
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10862                           ;setLED_Main@led stored from wreg
 10863  12C5  0020               	movlb	0	; select bank0
 10864  12C6  00A4               	movwf	setLED_Main@led
 10865                           
 10866                           ;LED_B1.c: 222: LedPointSelect(led);
 10867  12C7  0824               	movf	setLED_Main@led,w
 10868  12C8  319C  24D3  3192   	fcall	_LedPointSelect
 10869                           
 10870                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10871  12CB  087A               	movf	_LED,w
 10872  12CC  0086               	movwf	6
 10873  12CD  3001               	movlw	1	; select bank2/3
 10874  12CE  0087               	movwf	7
 10875  12CF  1C81               	btfss	1,1
 10876  12D0  0008               	return
 10877                           
 10878                           ;LED_B1.c: 224: LED->Time++;
 10879  12D1  0A7A               	incf	_LED,w
 10880  12D2  0086               	movwf	6
 10881  12D3  3001               	movlw	1	; select bank2/3
 10882  12D4  0087               	movwf	7
 10883  12D5  3001               	movlw	1
 10884  12D6  0781               	addwf	1,f
 10885  12D7  3141               	addfsr 1,1
 10886  12D8  1803               	skipnc
 10887  12D9  0A81               	incf	1,f
 10888                           
 10889                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10890  12DA  0A7A               	incf	_LED,w
 10891  12DB  0086               	movwf	6
 10892  12DC  3001               	movlw	1	; select bank2/3
 10893  12DD  0087               	movwf	7
 10894  12DE  3F40               	moviw [0]fsr1
 10895  12DF  0020               	movlb	0	; select bank0
 10896  12E0  00A2               	movwf	??_setLED_Main
 10897  12E1  3F41               	moviw [1]fsr1
 10898  12E2  00A3               	movwf	??_setLED_Main+1
 10899  12E3  3000               	movlw	0
 10900  12E4  0223               	subwf	??_setLED_Main+1,w
 10901  12E5  3032               	movlw	50
 10902  12E6  1903               	skipnz
 10903  12E7  0222               	subwf	??_setLED_Main,w
 10904  12E8  1C03               	skipc
 10905  12E9  0008               	return
 10906                           
 10907                           ;LED_B1.c: 226: LED->Time = 0;
 10908  12EA  0A7A               	incf	_LED,w
 10909  12EB  0086               	movwf	6
 10910  12EC  3001               	movlw	1	; select bank2/3
 10911  12ED  0087               	movwf	7
 10912  12EE  3000               	movlw	0
 10913  12EF  3FC0               	movwi [0]fsr1
 10914  12F0  3FC1               	movwi [1]fsr1
 10915                           
 10916                           ;LED_B1.c: 243: if (led == 99) {
 10917  12F1  0824               	movf	setLED_Main@led,w
 10918  12F2  3A63               	xorlw	99
 10919  12F3  1D03               	skipz
 10920  12F4  0008               	return
 10921                           
 10922                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10923  12F5  3020               	movlw	32
 10924  12F6  068D               	xorwf	13,f
 10925  12F7  0008               	return
 10926  12F8                     __end_of_setLED_Main:	
 10927                           
 10928                           	psect	text61
 10929  1C44                     __ptext61:	
 10930 ;; *************** function _LED_Initialization *****************
 10931 ;; Defined at:
 10932 ;;		line 31 in file "../src/LED_B1.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    8
 10953 ;; This function calls:
 10954 ;;		_setLED_Initialization
 10955 ;; This function is called by:
 10956 ;;		_main
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _LED_Initialization
 10962  1C44                     _LED_Initialization:	
 10963                           
 10964                           ;LED_B1.c: 42: setLED_Initialization(99);
 10965                           
 10966                           ;incstack = 0
 10967                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10968  1C44  3063               	movlw	99
 10969  1C45  319D  25CC         	fcall	_setLED_Initialization
 10970  1C47  0008               	return
 10971  1C48                     __end_of_LED_Initialization:	
 10972                           
 10973                           	psect	text62
 10974  1DCC                     __ptext62:	
 10975 ;; *************** function _setLED_Initialization *****************
 10976 ;; Defined at:
 10977 ;;		line 69 in file "../src/LED_B1.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;  led             1    wreg     unsigned char 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;  led             1    4[BANK0 ] unsigned char 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;		None               void
 10984 ;; Registers used:
 10985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:        1 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    7
 10998 ;; This function calls:
 10999 ;;		_LedPointSelect
 11000 ;;		_setLED
 11001 ;; This function is called by:
 11002 ;;		_LED_Initialization
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _setLED_Initialization
 11008  1DCC                     _setLED_Initialization:	
 11009                           
 11010                           ;incstack = 0
 11011                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11012                           ;setLED_Initialization@led stored from wreg
 11013  1DCC  0020               	movlb	0	; select bank0
 11014  1DCD  00A4               	movwf	setLED_Initialization@led
 11015                           
 11016                           ;LED_B1.c: 70: LedPointSelect(led);
 11017  1DCE  0824               	movf	setLED_Initialization@led,w
 11018  1DCF  319C  24D3  319D   	fcall	_LedPointSelect
 11019                           
 11020                           ;LED_B1.c: 71: LED->Enable = 1;
 11021  1DD2  087A               	movf	_LED,w
 11022  1DD3  0086               	movwf	6
 11023  1DD4  3001               	movlw	1	; select bank2/3
 11024  1DD5  0087               	movwf	7
 11025  1DD6  1401               	bsf	1,0
 11026                           
 11027                           ;LED_B1.c: 72: setLED(led, 0);
 11028  1DD7  0020               	movlb	0	; select bank0
 11029  1DD8  01A2               	clrf	setLED@command
 11030  1DD9  0824               	movf	setLED_Initialization@led,w
 11031  1DDA  3193  232D         	fcall	_setLED
 11032  1DDC  0008               	return
 11033  1DDD                     __end_of_setLED_Initialization:	
 11034                           
 11035                           	psect	text63
 11036  1363                     __ptext63:	
 11037 ;; *************** function _Flash_Memory_Main *****************
 11038 ;; Defined at:
 11039 ;;		line 901 in file "../src/MCU_B1.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;		None
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;		None
 11044 ;; Return value:  Size  Location     Type
 11045 ;;		None               void
 11046 ;; Registers used:
 11047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;Total ram usage:        1 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    8
 11060 ;; This function calls:
 11061 ;;		_Flash_Memory_Modify
 11062 ;;		_getMain_LightsStatus
 11063 ;; This function is called by:
 11064 ;;		_main
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           
 11069                           ;psect for function _Flash_Memory_Main
 11070  1363                     _Flash_Memory_Main:	
 11071                           
 11072                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11073                           
 11074                           ;incstack = 0
 11075                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11076  1363  0023               	movlb	3	; select bank3
 11077  1364  1C44               	btfss	(_Memory^(0+384)+36),0
 11078  1365  0008               	return
 11079                           
 11080                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11081  1366  3191  21A5  3193   	fcall	_getMain_LightsStatus
 11082  1369  3A00               	xorlw	0
 11083  136A  3000               	movlw	0
 11084  136B  1903               	skipnz
 11085  136C  3001               	movlw	1
 11086  136D  0020               	movlb	0	; select bank0
 11087  136E  00A9               	movwf	??_Flash_Memory_Main
 11088  136F  0DA9               	rlf	??_Flash_Memory_Main,f
 11089  1370  0023               	movlb	3	; select bank3
 11090  1371  0844               	movf	(_Memory^(0+384)+36),w
 11091  1372  0020               	movlb	0	; select bank0
 11092  1373  0629               	xorwf	??_Flash_Memory_Main,w
 11093  1374  39FD               	andlw	-3
 11094  1375  0629               	xorwf	??_Flash_Memory_Main,w
 11095  1376  0023               	movlb	3	; select bank3
 11096  1377  00C4               	movwf	(_Memory^(0+384)+36)
 11097                           
 11098                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11099  1378  1CC4               	btfss	(_Memory^(0+384)+36),1
 11100  1379  2B93               	goto	l1183
 11101                           
 11102                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11103  137A  15C4               	bsf	(_Memory^(0+384)+36),3
 11104                           
 11105                           ;MCU_B1.c: 906: Memory.Time++;
 11106  137B  3001               	movlw	1
 11107  137C  07C2               	addwf	(_Memory^(0+384)+34),f
 11108  137D  3000               	movlw	0
 11109  137E  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11110                           
 11111                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11112  137F  3022               	movlw	34
 11113  1380  3EA0               	addlw	_Memory& (0+255)
 11114  1381  0086               	movwf	6
 11115  1382  3001               	movlw	1	; select bank3/4
 11116  1383  0087               	movwf	7
 11117  1384  3F40               	moviw [0]fsr1
 11118  1385  3A19               	xorlw	25
 11119  1386  1D03               	skipz
 11120  1387  2B8A               	goto	u7255
 11121  1388  3F41               	moviw [1]fsr1
 11122  1389  3A00               	xorlw	0
 11123  138A                     u7255:	
 11124  138A  1D03               	skipz
 11125  138B  0008               	return
 11126                           
 11127                           ;MCU_B1.c: 908: Memory.Time = 0;
 11128  138C  01C2               	clrf	(_Memory^(0+384)+34)
 11129  138D  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11130                           
 11131                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11132  138E  1044               	bcf	(_Memory^(0+384)+36),0
 11133                           
 11134                           ;MCU_B1.c: 910: Memory.GO = 0;
 11135  138F  10C4               	bcf	(_Memory^(0+384)+36),1
 11136                           
 11137                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11138  1390  3195  25A5         	fcall	_Flash_Memory_Modify
 11139                           
 11140                           ;MCU_B1.c: 912: }
 11141                           ;MCU_B1.c: 913: } else {
 11142  1392  0008               	return
 11143  1393                     l1183:	
 11144                           
 11145                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11146  1393  1DC4               	btfss	(_Memory^(0+384)+36),3
 11147  1394  0008               	return
 11148                           
 11149                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11150  1395  11C4               	bcf	(_Memory^(0+384)+36),3
 11151                           
 11152                           ;MCU_B1.c: 916: Memory.Time = 0;
 11153  1396  01C2               	clrf	(_Memory^(0+384)+34)
 11154  1397  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11155  1398  0008               	return
 11156  1399                     __end_of_Flash_Memory_Main:	
 11157                           
 11158                           	psect	text64
 11159  15A5                     __ptext64:	
 11160 ;; *************** function _Flash_Memory_Modify *****************
 11161 ;; Defined at:
 11162 ;;		line 974 in file "../src/MCU_B1.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;		None
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  i               1    5[BANK0 ] unsigned char 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;		None               void
 11169 ;; Registers used:
 11170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;Total ram usage:        2 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:    7
 11183 ;; This function calls:
 11184 ;;		_Flash_Memory_Erasing
 11185 ;;		_Flash_Memory_Read
 11186 ;;		_Flash_Memory_Write
 11187 ;;		_setMemory_Data
 11188 ;; This function is called by:
 11189 ;;		_Flash_Memory_Main
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           
 11194                           ;psect for function _Flash_Memory_Modify
 11195  15A5                     _Flash_Memory_Modify:	
 11196                           
 11197                           ;MCU_B1.c: 975: char i = 0;
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11201  15A5  0020               	movlb	0	; select bank0
 11202  15A6  01A5               	clrf	Flash_Memory_Modify@i
 11203                           
 11204                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11205  15A7  01A5               	clrf	Flash_Memory_Modify@i
 11206  15A8  3020               	movlw	32
 11207  15A9  0225               	subwf	Flash_Memory_Modify@i,w
 11208  15AA  1803               	btfsc	3,0
 11209  15AB  2DC1               	goto	l6899
 11210  15AC                     l6893:	
 11211                           
 11212                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11213  15AC  0825               	movf	Flash_Memory_Modify@i,w
 11214  15AD  319F  2708  3195   	fcall	_Flash_Memory_Read
 11215  15B0  0020               	movlb	0	; select bank0
 11216  15B1  00A4               	movwf	??_Flash_Memory_Modify
 11217  15B2  0825               	movf	Flash_Memory_Modify@i,w
 11218  15B3  3EA0               	addlw	_Memory& (0+255)
 11219  15B4  0086               	movwf	6
 11220  15B5  3001               	movlw	1	; select bank3/4
 11221  15B6  0087               	movwf	7
 11222  15B7  0824               	movf	??_Flash_Memory_Modify,w
 11223  15B8  0081               	movwf	1
 11224  15B9  3001               	movlw	1
 11225  15BA  00A4               	movwf	??_Flash_Memory_Modify
 11226  15BB  0824               	movf	??_Flash_Memory_Modify,w
 11227  15BC  07A5               	addwf	Flash_Memory_Modify@i,f
 11228  15BD  3020               	movlw	32
 11229  15BE  0225               	subwf	Flash_Memory_Modify@i,w
 11230  15BF  1C03               	skipc
 11231  15C0  2DAC               	goto	l6893
 11232  15C1                     l6899:	
 11233                           
 11234                           ;MCU_B1.c: 978: }
 11235                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11236  15C1  086E               	movf	_product,w
 11237  15C2  0086               	movwf	6
 11238  15C3  3002               	movlw	2	; select bank4/5
 11239  15C4  0087               	movwf	7
 11240  15C5  3002               	movlw	2	; select bank4/5
 11241  15C6  3F4C               	moviw [12]fsr1
 11242  15C7  00A0               	movwf	setMemory_Data@data
 11243  15C8  3000               	movlw	0
 11244  15C9  319D  2522  3195   	fcall	_setMemory_Data
 11245                           
 11246                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11247  15CC  0020               	movlb	0	; select bank0
 11248  15CD  086E               	movf	_product,w
 11249  15CE  0086               	movwf	6
 11250  15CF  3002               	movlw	2	; select bank4/5
 11251  15D0  0087               	movwf	7
 11252  15D1  3002               	movlw	2	; select bank4/5
 11253  15D2  3F4D               	moviw [13]fsr1
 11254  15D3  00A0               	movwf	setMemory_Data@data
 11255  15D4  3001               	movlw	1
 11256  15D5  319D  2522  3195   	fcall	_setMemory_Data
 11257                           
 11258                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11259  15D8  0020               	movlb	0	; select bank0
 11260  15D9  086E               	movf	_product,w
 11261  15DA  0086               	movwf	6
 11262  15DB  3002               	movlw	2	; select bank4/5
 11263  15DC  0087               	movwf	7
 11264  15DD  3002               	movlw	2	; select bank4/5
 11265  15DE  3F4E               	moviw [14]fsr1
 11266  15DF  00A0               	movwf	setMemory_Data@data
 11267  15E0  3002               	movlw	2
 11268  15E1  319D  2522  3195   	fcall	_setMemory_Data
 11269                           
 11270                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11271  15E4  0023               	movlb	3	; select bank3
 11272  15E5  1D44               	btfss	(_Memory^(0+384)+36),2
 11273  15E6  2DEB               	goto	l1206
 11274                           
 11275                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11276  15E7  1144               	bcf	(_Memory^(0+384)+36),2
 11277                           
 11278                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11279  15E8  0021               	movlb	1	; select bank1
 11280  15E9  11A0               	bcf	_myMain^(0+128),3
 11281                           
 11282                           ;MCU_B1.c: 990: myMain.First = 0;
 11283  15EA  12A0               	bcf	_myMain^(0+128),5
 11284  15EB                     l1206:	
 11285                           
 11286                           ;MCU_B1.c: 992: }
 11287                           ;MCU_B1.c: 993: GIE = 0;
 11288  15EB  138B               	bcf	11,7	;volatile
 11289                           
 11290                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11291  15EC  319D  252E  3195   	fcall	_Flash_Memory_Erasing
 11292                           
 11293                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11294  15EF  3191  21CF         	fcall	_Flash_Memory_Write
 11295                           
 11296                           ;MCU_B1.c: 996: GIE = 1;
 11297  15F1  178B               	bsf	11,7	;volatile
 11298  15F2  0008               	return
 11299  15F3                     __end_of_Flash_Memory_Modify:	
 11300                           
 11301                           	psect	text65
 11302  1D2E                     __ptext65:	
 11303 ;; *************** function _Flash_Memory_Erasing *****************
 11304 ;; Defined at:
 11305 ;;		line 963 in file "../src/MCU_B1.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;		None
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;		None
 11310 ;; Return value:  Size  Location     Type
 11311 ;;		None               void
 11312 ;; Registers used:
 11313 ;;		wreg, status,2, status,0, pclath, cstack
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;Total ram usage:        0 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    6
 11326 ;; This function calls:
 11327 ;;		_Flash_Memory_Unlock
 11328 ;; This function is called by:
 11329 ;;		_Flash_Memory_Modify
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           
 11334                           ;psect for function _Flash_Memory_Erasing
 11335  1D2E                     _Flash_Memory_Erasing:	
 11336                           
 11337                           ;MCU_B1.c: 964: CFGS = 0;
 11338                           
 11339                           ;incstack = 0
 11340                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11341  1D2E  0023               	movlb	3	; select bank3
 11342  1D2F  1315               	bcf	21,6	;volatile
 11343                           
 11344                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11345  1D30  3030               	movlw	48
 11346  1D31  0092               	movwf	18	;volatile
 11347                           
 11348                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11349  1D32  0191               	clrf	17	;volatile
 11350                           
 11351                           ;MCU_B1.c: 967: FREE = 1;
 11352  1D33  1615               	bsf	21,4	;volatile
 11353                           
 11354                           ;MCU_B1.c: 968: WREN = 1;
 11355  1D34  1515               	bsf	21,2	;volatile
 11356                           
 11357                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11358  1D35  319C  248C         	fcall	_Flash_Memory_Unlock
 11359                           
 11360                           ;MCU_B1.c: 970: WREN = 0;
 11361  1D37  0023               	movlb	3	; select bank3
 11362  1D38  1115               	bcf	21,2	;volatile
 11363  1D39  0008               	return
 11364  1D3A                     __end_of_Flash_Memory_Erasing:	
 11365                           
 11366                           	psect	text66
 11367  0613                     __ptext66:	
 11368 ;; *************** function _Flash_Memory_Initialization *****************
 11369 ;; Defined at:
 11370 ;;		line 860 in file "../src/MCU_B1.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;  i               1   67[BANK0 ] unsigned char 
 11375 ;; Return value:  Size  Location     Type
 11376 ;;		None               void
 11377 ;; Registers used:
 11378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;Total ram usage:        2 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    8
 11391 ;; This function calls:
 11392 ;;		_Flash_Memory_Read
 11393 ;;		_Flash_Memory_Write
 11394 ;;		_setMemory_Data
 11395 ;;		_setPercentValue
 11396 ;; This function is called by:
 11397 ;;		_main
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _Flash_Memory_Initialization
 11403  0613                     _Flash_Memory_Initialization:	
 11404                           
 11405                           ;MCU_B1.c: 861: char i = 0;
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11409  0613  0020               	movlb	0	; select bank0
 11410  0614  01E3               	clrf	Flash_Memory_Initialization@i
 11411                           
 11412                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11413  0615  301F               	movlw	31
 11414  0616  319F  2708  3186   	fcall	_Flash_Memory_Read
 11415  0619  3AAA               	xorlw	170
 11416  061A  1D03               	skipz
 11417  061B  2E85               	goto	l7367
 11418                           
 11419                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11420  061C  3000               	movlw	0
 11421  061D  319F  2708  3186   	fcall	_Flash_Memory_Read
 11422  0620  0020               	movlb	0	; select bank0
 11423  0621  00E2               	movwf	??_Flash_Memory_Initialization
 11424  0622  086E               	movf	_product,w
 11425  0623  3E0C               	addlw	12
 11426  0624  0086               	movwf	6
 11427  0625  3002               	movlw	2	; select bank4/5
 11428  0626  0087               	movwf	7
 11429  0627  0862               	movf	??_Flash_Memory_Initialization,w
 11430  0628  0081               	movwf	1
 11431                           
 11432                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11433  0629  3001               	movlw	1
 11434  062A  319F  2708  3186   	fcall	_Flash_Memory_Read
 11435  062D  0020               	movlb	0	; select bank0
 11436  062E  00E2               	movwf	??_Flash_Memory_Initialization
 11437  062F  086E               	movf	_product,w
 11438  0630  3E0D               	addlw	13
 11439  0631  0086               	movwf	6
 11440  0632  3002               	movlw	2	; select bank4/5
 11441  0633  0087               	movwf	7
 11442  0634  0862               	movf	??_Flash_Memory_Initialization,w
 11443  0635  0081               	movwf	1
 11444                           
 11445                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11446  0636  3002               	movlw	2
 11447  0637  319F  2708  3186   	fcall	_Flash_Memory_Read
 11448  063A  0020               	movlb	0	; select bank0
 11449  063B  00E2               	movwf	??_Flash_Memory_Initialization
 11450  063C  086E               	movf	_product,w
 11451  063D  3E0E               	addlw	14
 11452  063E  0086               	movwf	6
 11453  063F  3002               	movlw	2	; select bank4/5
 11454  0640  0087               	movwf	7
 11455  0641  0862               	movf	??_Flash_Memory_Initialization,w
 11456  0642  0081               	movwf	1
 11457                           
 11458                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 11459  0643  3040               	movlw	64
 11460  0644  3189  21F3  3186   	fcall	_setPercentValue
 11461  0647  0020               	movlb	0	; select bank0
 11462  0648  00E2               	movwf	??_Flash_Memory_Initialization
 11463  0649  0862               	movf	??_Flash_Memory_Initialization,w
 11464  064A  00E3               	movwf	Flash_Memory_Initialization@i
 11465                           
 11466                           ;MCU_B1.c: 872: product->Data[21] = i;
 11467  064B  0863               	movf	Flash_Memory_Initialization@i,w
 11468  064C  00E2               	movwf	??_Flash_Memory_Initialization
 11469  064D  086E               	movf	_product,w
 11470  064E  3E15               	addlw	21
 11471  064F  0086               	movwf	6
 11472  0650  3002               	movlw	2	; select bank4/5
 11473  0651  0087               	movwf	7
 11474  0652  0862               	movf	??_Flash_Memory_Initialization,w
 11475  0653  0081               	movwf	1
 11476                           
 11477                           ;MCU_B1.c: 873: product->Data[22] = i;
 11478  0654  0863               	movf	Flash_Memory_Initialization@i,w
 11479  0655  00E2               	movwf	??_Flash_Memory_Initialization
 11480  0656  086E               	movf	_product,w
 11481  0657  3E16               	addlw	22
 11482  0658  0086               	movwf	6
 11483  0659  3002               	movlw	2	; select bank4/5
 11484  065A  0087               	movwf	7
 11485  065B  0862               	movf	??_Flash_Memory_Initialization,w
 11486  065C  0081               	movwf	1
 11487                           
 11488                           ;MCU_B1.c: 874: product->Data[23] = i;
 11489  065D  0863               	movf	Flash_Memory_Initialization@i,w
 11490  065E  00E2               	movwf	??_Flash_Memory_Initialization
 11491  065F  086E               	movf	_product,w
 11492  0660  3E17               	addlw	23
 11493  0661  0086               	movwf	6
 11494  0662  3002               	movlw	2	; select bank4/5
 11495  0663  0087               	movwf	7
 11496  0664  0862               	movf	??_Flash_Memory_Initialization,w
 11497  0665  0081               	movwf	1
 11498                           
 11499                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11500  0666  086E               	movf	_product,w
 11501  0667  3E0C               	addlw	12
 11502  0668  0086               	movwf	6
 11503  0669  3002               	movlw	2	; select bank4/5
 11504  066A  0087               	movwf	7
 11505  066B  0801               	movf	1,w
 11506  066C  3AFF               	xorlw	255
 11507  066D  1D03               	skipz
 11508  066E  0008               	return
 11509  066F  086E               	movf	_product,w
 11510  0670  3E0D               	addlw	13
 11511  0671  0086               	movwf	6
 11512  0672  3002               	movlw	2	; select bank4/5
 11513  0673  0087               	movwf	7
 11514  0674  0801               	movf	1,w
 11515  0675  3AFF               	xorlw	255
 11516  0676  1D03               	skipz
 11517  0677  0008               	return
 11518  0678  086E               	movf	_product,w
 11519  0679  3E0E               	addlw	14
 11520  067A  0086               	movwf	6
 11521  067B  3002               	movlw	2	; select bank4/5
 11522  067C  0087               	movwf	7
 11523  067D  0801               	movf	1,w
 11524  067E  3AFF               	xorlw	255
 11525  067F  1D03               	skipz
 11526  0680  0008               	return
 11527                           
 11528                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11529  0681  0021               	movlb	1	; select bank1
 11530  0682  15A0               	bsf	_myMain^(0+128),3
 11531                           
 11532                           ;MCU_B1.c: 878: myMain.First = 1;
 11533  0683  16A0               	bsf	_myMain^(0+128),5
 11534                           
 11535                           ;MCU_B1.c: 879: }
 11536                           ;MCU_B1.c: 880: } else {
 11537  0684  0008               	return
 11538  0685                     l7367:	
 11539                           
 11540                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 11541  0685  3040               	movlw	64
 11542  0686  3189  21F3  3186   	fcall	_setPercentValue
 11543  0689  0020               	movlb	0	; select bank0
 11544  068A  00E2               	movwf	??_Flash_Memory_Initialization
 11545  068B  0862               	movf	??_Flash_Memory_Initialization,w
 11546  068C  00E3               	movwf	Flash_Memory_Initialization@i
 11547                           
 11548                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11549  068D  30FF               	movlw	255
 11550  068E  00E2               	movwf	??_Flash_Memory_Initialization
 11551  068F  0862               	movf	??_Flash_Memory_Initialization,w
 11552  0690  00A0               	movwf	setMemory_Data@data
 11553  0691  3000               	movlw	0
 11554  0692  319D  2522  3186   	fcall	_setMemory_Data
 11555                           
 11556                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11557  0695  30FF               	movlw	255
 11558  0696  0020               	movlb	0	; select bank0
 11559  0697  00E2               	movwf	??_Flash_Memory_Initialization
 11560  0698  0862               	movf	??_Flash_Memory_Initialization,w
 11561  0699  00A0               	movwf	setMemory_Data@data
 11562  069A  3001               	movlw	1
 11563  069B  319D  2522  3186   	fcall	_setMemory_Data
 11564                           
 11565                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11566  069E  30FF               	movlw	255
 11567  069F  0020               	movlb	0	; select bank0
 11568  06A0  00E2               	movwf	??_Flash_Memory_Initialization
 11569  06A1  0862               	movf	??_Flash_Memory_Initialization,w
 11570  06A2  00A0               	movwf	setMemory_Data@data
 11571  06A3  3002               	movlw	2
 11572  06A4  319D  2522  3186   	fcall	_setMemory_Data
 11573                           
 11574                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11575  06A7  30FF               	movlw	255
 11576  06A8  0020               	movlb	0	; select bank0
 11577  06A9  00E2               	movwf	??_Flash_Memory_Initialization
 11578  06AA  0862               	movf	??_Flash_Memory_Initialization,w
 11579  06AB  00A0               	movwf	setMemory_Data@data
 11580  06AC  3003               	movlw	3
 11581  06AD  319D  2522  3186   	fcall	_setMemory_Data
 11582                           
 11583                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11584  06B0  30FF               	movlw	255
 11585  06B1  0020               	movlb	0	; select bank0
 11586  06B2  00E2               	movwf	??_Flash_Memory_Initialization
 11587  06B3  0862               	movf	??_Flash_Memory_Initialization,w
 11588  06B4  00A0               	movwf	setMemory_Data@data
 11589  06B5  3004               	movlw	4
 11590  06B6  319D  2522  3186   	fcall	_setMemory_Data
 11591                           
 11592                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11593  06B9  30FF               	movlw	255
 11594  06BA  0020               	movlb	0	; select bank0
 11595  06BB  00E2               	movwf	??_Flash_Memory_Initialization
 11596  06BC  0862               	movf	??_Flash_Memory_Initialization,w
 11597  06BD  00A0               	movwf	setMemory_Data@data
 11598  06BE  3005               	movlw	5
 11599  06BF  319D  2522  3186   	fcall	_setMemory_Data
 11600                           
 11601                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11602  06C2  30AA               	movlw	170
 11603  06C3  0020               	movlb	0	; select bank0
 11604  06C4  00E2               	movwf	??_Flash_Memory_Initialization
 11605  06C5  0862               	movf	??_Flash_Memory_Initialization,w
 11606  06C6  00A0               	movwf	setMemory_Data@data
 11607  06C7  301F               	movlw	31
 11608  06C8  319D  2522  3186   	fcall	_setMemory_Data
 11609                           
 11610                           ;MCU_B1.c: 889: product->Data[21] = i;
 11611  06CB  0020               	movlb	0	; select bank0
 11612  06CC  0863               	movf	Flash_Memory_Initialization@i,w
 11613  06CD  00E2               	movwf	??_Flash_Memory_Initialization
 11614  06CE  086E               	movf	_product,w
 11615  06CF  3E15               	addlw	21
 11616  06D0  0086               	movwf	6
 11617  06D1  3002               	movlw	2	; select bank4/5
 11618  06D2  0087               	movwf	7
 11619  06D3  0862               	movf	??_Flash_Memory_Initialization,w
 11620  06D4  0081               	movwf	1
 11621                           
 11622                           ;MCU_B1.c: 890: product->Data[22] = i;
 11623  06D5  0863               	movf	Flash_Memory_Initialization@i,w
 11624  06D6  00E2               	movwf	??_Flash_Memory_Initialization
 11625  06D7  086E               	movf	_product,w
 11626  06D8  3E16               	addlw	22
 11627  06D9  0086               	movwf	6
 11628  06DA  3002               	movlw	2	; select bank4/5
 11629  06DB  0087               	movwf	7
 11630  06DC  0862               	movf	??_Flash_Memory_Initialization,w
 11631  06DD  0081               	movwf	1
 11632                           
 11633                           ;MCU_B1.c: 891: product->Data[23] = i;
 11634  06DE  0863               	movf	Flash_Memory_Initialization@i,w
 11635  06DF  00E2               	movwf	??_Flash_Memory_Initialization
 11636  06E0  086E               	movf	_product,w
 11637  06E1  3E17               	addlw	23
 11638  06E2  0086               	movwf	6
 11639  06E3  3002               	movlw	2	; select bank4/5
 11640  06E4  0087               	movwf	7
 11641  06E5  0862               	movf	??_Flash_Memory_Initialization,w
 11642  06E6  0081               	movwf	1
 11643                           
 11644                           ;MCU_B1.c: 892: GIE = 0;
 11645  06E7  138B               	bcf	11,7	;volatile
 11646                           
 11647                           ;MCU_B1.c: 893: Flash_Memory_Write();
 11648  06E8  3191  21CF         	fcall	_Flash_Memory_Write
 11649                           
 11650                           ;MCU_B1.c: 894: GIE = 1;
 11651  06EA  178B               	bsf	11,7	;volatile
 11652                           
 11653                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 11654  06EB  0021               	movlb	1	; select bank1
 11655  06EC  15A0               	bsf	_myMain^(0+128),3
 11656                           
 11657                           ;MCU_B1.c: 896: myMain.First = 1;
 11658  06ED  16A0               	bsf	_myMain^(0+128),5
 11659  06EE  0008               	return
 11660  06EF                     __end_of_Flash_Memory_Initialization:	
 11661                           
 11662                           	psect	text67
 11663  1D22                     __ptext67:	
 11664 ;; *************** function _setMemory_Data *****************
 11665 ;; Defined at:
 11666 ;;		line 1011 in file "../src/MCU_B1.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  address         1    wreg     unsigned char 
 11669 ;;  data            1    0[BANK0 ] unsigned char 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  address         1    2[BANK0 ] unsigned char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;		None               void
 11674 ;; Registers used:
 11675 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11681 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;Total ram usage:        3 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    5
 11688 ;; This function calls:
 11689 ;;		Nothing
 11690 ;; This function is called by:
 11691 ;;		_Flash_Memory_Initialization
 11692 ;;		_Flash_Memory_Modify
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function _setMemory_Data
 11698  1D22                     _setMemory_Data:	
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11702                           ;setMemory_Data@address stored from wreg
 11703  1D22  0020               	movlb	0	; select bank0
 11704  1D23  00A2               	movwf	setMemory_Data@address
 11705                           
 11706                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 11707  1D24  0820               	movf	setMemory_Data@data,w
 11708  1D25  00A1               	movwf	??_setMemory_Data
 11709  1D26  0822               	movf	setMemory_Data@address,w
 11710  1D27  3EA0               	addlw	_Memory& (0+255)
 11711  1D28  0086               	movwf	6
 11712  1D29  3001               	movlw	1	; select bank3/4
 11713  1D2A  0087               	movwf	7
 11714  1D2B  0821               	movf	??_setMemory_Data,w
 11715  1D2C  0081               	movwf	1
 11716  1D2D  0008               	return
 11717  1D2E                     __end_of_setMemory_Data:	
 11718                           
 11719                           	psect	text68
 11720  11CF                     __ptext68:	
 11721 ;; *************** function _Flash_Memory_Write *****************
 11722 ;; Defined at:
 11723 ;;		line 944 in file "../src/MCU_B1.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;		None
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;  i               1    1[BANK0 ] unsigned char 
 11728 ;; Return value:  Size  Location     Type
 11729 ;;		None               void
 11730 ;; Registers used:
 11731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11732 ;; Tracked objects:
 11733 ;;		On entry : 0/0
 11734 ;;		On exit  : 0/0
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;Total ram usage:        2 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    6
 11744 ;; This function calls:
 11745 ;;		_Flash_Memory_Unlock
 11746 ;; This function is called by:
 11747 ;;		_Flash_Memory_Initialization
 11748 ;;		_Flash_Memory_Modify
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752                           
 11753                           ;psect for function _Flash_Memory_Write
 11754  11CF                     _Flash_Memory_Write:	
 11755                           
 11756                           ;MCU_B1.c: 945: char i = 0;
 11757                           
 11758                           ;incstack = 0
 11759                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11760  11CF  0020               	movlb	0	; select bank0
 11761  11D0  01A1               	clrf	Flash_Memory_Write@i
 11762                           
 11763                           ;MCU_B1.c: 946: CFGS = 0;
 11764  11D1  0023               	movlb	3	; select bank3
 11765  11D2  1315               	bcf	21,6	;volatile
 11766                           
 11767                           ;MCU_B1.c: 947: PMADRH = 0x30;
 11768  11D3  3030               	movlw	48
 11769  11D4  0092               	movwf	18	;volatile
 11770                           
 11771                           ;MCU_B1.c: 948: PMDATH = 0;
 11772  11D5  0194               	clrf	20	;volatile
 11773                           
 11774                           ;MCU_B1.c: 949: FREE = 0;
 11775  11D6  1215               	bcf	21,4	;volatile
 11776                           
 11777                           ;MCU_B1.c: 950: LWLO = 1;
 11778  11D7  1695               	bsf	21,5	;volatile
 11779                           
 11780                           ;MCU_B1.c: 951: WREN = 1;
 11781  11D8  1515               	bsf	21,2	;volatile
 11782                           
 11783                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 11784  11D9  0020               	movlb	0	; select bank0
 11785  11DA  01A1               	clrf	Flash_Memory_Write@i
 11786  11DB  3020               	movlw	32
 11787  11DC  0221               	subwf	Flash_Memory_Write@i,w
 11788  11DD  1803               	btfsc	3,0
 11789  11DE  29F7               	goto	l1197
 11790  11DF                     l6479:	
 11791                           
 11792                           ;MCU_B1.c: 953: PMADRL = i;
 11793  11DF  0821               	movf	Flash_Memory_Write@i,w
 11794  11E0  0023               	movlb	3	; select bank3
 11795  11E1  0091               	movwf	17	;volatile
 11796                           
 11797                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 11798  11E2  0020               	movlb	0	; select bank0
 11799  11E3  0821               	movf	Flash_Memory_Write@i,w
 11800  11E4  3EA0               	addlw	_Memory& (0+255)
 11801  11E5  0086               	movwf	6
 11802  11E6  3001               	movlw	1	; select bank3/4
 11803  11E7  0087               	movwf	7
 11804  11E8  0801               	movf	1,w
 11805  11E9  0023               	movlb	3	; select bank3
 11806  11EA  0093               	movwf	19	;volatile
 11807                           
 11808                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 11809  11EB  319C  248C  3191   	fcall	_Flash_Memory_Unlock
 11810  11EE  3001               	movlw	1
 11811  11EF  0020               	movlb	0	; select bank0
 11812  11F0  00A0               	movwf	??_Flash_Memory_Write
 11813  11F1  0820               	movf	??_Flash_Memory_Write,w
 11814  11F2  07A1               	addwf	Flash_Memory_Write@i,f
 11815  11F3  3020               	movlw	32
 11816  11F4  0221               	subwf	Flash_Memory_Write@i,w
 11817  11F5  1C03               	skipc
 11818  11F6  29DF               	goto	l6479
 11819  11F7                     l1197:	
 11820                           
 11821                           ;MCU_B1.c: 956: }
 11822                           ;MCU_B1.c: 957: LWLO = 0;
 11823  11F7  0023               	movlb	3	; select bank3
 11824  11F8  1295               	bcf	21,5	;volatile
 11825                           
 11826                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 11827  11F9  319C  248C         	fcall	_Flash_Memory_Unlock
 11828                           
 11829                           ;MCU_B1.c: 959: WREN = 0;
 11830  11FB  0023               	movlb	3	; select bank3
 11831  11FC  1115               	bcf	21,2	;volatile
 11832  11FD  0008               	return
 11833  11FE                     __end_of_Flash_Memory_Write:	
 11834                           
 11835                           	psect	text69
 11836  1C8C                     __ptext69:	
 11837 ;; *************** function _Flash_Memory_Unlock *****************
 11838 ;; Defined at:
 11839 ;;		line 923 in file "../src/MCU_B1.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;		None               void
 11846 ;; Registers used:
 11847 ;;		wreg
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    5
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_Flash_Memory_Write
 11864 ;;		_Flash_Memory_Erasing
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           
 11869                           ;psect for function _Flash_Memory_Unlock
 11870  1C8C                     _Flash_Memory_Unlock:	
 11871                           
 11872                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 11873                           
 11874                           ;incstack = 0
 11875                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11876  1C8C  3055               	movlw	85
 11877  1C8D  0023               	movlb	3	; select bank3
 11878  1C8E  0096               	movwf	22	;volatile
 11879                           
 11880                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 11881  1C8F  30AA               	movlw	170
 11882  1C90  0096               	movwf	22	;volatile
 11883                           
 11884                           ;MCU_B1.c: 926: WR = 1;
 11885  1C91  1495               	bsf	21,1	;volatile
 11886                           
 11887                           ;MCU_B1.c: 927: __nop();
 11888  1C92  0000               	nop
 11889                           
 11890                           ;MCU_B1.c: 928: __nop();
 11891  1C93  0000               	nop
 11892  1C94  0008               	return
 11893  1C95                     __end_of_Flash_Memory_Unlock:	
 11894                           
 11895                           	psect	text70
 11896  1F08                     __ptext70:	
 11897 ;; *************** function _Flash_Memory_Read *****************
 11898 ;; Defined at:
 11899 ;;		line 932 in file "../src/MCU_B1.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;  address         1    wreg     unsigned char 
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;  address         1    2[BANK0 ] unsigned char 
 11904 ;;  ret             1    3[BANK0 ] unsigned char 
 11905 ;;  i               1    1[BANK0 ] unsigned char 
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  1    wreg      unsigned char 
 11908 ;; Registers used:
 11909 ;;		wreg, status,2
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;Total ram usage:        4 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    5
 11922 ;; This function calls:
 11923 ;;		Nothing
 11924 ;; This function is called by:
 11925 ;;		_Flash_Memory_Initialization
 11926 ;;		_Flash_Memory_Modify
 11927 ;; This function uses a non-reentrant model
 11928 ;;
 11929                           
 11930                           
 11931                           ;psect for function _Flash_Memory_Read
 11932  1F08                     _Flash_Memory_Read:	
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11936                           ;Flash_Memory_Read@address stored from wreg
 11937  1F08  0020               	movlb	0	; select bank0
 11938  1F09  00A2               	movwf	Flash_Memory_Read@address
 11939                           
 11940                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 11941  1F0A  01A1               	clrf	Flash_Memory_Read@i
 11942  1F0B  01A3               	clrf	Flash_Memory_Read@ret
 11943                           
 11944                           ;MCU_B1.c: 934: PMADRH = 0x30;
 11945  1F0C  3030               	movlw	48
 11946  1F0D  0023               	movlb	3	; select bank3
 11947  1F0E  0092               	movwf	18	;volatile
 11948                           
 11949                           ;MCU_B1.c: 935: PMADRL = address;
 11950  1F0F  0020               	movlb	0	; select bank0
 11951  1F10  0822               	movf	Flash_Memory_Read@address,w
 11952  1F11  0023               	movlb	3	; select bank3
 11953  1F12  0091               	movwf	17	;volatile
 11954                           
 11955                           ;MCU_B1.c: 936: CFGS = 0;
 11956  1F13  1315               	bcf	21,6	;volatile
 11957                           
 11958                           ;MCU_B1.c: 937: RD = 1;
 11959  1F14  1415               	bsf	21,0	;volatile
 11960                           
 11961                           ;MCU_B1.c: 938: i = PMDATH;
 11962  1F15  0814               	movf	20,w	;volatile
 11963  1F16  0020               	movlb	0	; select bank0
 11964  1F17  00A0               	movwf	??_Flash_Memory_Read
 11965  1F18  0820               	movf	??_Flash_Memory_Read,w
 11966  1F19  00A1               	movwf	Flash_Memory_Read@i
 11967                           
 11968                           ;MCU_B1.c: 939: ret = PMDATL;
 11969  1F1A  0023               	movlb	3	; select bank3
 11970  1F1B  0813               	movf	19,w	;volatile
 11971  1F1C  0020               	movlb	0	; select bank0
 11972  1F1D  00A0               	movwf	??_Flash_Memory_Read
 11973  1F1E  0820               	movf	??_Flash_Memory_Read,w
 11974  1F1F  00A3               	movwf	Flash_Memory_Read@ret
 11975                           
 11976                           ;MCU_B1.c: 940: return ret;
 11977  1F20  0823               	movf	Flash_Memory_Read@ret,w
 11978  1F21  0008               	return
 11979  1F22                     __end_of_Flash_Memory_Read:	
 11980                           
 11981                           	psect	text71
 11982  11FE                     __ptext71:	
 11983 ;; *************** function _DimmerLights_Main *****************
 11984 ;; Defined at:
 11985 ;;		line 402 in file "../src/Dimmer_B1.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;		None
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;		None
 11990 ;; Return value:  Size  Location     Type
 11991 ;;		None               void
 11992 ;; Registers used:
 11993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;Total ram usage:        4 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:   10
 12006 ;; This function calls:
 12007 ;;		_getLoad_OK
 12008 ;;		_getMain_All_Error_Status
 12009 ;;		_getMain_LightsStatus
 12010 ;;		_setDimmerLights_Main
 12011 ;; This function is called by:
 12012 ;;		_main
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function _DimmerLights_Main
 12018  11FE                     _DimmerLights_Main:	
 12019                           
 12020                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12021                           
 12022                           ;incstack = 0
 12023                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12024  11FE  3000               	movlw	0
 12025  11FF  3192  2292  3191   	fcall	_getMain_All_Error_Status
 12026  1202  3800               	iorlw	0
 12027  1203  1D03               	skipz
 12028  1204  2A28               	goto	l709
 12029                           
 12030                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12031  1205  0022               	movlb	2	; select bank2
 12032  1206  1CBE               	btfss	_Dimmer^(0+256),1
 12033  1207  2A2A               	goto	l7309
 12034                           
 12035                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12036  1208  319C  2473  3191   	fcall	_getLoad_OK
 12037  120B  3A01               	xorlw	1
 12038  120C  1903               	skipnz
 12039  120D  2A1F               	goto	l7305
 12040  120E  3191  21A5  3191   	fcall	_getMain_LightsStatus
 12041  1211  3A00               	xorlw	0
 12042  1212  1903               	skipnz
 12043  1213  2A1F               	goto	l7305
 12044  1214  0022               	movlb	2	; select bank2
 12045  1215  0C3E               	rrf	_Dimmer^(0+256),w
 12046  1216  3901               	andlw	1
 12047  1217  0020               	movlb	0	; select bank0
 12048  1218  00E7               	movwf	??_DimmerLights_Main
 12049  1219  01E8               	clrf	??_DimmerLights_Main+1
 12050  121A  0867               	movf	??_DimmerLights_Main,w
 12051  121B  00E9               	movwf	_DimmerLights_Main$2338
 12052  121C  0868               	movf	??_DimmerLights_Main+1,w
 12053  121D  00EA               	movwf	_DimmerLights_Main$2338+1
 12054  121E  2A22               	goto	l7307
 12055  121F                     l7305:	
 12056  121F  0020               	movlb	0	; select bank0
 12057  1220  01E9               	clrf	_DimmerLights_Main$2338
 12058  1221  01EA               	clrf	_DimmerLights_Main$2338+1
 12059  1222                     l7307:	
 12060  1222  0869               	movf	_DimmerLights_Main$2338,w
 12061  1223  0022               	movlb	2	; select bank2
 12062  1224  10BE               	bcf	_Dimmer^(0+256),1
 12063  1225  1D03               	skipz
 12064  1226  14BE               	bsf	_Dimmer^(0+256),1
 12065                           
 12066                           ;Dimmer_B1.c: 407: }
 12067                           ;Dimmer_B1.c: 408: } else {
 12068  1227  2A2A               	goto	l7309
 12069  1228                     l709:	
 12070                           
 12071                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12072  1228  0022               	movlb	2	; select bank2
 12073  1229  10BE               	bcf	_Dimmer^(0+256),1
 12074  122A                     l7309:	
 12075                           
 12076                           ;Dimmer_B1.c: 410: }
 12077                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12078  122A  3001               	movlw	1
 12079  122B  3197  274B         	fcall	_setDimmerLights_Main
 12080  122D  0008               	return
 12081  122E                     __end_of_DimmerLights_Main:	
 12082                           
 12083                           	psect	text72
 12084  174B                     __ptext72:	
 12085 ;; *************** function _setDimmerLights_Main *****************
 12086 ;; Defined at:
 12087 ;;		line 428 in file "../src/Dimmer_B1.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;  lights          1    wreg     unsigned char 
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;  lights          1   70[BANK0 ] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;		None               void
 12094 ;; Registers used:
 12095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;Total ram usage:        1 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    9
 12108 ;; This function calls:
 12109 ;;		_DimmerLightsPointSelect
 12110 ;;		_setBuz
 12111 ;;		_setDimmerLights
 12112 ;;		_setDimmerLights_Adj
 12113 ;; This function is called by:
 12114 ;;		_DimmerLights_Main
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           
 12119                           ;psect for function _setDimmerLights_Main
 12120  174B                     _setDimmerLights_Main:	
 12121                           
 12122                           ;incstack = 0
 12123                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12124                           ;setDimmerLights_Main@lights stored from wreg
 12125  174B  0020               	movlb	0	; select bank0
 12126  174C  00E6               	movwf	setDimmerLights_Main@lights
 12127                           
 12128                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12129  174D  0866               	movf	setDimmerLights_Main@lights,w
 12130  174E  319C  24C8  3197   	fcall	_DimmerLightsPointSelect
 12131                           
 12132                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12133  1751  0020               	movlb	0	; select bank0
 12134  1752  086F               	movf	_DimmerLights,w
 12135  1753  3E08               	addlw	8
 12136  1754  0086               	movwf	6
 12137  1755  3001               	movlw	1	; select bank2/3
 12138  1756  0087               	movwf	7
 12139  1757  1D01               	btfss	1,2
 12140  1758  2F76               	goto	l6791
 12141                           
 12142                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12143  1759  0022               	movlb	2	; select bank2
 12144  175A  18BE               	btfsc	_Dimmer^(0+256),1
 12145  175B  0008               	return
 12146                           
 12147                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12148  175C  0020               	movlb	0	; select bank0
 12149  175D  086F               	movf	_DimmerLights,w
 12150  175E  3E08               	addlw	8
 12151  175F  0086               	movwf	6
 12152  1760  3001               	movlw	1	; select bank2/3
 12153  1761  0087               	movwf	7
 12154  1762  1101               	bcf	1,2
 12155                           
 12156                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12157  1763  086F               	movf	_DimmerLights,w
 12158  1764  3E08               	addlw	8
 12159  1765  0086               	movwf	6
 12160  1766  3001               	movlw	1	; select bank2/3
 12161  1767  0087               	movwf	7
 12162  1768  1C81               	btfss	1,1
 12163  1769  2F70               	goto	l6789
 12164                           
 12165                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12166  176A  01E2               	clrf	setDimmerLights@status
 12167  176B  0AE2               	incf	setDimmerLights@status,f
 12168  176C  0866               	movf	setDimmerLights_Main@lights,w
 12169  176D  318D  2575         	fcall	_setDimmerLights
 12170                           
 12171                           ;Dimmer_B1.c: 437: } else {
 12172  176F  0008               	return
 12173  1770                     l6789:	
 12174                           
 12175                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12176  1770  0020               	movlb	0	; select bank0
 12177  1771  01E2               	clrf	setDimmerLights@status
 12178  1772  0866               	movf	setDimmerLights_Main@lights,w
 12179  1773  318D  2575         	fcall	_setDimmerLights
 12180                           
 12181                           ;Dimmer_B1.c: 439: }
 12182                           ;Dimmer_B1.c: 440: }
 12183                           ;Dimmer_B1.c: 441: } else {
 12184  1775  0008               	return
 12185  1776                     l6791:	
 12186                           
 12187                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12188  1776  0020               	movlb	0	; select bank0
 12189  1777  086F               	movf	_DimmerLights,w
 12190  1778  3E08               	addlw	8
 12191  1779  0086               	movwf	6
 12192  177A  3001               	movlw	1	; select bank2/3
 12193  177B  0087               	movwf	7
 12194  177C  1E01               	btfss	1,4
 12195  177D  0008               	return
 12196                           
 12197                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12198  177E  0022               	movlb	2	; select bank2
 12199  177F  18BE               	btfsc	_Dimmer^(0+256),1
 12200  1780  0008               	return
 12201                           
 12202                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12203  1781  0020               	movlb	0	; select bank0
 12204  1782  086F               	movf	_DimmerLights,w
 12205  1783  3E08               	addlw	8
 12206  1784  0086               	movwf	6
 12207  1785  3001               	movlw	1	; select bank2/3
 12208  1786  0087               	movwf	7
 12209  1787  1201               	bcf	1,4
 12210                           
 12211                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12212  1788  086F               	movf	_DimmerLights,w
 12213  1789  3E08               	addlw	8
 12214  178A  0086               	movwf	6
 12215  178B  3001               	movlw	1	; select bank2/3
 12216  178C  0087               	movwf	7
 12217  178D  1D81               	btfss	1,3
 12218  178E  2F9E               	goto	l6801
 12219                           
 12220                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12221  178F  01E2               	clrf	setDimmerLights_Adj@status
 12222  1790  0AE2               	incf	setDimmerLights_Adj@status,f
 12223  1791  0866               	movf	setDimmerLights_Main@lights,w
 12224  1792  318B  2322  3197   	fcall	_setDimmerLights_Adj
 12225                           
 12226                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12227  1795  3064               	movlw	100
 12228  1796  0020               	movlb	0	; select bank0
 12229  1797  00A9               	movwf	setBuz@time
 12230  1798  3000               	movlw	0
 12231  1799  00AA               	movwf	setBuz@time+1
 12232  179A  3001               	movlw	1
 12233  179B  3196  26F2         	fcall	_setBuz
 12234                           
 12235                           ;Dimmer_B1.c: 448: } else {
 12236  179D  0008               	return
 12237  179E                     l6801:	
 12238                           
 12239                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12240  179E  0020               	movlb	0	; select bank0
 12241  179F  01E2               	clrf	setDimmerLights_Adj@status
 12242  17A0  0866               	movf	setDimmerLights_Main@lights,w
 12243  17A1  318B  2322         	fcall	_setDimmerLights_Adj
 12244  17A3  0008               	return
 12245  17A4                     __end_of_setDimmerLights_Main:	
 12246                           
 12247                           	psect	text73
 12248  0B22                     __ptext73:	
 12249 ;; *************** function _setDimmerLights_Adj *****************
 12250 ;; Defined at:
 12251 ;;		line 728 in file "../src/Dimmer_B1.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  lights          1    wreg     unsigned char 
 12254 ;;  status          1   66[BANK0 ] unsigned char 
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;  lights          1   69[BANK0 ] unsigned char 
 12257 ;; Return value:  Size  Location     Type
 12258 ;;		None               void
 12259 ;; Registers used:
 12260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12266 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;Total ram usage:        4 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    8
 12273 ;; This function calls:
 12274 ;;		_DimmerLightsPointSelect
 12275 ;;		_getMain_All_Error_Status
 12276 ;;		_setPercentValue
 12277 ;;		_setRF_DimmerLights
 12278 ;;		_setTxData
 12279 ;; This function is called by:
 12280 ;;		_setDimmerLights_Main
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           
 12285                           ;psect for function _setDimmerLights_Adj
 12286  0B22                     _setDimmerLights_Adj:	
 12287                           
 12288                           ;incstack = 0
 12289                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12290                           ;setDimmerLights_Adj@lights stored from wreg
 12291  0B22  0020               	movlb	0	; select bank0
 12292  0B23  00E5               	movwf	setDimmerLights_Adj@lights
 12293                           
 12294                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 12295  0B24  0865               	movf	setDimmerLights_Adj@lights,w
 12296  0B25  319C  24C8  318B   	fcall	_DimmerLightsPointSelect
 12297                           
 12298                           ;Dimmer_B1.c: 730: if (status == 1) {
 12299  0B28  0020               	movlb	0	; select bank0
 12300  0B29  0862               	movf	setDimmerLights_Adj@status,w
 12301  0B2A  3A01               	xorlw	1
 12302  0B2B  1D03               	skipz
 12303  0B2C  2B38               	goto	l6389
 12304                           
 12305                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 12306  0B2D  086F               	movf	_DimmerLights,w
 12307  0B2E  0086               	movwf	6
 12308  0B2F  3001               	movlw	1	; select bank2/3
 12309  0B30  0087               	movwf	7
 12310  0B31  1581               	bsf	1,3
 12311                           
 12312                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 12313  0B32  086F               	movf	_DimmerLights,w
 12314  0B33  0086               	movwf	6
 12315  0B34  3001               	movlw	1	; select bank2/3
 12316  0B35  0087               	movwf	7
 12317  0B36  1481               	bsf	1,1
 12318                           
 12319                           ;Dimmer_B1.c: 733: } else {
 12320  0B37  0008               	return
 12321  0B38                     l6389:	
 12322                           
 12323                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 12324  0B38  086F               	movf	_DimmerLights,w
 12325  0B39  0086               	movwf	6
 12326  0B3A  3001               	movlw	1	; select bank2/3
 12327  0B3B  0087               	movwf	7
 12328  0B3C  1D81               	btfss	1,3
 12329  0B3D  0008               	return
 12330                           
 12331                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 12332  0B3E  086F               	movf	_DimmerLights,w
 12333  0B3F  0086               	movwf	6
 12334  0B40  3001               	movlw	1	; select bank2/3
 12335  0B41  0087               	movwf	7
 12336  0B42  1081               	bcf	1,1
 12337                           
 12338                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 12339  0B43  086F               	movf	_DimmerLights,w
 12340  0B44  0086               	movwf	6
 12341  0B45  3001               	movlw	1	; select bank2/3
 12342  0B46  0087               	movwf	7
 12343  0B47  1181               	bcf	1,3
 12344                           
 12345                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12346  0B48  086F               	movf	_DimmerLights,w
 12347  0B49  3E04               	addlw	4
 12348  0B4A  0086               	movwf	6
 12349  0B4B  3001               	movlw	1	; select bank2/3
 12350  0B4C  0087               	movwf	7
 12351  0B4D  0801               	movf	1,w
 12352  0B4E  00E3               	movwf	??_setDimmerLights_Adj
 12353  0B4F  086F               	movf	_DimmerLights,w
 12354  0B50  3E05               	addlw	5
 12355  0B51  0086               	movwf	6
 12356  0B52  3001               	movlw	1	; select bank2/3
 12357  0B53  0087               	movwf	7
 12358  0B54  0863               	movf	??_setDimmerLights_Adj,w
 12359  0B55  0081               	movwf	1
 12360                           
 12361                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12362  0B56  086F               	movf	_DimmerLights,w
 12363  0B57  3E04               	addlw	4
 12364  0B58  0086               	movwf	6
 12365  0B59  3001               	movlw	1	; select bank2/3
 12366  0B5A  0087               	movwf	7
 12367  0B5B  0801               	movf	1,w
 12368  0B5C  3189  21F3  318B   	fcall	_setPercentValue
 12369  0B5F  0020               	movlb	0	; select bank0
 12370  0B60  00E3               	movwf	??_setDimmerLights_Adj
 12371  0B61  0865               	movf	setDimmerLights_Adj@lights,w
 12372  0B62  3E14               	addlw	20
 12373  0B63  076E               	addwf	_product,w
 12374  0B64  00E4               	movwf	??_setDimmerLights_Adj+1
 12375  0B65  0864               	movf	??_setDimmerLights_Adj+1,w
 12376  0B66  0086               	movwf	6
 12377  0B67  3002               	movlw	2	; select bank4/5
 12378  0B68  0087               	movwf	7
 12379  0B69  0863               	movf	??_setDimmerLights_Adj,w
 12380  0B6A  0081               	movwf	1
 12381                           
 12382                           ;Dimmer_B1.c: 748: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12383  0B6B  3000               	movlw	0
 12384  0B6C  3192  2292  318B   	fcall	_getMain_All_Error_Status
 12385  0B6F  3A00               	xorlw	0
 12386  0B70  3000               	movlw	0
 12387  0B71  1903               	skipnz
 12388  0B72  3001               	movlw	1
 12389  0B73  0020               	movlb	0	; select bank0
 12390  0B74  00E3               	movwf	??_setDimmerLights_Adj
 12391  0B75  0DE3               	rlf	??_setDimmerLights_Adj,f
 12392  0B76  0022               	movlb	2	; select bank2
 12393  0B77  083E               	movf	_Dimmer^(0+256),w
 12394  0B78  0020               	movlb	0	; select bank0
 12395  0B79  0663               	xorwf	??_setDimmerLights_Adj,w
 12396  0B7A  39FD               	andlw	-3
 12397  0B7B  0663               	xorwf	??_setDimmerLights_Adj,w
 12398  0B7C  0022               	movlb	2	; select bank2
 12399  0B7D  00BE               	movwf	_Dimmer^(0+256)
 12400                           
 12401                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 12402  0B7E  0020               	movlb	0	; select bank0
 12403  0B7F  01A0               	clrf	setRF_DimmerLights@on
 12404  0B80  0AA0               	incf	setRF_DimmerLights@on,f
 12405  0B81  0865               	movf	setDimmerLights_Adj@lights,w
 12406  0B82  3197  27A4  318B   	fcall	_setRF_DimmerLights
 12407                           
 12408                           ;Dimmer_B1.c: 752: setTxData();
 12409  0B85  3186  26EF         	fcall	_setTxData
 12410  0B87  0008               	return
 12411  0B88                     __end_of_setDimmerLights_Adj:	
 12412                           
 12413                           	psect	text74
 12414  0D75                     __ptext74:	
 12415 ;; *************** function _setDimmerLights *****************
 12416 ;; Defined at:
 12417 ;;		line 623 in file "../src/Dimmer_B1.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  lights          1    wreg     unsigned char 
 12420 ;;  status          1   66[BANK0 ] unsigned char 
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  lights          1   69[BANK0 ] unsigned char 
 12423 ;; Return value:  Size  Location     Type
 12424 ;;		None               void
 12425 ;; Registers used:
 12426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12427 ;; Tracked objects:
 12428 ;;		On entry : 0/0
 12429 ;;		On exit  : 0/0
 12430 ;;		Unchanged: 0/0
 12431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12432 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;Total ram usage:        4 bytes
 12437 ;; Hardware stack levels used:    1
 12438 ;; Hardware stack levels required when called:    8
 12439 ;; This function calls:
 12440 ;;		_DimmerLightsPointSelect
 12441 ;;		_getMain_All_Error_Status
 12442 ;;		_setDimmerLights_Line
 12443 ;;		_setLED
 12444 ;;		_setPercentValue
 12445 ;;		_setRF_DimmerLights
 12446 ;;		_setTxData
 12447 ;; This function is called by:
 12448 ;;		_setDimmerLights_Main
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           
 12453                           ;psect for function _setDimmerLights
 12454  0D75                     _setDimmerLights:	
 12455                           
 12456                           ;incstack = 0
 12457                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12458                           ;setDimmerLights@lights stored from wreg
 12459  0D75  0020               	movlb	0	; select bank0
 12460  0D76  00E5               	movwf	setDimmerLights@lights
 12461                           
 12462                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 12463  0D77  0865               	movf	setDimmerLights@lights,w
 12464  0D78  319C  24C8  318D   	fcall	_DimmerLightsPointSelect
 12465                           
 12466                           ;Dimmer_B1.c: 627: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12467  0D7B  3000               	movlw	0
 12468  0D7C  3192  2292  318D   	fcall	_getMain_All_Error_Status
 12469  0D7F  3A00               	xorlw	0
 12470  0D80  3000               	movlw	0
 12471  0D81  1903               	skipnz
 12472  0D82  3001               	movlw	1
 12473  0D83  0020               	movlb	0	; select bank0
 12474  0D84  00E3               	movwf	??_setDimmerLights
 12475  0D85  0DE3               	rlf	??_setDimmerLights,f
 12476  0D86  0022               	movlb	2	; select bank2
 12477  0D87  083E               	movf	_Dimmer^(0+256),w
 12478  0D88  0020               	movlb	0	; select bank0
 12479  0D89  0663               	xorwf	??_setDimmerLights,w
 12480  0D8A  39FD               	andlw	-3
 12481  0D8B  0663               	xorwf	??_setDimmerLights,w
 12482  0D8C  0022               	movlb	2	; select bank2
 12483  0D8D  00BE               	movwf	_Dimmer^(0+256)
 12484                           
 12485                           ;Dimmer_B1.c: 631: if (status == 1) {
 12486  0D8E  0020               	movlb	0	; select bank0
 12487  0D8F  0862               	movf	setDimmerLights@status,w
 12488  0D90  3A01               	xorlw	1
 12489  0D91  1D03               	skipz
 12490  0D92  2DC3               	goto	l6369
 12491                           
 12492                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 12493  0D93  086F               	movf	_DimmerLights,w
 12494  0D94  3E09               	addlw	9
 12495  0D95  0086               	movwf	6
 12496  0D96  3001               	movlw	1	; select bank2/3
 12497  0D97  0087               	movwf	7
 12498  0D98  1481               	bsf	1,1
 12499                           
 12500                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 12501  0D99  01A2               	clrf	setLED@command
 12502  0D9A  0865               	movf	setDimmerLights@lights,w
 12503  0D9B  3193  232D  318D   	fcall	_setLED
 12504                           
 12505                           ;Dimmer_B1.c: 634: ;;
 12506                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 12507  0D9E  0020               	movlb	0	; select bank0
 12508  0D9F  0865               	movf	setDimmerLights@lights,w
 12509  0DA0  319D  2516  318D   	fcall	_setDimmerLights_Line
 12510                           
 12511                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 12512  0DA3  0020               	movlb	0	; select bank0
 12513  0DA4  086F               	movf	_DimmerLights,w
 12514  0DA5  0086               	movwf	6
 12515  0DA6  3001               	movlw	1	; select bank2/3
 12516  0DA7  0087               	movwf	7
 12517  0DA8  1701               	bsf	1,6
 12518                           
 12519                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(80*0.8));
 12520  0DA9  3040               	movlw	64
 12521  0DAA  00E3               	movwf	??_setDimmerLights
 12522  0DAB  086F               	movf	_DimmerLights,w
 12523  0DAC  3E04               	addlw	4
 12524  0DAD  0086               	movwf	6
 12525  0DAE  3001               	movlw	1	; select bank2/3
 12526  0DAF  0087               	movwf	7
 12527  0DB0  0863               	movf	??_setDimmerLights,w
 12528  0DB1  0081               	movwf	1
 12529                           
 12530                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12531  0DB2  3040               	movlw	64
 12532  0DB3  3189  21F3  318D   	fcall	_setPercentValue
 12533  0DB6  0020               	movlb	0	; select bank0
 12534  0DB7  00E3               	movwf	??_setDimmerLights
 12535  0DB8  0865               	movf	setDimmerLights@lights,w
 12536  0DB9  3E14               	addlw	20
 12537  0DBA  076E               	addwf	_product,w
 12538  0DBB  00E4               	movwf	??_setDimmerLights+1
 12539  0DBC  0864               	movf	??_setDimmerLights+1,w
 12540  0DBD  0086               	movwf	6
 12541  0DBE  3002               	movlw	2	; select bank4/5
 12542  0DBF  0087               	movwf	7
 12543  0DC0  0863               	movf	??_setDimmerLights,w
 12544  0DC1  0081               	movwf	1
 12545  0DC2  2DEA               	goto	l6381
 12546  0DC3                     l6369:	
 12547                           ;Dimmer_B1.c: 654: } else {
 12548                           
 12549                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12550                           
 12551                           
 12552                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12553  0DC3  086F               	movf	_DimmerLights,w
 12554  0DC4  0086               	movwf	6
 12555  0DC5  3001               	movlw	1	; select bank2/3
 12556  0DC6  0087               	movwf	7
 12557  0DC7  1301               	bcf	1,6
 12558                           
 12559                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12560  0DC8  086F               	movf	_DimmerLights,w
 12561  0DC9  3E09               	addlw	9
 12562  0DCA  0086               	movwf	6
 12563  0DCB  3001               	movlw	1	; select bank2/3
 12564  0DCC  0087               	movwf	7
 12565  0DCD  1081               	bcf	1,1
 12566                           
 12567                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12568  0DCE  01A2               	clrf	setLED@command
 12569  0DCF  0AA2               	incf	setLED@command,f
 12570  0DD0  0865               	movf	setDimmerLights@lights,w
 12571  0DD1  3193  232D  318D   	fcall	_setLED
 12572                           
 12573                           ;Dimmer_B1.c: 658: ;;
 12574                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 12575  0DD4  0020               	movlb	0	; select bank0
 12576  0DD5  086F               	movf	_DimmerLights,w
 12577  0DD6  3E08               	addlw	8
 12578  0DD7  0086               	movwf	6
 12579  0DD8  3001               	movlw	1	; select bank2/3
 12580  0DD9  0087               	movwf	7
 12581  0DDA  1781               	bsf	1,7
 12582                           
 12583                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 12584  0DDB  086F               	movf	_DimmerLights,w
 12585  0DDC  0086               	movwf	6
 12586  0DDD  3001               	movlw	1	; select bank2/3
 12587  0DDE  0087               	movwf	7
 12588  0DDF  1181               	bcf	1,3
 12589                           
 12590                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 12591  0DE0  086F               	movf	_DimmerLights,w
 12592  0DE1  0086               	movwf	6
 12593  0DE2  3001               	movlw	1	; select bank2/3
 12594  0DE3  0087               	movwf	7
 12595  0DE4  1201               	bcf	1,4
 12596                           
 12597                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 12598  0DE5  086F               	movf	_DimmerLights,w
 12599  0DE6  0086               	movwf	6
 12600  0DE7  3001               	movlw	1	; select bank2/3
 12601  0DE8  0087               	movwf	7
 12602  0DE9  1101               	bcf	1,2
 12603  0DEA                     l6381:	
 12604                           
 12605                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 12606  0DEA  3007               	movlw	7
 12607  0DEB  00E3               	movwf	??_setDimmerLights
 12608  0DEC  086F               	movf	_DimmerLights,w
 12609  0DED  3E02               	addlw	2
 12610  0DEE  0086               	movwf	6
 12611  0DEF  3001               	movlw	1	; select bank2/3
 12612  0DF0  0087               	movwf	7
 12613  0DF1  0863               	movf	??_setDimmerLights,w
 12614  0DF2  0081               	movwf	1
 12615                           
 12616                           ;Dimmer_B1.c: 673: }
 12617                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12618  0DF3  0862               	movf	setDimmerLights@status,w
 12619  0DF4  00E3               	movwf	??_setDimmerLights
 12620  0DF5  0863               	movf	??_setDimmerLights,w
 12621  0DF6  00A0               	movwf	setRF_DimmerLights@on
 12622  0DF7  0865               	movf	setDimmerLights@lights,w
 12623  0DF8  3197  27A4  318D   	fcall	_setRF_DimmerLights
 12624                           
 12625                           ;Dimmer_B1.c: 675: setTxData();
 12626  0DFB  3186  26EF         	fcall	_setTxData
 12627  0DFD  0008               	return
 12628  0DFE                     __end_of_setDimmerLights:	
 12629                           
 12630                           	psect	text75
 12631  06EF                     __ptext75:	
 12632 ;; *************** function _setTxData *****************
 12633 ;; Defined at:
 12634 ;;		line 204 in file "../src/RF_Control_B1.c"
 12635 ;; Parameters:    Size  Location     Type
 12636 ;;		None
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;  i               1    0        unsigned char 
 12639 ;; Return value:  Size  Location     Type
 12640 ;;		None               void
 12641 ;; Registers used:
 12642 ;;		wreg, fsr1l, fsr1h
 12643 ;; Tracked objects:
 12644 ;;		On entry : 0/0
 12645 ;;		On exit  : 0/0
 12646 ;;		Unchanged: 0/0
 12647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;Total ram usage:        1 bytes
 12653 ;; Hardware stack levels used:    1
 12654 ;; Hardware stack levels required when called:    5
 12655 ;; This function calls:
 12656 ;;		Nothing
 12657 ;; This function is called by:
 12658 ;;		_setDimmerLights
 12659 ;;		_setDimmerLights_Adj
 12660 ;;		_setControl_Lights_Table
 12661 ;;		_setRFSW_Control
 12662 ;;		_setRFSW_AdjControl
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           
 12667                           ;psect for function _setTxData
 12668  06EF                     _setTxData:	
 12669                           
 12670                           ;RF_Control_B1.c: 205: char i;
 12671                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 12672                           
 12673                           ;incstack = 0
 12674                           ; Regs used in _setTxData: [wregfsr1]
 12675  06EF  0021               	movlb	1	; select bank1
 12676  06F0  1C3C               	btfss	_RF1^(0+128),0
 12677  06F1  0008               	return
 12678                           
 12679                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 12680  06F2  153C               	bsf	_RF1^(0+128),2
 12681                           
 12682                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 12683  06F3  3014               	movlw	20
 12684  06F4  00C3               	movwf	(_RF1^(0+128)+7)
 12685  06F5  3000               	movlw	0
 12686  06F6  00C4               	movwf	(_RF1^(0+128)+8)
 12687                           
 12688                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 12689  06F7  3063               	movlw	99
 12690  06F8  0020               	movlb	0	; select bank0
 12691  06F9  00A0               	movwf	??_setTxData
 12692  06FA  0820               	movf	??_setTxData,w
 12693  06FB  0022               	movlb	2	; select bank2
 12694  06FC  00A0               	movwf	_RF_Data^(0+256)
 12695                           
 12696                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 12697  06FD  3002               	movlw	2
 12698  06FE  0020               	movlb	0	; select bank0
 12699  06FF  00A0               	movwf	??_setTxData
 12700  0700  0820               	movf	??_setTxData,w
 12701  0701  0022               	movlb	2	; select bank2
 12702  0702  00A1               	movwf	(_RF_Data^(0+256)+1)
 12703                           
 12704                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 12705  0703  0020               	movlb	0	; select bank0
 12706  0704  086E               	movf	_product,w
 12707  0705  0086               	movwf	6
 12708  0706  3002               	movlw	2	; select bank4/5
 12709  0707  0087               	movwf	7
 12710  0708  3002               	movlw	2	; select bank4/5
 12711  0709  3F42               	moviw [2]fsr1
 12712  070A  0022               	movlb	2	; select bank2
 12713  070B  00A2               	movwf	(_RF_Data^(0+256)+2)
 12714                           
 12715                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 12716  070C  0020               	movlb	0	; select bank0
 12717  070D  086E               	movf	_product,w
 12718  070E  0086               	movwf	6
 12719  070F  3002               	movlw	2	; select bank4/5
 12720  0710  0087               	movwf	7
 12721  0711  3002               	movlw	2	; select bank4/5
 12722  0712  3F43               	moviw [3]fsr1
 12723  0713  0022               	movlb	2	; select bank2
 12724  0714  00A3               	movwf	(_RF_Data^(0+256)+3)
 12725                           
 12726                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 12727  0715  0020               	movlb	0	; select bank0
 12728  0716  086E               	movf	_product,w
 12729  0717  0086               	movwf	6
 12730  0718  3002               	movlw	2	; select bank4/5
 12731  0719  0087               	movwf	7
 12732  071A  3002               	movlw	2	; select bank4/5
 12733  071B  3F44               	moviw [4]fsr1
 12734  071C  0022               	movlb	2	; select bank2
 12735  071D  00A4               	movwf	(_RF_Data^(0+256)+4)
 12736                           
 12737                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 12738  071E  0020               	movlb	0	; select bank0
 12739  071F  086E               	movf	_product,w
 12740  0720  0086               	movwf	6
 12741  0721  3002               	movlw	2	; select bank4/5
 12742  0722  0087               	movwf	7
 12743  0723  3002               	movlw	2	; select bank4/5
 12744  0724  3F45               	moviw [5]fsr1
 12745  0725  0022               	movlb	2	; select bank2
 12746  0726  00A5               	movwf	(_RF_Data^(0+256)+5)
 12747                           
 12748                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 12749  0727  0020               	movlb	0	; select bank0
 12750  0728  086E               	movf	_product,w
 12751  0729  0086               	movwf	6
 12752  072A  3002               	movlw	2	; select bank4/5
 12753  072B  0087               	movwf	7
 12754  072C  3002               	movlw	2	; select bank4/5
 12755  072D  3F46               	moviw [6]fsr1
 12756  072E  0022               	movlb	2	; select bank2
 12757  072F  00A6               	movwf	(_RF_Data^(0+256)+6)
 12758                           
 12759                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 12760  0730  0020               	movlb	0	; select bank0
 12761  0731  086E               	movf	_product,w
 12762  0732  0086               	movwf	6
 12763  0733  3002               	movlw	2	; select bank4/5
 12764  0734  0087               	movwf	7
 12765  0735  3002               	movlw	2	; select bank4/5
 12766  0736  3F47               	moviw [7]fsr1
 12767  0737  0022               	movlb	2	; select bank2
 12768  0738  00A7               	movwf	(_RF_Data^(0+256)+7)
 12769                           
 12770                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 12771  0739  0020               	movlb	0	; select bank0
 12772  073A  086E               	movf	_product,w
 12773  073B  0086               	movwf	6
 12774  073C  3002               	movlw	2	; select bank4/5
 12775  073D  0087               	movwf	7
 12776  073E  3002               	movlw	2	; select bank4/5
 12777  073F  3F48               	moviw [8]fsr1
 12778  0740  0022               	movlb	2	; select bank2
 12779  0741  00A8               	movwf	(_RF_Data^(0+256)+8)
 12780                           
 12781                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 12782  0742  0020               	movlb	0	; select bank0
 12783  0743  086E               	movf	_product,w
 12784  0744  0086               	movwf	6
 12785  0745  3002               	movlw	2	; select bank4/5
 12786  0746  0087               	movwf	7
 12787  0747  3002               	movlw	2	; select bank4/5
 12788  0748  3F49               	moviw [9]fsr1
 12789  0749  0022               	movlb	2	; select bank2
 12790  074A  00A9               	movwf	(_RF_Data^(0+256)+9)
 12791                           
 12792                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 12793  074B  0020               	movlb	0	; select bank0
 12794  074C  086E               	movf	_product,w
 12795  074D  0086               	movwf	6
 12796  074E  3002               	movlw	2	; select bank4/5
 12797  074F  0087               	movwf	7
 12798  0750  3002               	movlw	2	; select bank4/5
 12799  0751  3F4A               	moviw [10]fsr1
 12800  0752  0022               	movlb	2	; select bank2
 12801  0753  00AA               	movwf	(_RF_Data^(0+256)+10)
 12802                           
 12803                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 12804  0754  0020               	movlb	0	; select bank0
 12805  0755  086E               	movf	_product,w
 12806  0756  0086               	movwf	6
 12807  0757  3002               	movlw	2	; select bank4/5
 12808  0758  0087               	movwf	7
 12809  0759  3002               	movlw	2	; select bank4/5
 12810  075A  3F4B               	moviw [11]fsr1
 12811  075B  0022               	movlb	2	; select bank2
 12812  075C  00AB               	movwf	(_RF_Data^(0+256)+11)
 12813                           
 12814                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 12815  075D  0020               	movlb	0	; select bank0
 12816  075E  086E               	movf	_product,w
 12817  075F  0086               	movwf	6
 12818  0760  3002               	movlw	2	; select bank4/5
 12819  0761  0087               	movwf	7
 12820  0762  3002               	movlw	2	; select bank4/5
 12821  0763  3F4C               	moviw [12]fsr1
 12822  0764  0022               	movlb	2	; select bank2
 12823  0765  00AC               	movwf	(_RF_Data^(0+256)+12)
 12824                           
 12825                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 12826  0766  0020               	movlb	0	; select bank0
 12827  0767  086E               	movf	_product,w
 12828  0768  0086               	movwf	6
 12829  0769  3002               	movlw	2	; select bank4/5
 12830  076A  0087               	movwf	7
 12831  076B  3002               	movlw	2	; select bank4/5
 12832  076C  3F4D               	moviw [13]fsr1
 12833  076D  0022               	movlb	2	; select bank2
 12834  076E  00AD               	movwf	(_RF_Data^(0+256)+13)
 12835                           
 12836                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 12837  076F  0020               	movlb	0	; select bank0
 12838  0770  086E               	movf	_product,w
 12839  0771  0086               	movwf	6
 12840  0772  3002               	movlw	2	; select bank4/5
 12841  0773  0087               	movwf	7
 12842  0774  3002               	movlw	2	; select bank4/5
 12843  0775  3F4E               	moviw [14]fsr1
 12844  0776  0022               	movlb	2	; select bank2
 12845  0777  00AE               	movwf	(_RF_Data^(0+256)+14)
 12846                           
 12847                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 12848  0778  0020               	movlb	0	; select bank0
 12849  0779  086E               	movf	_product,w
 12850  077A  0086               	movwf	6
 12851  077B  3002               	movlw	2	; select bank4/5
 12852  077C  0087               	movwf	7
 12853  077D  3002               	movlw	2	; select bank4/5
 12854  077E  3F4F               	moviw [15]fsr1
 12855  077F  0022               	movlb	2	; select bank2
 12856  0780  00AF               	movwf	(_RF_Data^(0+256)+15)
 12857                           
 12858                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 12859  0781  0020               	movlb	0	; select bank0
 12860  0782  086E               	movf	_product,w
 12861  0783  0086               	movwf	6
 12862  0784  3002               	movlw	2	; select bank4/5
 12863  0785  0087               	movwf	7
 12864  0786  3002               	movlw	2	; select bank4/5
 12865  0787  3F50               	moviw [16]fsr1
 12866  0788  0022               	movlb	2	; select bank2
 12867  0789  00B0               	movwf	(_RF_Data^(0+256)+16)
 12868                           
 12869                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 12870  078A  0020               	movlb	0	; select bank0
 12871  078B  086E               	movf	_product,w
 12872  078C  0086               	movwf	6
 12873  078D  3002               	movlw	2	; select bank4/5
 12874  078E  0087               	movwf	7
 12875  078F  3002               	movlw	2	; select bank4/5
 12876  0790  3F51               	moviw [17]fsr1
 12877  0791  0022               	movlb	2	; select bank2
 12878  0792  00B1               	movwf	(_RF_Data^(0+256)+17)
 12879                           
 12880                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 12881  0793  0020               	movlb	0	; select bank0
 12882  0794  086E               	movf	_product,w
 12883  0795  0086               	movwf	6
 12884  0796  3002               	movlw	2	; select bank4/5
 12885  0797  0087               	movwf	7
 12886  0798  3002               	movlw	2	; select bank4/5
 12887  0799  3F52               	moviw [18]fsr1
 12888  079A  0022               	movlb	2	; select bank2
 12889  079B  00B2               	movwf	(_RF_Data^(0+256)+18)
 12890                           
 12891                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 12892  079C  0020               	movlb	0	; select bank0
 12893  079D  086E               	movf	_product,w
 12894  079E  0086               	movwf	6
 12895  079F  3002               	movlw	2	; select bank4/5
 12896  07A0  0087               	movwf	7
 12897  07A1  3002               	movlw	2	; select bank4/5
 12898  07A2  3F53               	moviw [19]fsr1
 12899  07A3  0022               	movlb	2	; select bank2
 12900  07A4  00B3               	movwf	(_RF_Data^(0+256)+19)
 12901                           
 12902                           ;RF_Control_B1.c: 238: RF_Data[20] = 209;
 12903  07A5  30D1               	movlw	209
 12904  07A6  0020               	movlb	0	; select bank0
 12905  07A7  00A0               	movwf	??_setTxData
 12906  07A8  0820               	movf	??_setTxData,w
 12907  07A9  0022               	movlb	2	; select bank2
 12908  07AA  00B4               	movwf	(_RF_Data^(0+256)+20)
 12909  07AB  0008               	return
 12910  07AC                     __end_of_setTxData:	
 12911                           
 12912                           	psect	text76
 12913  17A4                     __ptext76:	
 12914 ;; *************** function _setRF_DimmerLights *****************
 12915 ;; Defined at:
 12916 ;;		line 462 in file "../src/RF_Control_B1.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  lights          1    wreg     unsigned char 
 12919 ;;  on              1    0[BANK0 ] unsigned char 
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;  lights          1    4[BANK0 ] unsigned char 
 12922 ;;  status          1    3[BANK0 ] unsigned char 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;		None               void
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        5 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    5
 12939 ;; This function calls:
 12940 ;;		Nothing
 12941 ;; This function is called by:
 12942 ;;		_setDimmerLights
 12943 ;;		_setDimmerLights_Adj
 12944 ;;		_setRFSW_Control
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           
 12949                           ;psect for function _setRF_DimmerLights
 12950  17A4                     _setRF_DimmerLights:	
 12951                           
 12952                           ;incstack = 0
 12953                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 12954                           ;setRF_DimmerLights@lights stored from wreg
 12955  17A4  0020               	movlb	0	; select bank0
 12956  17A5  00A4               	movwf	setRF_DimmerLights@lights
 12957                           
 12958                           ;RF_Control_B1.c: 463: char status = 1;
 12959  17A6  01A3               	clrf	setRF_DimmerLights@status
 12960  17A7  0AA3               	incf	setRF_DimmerLights@status,f
 12961                           
 12962                           ;RF_Control_B1.c: 464: status <<= (lights - 1);
 12963  17A8  0824               	movf	setRF_DimmerLights@lights,w
 12964  17A9  3EFF               	addlw	-1
 12965  17AA  0A89               	incf	9,f
 12966  17AB  2FAE               	goto	u4900
 12967  17AC                     u4905:	
 12968  17AC  1003               	clrc
 12969  17AD  0DA3               	rlf	setRF_DimmerLights@status,f
 12970  17AE                     u4900:	
 12971  17AE  3EFF               	addlw	-1
 12972  17AF  1D03               	skipz
 12973  17B0  2FAC               	goto	u4905
 12974                           
 12975                           ;RF_Control_B1.c: 465: product->Data[11]=lights;
 12976  17B1  0824               	movf	setRF_DimmerLights@lights,w
 12977  17B2  00A1               	movwf	??_setRF_DimmerLights
 12978  17B3  086E               	movf	_product,w
 12979  17B4  3E0B               	addlw	11
 12980  17B5  0086               	movwf	6
 12981  17B6  3002               	movlw	2	; select bank4/5
 12982  17B7  0087               	movwf	7
 12983  17B8  0821               	movf	??_setRF_DimmerLights,w
 12984  17B9  0081               	movwf	1
 12985                           
 12986                           ;RF_Control_B1.c: 473: product->Data[9]=product->Data[20 + lights];
 12987  17BA  0824               	movf	setRF_DimmerLights@lights,w
 12988  17BB  3E14               	addlw	20
 12989  17BC  076E               	addwf	_product,w
 12990  17BD  00A1               	movwf	??_setRF_DimmerLights
 12991  17BE  0821               	movf	??_setRF_DimmerLights,w
 12992  17BF  0086               	movwf	6
 12993  17C0  3002               	movlw	2	; select bank4/5
 12994  17C1  0087               	movwf	7
 12995  17C2  0801               	movf	1,w
 12996  17C3  00A2               	movwf	??_setRF_DimmerLights+1
 12997  17C4  086E               	movf	_product,w
 12998  17C5  3E09               	addlw	9
 12999  17C6  0086               	movwf	6
 13000  17C7  3002               	movlw	2	; select bank4/5
 13001  17C8  0087               	movwf	7
 13002  17C9  0822               	movf	??_setRF_DimmerLights+1,w
 13003  17CA  0081               	movwf	1
 13004                           
 13005                           ;RF_Control_B1.c: 474: product->Data[17]=product->Data[26 + lights];
 13006  17CB  0824               	movf	setRF_DimmerLights@lights,w
 13007  17CC  3E1A               	addlw	26
 13008  17CD  076E               	addwf	_product,w
 13009  17CE  00A1               	movwf	??_setRF_DimmerLights
 13010  17CF  0821               	movf	??_setRF_DimmerLights,w
 13011  17D0  0086               	movwf	6
 13012  17D1  3002               	movlw	2	; select bank4/5
 13013  17D2  0087               	movwf	7
 13014  17D3  0801               	movf	1,w
 13015  17D4  00A2               	movwf	??_setRF_DimmerLights+1
 13016  17D5  086E               	movf	_product,w
 13017  17D6  3E11               	addlw	17
 13018  17D7  0086               	movwf	6
 13019  17D8  3002               	movlw	2	; select bank4/5
 13020  17D9  0087               	movwf	7
 13021  17DA  0822               	movf	??_setRF_DimmerLights+1,w
 13022  17DB  0081               	movwf	1
 13023                           
 13024                           ;RF_Control_B1.c: 475: if (on == 1) {
 13025  17DC  0820               	movf	setRF_DimmerLights@on,w
 13026  17DD  3A01               	xorlw	1
 13027  17DE  1D03               	skipz
 13028  17DF  2FF0               	goto	l5855
 13029                           
 13030                           ;RF_Control_B1.c: 476: product->Data[15]=(product->Data[15] | status);
 13031  17E0  086E               	movf	_product,w
 13032  17E1  3E0F               	addlw	15
 13033  17E2  0086               	movwf	6
 13034  17E3  3002               	movlw	2	; select bank4/5
 13035  17E4  0087               	movwf	7
 13036  17E5  0801               	movf	1,w
 13037  17E6  0423               	iorwf	setRF_DimmerLights@status,w
 13038  17E7  00A1               	movwf	??_setRF_DimmerLights
 13039  17E8  086E               	movf	_product,w
 13040  17E9  3E0F               	addlw	15
 13041  17EA  0086               	movwf	6
 13042  17EB  3002               	movlw	2	; select bank4/5
 13043  17EC  0087               	movwf	7
 13044  17ED  0821               	movf	??_setRF_DimmerLights,w
 13045  17EE  0081               	movwf	1
 13046                           
 13047                           ;RF_Control_B1.c: 477: } else {
 13048  17EF  0008               	return
 13049  17F0                     l5855:	
 13050                           
 13051                           ;RF_Control_B1.c: 478: product->Data[15]=(product->Data[15]&(~status));
 13052  17F0  086E               	movf	_product,w
 13053  17F1  3E0F               	addlw	15
 13054  17F2  0086               	movwf	6
 13055  17F3  3002               	movlw	2	; select bank4/5
 13056  17F4  0087               	movwf	7
 13057  17F5  0923               	comf	setRF_DimmerLights@status,w
 13058  17F6  0501               	andwf	1,w
 13059  17F7  00A1               	movwf	??_setRF_DimmerLights
 13060  17F8  086E               	movf	_product,w
 13061  17F9  3E0F               	addlw	15
 13062  17FA  0086               	movwf	6
 13063  17FB  3002               	movlw	2	; select bank4/5
 13064  17FC  0087               	movwf	7
 13065  17FD  0821               	movf	??_setRF_DimmerLights,w
 13066  17FE  0081               	movwf	1
 13067  17FF  0008               	return
 13068  1800                     __end_of_setRF_DimmerLights:	
 13069                           
 13070                           	psect	text77
 13071  09F3                     __ptext77:	
 13072 ;; *************** function _setPercentValue *****************
 13073 ;; Defined at:
 13074 ;;		line 886 in file "../src/Dimmer_B1.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;  value           1    wreg     unsigned char 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  value           1   62[BANK0 ] unsigned char 
 13079 ;;  i               3   63[BANK0 ] float 
 13080 ;; Return value:  Size  Location     Type
 13081 ;;                  1    wreg      unsigned char 
 13082 ;; Registers used:
 13083 ;;		wreg, status,2, status,0, pclath, cstack
 13084 ;; Tracked objects:
 13085 ;;		On entry : 0/0
 13086 ;;		On exit  : 0/0
 13087 ;;		Unchanged: 0/0
 13088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;Total ram usage:        6 bytes
 13094 ;; Hardware stack levels used:    1
 13095 ;; Hardware stack levels required when called:    7
 13096 ;; This function calls:
 13097 ;;		___awtoft
 13098 ;;		___ftadd
 13099 ;;		___ftdiv
 13100 ;;		___ftneg
 13101 ;;		___fttol
 13102 ;; This function is called by:
 13103 ;;		_setDimmerLights
 13104 ;;		_setDimmerLights_Adj
 13105 ;;		_Flash_Memory_Initialization
 13106 ;; This function uses a non-reentrant model
 13107 ;;
 13108                           
 13109                           
 13110                           ;psect for function _setPercentValue
 13111  09F3                     _setPercentValue:	
 13112                           
 13113                           ;incstack = 0
 13114                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13115                           ;setPercentValue@value stored from wreg
 13116  09F3  0020               	movlb	0	; select bank0
 13117  09F4  00DE               	movwf	setPercentValue@value
 13118                           
 13119                           ;Dimmer_B1.c: 894: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13120  09F5  3000               	movlw	0
 13121  09F6  00DF               	movwf	setPercentValue@i
 13122  09F7  3050               	movlw	80
 13123  09F8  00E0               	movwf	setPercentValue@i+1
 13124  09F9  3042               	movlw	66
 13125  09FA  00E1               	movwf	setPercentValue@i+2
 13126                           
 13127                           ;Dimmer_B1.c: 895: i /= 100;
 13128  09FB  3000               	movlw	0
 13129  09FC  00AE               	movwf	___ftdiv@f2
 13130  09FD  30C8               	movlw	200
 13131  09FE  00AF               	movwf	___ftdiv@f2+1
 13132  09FF  3042               	movlw	66
 13133  0A00  00B0               	movwf	___ftdiv@f2+2
 13134  0A01  085F               	movf	setPercentValue@i,w
 13135  0A02  00B1               	movwf	___ftdiv@f1
 13136  0A03  0860               	movf	setPercentValue@i+1,w
 13137  0A04  00B2               	movwf	___ftdiv@f1+1
 13138  0A05  0861               	movf	setPercentValue@i+2,w
 13139  0A06  00B3               	movwf	___ftdiv@f1+2
 13140  0A07  318E  26A3  3189   	fcall	___ftdiv
 13141  0A0A  0020               	movlb	0	; select bank0
 13142  0A0B  082E               	movf	?___ftdiv,w
 13143  0A0C  00DF               	movwf	setPercentValue@i
 13144  0A0D  082F               	movf	?___ftdiv+1,w
 13145  0A0E  00E0               	movwf	setPercentValue@i+1
 13146  0A0F  0830               	movf	?___ftdiv+2,w
 13147  0A10  00E1               	movwf	setPercentValue@i+2
 13148                           
 13149                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13150  0A11  085E               	movf	setPercentValue@value,w
 13151  0A12  00DC               	movwf	??_setPercentValue
 13152  0A13  01DD               	clrf	??_setPercentValue+1
 13153  0A14  09DC               	comf	??_setPercentValue,f
 13154  0A15  09DD               	comf	??_setPercentValue+1,f
 13155  0A16  0ADC               	incf	??_setPercentValue,f
 13156  0A17  1903               	skipnz
 13157  0A18  0ADD               	incf	??_setPercentValue+1,f
 13158  0A19  085C               	movf	??_setPercentValue,w
 13159  0A1A  3E40               	addlw	64
 13160  0A1B  00A8               	movwf	___awtoft@c
 13161  0A1C  3000               	movlw	0
 13162  0A1D  3D5D               	addwfc	??_setPercentValue+1,w
 13163  0A1E  00A9               	movwf	___awtoft@c+1
 13164  0A1F  3190  2079  3189   	fcall	___awtoft
 13165  0A22  0020               	movlb	0	; select bank0
 13166  0A23  0828               	movf	?___awtoft,w
 13167  0A24  00B1               	movwf	___ftdiv@f1
 13168  0A25  0829               	movf	?___awtoft+1,w
 13169  0A26  00B2               	movwf	___ftdiv@f1+1
 13170  0A27  082A               	movf	?___awtoft+2,w
 13171  0A28  00B3               	movwf	___ftdiv@f1+2
 13172  0A29  085F               	movf	setPercentValue@i,w
 13173  0A2A  00AE               	movwf	___ftdiv@f2
 13174  0A2B  0860               	movf	setPercentValue@i+1,w
 13175  0A2C  00AF               	movwf	___ftdiv@f2+1
 13176  0A2D  0861               	movf	setPercentValue@i+2,w
 13177  0A2E  00B0               	movwf	___ftdiv@f2+2
 13178  0A2F  318E  26A3  3189   	fcall	___ftdiv
 13179  0A32  0020               	movlb	0	; select bank0
 13180  0A33  082E               	movf	?___ftdiv,w
 13181  0A34  00BE               	movwf	___ftneg@f1
 13182  0A35  082F               	movf	?___ftdiv+1,w
 13183  0A36  00BF               	movwf	___ftneg@f1+1
 13184  0A37  0830               	movf	?___ftdiv+2,w
 13185  0A38  00C0               	movwf	___ftneg@f1+2
 13186  0A39  319C  2483  3189   	fcall	___ftneg
 13187  0A3C  0020               	movlb	0	; select bank0
 13188  0A3D  083E               	movf	?___ftneg,w
 13189  0A3E  00C4               	movwf	___ftadd@f2
 13190  0A3F  083F               	movf	?___ftneg+1,w
 13191  0A40  00C5               	movwf	___ftadd@f2+1
 13192  0A41  0840               	movf	?___ftneg+2,w
 13193  0A42  00C6               	movwf	___ftadd@f2+2
 13194  0A43  3000               	movlw	0
 13195  0A44  00C1               	movwf	___ftadd@f1
 13196  0A45  30C8               	movlw	200
 13197  0A46  00C2               	movwf	___ftadd@f1+1
 13198  0A47  3042               	movlw	66
 13199  0A48  00C3               	movwf	___ftadd@f1+2
 13200  0A49  3184  242D  3189   	fcall	___ftadd
 13201  0A4C  0020               	movlb	0	; select bank0
 13202  0A4D  0841               	movf	?___ftadd,w
 13203  0A4E  00CE               	movwf	___fttol@f1
 13204  0A4F  0842               	movf	?___ftadd+1,w
 13205  0A50  00CF               	movwf	___fttol@f1+1
 13206  0A51  0843               	movf	?___ftadd+2,w
 13207  0A52  00D0               	movwf	___fttol@f1+2
 13208  0A53  318C  24EE         	fcall	___fttol
 13209  0A55  0020               	movlb	0	; select bank0
 13210  0A56  084E               	movf	?___fttol,w
 13211  0A57  0008               	return
 13212  0A58                     __end_of_setPercentValue:	
 13213                           
 13214                           	psect	text78
 13215  0CEE                     __ptext78:	
 13216 ;; *************** function ___fttol *****************
 13217 ;; Defined at:
 13218 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;  f1              3   46[BANK0 ] float 
 13221 ;; Auto vars:     Size  Location     Type
 13222 ;;  lval            4   55[BANK0 ] unsigned long 
 13223 ;;  exp1            1   59[BANK0 ] unsigned char 
 13224 ;;  sign1           1   54[BANK0 ] unsigned char 
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  4   46[BANK0 ] long 
 13227 ;; Registers used:
 13228 ;;		wreg, status,2, status,0
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;Total ram usage:       14 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; Hardware stack levels required when called:    5
 13241 ;; This function calls:
 13242 ;;		Nothing
 13243 ;; This function is called by:
 13244 ;;		_getPercentValue
 13245 ;;		_setPercentValue
 13246 ;; This function uses a non-reentrant model
 13247 ;;
 13248                           
 13249                           
 13250                           ;psect for function ___fttol
 13251  0CEE                     ___fttol:	
 13252                           
 13253                           ;incstack = 0
 13254                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13255  0CEE  0020               	movlb	0	; select bank0
 13256  0CEF  084E               	movf	___fttol@f1,w
 13257  0CF0  00D2               	movwf	??___fttol
 13258  0CF1  084F               	movf	___fttol@f1+1,w
 13259  0CF2  00D3               	movwf	??___fttol+1
 13260  0CF3  0850               	movf	___fttol@f1+2,w
 13261  0CF4  00D4               	movwf	??___fttol+2
 13262  0CF5  1003               	clrc
 13263  0CF6  0D53               	rlf	??___fttol+1,w
 13264  0CF7  0D54               	rlf	??___fttol+2,w
 13265  0CF8  00D5               	movwf	??___fttol+3
 13266  0CF9  0855               	movf	??___fttol+3,w
 13267  0CFA  00DB               	movwf	___fttol@exp1
 13268  0CFB  08DB               	movf	___fttol@exp1,f
 13269  0CFC  1D03               	skipz
 13270  0CFD  2D07               	goto	l5597
 13271  0CFE  3000               	movlw	0
 13272  0CFF  00D1               	movwf	?___fttol+3
 13273  0D00  3000               	movlw	0
 13274  0D01  00D0               	movwf	?___fttol+2
 13275  0D02  3000               	movlw	0
 13276  0D03  00CF               	movwf	?___fttol+1
 13277  0D04  3000               	movlw	0
 13278  0D05  00CE               	movwf	?___fttol
 13279  0D06  0008               	return
 13280  0D07                     l5597:	
 13281  0D07  084E               	movf	___fttol@f1,w
 13282  0D08  00D2               	movwf	??___fttol
 13283  0D09  084F               	movf	___fttol@f1+1,w
 13284  0D0A  00D3               	movwf	??___fttol+1
 13285  0D0B  0850               	movf	___fttol@f1+2,w
 13286  0D0C  00D4               	movwf	??___fttol+2
 13287  0D0D  3017               	movlw	23
 13288  0D0E                     u4535:	
 13289  0D0E  36D4               	lsrf	??___fttol+2,f
 13290  0D0F  0CD3               	rrf	??___fttol+1,f
 13291  0D10  0CD2               	rrf	??___fttol,f
 13292  0D11  0B89               	decfsz	9,f
 13293  0D12  2D0E               	goto	u4535
 13294  0D13  0852               	movf	??___fttol,w
 13295  0D14  00D5               	movwf	??___fttol+3
 13296  0D15  0855               	movf	??___fttol+3,w
 13297  0D16  00D6               	movwf	___fttol@sign1
 13298  0D17  17CF               	bsf	___fttol@f1+1,7
 13299  0D18  30FF               	movlw	255
 13300  0D19  05CE               	andwf	___fttol@f1,f
 13301  0D1A  30FF               	movlw	255
 13302  0D1B  05CF               	andwf	___fttol@f1+1,f
 13303  0D1C  3000               	movlw	0
 13304  0D1D  05D0               	andwf	___fttol@f1+2,f
 13305  0D1E  084E               	movf	___fttol@f1,w
 13306  0D1F  00D7               	movwf	___fttol@lval
 13307  0D20  084F               	movf	___fttol@f1+1,w
 13308  0D21  00D8               	movwf	___fttol@lval+1
 13309  0D22  0850               	movf	___fttol@f1+2,w
 13310  0D23  00D9               	movwf	___fttol@lval+2
 13311  0D24  01DA               	clrf	___fttol@lval+3
 13312  0D25  308E               	movlw	142
 13313  0D26  02DB               	subwf	___fttol@exp1,f
 13314  0D27  1FDB               	btfss	___fttol@exp1,7
 13315  0D28  2D45               	goto	l5617
 13316  0D29  085B               	movf	___fttol@exp1,w
 13317  0D2A  3A80               	xorlw	128
 13318  0D2B  3E8F               	addlw	143
 13319  0D2C  1803               	skipnc
 13320  0D2D  2D37               	goto	l5615
 13321  0D2E  3000               	movlw	0
 13322  0D2F  00D1               	movwf	?___fttol+3
 13323  0D30  3000               	movlw	0
 13324  0D31  00D0               	movwf	?___fttol+2
 13325  0D32  3000               	movlw	0
 13326  0D33  00CF               	movwf	?___fttol+1
 13327  0D34  3000               	movlw	0
 13328  0D35  00CE               	movwf	?___fttol
 13329  0D36  0008               	return
 13330  0D37                     l5615:	
 13331  0D37  3001               	movlw	1
 13332  0D38                     u4565:	
 13333  0D38  36DA               	lsrf	___fttol@lval+3,f
 13334  0D39  0CD9               	rrf	___fttol@lval+2,f
 13335  0D3A  0CD8               	rrf	___fttol@lval+1,f
 13336  0D3B  0CD7               	rrf	___fttol@lval,f
 13337  0D3C  0B89               	decfsz	9,f
 13338  0D3D  2D38               	goto	u4565
 13339  0D3E  3001               	movlw	1
 13340  0D3F  00D2               	movwf	??___fttol
 13341  0D40  0852               	movf	??___fttol,w
 13342  0D41  07DB               	addwf	___fttol@exp1,f
 13343  0D42  1903               	btfsc	3,2
 13344  0D43  2D5E               	goto	l5627
 13345  0D44  2D37               	goto	l5615
 13346  0D45                     l5617:	
 13347  0D45  3018               	movlw	24
 13348  0D46  025B               	subwf	___fttol@exp1,w
 13349  0D47  1C03               	skipc
 13350  0D48  2D5B               	goto	l5625
 13351  0D49  3000               	movlw	0
 13352  0D4A  00D1               	movwf	?___fttol+3
 13353  0D4B  3000               	movlw	0
 13354  0D4C  00D0               	movwf	?___fttol+2
 13355  0D4D  3000               	movlw	0
 13356  0D4E  00CF               	movwf	?___fttol+1
 13357  0D4F  3000               	movlw	0
 13358  0D50  00CE               	movwf	?___fttol
 13359  0D51  0008               	return
 13360  0D52                     l5623:	
 13361  0D52  3001               	movlw	1
 13362  0D53                     u4595:	
 13363  0D53  35D7               	lslf	___fttol@lval,f
 13364  0D54  0DD8               	rlf	___fttol@lval+1,f
 13365  0D55  0DD9               	rlf	___fttol@lval+2,f
 13366  0D56  0DDA               	rlf	___fttol@lval+3,f
 13367  0D57  0B89               	decfsz	9,f
 13368  0D58  2D53               	goto	u4595
 13369  0D59  3001               	movlw	1
 13370  0D5A  02DB               	subwf	___fttol@exp1,f
 13371  0D5B                     l5625:	
 13372  0D5B  08DB               	movf	___fttol@exp1,f
 13373  0D5C  1D03               	skipz
 13374  0D5D  2D52               	goto	l5623
 13375  0D5E                     l5627:	
 13376  0D5E  0856               	movf	___fttol@sign1,w
 13377  0D5F  1903               	btfsc	3,2
 13378  0D60  2D6C               	goto	l5631
 13379  0D61  09D7               	comf	___fttol@lval,f
 13380  0D62  09D8               	comf	___fttol@lval+1,f
 13381  0D63  09D9               	comf	___fttol@lval+2,f
 13382  0D64  09DA               	comf	___fttol@lval+3,f
 13383  0D65  0AD7               	incf	___fttol@lval,f
 13384  0D66  1903               	skipnz
 13385  0D67  0AD8               	incf	___fttol@lval+1,f
 13386  0D68  1903               	skipnz
 13387  0D69  0AD9               	incf	___fttol@lval+2,f
 13388  0D6A  1903               	skipnz
 13389  0D6B  0ADA               	incf	___fttol@lval+3,f
 13390  0D6C                     l5631:	
 13391  0D6C  085A               	movf	___fttol@lval+3,w
 13392  0D6D  00D1               	movwf	?___fttol+3
 13393  0D6E  0859               	movf	___fttol@lval+2,w
 13394  0D6F  00D0               	movwf	?___fttol+2
 13395  0D70  0858               	movf	___fttol@lval+1,w
 13396  0D71  00CF               	movwf	?___fttol+1
 13397  0D72  0857               	movf	___fttol@lval,w
 13398  0D73  00CE               	movwf	?___fttol
 13399  0D74  0008               	return
 13400  0D75                     __end_of___fttol:	
 13401                           
 13402                           	psect	text79
 13403  1C83                     __ptext79:	
 13404 ;; *************** function ___ftneg *****************
 13405 ;; Defined at:
 13406 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  f1              3   30[BANK0 ] float 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;		None
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  3   30[BANK0 ] float 
 13413 ;; Registers used:
 13414 ;;		wreg
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13420 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;Total ram usage:        3 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; Hardware stack levels required when called:    5
 13427 ;; This function calls:
 13428 ;;		Nothing
 13429 ;; This function is called by:
 13430 ;;		_getPercentValue
 13431 ;;		_setPercentValue
 13432 ;; This function uses a non-reentrant model
 13433 ;;
 13434                           
 13435                           
 13436                           ;psect for function ___ftneg
 13437  1C83                     ___ftneg:	
 13438                           
 13439                           ;incstack = 0
 13440                           ; Regs used in ___ftneg: [wreg]
 13441  1C83  0020               	movlb	0	; select bank0
 13442  1C84  0840               	movf	___ftneg@f1+2,w
 13443  1C85  043F               	iorwf	___ftneg@f1+1,w
 13444  1C86  043E               	iorwf	___ftneg@f1,w
 13445  1C87  1903               	skipnz
 13446  1C88  0008               	return
 13447  1C89  3080               	movlw	128
 13448  1C8A  06C0               	xorwf	___ftneg@f1+2,f
 13449  1C8B  0008               	return
 13450  1C8C                     __end_of___ftneg:	
 13451                           
 13452                           	psect	text80
 13453  0EA3                     __ptext80:	
 13454 ;; *************** function ___ftdiv *****************
 13455 ;; Defined at:
 13456 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13457 ;; Parameters:    Size  Location     Type
 13458 ;;  f2              3   14[BANK0 ] float 
 13459 ;;  f1              3   17[BANK0 ] float 
 13460 ;; Auto vars:     Size  Location     Type
 13461 ;;  f3              3   25[BANK0 ] float 
 13462 ;;  sign            1   29[BANK0 ] unsigned char 
 13463 ;;  exp             1   28[BANK0 ] unsigned char 
 13464 ;;  cntr            1   24[BANK0 ] unsigned char 
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  3   14[BANK0 ] float 
 13467 ;; Registers used:
 13468 ;;		wreg, status,2, status,0, pclath, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 0/0
 13471 ;;		On exit  : 0/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13474 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;Total ram usage:       16 bytes
 13479 ;; Hardware stack levels used:    1
 13480 ;; Hardware stack levels required when called:    6
 13481 ;; This function calls:
 13482 ;;		___ftpack
 13483 ;; This function is called by:
 13484 ;;		_getPercentValue
 13485 ;;		_setPercentValue
 13486 ;; This function uses a non-reentrant model
 13487 ;;
 13488                           
 13489                           
 13490                           ;psect for function ___ftdiv
 13491  0EA3                     ___ftdiv:	
 13492                           
 13493                           ;incstack = 0
 13494                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13495  0EA3  0020               	movlb	0	; select bank0
 13496  0EA4  0831               	movf	___ftdiv@f1,w
 13497  0EA5  00B4               	movwf	??___ftdiv
 13498  0EA6  0832               	movf	___ftdiv@f1+1,w
 13499  0EA7  00B5               	movwf	??___ftdiv+1
 13500  0EA8  0833               	movf	___ftdiv@f1+2,w
 13501  0EA9  00B6               	movwf	??___ftdiv+2
 13502  0EAA  1003               	clrc
 13503  0EAB  0D35               	rlf	??___ftdiv+1,w
 13504  0EAC  0D36               	rlf	??___ftdiv+2,w
 13505  0EAD  00B7               	movwf	??___ftdiv+3
 13506  0EAE  0837               	movf	??___ftdiv+3,w
 13507  0EAF  00BC               	movwf	___ftdiv@exp
 13508  0EB0  08BC               	movf	___ftdiv@exp,f
 13509  0EB1  1D03               	skipz
 13510  0EB2  2EBA               	goto	l5497
 13511  0EB3  3000               	movlw	0
 13512  0EB4  00AE               	movwf	?___ftdiv
 13513  0EB5  3000               	movlw	0
 13514  0EB6  00AF               	movwf	?___ftdiv+1
 13515  0EB7  3000               	movlw	0
 13516  0EB8  00B0               	movwf	?___ftdiv+2
 13517  0EB9  0008               	return
 13518  0EBA                     l5497:	
 13519  0EBA  082E               	movf	___ftdiv@f2,w
 13520  0EBB  00B4               	movwf	??___ftdiv
 13521  0EBC  082F               	movf	___ftdiv@f2+1,w
 13522  0EBD  00B5               	movwf	??___ftdiv+1
 13523  0EBE  0830               	movf	___ftdiv@f2+2,w
 13524  0EBF  00B6               	movwf	??___ftdiv+2
 13525  0EC0  1003               	clrc
 13526  0EC1  0D35               	rlf	??___ftdiv+1,w
 13527  0EC2  0D36               	rlf	??___ftdiv+2,w
 13528  0EC3  00B7               	movwf	??___ftdiv+3
 13529  0EC4  0837               	movf	??___ftdiv+3,w
 13530  0EC5  00BD               	movwf	___ftdiv@sign
 13531  0EC6  08BD               	movf	___ftdiv@sign,f
 13532  0EC7  1D03               	skipz
 13533  0EC8  2ED0               	goto	l5503
 13534  0EC9  3000               	movlw	0
 13535  0ECA  00AE               	movwf	?___ftdiv
 13536  0ECB  3000               	movlw	0
 13537  0ECC  00AF               	movwf	?___ftdiv+1
 13538  0ECD  3000               	movlw	0
 13539  0ECE  00B0               	movwf	?___ftdiv+2
 13540  0ECF  0008               	return
 13541  0ED0                     l5503:	
 13542  0ED0  3000               	movlw	0
 13543  0ED1  00B9               	movwf	___ftdiv@f3
 13544  0ED2  3000               	movlw	0
 13545  0ED3  00BA               	movwf	___ftdiv@f3+1
 13546  0ED4  3000               	movlw	0
 13547  0ED5  00BB               	movwf	___ftdiv@f3+2
 13548  0ED6  3089               	movlw	137
 13549  0ED7  073D               	addwf	___ftdiv@sign,w
 13550  0ED8  00B4               	movwf	??___ftdiv
 13551  0ED9  0834               	movf	??___ftdiv,w
 13552  0EDA  02BC               	subwf	___ftdiv@exp,f
 13553  0EDB  0831               	movf	___ftdiv@f1,w
 13554  0EDC  00B4               	movwf	??___ftdiv
 13555  0EDD  0832               	movf	___ftdiv@f1+1,w
 13556  0EDE  00B5               	movwf	??___ftdiv+1
 13557  0EDF  0833               	movf	___ftdiv@f1+2,w
 13558  0EE0  00B6               	movwf	??___ftdiv+2
 13559  0EE1  3010               	movlw	16
 13560  0EE2                     u4335:	
 13561  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13562  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13563  0EE4  0CB4               	rrf	??___ftdiv,f
 13564  0EE5  0B89               	decfsz	9,f
 13565  0EE6  2EE2               	goto	u4335
 13566  0EE7  0834               	movf	??___ftdiv,w
 13567  0EE8  00B7               	movwf	??___ftdiv+3
 13568  0EE9  0837               	movf	??___ftdiv+3,w
 13569  0EEA  00BD               	movwf	___ftdiv@sign
 13570  0EEB  082E               	movf	___ftdiv@f2,w
 13571  0EEC  00B4               	movwf	??___ftdiv
 13572  0EED  082F               	movf	___ftdiv@f2+1,w
 13573  0EEE  00B5               	movwf	??___ftdiv+1
 13574  0EEF  0830               	movf	___ftdiv@f2+2,w
 13575  0EF0  00B6               	movwf	??___ftdiv+2
 13576  0EF1  3010               	movlw	16
 13577  0EF2                     u4345:	
 13578  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13579  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13580  0EF4  0CB4               	rrf	??___ftdiv,f
 13581  0EF5  0B89               	decfsz	9,f
 13582  0EF6  2EF2               	goto	u4345
 13583  0EF7  0834               	movf	??___ftdiv,w
 13584  0EF8  00B7               	movwf	??___ftdiv+3
 13585  0EF9  0837               	movf	??___ftdiv+3,w
 13586  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13587  0EFB  3080               	movlw	128
 13588  0EFC  00B4               	movwf	??___ftdiv
 13589  0EFD  0834               	movf	??___ftdiv,w
 13590  0EFE  05BD               	andwf	___ftdiv@sign,f
 13591  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13592  0F00  30FF               	movlw	255
 13593  0F01  05B1               	andwf	___ftdiv@f1,f
 13594  0F02  30FF               	movlw	255
 13595  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13596  0F04  3000               	movlw	0
 13597  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13598  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13599  0F07  30FF               	movlw	255
 13600  0F08  05AE               	andwf	___ftdiv@f2,f
 13601  0F09  30FF               	movlw	255
 13602  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13603  0F0B  3000               	movlw	0
 13604  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13605  0F0D  3018               	movlw	24
 13606  0F0E  00B4               	movwf	??___ftdiv
 13607  0F0F  0834               	movf	??___ftdiv,w
 13608  0F10  00B8               	movwf	___ftdiv@cntr
 13609  0F11                     l5517:	
 13610  0F11  3001               	movlw	1
 13611  0F12                     u4355:	
 13612  0F12  35B9               	lslf	___ftdiv@f3,f
 13613  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13614  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13615  0F15  0B89               	decfsz	9,f
 13616  0F16  2F12               	goto	u4355
 13617  0F17  0830               	movf	___ftdiv@f2+2,w
 13618  0F18  0233               	subwf	___ftdiv@f1+2,w
 13619  0F19  1D03               	skipz
 13620  0F1A  2F21               	goto	u4365
 13621  0F1B  082F               	movf	___ftdiv@f2+1,w
 13622  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13623  0F1D  1D03               	skipz
 13624  0F1E  2F21               	goto	u4365
 13625  0F1F  082E               	movf	___ftdiv@f2,w
 13626  0F20  0231               	subwf	___ftdiv@f1,w
 13627  0F21                     u4365:	
 13628  0F21  1C03               	skipc
 13629  0F22  2F2A               	goto	l5525
 13630  0F23  082E               	movf	___ftdiv@f2,w
 13631  0F24  02B1               	subwf	___ftdiv@f1,f
 13632  0F25  082F               	movf	___ftdiv@f2+1,w
 13633  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13634  0F27  0830               	movf	___ftdiv@f2+2,w
 13635  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13636  0F29  1439               	bsf	___ftdiv@f3,0
 13637  0F2A                     l5525:	
 13638  0F2A  3001               	movlw	1
 13639  0F2B                     u4375:	
 13640  0F2B  35B1               	lslf	___ftdiv@f1,f
 13641  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13642  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13643  0F2E  0B89               	decfsz	9,f
 13644  0F2F  2F2B               	goto	u4375
 13645  0F30  3001               	movlw	1
 13646  0F31  02B8               	subwf	___ftdiv@cntr,f
 13647  0F32  1D03               	btfss	3,2
 13648  0F33  2F11               	goto	l5517
 13649  0F34  0839               	movf	___ftdiv@f3,w
 13650  0F35  00A0               	movwf	___ftpack@arg
 13651  0F36  083A               	movf	___ftdiv@f3+1,w
 13652  0F37  00A1               	movwf	___ftpack@arg+1
 13653  0F38  083B               	movf	___ftdiv@f3+2,w
 13654  0F39  00A2               	movwf	___ftpack@arg+2
 13655  0F3A  083C               	movf	___ftdiv@exp,w
 13656  0F3B  00B4               	movwf	??___ftdiv
 13657  0F3C  0834               	movf	??___ftdiv,w
 13658  0F3D  00A3               	movwf	___ftpack@exp
 13659  0F3E  083D               	movf	___ftdiv@sign,w
 13660  0F3F  00B5               	movwf	??___ftdiv+1
 13661  0F40  0835               	movf	??___ftdiv+1,w
 13662  0F41  00A4               	movwf	___ftpack@sign
 13663  0F42  3189  2192         	fcall	___ftpack
 13664  0F44  0020               	movlb	0	; select bank0
 13665  0F45  0820               	movf	?___ftpack,w
 13666  0F46  00AE               	movwf	?___ftdiv
 13667  0F47  0821               	movf	?___ftpack+1,w
 13668  0F48  00AF               	movwf	?___ftdiv+1
 13669  0F49  0822               	movf	?___ftpack+2,w
 13670  0F4A  00B0               	movwf	?___ftdiv+2
 13671  0F4B  0008               	return
 13672  0F4C                     __end_of___ftdiv:	
 13673                           
 13674                           	psect	text81
 13675  042D                     __ptext81:	
 13676 ;; *************** function ___ftadd *****************
 13677 ;; Defined at:
 13678 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;  f1              3   33[BANK0 ] float 
 13681 ;;  f2              3   36[BANK0 ] float 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;  exp1            1   45[BANK0 ] unsigned char 
 13684 ;;  exp2            1   44[BANK0 ] unsigned char 
 13685 ;;  sign            1   43[BANK0 ] unsigned char 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  3   33[BANK0 ] float 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0, pclath, cstack
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:       13 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    6
 13702 ;; This function calls:
 13703 ;;		___ftpack
 13704 ;; This function is called by:
 13705 ;;		_getPercentValue
 13706 ;;		_setPercentValue
 13707 ;; This function uses a non-reentrant model
 13708 ;;
 13709                           
 13710                           
 13711                           ;psect for function ___ftadd
 13712  042D                     ___ftadd:	
 13713                           
 13714                           ;incstack = 0
 13715                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13716  042D  0020               	movlb	0	; select bank0
 13717  042E  0841               	movf	___ftadd@f1,w
 13718  042F  00C7               	movwf	??___ftadd
 13719  0430  0842               	movf	___ftadd@f1+1,w
 13720  0431  00C8               	movwf	??___ftadd+1
 13721  0432  0843               	movf	___ftadd@f1+2,w
 13722  0433  00C9               	movwf	??___ftadd+2
 13723  0434  1003               	clrc
 13724  0435  0D48               	rlf	??___ftadd+1,w
 13725  0436  0D49               	rlf	??___ftadd+2,w
 13726  0437  00CA               	movwf	??___ftadd+3
 13727  0438  084A               	movf	??___ftadd+3,w
 13728  0439  00CD               	movwf	___ftadd@exp1
 13729  043A  0844               	movf	___ftadd@f2,w
 13730  043B  00C7               	movwf	??___ftadd
 13731  043C  0845               	movf	___ftadd@f2+1,w
 13732  043D  00C8               	movwf	??___ftadd+1
 13733  043E  0846               	movf	___ftadd@f2+2,w
 13734  043F  00C9               	movwf	??___ftadd+2
 13735  0440  1003               	clrc
 13736  0441  0D48               	rlf	??___ftadd+1,w
 13737  0442  0D49               	rlf	??___ftadd+2,w
 13738  0443  00CA               	movwf	??___ftadd+3
 13739  0444  084A               	movf	??___ftadd+3,w
 13740  0445  00CC               	movwf	___ftadd@exp2
 13741  0446  084D               	movf	___ftadd@exp1,w
 13742  0447  1903               	btfsc	3,2
 13743  0448  2C55               	goto	l5427
 13744  0449  084C               	movf	___ftadd@exp2,w
 13745  044A  024D               	subwf	___ftadd@exp1,w
 13746  044B  1803               	skipnc
 13747  044C  2C5C               	goto	l5431
 13748  044D  034D               	decf	___ftadd@exp1,w
 13749  044E  3AFF               	xorlw	255
 13750  044F  074C               	addwf	___ftadd@exp2,w
 13751  0450  00C7               	movwf	??___ftadd
 13752  0451  3019               	movlw	25
 13753  0452  0247               	subwf	??___ftadd,w
 13754  0453  1C03               	skipc
 13755  0454  2C5C               	goto	l5431
 13756  0455                     l5427:	
 13757  0455  0844               	movf	___ftadd@f2,w
 13758  0456  00C1               	movwf	?___ftadd
 13759  0457  0845               	movf	___ftadd@f2+1,w
 13760  0458  00C2               	movwf	?___ftadd+1
 13761  0459  0846               	movf	___ftadd@f2+2,w
 13762  045A  00C3               	movwf	?___ftadd+2
 13763  045B  0008               	return
 13764  045C                     l5431:	
 13765  045C  084C               	movf	___ftadd@exp2,w
 13766  045D  1903               	btfsc	3,2
 13767  045E  0008               	return
 13768  045F  084D               	movf	___ftadd@exp1,w
 13769  0460  024C               	subwf	___ftadd@exp2,w
 13770  0461  1803               	skipnc
 13771  0462  2C6B               	goto	l5437
 13772  0463  034C               	decf	___ftadd@exp2,w
 13773  0464  3AFF               	xorlw	255
 13774  0465  074D               	addwf	___ftadd@exp1,w
 13775  0466  00C7               	movwf	??___ftadd
 13776  0467  3019               	movlw	25
 13777  0468  0247               	subwf	??___ftadd,w
 13778  0469  1803               	btfsc	3,0
 13779  046A  0008               	return
 13780  046B                     l5437:	
 13781  046B  3006               	movlw	6
 13782  046C  00C7               	movwf	??___ftadd
 13783  046D  0847               	movf	??___ftadd,w
 13784  046E  00CB               	movwf	___ftadd@sign
 13785  046F  1BC3               	btfsc	___ftadd@f1+2,7
 13786  0470  17CB               	bsf	___ftadd@sign,7
 13787  0471  1BC6               	btfsc	___ftadd@f2+2,7
 13788  0472  174B               	bsf	___ftadd@sign,6
 13789  0473  17C2               	bsf	___ftadd@f1+1,7
 13790  0474  30FF               	movlw	255
 13791  0475  05C1               	andwf	___ftadd@f1,f
 13792  0476  30FF               	movlw	255
 13793  0477  05C2               	andwf	___ftadd@f1+1,f
 13794  0478  3000               	movlw	0
 13795  0479  05C3               	andwf	___ftadd@f1+2,f
 13796  047A  17C5               	bsf	___ftadd@f2+1,7
 13797  047B  30FF               	movlw	255
 13798  047C  05C4               	andwf	___ftadd@f2,f
 13799  047D  30FF               	movlw	255
 13800  047E  05C5               	andwf	___ftadd@f2+1,f
 13801  047F  3000               	movlw	0
 13802  0480  05C6               	andwf	___ftadd@f2+2,f
 13803  0481  084C               	movf	___ftadd@exp2,w
 13804  0482  024D               	subwf	___ftadd@exp1,w
 13805  0483  1803               	skipnc
 13806  0484  2CA7               	goto	l5459
 13807  0485                     l5449:	
 13808  0485  3001               	movlw	1
 13809  0486                     u4175:	
 13810  0486  35C4               	lslf	___ftadd@f2,f
 13811  0487  0DC5               	rlf	___ftadd@f2+1,f
 13812  0488  0DC6               	rlf	___ftadd@f2+2,f
 13813  0489  0B89               	decfsz	9,f
 13814  048A  2C86               	goto	u4175
 13815  048B  3001               	movlw	1
 13816  048C  02CC               	subwf	___ftadd@exp2,f
 13817  048D  084C               	movf	___ftadd@exp2,w
 13818  048E  064D               	xorwf	___ftadd@exp1,w
 13819  048F  1903               	skipnz
 13820  0490  2CA2               	goto	l5457
 13821  0491  3001               	movlw	1
 13822  0492  02CB               	subwf	___ftadd@sign,f
 13823  0493  084B               	movf	___ftadd@sign,w
 13824  0494  3907               	andlw	7
 13825  0495  1903               	btfsc	3,2
 13826  0496  2CA2               	goto	l5457
 13827  0497  2C85               	goto	l5449
 13828  0498                     l5455:	
 13829  0498  3001               	movlw	1
 13830  0499                     u4205:	
 13831  0499  36C3               	lsrf	___ftadd@f1+2,f
 13832  049A  0CC2               	rrf	___ftadd@f1+1,f
 13833  049B  0CC1               	rrf	___ftadd@f1,f
 13834  049C  0B89               	decfsz	9,f
 13835  049D  2C99               	goto	u4205
 13836  049E  3001               	movlw	1
 13837  049F  00C7               	movwf	??___ftadd
 13838  04A0  0847               	movf	??___ftadd,w
 13839  04A1  07CD               	addwf	___ftadd@exp1,f
 13840  04A2                     l5457:	
 13841  04A2  084D               	movf	___ftadd@exp1,w
 13842  04A3  064C               	xorwf	___ftadd@exp2,w
 13843  04A4  1903               	btfsc	3,2
 13844  04A5  2CCC               	goto	l2684
 13845  04A6  2C98               	goto	l5455
 13846  04A7                     l5459:	
 13847  04A7  084D               	movf	___ftadd@exp1,w
 13848  04A8  024C               	subwf	___ftadd@exp2,w
 13849  04A9  1803               	skipnc
 13850  04AA  2CCC               	goto	l2684
 13851  04AB                     l5461:	
 13852  04AB  3001               	movlw	1
 13853  04AC                     u4235:	
 13854  04AC  35C1               	lslf	___ftadd@f1,f
 13855  04AD  0DC2               	rlf	___ftadd@f1+1,f
 13856  04AE  0DC3               	rlf	___ftadd@f1+2,f
 13857  04AF  0B89               	decfsz	9,f
 13858  04B0  2CAC               	goto	u4235
 13859  04B1  3001               	movlw	1
 13860  04B2  02CD               	subwf	___ftadd@exp1,f
 13861  04B3  084C               	movf	___ftadd@exp2,w
 13862  04B4  064D               	xorwf	___ftadd@exp1,w
 13863  04B5  1903               	skipnz
 13864  04B6  2CC8               	goto	l5469
 13865  04B7  3001               	movlw	1
 13866  04B8  02CB               	subwf	___ftadd@sign,f
 13867  04B9  084B               	movf	___ftadd@sign,w
 13868  04BA  3907               	andlw	7
 13869  04BB  1903               	btfsc	3,2
 13870  04BC  2CC8               	goto	l5469
 13871  04BD  2CAB               	goto	l5461
 13872  04BE                     l5467:	
 13873  04BE  3001               	movlw	1
 13874  04BF                     u4265:	
 13875  04BF  36C6               	lsrf	___ftadd@f2+2,f
 13876  04C0  0CC5               	rrf	___ftadd@f2+1,f
 13877  04C1  0CC4               	rrf	___ftadd@f2,f
 13878  04C2  0B89               	decfsz	9,f
 13879  04C3  2CBF               	goto	u4265
 13880  04C4  3001               	movlw	1
 13881  04C5  00C7               	movwf	??___ftadd
 13882  04C6  0847               	movf	??___ftadd,w
 13883  04C7  07CC               	addwf	___ftadd@exp2,f
 13884  04C8                     l5469:	
 13885  04C8  084D               	movf	___ftadd@exp1,w
 13886  04C9  064C               	xorwf	___ftadd@exp2,w
 13887  04CA  1D03               	skipz
 13888  04CB  2CBE               	goto	l5467
 13889  04CC                     l2684:	
 13890  04CC  1FCB               	btfss	___ftadd@sign,7
 13891  04CD  2CDE               	goto	l5473
 13892  04CE  30FF               	movlw	255
 13893  04CF  06C1               	xorwf	___ftadd@f1,f
 13894  04D0  30FF               	movlw	255
 13895  04D1  06C2               	xorwf	___ftadd@f1+1,f
 13896  04D2  30FF               	movlw	255
 13897  04D3  06C3               	xorwf	___ftadd@f1+2,f
 13898  04D4  3001               	movlw	1
 13899  04D5  07C1               	addwf	___ftadd@f1,f
 13900  04D6  3000               	movlw	0
 13901  04D7  1803               	skipnc
 13902  04D8  3001               	movlw	1
 13903  04D9  07C2               	addwf	___ftadd@f1+1,f
 13904  04DA  3000               	movlw	0
 13905  04DB  1803               	skipnc
 13906  04DC  3001               	movlw	1
 13907  04DD  07C3               	addwf	___ftadd@f1+2,f
 13908  04DE                     l5473:	
 13909  04DE  1F4B               	btfss	___ftadd@sign,6
 13910  04DF  2CF0               	goto	l5477
 13911  04E0  30FF               	movlw	255
 13912  04E1  06C4               	xorwf	___ftadd@f2,f
 13913  04E2  30FF               	movlw	255
 13914  04E3  06C5               	xorwf	___ftadd@f2+1,f
 13915  04E4  30FF               	movlw	255
 13916  04E5  06C6               	xorwf	___ftadd@f2+2,f
 13917  04E6  3001               	movlw	1
 13918  04E7  07C4               	addwf	___ftadd@f2,f
 13919  04E8  3000               	movlw	0
 13920  04E9  1803               	skipnc
 13921  04EA  3001               	movlw	1
 13922  04EB  07C5               	addwf	___ftadd@f2+1,f
 13923  04EC  3000               	movlw	0
 13924  04ED  1803               	skipnc
 13925  04EE  3001               	movlw	1
 13926  04EF  07C6               	addwf	___ftadd@f2+2,f
 13927  04F0                     l5477:	
 13928  04F0  01CB               	clrf	___ftadd@sign
 13929  04F1  0841               	movf	___ftadd@f1,w
 13930  04F2  07C4               	addwf	___ftadd@f2,f
 13931  04F3  0842               	movf	___ftadd@f1+1,w
 13932  04F4  3DC5               	addwfc	___ftadd@f2+1,f
 13933  04F5  0843               	movf	___ftadd@f1+2,w
 13934  04F6  3DC6               	addwfc	___ftadd@f2+2,f
 13935  04F7  1FC6               	btfss	___ftadd@f2+2,7
 13936  04F8  2D0B               	goto	l5487
 13937  04F9  30FF               	movlw	255
 13938  04FA  06C4               	xorwf	___ftadd@f2,f
 13939  04FB  30FF               	movlw	255
 13940  04FC  06C5               	xorwf	___ftadd@f2+1,f
 13941  04FD  30FF               	movlw	255
 13942  04FE  06C6               	xorwf	___ftadd@f2+2,f
 13943  04FF  3001               	movlw	1
 13944  0500  07C4               	addwf	___ftadd@f2,f
 13945  0501  3000               	movlw	0
 13946  0502  1803               	skipnc
 13947  0503  3001               	movlw	1
 13948  0504  07C5               	addwf	___ftadd@f2+1,f
 13949  0505  3000               	movlw	0
 13950  0506  1803               	skipnc
 13951  0507  3001               	movlw	1
 13952  0508  07C6               	addwf	___ftadd@f2+2,f
 13953  0509  01CB               	clrf	___ftadd@sign
 13954  050A  0ACB               	incf	___ftadd@sign,f
 13955  050B                     l5487:	
 13956  050B  0844               	movf	___ftadd@f2,w
 13957  050C  00A0               	movwf	___ftpack@arg
 13958  050D  0845               	movf	___ftadd@f2+1,w
 13959  050E  00A1               	movwf	___ftpack@arg+1
 13960  050F  0846               	movf	___ftadd@f2+2,w
 13961  0510  00A2               	movwf	___ftpack@arg+2
 13962  0511  084D               	movf	___ftadd@exp1,w
 13963  0512  00C7               	movwf	??___ftadd
 13964  0513  0847               	movf	??___ftadd,w
 13965  0514  00A3               	movwf	___ftpack@exp
 13966  0515  084B               	movf	___ftadd@sign,w
 13967  0516  00C8               	movwf	??___ftadd+1
 13968  0517  0848               	movf	??___ftadd+1,w
 13969  0518  00A4               	movwf	___ftpack@sign
 13970  0519  3189  2192         	fcall	___ftpack
 13971  051B  0020               	movlb	0	; select bank0
 13972  051C  0820               	movf	?___ftpack,w
 13973  051D  00C1               	movwf	?___ftadd
 13974  051E  0821               	movf	?___ftpack+1,w
 13975  051F  00C2               	movwf	?___ftadd+1
 13976  0520  0822               	movf	?___ftpack+2,w
 13977  0521  00C3               	movwf	?___ftadd+2
 13978  0522  0008               	return
 13979  0523                     __end_of___ftadd:	
 13980                           
 13981                           	psect	text82
 13982  1079                     __ptext82:	
 13983 ;; *************** function ___awtoft *****************
 13984 ;; Defined at:
 13985 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  c               2    8[BANK0 ] int 
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;  sign            1   13[BANK0 ] unsigned char 
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  3    8[BANK0 ] float 
 13992 ;; Registers used:
 13993 ;;		wreg, status,2, status,0, pclath, cstack
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        6 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    6
 14006 ;; This function calls:
 14007 ;;		___ftpack
 14008 ;; This function is called by:
 14009 ;;		_getPercentValue
 14010 ;;		_setPercentValue
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function ___awtoft
 14016  1079                     ___awtoft:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14020  1079  0020               	movlb	0	; select bank0
 14021  107A  01AD               	clrf	___awtoft@sign
 14022  107B  1FA9               	btfss	___awtoft@c+1,7
 14023  107C  2884               	goto	l5415
 14024  107D  09A8               	comf	___awtoft@c,f
 14025  107E  09A9               	comf	___awtoft@c+1,f
 14026  107F  0AA8               	incf	___awtoft@c,f
 14027  1080  1903               	skipnz
 14028  1081  0AA9               	incf	___awtoft@c+1,f
 14029  1082  01AD               	clrf	___awtoft@sign
 14030  1083  0AAD               	incf	___awtoft@sign,f
 14031  1084                     l5415:	
 14032  1084  0828               	movf	___awtoft@c,w
 14033  1085  00A0               	movwf	___ftpack@arg
 14034  1086  0829               	movf	___awtoft@c+1,w
 14035  1087  00A1               	movwf	___ftpack@arg+1
 14036  1088  01A2               	clrf	___ftpack@arg+2
 14037  1089  308E               	movlw	142
 14038  108A  00AB               	movwf	??___awtoft
 14039  108B  082B               	movf	??___awtoft,w
 14040  108C  00A3               	movwf	___ftpack@exp
 14041  108D  082D               	movf	___awtoft@sign,w
 14042  108E  00AC               	movwf	??___awtoft+1
 14043  108F  082C               	movf	??___awtoft+1,w
 14044  1090  00A4               	movwf	___ftpack@sign
 14045  1091  3189  2192         	fcall	___ftpack
 14046  1093  0020               	movlb	0	; select bank0
 14047  1094  0820               	movf	?___ftpack,w
 14048  1095  00A8               	movwf	?___awtoft
 14049  1096  0821               	movf	?___ftpack+1,w
 14050  1097  00A9               	movwf	?___awtoft+1
 14051  1098  0822               	movf	?___ftpack+2,w
 14052  1099  00AA               	movwf	?___awtoft+2
 14053  109A  0008               	return
 14054  109B                     __end_of___awtoft:	
 14055                           
 14056                           	psect	text83
 14057  0992                     __ptext83:	
 14058 ;; *************** function ___ftpack *****************
 14059 ;; Defined at:
 14060 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  arg             3    0[BANK0 ] unsigned um
 14063 ;;  exp             1    3[BANK0 ] unsigned char 
 14064 ;;  sign            1    4[BANK0 ] unsigned char 
 14065 ;; Auto vars:     Size  Location     Type
 14066 ;;		None
 14067 ;; Return value:  Size  Location     Type
 14068 ;;                  3    0[BANK0 ] float 
 14069 ;; Registers used:
 14070 ;;		wreg, status,2, status,0
 14071 ;; Tracked objects:
 14072 ;;		On entry : 0/0
 14073 ;;		On exit  : 0/0
 14074 ;;		Unchanged: 0/0
 14075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14076 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;Total ram usage:        8 bytes
 14081 ;; Hardware stack levels used:    1
 14082 ;; Hardware stack levels required when called:    5
 14083 ;; This function calls:
 14084 ;;		Nothing
 14085 ;; This function is called by:
 14086 ;;		___awtoft
 14087 ;;		___ftadd
 14088 ;;		___ftdiv
 14089 ;;		___ftmul
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           
 14094                           ;psect for function ___ftpack
 14095  0992                     ___ftpack:	
 14096                           
 14097                           ;incstack = 0
 14098                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14099  0992  0020               	movlb	0	; select bank0
 14100  0993  0823               	movf	___ftpack@exp,w
 14101  0994  1903               	btfsc	3,2
 14102  0995  299B               	goto	l5365
 14103  0996  0822               	movf	___ftpack@arg+2,w
 14104  0997  0421               	iorwf	___ftpack@arg+1,w
 14105  0998  0420               	iorwf	___ftpack@arg,w
 14106  0999  1D03               	skipz
 14107  099A  29AC               	goto	l5371
 14108  099B                     l5365:	
 14109  099B  3000               	movlw	0
 14110  099C  00A0               	movwf	?___ftpack
 14111  099D  3000               	movlw	0
 14112  099E  00A1               	movwf	?___ftpack+1
 14113  099F  3000               	movlw	0
 14114  09A0  00A2               	movwf	?___ftpack+2
 14115  09A1  0008               	return
 14116  09A2                     l5369:	
 14117  09A2  3001               	movlw	1
 14118  09A3  00A5               	movwf	??___ftpack
 14119  09A4  0825               	movf	??___ftpack,w
 14120  09A5  07A3               	addwf	___ftpack@exp,f
 14121  09A6  3001               	movlw	1
 14122  09A7                     u3965:	
 14123  09A7  36A2               	lsrf	___ftpack@arg+2,f
 14124  09A8  0CA1               	rrf	___ftpack@arg+1,f
 14125  09A9  0CA0               	rrf	___ftpack@arg,f
 14126  09AA  0B89               	decfsz	9,f
 14127  09AB  29A7               	goto	u3965
 14128  09AC                     l5371:	
 14129  09AC  30FE               	movlw	254
 14130  09AD  0522               	andwf	___ftpack@arg+2,w
 14131  09AE  1903               	btfsc	3,2
 14132  09AF  29C5               	goto	l2655
 14133  09B0  29A2               	goto	l5369
 14134  09B1                     l5373:	
 14135  09B1  3001               	movlw	1
 14136  09B2  00A5               	movwf	??___ftpack
 14137  09B3  0825               	movf	??___ftpack,w
 14138  09B4  07A3               	addwf	___ftpack@exp,f
 14139  09B5  3001               	movlw	1
 14140  09B6  07A0               	addwf	___ftpack@arg,f
 14141  09B7  3000               	movlw	0
 14142  09B8  1803               	skipnc
 14143  09B9  3001               	movlw	1
 14144  09BA  07A1               	addwf	___ftpack@arg+1,f
 14145  09BB  3000               	movlw	0
 14146  09BC  1803               	skipnc
 14147  09BD  3001               	movlw	1
 14148  09BE  07A2               	addwf	___ftpack@arg+2,f
 14149  09BF  3001               	movlw	1
 14150  09C0                     u3985:	
 14151  09C0  36A2               	lsrf	___ftpack@arg+2,f
 14152  09C1  0CA1               	rrf	___ftpack@arg+1,f
 14153  09C2  0CA0               	rrf	___ftpack@arg,f
 14154  09C3  0B89               	decfsz	9,f
 14155  09C4  29C0               	goto	u3985
 14156  09C5                     l2655:	
 14157  09C5  30FF               	movlw	255
 14158  09C6  0522               	andwf	___ftpack@arg+2,w
 14159  09C7  1903               	btfsc	3,2
 14160  09C8  29D2               	goto	l5381
 14161  09C9  29B1               	goto	l5373
 14162  09CA                     l5379:	
 14163  09CA  3001               	movlw	1
 14164  09CB  02A3               	subwf	___ftpack@exp,f
 14165  09CC  3001               	movlw	1
 14166  09CD                     u4005:	
 14167  09CD  35A0               	lslf	___ftpack@arg,f
 14168  09CE  0DA1               	rlf	___ftpack@arg+1,f
 14169  09CF  0DA2               	rlf	___ftpack@arg+2,f
 14170  09D0  0B89               	decfsz	9,f
 14171  09D1  29CD               	goto	u4005
 14172  09D2                     l5381:	
 14173  09D2  1FA1               	btfss	___ftpack@arg+1,7
 14174  09D3  29CA               	goto	l5379
 14175  09D4  1823               	btfsc	___ftpack@exp,0
 14176  09D5  29DC               	goto	l2661
 14177  09D6  30FF               	movlw	255
 14178  09D7  05A0               	andwf	___ftpack@arg,f
 14179  09D8  307F               	movlw	127
 14180  09D9  05A1               	andwf	___ftpack@arg+1,f
 14181  09DA  30FF               	movlw	255
 14182  09DB  05A2               	andwf	___ftpack@arg+2,f
 14183  09DC                     l2661:	
 14184  09DC  1003               	clrc
 14185  09DD  0CA3               	rrf	___ftpack@exp,f
 14186  09DE  0823               	movf	___ftpack@exp,w
 14187  09DF  00A5               	movwf	??___ftpack
 14188  09E0  01A6               	clrf	??___ftpack+1
 14189  09E1  01A7               	clrf	??___ftpack+2
 14190  09E2  3010               	movlw	16
 14191  09E3                     u4035:	
 14192  09E3  35A5               	lslf	??___ftpack,f
 14193  09E4  0DA6               	rlf	??___ftpack+1,f
 14194  09E5  0DA7               	rlf	??___ftpack+2,f
 14195  09E6  0B89               	decfsz	9,f
 14196  09E7  29E3               	goto	u4035
 14197  09E8  0825               	movf	??___ftpack,w
 14198  09E9  04A0               	iorwf	___ftpack@arg,f
 14199  09EA  0826               	movf	??___ftpack+1,w
 14200  09EB  04A1               	iorwf	___ftpack@arg+1,f
 14201  09EC  0827               	movf	??___ftpack+2,w
 14202  09ED  04A2               	iorwf	___ftpack@arg+2,f
 14203  09EE  0824               	movf	___ftpack@sign,w
 14204  09EF  1903               	btfsc	3,2
 14205  09F0  0008               	return
 14206  09F1  17A2               	bsf	___ftpack@arg+2,7
 14207  09F2  0008               	return
 14208  09F3                     __end_of___ftpack:	
 14209                           
 14210                           	psect	text84
 14211  132D                     __ptext84:	
 14212 ;; *************** function _setLED *****************
 14213 ;; Defined at:
 14214 ;;		line 76 in file "../src/LED_B1.c"
 14215 ;; Parameters:    Size  Location     Type
 14216 ;;  led             1    wreg     unsigned char 
 14217 ;;  command         1    2[BANK0 ] unsigned char 
 14218 ;; Auto vars:     Size  Location     Type
 14219 ;;  led             1    3[BANK0 ] unsigned char 
 14220 ;; Return value:  Size  Location     Type
 14221 ;;		None               void
 14222 ;; Registers used:
 14223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14224 ;; Tracked objects:
 14225 ;;		On entry : 0/0
 14226 ;;		On exit  : 0/0
 14227 ;;		Unchanged: 0/0
 14228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14229 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;Total ram usage:        2 bytes
 14234 ;; Hardware stack levels used:    1
 14235 ;; Hardware stack levels required when called:    6
 14236 ;; This function calls:
 14237 ;;		_LedPointSelect
 14238 ;; This function is called by:
 14239 ;;		_setDimmerLights
 14240 ;;		_setLED_Initialization
 14241 ;;		_setMain_Exception
 14242 ;;		_setSw_Initialization
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           
 14247                           ;psect for function _setLED
 14248  132D                     _setLED:	
 14249                           
 14250                           ;incstack = 0
 14251                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14252                           ;setLED@led stored from wreg
 14253  132D  0020               	movlb	0	; select bank0
 14254  132E  00A3               	movwf	setLED@led
 14255                           
 14256                           ;LED_B1.c: 77: LedPointSelect(led);
 14257  132F  0823               	movf	setLED@led,w
 14258  1330  319C  24D3  3193   	fcall	_LedPointSelect
 14259                           
 14260                           ;LED_B1.c: 78: if (command == 0) {
 14261  1333  0020               	movlb	0	; select bank0
 14262  1334  08A2               	movf	setLED@command,f
 14263  1335  1D03               	skipz
 14264  1336  2B3C               	goto	l6101
 14265                           
 14266                           ;LED_B1.c: 107: if (led == 99) {
 14267  1337  0823               	movf	setLED@led,w
 14268  1338  3A63               	xorlw	99
 14269  1339  1D03               	skipz
 14270  133A  2B3C               	goto	l6101
 14271                           
 14272                           ;LED_B1.c: 111: RB5 = 1;
 14273  133B  168D               	bsf	13,5	;volatile
 14274  133C                     l6101:	
 14275                           
 14276                           ;LED_B1.c: 113: }
 14277                           ;LED_B1.c: 115: }
 14278                           ;LED_B1.c: 116: if (command == 1) {
 14279  133C  0822               	movf	setLED@command,w
 14280  133D  3A01               	xorlw	1
 14281  133E  1D03               	skipz
 14282  133F  2B45               	goto	l6107
 14283                           
 14284                           ;LED_B1.c: 145: if (led == 99) {
 14285  1340  0823               	movf	setLED@led,w
 14286  1341  3A63               	xorlw	99
 14287  1342  1D03               	skipz
 14288  1343  2B45               	goto	l6107
 14289                           
 14290                           ;LED_B1.c: 149: RB5 = 0;
 14291  1344  128D               	bcf	13,5	;volatile
 14292  1345                     l6107:	
 14293                           
 14294                           ;LED_B1.c: 151: }
 14295                           ;LED_B1.c: 153: }
 14296                           ;LED_B1.c: 154: if (command == 10) {
 14297  1345  0822               	movf	setLED@command,w
 14298  1346  3A0A               	xorlw	10
 14299  1347  1D03               	skipz
 14300  1348  2B59               	goto	l6115
 14301                           
 14302                           ;LED_B1.c: 155: LED->GO = 0;
 14303  1349  087A               	movf	_LED,w
 14304  134A  0086               	movwf	6
 14305  134B  3001               	movlw	1	; select bank2/3
 14306  134C  0087               	movwf	7
 14307  134D  1081               	bcf	1,1
 14308                           
 14309                           ;LED_B1.c: 156: LED->Time = 0;
 14310  134E  0A7A               	incf	_LED,w
 14311  134F  0086               	movwf	6
 14312  1350  3001               	movlw	1	; select bank2/3
 14313  1351  0087               	movwf	7
 14314  1352  3000               	movlw	0
 14315  1353  3FC0               	movwi [0]fsr1
 14316  1354  3FC1               	movwi [1]fsr1
 14317                           
 14318                           ;LED_B1.c: 185: if (led == 99) {
 14319  1355  0823               	movf	setLED@led,w
 14320  1356  3A63               	xorlw	99
 14321  1357  1903               	btfsc	3,2
 14322                           
 14323                           ;LED_B1.c: 189: RB5 = 1;
 14324  1358  168D               	bsf	13,5	;volatile
 14325  1359                     l6115:	
 14326                           
 14327                           ;LED_B1.c: 191: }
 14328                           ;LED_B1.c: 193: }
 14329                           ;LED_B1.c: 194: if (command == 11) {
 14330  1359  0822               	movf	setLED@command,w
 14331  135A  3A0B               	xorlw	11
 14332  135B  1D03               	skipz
 14333  135C  0008               	return
 14334                           
 14335                           ;LED_B1.c: 195: LED->GO = 1;
 14336  135D  087A               	movf	_LED,w
 14337  135E  0086               	movwf	6
 14338  135F  3001               	movlw	1	; select bank2/3
 14339  1360  0087               	movwf	7
 14340  1361  1481               	bsf	1,1
 14341  1362  0008               	return
 14342  1363                     __end_of_setLED:	
 14343                           
 14344                           	psect	text85
 14345  1CD3                     __ptext85:	
 14346 ;; *************** function _LedPointSelect *****************
 14347 ;; Defined at:
 14348 ;;		line 7 in file "../src/LED_B1.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;  led             1    wreg     unsigned char 
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  led             1    1[BANK0 ] unsigned char 
 14353 ;; Return value:  Size  Location     Type
 14354 ;;		None               void
 14355 ;; Registers used:
 14356 ;;		wreg
 14357 ;; Tracked objects:
 14358 ;;		On entry : 0/0
 14359 ;;		On exit  : 0/0
 14360 ;;		Unchanged: 0/0
 14361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14366 ;;Total ram usage:        2 bytes
 14367 ;; Hardware stack levels used:    1
 14368 ;; Hardware stack levels required when called:    5
 14369 ;; This function calls:
 14370 ;;		Nothing
 14371 ;; This function is called by:
 14372 ;;		_setLED_Initialization
 14373 ;;		_setLED
 14374 ;;		_setLED_Main
 14375 ;; This function uses a non-reentrant model
 14376 ;;
 14377                           
 14378                           
 14379                           ;psect for function _LedPointSelect
 14380  1CD3                     _LedPointSelect:	
 14381                           
 14382                           ;incstack = 0
 14383                           ; Regs used in _LedPointSelect: [wreg]
 14384                           ;LedPointSelect@led stored from wreg
 14385  1CD3  0020               	movlb	0	; select bank0
 14386  1CD4  00A1               	movwf	LedPointSelect@led
 14387                           
 14388                           ;LED_B1.c: 24: if (led == 99) {
 14389  1CD5  0821               	movf	LedPointSelect@led,w
 14390  1CD6  3A63               	xorlw	99
 14391  1CD7  1D03               	skipz
 14392  1CD8  0008               	return
 14393                           
 14394                           ;LED_B1.c: 25: LED = &VarErrLED;
 14395  1CD9  30E2               	movlw	_VarErrLED& (0+255)
 14396  1CDA  00A0               	movwf	??_LedPointSelect
 14397  1CDB  0820               	movf	??_LedPointSelect,w
 14398  1CDC  00FA               	movwf	_LED
 14399  1CDD  0008               	return
 14400  1CDE                     __end_of_LedPointSelect:	
 14401                           
 14402                           	psect	text86
 14403  1D16                     __ptext86:	
 14404 ;; *************** function _setDimmerLights_Line *****************
 14405 ;; Defined at:
 14406 ;;		line 679 in file "../src/Dimmer_B1.c"
 14407 ;; Parameters:    Size  Location     Type
 14408 ;;  lights          1    wreg     unsigned char 
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;  lights          1    0[BANK0 ] unsigned char 
 14411 ;; Return value:  Size  Location     Type
 14412 ;;		None               void
 14413 ;; Registers used:
 14414 ;;		wreg
 14415 ;; Tracked objects:
 14416 ;;		On entry : 0/0
 14417 ;;		On exit  : 0/0
 14418 ;;		Unchanged: 0/0
 14419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;Total ram usage:        1 bytes
 14425 ;; Hardware stack levels used:    1
 14426 ;; Hardware stack levels required when called:    5
 14427 ;; This function calls:
 14428 ;;		Nothing
 14429 ;; This function is called by:
 14430 ;;		_setDimmerLights
 14431 ;; This function uses a non-reentrant model
 14432 ;;
 14433                           
 14434                           
 14435                           ;psect for function _setDimmerLights_Line
 14436  1D16                     _setDimmerLights_Line:	
 14437                           
 14438                           ;incstack = 0
 14439                           ; Regs used in _setDimmerLights_Line: [wreg]
 14440                           ;setDimmerLights_Line@lights stored from wreg
 14441  1D16  0020               	movlb	0	; select bank0
 14442  1D17  00A0               	movwf	setDimmerLights_Line@lights
 14443                           
 14444                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 14445  1D18  0023               	movlb	3	; select bank3
 14446  1D19  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14447                           
 14448                           ;Dimmer_B1.c: 690: if (lights == 1) {
 14449  1D1A  0020               	movlb	0	; select bank0
 14450  1D1B  0820               	movf	setDimmerLights_Line@lights,w
 14451  1D1C  3A01               	xorlw	1
 14452  1D1D  1D03               	skipz
 14453  1D1E  0008               	return
 14454                           
 14455                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 14456  1D1F  0023               	movlb	3	; select bank3
 14457  1D20  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14458  1D21  0008               	return
 14459  1D22                     __end_of_setDimmerLights_Line:	
 14460                           
 14461                           	psect	text87
 14462  1292                     __ptext87:	
 14463 ;; *************** function _getMain_All_Error_Status *****************
 14464 ;; Defined at:
 14465 ;;		line 365 in file "../src/Main_B1.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;  command         1    wreg     unsigned char 
 14468 ;; Auto vars:     Size  Location     Type
 14469 ;;  command         1    5[BANK0 ] unsigned char 
 14470 ;;  status          1    6[BANK0 ] unsigned char 
 14471 ;; Return value:  Size  Location     Type
 14472 ;;                  1    wreg      unsigned char 
 14473 ;; Registers used:
 14474 ;;		wreg, status,2, status,0
 14475 ;; Tracked objects:
 14476 ;;		On entry : 0/0
 14477 ;;		On exit  : 0/0
 14478 ;;		Unchanged: 0/0
 14479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14481 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;Total ram usage:        7 bytes
 14485 ;; Hardware stack levels used:    1
 14486 ;; Hardware stack levels required when called:    5
 14487 ;; This function calls:
 14488 ;;		Nothing
 14489 ;; This function is called by:
 14490 ;;		_DimmerLights_Main
 14491 ;;		_setDimmerLights
 14492 ;;		_setDimmerLights_Adj
 14493 ;;		_Load_Main
 14494 ;;		_setTemp_Main
 14495 ;;		_setRF_Main
 14496 ;;		_getRxData
 14497 ;;		_Switch_Main
 14498 ;; This function uses a non-reentrant model
 14499 ;;
 14500                           
 14501                           
 14502                           ;psect for function _getMain_All_Error_Status
 14503  1292                     _getMain_All_Error_Status:	
 14504                           
 14505                           ;incstack = 0
 14506                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14507                           ;getMain_All_Error_Status@command stored from wreg
 14508  1292  0020               	movlb	0	; select bank0
 14509  1293  00A5               	movwf	getMain_All_Error_Status@command
 14510                           
 14511                           ;Main_B1.c: 366: char status = 0;
 14512  1294  01A6               	clrf	getMain_All_Error_Status@status
 14513                           
 14514                           ;Main_B1.c: 377: if (status == 0 && command != 2) {
 14515  1295  08A6               	movf	getMain_All_Error_Status@status,f
 14516  1296  1D03               	skipz
 14517  1297  2AAC               	goto	l6081
 14518  1298  0825               	movf	getMain_All_Error_Status@command,w
 14519  1299  3A02               	xorlw	2
 14520  129A  1903               	skipnz
 14521  129B  2AAC               	goto	l6081
 14522                           
 14523                           ;Main_B1.c: 378: status = Temp.ERROR == 1 ? 2 : 0;
 14524  129C  0021               	movlb	1	; select bank1
 14525  129D  18D7               	btfsc	_Temp^(0+128),1
 14526  129E  2AA3               	goto	l6079
 14527  129F  0020               	movlb	0	; select bank0
 14528  12A0  01A1               	clrf	_getMain_All_Error_Status$3737
 14529  12A1  01A2               	clrf	_getMain_All_Error_Status$3737+1
 14530  12A2  2AA8               	goto	l1426
 14531  12A3                     l6079:	
 14532  12A3  3002               	movlw	2
 14533  12A4  0020               	movlb	0	; select bank0
 14534  12A5  00A1               	movwf	_getMain_All_Error_Status$3737
 14535  12A6  3000               	movlw	0
 14536  12A7  00A2               	movwf	_getMain_All_Error_Status$3737+1
 14537  12A8                     l1426:	
 14538  12A8  0821               	movf	_getMain_All_Error_Status$3737,w
 14539  12A9  00A0               	movwf	??_getMain_All_Error_Status
 14540  12AA  0820               	movf	??_getMain_All_Error_Status,w
 14541  12AB  00A6               	movwf	getMain_All_Error_Status@status
 14542  12AC                     l6081:	
 14543                           
 14544                           ;Main_B1.c: 379: }
 14545                           ;Main_B1.c: 384: if (status == 0 && command != 3) {
 14546  12AC  08A6               	movf	getMain_All_Error_Status@status,f
 14547  12AD  1D03               	skipz
 14548  12AE  2AC3               	goto	l1427
 14549  12AF  0825               	movf	getMain_All_Error_Status@command,w
 14550  12B0  3A03               	xorlw	3
 14551  12B1  1903               	skipnz
 14552  12B2  2AC3               	goto	l1427
 14553                           
 14554                           ;Main_B1.c: 385: status = Load.ERROR == 1 ? 3 : 0;
 14555  12B3  0022               	movlb	2	; select bank2
 14556  12B4  1AC3               	btfsc	_Load^(0+256),5
 14557  12B5  2ABA               	goto	l6089
 14558  12B6  0020               	movlb	0	; select bank0
 14559  12B7  01A3               	clrf	_getMain_All_Error_Status$3746
 14560  12B8  01A4               	clrf	_getMain_All_Error_Status$3746+1
 14561  12B9  2ABF               	goto	l1431
 14562  12BA                     l6089:	
 14563  12BA  3003               	movlw	3
 14564  12BB  0020               	movlb	0	; select bank0
 14565  12BC  00A3               	movwf	_getMain_All_Error_Status$3746
 14566  12BD  3000               	movlw	0
 14567  12BE  00A4               	movwf	_getMain_All_Error_Status$3746+1
 14568  12BF                     l1431:	
 14569  12BF  0823               	movf	_getMain_All_Error_Status$3746,w
 14570  12C0  00A0               	movwf	??_getMain_All_Error_Status
 14571  12C1  0820               	movf	??_getMain_All_Error_Status,w
 14572  12C2  00A6               	movwf	getMain_All_Error_Status@status
 14573  12C3                     l1427:	
 14574                           
 14575                           ;Main_B1.c: 386: }
 14576                           ;Main_B1.c: 402: return status;
 14577  12C3  0826               	movf	getMain_All_Error_Status@status,w
 14578  12C4  0008               	return
 14579  12C5                     __end_of_getMain_All_Error_Status:	
 14580                           
 14581                           	psect	text88
 14582  11A5                     __ptext88:	
 14583 ;; *************** function _getMain_LightsStatus *****************
 14584 ;; Defined at:
 14585 ;;		line 338 in file "../src/Main_B1.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;		None
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;  i               2    6[BANK0 ] int 
 14590 ;;  status          1    8[BANK0 ] unsigned char 
 14591 ;;  count           1    5[BANK0 ] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  1    wreg      unsigned char 
 14594 ;; Registers used:
 14595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;Total ram usage:        5 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    7
 14608 ;; This function calls:
 14609 ;;		_getDimmerLights_Status
 14610 ;; This function is called by:
 14611 ;;		_DimmerLights_Main
 14612 ;;		_Flash_Memory_Main
 14613 ;;		_setMain_Exception
 14614 ;;		_Load_Main
 14615 ;; This function uses a non-reentrant model
 14616 ;;
 14617                           
 14618                           
 14619                           ;psect for function _getMain_LightsStatus
 14620  11A5                     _getMain_LightsStatus:	
 14621                           
 14622                           ;Main_B1.c: 339: char status = 0;
 14623                           
 14624                           ;incstack = 0
 14625                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14626  11A5  0020               	movlb	0	; select bank0
 14627  11A6  01A8               	clrf	getMain_LightsStatus@status
 14628                           
 14629                           ;Main_B1.c: 342: char count = 1;
 14630  11A7  01A5               	clrf	getMain_LightsStatus@count
 14631  11A8  0AA5               	incf	getMain_LightsStatus@count,f
 14632                           
 14633                           ;Main_B1.c: 351: for (int i = 0; i < count; i++) {
 14634  11A9  01A6               	clrf	getMain_LightsStatus@i
 14635  11AA  01A7               	clrf	getMain_LightsStatus@i+1
 14636  11AB                     l6345:	
 14637  11AB  0827               	movf	getMain_LightsStatus@i+1,w
 14638  11AC  3A80               	xorlw	128
 14639  11AD  00A4               	movwf	??_getMain_LightsStatus
 14640  11AE  3080               	movlw	128
 14641  11AF  0224               	subwf	??_getMain_LightsStatus,w
 14642  11B0  1D03               	skipz
 14643  11B1  29B4               	goto	u5585
 14644  11B2  0825               	movf	getMain_LightsStatus@count,w
 14645  11B3  0226               	subwf	getMain_LightsStatus@i,w
 14646  11B4                     u5585:	
 14647  11B4  1803               	btfsc	3,0
 14648  11B5  29CC               	goto	l6347
 14649                           
 14650                           ;Main_B1.c: 352: if (status == 0) {
 14651  11B6  0020               	movlb	0	; select bank0
 14652  11B7  08A8               	movf	getMain_LightsStatus@status,f
 14653  11B8  1D03               	skipz
 14654  11B9  29C7               	goto	l6343
 14655                           
 14656                           ;Main_B1.c: 357: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14657  11BA  0826               	movf	getMain_LightsStatus@i,w
 14658  11BB  3E01               	addlw	1
 14659  11BC  319D  258C  3191   	fcall	_getDimmerLights_Status
 14660  11BF  3A01               	xorlw	1
 14661  11C0  3000               	movlw	0
 14662  11C1  1903               	skipnz
 14663  11C2  3001               	movlw	1
 14664  11C3  0020               	movlb	0	; select bank0
 14665  11C4  00A4               	movwf	??_getMain_LightsStatus
 14666  11C5  0824               	movf	??_getMain_LightsStatus,w
 14667  11C6  00A8               	movwf	getMain_LightsStatus@status
 14668  11C7                     l6343:	
 14669  11C7  3001               	movlw	1
 14670  11C8  07A6               	addwf	getMain_LightsStatus@i,f
 14671  11C9  3000               	movlw	0
 14672  11CA  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14673  11CB  29AB               	goto	l6345
 14674  11CC                     l6347:	
 14675                           
 14676                           ;Main_B1.c: 359: }
 14677                           ;Main_B1.c: 360: }
 14678                           ;Main_B1.c: 361: return status;
 14679  11CC  0020               	movlb	0	; select bank0
 14680  11CD  0828               	movf	getMain_LightsStatus@status,w
 14681  11CE  0008               	return
 14682  11CF                     __end_of_getMain_LightsStatus:	
 14683                           
 14684                           	psect	text89
 14685  1C73                     __ptext89:	
 14686 ;; *************** function _getLoad_OK *****************
 14687 ;; Defined at:
 14688 ;;		line 188 in file "../src/OverLoad_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;		None
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  ok              1    0[BANK0 ] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;                  1    wreg      unsigned char 
 14695 ;; Registers used:
 14696 ;;		wreg, status,2
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        1 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    5
 14709 ;; This function calls:
 14710 ;;		Nothing
 14711 ;; This function is called by:
 14712 ;;		_DimmerLights_Main
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _getLoad_OK
 14718  1C73                     _getLoad_OK:	
 14719                           
 14720                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14724  1C73  3000               	movlw	0
 14725  1C74  0022               	movlb	2	; select bank2
 14726  1C75  1BC3               	btfsc	_Load^(0+256),7
 14727  1C76  3001               	movlw	1
 14728  1C77  0020               	movlb	0	; select bank0
 14729  1C78  00A0               	movwf	getLoad_OK@ok
 14730                           
 14731                           ;OverLoad_B1.c: 190: return ok;
 14732  1C79  0820               	movf	getLoad_OK@ok,w
 14733  1C7A  0008               	return
 14734  1C7B                     __end_of_getLoad_OK:	
 14735                           
 14736                           	psect	text90
 14737  1D46                     __ptext90:	
 14738 ;; *************** function _DimmerLights_Initialization *****************
 14739 ;; Defined at:
 14740 ;;		line 341 in file "../src/Dimmer_B1.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;		None
 14743 ;; Auto vars:     Size  Location     Type
 14744 ;;		None
 14745 ;; Return value:  Size  Location     Type
 14746 ;;		None               void
 14747 ;; Registers used:
 14748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14749 ;; Tracked objects:
 14750 ;;		On entry : 0/0
 14751 ;;		On exit  : 0/0
 14752 ;;		Unchanged: 0/0
 14753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;Total ram usage:        1 bytes
 14759 ;; Hardware stack levels used:    1
 14760 ;; Hardware stack levels required when called:    7
 14761 ;; This function calls:
 14762 ;;		_Dimmer_Initialization
 14763 ;;		_setDimmerLights_Initialization
 14764 ;; This function is called by:
 14765 ;;		_main
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769                           
 14770                           ;psect for function _DimmerLights_Initialization
 14771  1D46                     _DimmerLights_Initialization:	
 14772                           
 14773                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 14774                           
 14775                           ;incstack = 0
 14776                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14777  1D46  30C5               	movlw	_DimmerLights1& (0+255)
 14778  1D47  0020               	movlb	0	; select bank0
 14779  1D48  00A4               	movwf	??_DimmerLights_Initialization
 14780  1D49  0824               	movf	??_DimmerLights_Initialization,w
 14781  1D4A  0021               	movlb	1	; select bank1
 14782  1D4B  00CE               	movwf	_DimmerLights11^(0+128)
 14783                           
 14784                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 14785  1D4C  3001               	movlw	1
 14786  1D4D  3191  212A  319D   	fcall	_setDimmerLights_Initialization
 14787                           
 14788                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 14789  1D50  319C  241B         	fcall	_Dimmer_Initialization
 14790  1D52  0008               	return
 14791  1D53                     __end_of_DimmerLights_Initialization:	
 14792                           
 14793                           	psect	text91
 14794  112A                     __ptext91:	
 14795 ;; *************** function _setDimmerLights_Initialization *****************
 14796 ;; Defined at:
 14797 ;;		line 364 in file "../src/Dimmer_B1.c"
 14798 ;; Parameters:    Size  Location     Type
 14799 ;;  lights          1    wreg     unsigned char 
 14800 ;; Auto vars:     Size  Location     Type
 14801 ;;  lights          1    3[BANK0 ] unsigned char 
 14802 ;; Return value:  Size  Location     Type
 14803 ;;		None               void
 14804 ;; Registers used:
 14805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14806 ;; Tracked objects:
 14807 ;;		On entry : 0/0
 14808 ;;		On exit  : 0/0
 14809 ;;		Unchanged: 0/0
 14810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;Total ram usage:        2 bytes
 14816 ;; Hardware stack levels used:    1
 14817 ;; Hardware stack levels required when called:    6
 14818 ;; This function calls:
 14819 ;;		_DimmerLightsPointSelect
 14820 ;; This function is called by:
 14821 ;;		_DimmerLights_Initialization
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           
 14826                           ;psect for function _setDimmerLights_Initialization
 14827  112A                     _setDimmerLights_Initialization:	
 14828                           
 14829                           ;incstack = 0
 14830                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14831                           ;setDimmerLights_Initialization@lights stored from wreg
 14832  112A  0020               	movlb	0	; select bank0
 14833  112B  00A3               	movwf	setDimmerLights_Initialization@lights
 14834                           
 14835                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 14836  112C  0823               	movf	setDimmerLights_Initialization@lights,w
 14837  112D  319C  24C8         	fcall	_DimmerLightsPointSelect
 14838                           
 14839                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 14840  112F  3040               	movlw	64
 14841  1130  0020               	movlb	0	; select bank0
 14842  1131  00A2               	movwf	??_setDimmerLights_Initialization
 14843  1132  086F               	movf	_DimmerLights,w
 14844  1133  3E05               	addlw	5
 14845  1134  0086               	movwf	6
 14846  1135  3001               	movlw	1	; select bank2/3
 14847  1136  0087               	movwf	7
 14848  1137  0822               	movf	??_setDimmerLights_Initialization,w
 14849  1138  0081               	movwf	1
 14850                           
 14851                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 14852  1139  300C               	movlw	12
 14853  113A  00A2               	movwf	??_setDimmerLights_Initialization
 14854  113B  086F               	movf	_DimmerLights,w
 14855  113C  3E06               	addlw	6
 14856  113D  0086               	movwf	6
 14857  113E  3001               	movlw	1	; select bank2/3
 14858  113F  0087               	movwf	7
 14859  1140  0822               	movf	??_setDimmerLights_Initialization,w
 14860  1141  0081               	movwf	1
 14861                           
 14862                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14863  1142  086F               	movf	_DimmerLights,w
 14864  1143  3E05               	addlw	5
 14865  1144  0086               	movwf	6
 14866  1145  3001               	movlw	1	; select bank2/3
 14867  1146  0087               	movwf	7
 14868  1147  0801               	movf	1,w
 14869  1148  00A2               	movwf	??_setDimmerLights_Initialization
 14870  1149  086F               	movf	_DimmerLights,w
 14871  114A  3E04               	addlw	4
 14872  114B  0086               	movwf	6
 14873  114C  3001               	movlw	1	; select bank2/3
 14874  114D  0087               	movwf	7
 14875  114E  0822               	movf	??_setDimmerLights_Initialization,w
 14876  114F  0081               	movwf	1
 14877  1150  0008               	return
 14878  1151                     __end_of_setDimmerLights_Initialization:	
 14879                           
 14880                           	psect	text92
 14881  1C1B                     __ptext92:	
 14882 ;; *************** function _Dimmer_Initialization *****************
 14883 ;; Defined at:
 14884 ;;		line 904 in file "../src/Dimmer_B1.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;		None
 14887 ;; Auto vars:     Size  Location     Type
 14888 ;;		None
 14889 ;; Return value:  Size  Location     Type
 14890 ;;		None               void
 14891 ;; Registers used:
 14892 ;;		None
 14893 ;; Tracked objects:
 14894 ;;		On entry : 0/0
 14895 ;;		On exit  : 0/0
 14896 ;;		Unchanged: 0/0
 14897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;Total ram usage:        0 bytes
 14903 ;; Hardware stack levels used:    1
 14904 ;; Hardware stack levels required when called:    5
 14905 ;; This function calls:
 14906 ;;		Nothing
 14907 ;; This function is called by:
 14908 ;;		_DimmerLights_Initialization
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           
 14913                           ;psect for function _Dimmer_Initialization
 14914  1C1B                     _Dimmer_Initialization:	
 14915                           
 14916                           ;incstack = 0
 14917                           ; Regs used in _Dimmer_Initialization: []
 14918  1C1B  0008               	return
 14919  1C1C                     __end_of_Dimmer_Initialization:	
 14920                           
 14921                           	psect	text93
 14922  1C40                     __ptext93:	
 14923 ;; *************** function _DelayOff_Main *****************
 14924 ;; Defined at:
 14925 ;;		line 41 in file "../src/DelayOff_B1.c"
 14926 ;; Parameters:    Size  Location     Type
 14927 ;;		None
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;		None
 14930 ;; Return value:  Size  Location     Type
 14931 ;;		None               void
 14932 ;; Registers used:
 14933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;Total ram usage:        0 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; Hardware stack levels required when called:   11
 14946 ;; This function calls:
 14947 ;;		_DlyOff_Main
 14948 ;; This function is called by:
 14949 ;;		_main
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           
 14954                           ;psect for function _DelayOff_Main
 14955  1C40                     _DelayOff_Main:	
 14956                           
 14957                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14958                           
 14959                           ;incstack = 0
 14960                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14961  1C40  3001               	movlw	1
 14962  1C41  3188  20D5         	fcall	_DlyOff_Main
 14963  1C43  0008               	return
 14964  1C44                     __end_of_DelayOff_Main:	
 14965                           
 14966                           	psect	text94
 14967  08D5                     __ptext94:	
 14968 ;; *************** function _DlyOff_Main *****************
 14969 ;; Defined at:
 14970 ;;		line 61 in file "../src/DelayOff_B1.c"
 14971 ;; Parameters:    Size  Location     Type
 14972 ;;  sw              1    wreg     unsigned char 
 14973 ;; Auto vars:     Size  Location     Type
 14974 ;;  sw              1   24[BANK0 ] unsigned char 
 14975 ;; Return value:  Size  Location     Type
 14976 ;;		None               void
 14977 ;; Registers used:
 14978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14979 ;; Tracked objects:
 14980 ;;		On entry : 0/0
 14981 ;;		On exit  : 0/0
 14982 ;;		Unchanged: 0/0
 14983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;Total ram usage:        3 bytes
 14989 ;; Hardware stack levels used:    1
 14990 ;; Hardware stack levels required when called:   10
 14991 ;; This function calls:
 14992 ;;		_DelayOffPointSelect
 14993 ;;		_setBuz
 14994 ;;		_setDimmerLights_ErrorClose
 14995 ;; This function is called by:
 14996 ;;		_DelayOff_Main
 14997 ;; This function uses a non-reentrant model
 14998 ;;
 14999                           
 15000                           
 15001                           ;psect for function _DlyOff_Main
 15002  08D5                     _DlyOff_Main:	
 15003                           
 15004                           ;incstack = 0
 15005                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15006                           ;DlyOff_Main@sw stored from wreg
 15007  08D5  0020               	movlb	0	; select bank0
 15008  08D6  00B8               	movwf	DlyOff_Main@sw
 15009                           
 15010                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15011  08D7  0838               	movf	DlyOff_Main@sw,w
 15012  08D8  319C  24BD  3188   	fcall	_DelayOffPointSelect
 15013                           
 15014                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15015  08DB  0878               	movf	_DelayOff,w
 15016  08DC  0086               	movwf	6
 15017  08DD  3001               	movlw	1	; select bank2/3
 15018  08DE  0087               	movwf	7
 15019  08DF  1C81               	btfss	1,1
 15020  08E0  0008               	return
 15021                           
 15022                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15023  08E1  0878               	movf	_DelayOff,w
 15024  08E2  3E02               	addlw	2
 15025  08E3  0086               	movwf	6
 15026  08E4  3001               	movlw	1	; select bank2/3
 15027  08E5  0087               	movwf	7
 15028  08E6  3001               	movlw	1
 15029  08E7  0781               	addwf	1,f
 15030  08E8  3141               	addfsr 1,1
 15031  08E9  1803               	skipnc
 15032  08EA  0A81               	incf	1,f
 15033                           
 15034                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15035  08EB  0878               	movf	_DelayOff,w
 15036  08EC  3E02               	addlw	2
 15037  08ED  0086               	movwf	6
 15038  08EE  3001               	movlw	1	; select bank2/3
 15039  08EF  0087               	movwf	7
 15040  08F0  3F40               	moviw [0]fsr1
 15041  08F1  0020               	movlb	0	; select bank0
 15042  08F2  00B6               	movwf	??_DlyOff_Main
 15043  08F3  3F41               	moviw [1]fsr1
 15044  08F4  00B7               	movwf	??_DlyOff_Main+1
 15045  08F5  3017               	movlw	23
 15046  08F6  0237               	subwf	??_DlyOff_Main+1,w
 15047  08F7  3070               	movlw	112
 15048  08F8  1903               	skipnz
 15049  08F9  0236               	subwf	??_DlyOff_Main,w
 15050  08FA  1C03               	skipc
 15051  08FB  0008               	return
 15052                           
 15053                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15054  08FC  0878               	movf	_DelayOff,w
 15055  08FD  3E02               	addlw	2
 15056  08FE  0086               	movwf	6
 15057  08FF  3001               	movlw	1	; select bank2/3
 15058  0900  0087               	movwf	7
 15059  0901  3000               	movlw	0
 15060  0902  3FC0               	movwi [0]fsr1
 15061  0903  3FC1               	movwi [1]fsr1
 15062                           
 15063                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15064  0904  3001               	movlw	1
 15065  0905  00B6               	movwf	??_DlyOff_Main
 15066  0906  0878               	movf	_DelayOff,w
 15067  0907  3E04               	addlw	4
 15068  0908  0086               	movwf	6
 15069  0909  3001               	movlw	1	; select bank2/3
 15070  090A  0087               	movwf	7
 15071  090B  0836               	movf	??_DlyOff_Main,w
 15072  090C  0781               	addwf	1,f
 15073                           
 15074                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15075  090D  0878               	movf	_DelayOff,w
 15076  090E  3E04               	addlw	4
 15077  090F  0086               	movwf	6
 15078  0910  3001               	movlw	1	; select bank2/3
 15079  0911  0087               	movwf	7
 15080  0912  0A78               	incf	_DelayOff,w
 15081  0913  0084               	movwf	4
 15082  0914  3001               	movlw	1	; select bank2/3
 15083  0915  0085               	movwf	5
 15084  0916  0800               	movf	0,w
 15085  0917  0201               	subwf	1,w
 15086  0918  1C03               	skipc
 15087  0919  0008               	return
 15088                           
 15089                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15090  091A  0878               	movf	_DelayOff,w
 15091  091B  3E04               	addlw	4
 15092  091C  0086               	movwf	6
 15093  091D  3001               	movlw	1	; select bank2/3
 15094  091E  0087               	movwf	7
 15095  091F  0181               	clrf	1
 15096                           
 15097                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15098  0920  0878               	movf	_DelayOff,w
 15099  0921  0086               	movwf	6
 15100  0922  3001               	movlw	1	; select bank2/3
 15101  0923  0087               	movwf	7
 15102  0924  1081               	bcf	1,1
 15103                           
 15104                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15105  0925  3064               	movlw	100
 15106  0926  00A9               	movwf	setBuz@time
 15107  0927  3000               	movlw	0
 15108  0928  00AA               	movwf	setBuz@time+1
 15109  0929  3001               	movlw	1
 15110  092A  3196  26F2  3188   	fcall	_setBuz
 15111                           
 15112                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15113  092D  0020               	movlb	0	; select bank0
 15114  092E  0838               	movf	DlyOff_Main@sw,w
 15115  092F  3196  2642         	fcall	_setDimmerLights_ErrorClose
 15116  0931  0008               	return
 15117  0932                     __end_of_DlyOff_Main:	
 15118                           
 15119                           	psect	text95
 15120  1642                     __ptext95:	
 15121 ;; *************** function _setDimmerLights_ErrorClose *****************
 15122 ;; Defined at:
 15123 ;;		line 574 in file "../src/Dimmer_B1.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;  lights          1    wreg     unsigned char 
 15126 ;; Auto vars:     Size  Location     Type
 15127 ;;  lights          1   19[BANK0 ] unsigned char 
 15128 ;;  i               2   20[BANK0 ] int 
 15129 ;;  count           1   18[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;		None               void
 15132 ;; Registers used:
 15133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;Total ram usage:        5 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    9
 15146 ;; This function calls:
 15147 ;;		_DimmerLightsPointSelect
 15148 ;;		_getDimmerLights_Status
 15149 ;;		_setDimmerLights_SwOff
 15150 ;; This function is called by:
 15151 ;;		_DlyOff_Main
 15152 ;;		_setMain_Exception
 15153 ;;		_setControl_Lights_Table
 15154 ;; This function uses a non-reentrant model
 15155 ;;
 15156                           
 15157                           
 15158                           ;psect for function _setDimmerLights_ErrorClose
 15159  1642                     _setDimmerLights_ErrorClose:	
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15163                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15164  1642  0020               	movlb	0	; select bank0
 15165  1643  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15166                           
 15167                           ;Dimmer_B1.c: 575: if (lights == 255) {
 15168  1644  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15169  1645  3AFF               	xorlw	255
 15170  1646  1D03               	skipz
 15171  1647  2E7D               	goto	l5979
 15172                           
 15173                           ;Dimmer_B1.c: 577: char count = 1;
 15174  1648  01B2               	clrf	setDimmerLights_ErrorClose@count
 15175  1649  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15176                           
 15177                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 15178  164A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15179  164B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15180  164C                     l5977:	
 15181  164C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15182  164D  3A80               	xorlw	128
 15183  164E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15184  164F  3080               	movlw	128
 15185  1650  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15186  1651  1D03               	skipz
 15187  1652  2E55               	goto	u5035
 15188  1653  0832               	movf	setDimmerLights_ErrorClose@count,w
 15189  1654  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15190  1655                     u5035:	
 15191  1655  1803               	btfsc	3,0
 15192  1656  0008               	return
 15193                           
 15194                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 15195  1657  0020               	movlb	0	; select bank0
 15196  1658  0834               	movf	setDimmerLights_ErrorClose@i,w
 15197  1659  3E01               	addlw	1
 15198  165A  319C  24C8  3196   	fcall	_DimmerLightsPointSelect
 15199                           
 15200                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 15201  165D  0020               	movlb	0	; select bank0
 15202  165E  0834               	movf	setDimmerLights_ErrorClose@i,w
 15203  165F  3E01               	addlw	1
 15204  1660  319D  258C  3196   	fcall	_getDimmerLights_Status
 15205  1663  3A01               	xorlw	1
 15206  1664  1D03               	skipz
 15207  1665  2E77               	goto	l5975
 15208                           
 15209                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 15210  1666  0020               	movlb	0	; select bank0
 15211  1667  086F               	movf	_DimmerLights,w
 15212  1668  3E09               	addlw	9
 15213  1669  0086               	movwf	6
 15214  166A  3001               	movlw	1	; select bank2/3
 15215  166B  0087               	movwf	7
 15216  166C  1701               	bsf	1,6
 15217                           
 15218                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 15219  166D  086F               	movf	_DimmerLights,w
 15220  166E  0086               	movwf	6
 15221  166F  3001               	movlw	1	; select bank2/3
 15222  1670  0087               	movwf	7
 15223  1671  1281               	bcf	1,5
 15224                           
 15225                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 15226  1672  0834               	movf	setDimmerLights_ErrorClose@i,w
 15227  1673  3E01               	addlw	1
 15228  1674  3194  24C6  3196   	fcall	_setDimmerLights_SwOff
 15229  1677                     l5975:	
 15230  1677  3001               	movlw	1
 15231  1678  0020               	movlb	0	; select bank0
 15232  1679  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15233  167A  3000               	movlw	0
 15234  167B  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15235  167C  2E4C               	goto	l5977
 15236  167D                     l5979:	
 15237                           ;Dimmer_B1.c: 591: }
 15238                           ;Dimmer_B1.c: 592: }
 15239                           ;Dimmer_B1.c: 593: } else {
 15240                           
 15241                           
 15242                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 15243  167D  0020               	movlb	0	; select bank0
 15244  167E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15245  167F  319C  24C8  3196   	fcall	_DimmerLightsPointSelect
 15246                           
 15247                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 15248  1682  0020               	movlb	0	; select bank0
 15249  1683  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15250  1684  319D  258C  3196   	fcall	_getDimmerLights_Status
 15251  1687  3A01               	xorlw	1
 15252  1688  1D03               	skipz
 15253  1689  0008               	return
 15254                           
 15255                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 15256  168A  0020               	movlb	0	; select bank0
 15257  168B  086F               	movf	_DimmerLights,w
 15258  168C  3E09               	addlw	9
 15259  168D  0086               	movwf	6
 15260  168E  3001               	movlw	1	; select bank2/3
 15261  168F  0087               	movwf	7
 15262  1690  1701               	bsf	1,6
 15263                           
 15264                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 15265  1691  086F               	movf	_DimmerLights,w
 15266  1692  0086               	movwf	6
 15267  1693  3001               	movlw	1	; select bank2/3
 15268  1694  0087               	movwf	7
 15269  1695  1281               	bcf	1,5
 15270                           
 15271                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 15272  1696  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15273  1697  3194  24C6         	fcall	_setDimmerLights_SwOff
 15274  1699  0008               	return
 15275  169A                     __end_of_setDimmerLights_ErrorClose:	
 15276                           
 15277                           	psect	text96
 15278  14C6                     __ptext96:	
 15279 ;; *************** function _setDimmerLights_SwOff *****************
 15280 ;; Defined at:
 15281 ;;		line 536 in file "../src/Dimmer_B1.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  sw              1    wreg     unsigned char 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  sw              1   16[BANK0 ] unsigned char 
 15286 ;;  command         1   15[BANK0 ] unsigned char 
 15287 ;; Return value:  Size  Location     Type
 15288 ;;		None               void
 15289 ;; Registers used:
 15290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15291 ;; Tracked objects:
 15292 ;;		On entry : 0/0
 15293 ;;		On exit  : 0/0
 15294 ;;		Unchanged: 0/0
 15295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;Total ram usage:        2 bytes
 15301 ;; Hardware stack levels used:    1
 15302 ;; Hardware stack levels required when called:    8
 15303 ;; This function calls:
 15304 ;;		_DimmerLightsPointSelect
 15305 ;;		_getDelayOff_GO
 15306 ;;		_setDelayOff_GO
 15307 ;;		_setDimmerLights_Trigger
 15308 ;;		_setDimmerLights_TriggerAdj
 15309 ;; This function is called by:
 15310 ;;		_setDimmerLights_ErrorClose
 15311 ;;		_setRFSW_Control
 15312 ;;		_setSw_Main
 15313 ;; This function uses a non-reentrant model
 15314 ;;
 15315                           
 15316                           
 15317                           ;psect for function _setDimmerLights_SwOff
 15318  14C6                     _setDimmerLights_SwOff:	
 15319                           
 15320                           ;incstack = 0
 15321                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15322                           ;setDimmerLights_SwOff@sw stored from wreg
 15323  14C6  0020               	movlb	0	; select bank0
 15324  14C7  00B0               	movwf	setDimmerLights_SwOff@sw
 15325                           
 15326                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15327  14C8  0830               	movf	setDimmerLights_SwOff@sw,w
 15328  14C9  319C  24C8  3194   	fcall	_DimmerLightsPointSelect
 15329                           
 15330                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15331  14CC  0020               	movlb	0	; select bank0
 15332  14CD  086F               	movf	_DimmerLights,w
 15333  14CE  0086               	movwf	6
 15334  14CF  3001               	movlw	1	; select bank2/3
 15335  14D0  0087               	movwf	7
 15336  14D1  3000               	movlw	0
 15337  14D2  1A81               	btfsc	1,5
 15338  14D3  3001               	movlw	1
 15339  14D4  00AF               	movwf	setDimmerLights_SwOff@command
 15340                           
 15341                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15342  14D5  086F               	movf	_DimmerLights,w
 15343  14D6  3E09               	addlw	9
 15344  14D7  0086               	movwf	6
 15345  14D8  3001               	movlw	1	; select bank2/3
 15346  14D9  0087               	movwf	7
 15347  14DA  1F01               	btfss	1,6
 15348  14DB  0008               	return
 15349                           
 15350                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15351  14DC  086F               	movf	_DimmerLights,w
 15352  14DD  3E09               	addlw	9
 15353  14DE  0086               	movwf	6
 15354  14DF  3001               	movlw	1	; select bank2/3
 15355  14E0  0087               	movwf	7
 15356  14E1  1301               	bcf	1,6
 15357                           
 15358                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15359  14E2  086F               	movf	_DimmerLights,w
 15360  14E3  0086               	movwf	6
 15361  14E4  3001               	movlw	1	; select bank2/3
 15362  14E5  0087               	movwf	7
 15363  14E6  1E81               	btfss	1,5
 15364  14E7  2CFA               	goto	l5837
 15365                           
 15366                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15367  14E8  086F               	movf	_DimmerLights,w
 15368  14E9  3E09               	addlw	9
 15369  14EA  0086               	movwf	6
 15370  14EB  3001               	movlw	1	; select bank2/3
 15371  14EC  0087               	movwf	7
 15372  14ED  1F81               	btfss	1,7
 15373  14EE  0008               	return
 15374                           
 15375                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15376  14EF  086F               	movf	_DimmerLights,w
 15377  14F0  3E09               	addlw	9
 15378  14F1  0086               	movwf	6
 15379  14F2  3001               	movlw	1	; select bank2/3
 15380  14F3  0087               	movwf	7
 15381  14F4  1381               	bcf	1,7
 15382                           
 15383                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15384  14F5  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15385  14F6  0830               	movf	setDimmerLights_SwOff@sw,w
 15386  14F7  319F  275F         	fcall	_setDimmerLights_TriggerAdj
 15387                           
 15388                           ;Dimmer_B1.c: 545: }
 15389                           ;Dimmer_B1.c: 546: } else {
 15390  14F9  0008               	return
 15391  14FA                     l5837:	
 15392                           
 15393                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 15394  14FA  0020               	movlb	0	; select bank0
 15395  14FB  01A2               	clrf	setDimmerLights_Trigger@command
 15396  14FC  0830               	movf	setDimmerLights_SwOff@sw,w
 15397  14FD  319F  2722  3194   	fcall	_setDimmerLights_Trigger
 15398                           
 15399                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 15400  1500  0020               	movlb	0	; select bank0
 15401  1501  0830               	movf	setDimmerLights_SwOff@sw,w
 15402  1502  319D  259C  3194   	fcall	_getDelayOff_GO
 15403  1505  3A01               	xorlw	1
 15404  1506  1D03               	skipz
 15405  1507  0008               	return
 15406                           
 15407                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 15408  1508  0020               	movlb	0	; select bank0
 15409  1509  01AA               	clrf	setDelayOff_GO@command
 15410  150A  01AB               	clrf	setDelayOff_GO@value
 15411  150B  0830               	movf	setDimmerLights_SwOff@sw,w
 15412  150C  3188  2078         	fcall	_setDelayOff_GO
 15413  150E  0008               	return
 15414  150F                     __end_of_setDimmerLights_SwOff:	
 15415                           
 15416                           	psect	text97
 15417  1F5F                     __ptext97:	
 15418 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15419 ;; Defined at:
 15420 ;;		line 785 in file "../src/Dimmer_B1.c"
 15421 ;; Parameters:    Size  Location     Type
 15422 ;;  lights          1    wreg     unsigned char 
 15423 ;;  command         1    2[BANK0 ] unsigned char 
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;  lights          1    4[BANK0 ] unsigned char 
 15426 ;; Return value:  Size  Location     Type
 15427 ;;		None               void
 15428 ;; Registers used:
 15429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15430 ;; Tracked objects:
 15431 ;;		On entry : 0/0
 15432 ;;		On exit  : 0/0
 15433 ;;		Unchanged: 0/0
 15434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15435 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;Total ram usage:        3 bytes
 15440 ;; Hardware stack levels used:    1
 15441 ;; Hardware stack levels required when called:    6
 15442 ;; This function calls:
 15443 ;;		_DimmerLightsPointSelect
 15444 ;; This function is called by:
 15445 ;;		_setDimmerLights_SwOff
 15446 ;;		_setDimmerLights_AdjControl
 15447 ;; This function uses a non-reentrant model
 15448 ;;
 15449                           
 15450                           
 15451                           ;psect for function _setDimmerLights_TriggerAdj
 15452  1F5F                     _setDimmerLights_TriggerAdj:	
 15453                           
 15454                           ;incstack = 0
 15455                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15456                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15457  1F5F  0020               	movlb	0	; select bank0
 15458  1F60  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15459                           
 15460                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15461  1F61  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15462  1F62  319C  24C8         	fcall	_DimmerLightsPointSelect
 15463                           
 15464                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 15465  1F64  0020               	movlb	0	; select bank0
 15466  1F65  086F               	movf	_DimmerLights,w
 15467  1F66  3E08               	addlw	8
 15468  1F67  0086               	movwf	6
 15469  1F68  3001               	movlw	1	; select bank2/3
 15470  1F69  0087               	movwf	7
 15471  1F6A  1601               	bsf	1,4
 15472                           
 15473                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15474  1F6B  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15475  1F6C  3A01               	xorlw	1
 15476  1F6D  3000               	movlw	0
 15477  1F6E  1903               	skipnz
 15478  1F6F  3001               	movlw	1
 15479  1F70  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15480  1F71  086F               	movf	_DimmerLights,w
 15481  1F72  3E08               	addlw	8
 15482  1F73  0086               	movwf	6
 15483  1F74  3001               	movlw	1	; select bank2/3
 15484  1F75  0087               	movwf	7
 15485  1F76  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15486  1F77  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15487  1F78  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15488  1F79  0801               	movf	1,w
 15489  1F7A  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15490  1F7B  39F7               	andlw	-9
 15491  1F7C  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15492  1F7D  0081               	movwf	1
 15493  1F7E  0008               	return
 15494  1F7F                     __end_of_setDimmerLights_TriggerAdj:	
 15495                           
 15496                           	psect	text98
 15497  1F22                     __ptext98:	
 15498 ;; *************** function _setDimmerLights_Trigger *****************
 15499 ;; Defined at:
 15500 ;;		line 779 in file "../src/Dimmer_B1.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;  lights          1    wreg     unsigned char 
 15503 ;;  command         1    2[BANK0 ] unsigned char 
 15504 ;; Auto vars:     Size  Location     Type
 15505 ;;  lights          1    4[BANK0 ] unsigned char 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;		None               void
 15508 ;; Registers used:
 15509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15515 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;Total ram usage:        3 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; Hardware stack levels required when called:    6
 15522 ;; This function calls:
 15523 ;;		_DimmerLightsPointSelect
 15524 ;; This function is called by:
 15525 ;;		_setDimmerLights_SwOn
 15526 ;;		_setDimmerLights_SwOff
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           
 15531                           ;psect for function _setDimmerLights_Trigger
 15532  1F22                     _setDimmerLights_Trigger:	
 15533                           
 15534                           ;incstack = 0
 15535                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15536                           ;setDimmerLights_Trigger@lights stored from wreg
 15537  1F22  0020               	movlb	0	; select bank0
 15538  1F23  00A4               	movwf	setDimmerLights_Trigger@lights
 15539                           
 15540                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 15541  1F24  0824               	movf	setDimmerLights_Trigger@lights,w
 15542  1F25  319C  24C8         	fcall	_DimmerLightsPointSelect
 15543                           
 15544                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 15545  1F27  0020               	movlb	0	; select bank0
 15546  1F28  086F               	movf	_DimmerLights,w
 15547  1F29  3E08               	addlw	8
 15548  1F2A  0086               	movwf	6
 15549  1F2B  3001               	movlw	1	; select bank2/3
 15550  1F2C  0087               	movwf	7
 15551  1F2D  1501               	bsf	1,2
 15552                           
 15553                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 15554  1F2E  0822               	movf	setDimmerLights_Trigger@command,w
 15555  1F2F  3A01               	xorlw	1
 15556  1F30  3000               	movlw	0
 15557  1F31  1903               	skipnz
 15558  1F32  3001               	movlw	1
 15559  1F33  00A3               	movwf	??_setDimmerLights_Trigger
 15560  1F34  086F               	movf	_DimmerLights,w
 15561  1F35  3E08               	addlw	8
 15562  1F36  0086               	movwf	6
 15563  1F37  3001               	movlw	1	; select bank2/3
 15564  1F38  0087               	movwf	7
 15565  1F39  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15566  1F3A  0801               	movf	1,w
 15567  1F3B  0623               	xorwf	??_setDimmerLights_Trigger,w
 15568  1F3C  39FD               	andlw	-3
 15569  1F3D  0623               	xorwf	??_setDimmerLights_Trigger,w
 15570  1F3E  0081               	movwf	1
 15571  1F3F  0008               	return
 15572  1F40                     __end_of_setDimmerLights_Trigger:	
 15573                           
 15574                           	psect	text99
 15575  0878                     __ptext99:	
 15576 ;; *************** function _setDelayOff_GO *****************
 15577 ;; Defined at:
 15578 ;;		line 83 in file "../src/DelayOff_B1.c"
 15579 ;; Parameters:    Size  Location     Type
 15580 ;;  sw              1    wreg     unsigned char 
 15581 ;;  command         1   10[BANK0 ] unsigned char 
 15582 ;;  value           1   11[BANK0 ] unsigned char 
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;  sw              1   14[BANK0 ] unsigned char 
 15585 ;; Return value:  Size  Location     Type
 15586 ;;		None               void
 15587 ;; Registers used:
 15588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15594 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;Total ram usage:        5 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; Hardware stack levels required when called:    7
 15601 ;; This function calls:
 15602 ;;		_DelayOffPointSelect
 15603 ;;		_DelayTimejudge
 15604 ;; This function is called by:
 15605 ;;		_setDimmerLights_SwOff
 15606 ;;		_setRFSW_Control
 15607 ;; This function uses a non-reentrant model
 15608 ;;
 15609                           
 15610                           
 15611                           ;psect for function _setDelayOff_GO
 15612  0878                     _setDelayOff_GO:	
 15613                           
 15614                           ;incstack = 0
 15615                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15616                           ;setDelayOff_GO@sw stored from wreg
 15617  0878  0020               	movlb	0	; select bank0
 15618  0879  00AE               	movwf	setDelayOff_GO@sw
 15619                           
 15620                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15621  087A  082E               	movf	setDelayOff_GO@sw,w
 15622  087B  319C  24BD  3188   	fcall	_DelayOffPointSelect
 15623                           
 15624                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15625  087E  0020               	movlb	0	; select bank0
 15626  087F  082A               	movf	setDelayOff_GO@command,w
 15627  0880  3A01               	xorlw	1
 15628  0881  3000               	movlw	0
 15629  0882  1903               	skipnz
 15630  0883  3001               	movlw	1
 15631  0884  00AC               	movwf	??_setDelayOff_GO
 15632  0885  0878               	movf	_DelayOff,w
 15633  0886  0086               	movwf	6
 15634  0887  3001               	movlw	1	; select bank2/3
 15635  0888  0087               	movwf	7
 15636  0889  0DAC               	rlf	??_setDelayOff_GO,f
 15637  088A  0801               	movf	1,w
 15638  088B  062C               	xorwf	??_setDelayOff_GO,w
 15639  088C  39FD               	andlw	-3
 15640  088D  062C               	xorwf	??_setDelayOff_GO,w
 15641  088E  0081               	movwf	1
 15642                           
 15643                           ;DelayOff_B1.c: 89: if (command == 1) {
 15644  088F  082A               	movf	setDelayOff_GO@command,w
 15645  0890  3A01               	xorlw	1
 15646  0891  1D03               	skipz
 15647  0892  28BD               	goto	l5757
 15648                           
 15649                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15650  0893  082B               	movf	setDelayOff_GO@value,w
 15651  0894  3191  217B  3188   	fcall	_DelayTimejudge
 15652  0897  0020               	movlb	0	; select bank0
 15653  0898  00AC               	movwf	??_setDelayOff_GO
 15654  0899  0A78               	incf	_DelayOff,w
 15655  089A  0086               	movwf	6
 15656  089B  3001               	movlw	1	; select bank2/3
 15657  089C  0087               	movwf	7
 15658  089D  082C               	movf	??_setDelayOff_GO,w
 15659  089E  0081               	movwf	1
 15660                           
 15661                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15662  089F  300F               	movlw	15
 15663  08A0  052B               	andwf	setDelayOff_GO@value,w
 15664  08A1  00AC               	movwf	??_setDelayOff_GO
 15665  08A2  082C               	movf	??_setDelayOff_GO,w
 15666  08A3  3A05               	xorlw	5
 15667  08A4  1903               	skipnz
 15668  08A5  28AA               	goto	l5751
 15669  08A6  082B               	movf	setDelayOff_GO@value,w
 15670  08A7  390F               	andlw	15
 15671  08A8  1D03               	btfss	3,2
 15672  08A9  28B0               	goto	l5755
 15673  08AA                     l5751:	
 15674  08AA  3026               	movlw	38
 15675  08AB  022B               	subwf	setDelayOff_GO@value,w
 15676  08AC  1803               	skipnc
 15677  08AD  28B0               	goto	l5755
 15678                           
 15679                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15680  08AE  082B               	movf	setDelayOff_GO@value,w
 15681  08AF  28B1               	goto	L8
 15682  08B0                     l5755:	
 15683                           ;DelayOff_B1.c: 93: } else {
 15684                           
 15685                           
 15686                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15687  08B0  3005               	movlw	5
 15688  08B1                     L8:	
 15689  08B1  00AC               	movwf	??_setDelayOff_GO
 15690  08B2  082E               	movf	setDelayOff_GO@sw,w
 15691  08B3  3E1A               	addlw	26
 15692  08B4  076E               	addwf	_product,w
 15693  08B5  00AD               	movwf	??_setDelayOff_GO+1
 15694  08B6  082D               	movf	??_setDelayOff_GO+1,w
 15695  08B7  0086               	movwf	6
 15696  08B8  3002               	movlw	2	; select bank4/5
 15697  08B9  0087               	movwf	7
 15698  08BA  082C               	movf	??_setDelayOff_GO,w
 15699  08BB  0081               	movwf	1
 15700                           
 15701                           ;DelayOff_B1.c: 95: }
 15702                           ;DelayOff_B1.c: 96: } else {
 15703  08BC  28C6               	goto	l5759
 15704  08BD                     l5757:	
 15705                           
 15706                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15707  08BD  082E               	movf	setDelayOff_GO@sw,w
 15708  08BE  3E1A               	addlw	26
 15709  08BF  076E               	addwf	_product,w
 15710  08C0  00AC               	movwf	??_setDelayOff_GO
 15711  08C1  082C               	movf	??_setDelayOff_GO,w
 15712  08C2  0086               	movwf	6
 15713  08C3  3002               	movlw	2	; select bank4/5
 15714  08C4  0087               	movwf	7
 15715  08C5  0181               	clrf	1
 15716  08C6                     l5759:	
 15717                           
 15718                           ;DelayOff_B1.c: 98: }
 15719                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15720  08C6  0878               	movf	_DelayOff,w
 15721  08C7  3E02               	addlw	2
 15722  08C8  0086               	movwf	6
 15723  08C9  3001               	movlw	1	; select bank2/3
 15724  08CA  0087               	movwf	7
 15725  08CB  3000               	movlw	0
 15726  08CC  3FC0               	movwi [0]fsr1
 15727  08CD  3FC1               	movwi [1]fsr1
 15728                           
 15729                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15730  08CE  0878               	movf	_DelayOff,w
 15731  08CF  3E04               	addlw	4
 15732  08D0  0086               	movwf	6
 15733  08D1  3001               	movlw	1	; select bank2/3
 15734  08D2  0087               	movwf	7
 15735  08D3  0181               	clrf	1
 15736  08D4  0008               	return
 15737  08D5                     __end_of_setDelayOff_GO:	
 15738                           
 15739                           	psect	text100
 15740  117B                     __ptext100:	
 15741 ;; *************** function _DelayTimejudge *****************
 15742 ;; Defined at:
 15743 ;;		line 112 in file "../src/DelayOff_B1.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  value           1    wreg     unsigned char 
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;  value           1    9[BANK0 ] unsigned char 
 15748 ;;  k               1    8[BANK0 ] unsigned char 
 15749 ;;  j               1    7[BANK0 ] unsigned char 
 15750 ;;  i               1    6[BANK0 ] unsigned char 
 15751 ;; Return value:  Size  Location     Type
 15752 ;;                  1    wreg      unsigned char 
 15753 ;; Registers used:
 15754 ;;		wreg, status,2, status,0, pclath, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;Total ram usage:        6 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:    6
 15767 ;; This function calls:
 15768 ;;		___bmul
 15769 ;; This function is called by:
 15770 ;;		_setDelayOff_GO
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           
 15775                           ;psect for function _DelayTimejudge
 15776  117B                     _DelayTimejudge:	
 15777                           
 15778                           ;incstack = 0
 15779                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15780                           ;DelayTimejudge@value stored from wreg
 15781  117B  0020               	movlb	0	; select bank0
 15782  117C  00A9               	movwf	DelayTimejudge@value
 15783                           
 15784                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15785  117D  3005               	movlw	5
 15786  117E  00A4               	movwf	??_DelayTimejudge
 15787  117F  0824               	movf	??_DelayTimejudge,w
 15788  1180  00A6               	movwf	DelayTimejudge@i
 15789  1181  01A7               	clrf	DelayTimejudge@j
 15790  1182  01A8               	clrf	DelayTimejudge@k
 15791                           
 15792                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15793  1183  3031               	movlw	49
 15794  1184  0229               	subwf	DelayTimejudge@value,w
 15795  1185  1803               	skipnc
 15796  1186  29A3               	goto	l5651
 15797                           
 15798                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15799  1187  0829               	movf	DelayTimejudge@value,w
 15800  1188  390F               	andlw	15
 15801  1189  00A4               	movwf	??_DelayTimejudge
 15802  118A  0824               	movf	??_DelayTimejudge,w
 15803  118B  00A7               	movwf	DelayTimejudge@j
 15804                           
 15805                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15806  118C  0829               	movf	DelayTimejudge@value,w
 15807  118D  00A4               	movwf	??_DelayTimejudge
 15808  118E  3004               	movlw	4
 15809  118F                     u4645:	
 15810  118F  36A4               	lsrf	??_DelayTimejudge,f
 15811  1190  0B89               	decfsz	9,f
 15812  1191  298F               	goto	u4645
 15813  1192  0824               	movf	??_DelayTimejudge,w
 15814  1193  390F               	andlw	15
 15815  1194  00A5               	movwf	??_DelayTimejudge+1
 15816  1195  0825               	movf	??_DelayTimejudge+1,w
 15817  1196  00A8               	movwf	DelayTimejudge@k
 15818                           
 15819                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15820  1197  300A               	movlw	10
 15821  1198  00A4               	movwf	??_DelayTimejudge
 15822  1199  0824               	movf	??_DelayTimejudge,w
 15823  119A  00A0               	movwf	___bmul@multiplicand
 15824  119B  0828               	movf	DelayTimejudge@k,w
 15825  119C  319E  2610         	fcall	___bmul
 15826  119E  0020               	movlb	0	; select bank0
 15827  119F  0727               	addwf	DelayTimejudge@j,w
 15828  11A0  00A5               	movwf	??_DelayTimejudge+1
 15829  11A1  0825               	movf	??_DelayTimejudge+1,w
 15830  11A2  00A6               	movwf	DelayTimejudge@i
 15831  11A3                     l5651:	
 15832                           
 15833                           ;DelayOff_B1.c: 118: }
 15834                           ;DelayOff_B1.c: 139: return i;
 15835  11A3  0826               	movf	DelayTimejudge@i,w
 15836  11A4  0008               	return
 15837  11A5                     __end_of_DelayTimejudge:	
 15838                           
 15839                           	psect	text101
 15840  1E10                     __ptext101:	
 15841 ;; *************** function ___bmul *****************
 15842 ;; Defined at:
 15843 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15844 ;; Parameters:    Size  Location     Type
 15845 ;;  multiplier      1    wreg     unsigned char 
 15846 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15849 ;;  product         1    2[BANK0 ] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      unsigned char 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;Total ram usage:        4 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    5
 15866 ;; This function calls:
 15867 ;;		Nothing
 15868 ;; This function is called by:
 15869 ;;		_DelayTimejudge
 15870 ;; This function uses a non-reentrant model
 15871 ;;
 15872                           
 15873                           
 15874                           ;psect for function ___bmul
 15875  1E10                     ___bmul:	
 15876                           
 15877                           ;incstack = 0
 15878                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15879                           ;___bmul@multiplier stored from wreg
 15880  1E10  0020               	movlb	0	; select bank0
 15881  1E11  00A3               	movwf	___bmul@multiplier
 15882  1E12  01A2               	clrf	___bmul@product
 15883  1E13                     l5393:	
 15884  1E13  1C23               	btfss	___bmul@multiplier,0
 15885  1E14  2E19               	goto	l5397
 15886  1E15  0820               	movf	___bmul@multiplicand,w
 15887  1E16  00A1               	movwf	??___bmul
 15888  1E17  0821               	movf	??___bmul,w
 15889  1E18  07A2               	addwf	___bmul@product,f
 15890  1E19                     l5397:	
 15891  1E19  1003               	clrc
 15892  1E1A  0DA0               	rlf	___bmul@multiplicand,f
 15893  1E1B  1003               	clrc
 15894  1E1C  0CA3               	rrf	___bmul@multiplier,f
 15895  1E1D  08A3               	movf	___bmul@multiplier,f
 15896  1E1E  1D03               	skipz
 15897  1E1F  2E13               	goto	l5393
 15898  1E20  0822               	movf	___bmul@product,w
 15899  1E21  0008               	return
 15900  1E22                     __end_of___bmul:	
 15901                           
 15902                           	psect	text102
 15903  1D9C                     __ptext102:	
 15904 ;; *************** function _getDelayOff_GO *****************
 15905 ;; Defined at:
 15906 ;;		line 105 in file "../src/DelayOff_B1.c"
 15907 ;; Parameters:    Size  Location     Type
 15908 ;;  sw              1    wreg     unsigned char 
 15909 ;; Auto vars:     Size  Location     Type
 15910 ;;  sw              1    2[BANK0 ] unsigned char 
 15911 ;;  go              1    3[BANK0 ] unsigned char 
 15912 ;; Return value:  Size  Location     Type
 15913 ;;                  1    wreg      unsigned char 
 15914 ;; Registers used:
 15915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15916 ;; Tracked objects:
 15917 ;;		On entry : 0/0
 15918 ;;		On exit  : 0/0
 15919 ;;		Unchanged: 0/0
 15920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;Total ram usage:        2 bytes
 15926 ;; Hardware stack levels used:    1
 15927 ;; Hardware stack levels required when called:    6
 15928 ;; This function calls:
 15929 ;;		_DelayOffPointSelect
 15930 ;; This function is called by:
 15931 ;;		_setDimmerLights_SwOff
 15932 ;;		_setRFSW_Control
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936                           
 15937                           ;psect for function _getDelayOff_GO
 15938  1D9C                     _getDelayOff_GO:	
 15939                           
 15940                           ;incstack = 0
 15941                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15942                           ;getDelayOff_GO@sw stored from wreg
 15943  1D9C  0020               	movlb	0	; select bank0
 15944  1D9D  00A2               	movwf	getDelayOff_GO@sw
 15945                           
 15946                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 15947  1D9E  0822               	movf	getDelayOff_GO@sw,w
 15948  1D9F  319C  24BD         	fcall	_DelayOffPointSelect
 15949                           
 15950                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 15951  1DA1  0878               	movf	_DelayOff,w
 15952  1DA2  0086               	movwf	6
 15953  1DA3  3001               	movlw	1	; select bank2/3
 15954  1DA4  0087               	movwf	7
 15955  1DA5  3000               	movlw	0
 15956  1DA6  1881               	btfsc	1,1
 15957  1DA7  3001               	movlw	1
 15958  1DA8  0020               	movlb	0	; select bank0
 15959  1DA9  00A3               	movwf	getDelayOff_GO@go
 15960                           
 15961                           ;DelayOff_B1.c: 108: return go;
 15962  1DAA  0823               	movf	getDelayOff_GO@go,w
 15963  1DAB  0008               	return
 15964  1DAC                     __end_of_getDelayOff_GO:	
 15965                           
 15966                           	psect	text103
 15967  1D8C                     __ptext103:	
 15968 ;; *************** function _getDimmerLights_Status *****************
 15969 ;; Defined at:
 15970 ;;		line 457 in file "../src/Dimmer_B1.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;  lights          1    wreg     unsigned char 
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;  lights          1    2[BANK0 ] unsigned char 
 15975 ;;  status          1    3[BANK0 ] unsigned char 
 15976 ;; Return value:  Size  Location     Type
 15977 ;;                  1    wreg      unsigned char 
 15978 ;; Registers used:
 15979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15980 ;; Tracked objects:
 15981 ;;		On entry : 0/0
 15982 ;;		On exit  : 0/0
 15983 ;;		Unchanged: 0/0
 15984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15989 ;;Total ram usage:        2 bytes
 15990 ;; Hardware stack levels used:    1
 15991 ;; Hardware stack levels required when called:    6
 15992 ;; This function calls:
 15993 ;;		_DimmerLightsPointSelect
 15994 ;; This function is called by:
 15995 ;;		_setDimmerLights_ErrorClose
 15996 ;;		_getMain_LightsStatus
 15997 ;;		_setRFSW_Control
 15998 ;;		_setRFSW_AdjControl
 15999 ;; This function uses a non-reentrant model
 16000 ;;
 16001                           
 16002                           
 16003                           ;psect for function _getDimmerLights_Status
 16004  1D8C                     _getDimmerLights_Status:	
 16005                           
 16006                           ;incstack = 0
 16007                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16008                           ;getDimmerLights_Status@lights stored from wreg
 16009  1D8C  0020               	movlb	0	; select bank0
 16010  1D8D  00A2               	movwf	getDimmerLights_Status@lights
 16011                           
 16012                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16013  1D8E  0822               	movf	getDimmerLights_Status@lights,w
 16014  1D8F  319C  24C8         	fcall	_DimmerLightsPointSelect
 16015                           
 16016                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16017  1D91  0020               	movlb	0	; select bank0
 16018  1D92  086F               	movf	_DimmerLights,w
 16019  1D93  0086               	movwf	6
 16020  1D94  3001               	movlw	1	; select bank2/3
 16021  1D95  0087               	movwf	7
 16022  1D96  3000               	movlw	0
 16023  1D97  1A81               	btfsc	1,5
 16024  1D98  3001               	movlw	1
 16025  1D99  00A3               	movwf	getDimmerLights_Status@status
 16026                           
 16027                           ;Dimmer_B1.c: 460: return status;
 16028  1D9A  0823               	movf	getDimmerLights_Status@status,w
 16029  1D9B  0008               	return
 16030  1D9C                     __end_of_getDimmerLights_Status:	
 16031                           
 16032                           	psect	text104
 16033  1CC8                     __ptext104:	
 16034 ;; *************** function _DimmerLightsPointSelect *****************
 16035 ;; Defined at:
 16036 ;;		line 322 in file "../src/Dimmer_B1.c"
 16037 ;; Parameters:    Size  Location     Type
 16038 ;;  lights          1    wreg     unsigned char 
 16039 ;; Auto vars:     Size  Location     Type
 16040 ;;  lights          1    1[BANK0 ] unsigned char 
 16041 ;; Return value:  Size  Location     Type
 16042 ;;		None               void
 16043 ;; Registers used:
 16044 ;;		wreg
 16045 ;; Tracked objects:
 16046 ;;		On entry : 0/0
 16047 ;;		On exit  : 0/0
 16048 ;;		Unchanged: 0/0
 16049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;Total ram usage:        2 bytes
 16055 ;; Hardware stack levels used:    1
 16056 ;; Hardware stack levels required when called:    5
 16057 ;; This function calls:
 16058 ;;		Nothing
 16059 ;; This function is called by:
 16060 ;;		_setDimmerLights_Initialization
 16061 ;;		_setDimmerLights_Main
 16062 ;;		_getDimmerLights_Status
 16063 ;;		_setDimmerLights_SwOn
 16064 ;;		_setDimmerLights_SwOff
 16065 ;;		_setDimmerLights_AdjControl
 16066 ;;		_setDimmerLights_ErrorClose
 16067 ;;		_setDimmerLights
 16068 ;;		_setDimmerLights_Adj
 16069 ;;		_setDimmerLights_AdjRF
 16070 ;;		_setDimmerLights_Trigger
 16071 ;;		_setDimmerLights_TriggerAdj
 16072 ;;		_setDimmerLights_Status
 16073 ;;		_setDimmerLights_GO
 16074 ;;		_setDimmerLights_MaxmumValue
 16075 ;; This function uses a non-reentrant model
 16076 ;;
 16077                           
 16078                           
 16079                           ;psect for function _DimmerLightsPointSelect
 16080  1CC8                     _DimmerLightsPointSelect:	
 16081                           
 16082                           ;incstack = 0
 16083                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16084                           ;DimmerLightsPointSelect@lights stored from wreg
 16085  1CC8  0020               	movlb	0	; select bank0
 16086  1CC9  00A1               	movwf	DimmerLightsPointSelect@lights
 16087                           
 16088                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16089  1CCA  0821               	movf	DimmerLightsPointSelect@lights,w
 16090  1CCB  3A01               	xorlw	1
 16091  1CCC  1D03               	skipz
 16092  1CCD  0008               	return
 16093                           
 16094                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16095  1CCE  30C5               	movlw	_DimmerLights1& (0+255)
 16096  1CCF  00A0               	movwf	??_DimmerLightsPointSelect
 16097  1CD0  0820               	movf	??_DimmerLightsPointSelect,w
 16098  1CD1  00EF               	movwf	_DimmerLights
 16099  1CD2  0008               	return
 16100  1CD3                     __end_of_DimmerLightsPointSelect:	
 16101                           
 16102                           	psect	text105
 16103  16F2                     __ptext105:	
 16104 ;; *************** function _setBuz *****************
 16105 ;; Defined at:
 16106 ;;		line 22 in file "../src/Buzzer_B1.c"
 16107 ;; Parameters:    Size  Location     Type
 16108 ;;  count           1    wreg     unsigned char 
 16109 ;;  time            2    9[BANK0 ] int 
 16110 ;; Auto vars:     Size  Location     Type
 16111 ;;  count           1   12[BANK0 ] unsigned char 
 16112 ;; Return value:  Size  Location     Type
 16113 ;;		None               void
 16114 ;; Registers used:
 16115 ;;		wreg, status,2, status,0, pclath, cstack
 16116 ;; Tracked objects:
 16117 ;;		On entry : 0/0
 16118 ;;		On exit  : 0/0
 16119 ;;		Unchanged: 0/0
 16120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16124 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16125 ;;Total ram usage:        4 bytes
 16126 ;; Hardware stack levels used:    1
 16127 ;; Hardware stack levels required when called:    6
 16128 ;; This function calls:
 16129 ;;		___awdiv
 16130 ;; This function is called by:
 16131 ;;		_DlyOff_Main
 16132 ;;		_setDimmerLights_Main
 16133 ;;		_setDimmerLights_SwOn
 16134 ;;		_my_MainTimer
 16135 ;;		_setMain_Exception
 16136 ;;		_setTemp_Main
 16137 ;;		_setLog_Code
 16138 ;;		_setControl_Lights_Table
 16139 ;;		_setRFSW_Control
 16140 ;;		_setSw_Main
 16141 ;; This function uses a non-reentrant model
 16142 ;;
 16143                           
 16144                           
 16145                           ;psect for function _setBuz
 16146  16F2                     _setBuz:	
 16147                           
 16148                           ;incstack = 0
 16149                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16150                           ;setBuz@count stored from wreg
 16151  16F2  0020               	movlb	0	; select bank0
 16152  16F3  00AC               	movwf	setBuz@count
 16153                           
 16154                           ;Buzzer_B1.c: 23: time /= 10;
 16155  16F4  300A               	movlw	10
 16156  16F5  00A0               	movwf	___awdiv@divisor
 16157  16F6  3000               	movlw	0
 16158  16F7  00A1               	movwf	___awdiv@divisor+1
 16159  16F8  082A               	movf	setBuz@time+1,w
 16160  16F9  01A3               	clrf	___awdiv@dividend+1
 16161  16FA  07A3               	addwf	___awdiv@dividend+1,f
 16162  16FB  0829               	movf	setBuz@time,w
 16163  16FC  01A2               	clrf	___awdiv@dividend
 16164  16FD  07A2               	addwf	___awdiv@dividend,f
 16165  16FE  3187  27AC  3196   	fcall	___awdiv
 16166  1701  0020               	movlb	0	; select bank0
 16167  1702  0821               	movf	?___awdiv+1,w
 16168  1703  01AA               	clrf	setBuz@time+1
 16169  1704  07AA               	addwf	setBuz@time+1,f
 16170  1705  0820               	movf	?___awdiv,w
 16171  1706  01A9               	clrf	setBuz@time
 16172  1707  07A9               	addwf	setBuz@time,f
 16173                           
 16174                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16175  1708  0021               	movlb	1	; select bank1
 16176  1709  1C30               	btfss	_Buz1^(0+128),0
 16177  170A  0008               	return
 16178                           
 16179                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16180  170B  18B0               	btfsc	_Buz1^(0+128),1
 16181  170C  2F23               	goto	l84
 16182                           
 16183                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16184  170D  14B0               	bsf	_Buz1^(0+128),1
 16185                           
 16186                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16187  170E  01B1               	clrf	(_Buz1^(0+128)+1)
 16188  170F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 16189                           
 16190                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16191  1710  0020               	movlb	0	; select bank0
 16192  1711  082C               	movf	setBuz@count,w
 16193  1712  00AB               	movwf	??_setBuz
 16194  1713  082B               	movf	??_setBuz,w
 16195  1714  0021               	movlb	1	; select bank1
 16196  1715  00B3               	movwf	(_Buz1^(0+128)+3)
 16197                           
 16198                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16199  1716  0020               	movlb	0	; select bank0
 16200  1717  082A               	movf	setBuz@time+1,w
 16201  1718  0021               	movlb	1	; select bank1
 16202  1719  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 16203  171A  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 16204  171B  0020               	movlb	0	; select bank0
 16205  171C  0829               	movf	setBuz@time,w
 16206  171D  0021               	movlb	1	; select bank1
 16207  171E  01B6               	clrf	(_Buz1^(0+128)+6)
 16208  171F  07B6               	addwf	(_Buz1^(0+128)+6),f
 16209                           
 16210                           ;Buzzer_B1.c: 30: RB3 = 1;
 16211  1720  0020               	movlb	0	; select bank0
 16212  1721  158D               	bsf	13,3	;volatile
 16213                           
 16214                           ;Buzzer_B1.c: 31: } else {
 16215  1722  0008               	return
 16216  1723                     l84:	
 16217                           
 16218                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16219  1723  19B0               	btfsc	_Buz1^(0+128),3
 16220  1724  2F37               	goto	l86
 16221                           
 16222                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16223  1725  15B0               	bsf	_Buz1^(0+128),3
 16224                           
 16225                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16226  1726  0020               	movlb	0	; select bank0
 16227  1727  082C               	movf	setBuz@count,w
 16228  1728  00AB               	movwf	??_setBuz
 16229  1729  082B               	movf	??_setBuz,w
 16230  172A  0021               	movlb	1	; select bank1
 16231  172B  00B4               	movwf	(_Buz1^(0+128)+4)
 16232                           
 16233                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16234  172C  0020               	movlb	0	; select bank0
 16235  172D  082A               	movf	setBuz@time+1,w
 16236  172E  0021               	movlb	1	; select bank1
 16237  172F  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 16238  1730  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 16239  1731  0020               	movlb	0	; select bank0
 16240  1732  0829               	movf	setBuz@time,w
 16241  1733  0021               	movlb	1	; select bank1
 16242  1734  01B8               	clrf	(_Buz1^(0+128)+8)
 16243  1735  07B8               	addwf	(_Buz1^(0+128)+8),f
 16244                           
 16245                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16246  1736  0008               	return
 16247  1737                     l86:	
 16248  1737  1A30               	btfsc	_Buz1^(0+128),4
 16249  1738  0008               	return
 16250                           
 16251                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16252  1739  1630               	bsf	_Buz1^(0+128),4
 16253                           
 16254                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16255  173A  0020               	movlb	0	; select bank0
 16256  173B  082C               	movf	setBuz@count,w
 16257  173C  00AB               	movwf	??_setBuz
 16258  173D  082B               	movf	??_setBuz,w
 16259  173E  0021               	movlb	1	; select bank1
 16260  173F  00B5               	movwf	(_Buz1^(0+128)+5)
 16261                           
 16262                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16263  1740  0020               	movlb	0	; select bank0
 16264  1741  082A               	movf	setBuz@time+1,w
 16265  1742  0021               	movlb	1	; select bank1
 16266  1743  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 16267  1744  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 16268  1745  0020               	movlb	0	; select bank0
 16269  1746  0829               	movf	setBuz@time,w
 16270  1747  0021               	movlb	1	; select bank1
 16271  1748  01BA               	clrf	(_Buz1^(0+128)+10)
 16272  1749  07BA               	addwf	(_Buz1^(0+128)+10),f
 16273  174A  0008               	return
 16274  174B                     __end_of_setBuz:	
 16275                           
 16276                           	psect	text106
 16277  07AC                     __ptext106:	
 16278 ;; *************** function ___awdiv *****************
 16279 ;; Defined at:
 16280 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16281 ;; Parameters:    Size  Location     Type
 16282 ;;  divisor         2    0[BANK0 ] int 
 16283 ;;  dividend        2    2[BANK0 ] int 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  quotient        2    7[BANK0 ] int 
 16286 ;;  sign            1    6[BANK0 ] unsigned char 
 16287 ;;  counter         1    5[BANK0 ] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  2    0[BANK0 ] int 
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16297 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;Total ram usage:        9 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    5
 16304 ;; This function calls:
 16305 ;;		Nothing
 16306 ;; This function is called by:
 16307 ;;		_setBuz
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           
 16312                           ;psect for function ___awdiv
 16313  07AC                     ___awdiv:	
 16314                           
 16315                           ;incstack = 0
 16316                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16317  07AC  0020               	movlb	0	; select bank0
 16318  07AD  01A6               	clrf	___awdiv@sign
 16319  07AE  1FA1               	btfss	___awdiv@divisor+1,7
 16320  07AF  2FB7               	goto	l5675
 16321  07B0  09A0               	comf	___awdiv@divisor,f
 16322  07B1  09A1               	comf	___awdiv@divisor+1,f
 16323  07B2  0AA0               	incf	___awdiv@divisor,f
 16324  07B3  1903               	skipnz
 16325  07B4  0AA1               	incf	___awdiv@divisor+1,f
 16326  07B5  01A6               	clrf	___awdiv@sign
 16327  07B6  0AA6               	incf	___awdiv@sign,f
 16328  07B7                     l5675:	
 16329  07B7  1FA3               	btfss	___awdiv@dividend+1,7
 16330  07B8  2FC2               	goto	l5681
 16331  07B9  09A2               	comf	___awdiv@dividend,f
 16332  07BA  09A3               	comf	___awdiv@dividend+1,f
 16333  07BB  0AA2               	incf	___awdiv@dividend,f
 16334  07BC  1903               	skipnz
 16335  07BD  0AA3               	incf	___awdiv@dividend+1,f
 16336  07BE  3001               	movlw	1
 16337  07BF  00A4               	movwf	??___awdiv
 16338  07C0  0824               	movf	??___awdiv,w
 16339  07C1  06A6               	xorwf	___awdiv@sign,f
 16340  07C2                     l5681:	
 16341  07C2  01A7               	clrf	___awdiv@quotient
 16342  07C3  01A8               	clrf	___awdiv@quotient+1
 16343  07C4  0821               	movf	___awdiv@divisor+1,w
 16344  07C5  0420               	iorwf	___awdiv@divisor,w
 16345  07C6  1903               	skipnz
 16346  07C7  2FF1               	goto	l5703
 16347  07C8  01A5               	clrf	___awdiv@counter
 16348  07C9  0AA5               	incf	___awdiv@counter,f
 16349  07CA                     l5691:	
 16350  07CA  1BA1               	btfsc	___awdiv@divisor+1,7
 16351  07CB  2FD6               	goto	l5693
 16352  07CC  3001               	movlw	1
 16353  07CD                     u4695:	
 16354  07CD  35A0               	lslf	___awdiv@divisor,f
 16355  07CE  0DA1               	rlf	___awdiv@divisor+1,f
 16356  07CF  0B89               	decfsz	9,f
 16357  07D0  2FCD               	goto	u4695
 16358  07D1  3001               	movlw	1
 16359  07D2  00A4               	movwf	??___awdiv
 16360  07D3  0824               	movf	??___awdiv,w
 16361  07D4  07A5               	addwf	___awdiv@counter,f
 16362  07D5  2FCA               	goto	l5691
 16363  07D6                     l5693:	
 16364  07D6  3001               	movlw	1
 16365  07D7                     u4715:	
 16366  07D7  35A7               	lslf	___awdiv@quotient,f
 16367  07D8  0DA8               	rlf	___awdiv@quotient+1,f
 16368  07D9  0B89               	decfsz	9,f
 16369  07DA  2FD7               	goto	u4715
 16370  07DB  0821               	movf	___awdiv@divisor+1,w
 16371  07DC  0223               	subwf	___awdiv@dividend+1,w
 16372  07DD  1D03               	skipz
 16373  07DE  2FE1               	goto	u4725
 16374  07DF  0820               	movf	___awdiv@divisor,w
 16375  07E0  0222               	subwf	___awdiv@dividend,w
 16376  07E1                     u4725:	
 16377  07E1  1C03               	skipc
 16378  07E2  2FE8               	goto	l5699
 16379  07E3  0820               	movf	___awdiv@divisor,w
 16380  07E4  02A2               	subwf	___awdiv@dividend,f
 16381  07E5  0821               	movf	___awdiv@divisor+1,w
 16382  07E6  3BA3               	subwfb	___awdiv@dividend+1,f
 16383  07E7  1427               	bsf	___awdiv@quotient,0
 16384  07E8                     l5699:	
 16385  07E8  3001               	movlw	1
 16386  07E9                     u4735:	
 16387  07E9  36A1               	lsrf	___awdiv@divisor+1,f
 16388  07EA  0CA0               	rrf	___awdiv@divisor,f
 16389  07EB  0B89               	decfsz	9,f
 16390  07EC  2FE9               	goto	u4735
 16391  07ED  3001               	movlw	1
 16392  07EE  02A5               	subwf	___awdiv@counter,f
 16393  07EF  1D03               	btfss	3,2
 16394  07F0  2FD6               	goto	l5693
 16395  07F1                     l5703:	
 16396  07F1  0826               	movf	___awdiv@sign,w
 16397  07F2  1903               	btfsc	3,2
 16398  07F3  2FF9               	goto	l5707
 16399  07F4  09A7               	comf	___awdiv@quotient,f
 16400  07F5  09A8               	comf	___awdiv@quotient+1,f
 16401  07F6  0AA7               	incf	___awdiv@quotient,f
 16402  07F7  1903               	skipnz
 16403  07F8  0AA8               	incf	___awdiv@quotient+1,f
 16404  07F9                     l5707:	
 16405  07F9  0828               	movf	___awdiv@quotient+1,w
 16406  07FA  01A1               	clrf	?___awdiv+1
 16407  07FB  07A1               	addwf	?___awdiv+1,f
 16408  07FC  0827               	movf	___awdiv@quotient,w
 16409  07FD  01A0               	clrf	?___awdiv
 16410  07FE  07A0               	addwf	?___awdiv,f
 16411  07FF  0008               	return
 16412  0800                     __end_of___awdiv:	
 16413                           
 16414                           	psect	text107
 16415  1C3C                     __ptext107:	
 16416 ;; *************** function _DelayOff_Initialization *****************
 16417 ;; Defined at:
 16418 ;;		line 26 in file "../src/DelayOff_B1.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;		None
 16421 ;; Auto vars:     Size  Location     Type
 16422 ;;		None
 16423 ;; Return value:  Size  Location     Type
 16424 ;;		None               void
 16425 ;; Registers used:
 16426 ;;		wreg, status,2, status,0, pclath, cstack
 16427 ;; Tracked objects:
 16428 ;;		On entry : 0/0
 16429 ;;		On exit  : 0/0
 16430 ;;		Unchanged: 0/0
 16431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;Total ram usage:        0 bytes
 16437 ;; Hardware stack levels used:    1
 16438 ;; Hardware stack levels required when called:    7
 16439 ;; This function calls:
 16440 ;;		_DlyOff_Initialization
 16441 ;; This function is called by:
 16442 ;;		_main
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           
 16447                           ;psect for function _DelayOff_Initialization
 16448  1C3C                     _DelayOff_Initialization:	
 16449                           
 16450                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16451                           
 16452                           ;incstack = 0
 16453                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16454  1C3C  3001               	movlw	1
 16455  1C3D  319C  245A         	fcall	_DlyOff_Initialization
 16456  1C3F  0008               	return
 16457  1C40                     __end_of_DelayOff_Initialization:	
 16458                           
 16459                           	psect	text108
 16460  1C5A                     __ptext108:	
 16461 ;; *************** function _DlyOff_Initialization *****************
 16462 ;; Defined at:
 16463 ;;		line 56 in file "../src/DelayOff_B1.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;  sw              1    wreg     unsigned char 
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;  sw              1    2[BANK0 ] unsigned char 
 16468 ;; Return value:  Size  Location     Type
 16469 ;;		None               void
 16470 ;; Registers used:
 16471 ;;		wreg, status,2, status,0, pclath, cstack
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;Total ram usage:        1 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    6
 16484 ;; This function calls:
 16485 ;;		_DelayOffPointSelect
 16486 ;; This function is called by:
 16487 ;;		_DelayOff_Initialization
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function _DlyOff_Initialization
 16493  1C5A                     _DlyOff_Initialization:	
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16497                           ;DlyOff_Initialization@sw stored from wreg
 16498  1C5A  0020               	movlb	0	; select bank0
 16499  1C5B  00A2               	movwf	DlyOff_Initialization@sw
 16500                           
 16501                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16502  1C5C  0822               	movf	DlyOff_Initialization@sw,w
 16503  1C5D  319C  24BD         	fcall	_DelayOffPointSelect
 16504  1C5F  0008               	return
 16505  1C60                     __end_of_DlyOff_Initialization:	
 16506                           
 16507                           	psect	text109
 16508  1CBD                     __ptext109:	
 16509 ;; *************** function _DelayOffPointSelect *****************
 16510 ;; Defined at:
 16511 ;;		line 7 in file "../src/DelayOff_B1.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;  sw              1    wreg     unsigned char 
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;  sw              1    1[BANK0 ] unsigned char 
 16516 ;; Return value:  Size  Location     Type
 16517 ;;		None               void
 16518 ;; Registers used:
 16519 ;;		wreg
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;Total ram usage:        2 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    5
 16532 ;; This function calls:
 16533 ;;		Nothing
 16534 ;; This function is called by:
 16535 ;;		_DlyOff_Initialization
 16536 ;;		_DlyOff_Main
 16537 ;;		_setDelayOff_GO
 16538 ;;		_getDelayOff_GO
 16539 ;; This function uses a non-reentrant model
 16540 ;;
 16541                           
 16542                           
 16543                           ;psect for function _DelayOffPointSelect
 16544  1CBD                     _DelayOffPointSelect:	
 16545                           
 16546                           ;incstack = 0
 16547                           ; Regs used in _DelayOffPointSelect: [wreg]
 16548                           ;DelayOffPointSelect@sw stored from wreg
 16549  1CBD  0020               	movlb	0	; select bank0
 16550  1CBE  00A1               	movwf	DelayOffPointSelect@sw
 16551                           
 16552                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16553  1CBF  0821               	movf	DelayOffPointSelect@sw,w
 16554  1CC0  3A01               	xorlw	1
 16555  1CC1  1D03               	skipz
 16556  1CC2  0008               	return
 16557                           
 16558                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16559  1CC3  30DD               	movlw	_DlySw1& (0+255)
 16560  1CC4  00A0               	movwf	??_DelayOffPointSelect
 16561  1CC5  0820               	movf	??_DelayOffPointSelect,w
 16562  1CC6  00F8               	movwf	_DelayOff
 16563  1CC7  0008               	return
 16564  1CC8                     __end_of_DelayOffPointSelect:	
 16565                           
 16566                           	psect	text110
 16567  1E96                     __ptext110:	
 16568 ;; *************** function _CC2500_PowerOnInitial *****************
 16569 ;; Defined at:
 16570 ;;		line 122 in file "../src/CC2500_B1.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;		None
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;		None
 16575 ;; Return value:  Size  Location     Type
 16576 ;;		None               void
 16577 ;; Registers used:
 16578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;Total ram usage:        0 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    8
 16591 ;; This function calls:
 16592 ;;		_CC2500_ClearRXFIFO
 16593 ;;		_CC2500_ClearTXFIFO
 16594 ;;		_CC2500_FrequencyCabr
 16595 ;;		_CC2500_InitPATable
 16596 ;;		_CC2500_InitSetREG
 16597 ;;		_CC2500_PowerRST
 16598 ;;		_CC2500_SIDLEMode
 16599 ;; This function is called by:
 16600 ;;		_main
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           
 16605                           ;psect for function _CC2500_PowerOnInitial
 16606  1E96                     _CC2500_PowerOnInitial:	
 16607                           
 16608                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16609                           
 16610                           ;incstack = 0
 16611                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16612  1E96  3194  2483  319E   	fcall	_CC2500_PowerRST
 16613                           
 16614                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16615  1E99  3191  2151  319E   	fcall	_CC2500_InitSetREG
 16616                           
 16617                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16618  1E9C  319F  2740  319E   	fcall	_CC2500_InitPATable
 16619                           
 16620                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16621  1E9F  319C  2434  319E   	fcall	_CC2500_ClearTXFIFO
 16622                           
 16623                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16624  1EA2  319C  2430  319E   	fcall	_CC2500_ClearRXFIFO
 16625                           
 16626                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16627  1EA5  319D  250A  319E   	fcall	_CC2500_FrequencyCabr
 16628                           
 16629                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16630  1EA8  319C  2438         	fcall	_CC2500_SIDLEMode
 16631  1EAA  0008               	return
 16632  1EAB                     __end_of_CC2500_PowerOnInitial:	
 16633                           
 16634                           	psect	text111
 16635  1C38                     __ptext111:	
 16636 ;; *************** function _CC2500_SIDLEMode *****************
 16637 ;; Defined at:
 16638 ;;		line 212 in file "../src/CC2500_B1.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;		None
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;		None
 16643 ;; Return value:  Size  Location     Type
 16644 ;;		None               void
 16645 ;; Registers used:
 16646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16647 ;; Tracked objects:
 16648 ;;		On entry : 0/0
 16649 ;;		On exit  : 0/0
 16650 ;;		Unchanged: 0/0
 16651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;Total ram usage:        0 bytes
 16657 ;; Hardware stack levels used:    1
 16658 ;; Hardware stack levels required when called:    7
 16659 ;; This function calls:
 16660 ;;		_CC2500_WriteCommand
 16661 ;; This function is called by:
 16662 ;;		_CC2500_PowerOnInitial
 16663 ;; This function uses a non-reentrant model
 16664 ;;
 16665                           
 16666                           
 16667                           ;psect for function _CC2500_SIDLEMode
 16668  1C38                     _CC2500_SIDLEMode:	
 16669                           
 16670                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16671                           
 16672                           ;incstack = 0
 16673                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16674  1C38  3036               	movlw	54
 16675  1C39  319E  26EF         	fcall	_CC2500_WriteCommand
 16676  1C3B  0008               	return
 16677  1C3C                     __end_of_CC2500_SIDLEMode:	
 16678                           
 16679                           	psect	text112
 16680  1483                     __ptext112:	
 16681 ;; *************** function _CC2500_PowerRST *****************
 16682 ;; Defined at:
 16683 ;;		line 135 in file "../src/CC2500_B1.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;		None
 16686 ;; Auto vars:     Size  Location     Type
 16687 ;;		None
 16688 ;; Return value:  Size  Location     Type
 16689 ;;		None               void
 16690 ;; Registers used:
 16691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16692 ;; Tracked objects:
 16693 ;;		On entry : 0/0
 16694 ;;		On exit  : 0/0
 16695 ;;		Unchanged: 0/0
 16696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;Total ram usage:        1 bytes
 16702 ;; Hardware stack levels used:    1
 16703 ;; Hardware stack levels required when called:    6
 16704 ;; This function calls:
 16705 ;;		_CC2500_WriteByte
 16706 ;;		_DelayTime_1us
 16707 ;;		_Timeout_Counter
 16708 ;;		_set_TimeoutCleared
 16709 ;; This function is called by:
 16710 ;;		_CC2500_PowerOnInitial
 16711 ;; This function uses a non-reentrant model
 16712 ;;
 16713                           
 16714                           
 16715                           ;psect for function _CC2500_PowerRST
 16716  1483                     _CC2500_PowerRST:	
 16717                           
 16718                           ;CC2500_B1.c: 136: RC3 = 0;
 16719                           
 16720                           ;incstack = 0
 16721                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16722  1483  0020               	movlb	0	; select bank0
 16723  1484  118E               	bcf	14,3	;volatile
 16724                           
 16725                           ;CC2500_B1.c: 137: RC4 = 0;
 16726  1485  120E               	bcf	14,4	;volatile
 16727                           
 16728                           ;CC2500_B1.c: 138: RC0 = 1;
 16729  1486  140E               	bsf	14,0	;volatile
 16730                           
 16731                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16732  1487  300A               	movlw	10
 16733  1488  00A0               	movwf	DelayTime_1us@count
 16734  1489  3000               	movlw	0
 16735  148A  00A1               	movwf	DelayTime_1us@count+1
 16736  148B  3191  2104  3194   	fcall	_DelayTime_1us
 16737                           
 16738                           ;CC2500_B1.c: 140: RC0 = 0;
 16739  148E  0020               	movlb	0	; select bank0
 16740  148F  100E               	bcf	14,0	;volatile
 16741                           
 16742                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16743  1490  300A               	movlw	10
 16744  1491  00A0               	movwf	DelayTime_1us@count
 16745  1492  3000               	movlw	0
 16746  1493  00A1               	movwf	DelayTime_1us@count+1
 16747  1494  3191  2104  3194   	fcall	_DelayTime_1us
 16748                           
 16749                           ;CC2500_B1.c: 142: RC0 = 1;
 16750  1497  0020               	movlb	0	; select bank0
 16751  1498  140E               	bsf	14,0	;volatile
 16752                           
 16753                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16754  1499  3028               	movlw	40
 16755  149A  00A0               	movwf	DelayTime_1us@count
 16756  149B  3000               	movlw	0
 16757  149C  00A1               	movwf	DelayTime_1us@count+1
 16758  149D  3191  2104  3194   	fcall	_DelayTime_1us
 16759                           
 16760                           ;CC2500_B1.c: 144: RC0 = 0;
 16761  14A0  0020               	movlb	0	; select bank0
 16762  14A1  100E               	bcf	14,0	;volatile
 16763                           
 16764                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16765  14A2  3030               	movlw	48
 16766  14A3  00A6               	movwf	??_CC2500_PowerRST
 16767  14A4  0826               	movf	??_CC2500_PowerRST,w
 16768  14A5  00FB               	movwf	_SPI0Buffer
 16769                           
 16770                           ;CC2500_B1.c: 146: while (RC5 == 1 && myMain.Timeout == 0) {
 16771  14A6  2CAA               	goto	l6615
 16772  14A7                     l6613:	
 16773                           
 16774                           ;CC2500_B1.c: 147: Timeout_Counter();
 16775  14A7  319E  2681  3194   	fcall	_Timeout_Counter
 16776  14AA                     l6615:	
 16777  14AA  0020               	movlb	0	; select bank0
 16778  14AB  1E8E               	btfss	14,5	;volatile
 16779  14AC  2CB0               	goto	l6619
 16780  14AD  0021               	movlb	1	; select bank1
 16781  14AE  1D2D               	btfss	(_myMain^(0+128)+13),2
 16782  14AF  2CA7               	goto	l6613
 16783  14B0                     l6619:	
 16784                           
 16785                           ;CC2500_B1.c: 148: };
 16786                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16787  14B0  319C  2450  3194   	fcall	_set_TimeoutCleared
 16788                           
 16789                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16790  14B3  319E  2659  3194   	fcall	_CC2500_WriteByte
 16791                           
 16792                           ;CC2500_B1.c: 151: while (RC5 == 1 && myMain.Timeout == 0) {
 16793  14B6  2CBA               	goto	l6625
 16794  14B7                     l6623:	
 16795                           
 16796                           ;CC2500_B1.c: 152: Timeout_Counter();
 16797  14B7  319E  2681  3194   	fcall	_Timeout_Counter
 16798  14BA                     l6625:	
 16799  14BA  0020               	movlb	0	; select bank0
 16800  14BB  1E8E               	btfss	14,5	;volatile
 16801  14BC  2CC0               	goto	l6629
 16802  14BD  0021               	movlb	1	; select bank1
 16803  14BE  1D2D               	btfss	(_myMain^(0+128)+13),2
 16804  14BF  2CB7               	goto	l6623
 16805  14C0                     l6629:	
 16806                           
 16807                           ;CC2500_B1.c: 153: };
 16808                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16809  14C0  319C  2450         	fcall	_set_TimeoutCleared
 16810                           
 16811                           ;CC2500_B1.c: 155: RC4 = 0;
 16812  14C2  0020               	movlb	0	; select bank0
 16813  14C3  120E               	bcf	14,4	;volatile
 16814                           
 16815                           ;CC2500_B1.c: 156: RC0 = 1;
 16816  14C4  140E               	bsf	14,0	;volatile
 16817  14C5  0008               	return
 16818  14C6                     __end_of_CC2500_PowerRST:	
 16819                           
 16820                           	psect	text113
 16821  1151                     __ptext113:	
 16822 ;; *************** function _CC2500_InitSetREG *****************
 16823 ;; Defined at:
 16824 ;;		line 162 in file "../src/CC2500_B1.c"
 16825 ;; Parameters:    Size  Location     Type
 16826 ;;		None
 16827 ;; Auto vars:     Size  Location     Type
 16828 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16829 ;;  temp2           1    7[BANK0 ] unsigned char 
 16830 ;;  temp1           1    6[BANK0 ] unsigned char 
 16831 ;; Return value:  Size  Location     Type
 16832 ;;		None               void
 16833 ;; Registers used:
 16834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16835 ;; Tracked objects:
 16836 ;;		On entry : 0/0
 16837 ;;		On exit  : 0/0
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16843 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16844 ;;Total ram usage:        4 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; Hardware stack levels required when called:    7
 16847 ;; This function calls:
 16848 ;;		_CC2500_WriteREG
 16849 ;; This function is called by:
 16850 ;;		_CC2500_PowerOnInitial
 16851 ;; This function uses a non-reentrant model
 16852 ;;
 16853                           
 16854                           
 16855                           ;psect for function _CC2500_InitSetREG
 16856  1151                     _CC2500_InitSetREG:	
 16857                           
 16858                           ;CC2500_B1.c: 163: unsigned char loop_c;
 16859                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 16860                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 16861                           
 16862                           ;incstack = 0
 16863                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16864  1151  0020               	movlb	0	; select bank0
 16865  1152  01A8               	clrf	CC2500_InitSetREG@loop_c
 16866  1153                     L9:	
 16867  1153  302F               	movlw	47
 16868  1154  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16869  1155  1803               	btfsc	3,0
 16870  1156  0008               	return
 16871                           
 16872                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 16873  1157  0828               	movf	CC2500_InitSetREG@loop_c,w
 16874  1158  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16875  1159  0084               	movwf	4
 16876  115A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16877  115B  1803               	skipnc
 16878  115C  3E01               	addlw	1
 16879  115D  0085               	movwf	5
 16880  115E  0800               	movf	0,w	;code access
 16881  115F  00A5               	movwf	??_CC2500_InitSetREG
 16882  1160  0825               	movf	??_CC2500_InitSetREG,w
 16883  1161  00A6               	movwf	CC2500_InitSetREG@temp1
 16884                           
 16885                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 16886  1162  0828               	movf	CC2500_InitSetREG@loop_c,w
 16887  1163  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16888  1164  0084               	movwf	4
 16889  1165  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16890  1166  1803               	skipnc
 16891  1167  3E01               	addlw	1
 16892  1168  0085               	movwf	5
 16893  1169  0800               	movf	0,w	;code access
 16894  116A  00A5               	movwf	??_CC2500_InitSetREG
 16895  116B  0825               	movf	??_CC2500_InitSetREG,w
 16896  116C  00A7               	movwf	CC2500_InitSetREG@temp2
 16897                           
 16898                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 16899  116D  0827               	movf	CC2500_InitSetREG@temp2,w
 16900  116E  00A5               	movwf	??_CC2500_InitSetREG
 16901  116F  0825               	movf	??_CC2500_InitSetREG,w
 16902  1170  00A2               	movwf	CC2500_WriteREG@value
 16903  1171  0826               	movf	CC2500_InitSetREG@temp1,w
 16904  1172  319F  27DF  3191   	fcall	_CC2500_WriteREG
 16905  1175  3001               	movlw	1
 16906  1176  0020               	movlb	0	; select bank0
 16907  1177  00A5               	movwf	??_CC2500_InitSetREG
 16908  1178  0825               	movf	??_CC2500_InitSetREG,w
 16909  1179  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16910  117A  2953               	goto	L9
 16911  117B                     __end_of_CC2500_InitSetREG:	
 16912                           
 16913                           	psect	text114
 16914  1F40                     __ptext114:	
 16915 ;; *************** function _CC2500_InitPATable *****************
 16916 ;; Defined at:
 16917 ;;		line 177 in file "../src/CC2500_B1.c"
 16918 ;; Parameters:    Size  Location     Type
 16919 ;;		None
 16920 ;; Auto vars:     Size  Location     Type
 16921 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16922 ;;  temp            1    6[BANK0 ] unsigned char 
 16923 ;; Return value:  Size  Location     Type
 16924 ;;		None               void
 16925 ;; Registers used:
 16926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16927 ;; Tracked objects:
 16928 ;;		On entry : 0/0
 16929 ;;		On exit  : 0/0
 16930 ;;		Unchanged: 0/0
 16931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;Total ram usage:        3 bytes
 16937 ;; Hardware stack levels used:    1
 16938 ;; Hardware stack levels required when called:    7
 16939 ;; This function calls:
 16940 ;;		_CC2500_WriteREG
 16941 ;; This function is called by:
 16942 ;;		_CC2500_PowerOnInitial
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           
 16947                           ;psect for function _CC2500_InitPATable
 16948  1F40                     _CC2500_InitPATable:	
 16949                           
 16950                           ;CC2500_B1.c: 178: unsigned char loop_d;
 16951                           ;CC2500_B1.c: 179: unsigned char temp;
 16952                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 16953                           
 16954                           ;incstack = 0
 16955                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16956  1F40  0020               	movlb	0	; select bank0
 16957  1F41  01A7               	clrf	CC2500_InitPATable@loop_d
 16958  1F42                     L10:	
 16959  1F42  3008               	movlw	8
 16960  1F43  0227               	subwf	CC2500_InitPATable@loop_d,w
 16961  1F44  1803               	btfsc	3,0
 16962  1F45  0008               	return
 16963                           
 16964                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 16965  1F46  0827               	movf	CC2500_InitPATable@loop_d,w
 16966  1F47  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16967  1F48  0084               	movwf	4
 16968  1F49  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16969  1F4A  1803               	skipnc
 16970  1F4B  3E01               	addlw	1
 16971  1F4C  0085               	movwf	5
 16972  1F4D  0800               	movf	0,w	;code access
 16973  1F4E  00A5               	movwf	??_CC2500_InitPATable
 16974  1F4F  0825               	movf	??_CC2500_InitPATable,w
 16975  1F50  00A6               	movwf	CC2500_InitPATable@temp
 16976                           
 16977                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 16978  1F51  0826               	movf	CC2500_InitPATable@temp,w
 16979  1F52  00A5               	movwf	??_CC2500_InitPATable
 16980  1F53  0825               	movf	??_CC2500_InitPATable,w
 16981  1F54  00A2               	movwf	CC2500_WriteREG@value
 16982  1F55  303E               	movlw	62
 16983  1F56  319F  27DF  319F   	fcall	_CC2500_WriteREG
 16984  1F59  3001               	movlw	1
 16985  1F5A  0020               	movlb	0	; select bank0
 16986  1F5B  00A5               	movwf	??_CC2500_InitPATable
 16987  1F5C  0825               	movf	??_CC2500_InitPATable,w
 16988  1F5D  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16989  1F5E  2F42               	goto	L10
 16990  1F5F                     __end_of_CC2500_InitPATable:	
 16991                           
 16992                           	psect	text115
 16993  1FDF                     __ptext115:	
 16994 ;; *************** function _CC2500_WriteREG *****************
 16995 ;; Defined at:
 16996 ;;		line 254 in file "../src/CC2500_B1.c"
 16997 ;; Parameters:    Size  Location     Type
 16998 ;;  w_addr          1    wreg     unsigned char 
 16999 ;;  value           1    2[BANK0 ] unsigned char 
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17002 ;; Return value:  Size  Location     Type
 17003 ;;		None               void
 17004 ;; Registers used:
 17005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17006 ;; Tracked objects:
 17007 ;;		On entry : 0/0
 17008 ;;		On exit  : 0/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17011 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17015 ;;Total ram usage:        3 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; Hardware stack levels required when called:    6
 17018 ;; This function calls:
 17019 ;;		_CC2500_WriteByte
 17020 ;;		_Timeout_Counter
 17021 ;;		_set_TimeoutCleared
 17022 ;; This function is called by:
 17023 ;;		_CC2500_InitSetREG
 17024 ;;		_CC2500_InitPATable
 17025 ;; This function uses a non-reentrant model
 17026 ;;
 17027                           
 17028                           
 17029                           ;psect for function _CC2500_WriteREG
 17030  1FDF                     _CC2500_WriteREG:	
 17031                           
 17032                           ;incstack = 0
 17033                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17034                           ;CC2500_WriteREG@w_addr stored from wreg
 17035  1FDF  0020               	movlb	0	; select bank0
 17036  1FE0  00A4               	movwf	CC2500_WriteREG@w_addr
 17037                           
 17038                           ;CC2500_B1.c: 255: RC0 = 0;
 17039  1FE1  100E               	bcf	14,0	;volatile
 17040                           
 17041                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17042  1FE2  0824               	movf	CC2500_WriteREG@w_addr,w
 17043  1FE3  00A3               	movwf	??_CC2500_WriteREG
 17044  1FE4  0823               	movf	??_CC2500_WriteREG,w
 17045  1FE5  00FB               	movwf	_SPI0Buffer
 17046                           
 17047                           ;CC2500_B1.c: 257: while (RC5 == 1 && myMain.Timeout == 0) {
 17048  1FE6  2FEA               	goto	l6305
 17049  1FE7                     l6303:	
 17050                           
 17051                           ;CC2500_B1.c: 258: Timeout_Counter();
 17052  1FE7  319E  2681  319F   	fcall	_Timeout_Counter
 17053  1FEA                     l6305:	
 17054  1FEA  0020               	movlb	0	; select bank0
 17055  1FEB  1E8E               	btfss	14,5	;volatile
 17056  1FEC  2FF0               	goto	l6309
 17057  1FED  0021               	movlb	1	; select bank1
 17058  1FEE  1D2D               	btfss	(_myMain^(0+128)+13),2
 17059  1FEF  2FE7               	goto	l6303
 17060  1FF0                     l6309:	
 17061                           
 17062                           ;CC2500_B1.c: 259: };
 17063                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17064  1FF0  319C  2450  319F   	fcall	_set_TimeoutCleared
 17065                           
 17066                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17067  1FF3  319E  2659  319F   	fcall	_CC2500_WriteByte
 17068                           
 17069                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17070  1FF6  0020               	movlb	0	; select bank0
 17071  1FF7  0822               	movf	CC2500_WriteREG@value,w
 17072  1FF8  00A3               	movwf	??_CC2500_WriteREG
 17073  1FF9  0823               	movf	??_CC2500_WriteREG,w
 17074  1FFA  00FB               	movwf	_SPI0Buffer
 17075                           
 17076                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17077  1FFB  319E  2659         	fcall	_CC2500_WriteByte
 17078                           
 17079                           ;CC2500_B1.c: 265: RC0 = 1;
 17080  1FFD  0020               	movlb	0	; select bank0
 17081  1FFE  140E               	bsf	14,0	;volatile
 17082  1FFF  0008               	return
 17083  2000                     __end_of_CC2500_WriteREG:	
 17084                           
 17085                           	psect	text116
 17086  1D0A                     __ptext116:	
 17087 ;; *************** function _CC2500_FrequencyCabr *****************
 17088 ;; Defined at:
 17089 ;;		line 204 in file "../src/CC2500_B1.c"
 17090 ;; Parameters:    Size  Location     Type
 17091 ;;		None
 17092 ;; Auto vars:     Size  Location     Type
 17093 ;;		None
 17094 ;; Return value:  Size  Location     Type
 17095 ;;		None               void
 17096 ;; Registers used:
 17097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17098 ;; Tracked objects:
 17099 ;;		On entry : 0/0
 17100 ;;		On exit  : 0/0
 17101 ;;		Unchanged: 0/0
 17102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17107 ;;Total ram usage:        0 bytes
 17108 ;; Hardware stack levels used:    1
 17109 ;; Hardware stack levels required when called:    7
 17110 ;; This function calls:
 17111 ;;		_CC2500_WriteCommand
 17112 ;;		_DelayTime_1us
 17113 ;; This function is called by:
 17114 ;;		_CC2500_PowerOnInitial
 17115 ;; This function uses a non-reentrant model
 17116 ;;
 17117                           
 17118                           
 17119                           ;psect for function _CC2500_FrequencyCabr
 17120  1D0A                     _CC2500_FrequencyCabr:	
 17121                           
 17122                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17123                           
 17124                           ;incstack = 0
 17125                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17126  1D0A  3033               	movlw	51
 17127  1D0B  319E  26EF  319D   	fcall	_CC2500_WriteCommand
 17128                           
 17129                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17130  1D0E  30E8               	movlw	232
 17131  1D0F  0020               	movlb	0	; select bank0
 17132  1D10  00A0               	movwf	DelayTime_1us@count
 17133  1D11  3003               	movlw	3
 17134  1D12  00A1               	movwf	DelayTime_1us@count+1
 17135  1D13  3191  2104         	fcall	_DelayTime_1us
 17136  1D15  0008               	return
 17137  1D16                     __end_of_CC2500_FrequencyCabr:	
 17138                           
 17139                           	psect	text117
 17140  1104                     __ptext117:	
 17141 ;; *************** function _DelayTime_1us *****************
 17142 ;; Defined at:
 17143 ;;		line 323 in file "../src/CC2500_B1.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;  count           2    0[BANK0 ] int 
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;  j               2    4[BANK0 ] unsigned int 
 17148 ;;  i               2    2[BANK0 ] unsigned int 
 17149 ;; Return value:  Size  Location     Type
 17150 ;;		None               void
 17151 ;; Registers used:
 17152 ;;		wreg, status,2
 17153 ;; Tracked objects:
 17154 ;;		On entry : 0/0
 17155 ;;		On exit  : 0/0
 17156 ;;		Unchanged: 0/0
 17157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17158 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;Total ram usage:        6 bytes
 17163 ;; Hardware stack levels used:    1
 17164 ;; Hardware stack levels required when called:    5
 17165 ;; This function calls:
 17166 ;;		Nothing
 17167 ;; This function is called by:
 17168 ;;		_CC2500_PowerRST
 17169 ;;		_CC2500_FrequencyCabr
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           
 17174                           ;psect for function _DelayTime_1us
 17175  1104                     _DelayTime_1us:	
 17176                           
 17177                           ;CC2500_B1.c: 324: unsigned int i, j;
 17178                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17179                           
 17180                           ;incstack = 0
 17181                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17182  1104  3001               	movlw	1
 17183  1105  0020               	movlb	0	; select bank0
 17184  1106  00A2               	movwf	DelayTime_1us@i
 17185  1107  3000               	movlw	0
 17186  1108  00A3               	movwf	DelayTime_1us@i+1
 17187  1109                     l350:	
 17188  1109  0821               	movf	DelayTime_1us@count+1,w
 17189  110A  0223               	subwf	DelayTime_1us@i+1,w
 17190  110B  1D03               	skipz
 17191  110C  290F               	goto	u5495
 17192  110D  0820               	movf	DelayTime_1us@count,w
 17193  110E  0222               	subwf	DelayTime_1us@i,w
 17194  110F                     u5495:	
 17195  110F  1803               	btfsc	3,0
 17196  1110  0008               	return
 17197                           
 17198                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17199  1111  01A4               	clrf	DelayTime_1us@j
 17200  1112  01A5               	clrf	DelayTime_1us@j+1
 17201  1113  3000               	movlw	0
 17202  1114  0225               	subwf	DelayTime_1us@j+1,w
 17203  1115  3002               	movlw	2
 17204  1116  1903               	skipnz
 17205  1117  0224               	subwf	DelayTime_1us@j,w
 17206  1118  1803               	btfsc	3,0
 17207  1119  2925               	goto	l6297
 17208  111A                     l6295:	
 17209  111A  3001               	movlw	1
 17210  111B  07A4               	addwf	DelayTime_1us@j,f
 17211  111C  3000               	movlw	0
 17212  111D  3DA5               	addwfc	DelayTime_1us@j+1,f
 17213  111E  3000               	movlw	0
 17214  111F  0225               	subwf	DelayTime_1us@j+1,w
 17215  1120  3002               	movlw	2
 17216  1121  1903               	skipnz
 17217  1122  0224               	subwf	DelayTime_1us@j,w
 17218  1123  1C03               	skipc
 17219  1124  291A               	goto	l6295
 17220  1125                     l6297:	
 17221  1125  3001               	movlw	1
 17222  1126  07A2               	addwf	DelayTime_1us@i,f
 17223  1127  3000               	movlw	0
 17224  1128  3DA3               	addwfc	DelayTime_1us@i+1,f
 17225  1129  2909               	goto	l350
 17226  112A                     __end_of_DelayTime_1us:	
 17227                           
 17228                           	psect	text118
 17229  1C34                     __ptext118:	
 17230 ;; *************** function _CC2500_ClearTXFIFO *****************
 17231 ;; Defined at:
 17232 ;;		line 190 in file "../src/CC2500_B1.c"
 17233 ;; Parameters:    Size  Location     Type
 17234 ;;		None
 17235 ;; Auto vars:     Size  Location     Type
 17236 ;;		None
 17237 ;; Return value:  Size  Location     Type
 17238 ;;		None               void
 17239 ;; Registers used:
 17240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17241 ;; Tracked objects:
 17242 ;;		On entry : 0/0
 17243 ;;		On exit  : 0/0
 17244 ;;		Unchanged: 0/0
 17245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17250 ;;Total ram usage:        0 bytes
 17251 ;; Hardware stack levels used:    1
 17252 ;; Hardware stack levels required when called:    7
 17253 ;; This function calls:
 17254 ;;		_CC2500_WriteCommand
 17255 ;; This function is called by:
 17256 ;;		_CC2500_PowerOnInitial
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           
 17261                           ;psect for function _CC2500_ClearTXFIFO
 17262  1C34                     _CC2500_ClearTXFIFO:	
 17263                           
 17264                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17265                           
 17266                           ;incstack = 0
 17267                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17268  1C34  303B               	movlw	59
 17269  1C35  319E  26EF         	fcall	_CC2500_WriteCommand
 17270  1C37  0008               	return
 17271  1C38                     __end_of_CC2500_ClearTXFIFO:	
 17272                           
 17273                           	psect	text119
 17274  1C30                     __ptext119:	
 17275 ;; *************** function _CC2500_ClearRXFIFO *****************
 17276 ;; Defined at:
 17277 ;;		line 197 in file "../src/CC2500_B1.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;		None
 17280 ;; Auto vars:     Size  Location     Type
 17281 ;;		None
 17282 ;; Return value:  Size  Location     Type
 17283 ;;		None               void
 17284 ;; Registers used:
 17285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 0/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;Total ram usage:        0 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    7
 17298 ;; This function calls:
 17299 ;;		_CC2500_WriteCommand
 17300 ;; This function is called by:
 17301 ;;		_CC2500_PowerOnInitial
 17302 ;; This function uses a non-reentrant model
 17303 ;;
 17304                           
 17305                           
 17306                           ;psect for function _CC2500_ClearRXFIFO
 17307  1C30                     _CC2500_ClearRXFIFO:	
 17308                           
 17309                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17310                           
 17311                           ;incstack = 0
 17312                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17313  1C30  303A               	movlw	58
 17314  1C31  319E  26EF         	fcall	_CC2500_WriteCommand
 17315  1C33  0008               	return
 17316  1C34                     __end_of_CC2500_ClearRXFIFO:	
 17317                           
 17318                           	psect	text120
 17319  1EEF                     __ptext120:	
 17320 ;; *************** function _CC2500_WriteCommand *****************
 17321 ;; Defined at:
 17322 ;;		line 288 in file "../src/CC2500_B1.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  command         1    wreg     unsigned char 
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;  command         1    3[BANK0 ] unsigned char 
 17327 ;; Return value:  Size  Location     Type
 17328 ;;		None               void
 17329 ;; Registers used:
 17330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;Total ram usage:        2 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; Hardware stack levels required when called:    6
 17343 ;; This function calls:
 17344 ;;		_CC2500_WriteByte
 17345 ;;		_Timeout_Counter
 17346 ;;		_set_TimeoutCleared
 17347 ;; This function is called by:
 17348 ;;		_CC2500_TxData
 17349 ;;		_CC2500_ClearTXFIFO
 17350 ;;		_CC2500_ClearRXFIFO
 17351 ;;		_CC2500_FrequencyCabr
 17352 ;;		_CC2500_SIDLEMode
 17353 ;;		_setRF_Main
 17354 ;;		_RF_RxDisable
 17355 ;; This function uses a non-reentrant model
 17356 ;;
 17357                           
 17358                           
 17359                           ;psect for function _CC2500_WriteCommand
 17360  1EEF                     _CC2500_WriteCommand:	
 17361                           
 17362                           ;incstack = 0
 17363                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17364                           ;CC2500_WriteCommand@command stored from wreg
 17365  1EEF  0020               	movlb	0	; select bank0
 17366  1EF0  00A3               	movwf	CC2500_WriteCommand@command
 17367                           
 17368                           ;CC2500_B1.c: 289: RC0 = 0;
 17369  1EF1  100E               	bcf	14,0	;volatile
 17370                           
 17371                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17372  1EF2  0823               	movf	CC2500_WriteCommand@command,w
 17373  1EF3  00A2               	movwf	??_CC2500_WriteCommand
 17374  1EF4  0822               	movf	??_CC2500_WriteCommand,w
 17375  1EF5  00FB               	movwf	_SPI0Buffer
 17376                           
 17377                           ;CC2500_B1.c: 292: while (RC5 == 1 && myMain.Timeout == 0) {
 17378  1EF6  2EFA               	goto	l6035
 17379  1EF7                     l6033:	
 17380                           
 17381                           ;CC2500_B1.c: 293: Timeout_Counter();
 17382  1EF7  319E  2681  319E   	fcall	_Timeout_Counter
 17383  1EFA                     l6035:	
 17384  1EFA  0020               	movlb	0	; select bank0
 17385  1EFB  1E8E               	btfss	14,5	;volatile
 17386  1EFC  2F00               	goto	l6039
 17387  1EFD  0021               	movlb	1	; select bank1
 17388  1EFE  1D2D               	btfss	(_myMain^(0+128)+13),2
 17389  1EFF  2EF7               	goto	l6033
 17390  1F00                     l6039:	
 17391                           
 17392                           ;CC2500_B1.c: 294: };
 17393                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17394  1F00  319C  2450  319E   	fcall	_set_TimeoutCleared
 17395                           
 17396                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17397  1F03  319E  2659         	fcall	_CC2500_WriteByte
 17398                           
 17399                           ;CC2500_B1.c: 298: RC0 = 1;
 17400  1F05  0020               	movlb	0	; select bank0
 17401  1F06  140E               	bsf	14,0	;volatile
 17402  1F07  0008               	return
 17403  1F08                     __end_of_CC2500_WriteCommand:	
 17404                           
 17405                           	psect	text121
 17406  1C50                     __ptext121:	
 17407 ;; *************** function _set_TimeoutCleared *****************
 17408 ;; Defined at:
 17409 ;;		line 272 in file "../src/Main_B1.c"
 17410 ;; Parameters:    Size  Location     Type
 17411 ;;		None
 17412 ;; Auto vars:     Size  Location     Type
 17413 ;;		None
 17414 ;; Return value:  Size  Location     Type
 17415 ;;		None               void
 17416 ;; Registers used:
 17417 ;;		status,2
 17418 ;; Tracked objects:
 17419 ;;		On entry : 0/0
 17420 ;;		On exit  : 0/0
 17421 ;;		Unchanged: 0/0
 17422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;Total ram usage:        0 bytes
 17428 ;; Hardware stack levels used:    1
 17429 ;; Hardware stack levels required when called:    5
 17430 ;; This function calls:
 17431 ;;		Nothing
 17432 ;; This function is called by:
 17433 ;;		_CC2500_TxData
 17434 ;;		_CC2500_RxData
 17435 ;;		_CC2500_PowerRST
 17436 ;;		_CC2500_WriteREG
 17437 ;;		_CC2500_WriteCommand
 17438 ;;		_CC2500_ReadStatus
 17439 ;;		_getAD
 17440 ;;		_TouchPower
 17441 ;;		_CC2500_ReadREG
 17442 ;; This function uses a non-reentrant model
 17443 ;;
 17444                           
 17445                           
 17446                           ;psect for function _set_TimeoutCleared
 17447  1C50                     _set_TimeoutCleared:	
 17448                           
 17449                           ;Main_B1.c: 273: myMain.Timeout = 0;
 17450                           
 17451                           ;incstack = 0
 17452                           ; Regs used in _set_TimeoutCleared: [status,2]
 17453  1C50  0021               	movlb	1	; select bank1
 17454  1C51  112D               	bcf	(_myMain^(0+128)+13),2
 17455                           
 17456                           ;Main_B1.c: 274: myMain.Timeout_Counter = 0;
 17457  1C52  01AE               	clrf	(_myMain^(0+128)+14)
 17458  1C53  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17459  1C54  0008               	return
 17460  1C55                     __end_of_set_TimeoutCleared:	
 17461                           
 17462                           	psect	text122
 17463  1E81                     __ptext122:	
 17464 ;; *************** function _Timeout_Counter *****************
 17465 ;; Defined at:
 17466 ;;		line 263 in file "../src/Main_B1.c"
 17467 ;; Parameters:    Size  Location     Type
 17468 ;;		None
 17469 ;; Auto vars:     Size  Location     Type
 17470 ;;		None
 17471 ;; Return value:  Size  Location     Type
 17472 ;;		None               void
 17473 ;; Registers used:
 17474 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17475 ;; Tracked objects:
 17476 ;;		On entry : 0/0
 17477 ;;		On exit  : 0/0
 17478 ;;		Unchanged: 0/0
 17479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;Total ram usage:        0 bytes
 17485 ;; Hardware stack levels used:    1
 17486 ;; Hardware stack levels required when called:    5
 17487 ;; This function calls:
 17488 ;;		Nothing
 17489 ;; This function is called by:
 17490 ;;		_CC2500_TxData
 17491 ;;		_CC2500_RxData
 17492 ;;		_CC2500_PowerRST
 17493 ;;		_CC2500_WriteREG
 17494 ;;		_CC2500_WriteCommand
 17495 ;;		_CC2500_ReadStatus
 17496 ;;		_getAD
 17497 ;;		_TouchPower
 17498 ;;		_CC2500_ReadREG
 17499 ;; This function uses a non-reentrant model
 17500 ;;
 17501                           
 17502                           
 17503                           ;psect for function _Timeout_Counter
 17504  1E81                     _Timeout_Counter:	
 17505                           
 17506                           ;Main_B1.c: 264: myMain.Timeout_Counter++;
 17507                           
 17508                           ;incstack = 0
 17509                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17510  1E81  3001               	movlw	1
 17511  1E82  0021               	movlb	1	; select bank1
 17512  1E83  07AE               	addwf	(_myMain^(0+128)+14),f
 17513  1E84  3000               	movlw	0
 17514  1E85  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17515                           
 17516                           ;Main_B1.c: 265: if (myMain.Timeout_Counter == 10000) {
 17517  1E86  300E               	movlw	14
 17518  1E87  3EA0               	addlw	_myMain& (0+255)
 17519  1E88  0086               	movwf	6
 17520  1E89  0187               	clrf	7
 17521  1E8A  3F40               	moviw [0]fsr1
 17522  1E8B  3A10               	xorlw	16
 17523  1E8C  1D03               	skipz
 17524  1E8D  2E90               	goto	u4945
 17525  1E8E  3F41               	moviw [1]fsr1
 17526  1E8F  3A27               	xorlw	39
 17527  1E90                     u4945:	
 17528  1E90  1D03               	skipz
 17529  1E91  0008               	return
 17530                           
 17531                           ;Main_B1.c: 266: myMain.Timeout_Counter = 0;
 17532  1E92  01AE               	clrf	(_myMain^(0+128)+14)
 17533  1E93  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17534                           
 17535                           ;Main_B1.c: 267: myMain.Timeout = 1;
 17536  1E94  152D               	bsf	(_myMain^(0+128)+13),2
 17537  1E95  0008               	return
 17538  1E96                     __end_of_Timeout_Counter:	
 17539                           
 17540                           	psect	text123
 17541  1E59                     __ptext123:	
 17542 ;; *************** function _CC2500_WriteByte *****************
 17543 ;; Defined at:
 17544 ;;		line 222 in file "../src/CC2500_B1.c"
 17545 ;; Parameters:    Size  Location     Type
 17546 ;;		None
 17547 ;; Auto vars:     Size  Location     Type
 17548 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17549 ;; Return value:  Size  Location     Type
 17550 ;;		None               void
 17551 ;; Registers used:
 17552 ;;		wreg, status,2, status,0
 17553 ;; Tracked objects:
 17554 ;;		On entry : 0/0
 17555 ;;		On exit  : 0/0
 17556 ;;		Unchanged: 0/0
 17557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;Total ram usage:        2 bytes
 17563 ;; Hardware stack levels used:    1
 17564 ;; Hardware stack levels required when called:    5
 17565 ;; This function calls:
 17566 ;;		Nothing
 17567 ;; This function is called by:
 17568 ;;		_CC2500_TxData
 17569 ;;		_CC2500_RxData
 17570 ;;		_CC2500_PowerRST
 17571 ;;		_CC2500_WriteREG
 17572 ;;		_CC2500_WriteCommand
 17573 ;;		_CC2500_ReadStatus
 17574 ;;		_CC2500_ReadREG
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           
 17579                           ;psect for function _CC2500_WriteByte
 17580  1E59                     _CC2500_WriteByte:	
 17581                           
 17582                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17583                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17584                           
 17585                           ;incstack = 0
 17586                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17587  1E59  0020               	movlb	0	; select bank0
 17588  1E5A  01A1               	clrf	CC2500_WriteByte@loop_a
 17589  1E5B                     L11:	
 17590  1E5B  3008               	movlw	8
 17591  1E5C  0221               	subwf	CC2500_WriteByte@loop_a,w
 17592  1E5D  1803               	btfsc	3,0
 17593  1E5E  0008               	return
 17594                           
 17595                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17596  1E5F  1FFB               	btfss	_SPI0Buffer,7
 17597  1E60  2E63               	goto	l306
 17598                           
 17599                           ;CC2500_B1.c: 226: RC4 = 1;
 17600  1E61  160E               	bsf	14,4	;volatile
 17601  1E62  2E64               	goto	l307
 17602  1E63                     l306:	
 17603                           
 17604                           ;CC2500_B1.c: 227: else
 17605                           ;CC2500_B1.c: 228: RC4 = 0;
 17606  1E63  120E               	bcf	14,4	;volatile
 17607  1E64                     l307:	
 17608                           
 17609                           ;CC2500_B1.c: 229: RC3 = 1;
 17610  1E64  158E               	bsf	14,3	;volatile
 17611                           
 17612                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17613  1E65  1003               	clrc
 17614  1E66  0DFB               	rlf	_SPI0Buffer,f
 17615                           
 17616                           ;CC2500_B1.c: 231: RC3 = 0;
 17617  1E67  118E               	bcf	14,3	;volatile
 17618  1E68  3001               	movlw	1
 17619  1E69  00A0               	movwf	??_CC2500_WriteByte
 17620  1E6A  0820               	movf	??_CC2500_WriteByte,w
 17621  1E6B  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17622  1E6C  2E5B               	goto	L11
 17623  1E6D                     __end_of_CC2500_WriteByte:	
 17624                           
 17625                           	psect	text124
 17626  150F                     __ptext124:	
 17627 ;; *************** function _Buzzer_Main *****************
 17628 ;; Defined at:
 17629 ;;		line 46 in file "../src/Buzzer_B1.c"
 17630 ;; Parameters:    Size  Location     Type
 17631 ;;		None
 17632 ;; Auto vars:     Size  Location     Type
 17633 ;;		None
 17634 ;; Return value:  Size  Location     Type
 17635 ;;		None               void
 17636 ;; Registers used:
 17637 ;;		wreg, status,2, status,0
 17638 ;; Tracked objects:
 17639 ;;		On entry : 0/0
 17640 ;;		On exit  : 0/0
 17641 ;;		Unchanged: 0/0
 17642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;Total ram usage:        1 bytes
 17648 ;; Hardware stack levels used:    1
 17649 ;; Hardware stack levels required when called:    5
 17650 ;; This function calls:
 17651 ;;		Nothing
 17652 ;; This function is called by:
 17653 ;;		_main
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           
 17658                           ;psect for function _Buzzer_Main
 17659  150F                     _Buzzer_Main:	
 17660                           
 17661                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17665  150F  0021               	movlb	1	; select bank1
 17666  1510  1CB0               	btfss	_Buz1^(0+128),1
 17667  1511  0008               	return
 17668                           
 17669                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17670  1512  3001               	movlw	1
 17671  1513  07B1               	addwf	(_Buz1^(0+128)+1),f
 17672  1514  3000               	movlw	0
 17673  1515  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17674                           
 17675                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17676  1516  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17677  1517  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17678  1518  1D03               	skipz
 17679  1519  2D1C               	goto	u7025
 17680  151A  0836               	movf	(_Buz1^(0+128)+6),w
 17681  151B  0231               	subwf	(_Buz1^(0+128)+1),w
 17682  151C                     u7025:	
 17683  151C  1C03               	skipc
 17684  151D  0008               	return
 17685                           
 17686                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17687  151E  01B1               	clrf	(_Buz1^(0+128)+1)
 17688  151F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17689                           
 17690                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17691  1520  12B0               	bcf	_Buz1^(0+128),5
 17692  1521  0020               	movlb	0	; select bank0
 17693  1522  1D8D               	btfss	13,3	;volatile
 17694  1523  2D26               	goto	l7259
 17695  1524  0021               	movlb	1	; select bank1
 17696  1525  16B0               	bsf	_Buz1^(0+128),5
 17697  1526                     l7259:	
 17698                           
 17699                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17700  1526  0021               	movlb	1	; select bank1
 17701  1527  1AB0               	btfsc	_Buz1^(0+128),5
 17702  1528  2D52               	goto	l94
 17703                           
 17704                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17705  1529  08B3               	movf	(_Buz1^(0+128)+3),f
 17706  152A  1D03               	skipz
 17707  152B  2D4E               	goto	l95
 17708                           
 17709                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17710  152C  1DB0               	btfss	_Buz1^(0+128),3
 17711  152D  2D3C               	goto	l96
 17712                           
 17713                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17714  152E  11B0               	bcf	_Buz1^(0+128),3
 17715                           
 17716                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17717  152F  0834               	movf	(_Buz1^(0+128)+4),w
 17718  1530  0020               	movlb	0	; select bank0
 17719  1531  00A0               	movwf	??_Buzzer_Main
 17720  1532  0820               	movf	??_Buzzer_Main,w
 17721  1533  0021               	movlb	1	; select bank1
 17722  1534  00B3               	movwf	(_Buz1^(0+128)+3)
 17723                           
 17724                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17725  1535  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17726  1536  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17727  1537  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17728  1538  0838               	movf	(_Buz1^(0+128)+8),w
 17729  1539  01B6               	clrf	(_Buz1^(0+128)+6)
 17730  153A  07B6               	addwf	(_Buz1^(0+128)+6),f
 17731                           
 17732                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17733  153B  0008               	return
 17734  153C                     l96:	
 17735  153C  1E30               	btfss	_Buz1^(0+128),4
 17736  153D  2D4C               	goto	l98
 17737                           
 17738                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17739  153E  1230               	bcf	_Buz1^(0+128),4
 17740                           
 17741                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17742  153F  0835               	movf	(_Buz1^(0+128)+5),w
 17743  1540  0020               	movlb	0	; select bank0
 17744  1541  00A0               	movwf	??_Buzzer_Main
 17745  1542  0820               	movf	??_Buzzer_Main,w
 17746  1543  0021               	movlb	1	; select bank1
 17747  1544  00B3               	movwf	(_Buz1^(0+128)+3)
 17748                           
 17749                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17750  1545  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17751  1546  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17752  1547  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17753  1548  083A               	movf	(_Buz1^(0+128)+10),w
 17754  1549  01B6               	clrf	(_Buz1^(0+128)+6)
 17755  154A  07B6               	addwf	(_Buz1^(0+128)+6),f
 17756                           
 17757                           ;Buzzer_B1.c: 62: } else {
 17758  154B  0008               	return
 17759  154C                     l98:	
 17760                           
 17761                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17762  154C  10B0               	bcf	_Buz1^(0+128),1
 17763                           
 17764                           ;Buzzer_B1.c: 64: }
 17765                           ;Buzzer_B1.c: 65: } else {
 17766  154D  0008               	return
 17767  154E                     l95:	
 17768                           
 17769                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17770  154E  16B0               	bsf	_Buz1^(0+128),5
 17771                           
 17772                           ;Buzzer_B1.c: 68: RB3 = 1;
 17773  154F  0020               	movlb	0	; select bank0
 17774  1550  158D               	bsf	13,3	;volatile
 17775                           
 17776                           ;Buzzer_B1.c: 69: }
 17777                           ;Buzzer_B1.c: 70: } else {
 17778  1551  0008               	return
 17779  1552                     l94:	
 17780                           
 17781                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17782  1552  12B0               	bcf	_Buz1^(0+128),5
 17783                           
 17784                           ;Buzzer_B1.c: 73: RB3 = 0;
 17785  1553  0020               	movlb	0	; select bank0
 17786  1554  118D               	bcf	13,3	;volatile
 17787                           
 17788                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17789  1555  3001               	movlw	1
 17790  1556  0021               	movlb	1	; select bank1
 17791  1557  02B3               	subwf	(_Buz1^(0+128)+3),f
 17792  1558  0008               	return
 17793  1559                     __end_of_Buzzer_Main:	
 17794                           
 17795                           	psect	text125
 17796  1C1D                     __ptext125:	
 17797 ;; *************** function _Buzzer_Initialization *****************
 17798 ;; Defined at:
 17799 ;;		line 11 in file "../src/Buzzer_B1.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;		None
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;		None
 17804 ;; Return value:  Size  Location     Type
 17805 ;;		None               void
 17806 ;; Registers used:
 17807 ;;		None
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;Total ram usage:        0 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    5
 17820 ;; This function calls:
 17821 ;;		Nothing
 17822 ;; This function is called by:
 17823 ;;		_main
 17824 ;; This function uses a non-reentrant model
 17825 ;;
 17826                           
 17827                           
 17828                           ;psect for function _Buzzer_Initialization
 17829  1C1D                     _Buzzer_Initialization:	
 17830                           
 17831                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17832                           
 17833                           ;incstack = 0
 17834                           ; Regs used in _Buzzer_Initialization: []
 17835  1C1D  0021               	movlb	1	; select bank1
 17836  1C1E  1430               	bsf	_Buz1^(0+128),0
 17837  1C1F  0008               	return
 17838  1C20                     __end_of_Buzzer_Initialization:	
 17839                           
 17840                           	psect	intentry
 17841  0004                     __pintentry:	
 17842 ;; *************** function _ISR *****************
 17843 ;; Defined at:
 17844 ;;		line 107 in file "../src/MCU_B1.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;		None
 17847 ;; Auto vars:     Size  Location     Type
 17848 ;;		None
 17849 ;; Return value:  Size  Location     Type
 17850 ;;		None               void
 17851 ;; Registers used:
 17852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17853 ;; Tracked objects:
 17854 ;;		On entry : 0/0
 17855 ;;		On exit  : 0/0
 17856 ;;		Unchanged: 0/0
 17857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;Total ram usage:        1 bytes
 17863 ;; Hardware stack levels used:    1
 17864 ;; Hardware stack levels required when called:    4
 17865 ;; This function calls:
 17866 ;;		_IOC_ISR
 17867 ;;		_TMR1_ISR
 17868 ;; This function is called by:
 17869 ;;		Interrupt level 1
 17870 ;; This function uses a non-reentrant model
 17871 ;;
 17872                           
 17873  0004                     _ISR:	
 17874                           
 17875                           ;incstack = 0
 17876                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17877  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17878  0005  3180               	pagesel	$
 17879  0006  0020               	movlb	0	; select bank0
 17880  0007  087F               	movf	127,w
 17881  0008  00F7               	movwf	??_ISR
 17882                           
 17883                           ;MCU_B1.c: 109: IOC_ISR();
 17884  0009  319D  256E  3180   	fcall	_IOC_ISR
 17885                           
 17886                           ;MCU_B1.c: 111: ;;
 17887                           ;MCU_B1.c: 113: TMR1_ISR();
 17888  000C  3190  20E0         	fcall	_TMR1_ISR
 17889  000E  0877               	movf	??_ISR,w
 17890  000F  0020               	movlb	0	; select bank0
 17891  0010  00FF               	movwf	127
 17892  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17893  0012  0009               	retfie
 17894  0013                     __end_of_ISR:	
 17895                           
 17896                           	psect	text127
 17897  10E0                     __ptext127:	
 17898 ;; *************** function _TMR1_ISR *****************
 17899 ;; Defined at:
 17900 ;;		line 209 in file "../src/MCU_B1.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;		None
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;		None
 17905 ;; Return value:  Size  Location     Type
 17906 ;;		None               void
 17907 ;; Registers used:
 17908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;Total ram usage:        0 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    2
 17921 ;; This function calls:
 17922 ;;		_setDimmerLights_IntrControl
 17923 ;; This function is called by:
 17924 ;;		_ISR
 17925 ;; This function uses a non-reentrant model
 17926 ;;
 17927                           
 17928                           
 17929                           ;psect for function _TMR1_ISR
 17930  10E0                     _TMR1_ISR:	
 17931                           
 17932                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 17933                           
 17934                           ;incstack = 0
 17935                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17936  10E0  0021               	movlb	1	; select bank1
 17937  10E1  1C11               	btfss	17,0	;volatile
 17938  10E2  0008               	return
 17939  10E3  0020               	movlb	0	; select bank0
 17940  10E4  1C11               	btfss	17,0	;volatile
 17941  10E5  0008               	return
 17942                           
 17943                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 17944  10E6  30FA               	movlw	250
 17945  10E7  0097               	movwf	23	;volatile
 17946                           
 17947                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 17948  10E8  3038               	movlw	56
 17949  10E9  0096               	movwf	22	;volatile
 17950                           
 17951                           ;MCU_B1.c: 214: TMR1IF = 0;
 17952  10EA  1011               	bcf	17,0	;volatile
 17953                           
 17954                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 17955  10EB  3001               	movlw	1
 17956  10EC  3182  22F6  3190   	fcall	_setDimmerLights_IntrControl
 17957                           
 17958                           ;MCU_B1.c: 234: Timer1.Count++;
 17959  10EF  3001               	movlw	1
 17960  10F0  0021               	movlb	1	; select bank1
 17961  10F1  07C9               	addwf	(_Timer1^(0+128)+1),f
 17962  10F2  3000               	movlw	0
 17963  10F3  3DCA               	addwfc	((_Timer1+1)^(0+128)+1),f
 17964                           
 17965                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 17966  10F4  3001               	movlw	1
 17967  10F5  3EC8               	addlw	_Timer1& (0+255)
 17968  10F6  0086               	movwf	6
 17969  10F7  0187               	clrf	7
 17970  10F8  3F40               	moviw [0]fsr1
 17971  10F9  3A64               	xorlw	100
 17972  10FA  1D03               	skipz
 17973  10FB  28FE               	goto	u718_25
 17974  10FC  3F41               	moviw [1]fsr1
 17975  10FD  3A00               	xorlw	0
 17976  10FE                     u718_25:	
 17977  10FE  1D03               	skipz
 17978  10FF  0008               	return
 17979                           
 17980                           ;MCU_B1.c: 236: {
 17981                           ;MCU_B1.c: 237: Timer1.Count = 0;
 17982  1100  01C9               	clrf	(_Timer1^(0+128)+1)
 17983  1101  01CA               	clrf	((_Timer1+1)^(0+128)+1)
 17984                           
 17985                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 17986  1102  1448               	bsf	_Timer1^(0+128),0
 17987  1103  0008               	return
 17988  1104                     __end_of_TMR1_ISR:	
 17989                           
 17990                           	psect	text128
 17991  02F6                     __ptext128:	
 17992 ;; *************** function _setDimmerLights_IntrControl *****************
 17993 ;; Defined at:
 17994 ;;		line 92 in file "../src/Dimmer_B1.c"
 17995 ;; Parameters:    Size  Location     Type
 17996 ;;  lights          1    wreg     unsigned char 
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;  lights          1    6[COMMON] unsigned char 
 17999 ;; Return value:  Size  Location     Type
 18000 ;;		None               void
 18001 ;; Registers used:
 18002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18003 ;; Tracked objects:
 18004 ;;		On entry : 0/0
 18005 ;;		On exit  : 0/0
 18006 ;;		Unchanged: 0/0
 18007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;Total ram usage:        5 bytes
 18013 ;; Hardware stack levels used:    1
 18014 ;; Hardware stack levels required when called:    1
 18015 ;; This function calls:
 18016 ;;		_DimmerIntrPointSelect
 18017 ;; This function is called by:
 18018 ;;		_TMR1_ISR
 18019 ;; This function uses a non-reentrant model
 18020 ;;
 18021                           
 18022                           
 18023                           ;psect for function _setDimmerLights_IntrControl
 18024  02F6                     _setDimmerLights_IntrControl:	
 18025                           
 18026                           ;incstack = 0
 18027                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18028                           ;setDimmerLights_IntrControl@lights stored from wreg
 18029  02F6  00F6               	movwf	setDimmerLights_IntrControl@lights
 18030                           
 18031                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18032  02F7  0876               	movf	setDimmerLights_IntrControl@lights,w
 18033  02F8  319C  249E  3182   	fcall	_DimmerIntrPointSelect
 18034                           
 18035                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18036  02FB  0879               	movf	_DimmerLightsIntr,w
 18037  02FC  0086               	movwf	6
 18038  02FD  3001               	movlw	1	; select bank2/3
 18039  02FE  0087               	movwf	7
 18040  02FF  1C01               	btfss	1,0
 18041  0300  2B53               	goto	i1l6717
 18042                           
 18043                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18044  0301  3001               	movlw	1
 18045  0302  00F2               	movwf	??_setDimmerLights_IntrControl
 18046  0303  0879               	movf	_DimmerLightsIntr,w
 18047  0304  3E03               	addlw	3
 18048  0305  0086               	movwf	6
 18049  0306  3001               	movlw	1	; select bank2/3
 18050  0307  0087               	movwf	7
 18051  0308  0872               	movf	??_setDimmerLights_IntrControl,w
 18052  0309  0781               	addwf	1,f
 18053                           
 18054                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18055                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18056  030A  0022               	movlb	2	; select bank2
 18057  030B  0840               	movf	(_Dimmer^(0+256)+2),w
 18058  030C  00F2               	movwf	??_setDimmerLights_IntrControl
 18059  030D  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18060  030E  09F2               	comf	??_setDimmerLights_IntrControl,f
 18061  030F  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18062  0310  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18063  0311  1903               	skipnz
 18064  0312  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18065  0313  0879               	movf	_DimmerLightsIntr,w
 18066  0314  3E04               	addlw	4
 18067  0315  0086               	movwf	6
 18068  0316  3001               	movlw	1	; select bank2/3
 18069  0317  0087               	movwf	7
 18070  0318  0801               	movf	1,w
 18071  0319  0772               	addwf	??_setDimmerLights_IntrControl,w
 18072  031A  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18073  031B  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18074  031C  1803               	skipnc
 18075  031D  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18076  031E  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18077  031F  0879               	movf	_DimmerLightsIntr,w
 18078  0320  3E03               	addlw	3
 18079  0321  0086               	movwf	6
 18080  0322  3001               	movlw	1	; select bank2/3
 18081  0323  0087               	movwf	7
 18082  0324  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18083  0325  3A80               	xorlw	128
 18084  0326  3C80               	sublw	128
 18085  0327  1D03               	skipz
 18086  0328  2B2B               	goto	u606_25
 18087  0329  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18088  032A  0201               	subwf	1,w
 18089  032B                     u606_25:	
 18090  032B  1C03               	skipc
 18091  032C  0008               	return
 18092                           
 18093                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18094  032D  0879               	movf	_DimmerLightsIntr,w
 18095  032E  3E03               	addlw	3
 18096  032F  0086               	movwf	6
 18097  0330  3001               	movlw	1	; select bank2/3
 18098  0331  0087               	movwf	7
 18099  0332  0181               	clrf	1
 18100                           
 18101                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18102  0333  0879               	movf	_DimmerLightsIntr,w
 18103  0334  0086               	movwf	6
 18104  0335  3001               	movlw	1	; select bank2/3
 18105  0336  0087               	movwf	7
 18106  0337  1001               	bcf	1,0
 18107                           
 18108                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18109  0338  0879               	movf	_DimmerLightsIntr,w
 18110  0339  3E08               	addlw	8
 18111  033A  0086               	movwf	6
 18112  033B  3001               	movlw	1	; select bank2/3
 18113  033C  0087               	movwf	7
 18114  033D  1401               	bsf	1,0
 18115                           
 18116                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18117  033E  0879               	movf	_DimmerLightsIntr,w
 18118  033F  3E09               	addlw	9
 18119  0340  0086               	movwf	6
 18120  0341  3001               	movlw	1	; select bank2/3
 18121  0342  0087               	movwf	7
 18122  0343  1E01               	btfss	1,4
 18123  0344  0008               	return
 18124                           
 18125                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18126  0345  0879               	movf	_DimmerLightsIntr,w
 18127  0346  3E09               	addlw	9
 18128  0347  0086               	movwf	6
 18129  0348  3001               	movlw	1	; select bank2/3
 18130  0349  0087               	movwf	7
 18131  034A  1201               	bcf	1,4
 18132                           
 18133                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18134  034B  0876               	movf	setDimmerLights_IntrControl@lights,w
 18135  034C  3A01               	xorlw	1
 18136  034D  1D03               	skipz
 18137  034E  0008               	return
 18138                           
 18139                           ;Dimmer_B1.c: 240: RB4 = 0;
 18140  034F  0020               	movlb	0	; select bank0
 18141  0350  120D               	bcf	13,4	;volatile
 18142                           
 18143                           ;Dimmer_B1.c: 241: RB4=0;
 18144  0351  120D               	bcf	13,4	;volatile
 18145                           
 18146                           ;Dimmer_B1.c: 242: }
 18147                           ;Dimmer_B1.c: 249: }
 18148                           ;Dimmer_B1.c: 250: }
 18149                           ;Dimmer_B1.c: 251: } else {
 18150  0352  0008               	return
 18151  0353                     i1l6717:	
 18152                           
 18153                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18154  0353  0879               	movf	_DimmerLightsIntr,w
 18155  0354  3E08               	addlw	8
 18156  0355  0086               	movwf	6
 18157  0356  3001               	movlw	1	; select bank2/3
 18158  0357  0087               	movwf	7
 18159  0358  1C01               	btfss	1,0
 18160  0359  2C07               	goto	i1l678
 18161                           
 18162                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18163  035A  0879               	movf	_DimmerLightsIntr,w
 18164  035B  3E08               	addlw	8
 18165  035C  0086               	movwf	6
 18166  035D  3001               	movlw	1	; select bank2/3
 18167  035E  0087               	movwf	7
 18168  035F  1001               	bcf	1,0
 18169                           
 18170                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18171  0360  0879               	movf	_DimmerLightsIntr,w
 18172  0361  0086               	movwf	6
 18173  0362  3001               	movlw	1	; select bank2/3
 18174  0363  0087               	movwf	7
 18175  0364  1C81               	btfss	1,1
 18176  0365  2C07               	goto	i1l678
 18177                           
 18178                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18179  0366  3001               	movlw	1
 18180  0367  00F2               	movwf	??_setDimmerLights_IntrControl
 18181  0368  0A79               	incf	_DimmerLightsIntr,w
 18182  0369  0086               	movwf	6
 18183  036A  3001               	movlw	1	; select bank2/3
 18184  036B  0087               	movwf	7
 18185  036C  0872               	movf	??_setDimmerLights_IntrControl,w
 18186  036D  0781               	addwf	1,f
 18187                           
 18188                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18189  036E  0A79               	incf	_DimmerLightsIntr,w
 18190  036F  0086               	movwf	6
 18191  0370  3001               	movlw	1	; select bank2/3
 18192  0371  0087               	movwf	7
 18193  0372  0879               	movf	_DimmerLightsIntr,w
 18194  0373  3E02               	addlw	2
 18195  0374  0084               	movwf	4
 18196  0375  3001               	movlw	1	; select bank2/3
 18197  0376  0085               	movwf	5
 18198  0377  0800               	movf	0,w
 18199  0378  0201               	subwf	1,w
 18200  0379  1C03               	skipc
 18201  037A  2C07               	goto	i1l678
 18202                           
 18203                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18204  037B  0A79               	incf	_DimmerLightsIntr,w
 18205  037C  0086               	movwf	6
 18206  037D  3001               	movlw	1	; select bank2/3
 18207  037E  0087               	movwf	7
 18208  037F  0181               	clrf	1
 18209                           
 18210                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18211  0380  0879               	movf	_DimmerLightsIntr,w
 18212  0381  0086               	movwf	6
 18213  0382  3001               	movlw	1	; select bank2/3
 18214  0383  0087               	movwf	7
 18215  0384  1D81               	btfss	1,3
 18216  0385  2BBC               	goto	i1l6743
 18217                           
 18218                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18219  0386  0879               	movf	_DimmerLightsIntr,w
 18220  0387  0086               	movwf	6
 18221  0388  3001               	movlw	1	; select bank2/3
 18222  0389  0087               	movwf	7
 18223  038A  1A01               	btfsc	1,4
 18224  038B  2BA5               	goto	i1l6737
 18225                           
 18226                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18227  038C  0879               	movf	_DimmerLightsIntr,w
 18228  038D  3E04               	addlw	4
 18229  038E  0086               	movwf	6
 18230  038F  3001               	movlw	1	; select bank2/3
 18231  0390  0087               	movwf	7
 18232  0391  3040               	movlw	64
 18233  0392  0201               	subwf	1,w
 18234  0393  1803               	skipnc
 18235  0394  2B9F               	goto	i1l6735
 18236                           
 18237                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18238  0395  3001               	movlw	1
 18239  0396  00F2               	movwf	??_setDimmerLights_IntrControl
 18240  0397  0879               	movf	_DimmerLightsIntr,w
 18241  0398  3E04               	addlw	4
 18242  0399  0086               	movwf	6
 18243  039A  3001               	movlw	1	; select bank2/3
 18244  039B  0087               	movwf	7
 18245  039C  0872               	movf	??_setDimmerLights_IntrControl,w
 18246  039D  0781               	addwf	1,f
 18247                           
 18248                           ;Dimmer_B1.c: 262: } else {
 18249  039E  2C07               	goto	i1l678
 18250  039F                     i1l6735:	
 18251                           
 18252                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18253  039F  0879               	movf	_DimmerLightsIntr,w
 18254  03A0  0086               	movwf	6
 18255  03A1  3001               	movlw	1	; select bank2/3
 18256  03A2  0087               	movwf	7
 18257  03A3  1601               	bsf	1,4
 18258                           
 18259                           ;Dimmer_B1.c: 264: }
 18260                           ;Dimmer_B1.c: 265: } else {
 18261  03A4  2C07               	goto	i1l678
 18262  03A5                     i1l6737:	
 18263                           
 18264                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18265  03A5  0879               	movf	_DimmerLightsIntr,w
 18266  03A6  3E04               	addlw	4
 18267  03A7  0086               	movwf	6
 18268  03A8  3001               	movlw	1	; select bank2/3
 18269  03A9  0087               	movwf	7
 18270  03AA  300D               	movlw	13
 18271  03AB  0201               	subwf	1,w
 18272  03AC  1C03               	skipc
 18273  03AD  2BB6               	goto	i1l6741
 18274                           
 18275                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18276  03AE  0879               	movf	_DimmerLightsIntr,w
 18277  03AF  3E04               	addlw	4
 18278  03B0  0086               	movwf	6
 18279  03B1  3001               	movlw	1	; select bank2/3
 18280  03B2  0087               	movwf	7
 18281  03B3  3001               	movlw	1
 18282  03B4  0281               	subwf	1,f
 18283                           
 18284                           ;Dimmer_B1.c: 268: } else {
 18285  03B5  2C07               	goto	i1l678
 18286  03B6                     i1l6741:	
 18287                           
 18288                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18289  03B6  0879               	movf	_DimmerLightsIntr,w
 18290  03B7  0086               	movwf	6
 18291  03B8  3001               	movlw	1	; select bank2/3
 18292  03B9  0087               	movwf	7
 18293  03BA  1201               	bcf	1,4
 18294                           
 18295                           ;Dimmer_B1.c: 270: }
 18296                           ;Dimmer_B1.c: 271: }
 18297                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18298  03BB  2C07               	goto	i1l678
 18299  03BC                     i1l6743:	
 18300  03BC  0879               	movf	_DimmerLightsIntr,w
 18301  03BD  0086               	movwf	6
 18302  03BE  3001               	movlw	1	; select bank2/3
 18303  03BF  0087               	movwf	7
 18304  03C0  1D01               	btfss	1,2
 18305  03C1  2C07               	goto	i1l678
 18306                           
 18307                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18308  03C2  0879               	movf	_DimmerLightsIntr,w
 18309  03C3  3E04               	addlw	4
 18310  03C4  0086               	movwf	6
 18311  03C5  3001               	movlw	1	; select bank2/3
 18312  03C6  0087               	movwf	7
 18313  03C7  0879               	movf	_DimmerLightsIntr,w
 18314  03C8  3E05               	addlw	5
 18315  03C9  0084               	movwf	4
 18316  03CA  3001               	movlw	1	; select bank2/3
 18317  03CB  0085               	movwf	5
 18318  03CC  0800               	movf	0,w
 18319  03CD  0201               	subwf	1,w
 18320  03CE  1803               	skipnc
 18321  03CF  2BDA               	goto	i1l6749
 18322                           
 18323                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18324  03D0  3001               	movlw	1
 18325  03D1  00F2               	movwf	??_setDimmerLights_IntrControl
 18326  03D2  0879               	movf	_DimmerLightsIntr,w
 18327  03D3  3E04               	addlw	4
 18328  03D4  0086               	movwf	6
 18329  03D5  3001               	movlw	1	; select bank2/3
 18330  03D6  0087               	movwf	7
 18331  03D7  0872               	movf	??_setDimmerLights_IntrControl,w
 18332  03D8  0781               	addwf	1,f
 18333                           
 18334                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18335  03D9  2BEF               	goto	i1l6753
 18336  03DA                     i1l6749:	
 18337  03DA  0879               	movf	_DimmerLightsIntr,w
 18338  03DB  3E05               	addlw	5
 18339  03DC  0086               	movwf	6
 18340  03DD  3001               	movlw	1	; select bank2/3
 18341  03DE  0087               	movwf	7
 18342  03DF  0879               	movf	_DimmerLightsIntr,w
 18343  03E0  3E04               	addlw	4
 18344  03E1  0084               	movwf	4
 18345  03E2  3001               	movlw	1	; select bank2/3
 18346  03E3  0085               	movwf	5
 18347  03E4  0800               	movf	0,w
 18348  03E5  0201               	subwf	1,w
 18349  03E6  1803               	skipnc
 18350  03E7  2BEF               	goto	i1l6753
 18351                           
 18352                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18353  03E8  0879               	movf	_DimmerLightsIntr,w
 18354  03E9  3E04               	addlw	4
 18355  03EA  0086               	movwf	6
 18356  03EB  3001               	movlw	1	; select bank2/3
 18357  03EC  0087               	movwf	7
 18358  03ED  3001               	movlw	1
 18359  03EE  0281               	subwf	1,f
 18360  03EF                     i1l6753:	
 18361                           
 18362                           ;Dimmer_B1.c: 277: }
 18363                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18364  03EF  0879               	movf	_DimmerLightsIntr,w
 18365  03F0  3E05               	addlw	5
 18366  03F1  0086               	movwf	6
 18367  03F2  3001               	movlw	1	; select bank2/3
 18368  03F3  0087               	movwf	7
 18369  03F4  0879               	movf	_DimmerLightsIntr,w
 18370  03F5  3E04               	addlw	4
 18371  03F6  0084               	movwf	4
 18372  03F7  3001               	movlw	1	; select bank2/3
 18373  03F8  0085               	movwf	5
 18374  03F9  0800               	movf	0,w
 18375  03FA  0601               	xorwf	1,w
 18376  03FB  1D03               	skipz
 18377  03FC  2C07               	goto	i1l678
 18378                           
 18379                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18380  03FD  0879               	movf	_DimmerLightsIntr,w
 18381  03FE  0086               	movwf	6
 18382  03FF  3001               	movlw	1	; select bank2/3
 18383  0400  0087               	movwf	7
 18384  0401  1101               	bcf	1,2
 18385                           
 18386                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18387  0402  0879               	movf	_DimmerLightsIntr,w
 18388  0403  0086               	movwf	6
 18389  0404  3001               	movlw	1	; select bank2/3
 18390  0405  0087               	movwf	7
 18391  0406  1081               	bcf	1,1
 18392  0407                     i1l678:	
 18393                           
 18394                           ;Dimmer_B1.c: 281: }
 18395                           ;Dimmer_B1.c: 282: }
 18396                           ;Dimmer_B1.c: 300: }
 18397                           ;Dimmer_B1.c: 301: }
 18398                           ;Dimmer_B1.c: 302: }
 18399                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18400  0407  0879               	movf	_DimmerLightsIntr,w
 18401  0408  3E09               	addlw	9
 18402  0409  0086               	movwf	6
 18403  040A  3001               	movlw	1	; select bank2/3
 18404  040B  0087               	movwf	7
 18405  040C  1D81               	btfss	1,3
 18406  040D  0008               	return
 18407                           
 18408                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18409  040E  3001               	movlw	1
 18410  040F  00F2               	movwf	??_setDimmerLights_IntrControl
 18411  0410  0879               	movf	_DimmerLightsIntr,w
 18412  0411  3E0C               	addlw	12
 18413  0412  0086               	movwf	6
 18414  0413  3001               	movlw	1	; select bank2/3
 18415  0414  0087               	movwf	7
 18416  0415  0872               	movf	??_setDimmerLights_IntrControl,w
 18417  0416  0781               	addwf	1,f
 18418                           
 18419                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18420  0417  0879               	movf	_DimmerLightsIntr,w
 18421  0418  3E0C               	addlw	12
 18422  0419  0086               	movwf	6
 18423  041A  3001               	movlw	1	; select bank2/3
 18424  041B  0087               	movwf	7
 18425  041C  0801               	movf	1,w
 18426  041D  3A05               	xorlw	5
 18427  041E  1D03               	skipz
 18428  041F  0008               	return
 18429                           
 18430                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18431  0420  0879               	movf	_DimmerLightsIntr,w
 18432  0421  3E0C               	addlw	12
 18433  0422  0086               	movwf	6
 18434  0423  3001               	movlw	1	; select bank2/3
 18435  0424  0087               	movwf	7
 18436  0425  0181               	clrf	1
 18437                           
 18438                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18439  0426  0879               	movf	_DimmerLightsIntr,w
 18440  0427  3E09               	addlw	9
 18441  0428  0086               	movwf	6
 18442  0429  3001               	movlw	1	; select bank2/3
 18443  042A  0087               	movwf	7
 18444  042B  1181               	bcf	1,3
 18445  042C  0008               	return
 18446  042D                     __end_of_setDimmerLights_IntrControl:	
 18447                           
 18448                           	psect	text129
 18449  1C9E                     __ptext129:	
 18450 ;; *************** function _DimmerIntrPointSelect *****************
 18451 ;; Defined at:
 18452 ;;		line 70 in file "../src/Dimmer_B1.c"
 18453 ;; Parameters:    Size  Location     Type
 18454 ;;  lights          1    wreg     unsigned char 
 18455 ;; Auto vars:     Size  Location     Type
 18456 ;;  lights          1    1[COMMON] unsigned char 
 18457 ;; Return value:  Size  Location     Type
 18458 ;;		None               void
 18459 ;; Registers used:
 18460 ;;		wreg
 18461 ;; Tracked objects:
 18462 ;;		On entry : 0/0
 18463 ;;		On exit  : 0/0
 18464 ;;		Unchanged: 0/0
 18465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;Total ram usage:        2 bytes
 18471 ;; Hardware stack levels used:    1
 18472 ;; This function calls:
 18473 ;;		Nothing
 18474 ;; This function is called by:
 18475 ;;		_setDimmerLights_IntrControl
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           
 18480                           ;psect for function _DimmerIntrPointSelect
 18481  1C9E                     _DimmerIntrPointSelect:	
 18482                           
 18483                           ;incstack = 0
 18484                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18485                           ;DimmerIntrPointSelect@lights stored from wreg
 18486  1C9E  00F1               	movwf	DimmerIntrPointSelect@lights
 18487                           
 18488                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18489  1C9F  0871               	movf	DimmerIntrPointSelect@lights,w
 18490  1CA0  3A01               	xorlw	1
 18491  1CA1  1D03               	skipz
 18492  1CA2  0008               	return
 18493                           
 18494                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18495  1CA3  30C5               	movlw	_DimmerLights1& (0+255)
 18496  1CA4  00F0               	movwf	??_DimmerIntrPointSelect
 18497  1CA5  0870               	movf	??_DimmerIntrPointSelect,w
 18498  1CA6  00F9               	movwf	_DimmerLightsIntr
 18499  1CA7  0008               	return
 18500  1CA8                     __end_of_DimmerIntrPointSelect:	
 18501                           
 18502                           	psect	text130
 18503  1D6E                     __ptext130:	
 18504 ;; *************** function _IOC_ISR *****************
 18505 ;; Defined at:
 18506 ;;		line 401 in file "../src/MCU_B1.c"
 18507 ;; Parameters:    Size  Location     Type
 18508 ;;		None
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;		None
 18511 ;; Return value:  Size  Location     Type
 18512 ;;		None               void
 18513 ;; Registers used:
 18514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/0
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;Total ram usage:        0 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    3
 18527 ;; This function calls:
 18528 ;;		_setDimmerReClock
 18529 ;; This function is called by:
 18530 ;;		_ISR
 18531 ;; This function uses a non-reentrant model
 18532 ;;
 18533                           
 18534                           
 18535                           ;psect for function _IOC_ISR
 18536  1D6E                     _IOC_ISR:	
 18537                           
 18538                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18539                           
 18540                           ;incstack = 0
 18541                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18542  1D6E  1D8B               	btfss	11,3	;volatile
 18543  1D6F  0008               	return
 18544  1D70  1C0B               	btfss	11,0	;volatile
 18545  1D71  0008               	return
 18546  1D72  0027               	movlb	7	; select bank7
 18547  1D73  1D16               	btfss	22,2	;volatile
 18548  1D74  0008               	return
 18549                           
 18550                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18551  1D75  1116               	bcf	22,2	;volatile
 18552                           
 18553                           ;MCU_B1.c: 404: IOCIF = 0;
 18554  1D76  100B               	bcf	11,0	;volatile
 18555                           
 18556                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18557  1D77  0021               	movlb	1	; select bank1
 18558  1D78  1C20               	btfss	_myMain^(0+128),0
 18559  1D79  0008               	return
 18560                           
 18561                           ;MCU_B1.c: 408: setDimmerReClock();
 18562  1D7A  319C  242C         	fcall	_setDimmerReClock
 18563  1D7C  0008               	return
 18564  1D7D                     __end_of_IOC_ISR:	
 18565                           
 18566                           	psect	text131
 18567  1C2C                     __ptext131:	
 18568 ;; *************** function _setDimmerReClock *****************
 18569 ;; Defined at:
 18570 ;;		line 244 in file "../src/MCU_B1.c"
 18571 ;; Parameters:    Size  Location     Type
 18572 ;;		None
 18573 ;; Auto vars:     Size  Location     Type
 18574 ;;		None
 18575 ;; Return value:  Size  Location     Type
 18576 ;;		None               void
 18577 ;; Registers used:
 18578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18579 ;; Tracked objects:
 18580 ;;		On entry : 0/0
 18581 ;;		On exit  : 0/0
 18582 ;;		Unchanged: 0/0
 18583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18588 ;;Total ram usage:        0 bytes
 18589 ;; Hardware stack levels used:    1
 18590 ;; Hardware stack levels required when called:    2
 18591 ;; This function calls:
 18592 ;;		_setDimmerLights_IntrIOC_GO
 18593 ;; This function is called by:
 18594 ;;		_IOC_ISR
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           
 18599                           ;psect for function _setDimmerReClock
 18600  1C2C                     _setDimmerReClock:	
 18601                           
 18602                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18603                           
 18604                           ;incstack = 0
 18605                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18606  1C2C  3001               	movlw	1
 18607  1C2D  3192  222E         	fcall	_setDimmerLights_IntrIOC_GO
 18608  1C2F  0008               	return
 18609  1C30                     __end_of_setDimmerReClock:	
 18610                           
 18611                           	psect	text132
 18612  122E                     __ptext132:	
 18613 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18614 ;; Defined at:
 18615 ;;		line 28 in file "../src/Dimmer_B1.c"
 18616 ;; Parameters:    Size  Location     Type
 18617 ;;  lights          1    wreg     unsigned char 
 18618 ;; Auto vars:     Size  Location     Type
 18619 ;;  lights          1    2[COMMON] unsigned char 
 18620 ;; Return value:  Size  Location     Type
 18621 ;;		None               void
 18622 ;; Registers used:
 18623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18624 ;; Tracked objects:
 18625 ;;		On entry : 0/0
 18626 ;;		On exit  : 0/0
 18627 ;;		Unchanged: 0/0
 18628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18630 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;Total ram usage:        1 bytes
 18634 ;; Hardware stack levels used:    1
 18635 ;; Hardware stack levels required when called:    1
 18636 ;; This function calls:
 18637 ;;		_DimmerIntrIOCPointSelect
 18638 ;; This function is called by:
 18639 ;;		_setDimmerReClock
 18640 ;; This function uses a non-reentrant model
 18641 ;;
 18642                           
 18643                           
 18644                           ;psect for function _setDimmerLights_IntrIOC_GO
 18645  122E                     _setDimmerLights_IntrIOC_GO:	
 18646                           
 18647                           ;incstack = 0
 18648                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18649                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18650  122E  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18651                           
 18652                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18653  122F  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18654  1230  319C  24B2  3192   	fcall	_DimmerIntrIOCPointSelect
 18655                           
 18656                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 18657  1233  0021               	movlb	1	; select bank1
 18658  1234  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18659  1235  0086               	movwf	6
 18660  1236  3001               	movlw	1	; select bank2/3
 18661  1237  0087               	movwf	7
 18662  1238  1801               	btfsc	1,0
 18663  1239  0008               	return
 18664  123A  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18665  123B  3E09               	addlw	9
 18666  123C  0086               	movwf	6
 18667  123D  3001               	movlw	1	; select bank2/3
 18668  123E  0087               	movwf	7
 18669  123F  1981               	btfsc	1,3
 18670  1240  0008               	return
 18671                           
 18672                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18673  1241  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18674  1242  0086               	movwf	6
 18675  1243  3001               	movlw	1	; select bank2/3
 18676  1244  0087               	movwf	7
 18677  1245  1401               	bsf	1,0
 18678                           
 18679                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18680  1246  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18681  1247  3E09               	addlw	9
 18682  1248  0086               	movwf	6
 18683  1249  3001               	movlw	1	; select bank2/3
 18684  124A  0087               	movwf	7
 18685  124B  1581               	bsf	1,3
 18686                           
 18687                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18688  124C  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18689  124D  0086               	movwf	6
 18690  124E  3001               	movlw	1	; select bank2/3
 18691  124F  0087               	movwf	7
 18692  1250  1F01               	btfss	1,6
 18693  1251  0008               	return
 18694                           
 18695                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 18696  1252  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18697  1253  3E09               	addlw	9
 18698  1254  0086               	movwf	6
 18699  1255  3001               	movlw	1	; select bank2/3
 18700  1256  0087               	movwf	7
 18701  1257  1601               	bsf	1,4
 18702                           
 18703                           ;Dimmer_B1.c: 51: if (lights == 1) {
 18704  1258  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18705  1259  3A01               	xorlw	1
 18706  125A  1D03               	skipz
 18707  125B  0008               	return
 18708                           
 18709                           ;Dimmer_B1.c: 52: RB4 = 1;
 18710  125C  0020               	movlb	0	; select bank0
 18711  125D  160D               	bsf	13,4	;volatile
 18712                           
 18713                           ;Dimmer_B1.c: 53: RB4=1;
 18714  125E  160D               	bsf	13,4	;volatile
 18715  125F  0008               	return
 18716  1260                     __end_of_setDimmerLights_IntrIOC_GO:	
 18717                           
 18718                           	psect	text133
 18719  1CB2                     __ptext133:	
 18720 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18721 ;; Defined at:
 18722 ;;		line 8 in file "../src/Dimmer_B1.c"
 18723 ;; Parameters:    Size  Location     Type
 18724 ;;  lights          1    wreg     unsigned char 
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;  lights          1    1[COMMON] unsigned char 
 18727 ;; Return value:  Size  Location     Type
 18728 ;;		None               void
 18729 ;; Registers used:
 18730 ;;		wreg
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18739 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;Total ram usage:        2 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; This function calls:
 18743 ;;		Nothing
 18744 ;; This function is called by:
 18745 ;;		_setDimmerLights_IntrIOC_GO
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           
 18750                           ;psect for function _DimmerIntrIOCPointSelect
 18751  1CB2                     _DimmerIntrIOCPointSelect:	
 18752                           
 18753                           ;incstack = 0
 18754                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18755                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18756  1CB2  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18757                           
 18758                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18759  1CB3  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18760  1CB4  3A01               	xorlw	1
 18761  1CB5  1D03               	skipz
 18762  1CB6  0008               	return
 18763                           
 18764                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18765  1CB7  30C5               	movlw	_DimmerLights1& (0+255)
 18766  1CB8  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18767  1CB9  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18768  1CBA  0021               	movlb	1	; select bank1
 18769  1CBB  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 18770  1CBC  0008               	return
 18771  1CBD                     __end_of_DimmerIntrIOCPointSelect:	
 18772  007E                     btemp	set	126	;btemp
 18773  007E                     pic14e$flags	set	126
 18774  007E                     wtemp	set	126
 18775  007E                     wtemp0	set	126
 18776  0080                     wtemp1	set	128
 18777  0082                     wtemp2	set	130
 18778  0084                     wtemp3	set	132
 18779  0086                     wtemp4	set	134
 18780  0088                     wtemp5	set	136
 18781  007F                     wtemp6	set	127
 18782  007E                     ttemp	set	126
 18783  007E                     ttemp0	set	126
 18784  0081                     ttemp1	set	129
 18785  0084                     ttemp2	set	132
 18786  0087                     ttemp3	set	135
 18787  007F                     ttemp4	set	127
 18788  007E                     ltemp	set	126
 18789  007E                     ltemp0	set	126
 18790  0082                     ltemp1	set	130
 18791  0086                     ltemp2	set	134
 18792  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         229
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95451
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11070
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4871
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29074
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29074
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     761
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1346
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28351
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     182
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 26 10:44:12 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 1723                                       l94 1552  
                                     l86 1737                                       l95 154E  
                                     l96 153C                                       l98 154C  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 2000  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CF4  
                 __end_of_setDelayOff_GO 08D5                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 174B  
                   _setDimmerLights_Line 1D16                             ___ftadd@sign 004B  
                                    l231 0A91                                      l306 1E63  
                                    l307 1E64                     _setDimmerLights_SwOn 1406  
                                    l350 1109                                      l256 0BB0  
                                    l257 0BF3                                      l709 1228  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RC0 0070  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RB4 006C                                      _RA6 0066  
                                    _RC3 0073                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CB  
           getDimmerLights_Status@lights 0022                                      _Sw1 01D4  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E6D  
                  _Buzzer_Initialization 1C1D                          __end_of_ADC_Set 1C73  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                 _setMain_Exception$3721 0039                          _setDimmerLights 0D75  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 10BD  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D7D  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l2003 060F  
                                   l2012 058E                                     l2013 058A  
                                   l2005 054C                                     l1206 15EB  
                                   l2006 054E                                     l2015 05C7  
                                   l2007 0556                                     l2070 13CB  
                                   l2054 0C14                                     l1431 12BF  
                                   l1183 1393                                     l2064 0C6A  
                                   l1426 12A8                 ?_DimmerLightsPointSelect 0070  
                                   l1427 12C3                                     l2084 0991  
                                   l1197 11F7                                     l1541 02F0  
                                   l1382 1591                                     l1544 01E9  
                                   l2096 146E                                     l1545 02C0  
                                   l1546 02BE                                     l2380 1F8F  
                        __end_of_IOC_Set 1D60                           _Load_Main$4095 002D  
                                   l2366 1EB2                                     l2390 01A9  
                                   l2392 0082                                     l6011 1635  
                                   l6101 133C                                     l2661 09DC  
                                   l1686 0E9F                                     l2655 09C5  
                                   l6007 1626                                     l6033 1EF7  
                                   l6025 145C                                     l6035 1EFA  
                                   l6115 1359                                     l6107 1345  
                                   l6051 10A7                                     l6211 0A9A  
                                   l2684 04CC                                     l6205 0A79  
                                   l7101 05AC                                     l6039 1F00  
                                   l6303 1FE7                                     l5415 1084  
                                   l5431 045C                                     l5503 0ED0  
                                   l6055 10AD                                     l6223 0AAD  
                                   l6215 0AA0                                     l7103 05AE  
                                   l7015 0E6B                                     l6305 1FEA  
                                   l6081 12AC                                     l6049 10A4  
                                   l6217 0AA4                                     l6209 0A97  
                                   l6153 0933                                     l7017 0E6D  
                                   l5371 09AC                                     l5427 0455  
                                   l6243 0B95                                     l6219 0AA7  
                                   l6171 0972                                     l7131 05FD  
                                   l7027 0E82                                     l6309 1FF0  
                                   l5381 09D2                                     l5373 09B1  
                                   l5365 099B                                     l5461 04AB  
                                   l5437 046B                                     l5525 0F2A  
                                   l5517 0F11                                     l6237 0B8C  
                                   l6245 0B98                                     l6165 0958  
                                   l6413 130D                                     l7029 0E83  
                                   l5703 07F1                                     l6343 11C7  
                                   l6079 12A3                                     l5455 0498  
                                   l5631 0D6C                                     l5623 0D52  
                                   l5615 0D37                                     l6271 0BC1  
                                   l6255 0BAD                                     l6239 0B8F  
                                   l6191 0A68                                     l6175 0976  
                                   l7119 05DC                                     l7151 1EB7  
                                   l5393 1E13                                     l6345 11AB  
                                   l6089 12BA                                     l5369 09A2  
                                   l5473 04DE                                     l5457 04A2  
                                   l5449 0485                                     l5625 0D5B  
                                   l5617 0D45                                     l7305 121F  
                                   l6273 0BD9                                     l6257 0BA7  
                                   l6185 0A5F                                     l5561 0FBC  
                                   l5545 0F79                                     l6169 096E  
                                   l7209 0120                                     l5707 07F9  
                                   l5651 11A3                                     l6347 11CC  
                                   l5379 09CA                                     l5467 04BE  
                                   l5459 04A7                                     l5627 0D5E  
                                   l7307 1222                                     l6187 0A62  
                                   l6523 1DF9                                     l5539 0F63  
                                   l7067 056D                                     l7155 1EBD  
                                   l6435 1CFC                                     l7219 0152  
                  _setDimmerLights_SwOff 14C6                                     l6613 14A7  
                                   l5397 1E19                                     l5477 04F0  
                                   l5469 04C8                                     l6381 0DEA  
                                   l7309 122A                                     l6285 0BF5  
                                   l5573 0FD8                                     l5557 0FB4  
                                   l5821 143C                                     l7245 01A5  
                                   l7501 13F7                                     l6295 111A  
                                   l6623 14B7                                     l6615 14AA  
                                   l5751 08AA                                     l5487 050B  
                                   l6543 0C17                                     l6297 1125  
                                   l6625 14BA                                     l5681 07C2  
                                   l5497 0EBA                                     l6369 0DC3  
                                   l6801 179E                                     l5569 0FD0  
                                   l7185 00B0                                     l7169 006D  
                                   l7259 1526                                     l6619 14B0  
                                   l5691 07CA                                     l5675 07B7  
                                   l5755 08B0                                     l5907 126D  
                                   l6571 0C60                                     l6555 0C2F  
                                   l7195 00E2                                     l6629 14C0  
                                   l5693 07D6                                     l5757 08BD  
                                   l5837 14FA                                     l5597 0D07  
                                   l6389 0B38                                     l7613 0289  
                                   l6565 0C55                                     l5759 08C6  
                                   l5855 17F0                                     l6479 11DF  
                                   l7367 0685                                     l7607 027C  
                                   l7615 028F                                     l7471 0CBB  
                                   l7519 157B                                     l7625 02A4  
                                   l7529 1592                                     l5699 07E8  
                                   l5955 1ECD                                     l6595 1E0A  
                                   l7467 0CB3                                     l7459 0C8E  
                                   l7557 01D8                                     l5957 1ED1  
                                   l6933 0849                                     l5975 1677  
                                   l6791 1776                                     l7583 022D  
                                   l6943 0869                                     l6927 083B  
                                   l6919 0828                                     l7487 0CE8  
                                   l5977 164C                                     l7673 02DE  
                                   l7577 0203                                     l6937 0859  
                                   l6945 0872                                     l6881 1FB2  
                                   l5979 167D                                     l6875 1FAA  
                                   l6789 1770                                     l6893 15AC  
                                   l6877 1FAD                                     l7773 16BE  
                  _myMain_Initialization 1D7D                                     l7697 1F98  
                                   l6985 0E12                                     l7777 16C9  
                                   l6899 15C1                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4005 09CD  
                                   u4035 09E3                                     u4205 0499  
                                   u5035 1655                                     u4235 04AC  
                                   u4175 0486                                     u4335 0EE2  
                                   u4415 0F85                                     u4265 04BF  
                                   u4345 0EF2                                     u4425 0F95  
                                   u4355 0F12                                     _PEIE 005E  
                                   u4365 0F21                                     u4445 0FBD  
                                   u4375 0F2B                                     u4535 0D0E  
                                   u4455 0FC3                                     u7025 151C  
                                   u4715 07D7                                     u4900 17AE  
                                   u4725 07E1                                     u4645 118F  
                                   u4565 0D38                                     u4485 0FD9  
                                   u4735 07E9                                     u4495 0FDF  
                                   u4905 17AC                                     u6505 0E53  
                                   u4595 0D53                                     u7315 0CA1  
                                   u3965 09A7                                     u6525 0E73  
                                   u7405 13EE                                     u5495 110F  
                                   u4695 07CD                                     u7255 138A  
                                   u7415 13FD                                     u4945 1E90  
                                   u5585 11B4                                     u3985 09C0  
                                   u6625 0567                                     u7435 156A  
                                   u7605 0242                                     u7365 0CD5  
                                   u7445 1589                                     u7465 15A0  
                                   u6755 05ED                                     u7665 0295  
                                   u7585 022F                                     u7595 0234  
                                   _LWLO 0CAD                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0143                                     _Temp 00D7  
                                   _main 169A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0932                          __end_of_RF_Main 1C26  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1CE9  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1C2C                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1483  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1D8C                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1C4C  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1CA8  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EC  
                        __end_of___awdiv 0800                          __end_of___ftadd 0523  
                        __end_of___ftdiv 0F4C                          __end_of___ftneg 1C8C  
                        __end_of___ftmul 1000                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0D75  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l678 0407  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1E96  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1260  
             _setDimmerLights_IntrIOC_GO 122E                         __end_of_TMR1_ISR 1104  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 169A  
             _setDimmerLights_ErrorClose 1642                         __end_of_TMR1_Set 1D46  
                                  _getAD 1F9F                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1E46              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1DBC  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 11CF  
          __end_of_setLED_Initialization 1DDD                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 17A4  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0ABD                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 16F2  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1C50  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0DFE  
                   _setSw_Initialization 1DBC                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0932                           _setMemory_Data 1D22  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1CD3  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08D5                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 109B  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09F3  
               _getMain_All_Error_Status 1292                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F22                                   i1l6741 03B6  
                                 i1l6717 0353                                   i1l6735 039F  
                                 i1l6743 03BC                                   i1l6753 03EF  
                                 i1l6737 03A5                                   i1l6749 03DA  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u606_25 032B                                   _OSCCON 0099  
                     __size_of_Load_Main 0144                                   u718_25 10FE  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1ED7                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1C1B  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1EAB  
                                 _Dimmer 013E                                   _DlySw1 01DD  
             __end_of_Mcu_Initialization 1E34                      __end_of_Buzzer_Main 1559  
                                 _Memory 01A0                                   _Timer1 00C8  
     __end_of_setDimmerLights_TriggerAdj 1F7F               _setDimmerLights_TriggerAdj 1F5F  
                                 ___bmul 1E10                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 132D  
                                 _myMain 00A0                   __end_of_setMemory_Data 1D2E  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 16F2                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1C5A         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 042D  
            _setDimmerLights_IntrControl 02F6                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1079  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1D0A  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1EAB  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0B22  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5474 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1FBF  
                          __end_of_getAD 1FBF                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1C44                          _getSw_KeyStatus 1DFF  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1DAC                                ?_WDT_Main 0070  
                      __end_of_Load_Main 02F6                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 11A5               __end_of_set_TimeoutCleared 1C55  
               __end_of_setDimmerReClock 1C30                       __size_of_getRxData 0074  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CE  
                   __size_of_setLED_Main 0033                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1C26  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 150F                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1C2C                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1C3C                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 169A                           _getDelayOff_GO 1D9C  
                    _CC2500_WriteCommand 1EEF                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0C6D                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1C73                       __size_of_setTxData 00BD  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1C6C  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13CF  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1CF4                       _setRFSW_AdjControl 1443  
                                _IOC_ISR 1D6E                                  _IOC_Set 1D53  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1363                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1F08              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1C23  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1CDE          __end_of_setControl_Lights_Table 0992  
                        setRF_Main@error 00EB                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 09F3  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1D16                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1DEE                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1DAC  
         __end_of_getDimmerLights_Status 1D9C                        __end_of_getRxData 0C6D  
                __end_of_getSw_KeyStatus 1E10                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1CBD                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1F40                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 07AC                                  ___ftadd 042D  
                                ___ftdiv 0EA3                                  ___ftneg 1C83  
                                ___ftmul 0F4C                                  ___fttol 0CEE  
                    __end_of_Switch_Main 1F9F                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1DEE                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 1559                                  __ptext2 1D7D  
                                __ptext3 13CF                                  __ptext4 0C6D  
                                __ptext5 1F9F                                  __ptext6 1E34  
                                __ptext7 0002                                  __ptext8 1C29  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C9E  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 1399                __end_of_Flash_Memory_Read 1F22  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0523  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1C40  
                      _DimmerLights_Main 11FE           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1C60               __end_of_CC2500_ClearRXFIFO 1C34  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1C38  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1CD3                      _DelayOffPointSelect 1CBD  
                         _getMain_LoadOK 1D60                                  clrloop0 1C67  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1C9E  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1151                            _DelayTime_1us 1104  
                      __end_of_setTxData 07AC               __end_of_Flash_Memory_Write 11FE  
                                init_ram 1C60                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C61                               _setSw_Main 0043  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 109B                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1DCC                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B88  
                          _CC2500_TxData 0A58                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 15A5  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C8C                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 122E                       _Mcu_Initialization 1E22  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 15A5  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1CDE                  __end_of_setPercentValue 0A58  
                 __end_of_getMain_LoadOK 1D6E                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 117B                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0B22  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 10BD  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1EEF  
                   _setRF_Initialization 1CE9                       _setMemory_LoopSave 1066  
                            _Switch_Main 1F7F                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CC8  
                __end_of_getRF_KeyStatus 1DFF                        _setMain_Exception 081C  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E96                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1E22  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
        _setDimmerLights_AdjControl$2402 0027                 _DimmerIntrIOCPointSelect 1CB2  
                      getSw_KeyStatus@sw 0070                        __size_of_TMR1_ISR 0024  
          __size_of_getDimmerLights_Line 000B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 1363            __size_of_setDimmerLights_Line 000C  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 174B  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1D0A  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 15F3  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1260  
                        ?_LedPointSelect 0070                                _Load_Main 01B2  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1C7B                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F5F  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1C50                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E2  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0878                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1C29                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D1  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D3                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1CA8                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 12C5                         _CC2500_SIDLEMode 1C38  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 1292  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1E46  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 081C  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F0  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1C1C  
                              _getBuz_GO 1DDD      __end_of_Flash_Memory_Initialization 06EF  
            _Flash_Memory_Initialization 0613                                 ?___awdiv 0020  
                              __ptext100 117B                                __ptext101 1E10  
                              __ptext110 1E96                                __ptext102 1D9C  
                              __ptext111 1C38                                __ptext103 1D8C  
                              __ptext120 1EEF                                __ptext112 1483  
                              __ptext104 1CC8                                __ptext121 1C50  
                              __ptext113 1151                                __ptext105 16F2  
                              __ptext130 1D6E                                __ptext122 1E81  
                              __ptext114 1F40                                __ptext106 07AC  
                              __ptext131 1C2C                                __ptext123 1E59  
                              __ptext115 1FDF                                __ptext107 1C3C  
                              __ptext132 122E                                __ptext124 150F  
                              __ptext116 1D0A                                __ptext108 1C5A  
                              __ptext133 1CB2                                __ptext125 1C1D  
                              __ptext117 1104                                __ptext109 1CBD  
                               ?___ftadd 0041                                __ptext118 1C34  
                              __ptext127 10E0                                __ptext119 1C30  
                              __ptext128 02F6                                __ptext129 1C9E  
                              _getRxData 0BF9                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 004C  
                __end_of_setRFSW_Control 1642            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1C20                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0020                       __end_of_TouchPower 1EC0  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 10E0  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2338 0069  
                              _r_address 00D4           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 150F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D8C  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1CFF                      __end_of_setLED_Main 12F8  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CF  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1C29  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1C48                          SwPointSelect@sw 0021  
                              clear_ram0 1C66                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 1559  
                              _setTxData 06EF      __end_of_DimmerLights_Initialization 1D53  
            _DimmerLights_Initialization 1D46                       _CC2500_ClearRXFIFO 1C30  
                     _CC2500_ClearTXFIFO 1C34           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E81                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 11CF                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10E0  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1D3A  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0141  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1F08  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1E34  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1D3A  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 13CF  
                  _DlyOff_Initialization 1C5A                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1C4C  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0CEE  
                     __end_of_getLoad_OK 1C7B                    _Switch_Initialization 1C95  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1406  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E59  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D2                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$3737 0021  
          _getMain_All_Error_Status$3746 0023                 __end_of_getDimmer_LoadOK 1C83  
                    _Load_Initialization 1C55                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1079  
                       ??_LedPointSelect 0020                                 ___ftpack 0992  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002A                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 12C5               __end_of_setRF_DimmerLights 1800  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 000A                     ?_Load_Initialization 0070  
                               __ptext10 1C26                                 __ptext11 1C1C  
                               __ptext20 1C95                                 __ptext12 1F7F  
                               __ptext21 1DBC                                 __ptext13 0043  
                               __ptext30 1406                                 __ptext22 1EAB  
                               __ptext14 1E6D                                 __ptext31 1443  
                               __ptext23 1C23                                 __ptext15 12F8  
                               __ptext40 0B88                                 __ptext32 1260  
                               __ptext24 0523                                 __ptext16 1DFF  
                               __ptext41 109B                                 __ptext33 10BD  
                               __ptext25 0BF9                                 __ptext17 1CFF  
                               __ptext50 1C4C                                 __ptext42 1EC0  
                               __ptext34 0ABD                                 __ptext26 1399  
                               __ptext18 081C                                 __ptext51 1C6C  
                               __ptext43 1C20                                 __ptext35 0F4C  
                               __ptext27 1066                                 __ptext19 1CF4  
                               __ptext60 12C5                                 __ptext52 01B2  
                               __ptext44 1CE9                                 __ptext36 1E46  
                               __ptext28 0932                                 __ptext61 1C44  
                               __ptext53 1D60                                 __ptext45 1E22  
                               __ptext37 1DEE                                 __ptext29 15F3  
                               __ptext70 1F08                                 __ptext62 1DCC  
                               __ptext54 1C7B                                 __ptext46 1CDE  
                               __ptext38 1DDD                                 __ptext71 11FE  
                               __ptext63 1363                                 __ptext55 1DAC  
                               __ptext47 1D3A                                 __ptext39 0A58  
                               __ptext80 0EA3                                 __ptext72 174B  
                               __ptext64 15A5                                 __ptext56 1CA8  
                               __ptext48 1ED7                                 __ptext81 042D  
                               __ptext73 0B22                                 __ptext65 1D2E  
                               __ptext57 1C55                                 __ptext49 1D53  
                               __ptext90 1D46                                 __ptext82 1079  
                               __ptext74 0D75                                 __ptext66 0613  
                               __ptext58 0800                                 __ptext91 112A  
                               __ptext83 0992                                 __ptext75 06EF  
                               __ptext67 1D22                                 __ptext59 1C48  
                               __ptext92 1C1B                                 __ptext84 132D  
                               __ptext76 17A4                                 __ptext68 11CF  
                               __ptext93 1C40                                 __ptext85 1CD3  
                               __ptext77 09F3                                 __ptext69 1C8C  
                               __ptext94 08D5                                 __ptext86 1D16  
                               __ptext78 0CEE                                 __ptext95 1642  
                               __ptext87 1292                                 __ptext79 1C83  
                               __ptext96 14C6                                 __ptext88 11A5  
                               __ptext97 1F5F                                 __ptext89 1C73  
                               __ptext98 1F22                                 __ptext99 0878  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1CFF  
          __end_of_Dimmer_Initialization 1C1C             __end_of_setDimmerLights_Main 17A4  
           __end_of_setDimmerLights_Line 1D22                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 1443                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1E6D  
               __end_of_CC2500_SIDLEMode 1C3C               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1CC8               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00EA                __size_of_setDimmerReClock 0004  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1EC0  
                     _CC2500_InitPATable 1F40                 __end_of_setMemory_Modify 1E59  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 0613  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EC  
                               main@argv 00EE                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6527 0022                          _CC2500_PowerRST 1483  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 15F3  
                      ??_getPercentValue 005C                              _setLog_Code 1399  
            __end_of_Flash_Memory_Unlock 1C95                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1FDF                       __end_of_setSw_Main 01B2  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 117B  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1CB2  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1151  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 112A  
            __end_of_setDimmerLights_Adj 0B88                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1C20     __size_of_setDimmerLights_IntrControl 0137  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1D2E  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1C40      __size_of_setDimmerLights_IntrIOC_GO 0032  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1C44       __end_of_setDimmerLights_AdjControl 132D  
             _setDimmerLights_AdjControl 12F8                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0878  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 11A5  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 112A                  __end_of_CC2500_ReadByte 1ED7  
           __end_of_setSw_Initialization 1DCC                          _Timeout_Counter 1E81  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
             __end_of_LED_Initialization 1C48         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1C1D                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1C23                    __end_of_CC2500_RxData 0BF9  
                  __end_of_CC2500_TxData 0ABD                    _setLoad_AH_AL_Restore 0800  
                __end_of_CC2500_PowerRST 14C6           getAll_DimmerLights_AdjGO@adjgo 0020  
