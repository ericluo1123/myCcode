

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 02 17:09:03 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  0116                     	;# 
   113  0117                     	;# 
   114  011D                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  018E                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  0197                     	;# 
   127  0199                     	;# 
   128  019A                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019C                     	;# 
   134  019C                     	;# 
   135  019D                     	;# 
   136  019E                     	;# 
   137  019F                     	;# 
   138  020D                     	;# 
   139  0210                     	;# 
   140  0211                     	;# 
   141  0211                     	;# 
   142  0212                     	;# 
   143  0212                     	;# 
   144  0213                     	;# 
   145  0213                     	;# 
   146  0214                     	;# 
   147  0214                     	;# 
   148  0215                     	;# 
   149  0215                     	;# 
   150  0215                     	;# 
   151  0216                     	;# 
   152  0216                     	;# 
   153  0217                     	;# 
   154  0217                     	;# 
   155  0291                     	;# 
   156  0291                     	;# 
   157  0292                     	;# 
   158  0293                     	;# 
   159  0298                     	;# 
   160  0298                     	;# 
   161  0299                     	;# 
   162  029A                     	;# 
   163  0394                     	;# 
   164  0395                     	;# 
   165  0396                     	;# 
   166  0FE4                     	;# 
   167  0FE5                     	;# 
   168  0FE6                     	;# 
   169  0FE7                     	;# 
   170  0FE8                     	;# 
   171  0FE9                     	;# 
   172  0FEA                     	;# 
   173  0FEB                     	;# 
   174  0FED                     	;# 
   175  0FEE                     	;# 
   176  0FEF                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  0116                     	;# 
   224  0117                     	;# 
   225  011D                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020D                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  0090                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  018E                     	;# 
   340  0191                     	;# 
   341  0191                     	;# 
   342  0192                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0197                     	;# 
   349  0199                     	;# 
   350  019A                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020D                     	;# 
   361  0210                     	;# 
   362  0211                     	;# 
   363  0211                     	;# 
   364  0212                     	;# 
   365  0212                     	;# 
   366  0213                     	;# 
   367  0213                     	;# 
   368  0214                     	;# 
   369  0214                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0216                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0217                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0010                     	;# 
   415  0011                     	;# 
   416  0012                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  008C                     	;# 
   427  008D                     	;# 
   428  008E                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  011D                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  018E                     	;# 
   451  0191                     	;# 
   452  0191                     	;# 
   453  0192                     	;# 
   454  0193                     	;# 
   455  0193                     	;# 
   456  0194                     	;# 
   457  0195                     	;# 
   458  0196                     	;# 
   459  0197                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020D                     	;# 
   472  0210                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0298                     	;# 
   493  0298                     	;# 
   494  0299                     	;# 
   495  029A                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019C                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  020D                     	;# 
   583  0210                     	;# 
   584  0211                     	;# 
   585  0211                     	;# 
   586  0212                     	;# 
   587  0212                     	;# 
   588  0213                     	;# 
   589  0213                     	;# 
   590  0214                     	;# 
   591  0214                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0216                     	;# 
   596  0216                     	;# 
   597  0217                     	;# 
   598  0217                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0298                     	;# 
   604  0298                     	;# 
   605  0299                     	;# 
   606  029A                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0016                     	;# 
   642  0017                     	;# 
   643  0018                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  011D                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020D                     	;# 
   694  0210                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008D                     	;# 
   761  008E                     	;# 
   762  0090                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020D                     	;# 
   805  0210                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0291                     	;# 
   822  0291                     	;# 
   823  0292                     	;# 
   824  0293                     	;# 
   825  0298                     	;# 
   826  0298                     	;# 
   827  0299                     	;# 
   828  029A                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  000E                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  008C                     	;# 
   871  008D                     	;# 
   872  008E                     	;# 
   873  0090                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  011D                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0194                     	;# 
   901  0195                     	;# 
   902  0196                     	;# 
   903  0197                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020D                     	;# 
   916  0210                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  0394                     	;# 
   941  0395                     	;# 
   942  0396                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0010                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0015                     	;# 
   973  0016                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001C                     	;# 
   981  008C                     	;# 
   982  008D                     	;# 
   983  008E                     	;# 
   984  0090                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0211                     	;# 
  1030  0212                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0213                     	;# 
  1034  0214                     	;# 
  1035  0214                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0216                     	;# 
  1040  0216                     	;# 
  1041  0217                     	;# 
  1042  0217                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  0394                     	;# 
  1052  0395                     	;# 
  1053  0396                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0116                     	;# 
  1112  0117                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018D                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0197                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020D                     	;# 
  1138  0210                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  0394                     	;# 
  1163  0395                     	;# 
  1164  0396                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  0000                     	;# 
  1177  0001                     	;# 
  1178  0002                     	;# 
  1179  0003                     	;# 
  1180  0004                     	;# 
  1181  0005                     	;# 
  1182  0006                     	;# 
  1183  0007                     	;# 
  1184  0008                     	;# 
  1185  0009                     	;# 
  1186  000A                     	;# 
  1187  000B                     	;# 
  1188  000C                     	;# 
  1189  000D                     	;# 
  1190  000E                     	;# 
  1191  0010                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  011D                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  0394                     	;# 
  1274  0395                     	;# 
  1275  0396                     	;# 
  1276  0FE4                     	;# 
  1277  0FE5                     	;# 
  1278  0FE6                     	;# 
  1279  0FE7                     	;# 
  1280  0FE8                     	;# 
  1281  0FE9                     	;# 
  1282  0FEA                     	;# 
  1283  0FEB                     	;# 
  1284  0FED                     	;# 
  1285  0FEE                     	;# 
  1286  0FEF                     	;# 
  1287  0000                     	;# 
  1288  0001                     	;# 
  1289  0002                     	;# 
  1290  0003                     	;# 
  1291  0004                     	;# 
  1292  0005                     	;# 
  1293  0006                     	;# 
  1294  0007                     	;# 
  1295  0008                     	;# 
  1296  0009                     	;# 
  1297  000A                     	;# 
  1298  000B                     	;# 
  1299  000C                     	;# 
  1300  000D                     	;# 
  1301  000E                     	;# 
  1302  0010                     	;# 
  1303  0011                     	;# 
  1304  0012                     	;# 
  1305  0015                     	;# 
  1306  0016                     	;# 
  1307  0016                     	;# 
  1308  0017                     	;# 
  1309  0018                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  008C                     	;# 
  1315  008D                     	;# 
  1316  008E                     	;# 
  1317  0090                     	;# 
  1318  0091                     	;# 
  1319  0092                     	;# 
  1320  0095                     	;# 
  1321  0096                     	;# 
  1322  0097                     	;# 
  1323  0099                     	;# 
  1324  009A                     	;# 
  1325  009B                     	;# 
  1326  009B                     	;# 
  1327  009C                     	;# 
  1328  009D                     	;# 
  1329  009E                     	;# 
  1330  010C                     	;# 
  1331  010D                     	;# 
  1332  010E                     	;# 
  1333  0116                     	;# 
  1334  0117                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019B                     	;# 
  1354  019C                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020D                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0216                     	;# 
  1373  0216                     	;# 
  1374  0217                     	;# 
  1375  0217                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0298                     	;# 
  1381  0298                     	;# 
  1382  0299                     	;# 
  1383  029A                     	;# 
  1384  0394                     	;# 
  1385  0395                     	;# 
  1386  0396                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398  0000                     	;# 
  1399  0001                     	;# 
  1400  0002                     	;# 
  1401  0003                     	;# 
  1402  0004                     	;# 
  1403  0005                     	;# 
  1404  0006                     	;# 
  1405  0007                     	;# 
  1406  0008                     	;# 
  1407  0009                     	;# 
  1408  000A                     	;# 
  1409  000B                     	;# 
  1410  000C                     	;# 
  1411  000D                     	;# 
  1412  000E                     	;# 
  1413  0010                     	;# 
  1414  0011                     	;# 
  1415  0012                     	;# 
  1416  0015                     	;# 
  1417  0016                     	;# 
  1418  0016                     	;# 
  1419  0017                     	;# 
  1420  0018                     	;# 
  1421  0019                     	;# 
  1422  001A                     	;# 
  1423  001B                     	;# 
  1424  001C                     	;# 
  1425  008C                     	;# 
  1426  008D                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0116                     	;# 
  1445  0117                     	;# 
  1446  011D                     	;# 
  1447  018C                     	;# 
  1448  018D                     	;# 
  1449  018E                     	;# 
  1450  0191                     	;# 
  1451  0191                     	;# 
  1452  0192                     	;# 
  1453  0193                     	;# 
  1454  0193                     	;# 
  1455  0194                     	;# 
  1456  0195                     	;# 
  1457  0196                     	;# 
  1458  0197                     	;# 
  1459  0199                     	;# 
  1460  019A                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019D                     	;# 
  1468  019E                     	;# 
  1469  019F                     	;# 
  1470  020D                     	;# 
  1471  0210                     	;# 
  1472  0211                     	;# 
  1473  0211                     	;# 
  1474  0212                     	;# 
  1475  0212                     	;# 
  1476  0213                     	;# 
  1477  0213                     	;# 
  1478  0214                     	;# 
  1479  0214                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0216                     	;# 
  1484  0216                     	;# 
  1485  0217                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0298                     	;# 
  1492  0298                     	;# 
  1493  0299                     	;# 
  1494  029A                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  008C                     	;# 
  1537  008D                     	;# 
  1538  008E                     	;# 
  1539  0090                     	;# 
  1540  0091                     	;# 
  1541  0092                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0097                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  011D                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0194                     	;# 
  1567  0195                     	;# 
  1568  0196                     	;# 
  1569  0197                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  0210                     	;# 
  1583  0211                     	;# 
  1584  0211                     	;# 
  1585  0212                     	;# 
  1586  0212                     	;# 
  1587  0213                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0214                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  0FE4                     	;# 
  1610  0FE5                     	;# 
  1611  0FE6                     	;# 
  1612  0FE7                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEB                     	;# 
  1617  0FED                     	;# 
  1618  0FEE                     	;# 
  1619  0FEF                     	;# 
  1620  0000                     	;# 
  1621  0001                     	;# 
  1622  0002                     	;# 
  1623  0003                     	;# 
  1624  0004                     	;# 
  1625  0005                     	;# 
  1626  0006                     	;# 
  1627  0007                     	;# 
  1628  0008                     	;# 
  1629  0009                     	;# 
  1630  000A                     	;# 
  1631  000B                     	;# 
  1632  000C                     	;# 
  1633  000D                     	;# 
  1634  000E                     	;# 
  1635  0010                     	;# 
  1636  0011                     	;# 
  1637  0012                     	;# 
  1638  0015                     	;# 
  1639  0016                     	;# 
  1640  0016                     	;# 
  1641  0017                     	;# 
  1642  0018                     	;# 
  1643  0019                     	;# 
  1644  001A                     	;# 
  1645  001B                     	;# 
  1646  001C                     	;# 
  1647  008C                     	;# 
  1648  008D                     	;# 
  1649  008E                     	;# 
  1650  0090                     	;# 
  1651  0091                     	;# 
  1652  0092                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0099                     	;# 
  1657  009A                     	;# 
  1658  009B                     	;# 
  1659  009B                     	;# 
  1660  009C                     	;# 
  1661  009D                     	;# 
  1662  009E                     	;# 
  1663  010C                     	;# 
  1664  010D                     	;# 
  1665  010E                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  011D                     	;# 
  1669  018C                     	;# 
  1670  018D                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019C                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020D                     	;# 
  1693  0210                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0216                     	;# 
  1706  0216                     	;# 
  1707  0217                     	;# 
  1708  0217                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  0394                     	;# 
  1718  0395                     	;# 
  1719  0396                     	;# 
  1720  0FE4                     	;# 
  1721  0FE5                     	;# 
  1722  0FE6                     	;# 
  1723  0FE7                     	;# 
  1724  0FE8                     	;# 
  1725  0FE9                     	;# 
  1726  0FEA                     	;# 
  1727  0FEB                     	;# 
  1728  0FED                     	;# 
  1729  0FEE                     	;# 
  1730  0FEF                     	;# 
  1731  0000                     	;# 
  1732  0001                     	;# 
  1733  0002                     	;# 
  1734  0003                     	;# 
  1735  0004                     	;# 
  1736  0005                     	;# 
  1737  0006                     	;# 
  1738  0007                     	;# 
  1739  0008                     	;# 
  1740  0009                     	;# 
  1741  000A                     	;# 
  1742  000B                     	;# 
  1743  000C                     	;# 
  1744  000D                     	;# 
  1745  000E                     	;# 
  1746  0010                     	;# 
  1747  0011                     	;# 
  1748  0012                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  001A                     	;# 
  1756  001B                     	;# 
  1757  001C                     	;# 
  1758  008C                     	;# 
  1759  008D                     	;# 
  1760  008E                     	;# 
  1761  0090                     	;# 
  1762  0091                     	;# 
  1763  0092                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0099                     	;# 
  1768  009A                     	;# 
  1769  009B                     	;# 
  1770  009B                     	;# 
  1771  009C                     	;# 
  1772  009D                     	;# 
  1773  009E                     	;# 
  1774  010C                     	;# 
  1775  010D                     	;# 
  1776  010E                     	;# 
  1777  0116                     	;# 
  1778  0117                     	;# 
  1779  011D                     	;# 
  1780  018C                     	;# 
  1781  018D                     	;# 
  1782  018E                     	;# 
  1783  0191                     	;# 
  1784  0191                     	;# 
  1785  0192                     	;# 
  1786  0193                     	;# 
  1787  0193                     	;# 
  1788  0194                     	;# 
  1789  0195                     	;# 
  1790  0196                     	;# 
  1791  0197                     	;# 
  1792  0199                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019E                     	;# 
  1802  019F                     	;# 
  1803  020D                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0291                     	;# 
  1821  0291                     	;# 
  1822  0292                     	;# 
  1823  0293                     	;# 
  1824  0298                     	;# 
  1825  0298                     	;# 
  1826  0299                     	;# 
  1827  029A                     	;# 
  1828  0394                     	;# 
  1829  0395                     	;# 
  1830  0396                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  008C                     	;# 
  1870  008D                     	;# 
  1871  008E                     	;# 
  1872  0090                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  011D                     	;# 
  1891  018C                     	;# 
  1892  018D                     	;# 
  1893  018E                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0194                     	;# 
  1900  0195                     	;# 
  1901  0196                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0211                     	;# 
  1918  0212                     	;# 
  1919  0212                     	;# 
  1920  0213                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0214                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0215                     	;# 
  1927  0216                     	;# 
  1928  0216                     	;# 
  1929  0217                     	;# 
  1930  0217                     	;# 
  1931  0291                     	;# 
  1932  0291                     	;# 
  1933  0292                     	;# 
  1934  0293                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  0394                     	;# 
  1940  0395                     	;# 
  1941  0396                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  000E                     	;# 
  1968  0010                     	;# 
  1969  0011                     	;# 
  1970  0012                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0097                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  011D                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  0191                     	;# 
  2006  0191                     	;# 
  2007  0192                     	;# 
  2008  0193                     	;# 
  2009  0193                     	;# 
  2010  0194                     	;# 
  2011  0195                     	;# 
  2012  0196                     	;# 
  2013  0197                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019E                     	;# 
  2024  019F                     	;# 
  2025  020D                     	;# 
  2026  0210                     	;# 
  2027  0211                     	;# 
  2028  0211                     	;# 
  2029  0212                     	;# 
  2030  0212                     	;# 
  2031  0213                     	;# 
  2032  0213                     	;# 
  2033  0214                     	;# 
  2034  0214                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0217                     	;# 
  2042  0291                     	;# 
  2043  0291                     	;# 
  2044  0292                     	;# 
  2045  0293                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  0394                     	;# 
  2051  0395                     	;# 
  2052  0396                     	;# 
  2053  0FE4                     	;# 
  2054  0FE5                     	;# 
  2055  0FE6                     	;# 
  2056  0FE7                     	;# 
  2057  0FE8                     	;# 
  2058  0FE9                     	;# 
  2059  0FEA                     	;# 
  2060  0FEB                     	;# 
  2061  0FED                     	;# 
  2062  0FEE                     	;# 
  2063  0FEF                     	;# 
  2064                           
  2065                           	psect	idataBANK1
  2066  04C7                     __pidataBANK1:	
  2067                           
  2068                           ;initializer for __product
  2069  04C7  3463               	retlw	99
  2070  04C8  3402               	retlw	2
  2071  04C9  3400               	retlw	0
  2072  04CA  3400               	retlw	0
  2073  04CB  3400               	retlw	0
  2074  04CC  3400               	retlw	0
  2075  04CD  3400               	retlw	0
  2076  04CE  3400               	retlw	0
  2077  04CF  3400               	retlw	0
  2078  04D0  3400               	retlw	0
  2079  04D1  3400               	retlw	0
  2080  04D2  3400               	retlw	0
  2081  04D3  34FF               	retlw	255
  2082  04D4  34FF               	retlw	255
  2083  04D5  34FF               	retlw	255
  2084  04D6  3400               	retlw	0
  2085  04D7  3400               	retlw	0
  2086  04D8  3400               	retlw	0
  2087  04D9  3400               	retlw	0
  2088  04DA  3400               	retlw	0
  2089  04DB  3400               	retlw	0
  2090  04DC  3400               	retlw	0
  2091  04DD  3400               	retlw	0
  2092  04DE  3400               	retlw	0
  2093  04DF  3400               	retlw	0
  2094  04E0  3400               	retlw	0
  2095  04E1  3400               	retlw	0
  2096  04E2  3400               	retlw	0
  2097  04E3  3400               	retlw	0
  2098  04E4  3400               	retlw	0
  2099  04E5  3400               	retlw	0
  2100  04E6  3400               	retlw	0
  2101                           
  2102                           	psect	stringtext
  2103  0200                     __pstringtext:	
  2104  0200                     _CC2500_registers_address:	
  2105  0200  3403               	retlw	3
  2106  0201  3416               	retlw	22
  2107  0202  3417               	retlw	23
  2108  0203  341E               	retlw	30
  2109  0204  341F               	retlw	31
  2110  0205  3420               	retlw	32
  2111  0206  342A               	retlw	42
  2112  0207  342B               	retlw	43
  2113  0208  340B               	retlw	11
  2114  0209  340C               	retlw	12
  2115  020A  340D               	retlw	13
  2116  020B  340E               	retlw	14
  2117  020C  340F               	retlw	15
  2118  020D  3410               	retlw	16
  2119  020E  3411               	retlw	17
  2120  020F  3412               	retlw	18
  2121  0210  3413               	retlw	19
  2122  0211  3414               	retlw	20
  2123  0212  340A               	retlw	10
  2124  0213  3415               	retlw	21
  2125  0214  3421               	retlw	33
  2126  0215  3422               	retlw	34
  2127  0216  3418               	retlw	24
  2128  0217  3419               	retlw	25
  2129  0218  341A               	retlw	26
  2130  0219  341B               	retlw	27
  2131  021A  341C               	retlw	28
  2132  021B  341D               	retlw	29
  2133  021C  3423               	retlw	35
  2134  021D  3424               	retlw	36
  2135  021E  3425               	retlw	37
  2136  021F  3426               	retlw	38
  2137  0220  3429               	retlw	41
  2138  0221  342C               	retlw	44
  2139  0222  342D               	retlw	45
  2140  0223  342E               	retlw	46
  2141  0224  3400               	retlw	0
  2142  0225  3401               	retlw	1
  2143  0226  3402               	retlw	2
  2144  0227  3407               	retlw	7
  2145  0228  3408               	retlw	8
  2146  0229  3409               	retlw	9
  2147  022A  3406               	retlw	6
  2148  022B  3404               	retlw	4
  2149  022C  3405               	retlw	5
  2150  022D  3427               	retlw	39
  2151  022E  3428               	retlw	40
  2152  022F                     __end_of_CC2500_registers_address:	
  2153  022F                     _CC2500_rfSettings:	
  2154  022F  3407               	retlw	7
  2155  0230  3407               	retlw	7
  2156  0231  3430               	retlw	48
  2157  0232  3487               	retlw	135
  2158  0233  346B               	retlw	107
  2159  0234  34F8               	retlw	248
  2160  0235  347F               	retlw	127
  2161  0236  343F               	retlw	63
  2162  0237  3409               	retlw	9
  2163  0238  3400               	retlw	0
  2164  0239  345C               	retlw	92
  2165  023A  34A7               	retlw	167
  2166  023B  3462               	retlw	98
  2167  023C  3486               	retlw	134
  2168  023D  3483               	retlw	131
  2169  023E  3403               	retlw	3
  2170  023F  3422               	retlw	34
  2171  0240  34F8               	retlw	248
  2172  0241  3400               	retlw	0
  2173  0242  3444               	retlw	68
  2174  0243  34B6               	retlw	182
  2175  0244  3410               	retlw	16
  2176  0245  3418               	retlw	24
  2177  0246  341D               	retlw	29
  2178  0247  341C               	retlw	28
  2179  0248  34C7               	retlw	199
  2180  0249  3400               	retlw	0
  2181  024A  34B2               	retlw	178
  2182  024B  34EA               	retlw	234
  2183  024C  340A               	retlw	10
  2184  024D  3400               	retlw	0
  2185  024E  3411               	retlw	17
  2186  024F  3459               	retlw	89
  2187  0250  3488               	retlw	136
  2188  0251  3431               	retlw	49
  2189  0252  340B               	retlw	11
  2190  0253  342F               	retlw	47
  2191  0254  342E               	retlw	46
  2192  0255  3406               	retlw	6
  2193  0256  3404               	retlw	4
  2194  0257  3405               	retlw	5
  2195  0258  3400               	retlw	0
  2196  0259  3430               	retlw	48
  2197  025A  34D3               	retlw	211
  2198  025B  3491               	retlw	145
  2199  025C  3441               	retlw	65
  2200  025D  3400               	retlw	0
  2201  025E                     __end_of_CC2500_rfSettings:	
  2202  025E                     _CC2500_patable_vaule:	
  2203  025E  34FE               	retlw	254
  2204  025F  34FE               	retlw	254
  2205  0260  34FE               	retlw	254
  2206  0261  34FE               	retlw	254
  2207  0262  34FE               	retlw	254
  2208  0263  34FE               	retlw	254
  2209  0264  34FE               	retlw	254
  2210  0265  34FE               	retlw	254
  2211  0266                     __end_of_CC2500_patable_vaule:	
  2212                           
  2213                           	psect	nvCOMMON
  2214  0079                     __pnvCOMMON:	
  2215  0079                     _product:	
  2216  0079                     	ds	1
  2217                           
  2218                           	psect	nvBANK0
  2219  006C                     __pnvBANK0:	
  2220  006C                     _Tx_Length:	
  2221  006C                     	ds	1
  2222  000C                     _PORTA	set	12
  2223  000D                     _PORTB	set	13
  2224  000E                     _PORTC	set	14
  2225  0018                     _T1CON	set	24
  2226  0017                     _TMR1H	set	23
  2227  0016                     _TMR1L	set	22
  2228  005F                     _GIE	set	95
  2229  005E                     _PEIE	set	94
  2230  0060                     _RA0	set	96
  2231  0061                     _RA1	set	97
  2232  0062                     _RA2	set	98
  2233  0070                     _RC0	set	112
  2234  0071                     _RC1	set	113
  2235  0073                     _RC3	set	115
  2236  0074                     _RC4	set	116
  2237  0075                     _RC5	set	117
  2238  008D                     _RCIF	set	141
  2239  0088                     _TMR1IF	set	136
  2240  008C                     _TXIF	set	140
  2241  0099                     _OSCCON	set	153
  2242  008C                     _TRISA	set	140
  2243  008D                     _TRISB	set	141
  2244  008E                     _TRISC	set	142
  2245  048D                     _RCIE	set	1165
  2246  0488                     _TMR1IE	set	1160
  2247  0476                     _TRISC6	set	1142
  2248  0477                     _TRISC7	set	1143
  2249  048C                     _TXIE	set	1164
  2250  010C                     _LATA	set	268
  2251  010D                     _LATB	set	269
  2252  010E                     _LATC	set	270
  2253  018C                     _ANSELA	set	396
  2254  018D                     _ANSELB	set	397
  2255  018E                     _ANSELC	set	398
  2256  0199                     _RCREG	set	409
  2257  019D                     _RCSTA	set	413
  2258  019B                     _SPBRG	set	411
  2259  019C                     _SPBRGH	set	412
  2260  019A                     _TXREG	set	410
  2261  019E                     _TXSTA	set	414
  2262  0CFB                     _BRG16	set	3323
  2263  0CEE                     _RX9	set	3310
  2264  0CF6                     _TX9	set	3318
  2265                           
  2266                           ; #config settings
  2267  0000                     
  2268                           	psect	cinit
  2269  0015                     start_initialization:	
  2270  0015                     __initialization:	
  2271                           
  2272                           ; Clear objects allocated to BITCOMMON
  2273  0015  01F6               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2274                           
  2275                           ; Clear objects allocated to COMMON
  2276  0016  01F7               	clrf	__pbssCOMMON& (0+127)
  2277  0017  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2278                           
  2279                           ; Clear objects allocated to BANK0
  2280  0018  3020               	movlw	low __pbssBANK0
  2281  0019  0084               	movwf	4
  2282  001A  3000               	movlw	high __pbssBANK0
  2283  001B  0085               	movwf	5
  2284  001C  3044               	movlw	68
  2285  001D  3186  268F  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK1
  2288  0020  30C0               	movlw	low __pbssBANK1
  2289  0021  0084               	movwf	4
  2290  0022  3000               	movlw	high __pbssBANK1
  2291  0023  0085               	movwf	5
  2292  0024  300C               	movlw	12
  2293  0025  3186  268F  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Initialize objects allocated to BANK1
  2296  0028  30C7               	movlw	low __pidataBANK1
  2297  0029  0084               	movwf	4
  2298  002A  3084               	movlw	(high __pidataBANK1)| (0+128)
  2299  002B  0085               	movwf	5
  2300  002C  30A0               	movlw	low __pdataBANK1
  2301  002D  0086               	movwf	6
  2302  002E  3000               	movlw	high __pdataBANK1
  2303  002F  0087               	movwf	7
  2304  0030  3020               	movlw	32
  2305  0031  3186  2695         	fcall	init_ram
  2306  0033                     end_of_initialization:	
  2307                           ;End of C runtime variable initialization code
  2308                           
  2309  0033                     __end_of__initialization:	
  2310  0033  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2311  0034  0020               	movlb	0
  2312  0035  3184  2CA4         	ljmp	_main	;jump to C main() function
  2313                           
  2314                           	psect	bitbssCOMMON
  2315  03B0                     __pbitbssCOMMON:	
  2316  03B0                     _Receive_OK:	
  2317  03B0                     	ds	1
  2318  03B1                     _Transceive_OK:	
  2319  03B1                     	ds	1
  2320                           
  2321                           	psect	bssCOMMON
  2322  0077                     __pbssCOMMON:	
  2323  0077                     _SPI0Buffer:	
  2324  0077                     	ds	1
  2325  0078                     _s_data:	
  2326  0078                     	ds	1
  2327                           
  2328                           	psect	bssBANK0
  2329  0020                     __pbssBANK0:	
  2330  0020                     _RF_Data:	
  2331  0020                     	ds	30
  2332  003E                     _myMain:	
  2333  003E                     	ds	15
  2334  004D                     _RF1:	
  2335  004D                     	ds	12
  2336  0059                     _Timer1:	
  2337  0059                     	ds	3
  2338  005C                     _RF_Count:	
  2339  005C                     	ds	2
  2340  005E                     _CRC:	
  2341  005E                     	ds	1
  2342  005F                     _RSSI:	
  2343  005F                     	ds	1
  2344  0060                     _Rx_Length:	
  2345  0060                     	ds	1
  2346  0061                     _SwDetect:	
  2347  0061                     	ds	1
  2348  0062                     _r_address:	
  2349  0062                     	ds	1
  2350  0063                     _r_data:	
  2351  0063                     	ds	1
  2352                           
  2353                           	psect	bssBANK1
  2354  00C0                     __pbssBANK1:	
  2355  00C0                     _UART:	
  2356  00C0                     	ds	12
  2357                           
  2358                           	psect	dataBANK1
  2359  00A0                     __pdataBANK1:	
  2360  00A0                     __product:	
  2361  00A0                     	ds	32
  2362                           
  2363                           	psect	clrtext
  2364  068F                     clear_ram0:	
  2365                           ;	Called with FSR0 containing the base address, and
  2366                           ;	WREG with the size to clear
  2367                           
  2368  068F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2369  0690                     clrloop0:	
  2370  0690  0180               	clrf	0	;clear RAM location pointed to by FSR
  2371  0691  3101               	addfsr 0,1
  2372  0692  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2373  0693  2E90               	goto	clrloop0	;have we reached the end yet?
  2374  0694  3400               	retlw	0	;all done for this memory range, return
  2375                           
  2376                           	psect	inittext
  2377  0695                     init_ram:	
  2378  0695  00FE               	movwf	126
  2379  0696                     initloop:	
  2380  0696  0012               	moviw fsr0++
  2381  0697  001E               	movwi fsr1++
  2382  0698  0BFE               	decfsz	126,f
  2383  0699  2E96               	goto	initloop
  2384  069A  3400               	retlw	0
  2385                           
  2386                           	psect	cstackBANK1
  2387  00CC                     __pcstackBANK1:	
  2388  00CC                     ?_main:	
  2389  00CC                     main@argc:	
  2390                           ; 2 bytes @ 0x0
  2391                           
  2392                           
  2393                           ; 2 bytes @ 0x0
  2394  00CC                     	ds	2
  2395  00CE                     main@argv:	
  2396                           
  2397                           ; 2 bytes @ 0x2
  2398  00CE                     	ds	2
  2399                           
  2400                           	psect	cstackCOMMON
  2401  0070                     __pcstackCOMMON:	
  2402  0070                     ?_Timeout_Counter:	
  2403  0070                     ?_set_TimeoutCleared:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ?_CC2500_WriteByte:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?_CC2500_WriteCommand:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?_CC2500_ReadStatus:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_CC2500_ReadByte:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_CC2500_PowerRST:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0070                     ?_CC2500_InitSetREG:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0070                     ?_CC2500_InitPATable:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0070                     ?_CC2500_ClearTXFIFO:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0070                     ?_CC2500_ClearRXFIFO:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0070                     ?_CC2500_FrequencyCabr:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0070                     ?_CC2500_SIDLEMode:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ?_Fosc_Set:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_IO_Set:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ?_TMR1_Set:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_UART_Set:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_TMR1_ISR:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ??_TMR1_ISR:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_UART_ISR:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ??_UART_ISR:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ??_getch:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_UART_Receive:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_UART_Transmit:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_putch:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_setTxData:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_myMain_Initialization:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_RF_Initialization:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_myUARTtoRF_Initialization:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_my_MainTimer:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_RF_Main:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_myUARTtoRF_Main:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setRF_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setRF_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_RF_RxDisable:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_getRxData:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_setLog_Code:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setControl_Lights_Table:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_TxData:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_RxData:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_PowerOnInitial:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_Mcu_Initialization:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_ISR:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_UART_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_getch:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_getMain_All_Error_Status:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     getMain_All_Error_Status@command:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541                           
  2542                           ; 1 bytes @ 0x0
  2543  0070                     	ds	1
  2544  0071                     UART_ISR@i:	
  2545                           
  2546                           ; 2 bytes @ 0x1
  2547  0071                     	ds	2
  2548  0073                     ??_ISR:	
  2549                           
  2550                           ; 0 bytes @ 0x3
  2551  0073                     	ds	1
  2552  0074                     ??_Timeout_Counter:	
  2553  0074                     ??_set_TimeoutCleared:	
  2554                           ; 0 bytes @ 0x4
  2555                           
  2556  0074                     ??_CC2500_WriteByte:	
  2557                           ; 0 bytes @ 0x4
  2558                           
  2559  0074                     ??_CC2500_ReadByte:	
  2560                           ; 0 bytes @ 0x4
  2561                           
  2562  0074                     ?_DelayTime_1us:	
  2563                           ; 0 bytes @ 0x4
  2564                           
  2565  0074                     ??_Fosc_Set:	
  2566                           ; 0 bytes @ 0x4
  2567                           
  2568  0074                     ??_IO_Set:	
  2569                           ; 0 bytes @ 0x4
  2570                           
  2571  0074                     ??_TMR1_Set:	
  2572                           ; 0 bytes @ 0x4
  2573                           
  2574  0074                     ??_UART_Set:	
  2575                           ; 0 bytes @ 0x4
  2576                           
  2577  0074                     ??_putch:	
  2578                           ; 0 bytes @ 0x4
  2579                           
  2580  0074                     ??_setTxData:	
  2581                           ; 0 bytes @ 0x4
  2582                           
  2583  0074                     ??_myMain_Initialization:	
  2584                           ; 0 bytes @ 0x4
  2585                           
  2586  0074                     ??_myUARTtoRF_Initialization:	
  2587                           ; 0 bytes @ 0x4
  2588                           
  2589  0074                     ??_my_MainTimer:	
  2590                           ; 0 bytes @ 0x4
  2591                           
  2592  0074                     ??_setRF_Initialization:	
  2593                           ; 0 bytes @ 0x4
  2594                           
  2595  0074                     ??_setLog_Code:	
  2596                           ; 0 bytes @ 0x4
  2597                           
  2598  0074                     ??_Mcu_Initialization:	
  2599                           ; 0 bytes @ 0x4
  2600                           
  2601  0074                     ??_getMain_All_Error_Status:	
  2602                           ; 0 bytes @ 0x4
  2603                           
  2604  0074                     putch@byte:	
  2605                           ; 0 bytes @ 0x4
  2606                           
  2607  0074                     getMain_All_Error_Status@status:	
  2608                           ; 1 bytes @ 0x4
  2609                           
  2610  0074                     DelayTime_1us@count:	
  2611                           ; 1 bytes @ 0x4
  2612                           
  2613                           
  2614                           ; 2 bytes @ 0x4
  2615  0074                     	ds	1
  2616  0075                     ??_UART_Receive:	
  2617  0075                     ??_UART_Transmit:	
  2618                           ; 0 bytes @ 0x5
  2619                           
  2620  0075                     ??_RF_Initialization:	
  2621                           ; 0 bytes @ 0x5
  2622                           
  2623  0075                     ??_myUARTtoRF_Main:	
  2624                           ; 0 bytes @ 0x5
  2625                           
  2626  0075                     ??_getRxData:	
  2627                           ; 0 bytes @ 0x5
  2628                           
  2629  0075                     ??_setControl_Lights_Table:	
  2630                           ; 0 bytes @ 0x5
  2631                           
  2632  0075                     CC2500_WriteByte@loop_a:	
  2633                           ; 0 bytes @ 0x5
  2634                           
  2635  0075                     CC2500_ReadByte@loop_b:	
  2636                           ; 1 bytes @ 0x5
  2637                           
  2638                           
  2639                           ; 1 bytes @ 0x5
  2640  0075                     	ds	1
  2641  0076                     ??_CC2500_ClearTXFIFO:	
  2642  0076                     ??_CC2500_ClearRXFIFO:	
  2643                           ; 0 bytes @ 0x6
  2644                           
  2645  0076                     ??_CC2500_FrequencyCabr:	
  2646                           ; 0 bytes @ 0x6
  2647                           
  2648  0076                     ??_CC2500_SIDLEMode:	
  2649                           ; 0 bytes @ 0x6
  2650                           
  2651  0076                     ??_DelayTime_1us:	
  2652                           ; 0 bytes @ 0x6
  2653                           
  2654  0076                     ??_RF_Main:	
  2655                           ; 0 bytes @ 0x6
  2656                           
  2657  0076                     ??_RF_RxDisable:	
  2658                           ; 0 bytes @ 0x6
  2659                           
  2660  0076                     ??_CC2500_PowerOnInitial:	
  2661                           ; 0 bytes @ 0x6
  2662                           
  2663  0076                     ??_UART_Main:	
  2664                           ; 0 bytes @ 0x6
  2665                           
  2666  0076                     ??_main:	
  2667                           ; 0 bytes @ 0x6
  2668                           
  2669                           
  2670                           	psect	cstackBANK0
  2671  0064                     __pcstackBANK0:	
  2672                           ; 0 bytes @ 0x6
  2673                           
  2674  0064                     ??_CC2500_WriteCommand:	
  2675  0064                     ??_CC2500_ReadStatus:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0064                     ?_CC2500_WriteREG:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0064                     CC2500_WriteREG@value:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0064                     getRxData@error:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0064                     DelayTime_1us@i:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0064                     UART_Transmit@i:	
  2691                           ; 2 bytes @ 0x0
  2692                           
  2693                           
  2694                           ; 2 bytes @ 0x0
  2695  0064                     	ds	1
  2696  0065                     ??_CC2500_WriteREG:	
  2697  0065                     CC2500_WriteCommand@command:	
  2698                           ; 0 bytes @ 0x1
  2699                           
  2700  0065                     CC2500_ReadStatus@status_addr:	
  2701                           ; 1 bytes @ 0x1
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0x1
  2705  0065                     	ds	1
  2706  0066                     ??_CC2500_TxData:	
  2707  0066                     ??_CC2500_RxData:	
  2708                           ; 0 bytes @ 0x2
  2709                           
  2710  0066                     CC2500_WriteREG@w_addr:	
  2711                           ; 0 bytes @ 0x2
  2712                           
  2713  0066                     DelayTime_1us@j:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716                           
  2717                           ; 2 bytes @ 0x2
  2718  0066                     	ds	1
  2719  0067                     ??_CC2500_InitSetREG:	
  2720  0067                     ??_CC2500_InitPATable:	
  2721                           ; 0 bytes @ 0x3
  2722                           
  2723  0067                     CC2500_TxData@loop_e:	
  2724                           ; 0 bytes @ 0x3
  2725                           
  2726  0067                     CC2500_RxData@loop_f:	
  2727                           ; 1 bytes @ 0x3
  2728                           
  2729                           
  2730                           ; 1 bytes @ 0x3
  2731  0067                     	ds	1
  2732  0068                     ??_CC2500_PowerRST:	
  2733  0068                     ??_setRF_Main:	
  2734                           ; 0 bytes @ 0x4
  2735                           
  2736  0068                     CC2500_InitSetREG@temp1:	
  2737                           ; 0 bytes @ 0x4
  2738                           
  2739  0068                     CC2500_InitPATable@temp:	
  2740                           ; 1 bytes @ 0x4
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x4
  2744  0068                     	ds	1
  2745  0069                     CC2500_InitSetREG@temp2:	
  2746  0069                     CC2500_InitPATable@loop_d:	
  2747                           ; 1 bytes @ 0x5
  2748                           
  2749  0069                     setRF_Main@loop_f:	
  2750                           ; 1 bytes @ 0x5
  2751                           
  2752                           
  2753                           ; 1 bytes @ 0x5
  2754  0069                     	ds	1
  2755  006A                     CC2500_InitSetREG@loop_c:	
  2756  006A                     setRF_Main@Receive_OK:	
  2757                           ; 1 bytes @ 0x6
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x6
  2761  006A                     	ds	1
  2762  006B                     setRF_Main@error:	
  2763                           
  2764                           ; 1 bytes @ 0x7
  2765  006B                     	ds	1
  2766                           
  2767                           	psect	maintext
  2768  04A4                     __pmaintext:	
  2769 ;;
  2770 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2771 ;;
  2772 ;; *************** function _main *****************
  2773 ;; Defined at:
  2774 ;;		line 7 in file "../src/Main_B1.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  argc            2    0[BANK1 ] int 
  2777 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  2    0[BANK1 ] int 
  2782 ;; Registers used:
  2783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 17F/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2789 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2792 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2793 ;;Total ram usage:        4 bytes
  2794 ;; Hardware stack levels required when called:    8
  2795 ;; This function calls:
  2796 ;;		_CC2500_PowerOnInitial
  2797 ;;		_Mcu_Initialization
  2798 ;;		_RF_Initialization
  2799 ;;		_RF_Main
  2800 ;;		_UART_Main
  2801 ;;		_myMain_Initialization
  2802 ;;		_myUARTtoRF_Initialization
  2803 ;;		_myUARTtoRF_Main
  2804 ;;		_my_MainTimer
  2805 ;; This function is called by:
  2806 ;;		Startup code after reset
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _main
  2812  04A4                     _main:	
  2813                           
  2814                           ;Main_B1.c: 8: myMain_Initialization();
  2815                           
  2816                           ;incstack = 0
  2817                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2818  04A4  3186  2640  3184   	fcall	_myMain_Initialization
  2819                           
  2820                           ;Main_B1.c: 9: Mcu_Initialization();
  2821  04A7  3186  265A  3184   	fcall	_Mcu_Initialization
  2822                           
  2823                           ;Main_B1.c: 10: ;;
  2824                           ;Main_B1.c: 11: ;;
  2825                           ;Main_B1.c: 12: ;;
  2826                           ;Main_B1.c: 14: ;;
  2827                           ;Main_B1.c: 15: ;;
  2828                           ;Main_B1.c: 16: ;;
  2829                           ;Main_B1.c: 17: ;;
  2830                           ;Main_B1.c: 18: ;;
  2831                           ;Main_B1.c: 20: ;;
  2832                           ;Main_B1.c: 21: ;;
  2833                           ;Main_B1.c: 22: ;;
  2834                           ;Main_B1.c: 23: ;;
  2835                           ;Main_B1.c: 24: ;;
  2836                           ;Main_B1.c: 25: RF_Initialization();
  2837  04AA  3186  26C4  3184   	fcall	_RF_Initialization
  2838                           
  2839                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  2840  04AD  3185  25CB  3184   	fcall	_CC2500_PowerOnInitial
  2841                           
  2842                           ;Main_B1.c: 27: ;;
  2843                           ;Main_B1.c: 28: myUARTtoRF_Initialization();
  2844  04B0  3186  26A1  3184   	fcall	_myUARTtoRF_Initialization
  2845  04B3                     l674:	
  2846                           ;Main_B1.c: 30: while (1) {
  2847                           
  2848                           
  2849                           ;Main_B1.c: 57: }
  2850                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2851  04B3  0020               	movlb	0	; select bank0
  2852  04B4  1C59               	btfss	_Timer1,0
  2853  04B5  2CB3               	goto	l674
  2854                           
  2855                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2856  04B6  1059               	bcf	_Timer1,0
  2857                           
  2858                           ;Main_B1.c: 95: my_MainTimer();
  2859  04B7  3183  231E  3184   	fcall	_my_MainTimer
  2860                           
  2861                           ;Main_B1.c: 96: ;;
  2862                           ;Main_B1.c: 97: ;;
  2863                           ;Main_B1.c: 98: UART_Main();
  2864  04BA  3186  264D  3184   	fcall	_UART_Main
  2865                           
  2866                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2867  04BD  0020               	movlb	0	; select bank0
  2868  04BE  1C3E               	btfss	_myMain,0
  2869  04BF  2CB3               	goto	l674
  2870                           
  2871                           ;Main_B1.c: 100: ;;
  2872                           ;Main_B1.c: 102: ;;
  2873                           ;Main_B1.c: 103: ;;
  2874                           ;Main_B1.c: 105: ;;
  2875                           ;Main_B1.c: 106: ;;
  2876                           ;Main_B1.c: 107: ;;
  2877                           ;Main_B1.c: 108: ;;
  2878                           ;Main_B1.c: 110: ;;
  2879                           ;Main_B1.c: 111: ;;
  2880                           ;Main_B1.c: 112: ;;
  2881                           ;Main_B1.c: 113: ;;
  2882                           ;Main_B1.c: 114: ;;
  2883                           ;Main_B1.c: 116: RF_Main();
  2884  04C0  3186  26BE  3184   	fcall	_RF_Main
  2885                           
  2886                           ;Main_B1.c: 117: ;;
  2887                           ;Main_B1.c: 118: ;;
  2888                           ;Main_B1.c: 119: myUARTtoRF_Main();
  2889  04C3  3186  26BB  3184   	fcall	_myUARTtoRF_Main
  2890  04C6  2CB3               	goto	l674
  2891  04C7                     __end_of_main:	
  2892                           ;Main_B1.c: 126: }
  2893                           ;Main_B1.c: 127: }
  2894                           ;Main_B1.c: 161: }
  2895                           ;Main_B1.c: 162: return (0);
  2896                           ;	Return value of _main is never used
  2897                           
  2898                           
  2899                           	psect	text1
  2900  031E                     __ptext1:	
  2901 ;; *************** function _my_MainTimer *****************
  2902 ;; Defined at:
  2903 ;;		line 181 in file "../src/Main_B1.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;		None               void
  2910 ;; Registers used:
  2911 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2921 ;;Total ram usage:        0 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    3
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_main
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           
  2932                           ;psect for function _my_MainTimer
  2933  031E                     _my_MainTimer:	
  2934                           
  2935                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2939  031E  0020               	movlb	0	; select bank0
  2940  031F  183E               	btfsc	_myMain,0
  2941  0320  2B36               	goto	l3162
  2942                           
  2943                           ;Main_B1.c: 184: myMain.PowerCount++;
  2944  0321  3001               	movlw	1
  2945  0322  07BF               	addwf	_myMain+1,f
  2946  0323  3000               	movlw	0
  2947  0324  3DC0               	addwfc	_myMain+2,f
  2948                           
  2949                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2950  0325  3001               	movlw	1
  2951  0326  3E3E               	addlw	_myMain& (0+255)
  2952  0327  0086               	movwf	6
  2953  0328  0187               	clrf	7
  2954  0329  3F40               	moviw [0]fsr1
  2955  032A  3A96               	xorlw	150
  2956  032B  1D03               	skipz
  2957  032C  2B2F               	goto	u2095
  2958  032D  3F41               	moviw [1]fsr1
  2959  032E  3A00               	xorlw	0
  2960  032F                     u2095:	
  2961  032F  1D03               	skipz
  2962  0330  2B5F               	goto	l3178
  2963                           
  2964                           ;Main_B1.c: 186: {
  2965                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2966  0331  01BF               	clrf	_myMain+1
  2967  0332  01C0               	clrf	_myMain+2
  2968                           
  2969                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2970  0333  143E               	bsf	_myMain,0
  2971                           
  2972                           ;Main_B1.c: 193: ;;
  2973                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2974  0334  163E               	bsf	_myMain,4
  2975                           
  2976                           ;Main_B1.c: 203: }
  2977                           ;Main_B1.c: 204: } else {
  2978  0335  2B5F               	goto	l3178
  2979  0336                     l3162:	
  2980                           
  2981                           ;Main_B1.c: 205: myMain.PowerCount++;
  2982  0336  3001               	movlw	1
  2983  0337  07BF               	addwf	_myMain+1,f
  2984  0338  3000               	movlw	0
  2985  0339  3DC0               	addwfc	_myMain+2,f
  2986                           
  2987                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  2988  033A  3001               	movlw	1
  2989  033B  3E3E               	addlw	_myMain& (0+255)
  2990  033C  0086               	movwf	6
  2991  033D  0187               	clrf	7
  2992  033E  3F40               	moviw [0]fsr1
  2993  033F  3A64               	xorlw	100
  2994  0340  1D03               	skipz
  2995  0341  2B44               	goto	u2105
  2996  0342  3F41               	moviw [1]fsr1
  2997  0343  3A00               	xorlw	0
  2998  0344                     u2105:	
  2999  0344  1D03               	skipz
  3000  0345  2B48               	goto	l3168
  3001                           
  3002                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  3003  0346  01BF               	clrf	_myMain+1
  3004  0347  01C0               	clrf	_myMain+2
  3005  0348                     l3168:	
  3006                           
  3007                           ;Main_B1.c: 215: }
  3008                           ;Main_B1.c: 223: myMain.Count1++;
  3009  0348  3001               	movlw	1
  3010  0349  07C3               	addwf	_myMain+5,f
  3011  034A  3000               	movlw	0
  3012  034B  3DC4               	addwfc	_myMain+6,f
  3013                           
  3014                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  3015  034C  3005               	movlw	5
  3016  034D  3E3E               	addlw	_myMain& (0+255)
  3017  034E  0086               	movwf	6
  3018  034F  0187               	clrf	7
  3019  0350  3F40               	moviw [0]fsr1
  3020  0351  3A64               	xorlw	100
  3021  0352  1D03               	skipz
  3022  0353  2B56               	goto	u2115
  3023  0354  3F41               	moviw [1]fsr1
  3024  0355  3A00               	xorlw	0
  3025  0356                     u2115:	
  3026  0356  1D03               	skipz
  3027  0357  2B5F               	goto	l3178
  3028                           
  3029                           ;Main_B1.c: 225: {
  3030                           ;Main_B1.c: 226: myMain.Count1 = 0;
  3031  0358  01C3               	clrf	_myMain+5
  3032  0359  01C4               	clrf	_myMain+6
  3033                           
  3034                           ;Main_B1.c: 238: if (myMain.Flag) {
  3035  035A  1CBE               	btfss	_myMain,1
  3036  035B  2B5E               	goto	l690
  3037                           
  3038                           ;Main_B1.c: 239: myMain.Flag = 0;
  3039  035C  10BE               	bcf	_myMain,1
  3040                           
  3041                           ;Main_B1.c: 248: } else {
  3042  035D  2B5F               	goto	l3178
  3043  035E                     l690:	
  3044                           
  3045                           ;Main_B1.c: 249: myMain.Flag = 1;
  3046  035E  14BE               	bsf	_myMain,1
  3047  035F                     l3178:	
  3048                           
  3049                           ;Main_B1.c: 258: }
  3050                           ;Main_B1.c: 259: }
  3051                           ;Main_B1.c: 261: }
  3052                           ;Main_B1.c: 263: myMain.Count2++;
  3053  035F  3001               	movlw	1
  3054  0360  07C5               	addwf	_myMain+7,f
  3055  0361  3000               	movlw	0
  3056  0362  3DC6               	addwfc	_myMain+8,f
  3057                           
  3058                           ;Main_B1.c: 264: if (myMain.Count2 == 100) {
  3059  0363  3007               	movlw	7
  3060  0364  3E3E               	addlw	_myMain& (0+255)
  3061  0365  0086               	movwf	6
  3062  0366  0187               	clrf	7
  3063  0367  3F40               	moviw [0]fsr1
  3064  0368  3A64               	xorlw	100
  3065  0369  1D03               	skipz
  3066  036A  2B6D               	goto	u2135
  3067  036B  3F41               	moviw [1]fsr1
  3068  036C  3A00               	xorlw	0
  3069  036D                     u2135:	
  3070  036D  1D03               	skipz
  3071  036E  0008               	return
  3072                           
  3073                           ;Main_B1.c: 265: myMain.Count2 = 0;
  3074  036F  01C5               	clrf	_myMain+7
  3075  0370  01C6               	clrf	_myMain+8
  3076  0371  0008               	return
  3077  0372                     __end_of_my_MainTimer:	
  3078                           
  3079                           	psect	text2
  3080  06BB                     __ptext2:	
  3081 ;; *************** function _myUARTtoRF_Main *****************
  3082 ;; Defined at:
  3083 ;;		line 14 in file "../src/myUARTtoRF.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;		None               void
  3090 ;; Registers used:
  3091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3101 ;;Total ram usage:        0 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    4
  3104 ;; This function calls:
  3105 ;;		_setTxData
  3106 ;; This function is called by:
  3107 ;;		_main
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           
  3112                           ;psect for function _myUARTtoRF_Main
  3113  06BB                     _myUARTtoRF_Main:	
  3114                           
  3115                           ;myUARTtoRF.c: 15: setTxData();
  3116                           
  3117                           ;incstack = 0
  3118                           ; Regs used in _myUARTtoRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3119  06BB  3181  2179         	fcall	_setTxData
  3120  06BD  0008               	return
  3121  06BE                     __end_of_myUARTtoRF_Main:	
  3122                           
  3123                           	psect	text3
  3124  06A1                     __ptext3:	
  3125 ;; *************** function _myUARTtoRF_Initialization *****************
  3126 ;; Defined at:
  3127 ;;		line 7 in file "../src/myUARTtoRF.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		None
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    3
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _myUARTtoRF_Initialization
  3157  06A1                     _myUARTtoRF_Initialization:	
  3158                           
  3159                           ;myUARTtoRF.c: 8: RA0 = 0;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _myUARTtoRF_Initialization: []
  3163  06A1  0020               	movlb	0	; select bank0
  3164  06A2  100C               	bcf	12,0	;volatile
  3165                           
  3166                           ;myUARTtoRF.c: 9: RA1 = 1;
  3167  06A3  148C               	bsf	12,1	;volatile
  3168                           
  3169                           ;myUARTtoRF.c: 10: RA2 = 1;
  3170  06A4  150C               	bsf	12,2	;volatile
  3171  06A5  0008               	return
  3172  06A6                     __end_of_myUARTtoRF_Initialization:	
  3173                           
  3174                           	psect	text4
  3175  0640                     __ptext4:	
  3176 ;; *************** function _myMain_Initialization *****************
  3177 ;; Defined at:
  3178 ;;		line 168 in file "../src/Main_B1.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;		None
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;		None               void
  3185 ;; Registers used:
  3186 ;;		wreg, fsr1l, fsr1h
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3196 ;;Total ram usage:        1 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    3
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           
  3207                           ;psect for function _myMain_Initialization
  3208  0640                     _myMain_Initialization:	
  3209                           
  3210                           ;Main_B1.c: 170: product = &_product;
  3211                           
  3212                           ;incstack = 0
  3213                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3214  0640  30A0               	movlw	__product& (0+255)
  3215  0641  00F4               	movwf	??_myMain_Initialization
  3216  0642  0874               	movf	??_myMain_Initialization,w
  3217  0643  00F9               	movwf	_product
  3218                           
  3219                           ;Main_B1.c: 171: product->Data[20] = 0xaa;
  3220  0644  30AA               	movlw	170
  3221  0645  00F4               	movwf	??_myMain_Initialization
  3222  0646  0879               	movf	_product,w
  3223  0647  3E14               	addlw	20
  3224  0648  0086               	movwf	6
  3225  0649  0187               	clrf	7
  3226  064A  0874               	movf	??_myMain_Initialization,w
  3227  064B  0081               	movwf	1
  3228  064C  0008               	return
  3229  064D                     __end_of_myMain_Initialization:	
  3230                           
  3231                           	psect	text5
  3232  064D                     __ptext5:	
  3233 ;; *************** function _UART_Main *****************
  3234 ;; Defined at:
  3235 ;;		line 756 in file "../src/MCU_B1.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;		None               void
  3242 ;; Registers used:
  3243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    5
  3256 ;; This function calls:
  3257 ;;		_UART_Receive
  3258 ;;		_UART_Transmit
  3259 ;; This function is called by:
  3260 ;;		_main
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           
  3265                           ;psect for function _UART_Main
  3266  064D                     _UART_Main:	
  3267                           
  3268                           ;MCU_B1.c: 757: if (UART.RxGO == 1) {
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _UART_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3272  064D  0021               	movlb	1	; select bank1
  3273  064E  1CCB               	btfss	(_UART^(0+128)+11),1
  3274  064F  2E54               	goto	l583
  3275                           
  3276                           ;MCU_B1.c: 758: UART.RxGO = 0;
  3277  0650  10CB               	bcf	(_UART^(0+128)+11),1
  3278                           
  3279                           ;MCU_B1.c: 759: UART_Receive();
  3280  0651  3184  2426         	fcall	_UART_Receive
  3281                           
  3282                           ;MCU_B1.c: 760: ;;
  3283                           ;MCU_B1.c: 763: } else {
  3284  0653  0008               	return
  3285  0654                     l583:	
  3286                           
  3287                           ;MCU_B1.c: 764: if (UART.TxGO == 1) {
  3288  0654  1C4B               	btfss	(_UART^(0+128)+11),0
  3289  0655  0008               	return
  3290                           
  3291                           ;MCU_B1.c: 765: UART.TxGO = 0;
  3292  0656  104B               	bcf	(_UART^(0+128)+11),0
  3293                           
  3294                           ;MCU_B1.c: 766: UART_Transmit();
  3295  0657  3185  2565         	fcall	_UART_Transmit
  3296  0659  0008               	return
  3297  065A                     __end_of_UART_Main:	
  3298                           
  3299                           	psect	text6
  3300  0565                     __ptext6:	
  3301 ;; *************** function _UART_Transmit *****************
  3302 ;; Defined at:
  3303 ;;		line 771 in file "../src/MCU_B1.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  i               2    0[BANK0 ] int 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3321 ;;Total ram usage:        3 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    4
  3324 ;; This function calls:
  3325 ;;		_putch
  3326 ;; This function is called by:
  3327 ;;		_UART_Main
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _UART_Transmit
  3333  0565                     _UART_Transmit:	
  3334                           
  3335                           ;MCU_B1.c: 774: for (int i = 0; i < 8; i++) {
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _UART_Transmit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3339  0565  0020               	movlb	0	; select bank0
  3340  0566  01E4               	clrf	UART_Transmit@i
  3341  0567  01E5               	clrf	UART_Transmit@i+1
  3342  0568                     L1:	
  3343  0568  0865               	movf	UART_Transmit@i+1,w
  3344  0569  3A80               	xorlw	128
  3345  056A  00F5               	movwf	??_UART_Transmit
  3346  056B  3080               	movlw	128
  3347  056C  0275               	subwf	??_UART_Transmit,w
  3348  056D  3008               	movlw	8
  3349  056E  1903               	btfsc	3,2
  3350  056F  0264               	subwf	UART_Transmit@i,w
  3351  0570  1803               	btfsc	3,0
  3352  0571  0008               	return
  3353                           
  3354                           ;MCU_B1.c: 776: putch(UART.Data[i]);
  3355  0572  0020               	movlb	0	; select bank0
  3356  0573  0864               	movf	UART_Transmit@i,w
  3357  0574  3EC0               	addlw	_UART& (0+255)
  3358  0575  0086               	movwf	6
  3359  0576  0187               	clrf	7
  3360  0577  0801               	movf	1,w
  3361  0578  3186  2687  3185   	fcall	_putch
  3362  057B  3001               	movlw	1
  3363  057C  0020               	movlb	0	; select bank0
  3364  057D  07E4               	addwf	UART_Transmit@i,f
  3365  057E  3000               	movlw	0
  3366  057F  3DE5               	addwfc	UART_Transmit@i+1,f
  3367  0580  2D68               	goto	L1
  3368  0581                     __end_of_UART_Transmit:	
  3369                           
  3370                           	psect	text7
  3371  0687                     __ptext7:	
  3372 ;; *************** function _putch *****************
  3373 ;; Defined at:
  3374 ;;		line 845 in file "../src/MCU_B1.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  byte            1    wreg     unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  byte            1    4[COMMON] unsigned char 
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;Total ram usage:        1 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    3
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_UART_Transmit
  3399 ;;		_getche
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _putch
  3405  0687                     _putch:	
  3406                           
  3407                           ;incstack = 0
  3408                           ; Regs used in _putch: [wreg]
  3409                           ;putch@byte stored from wreg
  3410  0687  00F4               	movwf	putch@byte
  3411  0688                     l600:	
  3412                           ;MCU_B1.c: 848: continue;
  3413                           
  3414                           ;MCU_B1.c: 847: while (!TXIF)
  3415                           
  3416  0688  0020               	movlb	0	; select bank0
  3417  0689  1E11               	btfss	17,4	;volatile
  3418  068A  2E88               	goto	l600
  3419                           
  3420                           ;MCU_B1.c: 849: TXREG = byte;
  3421  068B  0874               	movf	putch@byte,w
  3422  068C  0023               	movlb	3	; select bank3
  3423  068D  009A               	movwf	26	;volatile
  3424  068E  0008               	return
  3425  068F                     __end_of_putch:	
  3426                           
  3427                           	psect	text8
  3428  0426                     __ptext8:	
  3429 ;; *************** function _UART_Receive *****************
  3430 ;; Defined at:
  3431 ;;		line 790 in file "../src/MCU_B1.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;		None               void
  3438 ;; Registers used:
  3439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;Total ram usage:        1 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    4
  3452 ;; This function calls:
  3453 ;;		_setTxData
  3454 ;; This function is called by:
  3455 ;;		_UART_Main
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           
  3460                           ;psect for function _UART_Receive
  3461  0426                     _UART_Receive:	
  3462                           
  3463                           ;MCU_B1.c: 797: product->Data[2] = UART.Data[0];
  3464                           
  3465                           ;incstack = 0
  3466                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3467  0426  0021               	movlb	1	; select bank1
  3468  0427  0840               	movf	_UART^(0+128),w
  3469  0428  00F5               	movwf	??_UART_Receive
  3470  0429  0879               	movf	_product,w
  3471  042A  3E02               	addlw	2
  3472  042B  0086               	movwf	6
  3473  042C  0187               	clrf	7
  3474  042D  0875               	movf	??_UART_Receive,w
  3475  042E  0081               	movwf	1
  3476                           
  3477                           ;MCU_B1.c: 798: product->Data[3] = UART.Data[1];
  3478  042F  0841               	movf	(_UART^(0+128)+1),w
  3479  0430  00F5               	movwf	??_UART_Receive
  3480  0431  0879               	movf	_product,w
  3481  0432  3E03               	addlw	3
  3482  0433  0086               	movwf	6
  3483  0434  0187               	clrf	7
  3484  0435  0875               	movf	??_UART_Receive,w
  3485  0436  0081               	movwf	1
  3486                           
  3487                           ;MCU_B1.c: 799: product->Data[4] = UART.Data[2];
  3488  0437  0842               	movf	(_UART^(0+128)+2),w
  3489  0438  00F5               	movwf	??_UART_Receive
  3490  0439  0879               	movf	_product,w
  3491  043A  3E04               	addlw	4
  3492  043B  0086               	movwf	6
  3493  043C  0187               	clrf	7
  3494  043D  0875               	movf	??_UART_Receive,w
  3495  043E  0081               	movwf	1
  3496                           
  3497                           ;MCU_B1.c: 800: product->Data[5] = UART.Data[3];
  3498  043F  0843               	movf	(_UART^(0+128)+3),w
  3499  0440  00F5               	movwf	??_UART_Receive
  3500  0441  0879               	movf	_product,w
  3501  0442  3E05               	addlw	5
  3502  0443  0086               	movwf	6
  3503  0444  0187               	clrf	7
  3504  0445  0875               	movf	??_UART_Receive,w
  3505  0446  0081               	movwf	1
  3506                           
  3507                           ;MCU_B1.c: 801: product->Data[6] = UART.Data[4];
  3508  0447  0844               	movf	(_UART^(0+128)+4),w
  3509  0448  00F5               	movwf	??_UART_Receive
  3510  0449  0879               	movf	_product,w
  3511  044A  3E06               	addlw	6
  3512  044B  0086               	movwf	6
  3513  044C  0187               	clrf	7
  3514  044D  0875               	movf	??_UART_Receive,w
  3515  044E  0081               	movwf	1
  3516                           
  3517                           ;MCU_B1.c: 802: setTxData();
  3518  044F  3181  2179         	fcall	_setTxData
  3519                           
  3520                           ;MCU_B1.c: 807: myMain.Test = 1;
  3521  0451  0020               	movlb	0	; select bank0
  3522  0452  173E               	bsf	_myMain,6
  3523  0453  0008               	return
  3524  0454                     __end_of_UART_Receive:	
  3525                           
  3526                           	psect	text9
  3527  06BE                     __ptext9:	
  3528 ;; *************** function _RF_Main *****************
  3529 ;; Defined at:
  3530 ;;		line 16 in file "../src/RF_Control_B1.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;		None               void
  3537 ;; Registers used:
  3538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    7
  3551 ;; This function calls:
  3552 ;;		_setRF_Main
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _RF_Main
  3560  06BE                     _RF_Main:	
  3561                           
  3562                           ;RF_Control_B1.c: 18: setRF_Main();
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3566  06BE  3180  2037         	fcall	_setRF_Main
  3567  06C0  0008               	return
  3568  06C1                     __end_of_RF_Main:	
  3569                           
  3570                           	psect	text10
  3571  0037                     __ptext10:	
  3572 ;; *************** function _setRF_Main *****************
  3573 ;; Defined at:
  3574 ;;		line 52 in file "../src/RF_Control_B1.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  error           1    7[BANK0 ] unsigned char 
  3579 ;;  Receive_OK      1    6[BANK0 ] unsigned char 
  3580 ;;  loop_f          1    5[BANK0 ] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;		None               void
  3583 ;; Registers used:
  3584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;Total ram usage:        4 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    6
  3597 ;; This function calls:
  3598 ;;		_CC2500_RxData
  3599 ;;		_CC2500_TxData
  3600 ;;		_CC2500_WriteCommand
  3601 ;;		_RF_RxDisable
  3602 ;;		_getMain_All_Error_Status
  3603 ;;		_getRxData
  3604 ;; This function is called by:
  3605 ;;		_RF_Main
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           
  3610                           ;psect for function _setRF_Main
  3611  0037                     _setRF_Main:	
  3612                           
  3613                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  3614                           
  3615                           ;incstack = 0
  3616                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3617  0037  0020               	movlb	0	; select bank0
  3618  0038  01E9               	clrf	setRF_Main@loop_f
  3619  0039  01EA               	clrf	setRF_Main@Receive_OK
  3620  003A  01EB               	clrf	setRF_Main@error
  3621                           
  3622                           ;RF_Control_B1.c: 58: if (0 == 0) {
  3623  003B  1C4D               	btfss	_RF1,0
  3624  003C  28F6               	goto	l968
  3625                           
  3626                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  3627  003D  3000               	movlw	0
  3628  003E  3186  26C1  3180   	fcall	_getMain_All_Error_Status
  3629  0041  3800               	iorlw	0
  3630  0042  1D03               	skipz
  3631  0043  2844               	goto	l970
  3632  0044                     l970:	
  3633                           ;RF_Control_B1.c: 65: } else {
  3634                           
  3635                           ;RF_Control_B1.c: 63: RF1.Key = 0;
  3636                           
  3637                           
  3638                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  3639  0044  0020               	movlb	0	; select bank0
  3640  0045  13CD               	bcf	_RF1,7
  3641                           
  3642                           ;RF_Control_B1.c: 70: }
  3643                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  3644  0046  1BCD               	btfsc	_RF1,7
  3645  0047  1B4D               	btfsc	_RF1,6
  3646  0048  284E               	goto	l972
  3647                           
  3648                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  3649  0049  01CF               	clrf	_RF1+2
  3650  004A  01D0               	clrf	_RF1+3
  3651                           
  3652                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  3653  004B  14CE               	bsf	_RF1+1,1
  3654                           
  3655                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  3656  004C  11CD               	bcf	_RF1,3
  3657                           
  3658                           ;RF_Control_B1.c: 76: } else {
  3659  004D  0008               	return
  3660  004E                     l972:	
  3661                           
  3662                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  3663  004E  18CE               	btfsc	_RF1+1,1
  3664  004F  1B4D               	btfsc	_RF1,6
  3665  0050  2865               	goto	l3754
  3666                           
  3667                           ;RF_Control_B1.c: 78: RF1.Count++;
  3668  0051  3001               	movlw	1
  3669  0052  07CF               	addwf	_RF1+2,f
  3670  0053  3000               	movlw	0
  3671  0054  3DD0               	addwfc	_RF1+3,f
  3672                           
  3673                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  3674  0055  3002               	movlw	2
  3675  0056  3E4D               	addlw	_RF1& (0+255)
  3676  0057  0086               	movwf	6
  3677  0058  0187               	clrf	7
  3678  0059  3F40               	moviw [0]fsr1
  3679  005A  0654               	xorwf	_RF1+7,w
  3680  005B  1D03               	skipz
  3681  005C  285F               	goto	u2905
  3682  005D  3F41               	moviw [1]fsr1
  3683  005E  0655               	xorwf	_RF1+8,w
  3684  005F                     u2905:	
  3685  005F  1D03               	skipz
  3686  0060  28C3               	goto	l3806
  3687                           
  3688                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  3689  0061  01CF               	clrf	_RF1+2
  3690  0062  01D0               	clrf	_RF1+3
  3691                           
  3692                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  3693  0063  10CE               	bcf	_RF1+1,1
  3694                           
  3695                           ;RF_Control_B1.c: 82: }
  3696                           ;RF_Control_B1.c: 83: } else {
  3697  0064  28C3               	goto	l3806
  3698  0065                     l3754:	
  3699                           
  3700                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  3701  0065  01CF               	clrf	_RF1+2
  3702  0066  01D0               	clrf	_RF1+3
  3703                           
  3704                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  3705  0067  10CE               	bcf	_RF1+1,1
  3706                           
  3707                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  3708  0068  194D               	btfsc	_RF1,2
  3709  0069  1B4D               	btfsc	_RF1,6
  3710  006A  287B               	goto	l977
  3711                           
  3712                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  3713  006B  114D               	bcf	_RF1,2
  3714                           
  3715                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  3716  006C  11CD               	bcf	_RF1,3
  3717                           
  3718                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  3719  006D  10CD               	bcf	_RF1,1
  3720                           
  3721                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  3722  006E  300A               	movlw	10
  3723  006F  00D4               	movwf	_RF1+7
  3724  0070  3000               	movlw	0
  3725  0071  00D5               	movwf	_RF1+8
  3726                           
  3727                           ;RF_Control_B1.c: 93: RA1 = RA1 == 1 ? 0 : 1;
  3728  0072  3002               	movlw	2
  3729  0073  068C               	xorwf	12,f
  3730                           
  3731                           ;RF_Control_B1.c: 97: RF_RxDisable();
  3732  0074  3186  2631  3180   	fcall	_RF_RxDisable
  3733                           
  3734                           ;RF_Control_B1.c: 104: CC2500_TxData();
  3735  0077  3182  22C4  3180   	fcall	_CC2500_TxData
  3736                           
  3737                           ;RF_Control_B1.c: 106: } else {
  3738  007A  28C3               	goto	l3806
  3739  007B                     l977:	
  3740                           
  3741                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  3742  007B  1DCD               	btfss	_RF1,3
  3743  007C  28B2               	goto	l979
  3744                           
  3745                           ;RF_Control_B1.c: 110: CC2500_RxData();
  3746  007D  3182  2266  3180   	fcall	_CC2500_RxData
  3747                           
  3748                           ;RF_Control_B1.c: 111: if (RF1.ReceiveGO == 1) {
  3749  0080  0020               	movlb	0	; select bank0
  3750  0081  1CCD               	btfss	_RF1,1
  3751  0082  28C3               	goto	l3806
  3752                           
  3753                           ;RF_Control_B1.c: 112: RF1.ReceiveGO = 0;
  3754  0083  10CD               	bcf	_RF1,1
  3755                           
  3756                           ;RF_Control_B1.c: 113: RF1.Correction = 0;
  3757  0084  12CE               	bcf	_RF1+1,5
  3758                           
  3759                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  3760  0085  01D7               	clrf	_RF1+10
  3761  0086  01D8               	clrf	_RF1+11
  3762                           
  3763                           ;RF_Control_B1.c: 125: getRxData();
  3764  0087  3180  20FA  3180   	fcall	_getRxData
  3765                           
  3766                           ;RF_Control_B1.c: 126: RF1.Run = 1;
  3767  008A  0020               	movlb	0	; select bank0
  3768  008B  14CE               	bsf	_RF1+1,1
  3769                           
  3770                           ;RF_Control_B1.c: 128: if (RF1.Checked == 1) {
  3771  008C  1DCE               	btfss	_RF1+1,3
  3772  008D  289B               	goto	l3790
  3773                           
  3774                           ;RF_Control_B1.c: 129: if (RF1.RunTime > 10) {
  3775  008E  3000               	movlw	0
  3776  008F  0255               	subwf	_RF1+8,w
  3777  0090  300B               	movlw	11
  3778  0091  1903               	skipnz
  3779  0092  0254               	subwf	_RF1+7,w
  3780  0093  1C03               	skipc
  3781  0094  2899               	goto	l3788
  3782                           
  3783                           ;RF_Control_B1.c: 130: RF1.RunTime = 10;
  3784  0095  300A               	movlw	10
  3785  0096  00D4               	movwf	_RF1+7
  3786  0097  3000               	movlw	0
  3787  0098  00D5               	movwf	_RF1+8
  3788  0099                     l3788:	
  3789                           
  3790                           ;RF_Control_B1.c: 131: }
  3791                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  3792  0099  01D1               	clrf	_RF1+4
  3793                           
  3794                           ;RF_Control_B1.c: 133: } else {
  3795  009A  28C3               	goto	l3806
  3796  009B                     l3790:	
  3797                           
  3798                           ;RF_Control_B1.c: 134: RF1.CheckCount++;
  3799  009B  3001               	movlw	1
  3800  009C  00E8               	movwf	??_setRF_Main
  3801  009D  0868               	movf	??_setRF_Main,w
  3802  009E  07D1               	addwf	_RF1+4,f
  3803                           
  3804                           ;RF_Control_B1.c: 135: if (RF1.CheckCount == 2) {
  3805  009F  0851               	movf	_RF1+4,w
  3806  00A0  3A02               	xorlw	2
  3807  00A1  1D03               	skipz
  3808  00A2  28C3               	goto	l3806
  3809                           
  3810                           ;RF_Control_B1.c: 136: RF1.CheckCount = 0;
  3811  00A3  01D1               	clrf	_RF1+4
  3812                           
  3813                           ;RF_Control_B1.c: 137: RF1.CheckedCounter = 0;
  3814  00A4  01D2               	clrf	_RF1+5
  3815  00A5  01D3               	clrf	_RF1+6
  3816                           
  3817                           ;RF_Control_B1.c: 138: if (RF1.RunTime < 200) {
  3818  00A6  3000               	movlw	0
  3819  00A7  0255               	subwf	_RF1+8,w
  3820  00A8  30C8               	movlw	200
  3821  00A9  1903               	skipnz
  3822  00AA  0254               	subwf	_RF1+7,w
  3823  00AB  1803               	skipnc
  3824  00AC  28C3               	goto	l3806
  3825                           
  3826                           ;RF_Control_B1.c: 139: RF1.RunTime += 10;
  3827  00AD  300A               	movlw	10
  3828  00AE  07D4               	addwf	_RF1+7,f
  3829  00AF  3000               	movlw	0
  3830  00B0  3DD5               	addwfc	_RF1+8,f
  3831                           
  3832                           ;RF_Control_B1.c: 140: }
  3833                           ;RF_Control_B1.c: 141: }
  3834                           ;RF_Control_B1.c: 142: }
  3835                           ;RF_Control_B1.c: 143: }
  3836                           ;RF_Control_B1.c: 144: } else {
  3837  00B1  28C3               	goto	l3806
  3838  00B2                     l979:	
  3839                           
  3840                           ;RF_Control_B1.c: 146: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  3841  00B2  1DCD               	btfss	_RF1,3
  3842  00B3  18CD               	btfsc	_RF1,1
  3843  00B4  28C3               	goto	l3806
  3844                           
  3845                           ;RF_Control_B1.c: 147: RF1.RxStatus = 1;
  3846  00B5  15CD               	bsf	_RF1,3
  3847                           
  3848                           ;RF_Control_B1.c: 148: RF1.Correction = 1;
  3849  00B6  16CE               	bsf	_RF1+1,5
  3850                           
  3851                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x36);
  3852  00B7  3036               	movlw	54
  3853  00B8  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3854                           
  3855                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x3A);
  3856  00BB  303A               	movlw	58
  3857  00BC  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3858                           
  3859                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x34);
  3860  00BF  3034               	movlw	52
  3861  00C0  3185  259C  3180   	fcall	_CC2500_WriteCommand
  3862  00C3                     l3806:	
  3863                           
  3864                           ;RF_Control_B1.c: 154: }
  3865                           ;RF_Control_B1.c: 156: }
  3866                           ;RF_Control_B1.c: 157: }
  3867                           ;RF_Control_B1.c: 158: }
  3868                           ;RF_Control_B1.c: 159: if (RF1.RxStatus == 1) {
  3869  00C3  0020               	movlb	0	; select bank0
  3870  00C4  1DCD               	btfss	_RF1,3
  3871  00C5  28E4               	goto	l3818
  3872                           
  3873                           ;RF_Control_B1.c: 160: RF1.CheckedCounter++;
  3874  00C6  3001               	movlw	1
  3875  00C7  07D2               	addwf	_RF1+5,f
  3876  00C8  3000               	movlw	0
  3877  00C9  3DD3               	addwfc	_RF1+6,f
  3878                           
  3879                           ;RF_Control_B1.c: 161: if (RF1.CheckedCounter == 100) {
  3880  00CA  3005               	movlw	5
  3881  00CB  3E4D               	addlw	_RF1& (0+255)
  3882  00CC  0086               	movwf	6
  3883  00CD  0187               	clrf	7
  3884  00CE  3F40               	moviw [0]fsr1
  3885  00CF  3A64               	xorlw	100
  3886  00D0  1D03               	skipz
  3887  00D1  28D4               	goto	u3025
  3888  00D2  3F41               	moviw [1]fsr1
  3889  00D3  3A00               	xorlw	0
  3890  00D4                     u3025:	
  3891  00D4  1D03               	skipz
  3892  00D5  28E4               	goto	l3818
  3893                           
  3894                           ;RF_Control_B1.c: 162: RF1.CheckedCounter = 0;
  3895  00D6  01D2               	clrf	_RF1+5
  3896  00D7  01D3               	clrf	_RF1+6
  3897                           
  3898                           ;RF_Control_B1.c: 163: RF1.CheckCount = 0;
  3899  00D8  01D1               	clrf	_RF1+4
  3900                           
  3901                           ;RF_Control_B1.c: 164: if (RF1.RunTime > 10) {
  3902  00D9  3000               	movlw	0
  3903  00DA  0255               	subwf	_RF1+8,w
  3904  00DB  300B               	movlw	11
  3905  00DC  1903               	skipnz
  3906  00DD  0254               	subwf	_RF1+7,w
  3907  00DE  1C03               	skipc
  3908  00DF  28E4               	goto	l3818
  3909                           
  3910                           ;RF_Control_B1.c: 165: RF1.RunTime -= 10;
  3911  00E0  300A               	movlw	10
  3912  00E1  02D4               	subwf	_RF1+7,f
  3913  00E2  3000               	movlw	0
  3914  00E3  3BD5               	subwfb	_RF1+8,f
  3915  00E4                     l3818:	
  3916                           
  3917                           ;RF_Control_B1.c: 166: }
  3918                           ;RF_Control_B1.c: 167: }
  3919                           ;RF_Control_B1.c: 168: }
  3920                           ;RF_Control_B1.c: 169: if (RF1.Correction == 1) {
  3921  00E4  1ECE               	btfss	_RF1+1,5
  3922  00E5  0008               	return
  3923                           
  3924                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter++;
  3925  00E6  3001               	movlw	1
  3926  00E7  07D7               	addwf	_RF1+10,f
  3927  00E8  3000               	movlw	0
  3928  00E9  3DD8               	addwfc	_RF1+11,f
  3929                           
  3930                           ;RF_Control_B1.c: 171: if (RF1.CorrectionCounter >= 30000) {
  3931  00EA  3075               	movlw	117
  3932  00EB  0258               	subwf	_RF1+11,w
  3933  00EC  3030               	movlw	48
  3934  00ED  1903               	skipnz
  3935  00EE  0257               	subwf	_RF1+10,w
  3936  00EF  1C03               	skipc
  3937  00F0  0008               	return
  3938                           
  3939                           ;RF_Control_B1.c: 172: RF1.CorrectionCounter = 0;
  3940  00F1  01D7               	clrf	_RF1+10
  3941  00F2  01D8               	clrf	_RF1+11
  3942                           
  3943                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  3944  00F3  11CD               	bcf	_RF1,3
  3945                           
  3946                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  3947  00F4  10CD               	bcf	_RF1,1
  3948                           
  3949                           ;RF_Control_B1.c: 175: }
  3950                           ;RF_Control_B1.c: 176: }
  3951                           ;RF_Control_B1.c: 177: }
  3952                           ;RF_Control_B1.c: 178: }
  3953                           ;RF_Control_B1.c: 185: } else {
  3954  00F5  0008               	return
  3955  00F6                     l968:	
  3956                           
  3957                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  3958  00F6  1C3E               	btfss	_myMain,0
  3959  00F7  0008               	return
  3960                           
  3961                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  3962  00F8  144D               	bsf	_RF1,0
  3963  00F9  0008               	return
  3964  00FA                     __end_of_setRF_Main:	
  3965                           
  3966                           	psect	text11
  3967  00FA                     __ptext11:	
  3968 ;; *************** function _getRxData *****************
  3969 ;; Defined at:
  3970 ;;		line 277 in file "../src/RF_Control_B1.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  error           1    0[BANK0 ] unsigned char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;		None               void
  3977 ;; Registers used:
  3978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3987 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3988 ;;Total ram usage:        2 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    5
  3991 ;; This function calls:
  3992 ;;		_getMain_All_Error_Status
  3993 ;;		_setControl_Lights_Table
  3994 ;;		_setLog_Code
  3995 ;;		_setTxData
  3996 ;; This function is called by:
  3997 ;;		_setRF_Main
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           
  4002                           ;psect for function _getRxData
  4003  00FA                     _getRxData:	
  4004                           
  4005                           ;RF_Control_B1.c: 278: char error = getMain_All_Error_Status(0);
  4006                           
  4007                           ;incstack = 0
  4008                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4009  00FA  3000               	movlw	0
  4010  00FB  3186  26C1  3180   	fcall	_getMain_All_Error_Status
  4011  00FE  00F5               	movwf	??_getRxData
  4012  00FF  0875               	movf	??_getRxData,w
  4013  0100  0020               	movlb	0	; select bank0
  4014  0101  00E4               	movwf	getRxData@error
  4015                           
  4016                           ;RF_Control_B1.c: 279: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  4017  0102  0820               	movf	_RF_Data,w
  4018  0103  3AAA               	xorlw	170
  4019  0104  1D03               	skipz
  4020  0105  291C               	goto	l3592
  4021  0106  0821               	movf	_RF_Data+1,w
  4022  0107  3A01               	xorlw	1
  4023  0108  1D03               	skipz
  4024  0109  291C               	goto	l3592
  4025                           
  4026                           ;RF_Control_B1.c: 281: product->Data[2] = 0x55;
  4027  010A  3055               	movlw	85
  4028  010B  00F5               	movwf	??_getRxData
  4029  010C  0879               	movf	_product,w
  4030  010D  3E02               	addlw	2
  4031  010E  0086               	movwf	6
  4032  010F  0187               	clrf	7
  4033  0110  0875               	movf	??_getRxData,w
  4034  0111  0081               	movwf	1
  4035                           
  4036                           ;RF_Control_B1.c: 282: setTxData();
  4037  0112  3181  2179         	fcall	_setTxData
  4038                           
  4039                           ;RF_Control_B1.c: 283: RF1.RunTime = 10;
  4040  0114  300A               	movlw	10
  4041  0115  0020               	movlb	0	; select bank0
  4042  0116  00D4               	movwf	_RF1+7
  4043  0117  3000               	movlw	0
  4044  0118  00D5               	movwf	_RF1+8
  4045                           
  4046                           ;RF_Control_B1.c: 286: RA1 = RA1 == 1 ? 0 : 1;
  4047  0119  3002               	movlw	2
  4048  011A  068C               	xorwf	12,f
  4049                           
  4050                           ;RF_Control_B1.c: 289: } else {
  4051  011B  0008               	return
  4052  011C                     l3592:	
  4053                           
  4054                           ;RF_Control_B1.c: 291: if (error == 0) {
  4055  011C  08E4               	movf	getRxData@error,f
  4056  011D  1D03               	skipz
  4057  011E  0008               	return
  4058                           
  4059                           ;RF_Control_B1.c: 292: if (RF1.Learn == 1) {
  4060  011F  1F4D               	btfss	_RF1,6
  4061  0120  292F               	goto	l3604
  4062                           
  4063                           ;RF_Control_B1.c: 293: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  4064  0121  08A0               	movf	_RF_Data,f
  4065  0122  1D03               	skipz
  4066  0123  292D               	goto	l1019
  4067  0124  0821               	movf	_RF_Data+1,w
  4068  0125  3A64               	xorlw	100
  4069  0126  1D03               	skipz
  4070  0127  292D               	goto	l1019
  4071                           
  4072                           ;RF_Control_B1.c: 294: setLog_Code();
  4073  0128  3185  2581         	fcall	_setLog_Code
  4074                           
  4075                           ;RF_Control_B1.c: 295: RF1.Checked = 1;
  4076  012A  0020               	movlb	0	; select bank0
  4077  012B  15CE               	bsf	_RF1+1,3
  4078                           
  4079                           ;RF_Control_B1.c: 296: } else {
  4080  012C  0008               	return
  4081  012D                     l1019:	
  4082                           
  4083                           ;RF_Control_B1.c: 297: RF1.Checked = 0;
  4084  012D  11CE               	bcf	_RF1+1,3
  4085                           
  4086                           ;RF_Control_B1.c: 298: }
  4087                           ;RF_Control_B1.c: 299: } else {
  4088  012E  0008               	return
  4089  012F                     l3604:	
  4090                           
  4091                           ;RF_Control_B1.c: 300: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  4092  012F  08A0               	movf	_RF_Data,f
  4093  0130  1D03               	skipz
  4094  0131  2963               	goto	l3626
  4095  0132  0821               	movf	_RF_Data+1,w
  4096  0133  3A02               	xorlw	2
  4097  0134  1D03               	skipz
  4098  0135  2963               	goto	l3626
  4099                           
  4100                           ;RF_Control_B1.c: 302: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  4101  0136  082C               	movf	_RF_Data+12,w
  4102  0137  3AFF               	xorlw	255
  4103  0138  1D03               	skipz
  4104  0139  2946               	goto	l3616
  4105  013A  082D               	movf	_RF_Data+13,w
  4106  013B  3AFF               	xorlw	255
  4107  013C  1D03               	skipz
  4108  013D  2946               	goto	l3616
  4109  013E  082E               	movf	_RF_Data+14,w
  4110  013F  3AFF               	xorlw	255
  4111  0140  1D03               	skipz
  4112  0141  2946               	goto	l3616
  4113                           
  4114                           ;RF_Control_B1.c: 303: __nop();
  4115  0142  0000               	nop
  4116                           
  4117                           ;RF_Control_B1.c: 304: RF1.Checked = 0;
  4118  0143  0020               	movlb	0	; select bank0
  4119  0144  11CE               	bcf	_RF1+1,3
  4120                           
  4121                           ;RF_Control_B1.c: 305: } else {
  4122  0145  0008               	return
  4123  0146                     l3616:	
  4124                           
  4125                           ;RF_Control_B1.c: 306: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  4126  0146  0879               	movf	_product,w
  4127  0147  3E0C               	addlw	12
  4128  0148  0086               	movwf	6
  4129  0149  0187               	clrf	7
  4130  014A  082C               	movf	_RF_Data+12,w
  4131  014B  0601               	xorwf	1,w
  4132  014C  1D03               	skipz
  4133  014D  0008               	return
  4134  014E  0879               	movf	_product,w
  4135  014F  3E0D               	addlw	13
  4136  0150  0086               	movwf	6
  4137  0151  0187               	clrf	7
  4138  0152  082D               	movf	_RF_Data+13,w
  4139  0153  0601               	xorwf	1,w
  4140  0154  1D03               	skipz
  4141  0155  0008               	return
  4142  0156  0879               	movf	_product,w
  4143  0157  3E0E               	addlw	14
  4144  0158  0086               	movwf	6
  4145  0159  0187               	clrf	7
  4146  015A  082E               	movf	_RF_Data+14,w
  4147  015B  0601               	xorwf	1,w
  4148  015C  1D03               	skipz
  4149  015D  0008               	return
  4150                           
  4151                           ;RF_Control_B1.c: 307: setControl_Lights_Table();
  4152  015E  3183  2372         	fcall	_setControl_Lights_Table
  4153                           
  4154                           ;RF_Control_B1.c: 308: RF1.Checked = 1;
  4155  0160  0020               	movlb	0	; select bank0
  4156  0161  15CE               	bsf	_RF1+1,3
  4157                           
  4158                           ;RF_Control_B1.c: 309: }
  4159                           ;RF_Control_B1.c: 310: }
  4160                           ;RF_Control_B1.c: 311: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  4161  0162  0008               	return
  4162  0163                     l3626:	
  4163  0163  0820               	movf	_RF_Data,w
  4164  0164  3AFF               	xorlw	255
  4165  0165  1D03               	skipz
  4166  0166  296D               	goto	l3632
  4167  0167  0821               	movf	_RF_Data+1,w
  4168  0168  3A02               	xorlw	2
  4169  0169  1D03               	skipz
  4170  016A  296D               	goto	l3632
  4171                           
  4172                           ;RF_Control_B1.c: 312: __nop();
  4173  016B  0000               	nop
  4174                           
  4175                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  4176  016C  0008               	return
  4177  016D                     l3632:	
  4178  016D  0020               	movlb	0	; select bank0
  4179  016E  08A0               	movf	_RF_Data,f
  4180  016F  1D03               	skipz
  4181  0170  2977               	goto	l1029
  4182  0171  0821               	movf	_RF_Data+1,w
  4183  0172  3A65               	xorlw	101
  4184  0173  1D03               	skipz
  4185  0174  2977               	goto	l1029
  4186                           
  4187                           ;RF_Control_B1.c: 314: __nop();
  4188  0175  0000               	nop
  4189                           
  4190                           ;RF_Control_B1.c: 315: } else {
  4191  0176  0008               	return
  4192  0177                     l1029:	
  4193                           
  4194                           ;RF_Control_B1.c: 316: RF1.Checked = 0;
  4195  0177  11CE               	bcf	_RF1+1,3
  4196                           
  4197                           ;RF_Control_B1.c: 324: ;
  4198                           
  4199                           ;RF_Control_B1.c: 317: }
  4200                           ;RF_Control_B1.c: 322: }
  4201                           ;RF_Control_B1.c: 323: } else {
  4202  0178  0008               	return
  4203  0179                     __end_of_getRxData:	
  4204                           
  4205                           	psect	text12
  4206  0581                     __ptext12:	
  4207 ;; *************** function _setLog_Code *****************
  4208 ;; Defined at:
  4209 ;;		line 330 in file "../src/RF_Control_B1.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, fsr1l, fsr1h
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        1 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_getRxData
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _setLog_Code
  4239  0581                     _setLog_Code:	
  4240                           
  4241                           ;RF_Control_B1.c: 331: RF1.Learn = 0;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _setLog_Code: [wregfsr1]
  4245  0581  0020               	movlb	0	; select bank0
  4246  0582  134D               	bcf	_RF1,6
  4247                           
  4248                           ;RF_Control_B1.c: 332: product->Data[12]=RF_Data[12];
  4249  0583  082C               	movf	_RF_Data+12,w
  4250  0584  00F4               	movwf	??_setLog_Code
  4251  0585  0879               	movf	_product,w
  4252  0586  3E0C               	addlw	12
  4253  0587  0086               	movwf	6
  4254  0588  0187               	clrf	7
  4255  0589  0874               	movf	??_setLog_Code,w
  4256  058A  0081               	movwf	1
  4257                           
  4258                           ;RF_Control_B1.c: 333: product->Data[13]=RF_Data[13];
  4259  058B  082D               	movf	_RF_Data+13,w
  4260  058C  00F4               	movwf	??_setLog_Code
  4261  058D  0879               	movf	_product,w
  4262  058E  3E0D               	addlw	13
  4263  058F  0086               	movwf	6
  4264  0590  0187               	clrf	7
  4265  0591  0874               	movf	??_setLog_Code,w
  4266  0592  0081               	movwf	1
  4267                           
  4268                           ;RF_Control_B1.c: 334: product->Data[14]=RF_Data[14];
  4269  0593  082E               	movf	_RF_Data+14,w
  4270  0594  00F4               	movwf	??_setLog_Code
  4271  0595  0879               	movf	_product,w
  4272  0596  3E0E               	addlw	14
  4273  0597  0086               	movwf	6
  4274  0598  0187               	clrf	7
  4275  0599  0874               	movf	??_setLog_Code,w
  4276  059A  0081               	movwf	1
  4277  059B  0008               	return
  4278  059C                     __end_of_setLog_Code:	
  4279                           ;RF_Control_B1.c: 337: ;;
  4280                           
  4281                           
  4282                           	psect	text13
  4283  0372                     __ptext13:	
  4284 ;; *************** function _setControl_Lights_Table *****************
  4285 ;; Defined at:
  4286 ;;		line 343 in file "../src/RF_Control_B1.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    4
  4307 ;; This function calls:
  4308 ;;		_setTxData
  4309 ;; This function is called by:
  4310 ;;		_getRxData
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _setControl_Lights_Table
  4316  0372                     _setControl_Lights_Table:	
  4317                           
  4318                           ;RF_Control_B1.c: 344: switch (RF_Data[15]) {
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4322  0372  2B9A               	goto	l3430
  4323  0373                     l3422:	
  4324                           ;RF_Control_B1.c: 345: case 0x00:
  4325                           
  4326                           
  4327                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  4328  0373  0879               	movf	_product,w
  4329  0374  3E09               	addlw	9
  4330  0375  0086               	movwf	6
  4331  0376  0187               	clrf	7
  4332  0377  0181               	clrf	1
  4333                           
  4334                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  4335  0378  0879               	movf	_product,w
  4336  0379  3E0B               	addlw	11
  4337  037A  0086               	movwf	6
  4338  037B  0187               	clrf	7
  4339  037C  0181               	clrf	1
  4340                           
  4341                           ;RF_Control_B1.c: 351: product->Data[15]=0;
  4342  037D  0879               	movf	_product,w
  4343  037E  3E0F               	addlw	15
  4344  037F  0086               	movwf	6
  4345  0380  0187               	clrf	7
  4346  0381  0181               	clrf	1
  4347                           
  4348                           ;RF_Control_B1.c: 352: product->Data[17]=0;
  4349  0382  0879               	movf	_product,w
  4350  0383  3E11               	addlw	17
  4351  0384  0086               	movwf	6
  4352  0385  0187               	clrf	7
  4353  0386  0181               	clrf	1
  4354                           
  4355                           ;RF_Control_B1.c: 353: ;;
  4356                           ;RF_Control_B1.c: 355: break;
  4357  0387  0008               	return
  4358  0388                     l3424:	
  4359                           ;RF_Control_B1.c: 356: case 0x20:
  4360                           
  4361                           
  4362                           ;RF_Control_B1.c: 357: product->Data[9]=0;
  4363  0388  0879               	movf	_product,w
  4364  0389  3E09               	addlw	9
  4365  038A  0086               	movwf	6
  4366  038B  0187               	clrf	7
  4367  038C  0181               	clrf	1
  4368                           
  4369                           ;RF_Control_B1.c: 358: product->Data[11]=0;
  4370  038D  0879               	movf	_product,w
  4371  038E  3E0B               	addlw	11
  4372  038F  0086               	movwf	6
  4373  0390  0187               	clrf	7
  4374  0391  0181               	clrf	1
  4375                           
  4376                           ;RF_Control_B1.c: 359: product->Data[17]=0;
  4377  0392  0879               	movf	_product,w
  4378  0393  3E11               	addlw	17
  4379  0394  0086               	movwf	6
  4380  0395  0187               	clrf	7
  4381  0396  0181               	clrf	1
  4382                           
  4383                           ;RF_Control_B1.c: 360: setTxData();
  4384  0397  3181  2179         	fcall	_setTxData
  4385                           
  4386                           ;RF_Control_B1.c: 398: }
  4387                           
  4388                           ;RF_Control_B1.c: 397: break;
  4389                           
  4390                           ;RF_Control_B1.c: 391: case 0x31:
  4391                           
  4392                           ;RF_Control_B1.c: 390: break;
  4393                           
  4394                           ;RF_Control_B1.c: 384: case 0x21:
  4395                           
  4396                           ;RF_Control_B1.c: 383: break;
  4397                           
  4398                           ;RF_Control_B1.c: 377: case 0x11:
  4399                           
  4400                           ;RF_Control_B1.c: 376: break;
  4401                           
  4402                           ;RF_Control_B1.c: 372: case 0x03:
  4403                           
  4404                           ;RF_Control_B1.c: 371: break;
  4405                           
  4406                           ;RF_Control_B1.c: 367: case 0x02:
  4407                           
  4408                           ;RF_Control_B1.c: 366: break;
  4409                           
  4410                           ;RF_Control_B1.c: 362: case 0x01:
  4411                           
  4412                           ;RF_Control_B1.c: 361: break;
  4413  0399  0008               	return
  4414  039A                     l3430:	
  4415  039A  0020               	movlb	0	; select bank0
  4416  039B  082F               	movf	_RF_Data+15,w
  4417                           
  4418                           ; Switch size 1, requested type "space"
  4419                           ; Number of cases is 8, Range of values is 0 to 49
  4420                           ; switch strategies available:
  4421                           ; Name         Instructions Cycles
  4422                           ; simple_byte           25    13 (average)
  4423                           ; direct_byte          106     6 (fixed)
  4424                           ; jumptable            260     6 (fixed)
  4425                           ;	Chosen strategy is simple_byte
  4426  039C  3A00               	xorlw	0	; case 0
  4427  039D  1903               	skipnz
  4428  039E  2B73               	goto	l3422
  4429  039F  3A01               	xorlw	1	; case 1
  4430  03A0  1903               	skipnz
  4431  03A1  2BB5               	goto	l1049
  4432  03A2  3A03               	xorlw	3	; case 2
  4433  03A3  1903               	skipnz
  4434  03A4  2BB5               	goto	l1049
  4435  03A5  3A01               	xorlw	1	; case 3
  4436  03A6  1903               	skipnz
  4437  03A7  2BB5               	goto	l1049
  4438  03A8  3A12               	xorlw	18	; case 17
  4439  03A9  1903               	skipnz
  4440  03AA  2BB5               	goto	l1049
  4441  03AB  3A31               	xorlw	49	; case 32
  4442  03AC  1903               	skipnz
  4443  03AD  2B88               	goto	l3424
  4444  03AE  3A01               	xorlw	1	; case 33
  4445  03AF  1903               	skipnz
  4446  03B0  2BB5               	goto	l1049
  4447  03B1  3A10               	xorlw	16	; case 49
  4448  03B2  1903               	skipnz
  4449  03B3  2BB5               	goto	l1049
  4450  03B4  2BB5               	goto	l1049
  4451  03B5                     l1049:	
  4452  03B5  0008               	return
  4453  03B6                     __end_of_setControl_Lights_Table:	
  4454                           
  4455                           	psect	text14
  4456  0179                     __ptext14:	
  4457 ;; *************** function _setTxData *****************
  4458 ;; Defined at:
  4459 ;;		line 210 in file "../src/RF_Control_B1.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;		None
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  i               1    0        unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;		None               void
  4466 ;; Registers used:
  4467 ;;		wreg, fsr1l, fsr1h
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;Total ram usage:        1 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    3
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_UART_Receive
  4484 ;;		_getRxData
  4485 ;;		_setControl_Lights_Table
  4486 ;;		_myUARTtoRF_Main
  4487 ;;		_setRFSW_Control
  4488 ;;		_setRFSW_AdjControl
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _setTxData
  4494  0179                     _setTxData:	
  4495                           
  4496                           ;RF_Control_B1.c: 211: char i;
  4497                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _setTxData: [wregfsr1]
  4501  0179  0020               	movlb	0	; select bank0
  4502  017A  1C4D               	btfss	_RF1,0
  4503  017B  0008               	return
  4504                           
  4505                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
  4506  017C  194D               	btfsc	_RF1,2
  4507  017D  0008               	return
  4508                           
  4509                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
  4510  017E  154D               	bsf	_RF1,2
  4511                           
  4512                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
  4513  017F  3014               	movlw	20
  4514  0180  00D4               	movwf	_RF1+7
  4515  0181  3000               	movlw	0
  4516  0182  00D5               	movwf	_RF1+8
  4517                           
  4518                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
  4519  0183  3063               	movlw	99
  4520  0184  00F4               	movwf	??_setTxData
  4521  0185  0874               	movf	??_setTxData,w
  4522  0186  00A0               	movwf	_RF_Data
  4523                           
  4524                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
  4525  0187  3002               	movlw	2
  4526  0188  00F4               	movwf	??_setTxData
  4527  0189  0874               	movf	??_setTxData,w
  4528  018A  00A1               	movwf	_RF_Data+1
  4529                           
  4530                           ;RF_Control_B1.c: 227: RF_Data[2] = product->Data[2];
  4531  018B  0879               	movf	_product,w
  4532  018C  0086               	movwf	6
  4533  018D  0187               	clrf	7
  4534  018E  3F42               	moviw [2]fsr1
  4535  018F  00A2               	movwf	_RF_Data+2
  4536                           
  4537                           ;RF_Control_B1.c: 228: RF_Data[3] = product->Data[3];
  4538  0190  0879               	movf	_product,w
  4539  0191  0086               	movwf	6
  4540  0192  0187               	clrf	7
  4541  0193  3F43               	moviw [3]fsr1
  4542  0194  00A3               	movwf	_RF_Data+3
  4543                           
  4544                           ;RF_Control_B1.c: 229: RF_Data[4] = product->Data[4];
  4545  0195  0879               	movf	_product,w
  4546  0196  0086               	movwf	6
  4547  0197  0187               	clrf	7
  4548  0198  3F44               	moviw [4]fsr1
  4549  0199  00A4               	movwf	_RF_Data+4
  4550                           
  4551                           ;RF_Control_B1.c: 230: RF_Data[5] = product->Data[5];
  4552  019A  0879               	movf	_product,w
  4553  019B  0086               	movwf	6
  4554  019C  0187               	clrf	7
  4555  019D  3F45               	moviw [5]fsr1
  4556  019E  00A5               	movwf	_RF_Data+5
  4557                           
  4558                           ;RF_Control_B1.c: 231: RF_Data[6] = product->Data[6];
  4559  019F  0879               	movf	_product,w
  4560  01A0  0086               	movwf	6
  4561  01A1  0187               	clrf	7
  4562  01A2  3F46               	moviw [6]fsr1
  4563  01A3  00A6               	movwf	_RF_Data+6
  4564                           
  4565                           ;RF_Control_B1.c: 232: RF_Data[7] = product->Data[7];
  4566  01A4  0879               	movf	_product,w
  4567  01A5  0086               	movwf	6
  4568  01A6  0187               	clrf	7
  4569  01A7  3F47               	moviw [7]fsr1
  4570  01A8  00A7               	movwf	_RF_Data+7
  4571                           
  4572                           ;RF_Control_B1.c: 233: RF_Data[8] = product->Data[8];
  4573  01A9  0879               	movf	_product,w
  4574  01AA  0086               	movwf	6
  4575  01AB  0187               	clrf	7
  4576  01AC  3F48               	moviw [8]fsr1
  4577  01AD  00A8               	movwf	_RF_Data+8
  4578                           
  4579                           ;RF_Control_B1.c: 234: RF_Data[9] = product->Data[9];
  4580  01AE  0879               	movf	_product,w
  4581  01AF  0086               	movwf	6
  4582  01B0  0187               	clrf	7
  4583  01B1  3F49               	moviw [9]fsr1
  4584  01B2  00A9               	movwf	_RF_Data+9
  4585                           
  4586                           ;RF_Control_B1.c: 235: RF_Data[10] = product->Data[10];
  4587  01B3  0879               	movf	_product,w
  4588  01B4  0086               	movwf	6
  4589  01B5  0187               	clrf	7
  4590  01B6  3F4A               	moviw [10]fsr1
  4591  01B7  00AA               	movwf	_RF_Data+10
  4592                           
  4593                           ;RF_Control_B1.c: 236: RF_Data[11] = product->Data[11];
  4594  01B8  0879               	movf	_product,w
  4595  01B9  0086               	movwf	6
  4596  01BA  0187               	clrf	7
  4597  01BB  3F4B               	moviw [11]fsr1
  4598  01BC  00AB               	movwf	_RF_Data+11
  4599                           
  4600                           ;RF_Control_B1.c: 237: RF_Data[12] = product->Data[12];
  4601  01BD  0879               	movf	_product,w
  4602  01BE  0086               	movwf	6
  4603  01BF  0187               	clrf	7
  4604  01C0  3F4C               	moviw [12]fsr1
  4605  01C1  00AC               	movwf	_RF_Data+12
  4606                           
  4607                           ;RF_Control_B1.c: 238: RF_Data[13] = product->Data[13];
  4608  01C2  0879               	movf	_product,w
  4609  01C3  0086               	movwf	6
  4610  01C4  0187               	clrf	7
  4611  01C5  3F4D               	moviw [13]fsr1
  4612  01C6  00AD               	movwf	_RF_Data+13
  4613                           
  4614                           ;RF_Control_B1.c: 239: RF_Data[14] = product->Data[14];
  4615  01C7  0879               	movf	_product,w
  4616  01C8  0086               	movwf	6
  4617  01C9  0187               	clrf	7
  4618  01CA  3F4E               	moviw [14]fsr1
  4619  01CB  00AE               	movwf	_RF_Data+14
  4620                           
  4621                           ;RF_Control_B1.c: 240: RF_Data[15] = product->Data[15];
  4622  01CC  0879               	movf	_product,w
  4623  01CD  0086               	movwf	6
  4624  01CE  0187               	clrf	7
  4625  01CF  3F4F               	moviw [15]fsr1
  4626  01D0  00AF               	movwf	_RF_Data+15
  4627                           
  4628                           ;RF_Control_B1.c: 241: RF_Data[16] = product->Data[16];
  4629  01D1  0879               	movf	_product,w
  4630  01D2  0086               	movwf	6
  4631  01D3  0187               	clrf	7
  4632  01D4  3F50               	moviw [16]fsr1
  4633  01D5  00B0               	movwf	_RF_Data+16
  4634                           
  4635                           ;RF_Control_B1.c: 242: RF_Data[17] = product->Data[17];
  4636  01D6  0879               	movf	_product,w
  4637  01D7  0086               	movwf	6
  4638  01D8  0187               	clrf	7
  4639  01D9  3F51               	moviw [17]fsr1
  4640  01DA  00B1               	movwf	_RF_Data+17
  4641                           
  4642                           ;RF_Control_B1.c: 243: RF_Data[18] = product->Data[18];
  4643  01DB  0879               	movf	_product,w
  4644  01DC  0086               	movwf	6
  4645  01DD  0187               	clrf	7
  4646  01DE  3F52               	moviw [18]fsr1
  4647  01DF  00B2               	movwf	_RF_Data+18
  4648                           
  4649                           ;RF_Control_B1.c: 244: RF_Data[19] = product->Data[19];
  4650  01E0  0879               	movf	_product,w
  4651  01E1  0086               	movwf	6
  4652  01E2  0187               	clrf	7
  4653  01E3  3F53               	moviw [19]fsr1
  4654  01E4  00B3               	movwf	_RF_Data+19
  4655                           
  4656                           ;RF_Control_B1.c: 245: RF_Data[20] = 0xaa;
  4657  01E5  30AA               	movlw	170
  4658  01E6  00F4               	movwf	??_setTxData
  4659  01E7  0874               	movf	??_setTxData,w
  4660  01E8  00B4               	movwf	_RF_Data+20
  4661  01E9  0008               	return
  4662  01EA                     __end_of_setTxData:	
  4663                           
  4664                           	psect	text15
  4665  06C1                     __ptext15:	
  4666 ;; *************** function _getMain_All_Error_Status *****************
  4667 ;; Defined at:
  4668 ;;		line 376 in file "../src/Main_B1.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  command         1    wreg     unsigned char 
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;  command         1    0[COMMON] unsigned char 
  4673 ;;  status          1    4[COMMON] unsigned char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      unsigned char 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;Total ram usage:        1 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    3
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_setRF_Main
  4694 ;;		_getRxData
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           
  4699                           ;psect for function _getMain_All_Error_Status
  4700  06C1                     _getMain_All_Error_Status:	
  4701                           
  4702                           ;Main_B1.c: 377: char status = 0;
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  4706  06C1  01F4               	clrf	getMain_All_Error_Status@status
  4707                           
  4708                           ;Main_B1.c: 413: return status;
  4709  06C2  0874               	movf	getMain_All_Error_Status@status,w
  4710  06C3  0008               	return
  4711  06C4                     __end_of_getMain_All_Error_Status:	
  4712                           
  4713                           	psect	text16
  4714  0631                     __ptext16:	
  4715 ;; *************** function _RF_RxDisable *****************
  4716 ;; Defined at:
  4717 ;;		line 264 in file "../src/RF_Control_B1.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;		None
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;		None
  4722 ;; Return value:  Size  Location     Type
  4723 ;;		None               void
  4724 ;; Registers used:
  4725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;Total ram usage:        0 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    5
  4738 ;; This function calls:
  4739 ;;		_CC2500_WriteCommand
  4740 ;; This function is called by:
  4741 ;;		_setRF_Main
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _RF_RxDisable
  4747  0631                     _RF_RxDisable:	
  4748                           
  4749                           ;RF_Control_B1.c: 265: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4753  0631  0020               	movlb	0	; select bank0
  4754  0632  18CD               	btfsc	_RF1,1
  4755  0633  2E36               	goto	l1011
  4756  0634  1DCD               	btfss	_RF1,3
  4757  0635  0008               	return
  4758  0636                     l1011:	
  4759                           
  4760                           ;RF_Control_B1.c: 266: RF1.RxStatus = 0;
  4761  0636  11CD               	bcf	_RF1,3
  4762                           
  4763                           ;RF_Control_B1.c: 267: RF1.ReceiveGO = 0;
  4764  0637  10CD               	bcf	_RF1,1
  4765                           
  4766                           ;RF_Control_B1.c: 268: CC2500_WriteCommand(0x36);
  4767  0638  3036               	movlw	54
  4768  0639  3185  259C  3186   	fcall	_CC2500_WriteCommand
  4769                           
  4770                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x3A);
  4771  063C  303A               	movlw	58
  4772  063D  3185  259C         	fcall	_CC2500_WriteCommand
  4773  063F  0008               	return
  4774  0640                     __end_of_RF_RxDisable:	
  4775                           
  4776                           	psect	text17
  4777  02C4                     __ptext17:	
  4778 ;; *************** function _CC2500_TxData *****************
  4779 ;; Defined at:
  4780 ;;		line 32 in file "../src/CC2500_B1.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  loop_e          1    3[BANK0 ] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;		None               void
  4787 ;; Registers used:
  4788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;Total ram usage:        2 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    5
  4801 ;; This function calls:
  4802 ;;		_CC2500_WriteByte
  4803 ;;		_CC2500_WriteCommand
  4804 ;;		_Timeout_Counter
  4805 ;;		_set_TimeoutCleared
  4806 ;; This function is called by:
  4807 ;;		_setRF_Main
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _CC2500_TxData
  4813  02C4                     _CC2500_TxData:	
  4814                           
  4815                           ;CC2500_B1.c: 33: unsigned char loop_e;
  4816                           ;CC2500_B1.c: 35: RC0 = 0;
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4820  02C4  0020               	movlb	0	; select bank0
  4821  02C5  100E               	bcf	14,0	;volatile
  4822                           
  4823                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  4824  02C6  307F               	movlw	127
  4825  02C7  00E6               	movwf	??_CC2500_TxData
  4826  02C8  0866               	movf	??_CC2500_TxData,w
  4827  02C9  00F7               	movwf	_SPI0Buffer
  4828                           
  4829                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  4830  02CA  2ACE               	goto	l3438
  4831  02CB                     l3436:	
  4832                           
  4833                           ;CC2500_B1.c: 38: Timeout_Counter();
  4834  02CB  3185  25E0  3182   	fcall	_Timeout_Counter
  4835  02CE                     l3438:	
  4836  02CE  0020               	movlb	0	; select bank0
  4837  02CF  1E8E               	btfss	14,5	;volatile
  4838  02D0  2AD3               	goto	l3442
  4839  02D1  1D4A               	btfss	_myMain+12,2
  4840  02D2  2ACB               	goto	l3436
  4841  02D3                     l3442:	
  4842                           
  4843                           ;CC2500_B1.c: 39: };
  4844                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  4845  02D3  3186  26A6  3182   	fcall	_set_TimeoutCleared
  4846                           
  4847                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  4848  02D6  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4849                           
  4850                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  4851  02D9  0020               	movlb	0	; select bank0
  4852  02DA  086C               	movf	_Tx_Length,w
  4853  02DB  00E6               	movwf	??_CC2500_TxData
  4854  02DC  0866               	movf	??_CC2500_TxData,w
  4855  02DD  00F7               	movwf	_SPI0Buffer
  4856                           
  4857                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  4858  02DE  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4859                           
  4860                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  4861  02E1  0020               	movlb	0	; select bank0
  4862  02E2  01E7               	clrf	CC2500_TxData@loop_e
  4863  02E3                     l3456:	
  4864  02E3  086C               	movf	_Tx_Length,w
  4865  02E4  0267               	subwf	CC2500_TxData@loop_e,w
  4866  02E5  1803               	btfsc	3,0
  4867  02E6  2AF8               	goto	l134
  4868                           
  4869                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  4870  02E7  0867               	movf	CC2500_TxData@loop_e,w
  4871  02E8  3E20               	addlw	_RF_Data& (0+255)
  4872  02E9  0086               	movwf	6
  4873  02EA  0187               	clrf	7
  4874  02EB  0801               	movf	1,w
  4875  02EC  00E6               	movwf	??_CC2500_TxData
  4876  02ED  0866               	movf	??_CC2500_TxData,w
  4877  02EE  00F7               	movwf	_SPI0Buffer
  4878                           
  4879                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  4880  02EF  3185  25F5  3182   	fcall	_CC2500_WriteByte
  4881  02F2  3001               	movlw	1
  4882  02F3  0020               	movlb	0	; select bank0
  4883  02F4  00E6               	movwf	??_CC2500_TxData
  4884  02F5  0866               	movf	??_CC2500_TxData,w
  4885  02F6  07E7               	addwf	CC2500_TxData@loop_e,f
  4886  02F7  2AE3               	goto	l3456
  4887  02F8                     l134:	
  4888                           
  4889                           ;CC2500_B1.c: 48: }
  4890                           ;CC2500_B1.c: 49: RC0 = 1;
  4891  02F8  140E               	bsf	14,0	;volatile
  4892                           
  4893                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  4894  02F9  3035               	movlw	53
  4895  02FA  3185  259C  3182   	fcall	_CC2500_WriteCommand
  4896                           
  4897                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  4898  02FD  2B01               	goto	l3462
  4899  02FE                     l3460:	
  4900                           
  4901                           ;CC2500_B1.c: 52: Timeout_Counter();
  4902  02FE  3185  25E0  3182   	fcall	_Timeout_Counter
  4903  0301                     l3462:	
  4904  0301  0020               	movlb	0	; select bank0
  4905  0302  188E               	btfsc	14,1	;volatile
  4906  0303  2B06               	goto	l3466
  4907  0304  1D4A               	btfss	_myMain+12,2
  4908  0305  2AFE               	goto	l3460
  4909  0306                     l3466:	
  4910                           
  4911                           ;CC2500_B1.c: 53: };
  4912                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  4913  0306  3186  26A6  3182   	fcall	_set_TimeoutCleared
  4914                           
  4915                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  4916  0309  2B0D               	goto	l3470
  4917  030A                     l3468:	
  4918                           
  4919                           ;CC2500_B1.c: 57: Timeout_Counter();
  4920  030A  3185  25E0  3182   	fcall	_Timeout_Counter
  4921  030D                     l3470:	
  4922  030D  0020               	movlb	0	; select bank0
  4923  030E  1C8E               	btfss	14,1	;volatile
  4924  030F  2B12               	goto	l3474
  4925  0310  1D4A               	btfss	_myMain+12,2
  4926  0311  2B0A               	goto	l3468
  4927  0312                     l3474:	
  4928                           
  4929                           ;CC2500_B1.c: 58: };
  4930                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  4931  0312  3186  26A6  3182   	fcall	_set_TimeoutCleared
  4932                           
  4933                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  4934  0315  3036               	movlw	54
  4935  0316  3185  259C  3182   	fcall	_CC2500_WriteCommand
  4936                           
  4937                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  4938  0319  303B               	movlw	59
  4939  031A  3185  259C         	fcall	_CC2500_WriteCommand
  4940                           
  4941                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  4942  031C  14F6               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  4943  031D  0008               	return
  4944  031E                     __end_of_CC2500_TxData:	
  4945                           
  4946                           	psect	text18
  4947  0266                     __ptext18:	
  4948 ;; *************** function _CC2500_RxData *****************
  4949 ;; Defined at:
  4950 ;;		line 70 in file "../src/CC2500_B1.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  loop_f          1    3[BANK0 ] unsigned char 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;		None               void
  4957 ;; Registers used:
  4958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;Total ram usage:        2 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    5
  4971 ;; This function calls:
  4972 ;;		_CC2500_ReadByte
  4973 ;;		_CC2500_ReadStatus
  4974 ;;		_CC2500_WriteByte
  4975 ;;		_Timeout_Counter
  4976 ;;		_set_TimeoutCleared
  4977 ;; This function is called by:
  4978 ;;		_setRF_Main
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function _CC2500_RxData
  4984  0266                     _CC2500_RxData:	
  4985                           
  4986                           ;CC2500_B1.c: 71: unsigned char loop_f;
  4987                           ;CC2500_B1.c: 75: if (RC1 == 1)
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4991  0266  0020               	movlb	0	; select bank0
  4992  0267  188E               	btfsc	14,1	;volatile
  4993  0268  2A6D               	goto	l3488
  4994  0269  2A75               	goto	l3494
  4995  026A                     l3486:	
  4996                           ;CC2500_B1.c: 76: {
  4997                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  4998                           
  4999                           
  5000                           ;CC2500_B1.c: 78: Timeout_Counter();
  5001  026A  3185  25E0  3182   	fcall	_Timeout_Counter
  5002  026D                     l3488:	
  5003  026D  0020               	movlb	0	; select bank0
  5004  026E  1C8E               	btfss	14,1	;volatile
  5005  026F  2A72               	goto	l3492
  5006  0270  1D4A               	btfss	_myMain+12,2
  5007  0271  2A6A               	goto	l3486
  5008  0272                     l3492:	
  5009                           
  5010                           ;CC2500_B1.c: 79: };
  5011                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  5012  0272  3186  26A6  3182   	fcall	_set_TimeoutCleared
  5013  0275                     l3494:	
  5014                           
  5015                           ;CC2500_B1.c: 81: }
  5016                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  5017  0275  303B               	movlw	59
  5018  0276  3184  24E7  3182   	fcall	_CC2500_ReadStatus
  5019                           
  5020                           ;CC2500_B1.c: 85: if (s_data != 0) {
  5021  0279  0878               	movf	_s_data,w
  5022  027A  1903               	btfsc	3,2
  5023  027B  0008               	return
  5024                           
  5025                           ;CC2500_B1.c: 86: RC0 = 0;
  5026  027C  0020               	movlb	0	; select bank0
  5027  027D  100E               	bcf	14,0	;volatile
  5028                           
  5029                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  5030  027E  30FF               	movlw	255
  5031  027F  00E6               	movwf	??_CC2500_RxData
  5032  0280  0866               	movf	??_CC2500_RxData,w
  5033  0281  00F7               	movwf	_SPI0Buffer
  5034                           
  5035                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  5036  0282  2A86               	goto	l3504
  5037  0283                     l3502:	
  5038                           
  5039                           ;CC2500_B1.c: 89: Timeout_Counter();
  5040  0283  3185  25E0  3182   	fcall	_Timeout_Counter
  5041  0286                     l3504:	
  5042  0286  0020               	movlb	0	; select bank0
  5043  0287  1E8E               	btfss	14,5	;volatile
  5044  0288  2A8B               	goto	l3508
  5045  0289  1D4A               	btfss	_myMain+12,2
  5046  028A  2A83               	goto	l3502
  5047  028B                     l3508:	
  5048                           
  5049                           ;CC2500_B1.c: 90: };
  5050                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  5051  028B  3186  26A6  3182   	fcall	_set_TimeoutCleared
  5052                           
  5053                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  5054  028E  3185  25F5  3182   	fcall	_CC2500_WriteByte
  5055                           
  5056                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  5057  0291  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5058                           
  5059                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  5060  0294  0877               	movf	_SPI0Buffer,w
  5061  0295  0020               	movlb	0	; select bank0
  5062  0296  00E6               	movwf	??_CC2500_RxData
  5063  0297  0866               	movf	??_CC2500_RxData,w
  5064  0298  00E0               	movwf	_Rx_Length
  5065                           
  5066                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  5067  0299  01E7               	clrf	CC2500_RxData@loop_f
  5068  029A                     l3524:	
  5069  029A  0860               	movf	_Rx_Length,w
  5070  029B  0267               	subwf	CC2500_RxData@loop_f,w
  5071  029C  1803               	btfsc	3,0
  5072  029D  2AAF               	goto	l3526
  5073                           
  5074                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  5075  029E  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5076                           
  5077                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  5078  02A1  0877               	movf	_SPI0Buffer,w
  5079  02A2  0020               	movlb	0	; select bank0
  5080  02A3  00E6               	movwf	??_CC2500_RxData
  5081  02A4  0867               	movf	CC2500_RxData@loop_f,w
  5082  02A5  3E20               	addlw	_RF_Data& (0+255)
  5083  02A6  0086               	movwf	6
  5084  02A7  0187               	clrf	7
  5085  02A8  0866               	movf	??_CC2500_RxData,w
  5086  02A9  0081               	movwf	1
  5087  02AA  3001               	movlw	1
  5088  02AB  00E6               	movwf	??_CC2500_RxData
  5089  02AC  0866               	movf	??_CC2500_RxData,w
  5090  02AD  07E7               	addwf	CC2500_RxData@loop_f,f
  5091  02AE  2A9A               	goto	l3524
  5092  02AF                     l3526:	
  5093                           
  5094                           ;CC2500_B1.c: 99: }
  5095                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  5096  02AF  3185  25B4  3182   	fcall	_CC2500_ReadByte
  5097                           
  5098                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  5099  02B2  0877               	movf	_SPI0Buffer,w
  5100  02B3  0020               	movlb	0	; select bank0
  5101  02B4  00E6               	movwf	??_CC2500_RxData
  5102  02B5  0866               	movf	??_CC2500_RxData,w
  5103  02B6  00DF               	movwf	_RSSI
  5104                           
  5105                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  5106  02B7  3185  25B4         	fcall	_CC2500_ReadByte
  5107                           
  5108                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  5109  02B9  0877               	movf	_SPI0Buffer,w
  5110  02BA  0020               	movlb	0	; select bank0
  5111  02BB  00E6               	movwf	??_CC2500_RxData
  5112  02BC  0866               	movf	??_CC2500_RxData,w
  5113  02BD  00DE               	movwf	_CRC
  5114                           
  5115                           ;CC2500_B1.c: 104: RC0 = 1;
  5116  02BE  140E               	bsf	14,0	;volatile
  5117                           
  5118                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  5119  02BF  1BDE               	btfsc	_CRC,7
  5120                           
  5121                           ;CC2500_B1.c: 106: Receive_OK = 1;
  5122  02C0  1476               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  5123                           
  5124                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  5125  02C1  11CD               	bcf	_RF1,3
  5126                           
  5127                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  5128  02C2  14CD               	bsf	_RF1,1
  5129  02C3  0008               	return
  5130  02C4                     __end_of_CC2500_RxData:	
  5131                           
  5132                           	psect	text19
  5133  04E7                     __ptext19:	
  5134 ;; *************** function _CC2500_ReadStatus *****************
  5135 ;; Defined at:
  5136 ;;		line 301 in file "../src/CC2500_B1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  status_addr     1    wreg     unsigned char 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  status_addr     1    1[BANK0 ] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;Total ram usage:        2 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    4
  5157 ;; This function calls:
  5158 ;;		_CC2500_ReadByte
  5159 ;;		_CC2500_WriteByte
  5160 ;;		_Timeout_Counter
  5161 ;;		_set_TimeoutCleared
  5162 ;; This function is called by:
  5163 ;;		_CC2500_RxData
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _CC2500_ReadStatus
  5169  04E7                     _CC2500_ReadStatus:	
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5173                           ;CC2500_ReadStatus@status_addr stored from wreg
  5174  04E7  0020               	movlb	0	; select bank0
  5175  04E8  00E5               	movwf	CC2500_ReadStatus@status_addr
  5176                           
  5177                           ;CC2500_B1.c: 302: RC0 = 0;
  5178  04E9  100E               	bcf	14,0	;volatile
  5179                           
  5180                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  5181  04EA  0865               	movf	CC2500_ReadStatus@status_addr,w
  5182  04EB  3EC0               	addlw	192
  5183  04EC  00E4               	movwf	??_CC2500_ReadStatus
  5184  04ED  0864               	movf	??_CC2500_ReadStatus,w
  5185  04EE  00F7               	movwf	_SPI0Buffer
  5186                           
  5187                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  5188  04EF  2CF3               	goto	l3394
  5189  04F0                     l3392:	
  5190                           
  5191                           ;CC2500_B1.c: 306: Timeout_Counter();
  5192  04F0  3185  25E0  3184   	fcall	_Timeout_Counter
  5193  04F3                     l3394:	
  5194  04F3  0020               	movlb	0	; select bank0
  5195  04F4  1E8E               	btfss	14,5	;volatile
  5196  04F5  2CF8               	goto	l3398
  5197  04F6  1D4A               	btfss	_myMain+12,2
  5198  04F7  2CF0               	goto	l3392
  5199  04F8                     l3398:	
  5200                           
  5201                           ;CC2500_B1.c: 307: };
  5202                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  5203  04F8  3186  26A6  3184   	fcall	_set_TimeoutCleared
  5204                           
  5205                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  5206  04FB  3185  25F5  3184   	fcall	_CC2500_WriteByte
  5207                           
  5208                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  5209  04FE  3185  25B4         	fcall	_CC2500_ReadByte
  5210                           
  5211                           ;CC2500_B1.c: 312: RC0 = 1;
  5212  0500  0020               	movlb	0	; select bank0
  5213  0501  140E               	bsf	14,0	;volatile
  5214                           
  5215                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  5216  0502  0877               	movf	_SPI0Buffer,w
  5217  0503  00E4               	movwf	??_CC2500_ReadStatus
  5218  0504  0864               	movf	??_CC2500_ReadStatus,w
  5219  0505  00F8               	movwf	_s_data
  5220  0506  0008               	return
  5221  0507                     __end_of_CC2500_ReadStatus:	
  5222                           
  5223                           	psect	text20
  5224  05B4                     __ptext20:	
  5225 ;; *************** function _CC2500_ReadByte *****************
  5226 ;; Defined at:
  5227 ;;		line 235 in file "../src/CC2500_B1.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;  loop_b          1    5[COMMON] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		wreg, status,2, status,0
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:        2 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    3
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_CC2500_RxData
  5252 ;;		_CC2500_ReadStatus
  5253 ;;		_CC2500_ReadREG
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _CC2500_ReadByte
  5259  05B4                     _CC2500_ReadByte:	
  5260                           
  5261                           ;CC2500_B1.c: 236: unsigned char loop_b;
  5262                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  5266  05B4  01F5               	clrf	CC2500_ReadByte@loop_b
  5267  05B5                     L2:	
  5268  05B5  3008               	movlw	8
  5269  05B6  0275               	subwf	CC2500_ReadByte@loop_b,w
  5270  05B7  1803               	btfsc	3,0
  5271  05B8  0008               	return
  5272                           
  5273                           ;CC2500_B1.c: 238: RC3 = 1;
  5274  05B9  0020               	movlb	0	; select bank0
  5275  05BA  158E               	bsf	14,3	;volatile
  5276                           
  5277                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  5278  05BB  1003               	clrc
  5279  05BC  0DF7               	rlf	_SPI0Buffer,f
  5280                           
  5281                           ;CC2500_B1.c: 240: if (RC5 == 1)
  5282  05BD  1E8E               	btfss	14,5	;volatile
  5283  05BE  2DC1               	goto	l3322
  5284                           
  5285                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  5286  05BF  1477               	bsf	_SPI0Buffer,0
  5287  05C0  2DC5               	goto	l3324
  5288  05C1                     l3322:	
  5289                           
  5290                           ;CC2500_B1.c: 242: else
  5291                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  5292  05C1  30FE               	movlw	254
  5293  05C2  00F4               	movwf	??_CC2500_ReadByte
  5294  05C3  0874               	movf	??_CC2500_ReadByte,w
  5295  05C4  05F7               	andwf	_SPI0Buffer,f
  5296  05C5                     l3324:	
  5297                           
  5298                           ;CC2500_B1.c: 244: RC3 = 0;
  5299  05C5  118E               	bcf	14,3	;volatile
  5300  05C6  3001               	movlw	1
  5301  05C7  00F4               	movwf	??_CC2500_ReadByte
  5302  05C8  0874               	movf	??_CC2500_ReadByte,w
  5303  05C9  07F5               	addwf	CC2500_ReadByte@loop_b,f
  5304  05CA  2DB5               	goto	L2
  5305  05CB                     __end_of_CC2500_ReadByte:	
  5306                           
  5307                           	psect	text21
  5308  06C4                     __ptext21:	
  5309 ;; *************** function _RF_Initialization *****************
  5310 ;; Defined at:
  5311 ;;		line 9 in file "../src/RF_Control_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    4
  5332 ;; This function calls:
  5333 ;;		_setRF_Initialization
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _RF_Initialization
  5341  06C4                     _RF_Initialization:	
  5342                           
  5343                           ;RF_Control_B1.c: 11: setRF_Initialization();
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5347  06C4  3186  267D         	fcall	_setRF_Initialization
  5348  06C6  0008               	return
  5349  06C7                     __end_of_RF_Initialization:	
  5350                           
  5351                           	psect	text22
  5352  067D                     __ptext22:	
  5353 ;; *************** function _setRF_Initialization *****************
  5354 ;; Defined at:
  5355 ;;		line 43 in file "../src/RF_Control_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        1 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    3
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_RF_Initialization
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _setRF_Initialization
  5385  067D                     _setRF_Initialization:	
  5386                           
  5387                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _setRF_Initialization: [wreg]
  5391  067D  3015               	movlw	21
  5392  067E  00F4               	movwf	??_setRF_Initialization
  5393  067F  0874               	movf	??_setRF_Initialization,w
  5394  0680  0020               	movlb	0	; select bank0
  5395  0681  00EC               	movwf	_Tx_Length
  5396                           
  5397                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  5398  0682  300A               	movlw	10
  5399  0683  00D4               	movwf	_RF1+7
  5400  0684  3000               	movlw	0
  5401  0685  00D5               	movwf	_RF1+8
  5402  0686  0008               	return
  5403  0687                     __end_of_setRF_Initialization:	
  5404                           
  5405                           	psect	text23
  5406  065A                     __ptext23:	
  5407 ;; *************** function _Mcu_Initialization *****************
  5408 ;; Defined at:
  5409 ;;		line 30 in file "../src/MCU_B1.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;		None               void
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    4
  5430 ;; This function calls:
  5431 ;;		_Fosc_Set
  5432 ;;		_IO_Set
  5433 ;;		_TMR1_Set
  5434 ;;		_UART_Set
  5435 ;; This function is called by:
  5436 ;;		_main
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _Mcu_Initialization
  5442  065A                     _Mcu_Initialization:	
  5443                           
  5444                           ;MCU_B1.c: 32: Fosc_Set();
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5448  065A  3186  26AB  3186   	fcall	_Fosc_Set
  5449                           
  5450                           ;MCU_B1.c: 34: IO_Set();
  5451  065D  3186  261E  3186   	fcall	_IO_Set
  5452                           
  5453                           ;MCU_B1.c: 36: ;;
  5454                           ;MCU_B1.c: 38: TMR1_Set();
  5455  0660  3186  2666  3186   	fcall	_TMR1_Set
  5456                           
  5457                           ;MCU_B1.c: 40: ;;
  5458                           ;MCU_B1.c: 42: ;;
  5459                           ;MCU_B1.c: 44: ;;
  5460                           ;MCU_B1.c: 46: ;;
  5461                           ;MCU_B1.c: 48: ;;
  5462                           ;MCU_B1.c: 50: UART_Set();
  5463  0663  3186  260A         	fcall	_UART_Set
  5464  0665  0008               	return
  5465  0666                     __end_of_Mcu_Initialization:	
  5466                           
  5467                           	psect	text24
  5468  060A                     __ptext24:	
  5469 ;; *************** function _UART_Set *****************
  5470 ;; Defined at:
  5471 ;;		line 719 in file "../src/MCU_B1.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, status,2
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    3
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_Mcu_Initialization
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _UART_Set
  5501  060A                     _UART_Set:	
  5502                           
  5503                           ;MCU_B1.c: 721: TRISC7 = 1;
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _UART_Set: [wreg+status,2]
  5507  060A  0021               	movlb	1	; select bank1
  5508  060B  178E               	bsf	14,7	;volatile
  5509                           
  5510                           ;MCU_B1.c: 722: TRISC6 = 1;
  5511  060C  170E               	bsf	14,6	;volatile
  5512                           
  5513                           ;MCU_B1.c: 723: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5514  060D  3033               	movlw	51
  5515  060E  0023               	movlb	3	; select bank3
  5516  060F  009B               	movwf	27	;volatile
  5517                           
  5518                           ;MCU_B1.c: 725: SPBRGH = 0;
  5519  0610  019C               	clrf	28	;volatile
  5520                           
  5521                           ;MCU_B1.c: 726: BRG16 = 0;
  5522  0611  119F               	bcf	31,3	;volatile
  5523                           
  5524                           ;MCU_B1.c: 728: RCSTA = (0 | 0x90);
  5525  0612  3090               	movlw	144
  5526  0613  009D               	movwf	29	;volatile
  5527                           
  5528                           ;MCU_B1.c: 729: TXSTA = (0x4 | 0 | 0x20);
  5529  0614  3024               	movlw	36
  5530  0615  009E               	movwf	30	;volatile
  5531                           
  5532                           ;MCU_B1.c: 730: TX9 = 0;
  5533  0616  131E               	bcf	30,6	;volatile
  5534                           
  5535                           ;MCU_B1.c: 731: RX9 = 0;
  5536  0617  131D               	bcf	29,6	;volatile
  5537                           
  5538                           ;MCU_B1.c: 732: TXIE = 0;
  5539  0618  0021               	movlb	1	; select bank1
  5540  0619  1211               	bcf	17,4	;volatile
  5541                           
  5542                           ;MCU_B1.c: 733: RCIE = 1;
  5543  061A  1691               	bsf	17,5	;volatile
  5544                           
  5545                           ;MCU_B1.c: 734: PEIE = 1;
  5546  061B  170B               	bsf	11,6	;volatile
  5547                           
  5548                           ;MCU_B1.c: 735: GIE = 1;
  5549  061C  178B               	bsf	11,7	;volatile
  5550  061D  0008               	return
  5551  061E                     __end_of_UART_Set:	
  5552                           
  5553                           	psect	text25
  5554  0666                     __ptext25:	
  5555 ;; *************** function _TMR1_Set *****************
  5556 ;; Defined at:
  5557 ;;		line 199 in file "../src/MCU_B1.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;		None
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;		None
  5562 ;; Return value:  Size  Location     Type
  5563 ;;		None               void
  5564 ;; Registers used:
  5565 ;;		wreg
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;Total ram usage:        0 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    3
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_Mcu_Initialization
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           
  5586                           ;psect for function _TMR1_Set
  5587  0666                     _TMR1_Set:	
  5588                           
  5589                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in _TMR1_Set: [wreg]
  5593  0666  3041               	movlw	65
  5594  0667  0020               	movlb	0	; select bank0
  5595  0668  0098               	movwf	24	;volatile
  5596                           
  5597                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5598  0669  30FA               	movlw	250
  5599  066A  0097               	movwf	23	;volatile
  5600                           
  5601                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5602  066B  3038               	movlw	56
  5603  066C  0096               	movwf	22	;volatile
  5604                           
  5605                           ;MCU_B1.c: 203: TMR1IE = 1;
  5606  066D  0021               	movlb	1	; select bank1
  5607  066E  1411               	bsf	17,0	;volatile
  5608                           
  5609                           ;MCU_B1.c: 204: PEIE = 1;
  5610  066F  170B               	bsf	11,6	;volatile
  5611                           
  5612                           ;MCU_B1.c: 205: GIE = 1;
  5613  0670  178B               	bsf	11,7	;volatile
  5614  0671  0008               	return
  5615  0672                     __end_of_TMR1_Set:	
  5616                           
  5617                           	psect	text26
  5618  061E                     __ptext26:	
  5619 ;; *************** function _IO_Set *****************
  5620 ;; Defined at:
  5621 ;;		line 60 in file "../src/MCU_B1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;		None               void
  5628 ;; Registers used:
  5629 ;;		wreg, status,2
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;Total ram usage:        0 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    3
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_Mcu_Initialization
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           
  5650                           ;psect for function _IO_Set
  5651  061E                     _IO_Set:	
  5652                           
  5653                           ;MCU_B1.c: 73: TRISA = 0b00000000;;
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _IO_Set: [wreg+status,2]
  5657  061E  0021               	movlb	1	; select bank1
  5658  061F  018C               	clrf	12	;volatile
  5659                           
  5660                           ;MCU_B1.c: 74: TRISB = 0b00000000;;
  5661  0620  018D               	clrf	13	;volatile
  5662                           
  5663                           ;MCU_B1.c: 75: TRISC = 0b11100110;;
  5664  0621  30E6               	movlw	230
  5665  0622  008E               	movwf	14	;volatile
  5666                           
  5667                           ;MCU_B1.c: 76: LATA = 0b00000000;;
  5668  0623  0022               	movlb	2	; select bank2
  5669  0624  018C               	clrf	12	;volatile
  5670                           
  5671                           ;MCU_B1.c: 77: LATB = 0b00000000;;
  5672  0625  018D               	clrf	13	;volatile
  5673                           
  5674                           ;MCU_B1.c: 78: LATC = 0b00000000;;
  5675  0626  018E               	clrf	14	;volatile
  5676                           
  5677                           ;MCU_B1.c: 79: ANSELA = 0b00000000;;
  5678  0627  0023               	movlb	3	; select bank3
  5679  0628  018C               	clrf	12	;volatile
  5680                           
  5681                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
  5682  0629  018D               	clrf	13	;volatile
  5683                           
  5684                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
  5685  062A  018E               	clrf	14	;volatile
  5686                           
  5687                           ;MCU_B1.c: 82: PORTA = 0b00000000;;
  5688  062B  0020               	movlb	0	; select bank0
  5689  062C  018C               	clrf	12	;volatile
  5690                           
  5691                           ;MCU_B1.c: 83: PORTB = 0b00000000;;
  5692  062D  018D               	clrf	13	;volatile
  5693                           
  5694                           ;MCU_B1.c: 84: PORTC = 0b11100110;;
  5695  062E  30E6               	movlw	230
  5696  062F  008E               	movwf	14	;volatile
  5697  0630  0008               	return
  5698  0631                     __end_of_IO_Set:	
  5699                           
  5700                           	psect	text27
  5701  06AB                     __ptext27:	
  5702 ;; *************** function _Fosc_Set *****************
  5703 ;; Defined at:
  5704 ;;		line 56 in file "../src/MCU_B1.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;		None
  5709 ;; Return value:  Size  Location     Type
  5710 ;;		None               void
  5711 ;; Registers used:
  5712 ;;		wreg
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;Total ram usage:        0 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    3
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_Mcu_Initialization
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _Fosc_Set
  5734  06AB                     _Fosc_Set:	
  5735                           
  5736                           ;MCU_B1.c: 57: OSCCON = 0x78;
  5737                           
  5738                           ;incstack = 0
  5739                           ; Regs used in _Fosc_Set: [wreg]
  5740  06AB  3078               	movlw	120
  5741  06AC  0021               	movlb	1	; select bank1
  5742  06AD  0099               	movwf	25	;volatile
  5743  06AE  0008               	return
  5744  06AF                     __end_of_Fosc_Set:	
  5745                           
  5746                           	psect	text28
  5747  05CB                     __ptext28:	
  5748 ;; *************** function _CC2500_PowerOnInitial *****************
  5749 ;; Defined at:
  5750 ;;		line 119 in file "../src/CC2500_B1.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;		None
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;		None               void
  5757 ;; Registers used:
  5758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;Total ram usage:        0 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    6
  5771 ;; This function calls:
  5772 ;;		_CC2500_ClearRXFIFO
  5773 ;;		_CC2500_ClearTXFIFO
  5774 ;;		_CC2500_FrequencyCabr
  5775 ;;		_CC2500_InitPATable
  5776 ;;		_CC2500_InitSetREG
  5777 ;;		_CC2500_PowerRST
  5778 ;;		_CC2500_SIDLEMode
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           
  5785                           ;psect for function _CC2500_PowerOnInitial
  5786  05CB                     _CC2500_PowerOnInitial:	
  5787                           
  5788                           ;CC2500_B1.c: 120: CC2500_PowerRST();
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5792  05CB  3183  23B6  3185   	fcall	_CC2500_PowerRST
  5793                           
  5794                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
  5795  05CE  3184  2454  3185   	fcall	_CC2500_InitSetREG
  5796                           
  5797                           ;CC2500_B1.c: 122: CC2500_InitPATable();
  5798  05D1  3185  2527  3185   	fcall	_CC2500_InitPATable
  5799                           
  5800                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
  5801  05D4  3186  26B3  3185   	fcall	_CC2500_ClearTXFIFO
  5802                           
  5803                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
  5804  05D7  3186  26B7  3185   	fcall	_CC2500_ClearRXFIFO
  5805                           
  5806                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
  5807  05DA  3186  2672  3185   	fcall	_CC2500_FrequencyCabr
  5808                           
  5809                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
  5810  05DD  3186  26AF         	fcall	_CC2500_SIDLEMode
  5811  05DF  0008               	return
  5812  05E0                     __end_of_CC2500_PowerOnInitial:	
  5813                           
  5814                           	psect	text29
  5815  06AF                     __ptext29:	
  5816 ;; *************** function _CC2500_SIDLEMode *****************
  5817 ;; Defined at:
  5818 ;;		line 209 in file "../src/CC2500_B1.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;		None               void
  5825 ;; Registers used:
  5826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;Total ram usage:        0 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    5
  5839 ;; This function calls:
  5840 ;;		_CC2500_WriteCommand
  5841 ;; This function is called by:
  5842 ;;		_CC2500_PowerOnInitial
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _CC2500_SIDLEMode
  5848  06AF                     _CC2500_SIDLEMode:	
  5849                           
  5850                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5854  06AF  3036               	movlw	54
  5855  06B0  3185  259C         	fcall	_CC2500_WriteCommand
  5856  06B2  0008               	return
  5857  06B3                     __end_of_CC2500_SIDLEMode:	
  5858                           
  5859                           	psect	text30
  5860  03B6                     __ptext30:	
  5861 ;; *************** function _CC2500_PowerRST *****************
  5862 ;; Defined at:
  5863 ;;		line 132 in file "../src/CC2500_B1.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;		None
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;		None
  5868 ;; Return value:  Size  Location     Type
  5869 ;;		None               void
  5870 ;; Registers used:
  5871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:        1 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    4
  5884 ;; This function calls:
  5885 ;;		_CC2500_WriteByte
  5886 ;;		_DelayTime_1us
  5887 ;;		_Timeout_Counter
  5888 ;;		_set_TimeoutCleared
  5889 ;; This function is called by:
  5890 ;;		_CC2500_PowerOnInitial
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _CC2500_PowerRST
  5896  03B6                     _CC2500_PowerRST:	
  5897                           
  5898                           ;CC2500_B1.c: 133: RC3 = 0;
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5902  03B6  0020               	movlb	0	; select bank0
  5903  03B7  118E               	bcf	14,3	;volatile
  5904                           
  5905                           ;CC2500_B1.c: 134: RC4 = 0;
  5906  03B8  120E               	bcf	14,4	;volatile
  5907                           
  5908                           ;CC2500_B1.c: 135: RC0 = 1;
  5909  03B9  140E               	bsf	14,0	;volatile
  5910                           
  5911                           ;CC2500_B1.c: 136: DelayTime_1us(10);
  5912  03BA  300A               	movlw	10
  5913  03BB  00F4               	movwf	DelayTime_1us@count
  5914  03BC  3000               	movlw	0
  5915  03BD  00F5               	movwf	DelayTime_1us@count+1
  5916  03BE  3184  247E  3183   	fcall	_DelayTime_1us
  5917                           
  5918                           ;CC2500_B1.c: 137: RC0 = 0;
  5919  03C1  0020               	movlb	0	; select bank0
  5920  03C2  100E               	bcf	14,0	;volatile
  5921                           
  5922                           ;CC2500_B1.c: 138: DelayTime_1us(10);
  5923  03C3  300A               	movlw	10
  5924  03C4  00F4               	movwf	DelayTime_1us@count
  5925  03C5  3000               	movlw	0
  5926  03C6  00F5               	movwf	DelayTime_1us@count+1
  5927  03C7  3184  247E  3183   	fcall	_DelayTime_1us
  5928                           
  5929                           ;CC2500_B1.c: 139: RC0 = 1;
  5930  03CA  0020               	movlb	0	; select bank0
  5931  03CB  140E               	bsf	14,0	;volatile
  5932                           
  5933                           ;CC2500_B1.c: 140: DelayTime_1us(40);
  5934  03CC  3028               	movlw	40
  5935  03CD  00F4               	movwf	DelayTime_1us@count
  5936  03CE  3000               	movlw	0
  5937  03CF  00F5               	movwf	DelayTime_1us@count+1
  5938  03D0  3184  247E  3183   	fcall	_DelayTime_1us
  5939                           
  5940                           ;CC2500_B1.c: 141: RC0 = 0;
  5941  03D3  0020               	movlb	0	; select bank0
  5942  03D4  100E               	bcf	14,0	;volatile
  5943                           
  5944                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
  5945  03D5  3030               	movlw	48
  5946  03D6  00E8               	movwf	??_CC2500_PowerRST
  5947  03D7  0868               	movf	??_CC2500_PowerRST,w
  5948  03D8  00F7               	movwf	_SPI0Buffer
  5949                           
  5950                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
  5951  03D9  2BDD               	goto	l3652
  5952  03DA                     l3650:	
  5953                           
  5954                           ;CC2500_B1.c: 144: Timeout_Counter();
  5955  03DA  3185  25E0  3183   	fcall	_Timeout_Counter
  5956  03DD                     l3652:	
  5957  03DD  0020               	movlb	0	; select bank0
  5958  03DE  1E8E               	btfss	14,5	;volatile
  5959  03DF  2BE2               	goto	l3656
  5960  03E0  1D4A               	btfss	_myMain+12,2
  5961  03E1  2BDA               	goto	l3650
  5962  03E2                     l3656:	
  5963                           
  5964                           ;CC2500_B1.c: 145: };
  5965                           ;CC2500_B1.c: 146: set_TimeoutCleared();
  5966  03E2  3186  26A6  3183   	fcall	_set_TimeoutCleared
  5967                           
  5968                           ;CC2500_B1.c: 147: CC2500_WriteByte();
  5969  03E5  3185  25F5  3183   	fcall	_CC2500_WriteByte
  5970                           
  5971                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
  5972  03E8  2BEC               	goto	l3662
  5973  03E9                     l3660:	
  5974                           
  5975                           ;CC2500_B1.c: 149: Timeout_Counter();
  5976  03E9  3185  25E0  3183   	fcall	_Timeout_Counter
  5977  03EC                     l3662:	
  5978  03EC  0020               	movlb	0	; select bank0
  5979  03ED  1E8E               	btfss	14,5	;volatile
  5980  03EE  2BF1               	goto	l3666
  5981  03EF  1D4A               	btfss	_myMain+12,2
  5982  03F0  2BE9               	goto	l3660
  5983  03F1                     l3666:	
  5984                           
  5985                           ;CC2500_B1.c: 150: };
  5986                           ;CC2500_B1.c: 151: set_TimeoutCleared();
  5987  03F1  3186  26A6         	fcall	_set_TimeoutCleared
  5988                           
  5989                           ;CC2500_B1.c: 152: RC4 = 0;
  5990  03F3  0020               	movlb	0	; select bank0
  5991  03F4  120E               	bcf	14,4	;volatile
  5992                           
  5993                           ;CC2500_B1.c: 153: RC0 = 1;
  5994  03F5  140E               	bsf	14,0	;volatile
  5995  03F6  0008               	return
  5996  03F7                     __end_of_CC2500_PowerRST:	
  5997                           
  5998                           	psect	text31
  5999  0454                     __ptext31:	
  6000 ;; *************** function _CC2500_InitSetREG *****************
  6001 ;; Defined at:
  6002 ;;		line 159 in file "../src/CC2500_B1.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  loop_c          1    6[BANK0 ] unsigned char 
  6007 ;;  temp2           1    5[BANK0 ] unsigned char 
  6008 ;;  temp1           1    4[BANK0 ] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;		None               void
  6011 ;; Registers used:
  6012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        4 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    5
  6025 ;; This function calls:
  6026 ;;		_CC2500_WriteREG
  6027 ;; This function is called by:
  6028 ;;		_CC2500_PowerOnInitial
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function _CC2500_InitSetREG
  6034  0454                     _CC2500_InitSetREG:	
  6035                           
  6036                           ;CC2500_B1.c: 160: unsigned char loop_c;
  6037                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
  6038                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6042  0454  0020               	movlb	0	; select bank0
  6043  0455  01EA               	clrf	CC2500_InitSetREG@loop_c
  6044  0456                     L3:	
  6045  0456  302F               	movlw	47
  6046  0457  026A               	subwf	CC2500_InitSetREG@loop_c,w
  6047  0458  1803               	btfsc	3,0
  6048  0459  0008               	return
  6049                           
  6050                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
  6051  045A  086A               	movf	CC2500_InitSetREG@loop_c,w
  6052  045B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  6053  045C  0084               	movwf	4
  6054  045D  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  6055  045E  1803               	skipnc
  6056  045F  3E01               	addlw	1
  6057  0460  0085               	movwf	5
  6058  0461  0800               	movf	0,w	;code access
  6059  0462  00E7               	movwf	??_CC2500_InitSetREG
  6060  0463  0867               	movf	??_CC2500_InitSetREG,w
  6061  0464  00E8               	movwf	CC2500_InitSetREG@temp1
  6062                           
  6063                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
  6064  0465  086A               	movf	CC2500_InitSetREG@loop_c,w
  6065  0466  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  6066  0467  0084               	movwf	4
  6067  0468  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  6068  0469  1803               	skipnc
  6069  046A  3E01               	addlw	1
  6070  046B  0085               	movwf	5
  6071  046C  0800               	movf	0,w	;code access
  6072  046D  00E7               	movwf	??_CC2500_InitSetREG
  6073  046E  0867               	movf	??_CC2500_InitSetREG,w
  6074  046F  00E9               	movwf	CC2500_InitSetREG@temp2
  6075                           
  6076                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
  6077  0470  0869               	movf	CC2500_InitSetREG@temp2,w
  6078  0471  00E7               	movwf	??_CC2500_InitSetREG
  6079  0472  0867               	movf	??_CC2500_InitSetREG,w
  6080  0473  00E4               	movwf	CC2500_WriteREG@value
  6081  0474  0868               	movf	CC2500_InitSetREG@temp1,w
  6082  0475  3185  2507  3184   	fcall	_CC2500_WriteREG
  6083  0478  3001               	movlw	1
  6084  0479  0020               	movlb	0	; select bank0
  6085  047A  00E7               	movwf	??_CC2500_InitSetREG
  6086  047B  0867               	movf	??_CC2500_InitSetREG,w
  6087  047C  07EA               	addwf	CC2500_InitSetREG@loop_c,f
  6088  047D  2C56               	goto	L3
  6089  047E                     __end_of_CC2500_InitSetREG:	
  6090                           
  6091                           	psect	text32
  6092  0527                     __ptext32:	
  6093 ;; *************** function _CC2500_InitPATable *****************
  6094 ;; Defined at:
  6095 ;;		line 174 in file "../src/CC2500_B1.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  loop_d          1    5[BANK0 ] unsigned char 
  6100 ;;  temp            1    4[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        3 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    5
  6117 ;; This function calls:
  6118 ;;		_CC2500_WriteREG
  6119 ;; This function is called by:
  6120 ;;		_CC2500_PowerOnInitial
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _CC2500_InitPATable
  6126  0527                     _CC2500_InitPATable:	
  6127                           
  6128                           ;CC2500_B1.c: 175: unsigned char loop_d;
  6129                           ;CC2500_B1.c: 176: unsigned char temp;
  6130                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
  6131                           
  6132                           ;incstack = 0
  6133                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6134  0527  0020               	movlb	0	; select bank0
  6135  0528  01E9               	clrf	CC2500_InitPATable@loop_d
  6136  0529                     L4:	
  6137  0529  3008               	movlw	8
  6138  052A  0269               	subwf	CC2500_InitPATable@loop_d,w
  6139  052B  1803               	btfsc	3,0
  6140  052C  0008               	return
  6141                           
  6142                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
  6143  052D  0869               	movf	CC2500_InitPATable@loop_d,w
  6144  052E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  6145  052F  0084               	movwf	4
  6146  0530  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  6147  0531  1803               	skipnc
  6148  0532  3E01               	addlw	1
  6149  0533  0085               	movwf	5
  6150  0534  0800               	movf	0,w	;code access
  6151  0535  00E7               	movwf	??_CC2500_InitPATable
  6152  0536  0867               	movf	??_CC2500_InitPATable,w
  6153  0537  00E8               	movwf	CC2500_InitPATable@temp
  6154                           
  6155                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
  6156  0538  0868               	movf	CC2500_InitPATable@temp,w
  6157  0539  00E7               	movwf	??_CC2500_InitPATable
  6158  053A  0867               	movf	??_CC2500_InitPATable,w
  6159  053B  00E4               	movwf	CC2500_WriteREG@value
  6160  053C  303E               	movlw	62
  6161  053D  3185  2507  3185   	fcall	_CC2500_WriteREG
  6162  0540  3001               	movlw	1
  6163  0541  0020               	movlb	0	; select bank0
  6164  0542  00E7               	movwf	??_CC2500_InitPATable
  6165  0543  0867               	movf	??_CC2500_InitPATable,w
  6166  0544  07E9               	addwf	CC2500_InitPATable@loop_d,f
  6167  0545  2D29               	goto	L4
  6168  0546                     __end_of_CC2500_InitPATable:	
  6169                           
  6170                           	psect	text33
  6171  0507                     __ptext33:	
  6172 ;; *************** function _CC2500_WriteREG *****************
  6173 ;; Defined at:
  6174 ;;		line 251 in file "../src/CC2500_B1.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  w_addr          1    wreg     unsigned char 
  6177 ;;  value           1    0[BANK0 ] unsigned char 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;  w_addr          1    2[BANK0 ] unsigned char 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;		None               void
  6182 ;; Registers used:
  6183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6189 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;Total ram usage:        3 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    4
  6196 ;; This function calls:
  6197 ;;		_CC2500_WriteByte
  6198 ;;		_Timeout_Counter
  6199 ;;		_set_TimeoutCleared
  6200 ;; This function is called by:
  6201 ;;		_CC2500_InitSetREG
  6202 ;;		_CC2500_InitPATable
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _CC2500_WriteREG
  6208  0507                     _CC2500_WriteREG:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6212                           ;CC2500_WriteREG@w_addr stored from wreg
  6213  0507  0020               	movlb	0	; select bank0
  6214  0508  00E6               	movwf	CC2500_WriteREG@w_addr
  6215                           
  6216                           ;CC2500_B1.c: 252: RC0 = 0;
  6217  0509  100E               	bcf	14,0	;volatile
  6218                           
  6219                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
  6220  050A  0866               	movf	CC2500_WriteREG@w_addr,w
  6221  050B  00E5               	movwf	??_CC2500_WriteREG
  6222  050C  0865               	movf	??_CC2500_WriteREG,w
  6223  050D  00F7               	movwf	_SPI0Buffer
  6224                           
  6225                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
  6226  050E  2D12               	goto	l3556
  6227  050F                     l3554:	
  6228                           
  6229                           ;CC2500_B1.c: 255: Timeout_Counter();
  6230  050F  3185  25E0  3185   	fcall	_Timeout_Counter
  6231  0512                     l3556:	
  6232  0512  0020               	movlb	0	; select bank0
  6233  0513  1E8E               	btfss	14,5	;volatile
  6234  0514  2D17               	goto	l3560
  6235  0515  1D4A               	btfss	_myMain+12,2
  6236  0516  2D0F               	goto	l3554
  6237  0517                     l3560:	
  6238                           
  6239                           ;CC2500_B1.c: 256: };
  6240                           ;CC2500_B1.c: 257: set_TimeoutCleared();
  6241  0517  3186  26A6  3185   	fcall	_set_TimeoutCleared
  6242                           
  6243                           ;CC2500_B1.c: 259: CC2500_WriteByte();
  6244  051A  3185  25F5  3185   	fcall	_CC2500_WriteByte
  6245                           
  6246                           ;CC2500_B1.c: 260: SPI0Buffer = value;
  6247  051D  0020               	movlb	0	; select bank0
  6248  051E  0864               	movf	CC2500_WriteREG@value,w
  6249  051F  00E5               	movwf	??_CC2500_WriteREG
  6250  0520  0865               	movf	??_CC2500_WriteREG,w
  6251  0521  00F7               	movwf	_SPI0Buffer
  6252                           
  6253                           ;CC2500_B1.c: 261: CC2500_WriteByte();
  6254  0522  3185  25F5         	fcall	_CC2500_WriteByte
  6255                           
  6256                           ;CC2500_B1.c: 262: RC0 = 1;
  6257  0524  0020               	movlb	0	; select bank0
  6258  0525  140E               	bsf	14,0	;volatile
  6259  0526  0008               	return
  6260  0527                     __end_of_CC2500_WriteREG:	
  6261                           
  6262                           	psect	text34
  6263  0672                     __ptext34:	
  6264 ;; *************** function _CC2500_FrequencyCabr *****************
  6265 ;; Defined at:
  6266 ;;		line 201 in file "../src/CC2500_B1.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;		None               void
  6273 ;; Registers used:
  6274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;Total ram usage:        0 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    5
  6287 ;; This function calls:
  6288 ;;		_CC2500_WriteCommand
  6289 ;;		_DelayTime_1us
  6290 ;; This function is called by:
  6291 ;;		_CC2500_PowerOnInitial
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _CC2500_FrequencyCabr
  6297  0672                     _CC2500_FrequencyCabr:	
  6298                           
  6299                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
  6300                           
  6301                           ;incstack = 0
  6302                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6303  0672  3033               	movlw	51
  6304  0673  3185  259C  3186   	fcall	_CC2500_WriteCommand
  6305                           
  6306                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
  6307  0676  30E8               	movlw	232
  6308  0677  00F4               	movwf	DelayTime_1us@count
  6309  0678  3003               	movlw	3
  6310  0679  00F5               	movwf	DelayTime_1us@count+1
  6311  067A  3184  247E         	fcall	_DelayTime_1us
  6312  067C  0008               	return
  6313  067D                     __end_of_CC2500_FrequencyCabr:	
  6314                           
  6315                           	psect	text35
  6316  047E                     __ptext35:	
  6317 ;; *************** function _DelayTime_1us *****************
  6318 ;; Defined at:
  6319 ;;		line 320 in file "../src/CC2500_B1.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  count           2    4[COMMON] int 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  j               2    2[BANK0 ] unsigned int 
  6324 ;;  i               2    0[BANK0 ] unsigned int 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg, status,2
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        6 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    3
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_CC2500_PowerRST
  6345 ;;		_CC2500_FrequencyCabr
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           
  6350                           ;psect for function _DelayTime_1us
  6351  047E                     _DelayTime_1us:	
  6352                           
  6353                           ;CC2500_B1.c: 321: unsigned int i, j;
  6354                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  6358  047E  3001               	movlw	1
  6359  047F  0020               	movlb	0	; select bank0
  6360  0480  00E4               	movwf	DelayTime_1us@i
  6361  0481  3000               	movlw	0
  6362  0482  00E5               	movwf	DelayTime_1us@i+1
  6363  0483                     l251:	
  6364  0483  0875               	movf	DelayTime_1us@count+1,w
  6365  0484  0265               	subwf	DelayTime_1us@i+1,w
  6366  0485  1D03               	skipz
  6367  0486  2C89               	goto	u2505
  6368  0487  0874               	movf	DelayTime_1us@count,w
  6369  0488  0264               	subwf	DelayTime_1us@i,w
  6370  0489                     u2505:	
  6371  0489  1803               	btfsc	3,0
  6372  048A  0008               	return
  6373                           
  6374                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
  6375  048B  01E6               	clrf	DelayTime_1us@j
  6376  048C  01E7               	clrf	DelayTime_1us@j+1
  6377  048D  3000               	movlw	0
  6378  048E  0267               	subwf	DelayTime_1us@j+1,w
  6379  048F  3002               	movlw	2
  6380  0490  1903               	skipnz
  6381  0491  0266               	subwf	DelayTime_1us@j,w
  6382  0492  1803               	btfsc	3,0
  6383  0493  2C9F               	goto	l3548
  6384  0494                     l3546:	
  6385  0494  3001               	movlw	1
  6386  0495  07E6               	addwf	DelayTime_1us@j,f
  6387  0496  3000               	movlw	0
  6388  0497  3DE7               	addwfc	DelayTime_1us@j+1,f
  6389  0498  3000               	movlw	0
  6390  0499  0267               	subwf	DelayTime_1us@j+1,w
  6391  049A  3002               	movlw	2
  6392  049B  1903               	skipnz
  6393  049C  0266               	subwf	DelayTime_1us@j,w
  6394  049D  1C03               	skipc
  6395  049E  2C94               	goto	l3546
  6396  049F                     l3548:	
  6397  049F  3001               	movlw	1
  6398  04A0  07E4               	addwf	DelayTime_1us@i,f
  6399  04A1  3000               	movlw	0
  6400  04A2  3DE5               	addwfc	DelayTime_1us@i+1,f
  6401  04A3  2C83               	goto	l251
  6402  04A4                     __end_of_DelayTime_1us:	
  6403                           
  6404                           	psect	text36
  6405  06B3                     __ptext36:	
  6406 ;; *************** function _CC2500_ClearTXFIFO *****************
  6407 ;; Defined at:
  6408 ;;		line 187 in file "../src/CC2500_B1.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    5
  6429 ;; This function calls:
  6430 ;;		_CC2500_WriteCommand
  6431 ;; This function is called by:
  6432 ;;		_CC2500_PowerOnInitial
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _CC2500_ClearTXFIFO
  6438  06B3                     _CC2500_ClearTXFIFO:	
  6439                           
  6440                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6444  06B3  303B               	movlw	59
  6445  06B4  3185  259C         	fcall	_CC2500_WriteCommand
  6446  06B6  0008               	return
  6447  06B7                     __end_of_CC2500_ClearTXFIFO:	
  6448                           
  6449                           	psect	text37
  6450  06B7                     __ptext37:	
  6451 ;; *************** function _CC2500_ClearRXFIFO *****************
  6452 ;; Defined at:
  6453 ;;		line 194 in file "../src/CC2500_B1.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;		None               void
  6460 ;; Registers used:
  6461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;Total ram usage:        0 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    5
  6474 ;; This function calls:
  6475 ;;		_CC2500_WriteCommand
  6476 ;; This function is called by:
  6477 ;;		_CC2500_PowerOnInitial
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function _CC2500_ClearRXFIFO
  6483  06B7                     _CC2500_ClearRXFIFO:	
  6484                           
  6485                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
  6486                           
  6487                           ;incstack = 0
  6488                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6489  06B7  303A               	movlw	58
  6490  06B8  3185  259C         	fcall	_CC2500_WriteCommand
  6491  06BA  0008               	return
  6492  06BB                     __end_of_CC2500_ClearRXFIFO:	
  6493                           
  6494                           	psect	text38
  6495  059C                     __ptext38:	
  6496 ;; *************** function _CC2500_WriteCommand *****************
  6497 ;; Defined at:
  6498 ;;		line 285 in file "../src/CC2500_B1.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  command         1    wreg     unsigned char 
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;  command         1    1[BANK0 ] unsigned char 
  6503 ;; Return value:  Size  Location     Type
  6504 ;;		None               void
  6505 ;; Registers used:
  6506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;Total ram usage:        2 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    4
  6519 ;; This function calls:
  6520 ;;		_CC2500_WriteByte
  6521 ;;		_Timeout_Counter
  6522 ;;		_set_TimeoutCleared
  6523 ;; This function is called by:
  6524 ;;		_CC2500_TxData
  6525 ;;		_CC2500_ClearTXFIFO
  6526 ;;		_CC2500_ClearRXFIFO
  6527 ;;		_CC2500_FrequencyCabr
  6528 ;;		_CC2500_SIDLEMode
  6529 ;;		_setRF_Main
  6530 ;;		_RF_RxDisable
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _CC2500_WriteCommand
  6536  059C                     _CC2500_WriteCommand:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6540                           ;CC2500_WriteCommand@command stored from wreg
  6541  059C  0020               	movlb	0	; select bank0
  6542  059D  00E5               	movwf	CC2500_WriteCommand@command
  6543                           
  6544                           ;CC2500_B1.c: 286: RC0 = 0;
  6545  059E  100E               	bcf	14,0	;volatile
  6546                           
  6547                           ;CC2500_B1.c: 287: SPI0Buffer = command;
  6548  059F  0865               	movf	CC2500_WriteCommand@command,w
  6549  05A0  00E4               	movwf	??_CC2500_WriteCommand
  6550  05A1  0864               	movf	??_CC2500_WriteCommand,w
  6551  05A2  00F7               	movwf	_SPI0Buffer
  6552                           
  6553                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
  6554  05A3  2DA7               	goto	l3378
  6555  05A4                     l3376:	
  6556                           
  6557                           ;CC2500_B1.c: 290: Timeout_Counter();
  6558  05A4  3185  25E0  3185   	fcall	_Timeout_Counter
  6559  05A7                     l3378:	
  6560  05A7  0020               	movlb	0	; select bank0
  6561  05A8  1E8E               	btfss	14,5	;volatile
  6562  05A9  2DAC               	goto	l3382
  6563  05AA  1D4A               	btfss	_myMain+12,2
  6564  05AB  2DA4               	goto	l3376
  6565  05AC                     l3382:	
  6566                           
  6567                           ;CC2500_B1.c: 291: };
  6568                           ;CC2500_B1.c: 292: set_TimeoutCleared();
  6569  05AC  3186  26A6  3185   	fcall	_set_TimeoutCleared
  6570                           
  6571                           ;CC2500_B1.c: 294: CC2500_WriteByte();
  6572  05AF  3185  25F5         	fcall	_CC2500_WriteByte
  6573                           
  6574                           ;CC2500_B1.c: 295: RC0 = 1;
  6575  05B1  0020               	movlb	0	; select bank0
  6576  05B2  140E               	bsf	14,0	;volatile
  6577  05B3  0008               	return
  6578  05B4                     __end_of_CC2500_WriteCommand:	
  6579                           
  6580                           	psect	text39
  6581  06A6                     __ptext39:	
  6582 ;; *************** function _set_TimeoutCleared *****************
  6583 ;; Defined at:
  6584 ;;		line 283 in file "../src/Main_B1.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;		None
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;		None               void
  6591 ;; Registers used:
  6592 ;;		status,2
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;Total ram usage:        0 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    3
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_CC2500_TxData
  6609 ;;		_CC2500_RxData
  6610 ;;		_CC2500_PowerRST
  6611 ;;		_CC2500_WriteREG
  6612 ;;		_CC2500_WriteCommand
  6613 ;;		_CC2500_ReadStatus
  6614 ;;		_CC2500_ReadREG
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _set_TimeoutCleared
  6620  06A6                     _set_TimeoutCleared:	
  6621                           
  6622                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _set_TimeoutCleared: [status,2]
  6626  06A6  0020               	movlb	0	; select bank0
  6627  06A7  114A               	bcf	_myMain+12,2
  6628                           
  6629                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6630  06A8  01CB               	clrf	_myMain+13
  6631  06A9  01CC               	clrf	_myMain+14
  6632  06AA  0008               	return
  6633  06AB                     __end_of_set_TimeoutCleared:	
  6634                           
  6635                           	psect	text40
  6636  05E0                     __ptext40:	
  6637 ;; *************** function _Timeout_Counter *****************
  6638 ;; Defined at:
  6639 ;;		line 274 in file "../src/Main_B1.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;		None
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;		None               void
  6646 ;; Registers used:
  6647 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:        0 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    3
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_CC2500_TxData
  6664 ;;		_CC2500_RxData
  6665 ;;		_CC2500_PowerRST
  6666 ;;		_CC2500_WriteREG
  6667 ;;		_CC2500_WriteCommand
  6668 ;;		_CC2500_ReadStatus
  6669 ;;		_CC2500_ReadREG
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _Timeout_Counter
  6675  05E0                     _Timeout_Counter:	
  6676                           
  6677                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6681  05E0  3001               	movlw	1
  6682  05E1  0020               	movlb	0	; select bank0
  6683  05E2  07CB               	addwf	_myMain+13,f
  6684  05E3  3000               	movlw	0
  6685  05E4  3DCC               	addwfc	_myMain+14,f
  6686                           
  6687                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
  6688  05E5  300D               	movlw	13
  6689  05E6  3E3E               	addlw	_myMain& (0+255)
  6690  05E7  0086               	movwf	6
  6691  05E8  0187               	clrf	7
  6692  05E9  3F40               	moviw [0]fsr1
  6693  05EA  3A10               	xorlw	16
  6694  05EB  1D03               	skipz
  6695  05EC  2DEF               	goto	u2205
  6696  05ED  3F41               	moviw [1]fsr1
  6697  05EE  3A27               	xorlw	39
  6698  05EF                     u2205:	
  6699  05EF  1D03               	skipz
  6700  05F0  0008               	return
  6701                           
  6702                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6703  05F1  01CB               	clrf	_myMain+13
  6704  05F2  01CC               	clrf	_myMain+14
  6705                           
  6706                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6707  05F3  154A               	bsf	_myMain+12,2
  6708  05F4  0008               	return
  6709  05F5                     __end_of_Timeout_Counter:	
  6710                           
  6711                           	psect	text41
  6712  05F5                     __ptext41:	
  6713 ;; *************** function _CC2500_WriteByte *****************
  6714 ;; Defined at:
  6715 ;;		line 219 in file "../src/CC2500_B1.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;		None
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  loop_a          1    5[COMMON] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;		None               void
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;Total ram usage:        2 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    3
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_CC2500_TxData
  6740 ;;		_CC2500_RxData
  6741 ;;		_CC2500_PowerRST
  6742 ;;		_CC2500_WriteREG
  6743 ;;		_CC2500_WriteCommand
  6744 ;;		_CC2500_ReadStatus
  6745 ;;		_CC2500_ReadREG
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           
  6750                           ;psect for function _CC2500_WriteByte
  6751  05F5                     _CC2500_WriteByte:	
  6752                           
  6753                           ;CC2500_B1.c: 220: unsigned char loop_a;
  6754                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
  6755                           
  6756                           ;incstack = 0
  6757                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  6758  05F5  01F5               	clrf	CC2500_WriteByte@loop_a
  6759  05F6                     L5:	
  6760  05F6  3008               	movlw	8
  6761  05F7  0275               	subwf	CC2500_WriteByte@loop_a,w
  6762  05F8  1803               	btfsc	3,0
  6763  05F9  0008               	return
  6764                           
  6765                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
  6766  05FA  1FF7               	btfss	_SPI0Buffer,7
  6767  05FB  2DFF               	goto	l207
  6768                           
  6769                           ;CC2500_B1.c: 223: RC4 = 1;
  6770  05FC  0020               	movlb	0	; select bank0
  6771  05FD  160E               	bsf	14,4	;volatile
  6772  05FE  2E01               	goto	l208
  6773  05FF                     l207:	
  6774                           
  6775                           ;CC2500_B1.c: 224: else
  6776                           ;CC2500_B1.c: 225: RC4 = 0;
  6777  05FF  0020               	movlb	0	; select bank0
  6778  0600  120E               	bcf	14,4	;volatile
  6779  0601                     l208:	
  6780                           
  6781                           ;CC2500_B1.c: 226: RC3 = 1;
  6782  0601  158E               	bsf	14,3	;volatile
  6783                           
  6784                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
  6785  0602  1003               	clrc
  6786  0603  0DF7               	rlf	_SPI0Buffer,f
  6787                           
  6788                           ;CC2500_B1.c: 228: RC3 = 0;
  6789  0604  118E               	bcf	14,3	;volatile
  6790  0605  3001               	movlw	1
  6791  0606  00F4               	movwf	??_CC2500_WriteByte
  6792  0607  0874               	movf	??_CC2500_WriteByte,w
  6793  0608  07F5               	addwf	CC2500_WriteByte@loop_a,f
  6794  0609  2DF6               	goto	L5
  6795  060A                     __end_of_CC2500_WriteByte:	
  6796                           
  6797                           	psect	intentry
  6798  0004                     __pintentry:	
  6799 ;; *************** function _ISR *****************
  6800 ;; Defined at:
  6801 ;;		line 107 in file "../src/MCU_B1.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;		None               void
  6808 ;; Registers used:
  6809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6819 ;;Total ram usage:        1 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    2
  6822 ;; This function calls:
  6823 ;;		_TMR1_ISR
  6824 ;;		_UART_ISR
  6825 ;; This function is called by:
  6826 ;;		Interrupt level 1
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830  0004                     _ISR:	
  6831                           
  6832                           ;incstack = 0
  6833                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6834  0004  147E               	bsf	126,0	;set compiler interrupt flag
  6835  0005  3180               	pagesel	$
  6836  0006  0020               	movlb	0	; select bank0
  6837  0007  087F               	movf	127,w
  6838  0008  00F3               	movwf	??_ISR
  6839                           
  6840                           ;MCU_B1.c: 109: ;;
  6841                           ;MCU_B1.c: 111: ;;
  6842                           ;MCU_B1.c: 113: TMR1_ISR();
  6843  0009  3185  2546  3180   	fcall	_TMR1_ISR
  6844                           
  6845                           ;MCU_B1.c: 115: ;;
  6846                           ;MCU_B1.c: 117: ;;
  6847                           ;MCU_B1.c: 119: UART_ISR();
  6848  000C  3183  23F7         	fcall	_UART_ISR
  6849  000E  0873               	movf	??_ISR,w
  6850  000F  0020               	movlb	0	; select bank0
  6851  0010  00FF               	movwf	127
  6852  0011  107E               	bcf	126,0	;clear compiler interrupt flag
  6853  0012  0009               	retfie
  6854  0013                     __end_of_ISR:	
  6855                           
  6856                           	psect	text43
  6857  03F7                     __ptext43:	
  6858 ;; *************** function _UART_ISR *****************
  6859 ;; Defined at:
  6860 ;;		line 739 in file "../src/MCU_B1.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;  i               2    1[COMMON] int 
  6865 ;; Return value:  Size  Location     Type
  6866 ;;		None               void
  6867 ;; Registers used:
  6868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;Total ram usage:        3 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    1
  6881 ;; This function calls:
  6882 ;;		_getch
  6883 ;; This function is called by:
  6884 ;;		_ISR
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _UART_ISR
  6890  03F7                     _UART_ISR:	
  6891                           
  6892                           ;MCU_B1.c: 740: if (RCIE == 1 && RCIF == 1) {
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6896  03F7  0021               	movlb	1	; select bank1
  6897  03F8  1E91               	btfss	17,5	;volatile
  6898  03F9  0008               	return
  6899  03FA  0020               	movlb	0	; select bank0
  6900  03FB  1E91               	btfss	17,5	;volatile
  6901  03FC  0008               	return
  6902                           
  6903                           ;MCU_B1.c: 742: for (int i = 0; i < 8; i++) {
  6904  03FD  01F1               	clrf	UART_ISR@i
  6905  03FE  01F2               	clrf	UART_ISR@i+1
  6906  03FF  0872               	movf	UART_ISR@i+1,w
  6907  0400  3A80               	xorlw	128
  6908  0401  00F0               	movwf	??_UART_ISR
  6909  0402  3080               	movlw	128
  6910  0403  0270               	subwf	??_UART_ISR,w
  6911  0404  3008               	movlw	8
  6912  0405  1903               	btfsc	3,2
  6913  0406  0271               	subwf	UART_ISR@i,w
  6914  0407  1803               	btfsc	3,0
  6915  0408  2C21               	goto	i1l579
  6916  0409                     i1l3126:	
  6917                           
  6918                           ;MCU_B1.c: 743: UART.Data[i] = getch();
  6919  0409  3186  269B  3183   	fcall	_getch
  6920  040C  00F0               	movwf	??_UART_ISR
  6921  040D  0871               	movf	UART_ISR@i,w
  6922  040E  3EC0               	addlw	_UART& (0+255)
  6923  040F  0086               	movwf	6
  6924  0410  0187               	clrf	7
  6925  0411  0870               	movf	??_UART_ISR,w
  6926  0412  0081               	movwf	1
  6927  0413  3001               	movlw	1
  6928  0414  07F1               	addwf	UART_ISR@i,f
  6929  0415  3000               	movlw	0
  6930  0416  3DF2               	addwfc	UART_ISR@i+1,f
  6931  0417  0872               	movf	UART_ISR@i+1,w
  6932  0418  3A80               	xorlw	128
  6933  0419  00F0               	movwf	??_UART_ISR
  6934  041A  3080               	movlw	128
  6935  041B  0270               	subwf	??_UART_ISR,w
  6936  041C  3008               	movlw	8
  6937  041D  1903               	btfsc	3,2
  6938  041E  0271               	subwf	UART_ISR@i,w
  6939  041F  1C03               	skipc
  6940  0420  2C09               	goto	i1l3126
  6941  0421                     i1l579:	
  6942                           
  6943                           ;MCU_B1.c: 744: }
  6944                           ;MCU_B1.c: 745: UART.RxGO = 1;
  6945  0421  0021               	movlb	1	; select bank1
  6946  0422  14CB               	bsf	(_UART^(0+128)+11),1
  6947                           
  6948                           ;MCU_B1.c: 752: RCIF = 0;
  6949  0423  0020               	movlb	0	; select bank0
  6950  0424  1291               	bcf	17,5	;volatile
  6951  0425  0008               	return
  6952  0426                     __end_of_UART_ISR:	
  6953                           
  6954                           	psect	text44
  6955  069B                     __ptext44:	
  6956 ;; *************** function _getch *****************
  6957 ;; Defined at:
  6958 ;;		line 853 in file "../src/MCU_B1.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;		None
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;		None
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      unsigned char 
  6965 ;; Registers used:
  6966 ;;		wreg
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;Total ram usage:        0 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_UART_ISR
  6982 ;;		_getche
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           
  6987                           ;psect for function _getch
  6988  069B                     _getch:	
  6989  069B                     i1l606:	
  6990                           ;MCU_B1.c: 856: continue;
  6991                           
  6992                           ;MCU_B1.c: 855: while (!RCIF)
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _getch: [wreg]
  6996                           
  6997  069B  0020               	movlb	0	; select bank0
  6998  069C  1E91               	btfss	17,5	;volatile
  6999  069D  2E9B               	goto	i1l606
  7000                           
  7001                           ;MCU_B1.c: 857: return RCREG;
  7002  069E  0023               	movlb	3	; select bank3
  7003  069F  0819               	movf	25,w	;volatile
  7004  06A0  0008               	return
  7005  06A1                     __end_of_getch:	
  7006                           
  7007                           	psect	text45
  7008  0546                     __ptext45:	
  7009 ;; *************** function _TMR1_ISR *****************
  7010 ;; Defined at:
  7011 ;;		line 209 in file "../src/MCU_B1.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;Total ram usage:        0 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		_ISR
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           
  7039                           ;psect for function _TMR1_ISR
  7040  0546                     _TMR1_ISR:	
  7041                           
  7042                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  7043                           
  7044                           ;incstack = 0
  7045                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7046  0546  0021               	movlb	1	; select bank1
  7047  0547  1C11               	btfss	17,0	;volatile
  7048  0548  0008               	return
  7049  0549  0020               	movlb	0	; select bank0
  7050  054A  1C11               	btfss	17,0	;volatile
  7051  054B  0008               	return
  7052                           
  7053                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  7054  054C  30FA               	movlw	250
  7055  054D  0097               	movwf	23	;volatile
  7056                           
  7057                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  7058  054E  3038               	movlw	56
  7059  054F  0096               	movwf	22	;volatile
  7060                           
  7061                           ;MCU_B1.c: 214: TMR1IF = 0;
  7062  0550  1011               	bcf	17,0	;volatile
  7063                           
  7064                           ;MCU_B1.c: 234: Timer1.Count++;
  7065  0551  3001               	movlw	1
  7066  0552  07DA               	addwf	_Timer1+1,f
  7067  0553  3000               	movlw	0
  7068  0554  3DDB               	addwfc	_Timer1+2,f
  7069                           
  7070                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  7071  0555  3001               	movlw	1
  7072  0556  3E59               	addlw	_Timer1& (0+255)
  7073  0557  0086               	movwf	6
  7074  0558  0187               	clrf	7
  7075  0559  3F40               	moviw [0]fsr1
  7076  055A  3A64               	xorlw	100
  7077  055B  1D03               	skipz
  7078  055C  2D5F               	goto	u201_25
  7079  055D  3F41               	moviw [1]fsr1
  7080  055E  3A00               	xorlw	0
  7081  055F                     u201_25:	
  7082  055F  1D03               	skipz
  7083  0560  0008               	return
  7084                           
  7085                           ;MCU_B1.c: 236: {
  7086                           ;MCU_B1.c: 237: Timer1.Count = 0;
  7087  0561  01DA               	clrf	_Timer1+1
  7088  0562  01DB               	clrf	_Timer1+2
  7089                           
  7090                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  7091  0563  1459               	bsf	_Timer1,0
  7092  0564  0008               	return
  7093  0565                     __end_of_TMR1_ISR:	
  7094  007E                     btemp	set	126	;btemp
  7095  007E                     pic14e$flags	set	126
  7096  007E                     wtemp	set	126
  7097  007E                     wtemp0	set	126
  7098  0080                     wtemp1	set	128
  7099  0082                     wtemp2	set	130
  7100  0084                     wtemp3	set	132
  7101  0086                     wtemp4	set	134
  7102  0088                     wtemp5	set	136
  7103  007F                     wtemp6	set	127
  7104  007E                     ttemp	set	126
  7105  007E                     ttemp0	set	126
  7106  0081                     ttemp1	set	129
  7107  0084                     ttemp2	set	132
  7108  0087                     ttemp3	set	135
  7109  007F                     ttemp4	set	127
  7110  007E                     ltemp	set	126
  7111  007E                     ltemp0	set	126
  7112  0082                     ltemp1	set	130
  7113  0086                     ltemp2	set	134
  7114  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         82
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      8      77
    BANK1            80      4      48
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK1[32]), 


Critical Paths under _main in COMMON

    _myUARTtoRF_Main->_setTxData
    _UART_Main->_UART_Receive
    _UART_Main->_UART_Transmit
    _UART_Transmit->_putch
    _UART_Receive->_setTxData
    _setRF_Main->_getRxData
    _getRxData->_getMain_All_Error_Status
    _getRxData->_setLog_Code
    _getRxData->_setTxData
    _setControl_Lights_Table->_setTxData
    _CC2500_TxData->_CC2500_WriteByte
    _CC2500_RxData->_CC2500_ReadByte
    _CC2500_RxData->_CC2500_WriteByte
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _CC2500_PowerRST->_CC2500_WriteByte
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _UART_Main->_UART_Transmit
    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    3296
                                              0 BANK1      4     0      4
              _CC2500_PowerOnInitial
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
                          _UART_Main
              _myMain_Initialization
          _myUARTtoRF_Initialization
                    _myUARTtoRF_Main
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Main                                      0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myUARTtoRF_Initialization                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0     130
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        3     3      0     130
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         1     1      0       0
                                              5 COMMON     1     1      0
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0     915
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0     915
                                              4 BANK0      4     4      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
           _getMain_All_Error_Status
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0      68
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0       0
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getMain_All_Error_Status                             2     2      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              0 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              4 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              3 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              3 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              0 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              0 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0      68
                                              3 COMMON     1     1      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             3     3      0      68
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _Mcu_Initialization
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getMain_All_Error_Status
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setTxData
         _setLog_Code
         _setTxData
   _UART_Main
     _UART_Receive
       _setTxData
     _UART_Transmit
       _putch
   _myMain_Initialization
   _myUARTtoRF_Initialization
   _myUARTtoRF_Main
     _setTxData
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      30       7       60.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      87      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      87      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 02 17:09:03 2014

           __end_of_CC2500_WriteREG 0527                                 l134 02F8  
                               l207 05FF                                 l208 0601  
                               l251 0483                                 l600 0688  
                               l583 0654                                 l690 035E  
                               l674 04B3                                 l970 0044  
                               l972 004E                                 l968 00F6  
                               l977 007B                                 l979 00B2  
                               _GIE 005F                                 _CRC 005E  
                               _RA0 0060                                 _RA1 0061  
                               _RA2 0062                                 _RC0 0070  
                               _RC1 0071                                 _RC3 0073  
                               _RC4 0074                                 _RC5 0075  
                               _RF1 004D                                 _ISR 0004  
                               _RX9 0CEE                                 _TX9 0CF6  
          __end_of_CC2500_WriteByte 060A                                 wreg 0009  
                              ?_ISR 0070                                l1011 0636  
                              l1019 012D                                l1029 0177  
                              l1049 03B5                                l3322 05C1  
                              l3162 0336                                l3324 05C5  
                              l3502 0283                                l3422 0373  
                              l3430 039A                                l3504 0286  
                              l3424 0388                                l3168 0348  
                              l3442 02D3                                l3178 035F  
                              l3524 029A                                l3508 028B  
                              l3460 02FE                                l3436 02CB  
                              l3604 012F                                l3382 05AC  
                              l3526 02AF                                l3470 030D  
                              l3462 0301                                l3438 02CE  
                              l3376 05A4                                l3560 0517  
                              l3392 04F0                                l3456 02E3  
                              l3632 016D                                l3616 0146  
                              l3378 05A7                                l3546 0494  
                              l3554 050F                                l3650 03DA  
                              l3394 04F3                                l3474 0312  
                              l3466 0306                                l3626 0163  
                              l3548 049F                                l3556 0512  
                              l3660 03E9                                l3652 03DD  
                              l3492 0272                                l3468 030A  
                              l3662 03EC                                l3398 04F8  
                              l3486 026A                                l3494 0275  
                              l3806 00C3                                l3656 03E2  
                              l3488 026D                                l3592 011C  
                              l3666 03F1                                l3818 00E4  
                              l3754 0065                                l3790 009B  
                              l3788 0099               _myMain_Initialization 0640  
                              u2105 0344                                u2115 0356  
                              u2205 05EF                                _LATA 010C  
                              _LATB 010D                                u2135 036D  
                              _LATC 010E                                u3025 00D4  
                              u2095 032F                                u2505 0489  
                              u2905 005F                                _PEIE 005E  
                              _RCIE 048D                                _RCIF 008D  
                              _UART 00C0                                _RSSI 005F  
                              _TXIE 048C                                _TXIF 008C  
                              _main 04A4                     __end_of_RF_Main 06C1  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E          ?_myUARTtoRF_Initialization 0070  
                              ltemp 007E       __size_of_setRF_Initialization 000A  
                              start 0013                                ttemp 007E  
                              wtemp 007E                               ??_ISR 0073  
                 ??_myUARTtoRF_Main 0075                               ?_main 00CC  
                             _BRG16 0CFB                       __CFG_WDTE$OFF 0000  
                             _T1CON 0018                               i1l606 069B  
                             i1l579 0421       __size_of_CC2500_FrequencyCabr 000B  
                             _RCREG 0199                               _RCSTA 019D  
                             _TMR1H 0017                               _TMR1L 0016  
                             _SPBRG 019B                               _PORTA 000C  
                             _PORTB 000D                               _PORTC 000E  
                             _TRISA 008C                               _TRISB 008D  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E             __end_of_Timeout_Counter 05F5  
                     __CFG_WRT$BOOT 0000                    __end_of_UART_ISR 0426  
                __size_of_UART_Main 000D                    __end_of_TMR1_ISR 0565  
                  __end_of_UART_Set 061E        __size_of_CC2500_WriteCommand 0018  
                  __end_of_TMR1_Set 0672                               _getch 069B  
                             _putch 0687         __size_of_CC2500_ClearRXFIFO 0004  
       __size_of_CC2500_ClearTXFIFO 0004                 CC2500_RxData@loop_f 0067  
                    __pbitbssCOMMON 03B0                      __CFG_BOREN$OFF 0000  
                  ?_CC2500_ReadByte 0070                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   ?_CC2500_SIDLEMode 0070  
        __size_of_RF_Initialization 0003                  ??_CC2500_SIDLEMode 0076  
                   __initialization 0015                    ?_CC2500_PowerRST 0070  
                      __end_of_main 04C7                    __end_of_Fosc_Set 06AF  
                  ?_CC2500_WriteREG 0064                              ??_main 0076  
                      ?_setLog_Code 0070             _setControl_Lights_Table 0372  
                        _Receive_OK 03B0              ?_myMain_Initialization 0070  
                            ?_getch 0070                           ??_RF_Main 0076  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
          _getMain_All_Error_Status 06C1                              i1l3126 0409  
                            u201_25 055F                              _OSCCON 0099  
                            _TMR1IE 0488                              _TMR1IF 0088  
                            _SPBRGH 019C                              _IO_Set 061E  
                            _TRISC6 0476                              _TRISC7 0477  
                DelayTime_1us@count 0074      __size_of_CC2500_PowerOnInitial 0015  
     __end_of_CC2500_PowerOnInitial 05E0          __end_of_Mcu_Initialization 0666  
                            _Timer1 0059                   __end_of_UART_Main 065A  
                            _r_data 0063                              _s_data 0078  
                            _myMain 003E                    ?_Timeout_Counter 0070  
       __size_of_CC2500_InitPATable 001F                 CC2500_TxData@loop_e 0067  
  __end_of_CC2500_registers_address 022F             __end_of__initialization 0033  
                     ?_my_MainTimer 0070               __end_of_UART_Transmit 0581  
                    __pcstackCOMMON 0070                        __pidataBANK1 04C7  
                         ?_UART_ISR 0070                           ?_TMR1_ISR 0070  
                         ?_UART_Set 0070                       __end_of_getch 06A1  
                         ?_TMR1_Set 0070           ??_setControl_Lights_Table 0075  
                     __end_of_putch 068F          __end_of_set_TimeoutCleared 06AB  
                __size_of_getRxData 007F                   ?_CC2500_WriteByte 0070  
                ??_CC2500_WriteByte 0074                             ??_getch 0070  
                           ??_putch 0074                          __pbssBANK0 0020  
                        __pbssBANK1 00C0                           ?_Fosc_Set 0070  
                           ?_IO_Set 0070                      ??_my_MainTimer 0074  
                   __CFG_VCAPEN$OFF 0000                     _myUARTtoRF_Main 06BB  
                        __pnvCOMMON 0079                      DelayTime_1us@i 0064  
                    DelayTime_1us@j 0066         ??_myUARTtoRF_Initialization 0074  
                        __pmaintext 04A4                 _CC2500_WriteCommand 059C  
                        ??_UART_ISR 0070                          ??_TMR1_ISR 0070  
                        ??_UART_Set 0074                          ??_TMR1_Set 0074  
                        __pintentry 0004                  __size_of_setTxData 0071  
            __size_of_DelayTime_1us 0026                           UART_ISR@i 0071  
      __end_of_setRF_Initialization 0687                __size_of_setLog_Code 001B  
              ?_CC2500_WriteCommand 0070              __size_of_CC2500_RxData 005E  
            __size_of_CC2500_TxData 005A                             _RF_Data 0020  
                           _RF_Main 06BE     __end_of_setControl_Lights_Table 03B6  
                   setRF_Main@error 006B                          ??_Fosc_Set 0074  
                     ?_UART_Receive 0070        __end_of_CC2500_FrequencyCabr 067D  
                   __size_of_IO_Set 0013                   __end_of_getRxData 0179  
          _CC2500_registers_address 0200                             __ptext1 031E  
                           __ptext2 06BB                             __ptext3 06A1  
                           __ptext4 0640                             __ptext5 064D  
                           __ptext6 0565                             __ptext7 0687  
                           __ptext8 0426                             __ptext9 06BE  
         __size_of_CC2500_SIDLEMode 0004           _myUARTtoRF_Initialization 06A1  
                      __size_of_ISR 000F          ??_getMain_All_Error_Status 0074  
                        _setRF_Main 0037             ??_myMain_Initialization 0074  
             ??_CC2500_WriteCommand 0064          __end_of_CC2500_ClearRXFIFO 06BB  
        __end_of_CC2500_ClearTXFIFO 06B7                             _product 0079  
           __end_of_myUARTtoRF_Main 06BE                             clrloop0 0690  
              end_of_initialization 0033                   _CC2500_InitSetREG 0454  
                     _DelayTime_1us 047E                   __end_of_setTxData 01EA  
                    ??_UART_Receive 0075                             init_ram 0695  
                ?_CC2500_InitSetREG 0070                             initloop 0696  
             CC2500_ReadByte@loop_b 0075                   _CC2500_ReadStatus 04E7  
                    UART_Transmit@i 0064                  ?_CC2500_ReadStatus 0070  
          __size_of_CC2500_ReadByte 0017                       _CC2500_RxData 0266  
                     _CC2500_TxData 02C4                 ??_CC2500_InitSetREG 0067  
                      __pstringtext 0200                 ??_CC2500_ReadStatus 0064  
                         _UART_Main 064D             CC2500_InitSetREG@loop_c 006A  
                _Mcu_Initialization 065A            __size_of_CC2500_PowerRST 0041  
              __end_of_my_MainTimer 0372                    __CFG_FOSC$INTOSC 0000  
          __size_of_CC2500_WriteREG 0020           __end_of_CC2500_InitSetREG 047E  
               ?_Mcu_Initialization 0070                      ?_DelayTime_1us 0074  
         __end_of_CC2500_ReadStatus 0507                       ?_RF_RxDisable 0070  
   getMain_All_Error_Status@command 0070                      __end_of_IO_Set 0631  
              _setRF_Initialization 067D                      ?_CC2500_RxData 0070  
                    ?_CC2500_TxData 0070               _CC2500_PowerOnInitial 05CB  
              ??_Mcu_Initialization 0074                          ?_UART_Main 0070  
                 __size_of_UART_ISR 002F                   __size_of_TMR1_ISR 001F  
                 __size_of_UART_Set 0014                   __size_of_TMR1_Set 000C  
              _CC2500_FrequencyCabr 0672                         ?_setRF_Main 0070  
               start_initialization 0015                         __end_of_ISR 0013  
        __end_of_CC2500_InitPATable 0546                    ?_myUARTtoRF_Main 0070  
                    ??_RF_RxDisable 0076                  _set_TimeoutCleared 06A6  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0015  
             ?_setRF_Initialization 0070                   __size_of_Fosc_Set 0004  
         __size_of_CC2500_WriteByte 0015                 ?_set_TimeoutCleared 0070  
                         _Rx_Length 0060                           _Tx_Length 006C  
                       __pdataBANK1 00A0                   ??_CC2500_ReadByte 0074  
              __end_of_UART_Receive 0454    __end_of_getMain_All_Error_Status 06C4  
                  _CC2500_SIDLEMode 06AF               ?_CC2500_FrequencyCabr 0070  
                       __pbssCOMMON 0077                           ___latbits 0003  
            __size_of_UART_Transmit 001C                       __pcstackBANK0 0064  
                     __pcstackBANK1 00CC                ??_set_TimeoutCleared 0074  
                   ??_DelayTime_1us 0076          __size_of_CC2500_InitSetREG 002A  
                 ??_CC2500_PowerRST 0068                            ?_RF_Main 0070  
__size_of_myUARTtoRF_Initialization 0005          __size_of_CC2500_ReadStatus 0020  
                 ??_CC2500_WriteREG 0065               CC2500_WriteREG@w_addr 0066  
                   ??_CC2500_RxData 0066                     ??_CC2500_TxData 0066  
                         __pnvBANK0 006C                      getRxData@error 0064  
            ?_CC2500_PowerOnInitial 0070                 __size_of_setRF_Main 00C3  
          ?_setControl_Lights_Table 0070                           _getRxData 00FA  
             __size_of_my_MainTimer 0054                         ??_UART_Main 0076  
                     ??_setLog_Code 0074        CC2500_ReadStatus@status_addr 0065  
            CC2500_WriteByte@loop_a 0075                           _r_address 0062  
    __size_of_myMain_Initialization 000D        __end_of_CC2500_patable_vaule 0266  
     __end_of_myMain_Initialization 064D                      __size_of_getch 0006  
                    __size_of_putch 0008              ??_setRF_Initialization 0074  
 __end_of_myUARTtoRF_Initialization 06A6                   _CC2500_rfSettings 022F  
                         clear_ram0 068F            CC2500_InitPATable@loop_d 0069  
                      _my_MainTimer 031E                           _setTxData 0179  
                _CC2500_ClearRXFIFO 06B7                  _CC2500_ClearTXFIFO 06B3  
                     _UART_Transmit 0565                   ??_Timeout_Counter 0074  
                          _UART_ISR 03F7                          ?_getRxData 0070  
                          _TMR1_ISR 0546              CC2500_InitSetREG@temp1 0068  
            CC2500_InitSetREG@temp2 0069                            _UART_Set 060A  
                          _TMR1_Set 0666                 ?_CC2500_ClearRXFIFO 0070  
               ?_CC2500_ClearTXFIFO 0070                            _RF_Count 005C  
              __end_of_RF_RxDisable 0640         __end_of_CC2500_WriteCommand 05B4  
            ??_CC2500_FrequencyCabr 0076                    setRF_Main@loop_f 0069  
    getMain_All_Error_Status@status 0074                 __end_of_setLog_Code 059C  
              ??_CC2500_ClearRXFIFO 0076                ??_CC2500_ClearTXFIFO 0076  
         __end_of_CC2500_rfSettings 025E                    __size_of_RF_Main 0003  
                          _Fosc_Set 06AB   __size_of_getMain_All_Error_Status 0003  
         ?_getMain_All_Error_Status 0070                          ?_setTxData 0070  
                  _CC2500_WriteByte 05F5                      ?_UART_Transmit 0070  
                          _SwDetect 0061               __size_of_UART_Receive 002E  
                      ??_setRF_Main 0068                CC2500_WriteREG@value 0064  
                          __ptext10 0037                            __ptext11 00FA  
                          __ptext20 05B4                            __ptext12 0581  
                          __ptext21 06C4                            __ptext13 0372  
                          __ptext30 03B6                            __ptext22 067D  
                          __ptext14 0179                            __ptext31 0454  
                          __ptext23 065A                            __ptext15 06C1  
                          __ptext40 05E0                            __ptext32 0527  
                          __ptext24 060A                            __ptext16 0631  
                          __ptext41 05F5                            __ptext33 0507  
                          __ptext25 0666                            __ptext17 02C4  
                          __ptext34 0672                            __ptext26 061E  
                          __ptext18 0266                            __ptext43 03F7  
                          __ptext35 047E                            __ptext27 06AB  
                          __ptext19 04E7                            __ptext44 069B  
                          __ptext36 06B3                            __ptext28 05CB  
                          __ptext45 0546                            __ptext37 06B7  
                          __ptext29 06AF                            __ptext38 059C  
                          __ptext39 06A6                            __product 00A0  
                     __size_of_main 0023            __end_of_CC2500_SIDLEMode 06B3  
                      _UART_Receive 0426          CC2500_WriteCommand@command 0065  
              setRF_Main@Receive_OK 006A                     _CC2500_ReadByte 05B4  
                _CC2500_InitPATable 0527                  __end_of_setRF_Main 00FA  
       __size_of_Mcu_Initialization 000C                _CC2500_patable_vaule 025E  
                       ??_getRxData 0075                            main@argc 00CC  
                          main@argv 00CE                 ?_CC2500_InitPATable 0070  
                   _CC2500_PowerRST 03B6                         _setLog_Code 0581  
                         putch@byte 0074                     _CC2500_WriteREG 0507  
                     _Transceive_OK 03B1                         pic14e$flags 007E  
                          intlevel1 0000                ??_CC2500_InitPATable 0067  
           ??_CC2500_PowerOnInitial 0076                     ??_UART_Transmit 0075  
                       ??_setTxData 0074            __size_of_myUARTtoRF_Main 0003  
            CC2500_InitPATable@temp 0068               __size_of_RF_RxDisable 000F  
                 _RF_Initialization 06C4                  ?_RF_Initialization 0070  
                        _SPI0Buffer 0077                 ??_RF_Initialization 0075  
  __size_of_setControl_Lights_Table 0044         __size_of_set_TimeoutCleared 0005  
             __end_of_DelayTime_1us 04A4             __end_of_CC2500_ReadByte 05CB  
                   _Timeout_Counter 05E0                        _RF_RxDisable 0631  
         __end_of_RF_Initialization 06C7               __end_of_CC2500_RxData 02C4  
             __end_of_CC2500_TxData 031E             __end_of_CC2500_PowerRST 03F7  
