

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 28 16:41:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042  0000                     	;# 
  2043  0001                     	;# 
  2044  0002                     	;# 
  2045  0003                     	;# 
  2046  0004                     	;# 
  2047  0005                     	;# 
  2048  0006                     	;# 
  2049  0007                     	;# 
  2050  0008                     	;# 
  2051  0009                     	;# 
  2052  000A                     	;# 
  2053  000B                     	;# 
  2054  000C                     	;# 
  2055  000D                     	;# 
  2056  000E                     	;# 
  2057  0010                     	;# 
  2058  0011                     	;# 
  2059  0012                     	;# 
  2060  0015                     	;# 
  2061  0016                     	;# 
  2062  0016                     	;# 
  2063  0017                     	;# 
  2064  0018                     	;# 
  2065  0019                     	;# 
  2066  001A                     	;# 
  2067  001B                     	;# 
  2068  001C                     	;# 
  2069  008C                     	;# 
  2070  008D                     	;# 
  2071  008E                     	;# 
  2072  0090                     	;# 
  2073  0091                     	;# 
  2074  0092                     	;# 
  2075  0095                     	;# 
  2076  0096                     	;# 
  2077  0097                     	;# 
  2078  0099                     	;# 
  2079  009A                     	;# 
  2080  009B                     	;# 
  2081  009B                     	;# 
  2082  009C                     	;# 
  2083  009D                     	;# 
  2084  009E                     	;# 
  2085  010C                     	;# 
  2086  010D                     	;# 
  2087  010E                     	;# 
  2088  0116                     	;# 
  2089  0117                     	;# 
  2090  011D                     	;# 
  2091  018C                     	;# 
  2092  018D                     	;# 
  2093  018E                     	;# 
  2094  0191                     	;# 
  2095  0191                     	;# 
  2096  0192                     	;# 
  2097  0193                     	;# 
  2098  0193                     	;# 
  2099  0194                     	;# 
  2100  0195                     	;# 
  2101  0196                     	;# 
  2102  0197                     	;# 
  2103  0199                     	;# 
  2104  019A                     	;# 
  2105  019B                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019C                     	;# 
  2110  019C                     	;# 
  2111  019D                     	;# 
  2112  019E                     	;# 
  2113  019F                     	;# 
  2114  020D                     	;# 
  2115  0210                     	;# 
  2116  0211                     	;# 
  2117  0211                     	;# 
  2118  0212                     	;# 
  2119  0212                     	;# 
  2120  0213                     	;# 
  2121  0213                     	;# 
  2122  0214                     	;# 
  2123  0214                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0216                     	;# 
  2128  0216                     	;# 
  2129  0217                     	;# 
  2130  0217                     	;# 
  2131  0291                     	;# 
  2132  0291                     	;# 
  2133  0292                     	;# 
  2134  0293                     	;# 
  2135  0298                     	;# 
  2136  0298                     	;# 
  2137  0299                     	;# 
  2138  029A                     	;# 
  2139  0394                     	;# 
  2140  0395                     	;# 
  2141  0396                     	;# 
  2142  0FE4                     	;# 
  2143  0FE5                     	;# 
  2144  0FE6                     	;# 
  2145  0FE7                     	;# 
  2146  0FE8                     	;# 
  2147  0FE9                     	;# 
  2148  0FEA                     	;# 
  2149  0FEB                     	;# 
  2150  0FED                     	;# 
  2151  0FEE                     	;# 
  2152  0FEF                     	;# 
  2153                           
  2154                           	psect	idataBANK4
  2155  1FBF                     __pidataBANK4:	
  2156                           
  2157                           ;initializer for __product
  2158  1FBF  3463               	retlw	99
  2159  1FC0  3402               	retlw	2
  2160  1FC1  3400               	retlw	0
  2161  1FC2  3400               	retlw	0
  2162  1FC3  3400               	retlw	0
  2163  1FC4  3400               	retlw	0
  2164  1FC5  3400               	retlw	0
  2165  1FC6  3400               	retlw	0
  2166  1FC7  3400               	retlw	0
  2167  1FC8  3400               	retlw	0
  2168  1FC9  3400               	retlw	0
  2169  1FCA  3400               	retlw	0
  2170  1FCB  34FF               	retlw	255
  2171  1FCC  34FF               	retlw	255
  2172  1FCD  34FF               	retlw	255
  2173  1FCE  3400               	retlw	0
  2174  1FCF  3400               	retlw	0
  2175  1FD0  3400               	retlw	0
  2176  1FD1  3400               	retlw	0
  2177  1FD2  3400               	retlw	0
  2178  1FD3  3400               	retlw	0
  2179  1FD4  3400               	retlw	0
  2180  1FD5  3400               	retlw	0
  2181  1FD6  3400               	retlw	0
  2182  1FD7  3400               	retlw	0
  2183  1FD8  3400               	retlw	0
  2184  1FD9  3400               	retlw	0
  2185  1FDA  3400               	retlw	0
  2186  1FDB  3400               	retlw	0
  2187  1FDC  3400               	retlw	0
  2188  1FDD  3400               	retlw	0
  2189  1FDE  3400               	retlw	0
  2190                           
  2191                           	psect	stringtext
  2192  1000                     __pstringtext:	
  2193  1000                     _CC2500_registers_address:	
  2194  1000  3403               	retlw	3
  2195  1001  3416               	retlw	22
  2196  1002  3417               	retlw	23
  2197  1003  341E               	retlw	30
  2198  1004  341F               	retlw	31
  2199  1005  3420               	retlw	32
  2200  1006  342A               	retlw	42
  2201  1007  342B               	retlw	43
  2202  1008  340B               	retlw	11
  2203  1009  340C               	retlw	12
  2204  100A  340D               	retlw	13
  2205  100B  340E               	retlw	14
  2206  100C  340F               	retlw	15
  2207  100D  3410               	retlw	16
  2208  100E  3411               	retlw	17
  2209  100F  3412               	retlw	18
  2210  1010  3413               	retlw	19
  2211  1011  3414               	retlw	20
  2212  1012  340A               	retlw	10
  2213  1013  3415               	retlw	21
  2214  1014  3421               	retlw	33
  2215  1015  3422               	retlw	34
  2216  1016  3418               	retlw	24
  2217  1017  3419               	retlw	25
  2218  1018  341A               	retlw	26
  2219  1019  341B               	retlw	27
  2220  101A  341C               	retlw	28
  2221  101B  341D               	retlw	29
  2222  101C  3423               	retlw	35
  2223  101D  3424               	retlw	36
  2224  101E  3425               	retlw	37
  2225  101F  3426               	retlw	38
  2226  1020  3429               	retlw	41
  2227  1021  342C               	retlw	44
  2228  1022  342D               	retlw	45
  2229  1023  342E               	retlw	46
  2230  1024  3400               	retlw	0
  2231  1025  3401               	retlw	1
  2232  1026  3402               	retlw	2
  2233  1027  3407               	retlw	7
  2234  1028  3408               	retlw	8
  2235  1029  3409               	retlw	9
  2236  102A  3406               	retlw	6
  2237  102B  3404               	retlw	4
  2238  102C  3405               	retlw	5
  2239  102D  3427               	retlw	39
  2240  102E  3428               	retlw	40
  2241  102F                     __end_of_CC2500_registers_address:	
  2242  102F                     _CC2500_rfSettings:	
  2243  102F  3407               	retlw	7
  2244  1030  3407               	retlw	7
  2245  1031  3430               	retlw	48
  2246  1032  3487               	retlw	135
  2247  1033  346B               	retlw	107
  2248  1034  34F8               	retlw	248
  2249  1035  347F               	retlw	127
  2250  1036  343F               	retlw	63
  2251  1037  3409               	retlw	9
  2252  1038  3400               	retlw	0
  2253  1039  345C               	retlw	92
  2254  103A  34A7               	retlw	167
  2255  103B  3462               	retlw	98
  2256  103C  3486               	retlw	134
  2257  103D  3483               	retlw	131
  2258  103E  3403               	retlw	3
  2259  103F  3422               	retlw	34
  2260  1040  34F8               	retlw	248
  2261  1041  3400               	retlw	0
  2262  1042  3444               	retlw	68
  2263  1043  34B6               	retlw	182
  2264  1044  3410               	retlw	16
  2265  1045  3418               	retlw	24
  2266  1046  341D               	retlw	29
  2267  1047  341C               	retlw	28
  2268  1048  34C7               	retlw	199
  2269  1049  3400               	retlw	0
  2270  104A  34B2               	retlw	178
  2271  104B  34EA               	retlw	234
  2272  104C  340A               	retlw	10
  2273  104D  3400               	retlw	0
  2274  104E  3411               	retlw	17
  2275  104F  3459               	retlw	89
  2276  1050  3488               	retlw	136
  2277  1051  3431               	retlw	49
  2278  1052  340B               	retlw	11
  2279  1053  342F               	retlw	47
  2280  1054  342E               	retlw	46
  2281  1055  3406               	retlw	6
  2282  1056  3404               	retlw	4
  2283  1057  3405               	retlw	5
  2284  1058  3400               	retlw	0
  2285  1059  3430               	retlw	48
  2286  105A  34D3               	retlw	211
  2287  105B  3491               	retlw	145
  2288  105C  3441               	retlw	65
  2289  105D  3400               	retlw	0
  2290  105E                     __end_of_CC2500_rfSettings:	
  2291  105E                     _CC2500_patable_vaule:	
  2292  105E  34FE               	retlw	254
  2293  105F  34FE               	retlw	254
  2294  1060  34FE               	retlw	254
  2295  1061  34FE               	retlw	254
  2296  1062  34FE               	retlw	254
  2297  1063  34FE               	retlw	254
  2298  1064  34FE               	retlw	254
  2299  1065  34FE               	retlw	254
  2300  1066                     __end_of_CC2500_patable_vaule:	
  2301                           
  2302                           	psect	nvBANK0
  2303  006E                     __pnvBANK0:	
  2304  006E                     _product:	
  2305  006E                     	ds	1
  2306  000C                     _PORTA	set	12
  2307  000D                     _PORTB	set	13
  2308  000E                     _PORTC	set	14
  2309  0018                     _T1CON	set	24
  2310  0017                     _TMR1H	set	23
  2311  0016                     _TMR1L	set	22
  2312  005F                     _GIE	set	95
  2313  005B                     _IOCIE	set	91
  2314  0058                     _IOCIF	set	88
  2315  005E                     _PEIE	set	94
  2316  0060                     _RA0	set	96
  2317  0064                     _RA4	set	100
  2318  0066                     _RA6	set	102
  2319  0067                     _RA7	set	103
  2320  0068                     _RB0	set	104
  2321  006B                     _RB3	set	107
  2322  006C                     _RB4	set	108
  2323  006D                     _RB5	set	109
  2324  0070                     _RC0	set	112
  2325  0071                     _RC1	set	113
  2326  0073                     _RC3	set	115
  2327  0074                     _RC4	set	116
  2328  0075                     _RC5	set	117
  2329  0088                     _TMR1IF	set	136
  2330  009D                     _ADCON0	set	157
  2331  009E                     _ADCON1	set	158
  2332  009C                     _ADRESH	set	156
  2333  009B                     _ADRESL	set	155
  2334  0099                     _OSCCON	set	153
  2335  008C                     _TRISA	set	140
  2336  008D                     _TRISB	set	141
  2337  008E                     _TRISC	set	142
  2338  0097                     _WDTCON	set	151
  2339  04E9                     _GO_nDONE	set	1257
  2340  0488                     _TMR1IE	set	1160
  2341  0117                     _FVRCON	set	279
  2342  010C                     _LATA	set	268
  2343  010D                     _LATB	set	269
  2344  010E                     _LATC	set	270
  2345  018C                     _ANSELA	set	396
  2346  018D                     _ANSELB	set	397
  2347  018E                     _ANSELC	set	398
  2348  0192                     _PMADRH	set	402
  2349  0191                     _PMADRL	set	401
  2350  0196                     _PMCON2	set	406
  2351  0194                     _PMDATH	set	404
  2352  0193                     _PMDATL	set	403
  2353  0CAE                     _CFGS	set	3246
  2354  0CAC                     _FREE	set	3244
  2355  0CAD                     _LWLO	set	3245
  2356  0CA8                     _RD	set	3240
  2357  0CA9                     _WR	set	3241
  2358  0CAA                     _WREN	set	3242
  2359  1069                     _WPUB1	set	4201
  2360  106A                     _WPUB2	set	4202
  2361  0396                     _IOCBF	set	918
  2362  0395                     _IOCBN	set	917
  2363  0394                     _IOCBP	set	916
  2364  1CB2                     _IOCBF2	set	7346
  2365                           
  2366                           ; #config settings
  2367  0000                     
  2368                           	psect	cinit
  2369  0015                     start_initialization:	
  2370  0015                     __initialization:	
  2371                           
  2372                           ; Clear objects allocated to BITCOMMON
  2373  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2374                           
  2375                           ; Clear objects allocated to COMMON
  2376  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2377  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2378  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2379  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2380  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2381                           
  2382                           ; Clear objects allocated to BANK0
  2383  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  001C  30A0               	movlw	low __pbssBANK1
  2387  001D  0084               	movwf	4
  2388  001E  3000               	movlw	high __pbssBANK1
  2389  001F  0085               	movwf	5
  2390  0020  3048               	movlw	72
  2391  0021  319C  2447  3180   	fcall	clear_ram0
  2392                           
  2393                           ; Clear objects allocated to BANK2
  2394  0024  3020               	movlw	low __pbssBANK2
  2395  0025  0084               	movwf	4
  2396  0026  3001               	movlw	high __pbssBANK2
  2397  0027  0085               	movwf	5
  2398  0028  3050               	movlw	80
  2399  0029  319C  2447  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK3
  2402  002C  30A0               	movlw	low __pbssBANK3
  2403  002D  0084               	movwf	4
  2404  002E  3001               	movlw	high __pbssBANK3
  2405  002F  0085               	movwf	5
  2406  0030  3046               	movlw	70
  2407  0031  319C  2447  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Initialize objects allocated to BANK4
  2410  0034  30BF               	movlw	low __pidataBANK4
  2411  0035  0084               	movwf	4
  2412  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2413  0037  0085               	movwf	5
  2414  0038  3020               	movlw	low __pdataBANK4
  2415  0039  0086               	movwf	6
  2416  003A  3002               	movlw	high __pdataBANK4
  2417  003B  0087               	movwf	7
  2418  003C  3020               	movlw	32
  2419  003D  319C  2441         	fcall	init_ram
  2420  003F                     end_of_initialization:	
  2421                           ;End of C runtime variable initialization code
  2422                           
  2423  003F                     __end_of__initialization:	
  2424  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2425  0040  0020               	movlb	0
  2426  0041  3196  2E97         	ljmp	_main	;jump to C main() function
  2427                           
  2428                           	psect	bitbssCOMMON
  2429  03E8                     __pbitbssCOMMON:	
  2430  03E8                     _Receive_OK:	
  2431  03E8                     	ds	1
  2432  03E9                     _Transceive_OK:	
  2433  03E9                     	ds	1
  2434                           
  2435                           	psect	bssCOMMON
  2436  0078                     __pbssCOMMON:	
  2437  0078                     _DelayOff:	
  2438  0078                     	ds	1
  2439  0079                     _DimmerLightsIntr:	
  2440  0079                     	ds	1
  2441  007A                     _LED:	
  2442  007A                     	ds	1
  2443  007B                     _SPI0Buffer:	
  2444  007B                     	ds	1
  2445  007C                     _Sw:	
  2446  007C                     	ds	1
  2447                           
  2448                           	psect	bssBANK0
  2449  006F                     __pbssBANK0:	
  2450  006F                     _DimmerLights:	
  2451  006F                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _myMain:	
  2456  00A0                     	ds	15
  2457  00AF                     _Buz1:	
  2458  00AF                     	ds	12
  2459  00BB                     _RF1:	
  2460  00BB                     	ds	12
  2461  00C7                     _Timer1:	
  2462  00C7                     	ds	3
  2463  00CA                     _WDT:	
  2464  00CA                     	ds	2
  2465  00CC                     _CRC:	
  2466  00CC                     	ds	1
  2467  00CD                     _DimmerLights11:	
  2468  00CD                     	ds	1
  2469  00CE                     _DimmerLightsIntrIOC:	
  2470  00CE                     	ds	1
  2471  00CF                     _RSSI:	
  2472  00CF                     	ds	1
  2473  00D0                     _Rx_Length:	
  2474  00D0                     	ds	1
  2475  00D1                     _SwDetect:	
  2476  00D1                     	ds	1
  2477  00D2                     _Tx_Length:	
  2478  00D2                     	ds	1
  2479  00D3                     _r_address:	
  2480  00D3                     	ds	1
  2481  00D4                     _r_data:	
  2482  00D4                     	ds	1
  2483  00D5                     _s_data:	
  2484  00D5                     	ds	1
  2485  00D6                     _Temp:	
  2486  00D6                     	ds	18
  2487                           
  2488                           	psect	bssBANK2
  2489  0120                     __pbssBANK2:	
  2490  0120                     _RF_Data:	
  2491  0120                     	ds	30
  2492  013E                     _Dimmer:	
  2493  013E                     	ds	3
  2494  0141                     _RF_Count:	
  2495  0141                     	ds	2
  2496  0143                     _Load:	
  2497  0143                     	ds	45
  2498                           
  2499                           	psect	bssBANK3
  2500  01A0                     __pbssBANK3:	
  2501  01A0                     _Memory:	
  2502  01A0                     	ds	37
  2503  01C5                     _DimmerLights1:	
  2504  01C5                     	ds	15
  2505  01D4                     _Sw1:	
  2506  01D4                     	ds	9
  2507  01DD                     _DlySw1:	
  2508  01DD                     	ds	5
  2509  01E2                     _VarErrLED:	
  2510  01E2                     	ds	4
  2511                           
  2512                           	psect	dataBANK4
  2513  0220                     __pdataBANK4:	
  2514  0220                     __product:	
  2515  0220                     	ds	32
  2516                           
  2517                           	psect	clrtext
  2518  1C47                     clear_ram0:	
  2519                           ;	Called with FSR0 containing the base address, and
  2520                           ;	WREG with the size to clear
  2521                           
  2522  1C47  0064               	clrwdt	;clear the watchdog before getting into this loop
  2523  1C48                     clrloop0:	
  2524  1C48  0180               	clrf	0	;clear RAM location pointed to by FSR
  2525  1C49  3101               	addfsr 0,1
  2526  1C4A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2527  1C4B  2C48               	goto	clrloop0	;have we reached the end yet?
  2528  1C4C  3400               	retlw	0	;all done for this memory range, return
  2529                           
  2530                           	psect	inittext
  2531  1C41                     init_ram:	
  2532  1C41  00FE               	movwf	126
  2533  1C42                     initloop:	
  2534  1C42  0012               	moviw fsr0++
  2535  1C43  001E               	movwi fsr1++
  2536  1C44  0BFE               	decfsz	126,f
  2537  1C45  2C42               	goto	initloop
  2538  1C46  3400               	retlw	0
  2539                           
  2540                           	psect	cstackBANK1
  2541  00E8                     __pcstackBANK1:	
  2542  00E8                     setRF_Main@loop_f:	
  2543                           
  2544                           ; 1 bytes @ 0x0
  2545  00E8                     	ds	1
  2546  00E9                     setRF_Main@Receive_OK:	
  2547                           
  2548                           ; 1 bytes @ 0x1
  2549  00E9                     	ds	1
  2550  00EA                     setRF_Main@error:	
  2551                           
  2552                           ; 1 bytes @ 0x2
  2553  00EA                     	ds	1
  2554  00EB                     ?_main:	
  2555  00EB                     main@argc:	
  2556                           ; 2 bytes @ 0x3
  2557                           
  2558                           
  2559                           ; 2 bytes @ 0x3
  2560  00EB                     	ds	2
  2561  00ED                     main@argv:	
  2562                           
  2563                           ; 2 bytes @ 0x5
  2564  00ED                     	ds	2
  2565                           
  2566                           	psect	cstackCOMMON
  2567  0070                     __pcstackCOMMON:	
  2568  0070                     ?_Timeout_Counter:	
  2569  0070                     ?_set_TimeoutCleared:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_CC2500_WriteByte:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_WriteCommand:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_CC2500_ReadStatus:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_ReadByte:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_PowerRST:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_InitSetREG:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_InitPATable:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_ClearTXFIFO:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ClearRXFIFO:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_FrequencyCabr:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_SIDLEMode:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_DlyOff_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DlyOff_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setDimmerLights_ErrorClose:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setDimmerLights_Initialization:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_Dimmer_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setDimmerLights_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setDimmerLights_Line:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setTxData:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setLED_Initialization:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setLED_Main:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Fosc_Set:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_IO_Set:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_TMR1_Set:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_ADC_Set:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_IOC_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_WDT_Set:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_IOC_ISR:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_TMR1_ISR:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Flash_Memory_Write:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Modify:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_WDT_Clearing:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_myMain_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Temp_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Load_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Switch_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_RF_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_getLoad_AD:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_getTemp_AD:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_my_MainTimer:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Temp_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Load_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Switch_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_RF_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setLoad_AH_AL_Restore:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setTemp_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setTemp_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setRF_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setRF_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_getRxData:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setLog_Code:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setControl_Lights_Table:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setRFSW_Control:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRFSW_AdjControl:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_DimmerValue:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setSw_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setSw_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Buzzer_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Buzzer_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_CC2500_TxData:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_CC2500_RxData:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_PowerOnInitial:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_DelayOffPointSelect:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_DelayOff_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOff_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DimmerIntrIOCPointSelect:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ??_DimmerIntrIOCPointSelect:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_DimmerIntrPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ??_DimmerIntrPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setDimmerLights_IntrControl:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DimmerLightsPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DimmerLights_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLights_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setDimmerLights_SwOn:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_SwOff:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_AdjControl:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_AdjRF:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_LedPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_LED_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LED_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_Mcu_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_ISR:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerReClock:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_Flash_Memory_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_Flash_Memory_Main:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Unlock:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Erasing:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setMemory_Modify:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setMemory_LoopSave:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_WDT_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMain_Exception:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setRF_Learn:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_TouchPower:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_SwPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_DelayTimejudge:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_getMain_All_Error_Status:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     ?_getLoad_OK:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_LightsStatus:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_setPercentValue:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getPercentValue:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Read:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_getRF_KeyStatus:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_getSw_KeyStatus:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getDelayOff_GO:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getDimmerLights_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getAll_DimmerLights_AdjGO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmer_LoadOK:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_Line:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_Lights_Count:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getMain_LoadOK:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     getSw_KeyStatus@sw:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x0
  2910  0070                     	ds	1
  2911  0071                     DimmerIntrIOCPointSelect@lights:	
  2912  0071                     DimmerIntrPointSelect@lights:	
  2913                           ; 1 bytes @ 0x1
  2914                           
  2915                           
  2916                           ; 1 bytes @ 0x1
  2917  0071                     	ds	1
  2918  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2919  0072                     ??_setDimmerLights_IntrControl:	
  2920                           ; 0 bytes @ 0x2
  2921                           
  2922  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2923                           ; 0 bytes @ 0x2
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x2
  2927  0072                     	ds	1
  2928  0073                     ??_IOC_ISR:	
  2929  0073                     ??_setDimmerReClock:	
  2930                           ; 0 bytes @ 0x3
  2931                           
  2932                           
  2933                           ; 0 bytes @ 0x3
  2934  0073                     	ds	3
  2935  0076                     setDimmerLights_IntrControl@lights:	
  2936                           
  2937                           ; 1 bytes @ 0x6
  2938  0076                     	ds	1
  2939  0077                     ??_TMR1_ISR:	
  2940  0077                     ??_ISR:	
  2941                           ; 0 bytes @ 0x7
  2942                           
  2943                           
  2944                           ; 0 bytes @ 0x7
  2945  0077                     	ds	1
  2946                           
  2947                           	psect	cstackBANK0
  2948  0020                     __pcstackBANK0:	
  2949  0020                     ??_Timeout_Counter:	
  2950  0020                     ??_set_TimeoutCleared:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_CC2500_WriteByte:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_CC2500_ReadByte:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ?_DelayTime_1us:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_Dimmer_Initialization:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_getMain_All_Error_Status:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_getLoad_OK:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_setDimmerLights_Line:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ?_setRF_DimmerLights:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setTxData:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_Fosc_Set:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_IO_Set:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_TMR1_Set:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_ADC_Set:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_IOC_Set:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_WDT_Set:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_Flash_Memory_Read:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ?_setMemory_Data:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Flash_Memory_Write:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_WDT_Clearing:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_myMain_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_Temp_Initialization:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_setLoad_AH_AL_Restore:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_setTemp_Initialization:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setRF_Initialization:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getRF_KeyStatus:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_getSw_KeyStatus:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_Buzzer_Initialization:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_Buzzer_Main:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_DelayOffPointSelect:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_DimmerLightsPointSelect:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getAll_DimmerLights_AdjGO:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_getDimmer_LoadOK:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getDimmerLights_Line:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_LedPointSelect:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Flash_Memory_Unlock:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Flash_Memory_Erasing:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_setMemory_Modify:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_setMemory_LoopSave:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_WDT_Main:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getMain_Lights_Count:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_setRF_Learn:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_TouchPower:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_SwPointSelect:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ?___bmul:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ?_getBuz_GO:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0020                     ?_getAD:	
  3089                           ; 2 bytes @ 0x0
  3090                           
  3091  0020                     ?___awdiv:	
  3092                           ; 2 bytes @ 0x0
  3093                           
  3094  0020                     ?___ftpack:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3098                           ; 3 bytes @ 0x0
  3099                           
  3100  0020                     getDimmer_LoadOK@status:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0020                     setDimmerLights_Line@lights:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0020                     getDimmerLights_Line@line:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0020                     getAD@adcon1:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     setMemory_Data@data:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0020                     getMain_Lights_Count@count:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     getLoad_OK@ok:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0020                     setRF_DimmerLights@on:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0020                     ___bmul@multiplicand:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     DelayTime_1us@count:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     ___awdiv@divisor:	
  3131                           ; 2 bytes @ 0x0
  3132                           
  3133  0020                     ___ftpack@arg:	
  3134                           ; 2 bytes @ 0x0
  3135                           
  3136                           
  3137                           ; 3 bytes @ 0x0
  3138  0020                     	ds	1
  3139  0021                     ??_setRF_DimmerLights:	
  3140  0021                     ??_setMemory_Data:	
  3141                           ; 0 bytes @ 0x1
  3142                           
  3143  0021                     ??_RF_Initialization:	
  3144                           ; 0 bytes @ 0x1
  3145                           
  3146  0021                     ??_Mcu_Initialization:	
  3147                           ; 0 bytes @ 0x1
  3148                           
  3149  0021                     ??_getMain_LoadOK:	
  3150                           ; 0 bytes @ 0x1
  3151                           
  3152  0021                     ??___bmul:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     CC2500_WriteByte@loop_a:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     CC2500_ReadByte@loop_b:	
  3159                           ; 1 bytes @ 0x1
  3160                           
  3161  0021                     DelayOffPointSelect@sw:	
  3162                           ; 1 bytes @ 0x1
  3163                           
  3164  0021                     DimmerLightsPointSelect@lights:	
  3165                           ; 1 bytes @ 0x1
  3166                           
  3167  0021                     LedPointSelect@led:	
  3168                           ; 1 bytes @ 0x1
  3169                           
  3170  0021                     Flash_Memory_Read@i:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  0021                     Flash_Memory_Write@i:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0021                     setMemory_Modify@command:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     setMemory_LoopSave@command:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     getMain_Lights_Count@status2:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     setLoad_AH_AL_Restore@i:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     setRF_Learn@command:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     getRF_KeyStatus@key:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     SwPointSelect@sw:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     getSw_KeyStatus@status:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     _getMain_All_Error_Status$3747:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203                           
  3204                           ; 2 bytes @ 0x1
  3205  0021                     	ds	1
  3206  0022                     ??_CC2500_WriteCommand:	
  3207  0022                     ??_CC2500_ReadStatus:	
  3208                           ; 0 bytes @ 0x2
  3209                           
  3210  0022                     ??_DelayTime_1us:	
  3211                           ; 0 bytes @ 0x2
  3212                           
  3213  0022                     ?_CC2500_WriteREG:	
  3214                           ; 0 bytes @ 0x2
  3215                           
  3216  0022                     ??_DlyOff_Initialization:	
  3217                           ; 0 bytes @ 0x2
  3218                           
  3219  0022                     ??_setDimmerLights_Initialization:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ?_setDimmerLights_Trigger:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ?_setDimmerLights_TriggerAdj:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ?_setLED:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     ??_setLED_Main:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ??_Load_Initialization:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ??_getBuz_GO:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ??_getDelayOff_GO:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_getDimmerLights_Status:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     CC2500_WriteREG@value:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     DlyOff_Initialization@sw:	
  3250                           ; 1 bytes @ 0x2
  3251                           
  3252  0022                     getDelayOff_GO@sw:	
  3253                           ; 1 bytes @ 0x2
  3254                           
  3255  0022                     getDimmerLights_Status@lights:	
  3256                           ; 1 bytes @ 0x2
  3257                           
  3258  0022                     setDimmerLights_Trigger@command:	
  3259                           ; 1 bytes @ 0x2
  3260                           
  3261  0022                     setDimmerLights_TriggerAdj@command:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     setLED@command:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     Flash_Memory_Read@address:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     setMemory_Data@address:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     getMain_Lights_Count@status3:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     getMain_LoadOK@ok:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     _getRF_KeyStatus$5487:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     _getSw_KeyStatus$6543:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     ___bmul@product:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     DelayTime_1us@i:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     ___awdiv@dividend:	
  3292                           ; 2 bytes @ 0x2
  3293                           
  3294                           
  3295                           ; 2 bytes @ 0x2
  3296  0022                     	ds	1
  3297  0023                     ??_CC2500_WriteREG:	
  3298  0023                     ??_setDimmerLights_Trigger:	
  3299                           ; 0 bytes @ 0x3
  3300                           
  3301  0023                     ??_setDimmerLights_TriggerAdj:	
  3302                           ; 0 bytes @ 0x3
  3303                           
  3304  0023                     ??_setLED:	
  3305                           ; 0 bytes @ 0x3
  3306                           
  3307  0023                     ??_DelayOff_Initialization:	
  3308                           ; 0 bytes @ 0x3
  3309                           
  3310  0023                     ??_getAD:	
  3311                           ; 0 bytes @ 0x3
  3312                           
  3313  0023                     CC2500_WriteCommand@command:	
  3314                           ; 0 bytes @ 0x3
  3315                           
  3316  0023                     CC2500_ReadStatus@status_addr:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0023                     getDelayOff_GO@go:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0023                     setDimmerLights_Initialization@lights:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0023                     getDimmerLights_Status@status:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0023                     setLED@led:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0023                     getAD@adcon0:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     Flash_Memory_Read@ret:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     getMain_Lights_Count@status1:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     setRF_DimmerLights@status:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     ___bmul@multiplier:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     ___ftpack@exp:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     _getMain_All_Error_Status$3756:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352                           
  3353                           ; 2 bytes @ 0x3
  3354  0023                     	ds	1
  3355  0024                     ??_CC2500_ClearTXFIFO:	
  3356  0024                     ??_CC2500_ClearRXFIFO:	
  3357                           ; 0 bytes @ 0x4
  3358                           
  3359  0024                     ??_CC2500_SIDLEMode:	
  3360                           ; 0 bytes @ 0x4
  3361                           
  3362  0024                     ??_DelayTimejudge:	
  3363                           ; 0 bytes @ 0x4
  3364                           
  3365  0024                     ??_getMain_LightsStatus:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0024                     ??_setLED_Initialization:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0024                     ??_Flash_Memory_Modify:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_getLoad_AD:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_getTemp_AD:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_setSw_Initialization:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_CC2500_TxData:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_CC2500_RxData:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_DimmerLights_Initialization:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??___awdiv:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     CC2500_WriteREG@w_addr:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     setDimmerLights_Trigger@lights:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0024                     setDimmerLights_TriggerAdj@lights:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0024                     setLED_Initialization@led:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0024                     setLED_Main@led:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0024                     setRF_DimmerLights@lights:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0024                     setSw_Initialization@sw:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0024                     ___ftpack@sign:	
  3417                           ; 1 bytes @ 0x4
  3418                           
  3419  0024                     getBuz_GO@i:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     DelayTime_1us@j:	
  3423                           ; 2 bytes @ 0x4
  3424                           
  3425                           
  3426                           ; 2 bytes @ 0x4
  3427  0024                     	ds	1
  3428  0025                     ??_CC2500_InitSetREG:	
  3429  0025                     ??_CC2500_InitPATable:	
  3430                           ; 0 bytes @ 0x5
  3431                           
  3432  0025                     ??_Switch_Initialization:	
  3433                           ; 0 bytes @ 0x5
  3434                           
  3435  0025                     ??___ftpack:	
  3436                           ; 0 bytes @ 0x5
  3437                           
  3438  0025                     ??_setDimmerLights_AdjControl:	
  3439                           ; 0 bytes @ 0x5
  3440                           
  3441  0025                     ??_LED_Initialization:	
  3442                           ; 0 bytes @ 0x5
  3443                           
  3444  0025                     ??_LED_Main:	
  3445                           ; 0 bytes @ 0x5
  3446                           
  3447  0025                     CC2500_TxData@loop_e:	
  3448                           ; 0 bytes @ 0x5
  3449                           
  3450  0025                     CC2500_RxData@loop_f:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453  0025                     Flash_Memory_Modify@i:	
  3454                           ; 1 bytes @ 0x5
  3455                           
  3456  0025                     getMain_LightsStatus@count:	
  3457                           ; 1 bytes @ 0x5
  3458                           
  3459  0025                     getMain_All_Error_Status@command:	
  3460                           ; 1 bytes @ 0x5
  3461                           
  3462  0025                     getTemp_AD@channel:	
  3463                           ; 1 bytes @ 0x5
  3464                           
  3465  0025                     ___awdiv@counter:	
  3466                           ; 1 bytes @ 0x5
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x5
  3470  0025                     	ds	1
  3471  0026                     ??_CC2500_PowerRST:	
  3472  0026                     ??_CC2500_FrequencyCabr:	
  3473                           ; 0 bytes @ 0x6
  3474                           
  3475  0026                     CC2500_InitSetREG@temp1:	
  3476                           ; 0 bytes @ 0x6
  3477                           
  3478  0026                     CC2500_InitPATable@temp:	
  3479                           ; 1 bytes @ 0x6
  3480                           
  3481  0026                     DelayTimejudge@i:	
  3482                           ; 1 bytes @ 0x6
  3483                           
  3484  0026                     setDimmerLights_AdjControl@idle:	
  3485                           ; 1 bytes @ 0x6
  3486                           
  3487  0026                     getMain_All_Error_Status@status:	
  3488                           ; 1 bytes @ 0x6
  3489                           
  3490  0026                     getLoad_AD@channel:	
  3491                           ; 1 bytes @ 0x6
  3492                           
  3493  0026                     ___awdiv@sign:	
  3494                           ; 1 bytes @ 0x6
  3495                           
  3496  0026                     getMain_LightsStatus@i:	
  3497                           ; 1 bytes @ 0x6
  3498                           
  3499                           
  3500                           ; 2 bytes @ 0x6
  3501  0026                     	ds	1
  3502  0027                     CC2500_InitSetREG@temp2:	
  3503  0027                     CC2500_InitPATable@loop_d:	
  3504                           ; 1 bytes @ 0x7
  3505                           
  3506  0027                     DelayTimejudge@j:	
  3507                           ; 1 bytes @ 0x7
  3508                           
  3509  0027                     _setDimmerLights_AdjControl$2408:	
  3510                           ; 1 bytes @ 0x7
  3511                           
  3512  0027                     getLoad_AD@k:	
  3513                           ; 1 bytes @ 0x7
  3514                           
  3515  0027                     ___awdiv@quotient:	
  3516                           ; 1 bytes @ 0x7
  3517                           
  3518                           
  3519                           ; 2 bytes @ 0x7
  3520  0027                     	ds	1
  3521  0028                     ?___awtoft:	
  3522  0028                     CC2500_InitSetREG@loop_c:	
  3523                           ; 3 bytes @ 0x8
  3524                           
  3525  0028                     DelayTimejudge@k:	
  3526                           ; 1 bytes @ 0x8
  3527                           
  3528  0028                     setDimmerLights_AdjControl@sw:	
  3529                           ; 1 bytes @ 0x8
  3530                           
  3531  0028                     getMain_LightsStatus@status:	
  3532                           ; 1 bytes @ 0x8
  3533                           
  3534  0028                     getLoad_AD@j:	
  3535                           ; 1 bytes @ 0x8
  3536                           
  3537  0028                     ___awtoft@c:	
  3538                           ; 1 bytes @ 0x8
  3539                           
  3540                           
  3541                           ; 2 bytes @ 0x8
  3542  0028                     	ds	1
  3543  0029                     ??_Load_Main:	
  3544  0029                     ?_setBuz:	
  3545                           ; 0 bytes @ 0x9
  3546                           
  3547  0029                     ??_CC2500_PowerOnInitial:	
  3548                           ; 0 bytes @ 0x9
  3549                           
  3550  0029                     ??_Flash_Memory_Main:	
  3551                           ; 0 bytes @ 0x9
  3552                           
  3553  0029                     DelayTimejudge@value:	
  3554                           ; 0 bytes @ 0x9
  3555                           
  3556  0029                     getLoad_AD@i:	
  3557                           ; 1 bytes @ 0x9
  3558                           
  3559  0029                     setBuz@time:	
  3560                           ; 1 bytes @ 0x9
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x9
  3564  0029                     	ds	1
  3565  002A                     ?_setDelayOff_GO:	
  3566  002A                     setDelayOff_GO@command:	
  3567                           ; 0 bytes @ 0xA
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0xA
  3571  002A                     	ds	1
  3572  002B                     ??_setBuz:	
  3573  002B                     ??___awtoft:	
  3574                           ; 0 bytes @ 0xB
  3575                           
  3576  002B                     setDelayOff_GO@value:	
  3577                           ; 0 bytes @ 0xB
  3578                           
  3579  002B                     Load_Main@j:	
  3580                           ; 1 bytes @ 0xB
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0xB
  3584  002B                     	ds	1
  3585  002C                     ??_setDelayOff_GO:	
  3586  002C                     setBuz@count:	
  3587                           ; 0 bytes @ 0xC
  3588                           
  3589  002C                     Load_Main@adjgo:	
  3590                           ; 1 bytes @ 0xC
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0xC
  3594  002C                     	ds	1
  3595  002D                     ??_my_MainTimer:	
  3596  002D                     ??_setTemp_Main:	
  3597                           ; 0 bytes @ 0xD
  3598                           
  3599  002D                     ??_setLog_Code:	
  3600                           ; 0 bytes @ 0xD
  3601                           
  3602  002D                     ??_setDimmerLights_SwOn:	
  3603                           ; 0 bytes @ 0xD
  3604                           
  3605  002D                     _Load_Main$4106:	
  3606                           ; 0 bytes @ 0xD
  3607                           
  3608  002D                     ___awtoft@sign:	
  3609                           ; 1 bytes @ 0xD
  3610                           
  3611                           
  3612                           ; 1 bytes @ 0xD
  3613  002D                     	ds	1
  3614  002E                     ?___ftdiv:	
  3615  002E                     ?___ftmul:	
  3616                           ; 3 bytes @ 0xE
  3617                           
  3618  002E                     setDelayOff_GO@sw:	
  3619                           ; 3 bytes @ 0xE
  3620                           
  3621  002E                     setDimmerLights_SwOn@idle:	
  3622                           ; 1 bytes @ 0xE
  3623                           
  3624  002E                     Load_Main@error:	
  3625                           ; 1 bytes @ 0xE
  3626                           
  3627  002E                     ___ftdiv@f2:	
  3628                           ; 1 bytes @ 0xE
  3629                           
  3630  002E                     ___ftmul@f1:	
  3631                           ; 3 bytes @ 0xE
  3632                           
  3633                           
  3634                           ; 3 bytes @ 0xE
  3635  002E                     	ds	1
  3636  002F                     ??_Temp_Main:	
  3637  002F                     ??_setDimmerLights_SwOff:	
  3638                           ; 0 bytes @ 0xF
  3639                           
  3640  002F                     setDimmerLights_SwOn@sw:	
  3641                           ; 0 bytes @ 0xF
  3642                           
  3643  002F                     setDimmerLights_SwOff@command:	
  3644                           ; 1 bytes @ 0xF
  3645                           
  3646  002F                     Load_Main@i:	
  3647                           ; 1 bytes @ 0xF
  3648                           
  3649                           
  3650                           ; 1 bytes @ 0xF
  3651  002F                     	ds	1
  3652  0030                     setDimmerLights_SwOff@sw:	
  3653                           
  3654                           ; 1 bytes @ 0x10
  3655  0030                     	ds	1
  3656  0031                     ??_setDimmerLights_ErrorClose:	
  3657  0031                     ??_setRFSW_Control:	
  3658                           ; 0 bytes @ 0x11
  3659                           
  3660  0031                     ??_setSw_Main:	
  3661                           ; 0 bytes @ 0x11
  3662                           
  3663  0031                     ___ftdiv@f1:	
  3664                           ; 0 bytes @ 0x11
  3665                           
  3666  0031                     ___ftmul@f2:	
  3667                           ; 3 bytes @ 0x11
  3668                           
  3669                           
  3670                           ; 3 bytes @ 0x11
  3671  0031                     	ds	1
  3672  0032                     setDimmerLights_ErrorClose@count:	
  3673  0032                     setRFSW_Control@status:	
  3674                           ; 1 bytes @ 0x12
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0x12
  3678  0032                     	ds	1
  3679  0033                     setDimmerLights_ErrorClose@lights:	
  3680  0033                     setRFSW_Control@sw:	
  3681                           ; 1 bytes @ 0x13
  3682                           
  3683  0033                     setSw_Main@sw:	
  3684                           ; 1 bytes @ 0x13
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0x13
  3688  0033                     	ds	1
  3689  0034                     ??___ftdiv:	
  3690  0034                     ??___ftmul:	
  3691                           ; 0 bytes @ 0x14
  3692                           
  3693  0034                     setDimmerLights_ErrorClose@i:	
  3694                           ; 0 bytes @ 0x14
  3695                           
  3696                           
  3697                           ; 2 bytes @ 0x14
  3698  0034                     	ds	2
  3699  0036                     ??_DlyOff_Main:	
  3700  0036                     ??_setMain_Exception:	
  3701                           ; 0 bytes @ 0x16
  3702                           
  3703                           
  3704                           ; 0 bytes @ 0x16
  3705  0036                     	ds	2
  3706  0038                     DlyOff_Main@sw:	
  3707  0038                     setMain_Exception@buz:	
  3708                           ; 1 bytes @ 0x18
  3709                           
  3710  0038                     ___ftdiv@cntr:	
  3711                           ; 1 bytes @ 0x18
  3712                           
  3713  0038                     ___ftmul@exp:	
  3714                           ; 1 bytes @ 0x18
  3715                           
  3716                           
  3717                           ; 1 bytes @ 0x18
  3718  0038                     	ds	1
  3719  0039                     ??_DelayOff_Main:	
  3720  0039                     _setMain_Exception$3731:	
  3721                           ; 0 bytes @ 0x19
  3722                           
  3723  0039                     ___ftdiv@f3:	
  3724                           ; 2 bytes @ 0x19
  3725                           
  3726  0039                     ___ftmul@f3_as_product:	
  3727                           ; 3 bytes @ 0x19
  3728                           
  3729                           
  3730                           ; 3 bytes @ 0x19
  3731  0039                     	ds	2
  3732  003B                     setMain_Exception@status:	
  3733                           
  3734                           ; 1 bytes @ 0x1B
  3735  003B                     	ds	1
  3736  003C                     setMain_Exception@command:	
  3737  003C                     ___ftdiv@exp:	
  3738                           ; 1 bytes @ 0x1C
  3739                           
  3740  003C                     ___ftmul@cntr:	
  3741                           ; 1 bytes @ 0x1C
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x1C
  3745  003C                     	ds	1
  3746  003D                     ??_Switch_Main:	
  3747  003D                     ___ftdiv@sign:	
  3748                           ; 0 bytes @ 0x1D
  3749                           
  3750  003D                     ___ftmul@sign:	
  3751                           ; 1 bytes @ 0x1D
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x1D
  3755  003D                     	ds	1
  3756  003E                     ?___ftneg:	
  3757  003E                     Switch_Main@error:	
  3758                           ; 3 bytes @ 0x1E
  3759                           
  3760  003E                     ___ftneg@f1:	
  3761                           ; 1 bytes @ 0x1E
  3762                           
  3763                           
  3764                           ; 3 bytes @ 0x1E
  3765  003E                     	ds	3
  3766  0041                     ??___ftneg:	
  3767  0041                     ?___ftadd:	
  3768                           ; 0 bytes @ 0x21
  3769                           
  3770  0041                     ___ftadd@f1:	
  3771                           ; 3 bytes @ 0x21
  3772                           
  3773                           
  3774                           ; 3 bytes @ 0x21
  3775  0041                     	ds	3
  3776  0044                     ___ftadd@f2:	
  3777                           
  3778                           ; 3 bytes @ 0x24
  3779  0044                     	ds	3
  3780  0047                     ??___ftadd:	
  3781                           
  3782                           ; 0 bytes @ 0x27
  3783  0047                     	ds	4
  3784  004B                     ___ftadd@sign:	
  3785                           
  3786                           ; 1 bytes @ 0x2B
  3787  004B                     	ds	1
  3788  004C                     ___ftadd@exp2:	
  3789                           
  3790                           ; 1 bytes @ 0x2C
  3791  004C                     	ds	1
  3792  004D                     ___ftadd@exp1:	
  3793                           
  3794                           ; 1 bytes @ 0x2D
  3795  004D                     	ds	1
  3796  004E                     ?___fttol:	
  3797  004E                     ___fttol@f1:	
  3798                           ; 4 bytes @ 0x2E
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x2E
  3802  004E                     	ds	4
  3803  0052                     ??___fttol:	
  3804                           
  3805                           ; 0 bytes @ 0x32
  3806  0052                     	ds	4
  3807  0056                     ___fttol@sign1:	
  3808                           
  3809                           ; 1 bytes @ 0x36
  3810  0056                     	ds	1
  3811  0057                     ___fttol@lval:	
  3812                           
  3813                           ; 4 bytes @ 0x37
  3814  0057                     	ds	4
  3815  005B                     ___fttol@exp1:	
  3816                           
  3817                           ; 1 bytes @ 0x3B
  3818  005B                     	ds	1
  3819  005C                     ??_setPercentValue:	
  3820  005C                     ??_getPercentValue:	
  3821                           ; 0 bytes @ 0x3C
  3822                           
  3823                           
  3824                           ; 0 bytes @ 0x3C
  3825  005C                     	ds	2
  3826  005E                     getPercentValue@value:	
  3827  005E                     setPercentValue@value:	
  3828                           ; 1 bytes @ 0x3E
  3829                           
  3830                           
  3831                           ; 1 bytes @ 0x3E
  3832  005E                     	ds	1
  3833  005F                     getPercentValue@i:	
  3834  005F                     setPercentValue@i:	
  3835                           ; 3 bytes @ 0x3F
  3836                           
  3837                           
  3838                           ; 3 bytes @ 0x3F
  3839  005F                     	ds	3
  3840  0062                     ?_setDimmerLights:	
  3841  0062                     ?_setDimmerLights_Adj:	
  3842                           ; 0 bytes @ 0x42
  3843                           
  3844  0062                     ??_setDimmerLights_AdjRF:	
  3845                           ; 0 bytes @ 0x42
  3846                           
  3847  0062                     ??_Flash_Memory_Initialization:	
  3848                           ; 0 bytes @ 0x42
  3849                           
  3850  0062                     setDimmerLights@status:	
  3851                           ; 0 bytes @ 0x42
  3852                           
  3853  0062                     setDimmerLights_Adj@status:	
  3854                           ; 1 bytes @ 0x42
  3855                           
  3856                           
  3857                           ; 1 bytes @ 0x42
  3858  0062                     	ds	1
  3859  0063                     ??_setDimmerLights:	
  3860  0063                     ??_setDimmerLights_Adj:	
  3861                           ; 0 bytes @ 0x43
  3862                           
  3863  0063                     setDimmerLights_AdjRF@lights:	
  3864                           ; 0 bytes @ 0x43
  3865                           
  3866  0063                     Flash_Memory_Initialization@i:	
  3867                           ; 1 bytes @ 0x43
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x43
  3871  0063                     	ds	1
  3872  0064                     ??_setRF_DimmerValue:	
  3873                           
  3874                           ; 0 bytes @ 0x44
  3875  0064                     	ds	1
  3876  0065                     setDimmerLights@lights:	
  3877  0065                     setDimmerLights_Adj@lights:	
  3878                           ; 1 bytes @ 0x45
  3879                           
  3880                           
  3881                           ; 1 bytes @ 0x45
  3882  0065                     	ds	1
  3883  0066                     ??_setDimmerLights_Main:	
  3884  0066                     setDimmerLights_Main@lights:	
  3885                           ; 0 bytes @ 0x46
  3886                           
  3887  0066                     setRF_DimmerValue@lights:	
  3888                           ; 1 bytes @ 0x46
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x46
  3892  0066                     	ds	1
  3893  0067                     ??_setRFSW_AdjControl:	
  3894  0067                     ??_DimmerLights_Main:	
  3895                           ; 0 bytes @ 0x47
  3896                           
  3897                           
  3898                           ; 0 bytes @ 0x47
  3899  0067                     	ds	2
  3900  0069                     setRFSW_AdjControl@status:	
  3901  0069                     _DimmerLights_Main$2344:	
  3902                           ; 1 bytes @ 0x49
  3903                           
  3904                           
  3905                           ; 2 bytes @ 0x49
  3906  0069                     	ds	1
  3907  006A                     setRFSW_AdjControl@sw:	
  3908                           
  3909                           ; 1 bytes @ 0x4A
  3910  006A                     	ds	1
  3911  006B                     ??_getRxData:	
  3912  006B                     ??_setControl_Lights_Table:	
  3913                           ; 0 bytes @ 0x4B
  3914                           
  3915                           
  3916                           ; 0 bytes @ 0x4B
  3917  006B                     	ds	1
  3918  006C                     getRxData@error:	
  3919                           
  3920                           ; 1 bytes @ 0x4C
  3921  006C                     	ds	1
  3922  006D                     ??_setRF_Main:	
  3923                           
  3924                           ; 0 bytes @ 0x4D
  3925  006D                     	ds	1
  3926  006E                     ??_RF_Main:	
  3927  006E                     ??_main:	
  3928                           ; 0 bytes @ 0x4E
  3929                           
  3930                           
  3931                           	psect	maintext
  3932  1697                     __pmaintext:	
  3933                           ; 0 bytes @ 0x4E
  3934 ;;
  3935 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3936 ;;
  3937 ;; *************** function _main *****************
  3938 ;; Defined at:
  3939 ;;		line 7 in file "../src/Main_B1.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  argc            2    3[BANK1 ] int 
  3942 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  2    3[BANK1 ] int 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 17F/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3954 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;Total ram usage:        4 bytes
  3959 ;; Hardware stack levels required when called:   15
  3960 ;; This function calls:
  3961 ;;		_Buzzer_Initialization
  3962 ;;		_Buzzer_Main
  3963 ;;		_CC2500_PowerOnInitial
  3964 ;;		_DelayOff_Initialization
  3965 ;;		_DelayOff_Main
  3966 ;;		_DimmerLights_Initialization
  3967 ;;		_DimmerLights_Main
  3968 ;;		_Flash_Memory_Initialization
  3969 ;;		_Flash_Memory_Main
  3970 ;;		_LED_Initialization
  3971 ;;		_LED_Main
  3972 ;;		_Load_Initialization
  3973 ;;		_Load_Main
  3974 ;;		_Mcu_Initialization
  3975 ;;		_RF_Initialization
  3976 ;;		_RF_Main
  3977 ;;		_Switch_Initialization
  3978 ;;		_Switch_Main
  3979 ;;		_Temp_Initialization
  3980 ;;		_Temp_Main
  3981 ;;		_WDT_Main
  3982 ;;		_getLoad_AD
  3983 ;;		_getTemp_AD
  3984 ;;		_myMain_Initialization
  3985 ;;		_my_MainTimer
  3986 ;; This function is called by:
  3987 ;;		Startup code after reset
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           
  3992                           ;psect for function _main
  3993  1697                     _main:	
  3994                           
  3995                           ;Main_B1.c: 8: myMain_Initialization();
  3996                           
  3997                           ;incstack = 0
  3998                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3999  1697  319D  254E  3196   	fcall	_myMain_Initialization
  4000                           
  4001                           ;Main_B1.c: 9: Mcu_Initialization();
  4002  169A  319D  25F3  3196   	fcall	_Mcu_Initialization
  4003                           
  4004                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4005  169D  3186  260A  3196   	fcall	_Flash_Memory_Initialization
  4006                           
  4007                           ;Main_B1.c: 11: LED_Initialization();
  4008  16A0  319C  2425  3196   	fcall	_LED_Initialization
  4009                           
  4010                           ;Main_B1.c: 12: Buzzer_Initialization();
  4011  16A3  319B  23FE  3196   	fcall	_Buzzer_Initialization
  4012                           
  4013                           ;Main_B1.c: 14: ;;
  4014                           ;Main_B1.c: 15: Temp_Initialization();
  4015  16A6  319C  2407  3196   	fcall	_Temp_Initialization
  4016                           
  4017                           ;Main_B1.c: 16: Load_Initialization();
  4018  16A9  319C  2436  3196   	fcall	_Load_Initialization
  4019                           
  4020                           ;Main_B1.c: 17: ;;
  4021                           ;Main_B1.c: 18: DelayOff_Initialization();
  4022  16AC  319C  241D  3196   	fcall	_DelayOff_Initialization
  4023                           
  4024                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4025  16AF  319D  2517  3196   	fcall	_DimmerLights_Initialization
  4026                           
  4027                           ;Main_B1.c: 21: ;;
  4028                           ;Main_B1.c: 22: ;;
  4029                           ;Main_B1.c: 23: ;;
  4030                           ;Main_B1.c: 24: Switch_Initialization();
  4031  16B2  3188  2000  3196   	fcall	_Switch_Initialization
  4032                           
  4033                           ;Main_B1.c: 25: RF_Initialization();
  4034  16B5  319C  2401  3196   	fcall	_RF_Initialization
  4035                           
  4036                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4037  16B8  319E  267A  3196   	fcall	_CC2500_PowerOnInitial
  4038  16BB                     l7883:	
  4039                           ;Main_B1.c: 27: ;;
  4040                           ;Main_B1.c: 28: ;;
  4041                           ;Main_B1.c: 30: while (1) {
  4042                           
  4043                           
  4044                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4045  16BB  0021               	movlb	1	; select bank1
  4046  16BC  1C20               	btfss	_myMain^(0+128),0
  4047  16BD  2EC6               	goto	l7887
  4048                           
  4049                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4050  16BE  3005               	movlw	5
  4051  16BF  318B  23DD  3196   	fcall	_getLoad_AD
  4052                           
  4053                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4054  16C2  3009               	movlw	9
  4055  16C3  3193  23C4  3196   	fcall	_getTemp_AD
  4056  16C6                     l7887:	
  4057                           
  4058                           ;Main_B1.c: 57: }
  4059                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4060  16C6  0021               	movlb	1	; select bank1
  4061  16C7  1C47               	btfss	_Timer1^(0+128),0
  4062  16C8  2EBB               	goto	l7883
  4063                           
  4064                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4065  16C9  1047               	bcf	_Timer1^(0+128),0
  4066                           
  4067                           ;Main_B1.c: 95: my_MainTimer();
  4068  16CA  3188  20C3  3196   	fcall	_my_MainTimer
  4069                           
  4070                           ;Main_B1.c: 96: WDT_Main();
  4071  16CD  319E  2605  3196   	fcall	_WDT_Main
  4072                           
  4073                           ;Main_B1.c: 97: ;;
  4074                           ;Main_B1.c: 98: ;;
  4075                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4076  16D0  0021               	movlb	1	; select bank1
  4077  16D1  1C20               	btfss	_myMain^(0+128),0
  4078  16D2  2EBB               	goto	l7883
  4079                           
  4080                           ;Main_B1.c: 100: Flash_Memory_Main();
  4081  16D3  3193  2358  3196   	fcall	_Flash_Memory_Main
  4082                           
  4083                           ;Main_B1.c: 102: LED_Main();
  4084  16D6  319C  2429  3196   	fcall	_LED_Main
  4085                           
  4086                           ;Main_B1.c: 103: Buzzer_Main();
  4087  16D9  3195  2504  3196   	fcall	_Buzzer_Main
  4088                           
  4089                           ;Main_B1.c: 105: ;;
  4090                           ;Main_B1.c: 106: Temp_Main();
  4091  16DC  319C  240A  3196   	fcall	_Temp_Main
  4092                           
  4093                           ;Main_B1.c: 107: Load_Main();
  4094  16DF  3181  21B2  3196   	fcall	_Load_Main
  4095                           
  4096                           ;Main_B1.c: 108: ;;
  4097                           ;Main_B1.c: 110: ;;
  4098                           ;Main_B1.c: 111: DimmerLights_Main();
  4099  16E2  3191  21F3  3196   	fcall	_DimmerLights_Main
  4100                           
  4101                           ;Main_B1.c: 112: Switch_Main();
  4102  16E5  319F  277F  3196   	fcall	_Switch_Main
  4103                           
  4104                           ;Main_B1.c: 113: ;;
  4105                           ;Main_B1.c: 114: ;;
  4106                           ;Main_B1.c: 116: RF_Main();
  4107  16E8  319C  2404  3196   	fcall	_RF_Main
  4108                           
  4109                           ;Main_B1.c: 117: DelayOff_Main();
  4110  16EB  319C  2421  3196   	fcall	_DelayOff_Main
  4111                           
  4112                           ;Main_B1.c: 118: ;;
  4113                           ;Main_B1.c: 119: ;;
  4114  16EE  2EBB               	goto	l7883
  4115  16EF                     __end_of_main:	
  4116                           ;Main_B1.c: 126: }
  4117                           ;Main_B1.c: 127: }
  4118                           ;Main_B1.c: 161: }
  4119                           ;Main_B1.c: 162: return (0);
  4120                           ;	Return value of _main is never used
  4121                           
  4122                           
  4123                           	psect	text1
  4124  08C3                     __ptext1:	
  4125 ;; *************** function _my_MainTimer *****************
  4126 ;; Defined at:
  4127 ;;		line 181 in file "../src/Main_B1.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;		None               void
  4134 ;; Registers used:
  4135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    7
  4148 ;; This function calls:
  4149 ;;		_setBuz
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _my_MainTimer
  4157  08C3                     _my_MainTimer:	
  4158                           
  4159                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4163  08C3  0021               	movlb	1	; select bank1
  4164  08C4  1820               	btfsc	_myMain^(0+128),0
  4165  08C5  28E5               	goto	l7623
  4166                           
  4167                           ;Main_B1.c: 184: myMain.PowerCount++;
  4168  08C6  3001               	movlw	1
  4169  08C7  07A1               	addwf	(_myMain^(0+128)+1),f
  4170  08C8  3000               	movlw	0
  4171  08C9  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4172                           
  4173                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  4174  08CA  3001               	movlw	1
  4175  08CB  3EA0               	addlw	_myMain& (0+255)
  4176  08CC  0086               	movwf	6
  4177  08CD  0187               	clrf	7
  4178  08CE  3F40               	moviw [0]fsr1
  4179  08CF  3A96               	xorlw	150
  4180  08D0  1D03               	skipz
  4181  08D1  28D4               	goto	u7505
  4182  08D2  3F41               	moviw [1]fsr1
  4183  08D3  3A00               	xorlw	0
  4184  08D4                     u7505:	
  4185  08D4  1D03               	skipz
  4186  08D5  290E               	goto	l7639
  4187                           
  4188                           ;Main_B1.c: 186: {
  4189                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  4190  08D6  01A1               	clrf	(_myMain^(0+128)+1)
  4191  08D7  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4192                           
  4193                           ;Main_B1.c: 188: myMain.PowerON = 1;
  4194  08D8  1420               	bsf	_myMain^(0+128),0
  4195                           
  4196                           ;Main_B1.c: 194: setBuz(3, 50);
  4197  08D9  3032               	movlw	50
  4198  08DA  0020               	movlb	0	; select bank0
  4199  08DB  00A9               	movwf	setBuz@time
  4200  08DC  3000               	movlw	0
  4201  08DD  00AA               	movwf	setBuz@time+1
  4202  08DE  3003               	movlw	3
  4203  08DF  3196  26EF  3188   	fcall	_setBuz
  4204                           
  4205                           ;Main_B1.c: 195: myMain.SelfTest = 1;
  4206  08E2  0021               	movlb	1	; select bank1
  4207  08E3  1620               	bsf	_myMain^(0+128),4
  4208                           
  4209                           ;Main_B1.c: 204: }
  4210                           ;Main_B1.c: 205: } else {
  4211  08E4  290E               	goto	l7639
  4212  08E5                     l7623:	
  4213                           
  4214                           ;Main_B1.c: 206: myMain.PowerCount++;
  4215  08E5  3001               	movlw	1
  4216  08E6  07A1               	addwf	(_myMain^(0+128)+1),f
  4217  08E7  3000               	movlw	0
  4218  08E8  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4219                           
  4220                           ;Main_B1.c: 207: if (myMain.PowerCount == 100) {
  4221  08E9  3001               	movlw	1
  4222  08EA  3EA0               	addlw	_myMain& (0+255)
  4223  08EB  0086               	movwf	6
  4224  08EC  0187               	clrf	7
  4225  08ED  3F40               	moviw [0]fsr1
  4226  08EE  3A64               	xorlw	100
  4227  08EF  1D03               	skipz
  4228  08F0  28F3               	goto	u7515
  4229  08F1  3F41               	moviw [1]fsr1
  4230  08F2  3A00               	xorlw	0
  4231  08F3                     u7515:	
  4232  08F3  1D03               	skipz
  4233  08F4  28F7               	goto	l7629
  4234                           
  4235                           ;Main_B1.c: 208: myMain.PowerCount = 0;
  4236  08F5  01A1               	clrf	(_myMain^(0+128)+1)
  4237  08F6  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4238  08F7                     l7629:	
  4239                           
  4240                           ;Main_B1.c: 212: }
  4241                           ;Main_B1.c: 220: myMain.Count1++;
  4242  08F7  3001               	movlw	1
  4243  08F8  07A5               	addwf	(_myMain^(0+128)+5),f
  4244  08F9  3000               	movlw	0
  4245  08FA  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4246                           
  4247                           ;Main_B1.c: 221: if (myMain.Count1 == 100)
  4248  08FB  3005               	movlw	5
  4249  08FC  3EA0               	addlw	_myMain& (0+255)
  4250  08FD  0086               	movwf	6
  4251  08FE  0187               	clrf	7
  4252  08FF  3F40               	moviw [0]fsr1
  4253  0900  3A64               	xorlw	100
  4254  0901  1D03               	skipz
  4255  0902  2905               	goto	u7525
  4256  0903  3F41               	moviw [1]fsr1
  4257  0904  3A00               	xorlw	0
  4258  0905                     u7525:	
  4259  0905  1D03               	skipz
  4260  0906  290E               	goto	l7639
  4261                           
  4262                           ;Main_B1.c: 222: {
  4263                           ;Main_B1.c: 223: myMain.Count1 = 0;
  4264  0907  01A5               	clrf	(_myMain^(0+128)+5)
  4265  0908  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4266                           
  4267                           ;Main_B1.c: 235: if (myMain.Flag) {
  4268  0909  1CA0               	btfss	_myMain^(0+128),1
  4269  090A  290D               	goto	l1381
  4270                           
  4271                           ;Main_B1.c: 236: myMain.Flag = 0;
  4272  090B  10A0               	bcf	_myMain^(0+128),1
  4273                           
  4274                           ;Main_B1.c: 245: } else {
  4275  090C  290E               	goto	l7639
  4276  090D                     l1381:	
  4277                           
  4278                           ;Main_B1.c: 246: myMain.Flag = 1;
  4279  090D  14A0               	bsf	_myMain^(0+128),1
  4280  090E                     l7639:	
  4281                           
  4282                           ;Main_B1.c: 255: }
  4283                           ;Main_B1.c: 256: }
  4284                           ;Main_B1.c: 258: }
  4285                           ;Main_B1.c: 260: myMain.Count2++;
  4286  090E  3001               	movlw	1
  4287  090F  07A7               	addwf	(_myMain^(0+128)+7),f
  4288  0910  3000               	movlw	0
  4289  0911  3DA8               	addwfc	((_myMain+1)^(0+128)+7),f
  4290                           
  4291                           ;Main_B1.c: 261: if (myMain.Count2 == 100) {
  4292  0912  3007               	movlw	7
  4293  0913  3EA0               	addlw	_myMain& (0+255)
  4294  0914  0086               	movwf	6
  4295  0915  0187               	clrf	7
  4296  0916  3F40               	moviw [0]fsr1
  4297  0917  3A64               	xorlw	100
  4298  0918  1D03               	skipz
  4299  0919  291C               	goto	u7545
  4300  091A  3F41               	moviw [1]fsr1
  4301  091B  3A00               	xorlw	0
  4302  091C                     u7545:	
  4303  091C  1D03               	skipz
  4304  091D  0008               	return
  4305                           
  4306                           ;Main_B1.c: 262: myMain.Count2 = 0;
  4307  091E  01A7               	clrf	(_myMain^(0+128)+7)
  4308  091F  01A8               	clrf	((_myMain+1)^(0+128)+7)
  4309  0920  0008               	return
  4310  0921                     __end_of_my_MainTimer:	
  4311                           
  4312                           	psect	text2
  4313  1D4E                     __ptext2:	
  4314 ;; *************** function _myMain_Initialization *****************
  4315 ;; Defined at:
  4316 ;;		line 168 in file "../src/Main_B1.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;		None               void
  4323 ;; Registers used:
  4324 ;;		wreg, fsr1l, fsr1h
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;Total ram usage:        1 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    5
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _myMain_Initialization
  4346  1D4E                     _myMain_Initialization:	
  4347                           
  4348                           ;Main_B1.c: 170: product = &_product;
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4352  1D4E  3020               	movlw	__product& (0+255)
  4353  1D4F  0020               	movlb	0	; select bank0
  4354  1D50  00A0               	movwf	??_myMain_Initialization
  4355  1D51  0820               	movf	??_myMain_Initialization,w
  4356  1D52  00EE               	movwf	_product
  4357                           
  4358                           ;Main_B1.c: 171: product->Data[20] = 209;
  4359  1D53  30D1               	movlw	209
  4360  1D54  00A0               	movwf	??_myMain_Initialization
  4361  1D55  086E               	movf	_product,w
  4362  1D56  3E14               	addlw	20
  4363  1D57  0086               	movwf	6
  4364  1D58  3002               	movlw	2	; select bank4/5
  4365  1D59  0087               	movwf	7
  4366  1D5A  0820               	movf	??_myMain_Initialization,w
  4367  1D5B  0081               	movwf	1
  4368  1D5C  0008               	return
  4369  1D5D                     __end_of_myMain_Initialization:	
  4370                           
  4371                           	psect	text3
  4372  13C4                     __ptext3:	
  4373 ;; *************** function _getTemp_AD *****************
  4374 ;; Defined at:
  4375 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  channel         1    wreg     unsigned char 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;  channel         1    5[BANK0 ] unsigned char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;		None               void
  4382 ;; Registers used:
  4383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4393 ;;Total ram usage:        2 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    7
  4396 ;; This function calls:
  4397 ;;		_getAD
  4398 ;; This function is called by:
  4399 ;;		_main
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _getTemp_AD
  4405  13C4                     _getTemp_AD:	
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4409                           ;getTemp_AD@channel stored from wreg
  4410  13C4  0020               	movlb	0	; select bank0
  4411  13C5  00A5               	movwf	getTemp_AD@channel
  4412                           
  4413                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4414  13C6  0021               	movlb	1	; select bank1
  4415  13C7  1D56               	btfss	_Temp^(0+128),2
  4416  13C8  0008               	return
  4417                           
  4418                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4419  13C9  1656               	bsf	_Temp^(0+128),4
  4420                           
  4421                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4422  13CA  30F0               	movlw	240
  4423  13CB  0020               	movlb	0	; select bank0
  4424  13CC  00A4               	movwf	??_getTemp_AD
  4425  13CD  0824               	movf	??_getTemp_AD,w
  4426  13CE  00A0               	movwf	getAD@adcon1
  4427  13CF  0825               	movf	getTemp_AD@channel,w
  4428  13D0  319F  279F  3193   	fcall	_getAD
  4429  13D3  0020               	movlb	0	; select bank0
  4430  13D4  0821               	movf	?_getAD+1,w
  4431  13D5  0021               	movlb	1	; select bank1
  4432  13D6  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4433  13D7  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4434  13D8  0020               	movlb	0	; select bank0
  4435  13D9  0820               	movf	?_getAD,w
  4436  13DA  0021               	movlb	1	; select bank1
  4437  13DB  01E2               	clrf	(_Temp^(0+128)+12)
  4438  13DC  07E2               	addwf	(_Temp^(0+128)+12),f
  4439                           
  4440                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4441  13DD  0863               	movf	((_Temp+1)^(0+128)+12),w
  4442  13DE  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4443  13DF  1D03               	skipz
  4444  13E0  2BE3               	goto	u7475
  4445  13E1  0862               	movf	(_Temp^(0+128)+12),w
  4446  13E2  025E               	subwf	(_Temp^(0+128)+8),w
  4447  13E3                     u7475:	
  4448  13E3  1803               	skipnc
  4449  13E4  2BEC               	goto	l7605
  4450                           
  4451                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4452  13E5  0863               	movf	((_Temp+1)^(0+128)+12),w
  4453  13E6  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4454  13E7  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4455  13E8  0862               	movf	(_Temp^(0+128)+12),w
  4456  13E9  01DE               	clrf	(_Temp^(0+128)+8)
  4457  13EA  07DE               	addwf	(_Temp^(0+128)+8),f
  4458                           
  4459                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4460  13EB  0008               	return
  4461  13EC                     l7605:	
  4462  13EC  0863               	movf	((_Temp+1)^(0+128)+12),w
  4463  13ED  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4464  13EE  1D03               	skipz
  4465  13EF  2BF2               	goto	u7485
  4466  13F0  0862               	movf	(_Temp^(0+128)+12),w
  4467  13F1  0260               	subwf	(_Temp^(0+128)+10),w
  4468  13F2                     u7485:	
  4469  13F2  1803               	skipnc
  4470  13F3  0008               	return
  4471                           
  4472                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4473  13F4  0863               	movf	((_Temp+1)^(0+128)+12),w
  4474  13F5  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4475  13F6  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4476  13F7  0862               	movf	(_Temp^(0+128)+12),w
  4477  13F8  01E0               	clrf	(_Temp^(0+128)+10)
  4478  13F9  07E0               	addwf	(_Temp^(0+128)+10),f
  4479  13FA  0008               	return
  4480  13FB                     __end_of_getTemp_AD:	
  4481                           
  4482                           	psect	text4
  4483  0BDD                     __ptext4:	
  4484 ;; *************** function _getLoad_AD *****************
  4485 ;; Defined at:
  4486 ;;		line 15 in file "../src/OverLoad_B1.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  channel         1    wreg     unsigned char 
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;  channel         1    6[BANK0 ] unsigned char 
  4491 ;;  i               1    9[BANK0 ] unsigned char 
  4492 ;;  j               1    8[BANK0 ] unsigned char 
  4493 ;;  k               1    7[BANK0 ] unsigned char 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;Total ram usage:        6 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    7
  4510 ;; This function calls:
  4511 ;;		_getAD
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _getLoad_AD
  4519  0BDD                     _getLoad_AD:	
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4523                           ;getLoad_AD@channel stored from wreg
  4524  0BDD  0020               	movlb	0	; select bank0
  4525  0BDE  00A6               	movwf	getLoad_AD@channel
  4526                           
  4527                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4528  0BDF  01A9               	clrf	getLoad_AD@i
  4529  0BE0  01A8               	clrf	getLoad_AD@j
  4530  0BE1  01A7               	clrf	getLoad_AD@k
  4531                           
  4532                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4533  0BE2  0022               	movlb	2	; select bank2
  4534  0BE3  1E43               	btfss	_Load^(0+256),4
  4535  0BE4  0008               	return
  4536                           
  4537                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4538  0BE5  30F3               	movlw	243
  4539  0BE6  0020               	movlb	0	; select bank0
  4540  0BE7  00A4               	movwf	??_getLoad_AD
  4541  0BE8  0824               	movf	??_getLoad_AD,w
  4542  0BE9  00A0               	movwf	getAD@adcon1
  4543  0BEA  0826               	movf	getLoad_AD@channel,w
  4544  0BEB  319F  279F  318B   	fcall	_getAD
  4545  0BEE  0020               	movlb	0	; select bank0
  4546  0BEF  0821               	movf	?_getAD+1,w
  4547  0BF0  0022               	movlb	2	; select bank2
  4548  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4549  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4550  0BF3  0020               	movlb	0	; select bank0
  4551  0BF4  0820               	movf	?_getAD,w
  4552  0BF5  0022               	movlb	2	; select bank2
  4553  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4554  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4555                           
  4556                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4557  0BF8  0020               	movlb	0	; select bank0
  4558  0BF9  01A9               	clrf	getLoad_AD@i
  4559  0BFA  3004               	movlw	4
  4560  0BFB  0229               	subwf	getLoad_AD@i,w
  4561  0BFC  1803               	btfsc	3,0
  4562  0BFD  2C2B               	goto	l7575
  4563  0BFE                     l7563:	
  4564                           
  4565                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4566  0BFE  3529               	lslf	getLoad_AD@i,w
  4567  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4568  0C00  0086               	movwf	6
  4569  0C01  3001               	movlw	1	; select bank2/3
  4570  0C02  0087               	movwf	7
  4571  0C03  3F40               	moviw [0]fsr1
  4572  0C04  00A4               	movwf	??_getLoad_AD
  4573  0C05  3F41               	moviw [1]fsr1
  4574  0C06  00A5               	movwf	??_getLoad_AD+1
  4575  0C07  0022               	movlb	2	; select bank2
  4576  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4577  0C09  0020               	movlb	0	; select bank0
  4578  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4579  0C0B  1D03               	skipz
  4580  0C0C  2C11               	goto	u7385
  4581  0C0D  0022               	movlb	2	; select bank2
  4582  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4583  0C0F  0020               	movlb	0	; select bank0
  4584  0C10  0224               	subwf	??_getLoad_AD,w
  4585  0C11                     u7385:	
  4586  0C11  1803               	skipnc
  4587  0C12  2C23               	goto	l7571
  4588  0C13  08A8               	movf	getLoad_AD@j,f
  4589  0C14  1D03               	skipz
  4590  0C15  2C23               	goto	l7571
  4591                           
  4592                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4593  0C16  3529               	lslf	getLoad_AD@i,w
  4594  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4595  0C18  0086               	movwf	6
  4596  0C19  3001               	movlw	1	; select bank2/3
  4597  0C1A  0087               	movwf	7
  4598  0C1B  0022               	movlb	2	; select bank2
  4599  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4600  0C1D  3FC0               	movwi [0]fsr1
  4601  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4602  0C1F  3FC1               	movwi [1]fsr1
  4603                           
  4604                           ;OverLoad_B1.c: 24: j = 1;
  4605  0C20  0020               	movlb	0	; select bank0
  4606  0C21  01A8               	clrf	getLoad_AD@j
  4607  0C22  0AA8               	incf	getLoad_AD@j,f
  4608  0C23                     l7571:	
  4609  0C23  3001               	movlw	1
  4610  0C24  00A4               	movwf	??_getLoad_AD
  4611  0C25  0824               	movf	??_getLoad_AD,w
  4612  0C26  07A9               	addwf	getLoad_AD@i,f
  4613  0C27  3004               	movlw	4
  4614  0C28  0229               	subwf	getLoad_AD@i,w
  4615  0C29  1C03               	skipc
  4616  0C2A  2BFE               	goto	l7563
  4617  0C2B                     l7575:	
  4618                           
  4619                           ;OverLoad_B1.c: 25: }
  4620                           ;OverLoad_B1.c: 26: }
  4621                           ;OverLoad_B1.c: 27: if (j == 0) {
  4622  0C2B  08A8               	movf	getLoad_AD@j,f
  4623  0C2C  1D03               	skipz
  4624  0C2D  0008               	return
  4625                           
  4626                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4627  0C2E  01A9               	clrf	getLoad_AD@i
  4628  0C2F                     L1:	
  4629  0C2F  3004               	movlw	4
  4630  0C30  0229               	subwf	getLoad_AD@i,w
  4631  0C31  1803               	btfsc	3,0
  4632  0C32  0008               	return
  4633                           
  4634                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4635  0C33  3529               	lslf	getLoad_AD@i,w
  4636  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4637  0C35  0086               	movwf	6
  4638  0C36  3001               	movlw	1	; select bank2/3
  4639  0C37  0087               	movwf	7
  4640  0C38  3F40               	moviw [0]fsr1
  4641  0C39  00A4               	movwf	??_getLoad_AD
  4642  0C3A  3F41               	moviw [1]fsr1
  4643  0C3B  00A5               	movwf	??_getLoad_AD+1
  4644  0C3C  0825               	movf	??_getLoad_AD+1,w
  4645  0C3D  0022               	movlb	2	; select bank2
  4646  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4647  0C3F  1D03               	skipz
  4648  0C40  2C45               	goto	u7435
  4649  0C41  0020               	movlb	0	; select bank0
  4650  0C42  0824               	movf	??_getLoad_AD,w
  4651  0C43  0022               	movlb	2	; select bank2
  4652  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4653  0C45                     u7435:	
  4654  0C45  1803               	skipnc
  4655  0C46  2C58               	goto	l7591
  4656  0C47  0020               	movlb	0	; select bank0
  4657  0C48  08A7               	movf	getLoad_AD@k,f
  4658  0C49  1D03               	skipz
  4659  0C4A  2C58               	goto	l7591
  4660                           
  4661                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4662  0C4B  3529               	lslf	getLoad_AD@i,w
  4663  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4664  0C4D  0086               	movwf	6
  4665  0C4E  3001               	movlw	1	; select bank2/3
  4666  0C4F  0087               	movwf	7
  4667  0C50  0022               	movlb	2	; select bank2
  4668  0C51  0864               	movf	(_Load^(0+256)+33),w
  4669  0C52  3FC0               	movwi [0]fsr1
  4670  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4671  0C54  3FC1               	movwi [1]fsr1
  4672                           
  4673                           ;OverLoad_B1.c: 31: k = 1;
  4674  0C55  0020               	movlb	0	; select bank0
  4675  0C56  01A7               	clrf	getLoad_AD@k
  4676  0C57  0AA7               	incf	getLoad_AD@k,f
  4677  0C58                     l7591:	
  4678  0C58  3001               	movlw	1
  4679  0C59  0020               	movlb	0	; select bank0
  4680  0C5A  00A4               	movwf	??_getLoad_AD
  4681  0C5B  0824               	movf	??_getLoad_AD,w
  4682  0C5C  07A9               	addwf	getLoad_AD@i,f
  4683  0C5D  2C2F               	goto	L1
  4684  0C5E                     __end_of_getLoad_AD:	
  4685                           
  4686                           	psect	text5
  4687  1F9F                     __ptext5:	
  4688 ;; *************** function _getAD *****************
  4689 ;; Defined at:
  4690 ;;		line 454 in file "../src/MCU_B1.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  adcon0          1    wreg     unsigned char 
  4693 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  2    0[BANK0 ] int 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4705 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;Total ram usage:        4 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    6
  4712 ;; This function calls:
  4713 ;;		_Timeout_Counter
  4714 ;;		_set_TimeoutCleared
  4715 ;; This function is called by:
  4716 ;;		_getLoad_AD
  4717 ;;		_getTemp_AD
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function _getAD
  4723  1F9F                     _getAD:	
  4724                           
  4725                           ;incstack = 0
  4726                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4727                           ;getAD@adcon0 stored from wreg
  4728  1F9F  0020               	movlb	0	; select bank0
  4729  1FA0  00A3               	movwf	getAD@adcon0
  4730                           
  4731                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4732  1FA1  0823               	movf	getAD@adcon0,w
  4733  1FA2  0021               	movlb	1	; select bank1
  4734  1FA3  009D               	movwf	29	;volatile
  4735                           
  4736                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4737  1FA4  0020               	movlb	0	; select bank0
  4738  1FA5  0820               	movf	getAD@adcon1,w
  4739  1FA6  0021               	movlb	1	; select bank1
  4740  1FA7  009E               	movwf	30	;volatile
  4741                           
  4742                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4743  1FA8  149D               	bsf	29,1	;volatile
  4744                           
  4745                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4746  1FA9  2FAD               	goto	l6981
  4747  1FAA                     l6979:	
  4748                           
  4749                           ;MCU_B1.c: 459: Timeout_Counter();
  4750  1FAA  319E  2665  319F   	fcall	_Timeout_Counter
  4751  1FAD                     l6981:	
  4752  1FAD  0021               	movlb	1	; select bank1
  4753  1FAE  1C9D               	btfss	29,1	;volatile
  4754  1FAF  2FB2               	goto	l6985
  4755  1FB0  1D2C               	btfss	(_myMain^(0+128)+12),2
  4756  1FB1  2FAA               	goto	l6979
  4757  1FB2                     l6985:	
  4758                           
  4759                           ;MCU_B1.c: 460: };
  4760                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4761  1FB2  319C  2431         	fcall	_set_TimeoutCleared
  4762                           
  4763                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4764  1FB4  0021               	movlb	1	; select bank1
  4765  1FB5  081C               	movf	28,w	;volatile
  4766  1FB6  0020               	movlb	0	; select bank0
  4767  1FB7  01A1               	clrf	?_getAD+1
  4768  1FB8  07A1               	addwf	?_getAD+1,f
  4769  1FB9  0021               	movlb	1	; select bank1
  4770  1FBA  081B               	movf	27,w	;volatile
  4771  1FBB  0020               	movlb	0	; select bank0
  4772  1FBC  01A0               	clrf	?_getAD
  4773  1FBD  07A0               	addwf	?_getAD,f
  4774  1FBE  0008               	return
  4775  1FBF                     __end_of_getAD:	
  4776                           
  4777                           	psect	text6
  4778  1E05                     __ptext6:	
  4779 ;; *************** function _WDT_Main *****************
  4780 ;; Defined at:
  4781 ;;		line 1036 in file "../src/MCU_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;Total ram usage:        1 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    6
  4802 ;; This function calls:
  4803 ;;		_WDT_Clearing
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _WDT_Main
  4811  1E05                     _WDT_Main:	
  4812                           
  4813                           ;MCU_B1.c: 1037: if (WDT.Enable == 1) {
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4817  1E05  0021               	movlb	1	; select bank1
  4818  1E06  1C4A               	btfss	_WDT^(0+128),0
  4819  1E07  0008               	return
  4820                           
  4821                           ;MCU_B1.c: 1038: if (WDT.Timer-- > 0) {
  4822  1E08  3001               	movlw	1
  4823  1E09  02CB               	subwf	(_WDT^(0+128)+1),f
  4824  1E0A  084B               	movf	(_WDT^(0+128)+1),w
  4825  1E0B  3AFF               	xorlw	255
  4826  1E0C  1903               	skipnz
  4827  1E0D  0008               	return
  4828                           
  4829                           ;MCU_B1.c: 1039: WDT.Timer = 100;
  4830  1E0E  3064               	movlw	100
  4831  1E0F  0020               	movlb	0	; select bank0
  4832  1E10  00A0               	movwf	??_WDT_Main
  4833  1E11  0820               	movf	??_WDT_Main,w
  4834  1E12  0021               	movlb	1	; select bank1
  4835  1E13  00CB               	movwf	(_WDT^(0+128)+1)
  4836                           
  4837                           ;MCU_B1.c: 1040: WDT_Clearing();
  4838  1E14  3187  27FE         	fcall	_WDT_Clearing
  4839  1E16  0008               	return
  4840  1E17                     __end_of_WDT_Main:	
  4841                           
  4842                           	psect	text7
  4843  07FE                     __ptext7:	
  4844 ;; *************** function _WDT_Clearing *****************
  4845 ;; Defined at:
  4846 ;;		line 1046 in file "../src/MCU_B1.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		None
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    5
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_WDT_Main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _WDT_Clearing
  4876  07FE                     _WDT_Clearing:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _WDT_Clearing: []
  4880  07FE  0064               	clrwdt	;# 
  4881  07FF  0008               	return
  4882  0800                     __end_of_WDT_Clearing:	
  4883                           
  4884                           	psect	text8
  4885  1C0A                     __ptext8:	
  4886 ;; *************** function _Temp_Main *****************
  4887 ;; Defined at:
  4888 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;		None
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;		None
  4893 ;; Return value:  Size  Location     Type
  4894 ;;		None               void
  4895 ;; Registers used:
  4896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;Total ram usage:        0 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:    8
  4909 ;; This function calls:
  4910 ;;		_setTemp_Main
  4911 ;; This function is called by:
  4912 ;;		_main
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           
  4917                           ;psect for function _Temp_Main
  4918  1C0A                     _Temp_Main:	
  4919                           
  4920                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4921                           
  4922                           ;incstack = 0
  4923                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4924  1C0A  318D  25FE         	fcall	_setTemp_Main
  4925  1C0C  0008               	return
  4926  1C0D                     __end_of_Temp_Main:	
  4927                           
  4928                           	psect	text9
  4929  0DFE                     __ptext9:	
  4930 ;; *************** function _setTemp_Main *****************
  4931 ;; Defined at:
  4932 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;		None               void
  4939 ;; Registers used:
  4940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;Total ram usage:        2 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    7
  4953 ;; This function calls:
  4954 ;;		_getMain_All_Error_Status
  4955 ;;		_setBuz
  4956 ;; This function is called by:
  4957 ;;		_Temp_Main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _setTemp_Main
  4963  0DFE                     _setTemp_Main:	
  4964                           
  4965                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4969  0DFE  0021               	movlb	1	; select bank1
  4970  0DFF  1C56               	btfss	_Temp^(0+128),0
  4971  0E00  2E9F               	goto	l1685
  4972                           
  4973                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4974  0E01  1956               	btfsc	_Temp^(0+128),2
  4975  0E02  2E12               	goto	l7089
  4976                           
  4977                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4978  0E03  3001               	movlw	1
  4979  0E04  07D7               	addwf	(_Temp^(0+128)+1),f
  4980  0E05  3000               	movlw	0
  4981  0E06  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4982                           
  4983                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4984  0E07  3001               	movlw	1
  4985  0E08  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4986  0E09  30F4               	movlw	244
  4987  0E0A  1903               	skipnz
  4988  0E0B  0257               	subwf	(_Temp^(0+128)+1),w
  4989  0E0C  1C03               	skipc
  4990  0E0D  0008               	return
  4991                           
  4992                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4993  0E0E  01D7               	clrf	(_Temp^(0+128)+1)
  4994  0E0F  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4995                           
  4996                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4997  0E10  1556               	bsf	_Temp^(0+128),2
  4998                           
  4999                           ;OverTemperature_B1.c: 64: }
  5000                           ;OverTemperature_B1.c: 65: } else {
  5001  0E11  0008               	return
  5002  0E12                     l7089:	
  5003                           
  5004                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5005  0E12  3002               	movlw	2
  5006  0E13  3192  2287  318D   	fcall	_getMain_All_Error_Status
  5007  0E16  3800               	iorlw	0
  5008  0E17  1D03               	skipz
  5009  0E18  0008               	return
  5010                           
  5011                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5012  0E19  3001               	movlw	1
  5013  0E1A  0021               	movlb	1	; select bank1
  5014  0E1B  07D7               	addwf	(_Temp^(0+128)+1),f
  5015  0E1C  3000               	movlw	0
  5016  0E1D  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5017                           
  5018                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5019  0E1E  3000               	movlw	0
  5020  0E1F  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5021  0E20  3005               	movlw	5
  5022  0E21  1903               	skipnz
  5023  0E22  0257               	subwf	(_Temp^(0+128)+1),w
  5024  0E23  1C03               	skipc
  5025  0E24  0008               	return
  5026                           
  5027                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5028  0E25  01D7               	clrf	(_Temp^(0+128)+1)
  5029  0E26  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5030                           
  5031                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5032  0E27  1E56               	btfss	_Temp^(0+128),4
  5033  0E28  0008               	return
  5034                           
  5035                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5036  0E29  1156               	bcf	_Temp^(0+128),2
  5037                           
  5038                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5039  0E2A  300A               	movlw	10
  5040  0E2B  3ED6               	addlw	_Temp& (0+255)
  5041  0E2C  0086               	movwf	6
  5042  0E2D  0187               	clrf	7
  5043  0E2E  3008               	movlw	8
  5044  0E2F  3ED6               	addlw	_Temp& (0+255)
  5045  0E30  0084               	movwf	4
  5046  0E31  0185               	clrf	5
  5047  0E32  3F40               	moviw [0]fsr1
  5048  0E33  0700               	addwf	0,w
  5049  0E34  0020               	movlb	0	; select bank0
  5050  0E35  00AD               	movwf	??_setTemp_Main
  5051  0E36  3101               	addfsr 0,1
  5052  0E37  3F41               	moviw [1]fsr1
  5053  0E38  3D00               	addwfc	0,w
  5054  0E39  00AE               	movwf	??_setTemp_Main+1
  5055  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5056  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5057  0E3C  082D               	movf	??_setTemp_Main,w
  5058  0E3D  0021               	movlb	1	; select bank1
  5059  0E3E  00DC               	movwf	(_Temp^(0+128)+6)
  5060  0E3F  0020               	movlb	0	; select bank0
  5061  0E40  082E               	movf	??_setTemp_Main+1,w
  5062  0E41  0021               	movlb	1	; select bank1
  5063  0E42  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5064                           
  5065                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5066  0E43  30C7               	movlw	199
  5067  0E44  00E4               	movwf	(_Temp^(0+128)+14)
  5068  0E45  3001               	movlw	1
  5069  0E46  00E5               	movwf	(_Temp^(0+128)+15)
  5070                           
  5071                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5072  0E47  309F               	movlw	159
  5073  0E48  00E6               	movwf	(_Temp^(0+128)+16)
  5074  0E49  3001               	movlw	1
  5075  0E4A  00E7               	movwf	(_Temp^(0+128)+17)
  5076                           
  5077                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5078  0E4B  1CD6               	btfss	_Temp^(0+128),1
  5079  0E4C  2E6D               	goto	l7121
  5080                           
  5081                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5082  0E4D  0865               	movf	((_Temp+1)^(0+128)+14),w
  5083  0E4E  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5084  0E4F  1D03               	skipz
  5085  0E50  2E53               	goto	u6565
  5086  0E51  0864               	movf	(_Temp^(0+128)+14),w
  5087  0E52  025C               	subwf	(_Temp^(0+128)+6),w
  5088  0E53                     u6565:	
  5089  0E53  1C03               	skipc
  5090  0E54  2E6B               	goto	l7119
  5091                           
  5092                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5093  0E55  3001               	movlw	1
  5094  0E56  0020               	movlb	0	; select bank0
  5095  0E57  00AD               	movwf	??_setTemp_Main
  5096  0E58  082D               	movf	??_setTemp_Main,w
  5097  0E59  0021               	movlb	1	; select bank1
  5098  0E5A  07D9               	addwf	(_Temp^(0+128)+3),f
  5099                           
  5100                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5101  0E5B  3003               	movlw	3
  5102  0E5C  0259               	subwf	(_Temp^(0+128)+3),w
  5103  0E5D  1C03               	skipc
  5104  0E5E  2E83               	goto	l7133
  5105                           
  5106                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5107  0E5F  01D9               	clrf	(_Temp^(0+128)+3)
  5108                           
  5109                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5110  0E60  10D6               	bcf	_Temp^(0+128),1
  5111                           
  5112                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5113  0E61  3064               	movlw	100
  5114  0E62  0020               	movlb	0	; select bank0
  5115  0E63  00A9               	movwf	setBuz@time
  5116  0E64  3000               	movlw	0
  5117  0E65  00AA               	movwf	setBuz@time+1
  5118  0E66  3002               	movlw	2
  5119  0E67  3196  26EF  318D   	fcall	_setBuz
  5120                           
  5121                           ;OverTemperature_B1.c: 96: }
  5122                           ;OverTemperature_B1.c: 97: } else {
  5123  0E6A  2E83               	goto	l7133
  5124  0E6B                     l7119:	
  5125                           
  5126                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5127  0E6B  0021               	movlb	1	; select bank1
  5128  0E6C  2E82               	goto	l7131
  5129  0E6D                     l7121:	
  5130                           ;OverTemperature_B1.c: 99: }
  5131                           ;OverTemperature_B1.c: 100: } else {
  5132                           
  5133                           
  5134                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5135  0E6D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5136  0E6E  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5137  0E6F  1D03               	skipz
  5138  0E70  2E73               	goto	u6585
  5139  0E71  085C               	movf	(_Temp^(0+128)+6),w
  5140  0E72  0266               	subwf	(_Temp^(0+128)+16),w
  5141  0E73                     u6585:	
  5142  0E73  1C03               	skipc
  5143  0E74  2E82               	goto	l7131
  5144                           
  5145                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5146  0E75  3001               	movlw	1
  5147  0E76  0020               	movlb	0	; select bank0
  5148  0E77  00AD               	movwf	??_setTemp_Main
  5149  0E78  082D               	movf	??_setTemp_Main,w
  5150  0E79  0021               	movlb	1	; select bank1
  5151  0E7A  07D9               	addwf	(_Temp^(0+128)+3),f
  5152                           
  5153                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5154  0E7B  3003               	movlw	3
  5155  0E7C  0259               	subwf	(_Temp^(0+128)+3),w
  5156  0E7D  1C03               	skipc
  5157  0E7E  2E83               	goto	l7133
  5158                           
  5159                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5160  0E7F  01D9               	clrf	(_Temp^(0+128)+3)
  5161                           
  5162                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5163  0E80  14D6               	bsf	_Temp^(0+128),1
  5164                           
  5165                           ;OverTemperature_B1.c: 106: }
  5166                           ;OverTemperature_B1.c: 107: } else {
  5167  0E81  2E83               	goto	l7133
  5168  0E82                     l7131:	
  5169                           
  5170                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5171  0E82  01D9               	clrf	(_Temp^(0+128)+3)
  5172  0E83                     l7133:	
  5173                           
  5174                           ;OverTemperature_B1.c: 109: }
  5175                           ;OverTemperature_B1.c: 110: }
  5176                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5177  0E83  0021               	movlb	1	; select bank1
  5178  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5179  0E85  0020               	movlb	0	; select bank0
  5180  0E86  00AD               	movwf	??_setTemp_Main
  5181  0E87  086E               	movf	_product,w
  5182  0E88  3E18               	addlw	24
  5183  0E89  0086               	movwf	6
  5184  0E8A  3002               	movlw	2	; select bank4/5
  5185  0E8B  0087               	movwf	7
  5186  0E8C  082D               	movf	??_setTemp_Main,w
  5187  0E8D  0081               	movwf	1
  5188                           
  5189                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5190  0E8E  0021               	movlb	1	; select bank1
  5191  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5192  0E90  0020               	movlb	0	; select bank0
  5193  0E91  00AD               	movwf	??_setTemp_Main
  5194  0E92  086E               	movf	_product,w
  5195  0E93  3E19               	addlw	25
  5196  0E94  0086               	movwf	6
  5197  0E95  3002               	movlw	2	; select bank4/5
  5198  0E96  0087               	movwf	7
  5199  0E97  082D               	movf	??_setTemp_Main,w
  5200  0E98  0081               	movwf	1
  5201                           
  5202                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5203  0E99  0021               	movlb	1	; select bank1
  5204  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5205  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5206                           
  5207                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5208  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5209  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5210                           
  5211                           ;OverTemperature_B1.c: 120: }
  5212                           ;OverTemperature_B1.c: 121: }
  5213                           ;OverTemperature_B1.c: 122: }
  5214                           ;OverTemperature_B1.c: 123: }
  5215                           ;OverTemperature_B1.c: 124: } else {
  5216  0E9E  0008               	return
  5217  0E9F                     l1685:	
  5218                           
  5219                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5220  0E9F  1C20               	btfss	_myMain^(0+128),0
  5221  0EA0  0008               	return
  5222                           
  5223                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5224  0EA1  1456               	bsf	_Temp^(0+128),0
  5225  0EA2  0008               	return
  5226  0EA3                     __end_of_setTemp_Main:	
  5227                           
  5228                           	psect	text10
  5229  1C07                     __ptext10:	
  5230 ;; *************** function _Temp_Initialization *****************
  5231 ;; Defined at:
  5232 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;		None
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		status,2, status,0, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        0 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    6
  5253 ;; This function calls:
  5254 ;;		_setTemp_Initialization
  5255 ;; This function is called by:
  5256 ;;		_main
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _Temp_Initialization
  5262  1C07                     _Temp_Initialization:	
  5263                           
  5264                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5268  1C07  3180  2003         	fcall	_setTemp_Initialization
  5269  1C09  0008               	return
  5270  1C0A                     __end_of_Temp_Initialization:	
  5271                           
  5272                           	psect	text11
  5273  0003                     __ptext11:	
  5274 ;; *************** function _setTemp_Initialization *****************
  5275 ;; Defined at:
  5276 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;		None               void
  5283 ;; Registers used:
  5284 ;;		None
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        0 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    5
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_Temp_Initialization
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _setTemp_Initialization
  5306  0003                     _setTemp_Initialization:	
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _setTemp_Initialization: []
  5310  0003  0008               	return
  5311  0004                     __end_of_setTemp_Initialization:	
  5312                           
  5313                           	psect	text12
  5314  1F7F                     __ptext12:	
  5315 ;; *************** function _Switch_Main *****************
  5316 ;; Defined at:
  5317 ;;		line 72 in file "../src/Switch_B1.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  error           1   30[BANK0 ] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;		None               void
  5324 ;; Registers used:
  5325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;Total ram usage:        2 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:   11
  5338 ;; This function calls:
  5339 ;;		_TouchPower
  5340 ;;		_getMain_All_Error_Status
  5341 ;;		_setMain_Exception
  5342 ;;		_setSw_Main
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _Switch_Main
  5350  1F7F                     _Switch_Main:	
  5351                           
  5352                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5356  1F7F  3000               	movlw	0
  5357  1F80  3192  2287  319F   	fcall	_getMain_All_Error_Status
  5358  1F83  0020               	movlb	0	; select bank0
  5359  1F84  00BD               	movwf	??_Switch_Main
  5360  1F85  083D               	movf	??_Switch_Main,w
  5361  1F86  00BE               	movwf	Switch_Main@error
  5362                           
  5363                           ;Switch_B1.c: 74: if (error != 0) {
  5364  1F87  083E               	movf	Switch_Main@error,w
  5365  1F88  1903               	btfsc	3,2
  5366  1F89  2F8F               	goto	l2382
  5367                           
  5368                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5369  1F8A  0021               	movlb	1	; select bank1
  5370  1F8B  1851               	btfsc	_SwDetect^(0+128),0
  5371  1F8C  2F98               	goto	l7807
  5372                           
  5373                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5374  1F8D  1451               	bsf	_SwDetect^(0+128),0
  5375  1F8E  2F93               	goto	L2
  5376  1F8F                     l2382:	
  5377                           ;Switch_B1.c: 80: }
  5378                           ;Switch_B1.c: 81: } else {
  5379                           
  5380                           ;Switch_B1.c: 78: setMain_Exception(error);
  5381                           
  5382                           
  5383                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5384  1F8F  0021               	movlb	1	; select bank1
  5385  1F90  1C51               	btfss	_SwDetect^(0+128),0
  5386  1F91  2F98               	goto	l7807
  5387                           
  5388                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5389  1F92  1051               	bcf	_SwDetect^(0+128),0
  5390  1F93                     L2:	
  5391                           
  5392                           ;Switch_B1.c: 85: setMain_Exception(error);
  5393  1F93  0020               	movlb	0	; select bank0
  5394  1F94  083E               	movf	Switch_Main@error,w
  5395  1F95  3197  27A4  319F   	fcall	_setMain_Exception
  5396  1F98                     l7807:	
  5397                           
  5398                           ;Switch_B1.c: 87: }
  5399                           ;Switch_B1.c: 88: }
  5400                           ;Switch_B1.c: 91: setSw_Main(1);
  5401  1F98  3001               	movlw	1
  5402  1F99  3180  2043  319F   	fcall	_setSw_Main
  5403                           
  5404                           ;Switch_B1.c: 103: TouchPower();
  5405  1F9C  319E  268F         	fcall	_TouchPower
  5406  1F9E  0008               	return
  5407  1F9F                     __end_of_Switch_Main:	
  5408                           
  5409                           	psect	text13
  5410  0043                     __ptext13:	
  5411 ;; *************** function _setSw_Main *****************
  5412 ;; Defined at:
  5413 ;;		line 137 in file "../src/Switch_B1.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  sw              1    wreg     unsigned char 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  sw              1   19[BANK0 ] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        3 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    9
  5434 ;; This function calls:
  5435 ;;		_SwPointSelect
  5436 ;;		_getSw_KeyStatus
  5437 ;;		_setBuz
  5438 ;;		_setDimmerLights_AdjControl
  5439 ;;		_setDimmerLights_SwOff
  5440 ;;		_setDimmerLights_SwOn
  5441 ;;		_setRF_Learn
  5442 ;; This function is called by:
  5443 ;;		_Switch_Main
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           
  5448                           ;psect for function _setSw_Main
  5449  0043                     _setSw_Main:	
  5450                           
  5451                           ;incstack = 0
  5452                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5453                           ;setSw_Main@sw stored from wreg
  5454  0043  0020               	movlb	0	; select bank0
  5455  0044  00B3               	movwf	setSw_Main@sw
  5456                           
  5457                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5458  0045  0833               	movf	setSw_Main@sw,w
  5459  0046  319C  24D0  3180   	fcall	_SwPointSelect
  5460                           
  5461                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5462  0049  087C               	movf	_Sw,w
  5463  004A  0086               	movwf	6
  5464  004B  3001               	movlw	1	; select bank2/3
  5465  004C  0087               	movwf	7
  5466  004D  1C01               	btfss	1,0
  5467  004E  29A9               	goto	l2392
  5468                           
  5469                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5470  004F  0021               	movlb	1	; select bank1
  5471  0050  1851               	btfsc	_SwDetect^(0+128),0
  5472  0051  286D               	goto	l7273
  5473                           
  5474                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5475  0052  0A7C               	incf	_Sw,w
  5476  0053  0086               	movwf	6
  5477  0054  3001               	movlw	1	; select bank2/3
  5478  0055  0087               	movwf	7
  5479  0056  1081               	bcf	1,1
  5480                           
  5481                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5482  0057  0020               	movlb	0	; select bank0
  5483  0058  0833               	movf	setSw_Main@sw,w
  5484  0059  319D  25D0  3180   	fcall	_getSw_KeyStatus
  5485  005C  3A01               	xorlw	1
  5486  005D  3000               	movlw	0
  5487  005E  1903               	skipnz
  5488  005F  3001               	movlw	1
  5489  0060  0020               	movlb	0	; select bank0
  5490  0061  00B1               	movwf	??_setSw_Main
  5491  0062  087C               	movf	_Sw,w
  5492  0063  0086               	movwf	6
  5493  0064  3001               	movlw	1	; select bank2/3
  5494  0065  0087               	movwf	7
  5495  0066  0DB1               	rlf	??_setSw_Main,f
  5496  0067  0801               	movf	1,w
  5497  0068  0631               	xorwf	??_setSw_Main,w
  5498  0069  39FD               	andlw	-3
  5499  006A  0631               	xorwf	??_setSw_Main,w
  5500  006B  0081               	movwf	1
  5501                           
  5502                           ;Switch_B1.c: 143: } else {
  5503  006C  2882               	goto	l2394
  5504  006D                     l7273:	
  5505                           
  5506                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5507  006D  0A7C               	incf	_Sw,w
  5508  006E  0086               	movwf	6
  5509  006F  3001               	movlw	1	; select bank2/3
  5510  0070  0087               	movwf	7
  5511  0071  1881               	btfsc	1,1
  5512  0072  2882               	goto	l2394
  5513                           
  5514                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5515  0073  0A7C               	incf	_Sw,w
  5516  0074  0086               	movwf	6
  5517  0075  3001               	movlw	1	; select bank2/3
  5518  0076  0087               	movwf	7
  5519  0077  1481               	bsf	1,1
  5520                           
  5521                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5522  0078  087C               	movf	_Sw,w
  5523  0079  0086               	movwf	6
  5524  007A  3001               	movlw	1	; select bank2/3
  5525  007B  0087               	movwf	7
  5526  007C  1081               	bcf	1,1
  5527                           
  5528                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5529  007D  087C               	movf	_Sw,w
  5530  007E  0086               	movwf	6
  5531  007F  3001               	movlw	1	; select bank2/3
  5532  0080  0087               	movwf	7
  5533  0081  1501               	bsf	1,2
  5534  0082                     l2394:	
  5535                           
  5536                           ;Switch_B1.c: 148: }
  5537                           ;Switch_B1.c: 149: }
  5538                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5539  0082  087C               	movf	_Sw,w
  5540  0083  0086               	movwf	6
  5541  0084  3001               	movlw	1	; select bank2/3
  5542  0085  0087               	movwf	7
  5543  0086  1C81               	btfss	1,1
  5544  0087  2952               	goto	l7323
  5545                           
  5546                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5547  0088  087C               	movf	_Sw,w
  5548  0089  0086               	movwf	6
  5549  008A  3001               	movlw	1	; select bank2/3
  5550  008B  0087               	movwf	7
  5551  008C  1901               	btfsc	1,2
  5552  008D  28B0               	goto	l7289
  5553                           
  5554                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5555  008E  3001               	movlw	1
  5556  008F  0020               	movlb	0	; select bank0
  5557  0090  00B1               	movwf	??_setSw_Main
  5558  0091  087C               	movf	_Sw,w
  5559  0092  3E02               	addlw	2
  5560  0093  0086               	movwf	6
  5561  0094  3001               	movlw	1	; select bank2/3
  5562  0095  0087               	movwf	7
  5563  0096  0831               	movf	??_setSw_Main,w
  5564  0097  0781               	addwf	1,f
  5565                           
  5566                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5567  0098  087C               	movf	_Sw,w
  5568  0099  3E02               	addlw	2
  5569  009A  0086               	movwf	6
  5570  009B  3001               	movlw	1	; select bank2/3
  5571  009C  0087               	movwf	7
  5572  009D  3005               	movlw	5
  5573  009E  0201               	subwf	1,w
  5574  009F  1C03               	skipc
  5575  00A0  0008               	return
  5576                           
  5577                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5578  00A1  087C               	movf	_Sw,w
  5579  00A2  3E02               	addlw	2
  5580  00A3  0086               	movwf	6
  5581  00A4  3001               	movlw	1	; select bank2/3
  5582  00A5  0087               	movwf	7
  5583  00A6  0181               	clrf	1
  5584                           
  5585                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5586  00A7  087C               	movf	_Sw,w
  5587  00A8  0086               	movwf	6
  5588  00A9  3001               	movlw	1	; select bank2/3
  5589  00AA  0087               	movwf	7
  5590  00AB  1501               	bsf	1,2
  5591                           
  5592                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5593  00AC  0833               	movf	setSw_Main@sw,w
  5594  00AD  3193  23FB         	fcall	_setDimmerLights_SwOn
  5595                           
  5596                           ;Switch_B1.c: 162: }
  5597                           ;Switch_B1.c: 163: } else {
  5598  00AF  0008               	return
  5599  00B0                     l7289:	
  5600                           
  5601                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5602  00B0  087C               	movf	_Sw,w
  5603  00B1  0086               	movwf	6
  5604  00B2  3001               	movlw	1	; select bank2/3
  5605  00B3  0087               	movwf	7
  5606  00B4  1981               	btfsc	1,3
  5607  00B5  28E2               	goto	l7299
  5608                           
  5609                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5610  00B6  087C               	movf	_Sw,w
  5611  00B7  3E03               	addlw	3
  5612  00B8  0086               	movwf	6
  5613  00B9  3001               	movlw	1	; select bank2/3
  5614  00BA  0087               	movwf	7
  5615  00BB  3001               	movlw	1
  5616  00BC  0781               	addwf	1,f
  5617  00BD  3141               	addfsr 1,1
  5618  00BE  1803               	skipnc
  5619  00BF  0A81               	incf	1,f
  5620                           
  5621                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5622  00C0  087C               	movf	_Sw,w
  5623  00C1  3E03               	addlw	3
  5624  00C2  0086               	movwf	6
  5625  00C3  3001               	movlw	1	; select bank2/3
  5626  00C4  0087               	movwf	7
  5627  00C5  3F40               	moviw [0]fsr1
  5628  00C6  0020               	movlb	0	; select bank0
  5629  00C7  00B1               	movwf	??_setSw_Main
  5630  00C8  3F41               	moviw [1]fsr1
  5631  00C9  00B2               	movwf	??_setSw_Main+1
  5632  00CA  3000               	movlw	0
  5633  00CB  0232               	subwf	??_setSw_Main+1,w
  5634  00CC  3096               	movlw	150
  5635  00CD  1903               	skipnz
  5636  00CE  0231               	subwf	??_setSw_Main,w
  5637  00CF  1C03               	skipc
  5638  00D0  0008               	return
  5639                           
  5640                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5641  00D1  087C               	movf	_Sw,w
  5642  00D2  3E03               	addlw	3
  5643  00D3  0086               	movwf	6
  5644  00D4  3001               	movlw	1	; select bank2/3
  5645  00D5  0087               	movwf	7
  5646  00D6  3000               	movlw	0
  5647  00D7  3FC0               	movwi [0]fsr1
  5648  00D8  3FC1               	movwi [1]fsr1
  5649                           
  5650                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5651  00D9  087C               	movf	_Sw,w
  5652  00DA  0086               	movwf	6
  5653  00DB  3001               	movlw	1	; select bank2/3
  5654  00DC  0087               	movwf	7
  5655  00DD  1581               	bsf	1,3
  5656                           
  5657                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5658  00DE  0833               	movf	setSw_Main@sw,w
  5659  00DF  3192  22ED         	fcall	_setDimmerLights_AdjControl
  5660                           
  5661                           ;Switch_B1.c: 174: }
  5662                           ;Switch_B1.c: 175: } else {
  5663  00E1  0008               	return
  5664  00E2                     l7299:	
  5665                           
  5666                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5667  00E2  087C               	movf	_Sw,w
  5668  00E3  0086               	movwf	6
  5669  00E4  3001               	movlw	1	; select bank2/3
  5670  00E5  0087               	movwf	7
  5671  00E6  1A01               	btfsc	1,4
  5672  00E7  2920               	goto	l7313
  5673                           
  5674                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5675  00E8  087C               	movf	_Sw,w
  5676  00E9  3E05               	addlw	5
  5677  00EA  0086               	movwf	6
  5678  00EB  3001               	movlw	1	; select bank2/3
  5679  00EC  0087               	movwf	7
  5680  00ED  3001               	movlw	1
  5681  00EE  0781               	addwf	1,f
  5682  00EF  3141               	addfsr 1,1
  5683  00F0  1803               	skipnc
  5684  00F1  0A81               	incf	1,f
  5685                           
  5686                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5687  00F2  087C               	movf	_Sw,w
  5688  00F3  3E05               	addlw	5
  5689  00F4  0086               	movwf	6
  5690  00F5  3001               	movlw	1	; select bank2/3
  5691  00F6  0087               	movwf	7
  5692  00F7  3F40               	moviw [0]fsr1
  5693  00F8  0020               	movlb	0	; select bank0
  5694  00F9  00B1               	movwf	??_setSw_Main
  5695  00FA  3F41               	moviw [1]fsr1
  5696  00FB  00B2               	movwf	??_setSw_Main+1
  5697  00FC  3000               	movlw	0
  5698  00FD  0232               	subwf	??_setSw_Main+1,w
  5699  00FE  3096               	movlw	150
  5700  00FF  1903               	skipnz
  5701  0100  0231               	subwf	??_setSw_Main,w
  5702  0101  1C03               	skipc
  5703  0102  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5706  0103  087C               	movf	_Sw,w
  5707  0104  3E05               	addlw	5
  5708  0105  0086               	movwf	6
  5709  0106  3001               	movlw	1	; select bank2/3
  5710  0107  0087               	movwf	7
  5711  0108  3000               	movlw	0
  5712  0109  3FC0               	movwi [0]fsr1
  5713  010A  3FC1               	movwi [1]fsr1
  5714                           
  5715                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5716  010B  087C               	movf	_Sw,w
  5717  010C  0086               	movwf	6
  5718  010D  3001               	movlw	1	; select bank2/3
  5719  010E  0087               	movwf	7
  5720  010F  1601               	bsf	1,4
  5721                           
  5722                           ;Switch_B1.c: 183: setRF_Learn(1);
  5723  0110  3001               	movlw	1
  5724  0111  319E  2651  3180   	fcall	_setRF_Learn
  5725                           
  5726                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5727  0114  0021               	movlb	1	; select bank1
  5728  0115  1EA0               	btfss	_myMain^(0+128),5
  5729  0116  0008               	return
  5730                           
  5731                           ;Switch_B1.c: 186: setBuz(2, 100);
  5732  0117  3064               	movlw	100
  5733  0118  0020               	movlb	0	; select bank0
  5734  0119  00A9               	movwf	setBuz@time
  5735  011A  3000               	movlw	0
  5736  011B  00AA               	movwf	setBuz@time+1
  5737  011C  3002               	movlw	2
  5738  011D  3196  26EF         	fcall	_setBuz
  5739                           
  5740                           ;Switch_B1.c: 187: }
  5741                           ;Switch_B1.c: 189: }
  5742                           ;Switch_B1.c: 190: } else {
  5743  011F  0008               	return
  5744  0120                     l7313:	
  5745                           
  5746                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5747  0120  087C               	movf	_Sw,w
  5748  0121  0086               	movwf	6
  5749  0122  3001               	movlw	1	; select bank2/3
  5750  0123  0087               	movwf	7
  5751  0124  1A81               	btfsc	1,5
  5752  0125  0008               	return
  5753                           
  5754                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5755  0126  087C               	movf	_Sw,w
  5756  0127  3E07               	addlw	7
  5757  0128  0086               	movwf	6
  5758  0129  3001               	movlw	1	; select bank2/3
  5759  012A  0087               	movwf	7
  5760  012B  3001               	movlw	1
  5761  012C  0781               	addwf	1,f
  5762  012D  3141               	addfsr 1,1
  5763  012E  1803               	skipnc
  5764  012F  0A81               	incf	1,f
  5765                           
  5766                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5767  0130  087C               	movf	_Sw,w
  5768  0131  3E07               	addlw	7
  5769  0132  0086               	movwf	6
  5770  0133  3001               	movlw	1	; select bank2/3
  5771  0134  0087               	movwf	7
  5772  0135  3F40               	moviw [0]fsr1
  5773  0136  0020               	movlb	0	; select bank0
  5774  0137  00B1               	movwf	??_setSw_Main
  5775  0138  3F41               	moviw [1]fsr1
  5776  0139  00B2               	movwf	??_setSw_Main+1
  5777  013A  3001               	movlw	1
  5778  013B  0232               	subwf	??_setSw_Main+1,w
  5779  013C  302C               	movlw	44
  5780  013D  1903               	skipnz
  5781  013E  0231               	subwf	??_setSw_Main,w
  5782  013F  1C03               	skipc
  5783  0140  0008               	return
  5784                           
  5785                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5786  0141  087C               	movf	_Sw,w
  5787  0142  3E07               	addlw	7
  5788  0143  0086               	movwf	6
  5789  0144  3001               	movlw	1	; select bank2/3
  5790  0145  0087               	movwf	7
  5791  0146  3000               	movlw	0
  5792  0147  3FC0               	movwi [0]fsr1
  5793  0148  3FC1               	movwi [1]fsr1
  5794                           
  5795                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5796  0149  087C               	movf	_Sw,w
  5797  014A  0086               	movwf	6
  5798  014B  3001               	movlw	1	; select bank2/3
  5799  014C  0087               	movwf	7
  5800  014D  1681               	bsf	1,5
  5801                           
  5802                           ;Switch_B1.c: 198: setRF_Learn(0);
  5803  014E  3000               	movlw	0
  5804  014F  319E  2651         	fcall	_setRF_Learn
  5805                           
  5806                           ;Switch_B1.c: 201: }
  5807                           ;Switch_B1.c: 202: }
  5808                           ;Switch_B1.c: 203: }
  5809                           ;Switch_B1.c: 204: }
  5810                           ;Switch_B1.c: 205: }
  5811                           ;Switch_B1.c: 206: } else {
  5812  0151  0008               	return
  5813  0152                     l7323:	
  5814                           
  5815                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5816  0152  087C               	movf	_Sw,w
  5817  0153  0086               	movwf	6
  5818  0154  3001               	movlw	1	; select bank2/3
  5819  0155  0087               	movwf	7
  5820  0156  1D01               	btfss	1,2
  5821  0157  0008               	return
  5822                           
  5823                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5824  0158  3001               	movlw	1
  5825  0159  0020               	movlb	0	; select bank0
  5826  015A  00B1               	movwf	??_setSw_Main
  5827  015B  087C               	movf	_Sw,w
  5828  015C  3E02               	addlw	2
  5829  015D  0086               	movwf	6
  5830  015E  3001               	movlw	1	; select bank2/3
  5831  015F  0087               	movwf	7
  5832  0160  0831               	movf	??_setSw_Main,w
  5833  0161  0781               	addwf	1,f
  5834                           
  5835                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5836  0162  087C               	movf	_Sw,w
  5837  0163  3E02               	addlw	2
  5838  0164  0086               	movwf	6
  5839  0165  3001               	movlw	1	; select bank2/3
  5840  0166  0087               	movwf	7
  5841  0167  3005               	movlw	5
  5842  0168  0201               	subwf	1,w
  5843  0169  1C03               	skipc
  5844  016A  0008               	return
  5845                           
  5846                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5847  016B  087C               	movf	_Sw,w
  5848  016C  3E02               	addlw	2
  5849  016D  0086               	movwf	6
  5850  016E  3001               	movlw	1	; select bank2/3
  5851  016F  0087               	movwf	7
  5852  0170  0181               	clrf	1
  5853                           
  5854                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5855  0171  087C               	movf	_Sw,w
  5856  0172  0086               	movwf	6
  5857  0173  3001               	movlw	1	; select bank2/3
  5858  0174  0087               	movwf	7
  5859  0175  1101               	bcf	1,2
  5860                           
  5861                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5862  0176  087C               	movf	_Sw,w
  5863  0177  3E03               	addlw	3
  5864  0178  0086               	movwf	6
  5865  0179  3001               	movlw	1	; select bank2/3
  5866  017A  0087               	movwf	7
  5867  017B  3000               	movlw	0
  5868  017C  3FC0               	movwi [0]fsr1
  5869  017D  3FC1               	movwi [1]fsr1
  5870                           
  5871                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5872  017E  087C               	movf	_Sw,w
  5873  017F  0086               	movwf	6
  5874  0180  3001               	movlw	1	; select bank2/3
  5875  0181  0087               	movwf	7
  5876  0182  1181               	bcf	1,3
  5877                           
  5878                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5879  0183  087C               	movf	_Sw,w
  5880  0184  3E05               	addlw	5
  5881  0185  0086               	movwf	6
  5882  0186  3001               	movlw	1	; select bank2/3
  5883  0187  0087               	movwf	7
  5884  0188  3000               	movlw	0
  5885  0189  3FC0               	movwi [0]fsr1
  5886  018A  3FC1               	movwi [1]fsr1
  5887                           
  5888                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5889  018B  087C               	movf	_Sw,w
  5890  018C  0086               	movwf	6
  5891  018D  3001               	movlw	1	; select bank2/3
  5892  018E  0087               	movwf	7
  5893  018F  1201               	bcf	1,4
  5894                           
  5895                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5896  0190  087C               	movf	_Sw,w
  5897  0191  3E07               	addlw	7
  5898  0192  0086               	movwf	6
  5899  0193  3001               	movlw	1	; select bank2/3
  5900  0194  0087               	movwf	7
  5901  0195  3000               	movlw	0
  5902  0196  3FC0               	movwi [0]fsr1
  5903  0197  3FC1               	movwi [1]fsr1
  5904                           
  5905                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5906  0198  087C               	movf	_Sw,w
  5907  0199  0086               	movwf	6
  5908  019A  3001               	movlw	1	; select bank2/3
  5909  019B  0087               	movwf	7
  5910  019C  1281               	bcf	1,5
  5911                           
  5912                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5913  019D  0021               	movlb	1	; select bank1
  5914  019E  1851               	btfsc	_SwDetect^(0+128),0
  5915  019F  29A5               	goto	l7349
  5916                           
  5917                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5918  01A0  0020               	movlb	0	; select bank0
  5919  01A1  0833               	movf	setSw_Main@sw,w
  5920  01A2  3194  24BB  3180   	fcall	_setDimmerLights_SwOff
  5921  01A5                     l7349:	
  5922                           
  5923                           ;Switch_B1.c: 221: }
  5924                           ;Switch_B1.c: 224: setRF_Learn(0);
  5925  01A5  3000               	movlw	0
  5926  01A6  319E  2651         	fcall	_setRF_Learn
  5927                           
  5928                           ;Switch_B1.c: 226: }
  5929                           ;Switch_B1.c: 227: }
  5930                           ;Switch_B1.c: 228: }
  5931                           ;Switch_B1.c: 229: } else {
  5932  01A8  0008               	return
  5933  01A9                     l2392:	
  5934                           
  5935                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5936  01A9  0021               	movlb	1	; select bank1
  5937  01AA  1C20               	btfss	_myMain^(0+128),0
  5938  01AB  0008               	return
  5939                           
  5940                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5941  01AC  087C               	movf	_Sw,w
  5942  01AD  0086               	movwf	6
  5943  01AE  3001               	movlw	1	; select bank2/3
  5944  01AF  0087               	movwf	7
  5945  01B0  1401               	bsf	1,0
  5946  01B1  0008               	return
  5947  01B2                     __end_of_setSw_Main:	
  5948                           
  5949                           	psect	text14
  5950  1E51                     __ptext14:	
  5951 ;; *************** function _setRF_Learn *****************
  5952 ;; Defined at:
  5953 ;;		line 23 in file "../src/RF_Control_B1.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  command         1    wreg     unsigned char 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  command         1    1[BANK0 ] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;		None               void
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;Total ram usage:        2 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    5
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_setSw_Main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _setRF_Learn
  5983  1E51                     _setRF_Learn:	
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5987                           ;setRF_Learn@command stored from wreg
  5988  1E51  0020               	movlb	0	; select bank0
  5989  1E52  00A1               	movwf	setRF_Learn@command
  5990                           
  5991                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5992  1E53  0821               	movf	setRF_Learn@command,w
  5993  1E54  3A01               	xorlw	1
  5994  1E55  3000               	movlw	0
  5995  1E56  1903               	skipnz
  5996  1E57  3001               	movlw	1
  5997  1E58  00A0               	movwf	??_setRF_Learn
  5998  1E59  0EA0               	swapf	??_setRF_Learn,f
  5999  1E5A  0DA0               	rlf	??_setRF_Learn,f
  6000  1E5B  0DA0               	rlf	??_setRF_Learn,f
  6001  1E5C  0021               	movlb	1	; select bank1
  6002  1E5D  083B               	movf	_RF1^(0+128),w
  6003  1E5E  0020               	movlb	0	; select bank0
  6004  1E5F  0620               	xorwf	??_setRF_Learn,w
  6005  1E60  39BF               	andlw	-65
  6006  1E61  0620               	xorwf	??_setRF_Learn,w
  6007  1E62  0021               	movlb	1	; select bank1
  6008  1E63  00BB               	movwf	_RF1^(0+128)
  6009  1E64  0008               	return
  6010  1E65                     __end_of_setRF_Learn:	
  6011                           
  6012                           	psect	text15
  6013  12ED                     __ptext15:	
  6014 ;; *************** function _setDimmerLights_AdjControl *****************
  6015 ;; Defined at:
  6016 ;;		line 558 in file "../src/Dimmer_B1.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  sw              1    wreg     unsigned char 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  sw              1    8[BANK0 ] unsigned char 
  6021 ;;  idle            1    6[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;Total ram usage:        4 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    7
  6038 ;; This function calls:
  6039 ;;		_DimmerLightsPointSelect
  6040 ;;		_getAll_DimmerLights_AdjGO
  6041 ;;		_setDimmerLights_TriggerAdj
  6042 ;; This function is called by:
  6043 ;;		_setSw_Main
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           
  6048                           ;psect for function _setDimmerLights_AdjControl
  6049  12ED                     _setDimmerLights_AdjControl:	
  6050                           
  6051                           ;incstack = 0
  6052                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6053                           ;setDimmerLights_AdjControl@sw stored from wreg
  6054  12ED  0020               	movlb	0	; select bank0
  6055  12EE  00A8               	movwf	setDimmerLights_AdjControl@sw
  6056                           
  6057                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  6058  12EF  0828               	movf	setDimmerLights_AdjControl@sw,w
  6059  12F0  319C  2499  3192   	fcall	_DimmerLightsPointSelect
  6060                           
  6061                           ;Dimmer_B1.c: 560: char idle = 0;
  6062  12F3  0020               	movlb	0	; select bank0
  6063  12F4  01A6               	clrf	setDimmerLights_AdjControl@idle
  6064                           
  6065                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6066  12F5  01A7               	clrf	_setDimmerLights_AdjControl$2408
  6067  12F6  319C  2479  3192   	fcall	_getAll_DimmerLights_AdjGO
  6068  12F9  3A01               	xorlw	1
  6069  12FA  1D03               	skipz
  6070  12FB  2B02               	goto	l6507
  6071  12FC  0022               	movlb	2	; select bank2
  6072  12FD  1CBE               	btfss	_Dimmer^(0+256),1
  6073  12FE  2B02               	goto	l6507
  6074  12FF  0020               	movlb	0	; select bank0
  6075  1300  01A7               	clrf	_setDimmerLights_AdjControl$2408
  6076  1301  0AA7               	incf	_setDimmerLights_AdjControl$2408,f
  6077  1302                     l6507:	
  6078  1302  0020               	movlb	0	; select bank0
  6079  1303  0827               	movf	_setDimmerLights_AdjControl$2408,w
  6080  1304  00A5               	movwf	??_setDimmerLights_AdjControl
  6081  1305  0825               	movf	??_setDimmerLights_AdjControl,w
  6082  1306  00A6               	movwf	setDimmerLights_AdjControl@idle
  6083                           
  6084                           ;Dimmer_B1.c: 564: if (idle == 0) {
  6085  1307  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6086  1308  1D03               	skipz
  6087  1309  0008               	return
  6088                           
  6089                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  6090  130A  086F               	movf	_DimmerLights,w
  6091  130B  3E09               	addlw	9
  6092  130C  0086               	movwf	6
  6093  130D  3001               	movlw	1	; select bank2/3
  6094  130E  0087               	movwf	7
  6095  130F  1F01               	btfss	1,6
  6096  1310  0008               	return
  6097                           
  6098                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  6099  1311  086F               	movf	_DimmerLights,w
  6100  1312  3E09               	addlw	9
  6101  1313  0086               	movwf	6
  6102  1314  3001               	movlw	1	; select bank2/3
  6103  1315  0087               	movwf	7
  6104  1316  1781               	bsf	1,7
  6105                           
  6106                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  6107  1317  086F               	movf	_DimmerLights,w
  6108  1318  0086               	movwf	6
  6109  1319  3001               	movlw	1	; select bank2/3
  6110  131A  0087               	movwf	7
  6111  131B  1681               	bsf	1,5
  6112                           
  6113                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  6114  131C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6115  131D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6116  131E  0828               	movf	setDimmerLights_AdjControl@sw,w
  6117  131F  319F  275F         	fcall	_setDimmerLights_TriggerAdj
  6118  1321  0008               	return
  6119  1322                     __end_of_setDimmerLights_AdjControl:	
  6120                           
  6121                           	psect	text16
  6122  1DD0                     __ptext16:	
  6123 ;; *************** function _getSw_KeyStatus *****************
  6124 ;; Defined at:
  6125 ;;		line 237 in file "../src/Switch_B1.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  sw              1    wreg     unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  sw              1    0[COMMON] unsigned char 
  6130 ;;  status          1    1[BANK0 ] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      unsigned char 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;Total ram usage:        3 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    5
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_setSw_Main
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _getSw_KeyStatus
  6156  1DD0                     _getSw_KeyStatus:	
  6157                           
  6158                           ;Switch_B1.c: 238: char status = 0;
  6159                           
  6160                           ;incstack = 0
  6161                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6162  1DD0  0020               	movlb	0	; select bank0
  6163  1DD1  01A1               	clrf	getSw_KeyStatus@status
  6164                           
  6165                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6166  1DD2  01A2               	clrf	_getSw_KeyStatus$6543
  6167  1DD3  0AA2               	incf	_getSw_KeyStatus$6543,f
  6168  1DD4  1F0C               	btfss	12,6	;volatile
  6169  1DD5  1A0C               	btfsc	12,4	;volatile
  6170  1DD6  2DDB               	goto	l6699
  6171  1DD7  1C0C               	btfss	12,0	;volatile
  6172  1DD8  1B8C               	btfsc	12,7	;volatile
  6173  1DD9  2DDB               	goto	l6699
  6174  1DDA  01A2               	clrf	_getSw_KeyStatus$6543
  6175  1DDB                     l6699:	
  6176  1DDB  0822               	movf	_getSw_KeyStatus$6543,w
  6177  1DDC  00A0               	movwf	??_getSw_KeyStatus
  6178  1DDD  0820               	movf	??_getSw_KeyStatus,w
  6179  1DDE  00A1               	movwf	getSw_KeyStatus@status
  6180                           
  6181                           ;Switch_B1.c: 261: return status;
  6182  1DDF  0821               	movf	getSw_KeyStatus@status,w
  6183  1DE0  0008               	return
  6184  1DE1                     __end_of_getSw_KeyStatus:	
  6185                           
  6186                           	psect	text17
  6187  1CD0                     __ptext17:	
  6188 ;; *************** function _SwPointSelect *****************
  6189 ;; Defined at:
  6190 ;;		line 25 in file "../src/Switch_B1.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  sw              1    wreg     unsigned char 
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;  sw              1    1[BANK0 ] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;		None               void
  6197 ;; Registers used:
  6198 ;;		wreg
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;Total ram usage:        2 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    5
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_setSw_Main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _SwPointSelect
  6220  1CD0                     _SwPointSelect:	
  6221                           
  6222                           ;incstack = 0
  6223                           ; Regs used in _SwPointSelect: [wreg]
  6224                           ;SwPointSelect@sw stored from wreg
  6225  1CD0  0020               	movlb	0	; select bank0
  6226  1CD1  00A1               	movwf	SwPointSelect@sw
  6227                           
  6228                           ;Switch_B1.c: 28: if (sw == 1) {
  6229  1CD2  0821               	movf	SwPointSelect@sw,w
  6230  1CD3  3A01               	xorlw	1
  6231  1CD4  1D03               	skipz
  6232  1CD5  0008               	return
  6233                           
  6234                           ;Switch_B1.c: 29: Sw = &Sw1;
  6235  1CD6  30D4               	movlw	_Sw1& (0+255)
  6236  1CD7  00A0               	movwf	??_SwPointSelect
  6237  1CD8  0820               	movf	??_SwPointSelect,w
  6238  1CD9  00FC               	movwf	_Sw
  6239  1CDA  0008               	return
  6240  1CDB                     __end_of_SwPointSelect:	
  6241                           
  6242                           	psect	text18
  6243  17A4                     __ptext18:	
  6244 ;; *************** function _setMain_Exception *****************
  6245 ;; Defined at:
  6246 ;;		line 286 in file "../src/Main_B1.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  command         1    wreg     unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  command         1   28[BANK0 ] unsigned char 
  6251 ;;  status          1   27[BANK0 ] unsigned char 
  6252 ;;  buz             1   24[BANK0 ] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        7 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:   10
  6269 ;; This function calls:
  6270 ;;		_getDimmerLights_Line
  6271 ;;		_getMain_LightsStatus
  6272 ;;		_setBuz
  6273 ;;		_setDimmerLights_ErrorClose
  6274 ;;		_setLED
  6275 ;; This function is called by:
  6276 ;;		_Switch_Main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           
  6281                           ;psect for function _setMain_Exception
  6282  17A4                     _setMain_Exception:	
  6283                           
  6284                           ;incstack = 0
  6285                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6286                           ;setMain_Exception@command stored from wreg
  6287  17A4  0020               	movlb	0	; select bank0
  6288  17A5  00BC               	movwf	setMain_Exception@command
  6289                           
  6290                           ;Main_B1.c: 287: char status = 0, buz = 0;
  6291  17A6  01BB               	clrf	setMain_Exception@status
  6292  17A7  01B8               	clrf	setMain_Exception@buz
  6293                           
  6294                           ;Main_B1.c: 304: status = command == 3 ? getDimmerLights_Line() : 255;
  6295  17A8  083C               	movf	setMain_Exception@command,w
  6296  17A9  3A03               	xorlw	3
  6297  17AA  1903               	skipnz
  6298  17AB  2FB0               	goto	l7023
  6299  17AC  30FF               	movlw	255
  6300  17AD  00B9               	movwf	_setMain_Exception$3731
  6301  17AE  3000               	movlw	0
  6302  17AF  2FB9               	goto	L3
  6303  17B0                     l7023:	
  6304  17B0  319C  24C5  3197   	fcall	_getDimmerLights_Line
  6305  17B3  0020               	movlb	0	; select bank0
  6306  17B4  00B6               	movwf	??_setMain_Exception
  6307  17B5  01B7               	clrf	??_setMain_Exception+1
  6308  17B6  0836               	movf	??_setMain_Exception,w
  6309  17B7  00B9               	movwf	_setMain_Exception$3731
  6310  17B8  0837               	movf	??_setMain_Exception+1,w
  6311  17B9                     L3:	
  6312  17B9  00BA               	movwf	_setMain_Exception$3731+1
  6313  17BA  0839               	movf	_setMain_Exception$3731,w
  6314  17BB  00B6               	movwf	??_setMain_Exception
  6315  17BC  0836               	movf	??_setMain_Exception,w
  6316  17BD  00BB               	movwf	setMain_Exception@status
  6317                           
  6318                           ;Main_B1.c: 306: if (command == 0) {
  6319  17BE  08BC               	movf	setMain_Exception@command,f
  6320  17BF  1D03               	skipz
  6321  17C0  2FC3               	goto	l7031
  6322                           
  6323                           ;Main_B1.c: 307: setLED(99, 10);
  6324  17C1  300A               	movlw	10
  6325  17C2  2FC5               	goto	L4
  6326  17C3                     l7031:	
  6327                           ;Main_B1.c: 308: } else {
  6328                           
  6329                           
  6330                           ;Main_B1.c: 309: setLED(99, 11);
  6331  17C3  300B               	movlw	11
  6332  17C4  0020               	movlb	0	; select bank0
  6333  17C5                     L4:	
  6334  17C5  00B6               	movwf	??_setMain_Exception
  6335  17C6  0836               	movf	??_setMain_Exception,w
  6336  17C7  00A2               	movwf	setLED@command
  6337  17C8  3063               	movlw	99
  6338  17C9  3193  2322  3197   	fcall	_setLED
  6339                           
  6340                           ;Main_B1.c: 310: }
  6341                           ;Main_B1.c: 312: if (command != 0) {
  6342  17CC  0020               	movlb	0	; select bank0
  6343  17CD  083C               	movf	setMain_Exception@command,w
  6344  17CE  1903               	btfsc	3,2
  6345  17CF  0008               	return
  6346                           
  6347                           ;Main_B1.c: 313: switch (command) {
  6348  17D0  2FF1               	goto	l7047
  6349  17D1                     l7037:	
  6350                           ;Main_B1.c: 314: case 2:
  6351                           
  6352                           
  6353                           ;Main_B1.c: 315: if (getMain_LightsStatus() == 1) {
  6354  17D1  3191  2199  3197   	fcall	_getMain_LightsStatus
  6355  17D4  3A01               	xorlw	1
  6356  17D5  1D03               	skipz
  6357  17D6  2FFA               	goto	l7049
  6358                           
  6359                           ;Main_B1.c: 316: setBuz(10, 300);
  6360  17D7  302C               	movlw	44
  6361  17D8  0020               	movlb	0	; select bank0
  6362  17D9  00A9               	movwf	setBuz@time
  6363  17DA  3001               	movlw	1
  6364  17DB  00AA               	movwf	setBuz@time+1
  6365  17DC  300A               	movlw	10
  6366  17DD  3196  26EF  3197   	fcall	_setBuz
  6367                           
  6368                           ;Main_B1.c: 317: }
  6369                           ;Main_B1.c: 318: break;
  6370  17E0  2FFA               	goto	l7049
  6371  17E1                     l7041:	
  6372                           ;Main_B1.c: 319: case 3:
  6373                           
  6374                           
  6375                           ;Main_B1.c: 320: if (getMain_LightsStatus() == 1) {
  6376  17E1  3191  2199  3197   	fcall	_getMain_LightsStatus
  6377  17E4  3A01               	xorlw	1
  6378  17E5  1D03               	skipz
  6379  17E6  2FFA               	goto	l7049
  6380                           
  6381                           ;Main_B1.c: 321: setBuz(5, 300);
  6382  17E7  302C               	movlw	44
  6383  17E8  0020               	movlb	0	; select bank0
  6384  17E9  00A9               	movwf	setBuz@time
  6385  17EA  3001               	movlw	1
  6386  17EB  00AA               	movwf	setBuz@time+1
  6387  17EC  3005               	movlw	5
  6388  17ED  3196  26EF  3197   	fcall	_setBuz
  6389                           
  6390                           ;Main_B1.c: 324: }
  6391                           
  6392                           ;Main_B1.c: 322: }
  6393                           ;Main_B1.c: 323: break;
  6394  17F0  2FFA               	goto	l7049
  6395  17F1                     l7047:	
  6396  17F1  0020               	movlb	0	; select bank0
  6397  17F2  083C               	movf	setMain_Exception@command,w
  6398                           
  6399                           ; Switch size 1, requested type "space"
  6400                           ; Number of cases is 2, Range of values is 2 to 3
  6401                           ; switch strategies available:
  6402                           ; Name         Instructions Cycles
  6403                           ; simple_byte            7     4 (average)
  6404                           ; direct_byte           13     9 (fixed)
  6405                           ; jumptable            263     9 (fixed)
  6406                           ;	Chosen strategy is simple_byte
  6407  17F3  3A02               	xorlw	2	; case 2
  6408  17F4  1903               	skipnz
  6409  17F5  2FD1               	goto	l7037
  6410  17F6  3A01               	xorlw	1	; case 3
  6411  17F7  1903               	skipnz
  6412  17F8  2FE1               	goto	l7041
  6413  17F9  2FFA               	goto	l7049
  6414  17FA                     l7049:	
  6415                           
  6416                           ;Main_B1.c: 325: setDimmerLights_ErrorClose(status);
  6417  17FA  0020               	movlb	0	; select bank0
  6418  17FB  083B               	movf	setMain_Exception@status,w
  6419  17FC  3196  263F         	fcall	_setDimmerLights_ErrorClose
  6420  17FE  0020               	movlb	0	; select bank0
  6421  17FF  0008               	return
  6422  1800                     __end_of_setMain_Exception:	
  6423                           
  6424                           	psect	text19
  6425  1CC5                     __ptext19:	
  6426 ;; *************** function _getDimmerLights_Line *****************
  6427 ;; Defined at:
  6428 ;;		line 707 in file "../src/Dimmer_B1.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  line            1    0[BANK0 ] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      unsigned char 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    5
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_setMain_Exception
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _getDimmerLights_Line
  6458  1CC5                     _getDimmerLights_Line:	
  6459                           
  6460                           ;Dimmer_B1.c: 708: char line = 0;
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6464  1CC5  0020               	movlb	0	; select bank0
  6465  1CC6  01A0               	clrf	getDimmerLights_Line@line
  6466                           
  6467                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  6468  1CC7  0023               	movlb	3	; select bank3
  6469  1CC8  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6470  1CC9  2CCD               	goto	l6529
  6471                           
  6472                           ;Dimmer_B1.c: 711: line = 1;
  6473  1CCA  0020               	movlb	0	; select bank0
  6474  1CCB  01A0               	clrf	getDimmerLights_Line@line
  6475  1CCC  0AA0               	incf	getDimmerLights_Line@line,f
  6476  1CCD                     l6529:	
  6477                           
  6478                           ;Dimmer_B1.c: 712: }
  6479                           ;Dimmer_B1.c: 724: return line;
  6480  1CCD  0020               	movlb	0	; select bank0
  6481  1CCE  0820               	movf	getDimmerLights_Line@line,w
  6482  1CCF  0008               	return
  6483  1CD0                     __end_of_getDimmerLights_Line:	
  6484                           
  6485                           	psect	text20
  6486  0800                     __ptext20:	
  6487 ;; *************** function _Switch_Initialization *****************
  6488 ;; Defined at:
  6489 ;;		line 46 in file "../src/Switch_B1.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;Total ram usage:        0 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    8
  6510 ;; This function calls:
  6511 ;;		_TouchPower
  6512 ;;		_setSw_Initialization
  6513 ;; This function is called by:
  6514 ;;		_main
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _Switch_Initialization
  6520  0800                     _Switch_Initialization:	
  6521                           
  6522                           ;Switch_B1.c: 47: TouchPower();
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6526  0800  319E  268F  3188   	fcall	_TouchPower
  6527                           
  6528                           ;Switch_B1.c: 49: WPUB1 = 0;
  6529  0803  0024               	movlb	4	; select bank4
  6530  0804  108D               	bcf	13,1	;volatile
  6531                           
  6532                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6533  0805  3001               	movlw	1
  6534  0806  319D  258D         	fcall	_setSw_Initialization
  6535  0808  0008               	return
  6536  0809                     __end_of_Switch_Initialization:	
  6537                           
  6538                           	psect	text21
  6539  1D8D                     __ptext21:	
  6540 ;; *************** function _setSw_Initialization *****************
  6541 ;; Defined at:
  6542 ;;		line 109 in file "../src/Switch_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  sw              1    wreg     unsigned char 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  sw              1    4[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        1 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    7
  6563 ;; This function calls:
  6564 ;;		_setLED
  6565 ;; This function is called by:
  6566 ;;		_Switch_Initialization
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _setSw_Initialization
  6572  1D8D                     _setSw_Initialization:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6576                           ;setSw_Initialization@sw stored from wreg
  6577  1D8D  0020               	movlb	0	; select bank0
  6578  1D8E  00A4               	movwf	setSw_Initialization@sw
  6579                           
  6580                           ;Switch_B1.c: 110: setLED(sw, 1);
  6581  1D8F  01A2               	clrf	setLED@command
  6582  1D90  0AA2               	incf	setLED@command,f
  6583  1D91  0824               	movf	setSw_Initialization@sw,w
  6584  1D92  3193  2322  319D   	fcall	_setLED
  6585                           
  6586                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6587  1D95  0020               	movlb	0	; select bank0
  6588  1D96  01A2               	clrf	setLED@command
  6589  1D97  0AA2               	incf	setLED@command,f
  6590  1D98  0824               	movf	setSw_Initialization@sw,w
  6591  1D99  3E01               	addlw	1
  6592  1D9A  3193  2322         	fcall	_setLED
  6593  1D9C  0008               	return
  6594  1D9D                     __end_of_setSw_Initialization:	
  6595                           
  6596                           	psect	text22
  6597  1E8F                     __ptext22:	
  6598 ;; *************** function _TouchPower *****************
  6599 ;; Defined at:
  6600 ;;		line 10 in file "../src/Switch_B1.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;		None
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;		None
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        0 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    6
  6621 ;; This function calls:
  6622 ;;		_Timeout_Counter
  6623 ;;		_set_TimeoutCleared
  6624 ;; This function is called by:
  6625 ;;		_Switch_Initialization
  6626 ;;		_Switch_Main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function _TouchPower
  6632  1E8F                     _TouchPower:	
  6633                           
  6634                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6638  1E8F  0020               	movlb	0	; select bank0
  6639  1E90  180D               	btfsc	13,0	;volatile
  6640  1E91  0008               	return
  6641                           
  6642                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6643  1E92  0021               	movlb	1	; select bank1
  6644  1E93  1C20               	btfss	_myMain^(0+128),0
  6645  1E94  0008               	return
  6646  1E95  2E9B               	goto	l7255
  6647  1E96                     l2368:	
  6648                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6649                           
  6650                           
  6651                           ;Switch_B1.c: 14: RB0 = 1;
  6652  1E96  0020               	movlb	0	; select bank0
  6653  1E97  140D               	bsf	13,0	;volatile
  6654                           
  6655                           ;Switch_B1.c: 15: Timeout_Counter();
  6656  1E98  319E  2665  319E   	fcall	_Timeout_Counter
  6657  1E9B                     l7255:	
  6658  1E9B  0020               	movlb	0	; select bank0
  6659  1E9C  180D               	btfsc	13,0	;volatile
  6660  1E9D  2EA1               	goto	l7259
  6661  1E9E  0021               	movlb	1	; select bank1
  6662  1E9F  1D2C               	btfss	(_myMain^(0+128)+12),2
  6663  1EA0  2E96               	goto	l2368
  6664  1EA1                     l7259:	
  6665                           
  6666                           ;Switch_B1.c: 16: }
  6667                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6668  1EA1  319C  2431         	fcall	_set_TimeoutCleared
  6669  1EA3  0008               	return
  6670  1EA4                     __end_of_TouchPower:	
  6671                           
  6672                           	psect	text23
  6673  1C04                     __ptext23:	
  6674 ;; *************** function _RF_Main *****************
  6675 ;; Defined at:
  6676 ;;		line 16 in file "../src/RF_Control_B1.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;		None               void
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:   14
  6697 ;; This function calls:
  6698 ;;		_setRF_Main
  6699 ;; This function is called by:
  6700 ;;		_main
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _RF_Main
  6706  1C04                     _RF_Main:	
  6707                           
  6708                           ;RF_Control_B1.c: 18: setRF_Main();
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6712  1C04  3185  2523         	fcall	_setRF_Main
  6713  1C06  0008               	return
  6714  1C07                     __end_of_RF_Main:	
  6715                           
  6716                           	psect	text24
  6717  0523                     __ptext24:	
  6718 ;; *************** function _setRF_Main *****************
  6719 ;; Defined at:
  6720 ;;		line 52 in file "../src/RF_Control_B1.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  error           1    2[BANK1 ] unsigned char 
  6725 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6726 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        4 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:   13
  6743 ;; This function calls:
  6744 ;;		_CC2500_RxData
  6745 ;;		_CC2500_TxData
  6746 ;;		_CC2500_WriteCommand
  6747 ;;		_getBuz_GO
  6748 ;;		_getMain_All_Error_Status
  6749 ;;		_getRF_KeyStatus
  6750 ;;		_getRxData
  6751 ;; This function is called by:
  6752 ;;		_RF_Main
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _setRF_Main
  6758  0523                     _setRF_Main:	
  6759                           
  6760                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6761                           
  6762                           ;incstack = 0
  6763                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6764  0523  0021               	movlb	1	; select bank1
  6765  0524  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6766  0525  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6767  0526  01EA               	clrf	setRF_Main@error^(0+128)
  6768                           
  6769                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6770  0527  1C3B               	btfss	_RF1^(0+128),0
  6771  0528  2E06               	goto	l2000
  6772                           
  6773                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6774  0529  319D  25AE  3185   	fcall	_getBuz_GO
  6775  052C  0020               	movlb	0	; select bank0
  6776  052D  0821               	movf	?_getBuz_GO+1,w
  6777  052E  0420               	iorwf	?_getBuz_GO,w
  6778  052F  1D03               	skipz
  6779  0530  0008               	return
  6780                           
  6781                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6782  0531  3000               	movlw	0
  6783  0532  3192  2287  3185   	fcall	_getMain_All_Error_Status
  6784  0535  3800               	iorlw	0
  6785  0536  1D03               	skipz
  6786  0537  2D4C               	goto	l2002
  6787                           
  6788                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6789  0538  319D  25BF  3185   	fcall	_getRF_KeyStatus
  6790  053B  3A01               	xorlw	1
  6791  053C  3000               	movlw	0
  6792  053D  1903               	skipnz
  6793  053E  3001               	movlw	1
  6794  053F  0020               	movlb	0	; select bank0
  6795  0540  00ED               	movwf	??_setRF_Main
  6796  0541  0CED               	rrf	??_setRF_Main,f
  6797  0542  0CED               	rrf	??_setRF_Main,f
  6798  0543  0021               	movlb	1	; select bank1
  6799  0544  083B               	movf	_RF1^(0+128),w
  6800  0545  0020               	movlb	0	; select bank0
  6801  0546  066D               	xorwf	??_setRF_Main,w
  6802  0547  397F               	andlw	-129
  6803  0548  066D               	xorwf	??_setRF_Main,w
  6804  0549  0021               	movlb	1	; select bank1
  6805  054A  00BB               	movwf	_RF1^(0+128)
  6806                           
  6807                           ;RF_Control_B1.c: 65: } else {
  6808  054B  2D4E               	goto	l2003
  6809  054C                     l2002:	
  6810                           
  6811                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6812  054C  0021               	movlb	1	; select bank1
  6813  054D  13BB               	bcf	_RF1^(0+128),7
  6814  054E                     l2003:	
  6815                           
  6816                           ;RF_Control_B1.c: 70: }
  6817                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6818  054E  1BBB               	btfsc	_RF1^(0+128),7
  6819  054F  1B3B               	btfsc	_RF1^(0+128),6
  6820  0550  2D56               	goto	l2004
  6821                           
  6822                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6823  0551  01BD               	clrf	(_RF1^(0+128)+2)
  6824  0552  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6825                           
  6826                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6827  0553  14BC               	bsf	(_RF1^(0+128)+1),1
  6828                           
  6829                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6830  0554  11BB               	bcf	_RF1^(0+128),3
  6831                           
  6832                           ;RF_Control_B1.c: 76: } else {
  6833  0555  0008               	return
  6834  0556                     l2004:	
  6835                           
  6836                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6837  0556  18BC               	btfsc	(_RF1^(0+128)+1),1
  6838  0557  1B3B               	btfsc	_RF1^(0+128),6
  6839  0558  2D6D               	goto	l7171
  6840                           
  6841                           ;RF_Control_B1.c: 78: RF1.Count++;
  6842  0559  3001               	movlw	1
  6843  055A  07BD               	addwf	(_RF1^(0+128)+2),f
  6844  055B  3000               	movlw	0
  6845  055C  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6846                           
  6847                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6848  055D  3002               	movlw	2
  6849  055E  3EBB               	addlw	_RF1& (0+255)
  6850  055F  0086               	movwf	6
  6851  0560  0187               	clrf	7
  6852  0561  3F40               	moviw [0]fsr1
  6853  0562  0642               	xorwf	(_RF1^(0+128)+7),w
  6854  0563  1D03               	skipz
  6855  0564  2D67               	goto	u6685
  6856  0565  3F41               	moviw [1]fsr1
  6857  0566  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6858  0567                     u6685:	
  6859  0567  1D03               	skipz
  6860  0568  2DD3               	goto	l7223
  6861                           
  6862                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6863  0569  01BD               	clrf	(_RF1^(0+128)+2)
  6864  056A  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6865                           
  6866                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6867  056B  10BC               	bcf	(_RF1^(0+128)+1),1
  6868                           
  6869                           ;RF_Control_B1.c: 82: }
  6870                           ;RF_Control_B1.c: 83: } else {
  6871  056C  2DD3               	goto	l7223
  6872  056D                     l7171:	
  6873                           
  6874                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6875  056D  01BD               	clrf	(_RF1^(0+128)+2)
  6876  056E  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6877                           
  6878                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6879  056F  10BC               	bcf	(_RF1^(0+128)+1),1
  6880                           
  6881                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6882  0570  193B               	btfsc	_RF1^(0+128),2
  6883  0571  1B3B               	btfsc	_RF1^(0+128),6
  6884  0572  2D86               	goto	l2009
  6885                           
  6886                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6887  0573  113B               	bcf	_RF1^(0+128),2
  6888                           
  6889                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6890  0574  11BB               	bcf	_RF1^(0+128),3
  6891                           
  6892                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6893  0575  10BB               	bcf	_RF1^(0+128),1
  6894                           
  6895                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1 || RF1.ReceiveGO == 1) {
  6896  0576  19BB               	btfsc	_RF1^(0+128),3
  6897  0577  2D7A               	goto	l7183
  6898  0578  1CBB               	btfss	_RF1^(0+128),1
  6899  0579  2D82               	goto	l2010
  6900  057A                     l7183:	
  6901                           
  6902                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  6903  057A  3036               	movlw	54
  6904  057B  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  6905                           
  6906                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3A);
  6907  057E  303A               	movlw	58
  6908  057F  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  6909  0582                     l2010:	
  6910                           
  6911                           ;RF_Control_B1.c: 99: }
  6912                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6913  0582  3189  21E2  3185   	fcall	_CC2500_TxData
  6914                           
  6915                           ;RF_Control_B1.c: 102: } else {
  6916  0585  2DD3               	goto	l7223
  6917  0586                     l2009:	
  6918                           
  6919                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  6920  0586  1DBB               	btfss	_RF1^(0+128),3
  6921  0587  2DC2               	goto	l2014
  6922                           
  6923                           ;RF_Control_B1.c: 106: CC2500_RxData();
  6924  0588  318B  2373  3185   	fcall	_CC2500_RxData
  6925                           
  6926                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6927  058B  0021               	movlb	1	; select bank1
  6928  058C  1CBB               	btfss	_RF1^(0+128),1
  6929  058D  2DD3               	goto	l7223
  6930                           
  6931                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6932  058E  10BB               	bcf	_RF1^(0+128),1
  6933                           
  6934                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6935  058F  12BC               	bcf	(_RF1^(0+128)+1),5
  6936                           
  6937                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6938  0590  01C5               	clrf	(_RF1^(0+128)+10)
  6939  0591  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6940                           
  6941                           ;RF_Control_B1.c: 119: getRxData();
  6942  0592  318D  256E  3185   	fcall	_getRxData
  6943                           
  6944                           ;RF_Control_B1.c: 121: getRxData();
  6945  0595  318D  256E  3185   	fcall	_getRxData
  6946                           
  6947                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6948  0598  0021               	movlb	1	; select bank1
  6949  0599  14BC               	bsf	(_RF1^(0+128)+1),1
  6950                           
  6951                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6952  059A  1DBC               	btfss	(_RF1^(0+128)+1),3
  6953  059B  2DA9               	goto	l7207
  6954                           
  6955                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  6956  059C  3000               	movlw	0
  6957  059D  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6958  059E  300B               	movlw	11
  6959  059F  1903               	skipnz
  6960  05A0  0242               	subwf	(_RF1^(0+128)+7),w
  6961  05A1  1C03               	skipc
  6962  05A2  2DA7               	goto	l7205
  6963                           
  6964                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  6965  05A3  300A               	movlw	10
  6966  05A4  00C2               	movwf	(_RF1^(0+128)+7)
  6967  05A5  3000               	movlw	0
  6968  05A6  00C3               	movwf	(_RF1^(0+128)+8)
  6969  05A7                     l7205:	
  6970                           
  6971                           ;RF_Control_B1.c: 127: }
  6972                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6973  05A7  01BF               	clrf	(_RF1^(0+128)+4)
  6974                           
  6975                           ;RF_Control_B1.c: 129: } else {
  6976  05A8  2DD3               	goto	l7223
  6977  05A9                     l7207:	
  6978                           
  6979                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6980  05A9  3001               	movlw	1
  6981  05AA  0020               	movlb	0	; select bank0
  6982  05AB  00ED               	movwf	??_setRF_Main
  6983  05AC  086D               	movf	??_setRF_Main,w
  6984  05AD  0021               	movlb	1	; select bank1
  6985  05AE  07BF               	addwf	(_RF1^(0+128)+4),f
  6986                           
  6987                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6988  05AF  083F               	movf	(_RF1^(0+128)+4),w
  6989  05B0  3A02               	xorlw	2
  6990  05B1  1D03               	skipz
  6991  05B2  2DD3               	goto	l7223
  6992                           
  6993                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6994  05B3  01BF               	clrf	(_RF1^(0+128)+4)
  6995                           
  6996                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6997  05B4  01C0               	clrf	(_RF1^(0+128)+5)
  6998  05B5  01C1               	clrf	((_RF1+1)^(0+128)+5)
  6999                           
  7000                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  7001  05B6  3000               	movlw	0
  7002  05B7  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7003  05B8  30C8               	movlw	200
  7004  05B9  1903               	skipnz
  7005  05BA  0242               	subwf	(_RF1^(0+128)+7),w
  7006  05BB  1803               	skipnc
  7007  05BC  2DD3               	goto	l7223
  7008                           
  7009                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  7010  05BD  300A               	movlw	10
  7011  05BE  07C2               	addwf	(_RF1^(0+128)+7),f
  7012  05BF  3000               	movlw	0
  7013  05C0  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7014                           
  7015                           ;RF_Control_B1.c: 136: }
  7016                           ;RF_Control_B1.c: 137: }
  7017                           ;RF_Control_B1.c: 138: }
  7018                           ;RF_Control_B1.c: 139: }
  7019                           ;RF_Control_B1.c: 140: } else {
  7020  05C1  2DD3               	goto	l7223
  7021  05C2                     l2014:	
  7022                           
  7023                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7024  05C2  1DBB               	btfss	_RF1^(0+128),3
  7025  05C3  18BB               	btfsc	_RF1^(0+128),1
  7026  05C4  2DD3               	goto	l7223
  7027                           
  7028                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  7029  05C5  15BB               	bsf	_RF1^(0+128),3
  7030                           
  7031                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  7032  05C6  16BC               	bsf	(_RF1^(0+128)+1),5
  7033                           
  7034                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  7035  05C7  3036               	movlw	54
  7036  05C8  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7037                           
  7038                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7039  05CB  303A               	movlw	58
  7040  05CC  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7041                           
  7042                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7043  05CF  3034               	movlw	52
  7044  05D0  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7045  05D3                     l7223:	
  7046                           
  7047                           ;RF_Control_B1.c: 151: }
  7048                           ;RF_Control_B1.c: 153: }
  7049                           ;RF_Control_B1.c: 154: }
  7050                           ;RF_Control_B1.c: 155: }
  7051                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7052  05D3  0021               	movlb	1	; select bank1
  7053  05D4  1DBB               	btfss	_RF1^(0+128),3
  7054  05D5  2DF4               	goto	l7235
  7055                           
  7056                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7057  05D6  3001               	movlw	1
  7058  05D7  07C0               	addwf	(_RF1^(0+128)+5),f
  7059  05D8  3000               	movlw	0
  7060  05D9  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7061                           
  7062                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7063  05DA  3005               	movlw	5
  7064  05DB  3EBB               	addlw	_RF1& (0+255)
  7065  05DC  0086               	movwf	6
  7066  05DD  0187               	clrf	7
  7067  05DE  3F40               	moviw [0]fsr1
  7068  05DF  3A64               	xorlw	100
  7069  05E0  1D03               	skipz
  7070  05E1  2DE4               	goto	u6825
  7071  05E2  3F41               	moviw [1]fsr1
  7072  05E3  3A00               	xorlw	0
  7073  05E4                     u6825:	
  7074  05E4  1D03               	skipz
  7075  05E5  2DF4               	goto	l7235
  7076                           
  7077                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7078  05E6  01C0               	clrf	(_RF1^(0+128)+5)
  7079  05E7  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7080                           
  7081                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7082  05E8  01BF               	clrf	(_RF1^(0+128)+4)
  7083                           
  7084                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7085  05E9  3000               	movlw	0
  7086  05EA  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7087  05EB  300B               	movlw	11
  7088  05EC  1903               	skipnz
  7089  05ED  0242               	subwf	(_RF1^(0+128)+7),w
  7090  05EE  1C03               	skipc
  7091  05EF  2DF4               	goto	l7235
  7092                           
  7093                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7094  05F0  300A               	movlw	10
  7095  05F1  02C2               	subwf	(_RF1^(0+128)+7),f
  7096  05F2  3000               	movlw	0
  7097  05F3  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7098  05F4                     l7235:	
  7099                           
  7100                           ;RF_Control_B1.c: 163: }
  7101                           ;RF_Control_B1.c: 164: }
  7102                           ;RF_Control_B1.c: 165: }
  7103                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7104  05F4  1EBC               	btfss	(_RF1^(0+128)+1),5
  7105  05F5  0008               	return
  7106                           
  7107                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7108  05F6  3001               	movlw	1
  7109  05F7  07C5               	addwf	(_RF1^(0+128)+10),f
  7110  05F8  3000               	movlw	0
  7111  05F9  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7112                           
  7113                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7114  05FA  3075               	movlw	117
  7115  05FB  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7116  05FC  3030               	movlw	48
  7117  05FD  1903               	skipnz
  7118  05FE  0245               	subwf	(_RF1^(0+128)+10),w
  7119  05FF  1C03               	skipc
  7120  0600  0008               	return
  7121                           
  7122                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7123  0601  01C5               	clrf	(_RF1^(0+128)+10)
  7124  0602  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7125                           
  7126                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7127  0603  11BB               	bcf	_RF1^(0+128),3
  7128                           
  7129                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7130  0604  10BB               	bcf	_RF1^(0+128),1
  7131                           
  7132                           ;RF_Control_B1.c: 172: }
  7133                           ;RF_Control_B1.c: 173: }
  7134                           ;RF_Control_B1.c: 174: }
  7135                           ;RF_Control_B1.c: 175: }
  7136                           ;RF_Control_B1.c: 182: } else {
  7137  0605  0008               	return
  7138  0606                     l2000:	
  7139                           
  7140                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7141  0606  1C20               	btfss	_myMain^(0+128),0
  7142  0607  0008               	return
  7143                           
  7144                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7145  0608  143B               	bsf	_RF1^(0+128),0
  7146  0609  0008               	return
  7147  060A                     __end_of_setRF_Main:	
  7148                           
  7149                           	psect	text25
  7150  0D6E                     __ptext25:	
  7151 ;; *************** function _getRxData *****************
  7152 ;; Defined at:
  7153 ;;		line 274 in file "../src/RF_Control_B1.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  error           1   76[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        2 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:   12
  7174 ;; This function calls:
  7175 ;;		_getMain_All_Error_Status
  7176 ;;		_setControl_Lights_Table
  7177 ;;		_setLog_Code
  7178 ;;		_setTxData
  7179 ;; This function is called by:
  7180 ;;		_setRF_Main
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function _getRxData
  7186  0D6E                     _getRxData:	
  7187                           
  7188                           ;RF_Control_B1.c: 275: char error = getMain_All_Error_Status(0);
  7189                           
  7190                           ;incstack = 0
  7191                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7192  0D6E  3000               	movlw	0
  7193  0D6F  3192  2287  318D   	fcall	_getMain_All_Error_Status
  7194  0D72  0020               	movlb	0	; select bank0
  7195  0D73  00EB               	movwf	??_getRxData
  7196  0D74  086B               	movf	??_getRxData,w
  7197  0D75  00EC               	movwf	getRxData@error
  7198                           
  7199                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7200  0D76  0022               	movlb	2	; select bank2
  7201  0D77  0820               	movf	_RF_Data^(0+256),w
  7202  0D78  3AAA               	xorlw	170
  7203  0D79  1D03               	skipz
  7204  0D7A  2D91               	goto	l6635
  7205  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7206  0D7C  3A01               	xorlw	1
  7207  0D7D  1D03               	skipz
  7208  0D7E  2D91               	goto	l6635
  7209                           
  7210                           ;RF_Control_B1.c: 278: product->Data[2] = 0x55;
  7211  0D7F  3055               	movlw	85
  7212  0D80  0020               	movlb	0	; select bank0
  7213  0D81  00EB               	movwf	??_getRxData
  7214  0D82  086E               	movf	_product,w
  7215  0D83  3E02               	addlw	2
  7216  0D84  0086               	movwf	6
  7217  0D85  3002               	movlw	2	; select bank4/5
  7218  0D86  0087               	movwf	7
  7219  0D87  086B               	movf	??_getRxData,w
  7220  0D88  0081               	movwf	1
  7221                           
  7222                           ;RF_Control_B1.c: 279: setTxData();
  7223  0D89  3186  26E6         	fcall	_setTxData
  7224                           
  7225                           ;RF_Control_B1.c: 280: RF1.RunTime = 10;
  7226  0D8B  300A               	movlw	10
  7227  0D8C  0021               	movlb	1	; select bank1
  7228  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7229  0D8E  3000               	movlw	0
  7230  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7231                           
  7232                           ;RF_Control_B1.c: 286: } else {
  7233  0D90  0008               	return
  7234  0D91                     l6635:	
  7235                           
  7236                           ;RF_Control_B1.c: 288: if (error == 0) {
  7237  0D91  0020               	movlb	0	; select bank0
  7238  0D92  08EC               	movf	getRxData@error,f
  7239  0D93  1D03               	skipz
  7240  0D94  0008               	return
  7241                           
  7242                           ;RF_Control_B1.c: 289: if (RF1.Learn == 1) {
  7243  0D95  0021               	movlb	1	; select bank1
  7244  0D96  1F3B               	btfss	_RF1^(0+128),6
  7245  0D97  2DA8               	goto	l6647
  7246                           
  7247                           ;RF_Control_B1.c: 290: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7248  0D98  0022               	movlb	2	; select bank2
  7249  0D99  08A0               	movf	_RF_Data^(0+256),f
  7250  0D9A  1D03               	skipz
  7251  0D9B  2DA5               	goto	l2056
  7252  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7253  0D9D  3A64               	xorlw	100
  7254  0D9E  1D03               	skipz
  7255  0D9F  2DA5               	goto	l2056
  7256                           
  7257                           ;RF_Control_B1.c: 291: setLog_Code();
  7258  0DA0  3193  238E         	fcall	_setLog_Code
  7259                           
  7260                           ;RF_Control_B1.c: 292: RF1.Checked = 1;
  7261  0DA2  0021               	movlb	1	; select bank1
  7262  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7263                           
  7264                           ;RF_Control_B1.c: 293: } else {
  7265  0DA4  0008               	return
  7266  0DA5                     l2056:	
  7267                           
  7268                           ;RF_Control_B1.c: 294: RF1.Checked = 0;
  7269  0DA5  0021               	movlb	1	; select bank1
  7270  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7271                           
  7272                           ;RF_Control_B1.c: 295: }
  7273                           ;RF_Control_B1.c: 296: } else {
  7274  0DA7  0008               	return
  7275  0DA8                     l6647:	
  7276                           
  7277                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7278  0DA8  0022               	movlb	2	; select bank2
  7279  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7280  0DAA  1D03               	skipz
  7281  0DAB  2DE6               	goto	l6669
  7282  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7283  0DAD  3A02               	xorlw	2
  7284  0DAE  1D03               	skipz
  7285  0DAF  2DE6               	goto	l6669
  7286                           
  7287                           ;RF_Control_B1.c: 299: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7288  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7289  0DB1  3AFF               	xorlw	255
  7290  0DB2  1D03               	skipz
  7291  0DB3  2DC0               	goto	l6659
  7292  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7293  0DB5  3AFF               	xorlw	255
  7294  0DB6  1D03               	skipz
  7295  0DB7  2DC0               	goto	l6659
  7296  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7297  0DB9  3AFF               	xorlw	255
  7298  0DBA  1D03               	skipz
  7299  0DBB  2DC0               	goto	l6659
  7300                           
  7301                           ;RF_Control_B1.c: 300: __nop();
  7302  0DBC  0000               	nop
  7303                           
  7304                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7305  0DBD  0021               	movlb	1	; select bank1
  7306  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7307                           
  7308                           ;RF_Control_B1.c: 302: } else {
  7309  0DBF  0008               	return
  7310  0DC0                     l6659:	
  7311                           
  7312                           ;RF_Control_B1.c: 303: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7313  0DC0  0020               	movlb	0	; select bank0
  7314  0DC1  086E               	movf	_product,w
  7315  0DC2  3E0C               	addlw	12
  7316  0DC3  0086               	movwf	6
  7317  0DC4  3002               	movlw	2	; select bank4/5
  7318  0DC5  0087               	movwf	7
  7319  0DC6  0022               	movlb	2	; select bank2
  7320  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7321  0DC8  0601               	xorwf	1,w
  7322  0DC9  1D03               	skipz
  7323  0DCA  0008               	return
  7324  0DCB  0020               	movlb	0	; select bank0
  7325  0DCC  086E               	movf	_product,w
  7326  0DCD  3E0D               	addlw	13
  7327  0DCE  0086               	movwf	6
  7328  0DCF  3002               	movlw	2	; select bank4/5
  7329  0DD0  0087               	movwf	7
  7330  0DD1  0022               	movlb	2	; select bank2
  7331  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7332  0DD3  0601               	xorwf	1,w
  7333  0DD4  1D03               	skipz
  7334  0DD5  0008               	return
  7335  0DD6  0020               	movlb	0	; select bank0
  7336  0DD7  086E               	movf	_product,w
  7337  0DD8  3E0E               	addlw	14
  7338  0DD9  0086               	movwf	6
  7339  0DDA  3002               	movlw	2	; select bank4/5
  7340  0DDB  0087               	movwf	7
  7341  0DDC  0022               	movlb	2	; select bank2
  7342  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7343  0DDE  0601               	xorwf	1,w
  7344  0DDF  1D03               	skipz
  7345  0DE0  0008               	return
  7346                           
  7347                           ;RF_Control_B1.c: 304: setControl_Lights_Table();
  7348  0DE1  3189  2121         	fcall	_setControl_Lights_Table
  7349                           
  7350                           ;RF_Control_B1.c: 305: RF1.Checked = 1;
  7351  0DE3  0021               	movlb	1	; select bank1
  7352  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7353                           
  7354                           ;RF_Control_B1.c: 306: }
  7355                           ;RF_Control_B1.c: 307: }
  7356                           ;RF_Control_B1.c: 308: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7357  0DE5  0008               	return
  7358  0DE6                     l6669:	
  7359  0DE6  0022               	movlb	2	; select bank2
  7360  0DE7  0820               	movf	_RF_Data^(0+256),w
  7361  0DE8  3AFF               	xorlw	255
  7362  0DE9  1D03               	skipz
  7363  0DEA  2DF1               	goto	l6675
  7364  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7365  0DEC  3A02               	xorlw	2
  7366  0DED  1D03               	skipz
  7367  0DEE  2DF1               	goto	l6675
  7368                           
  7369                           ;RF_Control_B1.c: 309: __nop();
  7370  0DEF  0000               	nop
  7371                           
  7372                           ;RF_Control_B1.c: 310: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7373  0DF0  0008               	return
  7374  0DF1                     l6675:	
  7375  0DF1  0022               	movlb	2	; select bank2
  7376  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7377  0DF3  1D03               	skipz
  7378  0DF4  2DFB               	goto	l2066
  7379  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7380  0DF6  3A65               	xorlw	101
  7381  0DF7  1D03               	skipz
  7382  0DF8  2DFB               	goto	l2066
  7383                           
  7384                           ;RF_Control_B1.c: 311: __nop();
  7385  0DF9  0000               	nop
  7386                           
  7387                           ;RF_Control_B1.c: 312: } else {
  7388  0DFA  0008               	return
  7389  0DFB                     l2066:	
  7390                           
  7391                           ;RF_Control_B1.c: 313: RF1.Checked = 0;
  7392  0DFB  0021               	movlb	1	; select bank1
  7393  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7394                           
  7395                           ;RF_Control_B1.c: 321: ;
  7396                           
  7397                           ;RF_Control_B1.c: 314: }
  7398                           ;RF_Control_B1.c: 319: }
  7399                           ;RF_Control_B1.c: 320: } else {
  7400  0DFD  0008               	return
  7401  0DFE                     __end_of_getRxData:	
  7402                           
  7403                           	psect	text26
  7404  138E                     __ptext26:	
  7405 ;; *************** function _setLog_Code *****************
  7406 ;; Defined at:
  7407 ;;		line 327 in file "../src/RF_Control_B1.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;		None               void
  7414 ;; Registers used:
  7415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;Total ram usage:        1 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    7
  7428 ;; This function calls:
  7429 ;;		_setBuz
  7430 ;;		_setMemory_LoopSave
  7431 ;;		_setMemory_Modify
  7432 ;; This function is called by:
  7433 ;;		_getRxData
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function _setLog_Code
  7439  138E                     _setLog_Code:	
  7440                           
  7441                           ;RF_Control_B1.c: 328: RF1.Learn = 0;
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7445  138E  0021               	movlb	1	; select bank1
  7446  138F  133B               	bcf	_RF1^(0+128),6
  7447                           
  7448                           ;RF_Control_B1.c: 329: product->Data[12]=RF_Data[12];
  7449  1390  0022               	movlb	2	; select bank2
  7450  1391  082C               	movf	(_RF_Data^(0+256)+12),w
  7451  1392  0020               	movlb	0	; select bank0
  7452  1393  00AD               	movwf	??_setLog_Code
  7453  1394  086E               	movf	_product,w
  7454  1395  3E0C               	addlw	12
  7455  1396  0086               	movwf	6
  7456  1397  3002               	movlw	2	; select bank4/5
  7457  1398  0087               	movwf	7
  7458  1399  082D               	movf	??_setLog_Code,w
  7459  139A  0081               	movwf	1
  7460                           
  7461                           ;RF_Control_B1.c: 330: product->Data[13]=RF_Data[13];
  7462  139B  0022               	movlb	2	; select bank2
  7463  139C  082D               	movf	(_RF_Data^(0+256)+13),w
  7464  139D  0020               	movlb	0	; select bank0
  7465  139E  00AD               	movwf	??_setLog_Code
  7466  139F  086E               	movf	_product,w
  7467  13A0  3E0D               	addlw	13
  7468  13A1  0086               	movwf	6
  7469  13A2  3002               	movlw	2	; select bank4/5
  7470  13A3  0087               	movwf	7
  7471  13A4  082D               	movf	??_setLog_Code,w
  7472  13A5  0081               	movwf	1
  7473                           
  7474                           ;RF_Control_B1.c: 331: product->Data[14]=RF_Data[14];
  7475  13A6  0022               	movlb	2	; select bank2
  7476  13A7  082E               	movf	(_RF_Data^(0+256)+14),w
  7477  13A8  0020               	movlb	0	; select bank0
  7478  13A9  00AD               	movwf	??_setLog_Code
  7479  13AA  086E               	movf	_product,w
  7480  13AB  3E0E               	addlw	14
  7481  13AC  0086               	movwf	6
  7482  13AD  3002               	movlw	2	; select bank4/5
  7483  13AE  0087               	movwf	7
  7484  13AF  082D               	movf	??_setLog_Code,w
  7485  13B0  0081               	movwf	1
  7486                           
  7487                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  7488  13B1  3064               	movlw	100
  7489  13B2  00A9               	movwf	setBuz@time
  7490  13B3  3000               	movlw	0
  7491  13B4  00AA               	movwf	setBuz@time+1
  7492  13B5  3001               	movlw	1
  7493  13B6  3196  26EF  3193   	fcall	_setBuz
  7494                           
  7495                           ;RF_Control_B1.c: 333: if (myMain.First == 1) {
  7496  13B9  0021               	movlb	1	; select bank1
  7497  13BA  1EA0               	btfss	_myMain^(0+128),5
  7498  13BB  2BC0               	goto	l2072
  7499                           
  7500                           ;RF_Control_B1.c: 334: setMemory_LoopSave(1);
  7501  13BC  3001               	movlw	1
  7502  13BD  319E  262A  3193   	fcall	_setMemory_LoopSave
  7503  13C0                     l2072:	
  7504                           
  7505                           ;RF_Control_B1.c: 335: }
  7506                           ;RF_Control_B1.c: 336: setMemory_Modify(1);
  7507  13C0  3001               	movlw	1
  7508  13C1  319E  2617         	fcall	_setMemory_Modify
  7509  13C3  0008               	return
  7510  13C4                     __end_of_setLog_Code:	
  7511                           
  7512                           	psect	text27
  7513  1E2A                     __ptext27:	
  7514 ;; *************** function _setMemory_LoopSave *****************
  7515 ;; Defined at:
  7516 ;;		line 1009 in file "../src/MCU_B1.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  command         1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  command         1    1[BANK0 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;		None               void
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;Total ram usage:        2 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    5
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_setLog_Code
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _setMemory_LoopSave
  7546  1E2A                     _setMemory_LoopSave:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7550                           ;setMemory_LoopSave@command stored from wreg
  7551  1E2A  0020               	movlb	0	; select bank0
  7552  1E2B  00A1               	movwf	setMemory_LoopSave@command
  7553                           
  7554                           ;MCU_B1.c: 1010: Memory.LoopSave = command == 1 ? 1 : 0;
  7555  1E2C  0821               	movf	setMemory_LoopSave@command,w
  7556  1E2D  3A01               	xorlw	1
  7557  1E2E  3000               	movlw	0
  7558  1E2F  1903               	skipnz
  7559  1E30  3001               	movlw	1
  7560  1E31  00A0               	movwf	??_setMemory_LoopSave
  7561  1E32  0DA0               	rlf	??_setMemory_LoopSave,f
  7562  1E33  0DA0               	rlf	??_setMemory_LoopSave,f
  7563  1E34  0023               	movlb	3	; select bank3
  7564  1E35  0844               	movf	(_Memory^(0+384)+36),w
  7565  1E36  0020               	movlb	0	; select bank0
  7566  1E37  0620               	xorwf	??_setMemory_LoopSave,w
  7567  1E38  39FB               	andlw	-5
  7568  1E39  0620               	xorwf	??_setMemory_LoopSave,w
  7569  1E3A  0023               	movlb	3	; select bank3
  7570  1E3B  00C4               	movwf	(_Memory^(0+384)+36)
  7571  1E3C  0008               	return
  7572  1E3D                     __end_of_setMemory_LoopSave:	
  7573                           
  7574                           	psect	text28
  7575  0921                     __ptext28:	
  7576 ;; *************** function _setControl_Lights_Table *****************
  7577 ;; Defined at:
  7578 ;;		line 340 in file "../src/RF_Control_B1.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;		None               void
  7585 ;; Registers used:
  7586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:   11
  7599 ;; This function calls:
  7600 ;;		_setBuz
  7601 ;;		_setDimmerLights_ErrorClose
  7602 ;;		_setRFSW_AdjControl
  7603 ;;		_setRFSW_Control
  7604 ;;		_setTxData
  7605 ;; This function is called by:
  7606 ;;		_getRxData
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _setControl_Lights_Table
  7612  0921                     _setControl_Lights_Table:	
  7613                           
  7614                           ;RF_Control_B1.c: 341: switch (RF_Data[15]) {
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618  0921  2965               	goto	l6269
  7619  0922                     l6247:	
  7620                           ;RF_Control_B1.c: 342: case 0x00:
  7621                           
  7622                           
  7623                           ;RF_Control_B1.c: 344: setDimmerLights_ErrorClose(255);
  7624  0922  30FF               	movlw	255
  7625  0923  3196  263F  3189   	fcall	_setDimmerLights_ErrorClose
  7626                           
  7627                           ;RF_Control_B1.c: 346: product->Data[9]=0;
  7628  0926  0020               	movlb	0	; select bank0
  7629  0927  086E               	movf	_product,w
  7630  0928  3E09               	addlw	9
  7631  0929  0086               	movwf	6
  7632  092A  3002               	movlw	2	; select bank4/5
  7633  092B  0087               	movwf	7
  7634  092C  0181               	clrf	1
  7635                           
  7636                           ;RF_Control_B1.c: 347: product->Data[11]=0;
  7637  092D  086E               	movf	_product,w
  7638  092E  3E0B               	addlw	11
  7639  092F  0086               	movwf	6
  7640  0930  3002               	movlw	2	; select bank4/5
  7641  0931  0087               	movwf	7
  7642  0932  0181               	clrf	1
  7643                           
  7644                           ;RF_Control_B1.c: 348: product->Data[15]=0;
  7645  0933  086E               	movf	_product,w
  7646  0934  3E0F               	addlw	15
  7647  0935  0086               	movwf	6
  7648  0936  3002               	movlw	2	; select bank4/5
  7649  0937  0087               	movwf	7
  7650  0938  0181               	clrf	1
  7651                           
  7652                           ;RF_Control_B1.c: 349: product->Data[17]=0;
  7653  0939  086E               	movf	_product,w
  7654  093A  3E11               	addlw	17
  7655  093B  0086               	movwf	6
  7656  093C  3002               	movlw	2	; select bank4/5
  7657  093D  0087               	movwf	7
  7658  093E  0181               	clrf	1
  7659                           
  7660                           ;RF_Control_B1.c: 350: setBuz(1, 100);
  7661  093F  3064               	movlw	100
  7662  0940  00A9               	movwf	setBuz@time
  7663  0941  3000               	movlw	0
  7664  0942  00AA               	movwf	setBuz@time+1
  7665  0943  3001               	movlw	1
  7666  0944  3196  26EF         	fcall	_setBuz
  7667                           
  7668                           ;RF_Control_B1.c: 352: break;
  7669  0946  0008               	return
  7670  0947                     l6259:	
  7671                           ;RF_Control_B1.c: 353: case 0x20:
  7672                           
  7673                           
  7674                           ;RF_Control_B1.c: 354: product->Data[9]=0;
  7675  0947  0020               	movlb	0	; select bank0
  7676  0948  086E               	movf	_product,w
  7677  0949  3E09               	addlw	9
  7678  094A  0086               	movwf	6
  7679  094B  3002               	movlw	2	; select bank4/5
  7680  094C  0087               	movwf	7
  7681  094D  0181               	clrf	1
  7682                           
  7683                           ;RF_Control_B1.c: 355: product->Data[11]=0;
  7684  094E  086E               	movf	_product,w
  7685  094F  3E0B               	addlw	11
  7686  0950  0086               	movwf	6
  7687  0951  3002               	movlw	2	; select bank4/5
  7688  0952  0087               	movwf	7
  7689  0953  0181               	clrf	1
  7690                           
  7691                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7692  0954  086E               	movf	_product,w
  7693  0955  3E11               	addlw	17
  7694  0956  0086               	movwf	6
  7695  0957  3002               	movlw	2	; select bank4/5
  7696  0958  0087               	movwf	7
  7697  0959  0181               	clrf	1
  7698                           
  7699                           ;RF_Control_B1.c: 357: setTxData();
  7700  095A  3186  26E6         	fcall	_setTxData
  7701                           
  7702                           ;RF_Control_B1.c: 358: break;
  7703  095C  0008               	return
  7704  095D                     l6263:	
  7705                           ;RF_Control_B1.c: 359: case 0x01:
  7706                           
  7707                           
  7708                           ;RF_Control_B1.c: 361: setRFSW_Control(1);
  7709  095D  3001               	movlw	1
  7710  095E  3195  259C         	fcall	_setRFSW_Control
  7711                           
  7712                           ;RF_Control_B1.c: 373: break;
  7713                           
  7714                           ;RF_Control_B1.c: 369: case 0x03:
  7715                           
  7716                           ;RF_Control_B1.c: 368: break;
  7717                           
  7718                           ;RF_Control_B1.c: 364: case 0x02:
  7719                           
  7720                           ;RF_Control_B1.c: 363: break;
  7721  0960  0008               	return
  7722  0961                     l6265:	
  7723                           ;RF_Control_B1.c: 374: case 0x11:
  7724                           
  7725                           
  7726                           ;RF_Control_B1.c: 377: setRFSW_AdjControl(1);
  7727  0961  3001               	movlw	1
  7728  0962  3194  2438         	fcall	_setRFSW_AdjControl
  7729                           
  7730                           ;RF_Control_B1.c: 395: }
  7731                           
  7732                           ;RF_Control_B1.c: 394: break;
  7733                           
  7734                           ;RF_Control_B1.c: 388: case 0x31:
  7735                           
  7736                           ;RF_Control_B1.c: 387: break;
  7737                           
  7738                           ;RF_Control_B1.c: 381: case 0x21:
  7739                           
  7740                           ;RF_Control_B1.c: 380: break;
  7741  0964  0008               	return
  7742  0965                     l6269:	
  7743  0965  0022               	movlb	2	; select bank2
  7744  0966  082F               	movf	(_RF_Data^(0+256)+15),w
  7745                           
  7746                           ; Switch size 1, requested type "space"
  7747                           ; Number of cases is 8, Range of values is 0 to 49
  7748                           ; switch strategies available:
  7749                           ; Name         Instructions Cycles
  7750                           ; simple_byte           25    13 (average)
  7751                           ; direct_byte          106     6 (fixed)
  7752                           ; jumptable            260     6 (fixed)
  7753                           ;	Chosen strategy is simple_byte
  7754  0967  3A00               	xorlw	0	; case 0
  7755  0968  1903               	skipnz
  7756  0969  2922               	goto	l6247
  7757  096A  3A01               	xorlw	1	; case 1
  7758  096B  1903               	skipnz
  7759  096C  295D               	goto	l6263
  7760  096D  3A03               	xorlw	3	; case 2
  7761  096E  1903               	skipnz
  7762  096F  2980               	goto	l2086
  7763  0970  3A01               	xorlw	1	; case 3
  7764  0971  1903               	skipnz
  7765  0972  2980               	goto	l2086
  7766  0973  3A12               	xorlw	18	; case 17
  7767  0974  1903               	skipnz
  7768  0975  2961               	goto	l6265
  7769  0976  3A31               	xorlw	49	; case 32
  7770  0977  1903               	skipnz
  7771  0978  2947               	goto	l6259
  7772  0979  3A01               	xorlw	1	; case 33
  7773  097A  1903               	skipnz
  7774  097B  2980               	goto	l2086
  7775  097C  3A10               	xorlw	16	; case 49
  7776  097D  1903               	skipnz
  7777  097E  2980               	goto	l2086
  7778  097F  2980               	goto	l2086
  7779  0980                     l2086:	
  7780  0980  0008               	return
  7781  0981                     __end_of_setControl_Lights_Table:	
  7782                           
  7783                           	psect	text29
  7784  159C                     __ptext29:	
  7785 ;; *************** function _setRFSW_Control *****************
  7786 ;; Defined at:
  7787 ;;		line 422 in file "../src/RF_Control_B1.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  sw              1    wreg     unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  sw              1   19[BANK0 ] unsigned char 
  7792 ;;  status          1   18[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        3 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    9
  7809 ;; This function calls:
  7810 ;;		_getDelayOff_GO
  7811 ;;		_getDimmerLights_Status
  7812 ;;		_setBuz
  7813 ;;		_setDelayOff_GO
  7814 ;;		_setDimmerLights_SwOff
  7815 ;;		_setDimmerLights_SwOn
  7816 ;;		_setRF_DimmerLights
  7817 ;;		_setTxData
  7818 ;; This function is called by:
  7819 ;;		_setControl_Lights_Table
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function _setRFSW_Control
  7825  159C                     _setRFSW_Control:	
  7826                           
  7827                           ;incstack = 0
  7828                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7829                           ;setRFSW_Control@sw stored from wreg
  7830  159C  0020               	movlb	0	; select bank0
  7831  159D  00B3               	movwf	setRFSW_Control@sw
  7832                           
  7833                           ;RF_Control_B1.c: 423: char status = 0;
  7834  159E  01B2               	clrf	setRFSW_Control@status
  7835                           
  7836                           ;RF_Control_B1.c: 426: if (RF_Data[16] == 0x80) {
  7837  159F  0022               	movlb	2	; select bank2
  7838  15A0  0830               	movf	(_RF_Data^(0+256)+16),w
  7839  15A1  3A80               	xorlw	128
  7840  15A2  1D03               	skipz
  7841  15A3  2DCF               	goto	l6101
  7842                           
  7843                           ;RF_Control_B1.c: 427: setDelayOff_GO(sw, 1, RF_Data[17]);
  7844  15A4  0020               	movlb	0	; select bank0
  7845  15A5  01AA               	clrf	setDelayOff_GO@command
  7846  15A6  0AAA               	incf	setDelayOff_GO@command,f
  7847  15A7  0022               	movlb	2	; select bank2
  7848  15A8  0831               	movf	(_RF_Data^(0+256)+17),w
  7849  15A9  0020               	movlb	0	; select bank0
  7850  15AA  00B1               	movwf	??_setRFSW_Control
  7851  15AB  0831               	movf	??_setRFSW_Control,w
  7852  15AC  00AB               	movwf	setDelayOff_GO@value
  7853  15AD  0833               	movf	setRFSW_Control@sw,w
  7854  15AE  3188  2009  3195   	fcall	_setDelayOff_GO
  7855                           
  7856                           ;RF_Control_B1.c: 428: if (getDimmerLights_Status(sw) == 1) {
  7857  15B1  0020               	movlb	0	; select bank0
  7858  15B2  0833               	movf	setRFSW_Control@sw,w
  7859  15B3  319D  255D  3195   	fcall	_getDimmerLights_Status
  7860  15B6  3A01               	xorlw	1
  7861  15B7  1D03               	skipz
  7862  15B8  2DDE               	goto	l6105
  7863                           
  7864                           ;RF_Control_B1.c: 429: setBuz(1, 100);
  7865  15B9  3064               	movlw	100
  7866  15BA  0020               	movlb	0	; select bank0
  7867  15BB  00A9               	movwf	setBuz@time
  7868  15BC  3000               	movlw	0
  7869  15BD  00AA               	movwf	setBuz@time+1
  7870  15BE  3001               	movlw	1
  7871  15BF  3196  26EF  3195   	fcall	_setBuz
  7872                           
  7873                           ;RF_Control_B1.c: 430: status = 1;
  7874  15C2  0020               	movlb	0	; select bank0
  7875  15C3  01B2               	clrf	setRFSW_Control@status
  7876  15C4  0AB2               	incf	setRFSW_Control@status,f
  7877                           
  7878                           ;RF_Control_B1.c: 431: setRF_DimmerLights(sw, 1);
  7879  15C5  01A0               	clrf	setRF_DimmerLights@on
  7880  15C6  0AA0               	incf	setRF_DimmerLights@on,f
  7881  15C7  0833               	movf	setRFSW_Control@sw,w
  7882  15C8  3197  2748  3195   	fcall	_setRF_DimmerLights
  7883                           
  7884                           ;RF_Control_B1.c: 432: setTxData();
  7885  15CB  3186  26E6  3195   	fcall	_setTxData
  7886                           
  7887                           ;RF_Control_B1.c: 434: }
  7888                           ;RF_Control_B1.c: 435: } else {
  7889  15CE  2DDE               	goto	l6105
  7890  15CF                     l6101:	
  7891                           
  7892                           ;RF_Control_B1.c: 437: if (getDelayOff_GO(sw) == 1) {
  7893  15CF  0020               	movlb	0	; select bank0
  7894  15D0  0833               	movf	setRFSW_Control@sw,w
  7895  15D1  319D  256D  3195   	fcall	_getDelayOff_GO
  7896  15D4  3A01               	xorlw	1
  7897  15D5  1D03               	skipz
  7898  15D6  2DDE               	goto	l6105
  7899                           
  7900                           ;RF_Control_B1.c: 438: setDelayOff_GO(sw, 0, 0);
  7901  15D7  0020               	movlb	0	; select bank0
  7902  15D8  01AA               	clrf	setDelayOff_GO@command
  7903  15D9  01AB               	clrf	setDelayOff_GO@value
  7904  15DA  0833               	movf	setRFSW_Control@sw,w
  7905  15DB  3188  2009  3195   	fcall	_setDelayOff_GO
  7906  15DE                     l6105:	
  7907                           
  7908                           ;RF_Control_B1.c: 439: }
  7909                           ;RF_Control_B1.c: 441: }
  7910                           ;RF_Control_B1.c: 442: if (status == 0) {
  7911  15DE  0020               	movlb	0	; select bank0
  7912  15DF  08B2               	movf	setRFSW_Control@status,f
  7913  15E0  1D03               	skipz
  7914  15E1  0008               	return
  7915                           
  7916                           ;RF_Control_B1.c: 444: setDimmerLights_SwOn(sw);
  7917  15E2  0833               	movf	setRFSW_Control@sw,w
  7918  15E3  3193  23FB  3195   	fcall	_setDimmerLights_SwOn
  7919                           
  7920                           ;RF_Control_B1.c: 445: setDimmerLights_SwOff(sw);
  7921  15E6  0020               	movlb	0	; select bank0
  7922  15E7  0833               	movf	setRFSW_Control@sw,w
  7923  15E8  3194  24BB         	fcall	_setDimmerLights_SwOff
  7924  15EA  0008               	return
  7925  15EB                     __end_of_setRFSW_Control:	
  7926                           
  7927                           	psect	text30
  7928  13FB                     __ptext30:	
  7929 ;; *************** function _setDimmerLights_SwOn *****************
  7930 ;; Defined at:
  7931 ;;		line 517 in file "../src/Dimmer_B1.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  sw              1    wreg     unsigned char 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  sw              1   15[BANK0 ] unsigned char 
  7936 ;;  idle            1   14[BANK0 ] unsigned char 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;		None               void
  7939 ;; Registers used:
  7940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;Total ram usage:        3 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    7
  7953 ;; This function calls:
  7954 ;;		_DimmerLightsPointSelect
  7955 ;;		_getAll_DimmerLights_AdjGO
  7956 ;;		_setBuz
  7957 ;;		_setDimmerLights_Trigger
  7958 ;; This function is called by:
  7959 ;;		_setRFSW_Control
  7960 ;;		_setSw_Main
  7961 ;; This function uses a non-reentrant model
  7962 ;;
  7963                           
  7964                           
  7965                           ;psect for function _setDimmerLights_SwOn
  7966  13FB                     _setDimmerLights_SwOn:	
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7970                           ;setDimmerLights_SwOn@sw stored from wreg
  7971  13FB  0020               	movlb	0	; select bank0
  7972  13FC  00AF               	movwf	setDimmerLights_SwOn@sw
  7973                           
  7974                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  7975  13FD  082F               	movf	setDimmerLights_SwOn@sw,w
  7976  13FE  319C  2499  3193   	fcall	_DimmerLightsPointSelect
  7977                           
  7978                           ;Dimmer_B1.c: 519: char idle = 0;
  7979  1401  0020               	movlb	0	; select bank0
  7980  1402  01AE               	clrf	setDimmerLights_SwOn@idle
  7981                           
  7982                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7983  1403  319C  2479  3193   	fcall	_getAll_DimmerLights_AdjGO
  7984  1406  3A01               	xorlw	1
  7985  1407  3000               	movlw	0
  7986  1408  1903               	skipnz
  7987  1409  3001               	movlw	1
  7988  140A  0020               	movlb	0	; select bank0
  7989  140B  00AD               	movwf	??_setDimmerLights_SwOn
  7990  140C  082D               	movf	??_setDimmerLights_SwOn,w
  7991  140D  00AE               	movwf	setDimmerLights_SwOn@idle
  7992                           
  7993                           ;Dimmer_B1.c: 523: if (idle == 0) {
  7994  140E  08AE               	movf	setDimmerLights_SwOn@idle,f
  7995  140F  1D03               	skipz
  7996  1410  0008               	return
  7997                           
  7998                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  7999  1411  086F               	movf	_DimmerLights,w
  8000  1412  3E09               	addlw	9
  8001  1413  0086               	movwf	6
  8002  1414  3001               	movlw	1	; select bank2/3
  8003  1415  0087               	movwf	7
  8004  1416  1701               	bsf	1,6
  8005                           
  8006                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  8007  1417  3064               	movlw	100
  8008  1418  00A9               	movwf	setBuz@time
  8009  1419  3000               	movlw	0
  8010  141A  00AA               	movwf	setBuz@time+1
  8011  141B  3001               	movlw	1
  8012  141C  3196  26EF  3193   	fcall	_setBuz
  8013                           
  8014                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  8015  141F  0020               	movlb	0	; select bank0
  8016  1420  086F               	movf	_DimmerLights,w
  8017  1421  0086               	movwf	6
  8018  1422  3001               	movlw	1	; select bank2/3
  8019  1423  0087               	movwf	7
  8020  1424  1A81               	btfsc	1,5
  8021  1425  2C31               	goto	l5913
  8022                           
  8023                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  8024  1426  086F               	movf	_DimmerLights,w
  8025  1427  0086               	movwf	6
  8026  1428  3001               	movlw	1	; select bank2/3
  8027  1429  0087               	movwf	7
  8028  142A  1681               	bsf	1,5
  8029                           
  8030                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  8031  142B  01A2               	clrf	setDimmerLights_Trigger@command
  8032  142C  0AA2               	incf	setDimmerLights_Trigger@command,f
  8033  142D  082F               	movf	setDimmerLights_SwOn@sw,w
  8034  142E  319F  2722         	fcall	_setDimmerLights_Trigger
  8035                           
  8036                           ;Dimmer_B1.c: 529: } else {
  8037  1430  0008               	return
  8038  1431                     l5913:	
  8039                           
  8040                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  8041  1431  0020               	movlb	0	; select bank0
  8042  1432  086F               	movf	_DimmerLights,w
  8043  1433  0086               	movwf	6
  8044  1434  3001               	movlw	1	; select bank2/3
  8045  1435  0087               	movwf	7
  8046  1436  1281               	bcf	1,5
  8047  1437  0008               	return
  8048  1438                     __end_of_setDimmerLights_SwOn:	
  8049                           
  8050                           	psect	text31
  8051  1438                     __ptext31:	
  8052 ;; *************** function _setRFSW_AdjControl *****************
  8053 ;; Defined at:
  8054 ;;		line 451 in file "../src/RF_Control_B1.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  sw              1    wreg     unsigned char 
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;  sw              1   74[BANK0 ] unsigned char 
  8059 ;;  status          1   73[BANK0 ] unsigned char 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;		None               void
  8062 ;; Registers used:
  8063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;Total ram usage:        4 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:   10
  8076 ;; This function calls:
  8077 ;;		_getDimmerLights_Status
  8078 ;;		_setMemory_Modify
  8079 ;;		_setRF_DimmerValue
  8080 ;;		_setTxData
  8081 ;; This function is called by:
  8082 ;;		_setControl_Lights_Table
  8083 ;; This function uses a non-reentrant model
  8084 ;;
  8085                           
  8086                           
  8087                           ;psect for function _setRFSW_AdjControl
  8088  1438                     _setRFSW_AdjControl:	
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8092                           ;setRFSW_AdjControl@sw stored from wreg
  8093  1438  0020               	movlb	0	; select bank0
  8094  1439  00EA               	movwf	setRFSW_AdjControl@sw
  8095                           
  8096                           ;RF_Control_B1.c: 452: char status = 0;
  8097  143A  01E9               	clrf	setRFSW_AdjControl@status
  8098                           
  8099                           ;RF_Control_B1.c: 454: status = getDimmerLights_Status(sw);
  8100  143B  086A               	movf	setRFSW_AdjControl@sw,w
  8101  143C  319D  255D  3194   	fcall	_getDimmerLights_Status
  8102  143F  0020               	movlb	0	; select bank0
  8103  1440  00E7               	movwf	??_setRFSW_AdjControl
  8104  1441  0867               	movf	??_setRFSW_AdjControl,w
  8105  1442  00E9               	movwf	setRFSW_AdjControl@status
  8106                           
  8107                           ;RF_Control_B1.c: 457: if (status == 1) {
  8108  1443  0869               	movf	setRFSW_AdjControl@status,w
  8109  1444  3A01               	xorlw	1
  8110  1445  1D03               	skipz
  8111  1446  2C51               	goto	l6119
  8112                           
  8113                           ;RF_Control_B1.c: 458: setMemory_Modify(1);
  8114  1447  3001               	movlw	1
  8115  1448  319E  2617  3194   	fcall	_setMemory_Modify
  8116                           
  8117                           ;RF_Control_B1.c: 459: setRF_DimmerValue(sw);
  8118  144B  0020               	movlb	0	; select bank0
  8119  144C  086A               	movf	setRFSW_AdjControl@sw,w
  8120  144D  3192  2255  3194   	fcall	_setRF_DimmerValue
  8121                           
  8122                           ;RF_Control_B1.c: 460: } else {
  8123  1450  2C63               	goto	l2098
  8124  1451                     l6119:	
  8125                           
  8126                           ;RF_Control_B1.c: 461: product->Data[9]=product->Data[20 + sw];
  8127  1451  0020               	movlb	0	; select bank0
  8128  1452  086A               	movf	setRFSW_AdjControl@sw,w
  8129  1453  3E14               	addlw	20
  8130  1454  076E               	addwf	_product,w
  8131  1455  00E7               	movwf	??_setRFSW_AdjControl
  8132  1456  0867               	movf	??_setRFSW_AdjControl,w
  8133  1457  0086               	movwf	6
  8134  1458  3002               	movlw	2	; select bank4/5
  8135  1459  0087               	movwf	7
  8136  145A  0801               	movf	1,w
  8137  145B  00E8               	movwf	??_setRFSW_AdjControl+1
  8138  145C  086E               	movf	_product,w
  8139  145D  3E09               	addlw	9
  8140  145E  0086               	movwf	6
  8141  145F  3002               	movlw	2	; select bank4/5
  8142  1460  0087               	movwf	7
  8143  1461  0868               	movf	??_setRFSW_AdjControl+1,w
  8144  1462  0081               	movwf	1
  8145  1463                     l2098:	
  8146                           
  8147                           ;RF_Control_B1.c: 462: }
  8148                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + sw];
  8149  1463  0020               	movlb	0	; select bank0
  8150  1464  086A               	movf	setRFSW_AdjControl@sw,w
  8151  1465  3E1A               	addlw	26
  8152  1466  076E               	addwf	_product,w
  8153  1467  00E7               	movwf	??_setRFSW_AdjControl
  8154  1468  0867               	movf	??_setRFSW_AdjControl,w
  8155  1469  0086               	movwf	6
  8156  146A  3002               	movlw	2	; select bank4/5
  8157  146B  0087               	movwf	7
  8158  146C  0801               	movf	1,w
  8159  146D  00E8               	movwf	??_setRFSW_AdjControl+1
  8160  146E  086E               	movf	_product,w
  8161  146F  3E11               	addlw	17
  8162  1470  0086               	movwf	6
  8163  1471  3002               	movlw	2	; select bank4/5
  8164  1472  0087               	movwf	7
  8165  1473  0868               	movf	??_setRFSW_AdjControl+1,w
  8166  1474  0081               	movwf	1
  8167                           
  8168                           ;RF_Control_B1.c: 464: setTxData();
  8169  1475  3186  26E6         	fcall	_setTxData
  8170  1477  0008               	return
  8171  1478                     __end_of_setRFSW_AdjControl:	
  8172                           
  8173                           	psect	text32
  8174  1255                     __ptext32:	
  8175 ;; *************** function _setRF_DimmerValue *****************
  8176 ;; Defined at:
  8177 ;;		line 469 in file "../src/RF_Control_B1.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  lights          1    wreg     unsigned char 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  lights          1   70[BANK0 ] unsigned char 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;		None               void
  8184 ;; Registers used:
  8185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;Total ram usage:        3 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    9
  8198 ;; This function calls:
  8199 ;;		_setDimmerLights_AdjRF
  8200 ;; This function is called by:
  8201 ;;		_setRFSW_AdjControl
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           
  8206                           ;psect for function _setRF_DimmerValue
  8207  1255                     _setRF_DimmerValue:	
  8208                           
  8209                           ;incstack = 0
  8210                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8211                           ;setRF_DimmerValue@lights stored from wreg
  8212  1255  0020               	movlb	0	; select bank0
  8213  1256  00E6               	movwf	setRF_DimmerValue@lights
  8214                           
  8215                           ;RF_Control_B1.c: 470: if (RF_Data[9] > 0x64) {
  8216  1257  3065               	movlw	101
  8217  1258  0022               	movlb	2	; select bank2
  8218  1259  0229               	subwf	(_RF_Data^(0+256)+9),w
  8219  125A  1C03               	skipc
  8220  125B  2A62               	goto	l6001
  8221                           
  8222                           ;RF_Control_B1.c: 471: RF_Data[9] = 0x64;
  8223  125C  3064               	movlw	100
  8224  125D  0020               	movlb	0	; select bank0
  8225  125E  00E4               	movwf	??_setRF_DimmerValue
  8226  125F  0864               	movf	??_setRF_DimmerValue,w
  8227  1260  0022               	movlb	2	; select bank2
  8228  1261  00A9               	movwf	(_RF_Data^(0+256)+9)
  8229  1262                     l6001:	
  8230                           
  8231                           ;RF_Control_B1.c: 472: }
  8232                           ;RF_Control_B1.c: 473: product->Data[9]=RF_Data[9];
  8233  1262  0829               	movf	(_RF_Data^(0+256)+9),w
  8234  1263  0020               	movlb	0	; select bank0
  8235  1264  00E4               	movwf	??_setRF_DimmerValue
  8236  1265  086E               	movf	_product,w
  8237  1266  3E09               	addlw	9
  8238  1267  0086               	movwf	6
  8239  1268  3002               	movlw	2	; select bank4/5
  8240  1269  0087               	movwf	7
  8241  126A  0864               	movf	??_setRF_DimmerValue,w
  8242  126B  0081               	movwf	1
  8243                           
  8244                           ;RF_Control_B1.c: 474: product->Data[11]=lights;
  8245  126C  0866               	movf	setRF_DimmerValue@lights,w
  8246  126D  00E4               	movwf	??_setRF_DimmerValue
  8247  126E  086E               	movf	_product,w
  8248  126F  3E0B               	addlw	11
  8249  1270  0086               	movwf	6
  8250  1271  3002               	movlw	2	; select bank4/5
  8251  1272  0087               	movwf	7
  8252  1273  0864               	movf	??_setRF_DimmerValue,w
  8253  1274  0081               	movwf	1
  8254                           
  8255                           ;RF_Control_B1.c: 475: product->Data[(20 + lights)]=RF_Data[9];
  8256  1275  0022               	movlb	2	; select bank2
  8257  1276  0829               	movf	(_RF_Data^(0+256)+9),w
  8258  1277  0020               	movlb	0	; select bank0
  8259  1278  00E4               	movwf	??_setRF_DimmerValue
  8260  1279  0866               	movf	setRF_DimmerValue@lights,w
  8261  127A  3E14               	addlw	20
  8262  127B  076E               	addwf	_product,w
  8263  127C  00E5               	movwf	??_setRF_DimmerValue+1
  8264  127D  0865               	movf	??_setRF_DimmerValue+1,w
  8265  127E  0086               	movwf	6
  8266  127F  3002               	movlw	2	; select bank4/5
  8267  1280  0087               	movwf	7
  8268  1281  0864               	movf	??_setRF_DimmerValue,w
  8269  1282  0081               	movwf	1
  8270                           
  8271                           ;RF_Control_B1.c: 476: setDimmerLights_AdjRF(lights);
  8272  1283  0866               	movf	setRF_DimmerValue@lights,w
  8273  1284  3190  20B1         	fcall	_setDimmerLights_AdjRF
  8274  1286  0008               	return
  8275  1287                     __end_of_setRF_DimmerValue:	
  8276                           
  8277                           	psect	text33
  8278  10B1                     __ptext33:	
  8279 ;; *************** function _setDimmerLights_AdjRF *****************
  8280 ;; Defined at:
  8281 ;;		line 758 in file "../src/Dimmer_B1.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  lights          1    wreg     unsigned char 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  lights          1   67[BANK0 ] unsigned char 
  8286 ;; Return value:  Size  Location     Type
  8287 ;;		None               void
  8288 ;; Registers used:
  8289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;Total ram usage:        2 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    8
  8302 ;; This function calls:
  8303 ;;		_DimmerLightsPointSelect
  8304 ;;		_getPercentValue
  8305 ;; This function is called by:
  8306 ;;		_setRF_DimmerValue
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           
  8311                           ;psect for function _setDimmerLights_AdjRF
  8312  10B1                     _setDimmerLights_AdjRF:	
  8313                           
  8314                           ;incstack = 0
  8315                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8316                           ;setDimmerLights_AdjRF@lights stored from wreg
  8317  10B1  0020               	movlb	0	; select bank0
  8318  10B2  00E3               	movwf	setDimmerLights_AdjRF@lights
  8319                           
  8320                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  8321  10B3  0863               	movf	setDimmerLights_AdjRF@lights,w
  8322  10B4  319C  2499  3190   	fcall	_DimmerLightsPointSelect
  8323                           
  8324                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  8325  10B7  0020               	movlb	0	; select bank0
  8326  10B8  086F               	movf	_DimmerLights,w
  8327  10B9  0086               	movwf	6
  8328  10BA  3001               	movlw	1	; select bank2/3
  8329  10BB  0087               	movwf	7
  8330  10BC  1501               	bsf	1,2
  8331                           
  8332                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  8333  10BD  086F               	movf	_DimmerLights,w
  8334  10BE  0086               	movwf	6
  8335  10BF  3001               	movlw	1	; select bank2/3
  8336  10C0  0087               	movwf	7
  8337  10C1  1481               	bsf	1,1
  8338                           
  8339                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8340  10C2  086E               	movf	_product,w
  8341  10C3  3E09               	addlw	9
  8342  10C4  0086               	movwf	6
  8343  10C5  3002               	movlw	2	; select bank4/5
  8344  10C6  0087               	movwf	7
  8345  10C7  0801               	movf	1,w
  8346  10C8  318A  22A8         	fcall	_getPercentValue
  8347  10CA  0020               	movlb	0	; select bank0
  8348  10CB  00E2               	movwf	??_setDimmerLights_AdjRF
  8349  10CC  086F               	movf	_DimmerLights,w
  8350  10CD  3E05               	addlw	5
  8351  10CE  0086               	movwf	6
  8352  10CF  3001               	movlw	1	; select bank2/3
  8353  10D0  0087               	movwf	7
  8354  10D1  0862               	movf	??_setDimmerLights_AdjRF,w
  8355  10D2  0081               	movwf	1
  8356  10D3  0008               	return
  8357  10D4                     __end_of_setDimmerLights_AdjRF:	
  8358                           
  8359                           	psect	text34
  8360  0AA8                     __ptext34:	
  8361 ;; *************** function _getPercentValue *****************
  8362 ;; Defined at:
  8363 ;;		line 870 in file "../src/Dimmer_B1.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  value           1    wreg     unsigned char 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  value           1   62[BANK0 ] unsigned char 
  8368 ;;  i               3   63[BANK0 ] float 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      unsigned char 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, pclath, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        6 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    7
  8385 ;; This function calls:
  8386 ;;		___awtoft
  8387 ;;		___ftadd
  8388 ;;		___ftdiv
  8389 ;;		___ftmul
  8390 ;;		___ftneg
  8391 ;;		___fttol
  8392 ;; This function is called by:
  8393 ;;		_setDimmerLights_AdjRF
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           
  8398                           ;psect for function _getPercentValue
  8399  0AA8                     _getPercentValue:	
  8400                           
  8401                           ;incstack = 0
  8402                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8403                           ;getPercentValue@value stored from wreg
  8404  0AA8  0020               	movlb	0	; select bank0
  8405  0AA9  00DE               	movwf	getPercentValue@value
  8406                           
  8407                           ;Dimmer_B1.c: 878: float i = ((char)(90*0.8)) - ((char)(15*0.8));
  8408  0AAA  3000               	movlw	0
  8409  0AAB  00DF               	movwf	getPercentValue@i
  8410  0AAC  3070               	movlw	112
  8411  0AAD  00E0               	movwf	getPercentValue@i+1
  8412  0AAE  3042               	movlw	66
  8413  0AAF  00E1               	movwf	getPercentValue@i+2
  8414                           
  8415                           ;Dimmer_B1.c: 879: i /= 100;
  8416  0AB0  3000               	movlw	0
  8417  0AB1  00AE               	movwf	___ftdiv@f2
  8418  0AB2  30C8               	movlw	200
  8419  0AB3  00AF               	movwf	___ftdiv@f2+1
  8420  0AB4  3042               	movlw	66
  8421  0AB5  00B0               	movwf	___ftdiv@f2+2
  8422  0AB6  085F               	movf	getPercentValue@i,w
  8423  0AB7  00B1               	movwf	___ftdiv@f1
  8424  0AB8  0860               	movf	getPercentValue@i+1,w
  8425  0AB9  00B2               	movwf	___ftdiv@f1+1
  8426  0ABA  0861               	movf	getPercentValue@i+2,w
  8427  0ABB  00B3               	movwf	___ftdiv@f1+2
  8428  0ABC  318E  26A3  318A   	fcall	___ftdiv
  8429  0ABF  0020               	movlb	0	; select bank0
  8430  0AC0  082E               	movf	?___ftdiv,w
  8431  0AC1  00DF               	movwf	getPercentValue@i
  8432  0AC2  082F               	movf	?___ftdiv+1,w
  8433  0AC3  00E0               	movwf	getPercentValue@i+1
  8434  0AC4  0830               	movf	?___ftdiv+2,w
  8435  0AC5  00E1               	movwf	getPercentValue@i+2
  8436                           
  8437                           ;Dimmer_B1.c: 881: return (char) (((char)(90*0.8)) - ((100 - value) * i));
  8438  0AC6  085E               	movf	getPercentValue@value,w
  8439  0AC7  00DC               	movwf	??_getPercentValue
  8440  0AC8  01DD               	clrf	??_getPercentValue+1
  8441  0AC9  09DC               	comf	??_getPercentValue,f
  8442  0ACA  09DD               	comf	??_getPercentValue+1,f
  8443  0ACB  0ADC               	incf	??_getPercentValue,f
  8444  0ACC  1903               	skipnz
  8445  0ACD  0ADD               	incf	??_getPercentValue+1,f
  8446  0ACE  085C               	movf	??_getPercentValue,w
  8447  0ACF  3E64               	addlw	100
  8448  0AD0  00A8               	movwf	___awtoft@c
  8449  0AD1  3000               	movlw	0
  8450  0AD2  3D5D               	addwfc	??_getPercentValue+1,w
  8451  0AD3  00A9               	movwf	___awtoft@c+1
  8452  0AD4  3190  206D  318A   	fcall	___awtoft
  8453  0AD7  0020               	movlb	0	; select bank0
  8454  0AD8  0828               	movf	?___awtoft,w
  8455  0AD9  00B1               	movwf	___ftmul@f2
  8456  0ADA  0829               	movf	?___awtoft+1,w
  8457  0ADB  00B2               	movwf	___ftmul@f2+1
  8458  0ADC  082A               	movf	?___awtoft+2,w
  8459  0ADD  00B3               	movwf	___ftmul@f2+2
  8460  0ADE  085F               	movf	getPercentValue@i,w
  8461  0ADF  00AE               	movwf	___ftmul@f1
  8462  0AE0  0860               	movf	getPercentValue@i+1,w
  8463  0AE1  00AF               	movwf	___ftmul@f1+1
  8464  0AE2  0861               	movf	getPercentValue@i+2,w
  8465  0AE3  00B0               	movwf	___ftmul@f1+2
  8466  0AE4  318F  274C  318A   	fcall	___ftmul
  8467  0AE7  0020               	movlb	0	; select bank0
  8468  0AE8  082E               	movf	?___ftmul,w
  8469  0AE9  00BE               	movwf	___ftneg@f1
  8470  0AEA  082F               	movf	?___ftmul+1,w
  8471  0AEB  00BF               	movwf	___ftneg@f1+1
  8472  0AEC  0830               	movf	?___ftmul+2,w
  8473  0AED  00C0               	movwf	___ftneg@f1+2
  8474  0AEE  319C  245D  318A   	fcall	___ftneg
  8475  0AF1  0020               	movlb	0	; select bank0
  8476  0AF2  083E               	movf	?___ftneg,w
  8477  0AF3  00C4               	movwf	___ftadd@f2
  8478  0AF4  083F               	movf	?___ftneg+1,w
  8479  0AF5  00C5               	movwf	___ftadd@f2+1
  8480  0AF6  0840               	movf	?___ftneg+2,w
  8481  0AF7  00C6               	movwf	___ftadd@f2+2
  8482  0AF8  3000               	movlw	0
  8483  0AF9  00C1               	movwf	___ftadd@f1
  8484  0AFA  3090               	movlw	144
  8485  0AFB  00C2               	movwf	___ftadd@f1+1
  8486  0AFC  3042               	movlw	66
  8487  0AFD  00C3               	movwf	___ftadd@f1+2
  8488  0AFE  3184  242D  318A   	fcall	___ftadd
  8489  0B01  0020               	movlb	0	; select bank0
  8490  0B02  0841               	movf	?___ftadd,w
  8491  0B03  00CE               	movwf	___fttol@f1
  8492  0B04  0842               	movf	?___ftadd+1,w
  8493  0B05  00CF               	movwf	___fttol@f1+1
  8494  0B06  0843               	movf	?___ftadd+2,w
  8495  0B07  00D0               	movwf	___fttol@f1+2
  8496  0B08  318C  245E         	fcall	___fttol
  8497  0B0A  0020               	movlb	0	; select bank0
  8498  0B0B  084E               	movf	?___fttol,w
  8499  0B0C  0008               	return
  8500  0B0D                     __end_of_getPercentValue:	
  8501                           
  8502                           	psect	text35
  8503  0F4C                     __ptext35:	
  8504 ;; *************** function ___ftmul *****************
  8505 ;; Defined at:
  8506 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  f1              3   14[BANK0 ] float 
  8509 ;;  f2              3   17[BANK0 ] float 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8512 ;;  sign            1   29[BANK0 ] unsigned char 
  8513 ;;  cntr            1   28[BANK0 ] unsigned char 
  8514 ;;  exp             1   24[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  3   14[BANK0 ] float 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0, pclath, cstack
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:       16 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    6
  8531 ;; This function calls:
  8532 ;;		___ftpack
  8533 ;; This function is called by:
  8534 ;;		_getPercentValue
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function ___ftmul
  8540  0F4C                     ___ftmul:	
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8544  0F4C  0020               	movlb	0	; select bank0
  8545  0F4D  082E               	movf	___ftmul@f1,w
  8546  0F4E  00B4               	movwf	??___ftmul
  8547  0F4F  082F               	movf	___ftmul@f1+1,w
  8548  0F50  00B5               	movwf	??___ftmul+1
  8549  0F51  0830               	movf	___ftmul@f1+2,w
  8550  0F52  00B6               	movwf	??___ftmul+2
  8551  0F53  1003               	clrc
  8552  0F54  0D35               	rlf	??___ftmul+1,w
  8553  0F55  0D36               	rlf	??___ftmul+2,w
  8554  0F56  00B7               	movwf	??___ftmul+3
  8555  0F57  0837               	movf	??___ftmul+3,w
  8556  0F58  00B8               	movwf	___ftmul@exp
  8557  0F59  08B8               	movf	___ftmul@exp,f
  8558  0F5A  1D03               	skipz
  8559  0F5B  2F63               	goto	l5631
  8560  0F5C  3000               	movlw	0
  8561  0F5D  00AE               	movwf	?___ftmul
  8562  0F5E  3000               	movlw	0
  8563  0F5F  00AF               	movwf	?___ftmul+1
  8564  0F60  3000               	movlw	0
  8565  0F61  00B0               	movwf	?___ftmul+2
  8566  0F62  0008               	return
  8567  0F63                     l5631:	
  8568  0F63  0831               	movf	___ftmul@f2,w
  8569  0F64  00B4               	movwf	??___ftmul
  8570  0F65  0832               	movf	___ftmul@f2+1,w
  8571  0F66  00B5               	movwf	??___ftmul+1
  8572  0F67  0833               	movf	___ftmul@f2+2,w
  8573  0F68  00B6               	movwf	??___ftmul+2
  8574  0F69  1003               	clrc
  8575  0F6A  0D35               	rlf	??___ftmul+1,w
  8576  0F6B  0D36               	rlf	??___ftmul+2,w
  8577  0F6C  00B7               	movwf	??___ftmul+3
  8578  0F6D  0837               	movf	??___ftmul+3,w
  8579  0F6E  00BD               	movwf	___ftmul@sign
  8580  0F6F  08BD               	movf	___ftmul@sign,f
  8581  0F70  1D03               	skipz
  8582  0F71  2F79               	goto	l5637
  8583  0F72  3000               	movlw	0
  8584  0F73  00AE               	movwf	?___ftmul
  8585  0F74  3000               	movlw	0
  8586  0F75  00AF               	movwf	?___ftmul+1
  8587  0F76  3000               	movlw	0
  8588  0F77  00B0               	movwf	?___ftmul+2
  8589  0F78  0008               	return
  8590  0F79                     l5637:	
  8591  0F79  083D               	movf	___ftmul@sign,w
  8592  0F7A  3E7B               	addlw	123
  8593  0F7B  00B4               	movwf	??___ftmul
  8594  0F7C  0834               	movf	??___ftmul,w
  8595  0F7D  07B8               	addwf	___ftmul@exp,f
  8596  0F7E  082E               	movf	___ftmul@f1,w
  8597  0F7F  00B4               	movwf	??___ftmul
  8598  0F80  082F               	movf	___ftmul@f1+1,w
  8599  0F81  00B5               	movwf	??___ftmul+1
  8600  0F82  0830               	movf	___ftmul@f1+2,w
  8601  0F83  00B6               	movwf	??___ftmul+2
  8602  0F84  3010               	movlw	16
  8603  0F85                     u4455:	
  8604  0F85  36B6               	lsrf	??___ftmul+2,f
  8605  0F86  0CB5               	rrf	??___ftmul+1,f
  8606  0F87  0CB4               	rrf	??___ftmul,f
  8607  0F88  0B89               	decfsz	9,f
  8608  0F89  2F85               	goto	u4455
  8609  0F8A  0834               	movf	??___ftmul,w
  8610  0F8B  00B7               	movwf	??___ftmul+3
  8611  0F8C  0837               	movf	??___ftmul+3,w
  8612  0F8D  00BD               	movwf	___ftmul@sign
  8613  0F8E  0831               	movf	___ftmul@f2,w
  8614  0F8F  00B4               	movwf	??___ftmul
  8615  0F90  0832               	movf	___ftmul@f2+1,w
  8616  0F91  00B5               	movwf	??___ftmul+1
  8617  0F92  0833               	movf	___ftmul@f2+2,w
  8618  0F93  00B6               	movwf	??___ftmul+2
  8619  0F94  3010               	movlw	16
  8620  0F95                     u4465:	
  8621  0F95  36B6               	lsrf	??___ftmul+2,f
  8622  0F96  0CB5               	rrf	??___ftmul+1,f
  8623  0F97  0CB4               	rrf	??___ftmul,f
  8624  0F98  0B89               	decfsz	9,f
  8625  0F99  2F95               	goto	u4465
  8626  0F9A  0834               	movf	??___ftmul,w
  8627  0F9B  00B7               	movwf	??___ftmul+3
  8628  0F9C  0837               	movf	??___ftmul+3,w
  8629  0F9D  06BD               	xorwf	___ftmul@sign,f
  8630  0F9E  3080               	movlw	128
  8631  0F9F  00B4               	movwf	??___ftmul
  8632  0FA0  0834               	movf	??___ftmul,w
  8633  0FA1  05BD               	andwf	___ftmul@sign,f
  8634  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8635  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8636  0FA4  30FF               	movlw	255
  8637  0FA5  05B1               	andwf	___ftmul@f2,f
  8638  0FA6  30FF               	movlw	255
  8639  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8640  0FA8  3000               	movlw	0
  8641  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8642  0FAA  3000               	movlw	0
  8643  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8644  0FAC  3000               	movlw	0
  8645  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8646  0FAE  3000               	movlw	0
  8647  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8648  0FB0  3007               	movlw	7
  8649  0FB1  00B4               	movwf	??___ftmul
  8650  0FB2  0834               	movf	??___ftmul,w
  8651  0FB3  00BC               	movwf	___ftmul@cntr
  8652  0FB4                     l5649:	
  8653  0FB4  1C2E               	btfss	___ftmul@f1,0
  8654  0FB5  2FBC               	goto	l5653
  8655  0FB6  0831               	movf	___ftmul@f2,w
  8656  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8657  0FB8  0832               	movf	___ftmul@f2+1,w
  8658  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8659  0FBA  0833               	movf	___ftmul@f2+2,w
  8660  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8661  0FBC                     l5653:	
  8662  0FBC  3001               	movlw	1
  8663  0FBD                     u4485:	
  8664  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8665  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8666  0FBF  0CAE               	rrf	___ftmul@f1,f
  8667  0FC0  0B89               	decfsz	9,f
  8668  0FC1  2FBD               	goto	u4485
  8669  0FC2  3001               	movlw	1
  8670  0FC3                     u4495:	
  8671  0FC3  35B1               	lslf	___ftmul@f2,f
  8672  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8673  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8674  0FC6  0B89               	decfsz	9,f
  8675  0FC7  2FC3               	goto	u4495
  8676  0FC8  3001               	movlw	1
  8677  0FC9  02BC               	subwf	___ftmul@cntr,f
  8678  0FCA  1D03               	btfss	3,2
  8679  0FCB  2FB4               	goto	l5649
  8680  0FCC  3009               	movlw	9
  8681  0FCD  00B4               	movwf	??___ftmul
  8682  0FCE  0834               	movf	??___ftmul,w
  8683  0FCF  00BC               	movwf	___ftmul@cntr
  8684  0FD0                     l5661:	
  8685  0FD0  1C2E               	btfss	___ftmul@f1,0
  8686  0FD1  2FD8               	goto	l5665
  8687  0FD2  0831               	movf	___ftmul@f2,w
  8688  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8689  0FD4  0832               	movf	___ftmul@f2+1,w
  8690  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8691  0FD6  0833               	movf	___ftmul@f2+2,w
  8692  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8693  0FD8                     l5665:	
  8694  0FD8  3001               	movlw	1
  8695  0FD9                     u4525:	
  8696  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8697  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8698  0FDB  0CAE               	rrf	___ftmul@f1,f
  8699  0FDC  0B89               	decfsz	9,f
  8700  0FDD  2FD9               	goto	u4525
  8701  0FDE  3001               	movlw	1
  8702  0FDF                     u4535:	
  8703  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8704  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8705  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8706  0FE2  0B89               	decfsz	9,f
  8707  0FE3  2FDF               	goto	u4535
  8708  0FE4  3001               	movlw	1
  8709  0FE5  02BC               	subwf	___ftmul@cntr,f
  8710  0FE6  1D03               	btfss	3,2
  8711  0FE7  2FD0               	goto	l5661
  8712  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8713  0FE9  00A0               	movwf	___ftpack@arg
  8714  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8715  0FEB  00A1               	movwf	___ftpack@arg+1
  8716  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8717  0FED  00A2               	movwf	___ftpack@arg+2
  8718  0FEE  0838               	movf	___ftmul@exp,w
  8719  0FEF  00B4               	movwf	??___ftmul
  8720  0FF0  0834               	movf	??___ftmul,w
  8721  0FF1  00A3               	movwf	___ftpack@exp
  8722  0FF2  083D               	movf	___ftmul@sign,w
  8723  0FF3  00B5               	movwf	??___ftmul+1
  8724  0FF4  0835               	movf	??___ftmul+1,w
  8725  0FF5  00A4               	movwf	___ftpack@sign
  8726  0FF6  3189  2181         	fcall	___ftpack
  8727  0FF8  0020               	movlb	0	; select bank0
  8728  0FF9  0820               	movf	?___ftpack,w
  8729  0FFA  00AE               	movwf	?___ftmul
  8730  0FFB  0821               	movf	?___ftpack+1,w
  8731  0FFC  00AF               	movwf	?___ftmul+1
  8732  0FFD  0822               	movf	?___ftpack+2,w
  8733  0FFE  00B0               	movwf	?___ftmul+2
  8734  0FFF  0008               	return
  8735  1000                     __end_of___ftmul:	
  8736                           
  8737                           	psect	text36
  8738  1E17                     __ptext36:	
  8739 ;; *************** function _setMemory_Modify *****************
  8740 ;; Defined at:
  8741 ;;		line 1003 in file "../src/MCU_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  command         1    wreg     unsigned char 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  command         1    1[BANK0 ] unsigned char 
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, status,2, status,0
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        2 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    5
  8762 ;; This function calls:
  8763 ;;		Nothing
  8764 ;; This function is called by:
  8765 ;;		_setLog_Code
  8766 ;;		_setRFSW_AdjControl
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _setMemory_Modify
  8772  1E17                     _setMemory_Modify:	
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8776                           ;setMemory_Modify@command stored from wreg
  8777  1E17  0020               	movlb	0	; select bank0
  8778  1E18  00A1               	movwf	setMemory_Modify@command
  8779                           
  8780                           ;MCU_B1.c: 1004: Memory.Modify = command == 1 ? 1 : 0;
  8781  1E19  0821               	movf	setMemory_Modify@command,w
  8782  1E1A  3A01               	xorlw	1
  8783  1E1B  3000               	movlw	0
  8784  1E1C  1903               	skipnz
  8785  1E1D  3001               	movlw	1
  8786  1E1E  00A0               	movwf	??_setMemory_Modify
  8787  1E1F  0023               	movlb	3	; select bank3
  8788  1E20  0844               	movf	(_Memory^(0+384)+36),w
  8789  1E21  0020               	movlb	0	; select bank0
  8790  1E22  0620               	xorwf	??_setMemory_Modify,w
  8791  1E23  39FE               	andlw	-2
  8792  1E24  0620               	xorwf	??_setMemory_Modify,w
  8793  1E25  0023               	movlb	3	; select bank3
  8794  1E26  00C4               	movwf	(_Memory^(0+384)+36)
  8795                           
  8796                           ;MCU_B1.c: 1005: Memory.Time = 0;
  8797  1E27  01C2               	clrf	(_Memory^(0+384)+34)
  8798  1E28  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8799  1E29  0008               	return
  8800  1E2A                     __end_of_setMemory_Modify:	
  8801                           
  8802                           	psect	text37
  8803  1DBF                     __ptext37:	
  8804 ;; *************** function _getRF_KeyStatus *****************
  8805 ;; Defined at:
  8806 ;;		line 190 in file "../src/RF_Control_B1.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  key             1    1[BANK0 ] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      unsigned char 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;Total ram usage:        3 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    5
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_setRF_Main
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _getRF_KeyStatus
  8836  1DBF                     _getRF_KeyStatus:	
  8837                           
  8838                           ;RF_Control_B1.c: 191: char key = 0;
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8842  1DBF  0020               	movlb	0	; select bank0
  8843  1DC0  01A1               	clrf	getRF_KeyStatus@key
  8844                           
  8845                           ;RF_Control_B1.c: 201: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8846  1DC1  01A2               	clrf	_getRF_KeyStatus$5487
  8847  1DC2  0AA2               	incf	_getRF_KeyStatus$5487,f
  8848  1DC3  1F0C               	btfss	12,6	;volatile
  8849  1DC4  1A0C               	btfsc	12,4	;volatile
  8850  1DC5  2DCA               	goto	l6617
  8851  1DC6  1C0C               	btfss	12,0	;volatile
  8852  1DC7  1B8C               	btfsc	12,7	;volatile
  8853  1DC8  2DCA               	goto	l6617
  8854  1DC9  01A2               	clrf	_getRF_KeyStatus$5487
  8855  1DCA                     l6617:	
  8856  1DCA  0822               	movf	_getRF_KeyStatus$5487,w
  8857  1DCB  00A0               	movwf	??_getRF_KeyStatus
  8858  1DCC  0820               	movf	??_getRF_KeyStatus,w
  8859  1DCD  00A1               	movwf	getRF_KeyStatus@key
  8860                           
  8861                           ;RF_Control_B1.c: 203: return key;
  8862  1DCE  0821               	movf	getRF_KeyStatus@key,w
  8863  1DCF  0008               	return
  8864  1DD0                     __end_of_getRF_KeyStatus:	
  8865                           
  8866                           	psect	text38
  8867  1DAE                     __ptext38:	
  8868 ;; *************** function _getBuz_GO *****************
  8869 ;; Defined at:
  8870 ;;		line 82 in file "../src/Buzzer_B1.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  i               2    4[BANK0 ] int 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  2    0[BANK0 ] int 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8884 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;Total ram usage:        6 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    5
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_setRF_Main
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           
  8899                           ;psect for function _getBuz_GO
  8900  1DAE                     _getBuz_GO:	
  8901                           
  8902                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8903                           
  8904                           ;incstack = 0
  8905                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8906  1DAE  0021               	movlb	1	; select bank1
  8907  1DAF  0C2F               	rrf	_Buz1^(0+128),w
  8908  1DB0  3901               	andlw	1
  8909  1DB1  0020               	movlb	0	; select bank0
  8910  1DB2  00A2               	movwf	??_getBuz_GO
  8911  1DB3  01A3               	clrf	??_getBuz_GO+1
  8912  1DB4  0822               	movf	??_getBuz_GO,w
  8913  1DB5  00A4               	movwf	getBuz_GO@i
  8914  1DB6  0823               	movf	??_getBuz_GO+1,w
  8915  1DB7  00A5               	movwf	getBuz_GO@i+1
  8916                           
  8917                           ;Buzzer_B1.c: 84: return i;
  8918  1DB8  0825               	movf	getBuz_GO@i+1,w
  8919  1DB9  01A1               	clrf	?_getBuz_GO+1
  8920  1DBA  07A1               	addwf	?_getBuz_GO+1,f
  8921  1DBB  0824               	movf	getBuz_GO@i,w
  8922  1DBC  01A0               	clrf	?_getBuz_GO
  8923  1DBD  07A0               	addwf	?_getBuz_GO,f
  8924  1DBE  0008               	return
  8925  1DBF                     __end_of_getBuz_GO:	
  8926                           
  8927                           	psect	text39
  8928  09E2                     __ptext39:	
  8929 ;; *************** function _CC2500_TxData *****************
  8930 ;; Defined at:
  8931 ;;		line 32 in file "../src/CC2500_B1.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;		None
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;		None               void
  8938 ;; Registers used:
  8939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;Total ram usage:        2 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:    7
  8952 ;; This function calls:
  8953 ;;		_CC2500_WriteByte
  8954 ;;		_CC2500_WriteCommand
  8955 ;;		_Timeout_Counter
  8956 ;;		_set_TimeoutCleared
  8957 ;; This function is called by:
  8958 ;;		_setRF_Main
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           
  8963                           ;psect for function _CC2500_TxData
  8964  09E2                     _CC2500_TxData:	
  8965                           
  8966                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8967                           ;CC2500_B1.c: 35: RC0 = 0;
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8971  09E2  0020               	movlb	0	; select bank0
  8972  09E3  100E               	bcf	14,0	;volatile
  8973                           
  8974                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8975  09E4  307F               	movlw	127
  8976  09E5  00A4               	movwf	??_CC2500_TxData
  8977  09E6  0824               	movf	??_CC2500_TxData,w
  8978  09E7  00FB               	movwf	_SPI0Buffer
  8979                           
  8980                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8981  09E8  29EC               	goto	l6281
  8982  09E9                     l6279:	
  8983                           
  8984                           ;CC2500_B1.c: 38: Timeout_Counter();
  8985  09E9  319E  2665  3189   	fcall	_Timeout_Counter
  8986  09EC                     l6281:	
  8987  09EC  0020               	movlb	0	; select bank0
  8988  09ED  1E8E               	btfss	14,5	;volatile
  8989  09EE  29F2               	goto	l6285
  8990  09EF  0021               	movlb	1	; select bank1
  8991  09F0  1D2C               	btfss	(_myMain^(0+128)+12),2
  8992  09F1  29E9               	goto	l6279
  8993  09F2                     l6285:	
  8994                           
  8995                           ;CC2500_B1.c: 39: };
  8996                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8997  09F2  319C  2431  3189   	fcall	_set_TimeoutCleared
  8998                           
  8999                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9000  09F5  319E  263D  3189   	fcall	_CC2500_WriteByte
  9001                           
  9002                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9003  09F8  0021               	movlb	1	; select bank1
  9004  09F9  0852               	movf	_Tx_Length^(0+128),w
  9005  09FA  0020               	movlb	0	; select bank0
  9006  09FB  00A4               	movwf	??_CC2500_TxData
  9007  09FC  0824               	movf	??_CC2500_TxData,w
  9008  09FD  00FB               	movwf	_SPI0Buffer
  9009                           
  9010                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9011  09FE  319E  263D  3189   	fcall	_CC2500_WriteByte
  9012                           
  9013                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9014  0A01  0020               	movlb	0	; select bank0
  9015  0A02  01A5               	clrf	CC2500_TxData@loop_e
  9016  0A03                     l6299:	
  9017  0A03  0021               	movlb	1	; select bank1
  9018  0A04  0852               	movf	_Tx_Length^(0+128),w
  9019  0A05  0020               	movlb	0	; select bank0
  9020  0A06  0225               	subwf	CC2500_TxData@loop_e,w
  9021  0A07  1803               	btfsc	3,0
  9022  0A08  2A1B               	goto	l231
  9023                           
  9024                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9025  0A09  0825               	movf	CC2500_TxData@loop_e,w
  9026  0A0A  3E20               	addlw	_RF_Data& (0+255)
  9027  0A0B  0086               	movwf	6
  9028  0A0C  3001               	movlw	1	; select bank2/3
  9029  0A0D  0087               	movwf	7
  9030  0A0E  0801               	movf	1,w
  9031  0A0F  00A4               	movwf	??_CC2500_TxData
  9032  0A10  0824               	movf	??_CC2500_TxData,w
  9033  0A11  00FB               	movwf	_SPI0Buffer
  9034                           
  9035                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9036  0A12  319E  263D  3189   	fcall	_CC2500_WriteByte
  9037  0A15  3001               	movlw	1
  9038  0A16  0020               	movlb	0	; select bank0
  9039  0A17  00A4               	movwf	??_CC2500_TxData
  9040  0A18  0824               	movf	??_CC2500_TxData,w
  9041  0A19  07A5               	addwf	CC2500_TxData@loop_e,f
  9042  0A1A  2A03               	goto	l6299
  9043  0A1B                     l231:	
  9044                           
  9045                           ;CC2500_B1.c: 48: }
  9046                           ;CC2500_B1.c: 49: RC0 = 1;
  9047  0A1B  140E               	bsf	14,0	;volatile
  9048                           
  9049                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9050  0A1C  3035               	movlw	53
  9051  0A1D  319E  26D3  3189   	fcall	_CC2500_WriteCommand
  9052                           
  9053                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9054  0A20  2A24               	goto	l6305
  9055  0A21                     l6303:	
  9056                           
  9057                           ;CC2500_B1.c: 52: Timeout_Counter();
  9058  0A21  319E  2665  3189   	fcall	_Timeout_Counter
  9059  0A24                     l6305:	
  9060  0A24  0020               	movlb	0	; select bank0
  9061  0A25  188E               	btfsc	14,1	;volatile
  9062  0A26  2A2A               	goto	l6309
  9063  0A27  0021               	movlb	1	; select bank1
  9064  0A28  1D2C               	btfss	(_myMain^(0+128)+12),2
  9065  0A29  2A21               	goto	l6303
  9066  0A2A                     l6309:	
  9067                           
  9068                           ;CC2500_B1.c: 53: };
  9069                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9070  0A2A  319C  2431  3189   	fcall	_set_TimeoutCleared
  9071                           
  9072                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9073  0A2D  2A31               	goto	l6313
  9074  0A2E                     l6311:	
  9075                           
  9076                           ;CC2500_B1.c: 57: Timeout_Counter();
  9077  0A2E  319E  2665  3189   	fcall	_Timeout_Counter
  9078  0A31                     l6313:	
  9079  0A31  0020               	movlb	0	; select bank0
  9080  0A32  1C8E               	btfss	14,1	;volatile
  9081  0A33  2A37               	goto	l6317
  9082  0A34  0021               	movlb	1	; select bank1
  9083  0A35  1D2C               	btfss	(_myMain^(0+128)+12),2
  9084  0A36  2A2E               	goto	l6311
  9085  0A37                     l6317:	
  9086                           
  9087                           ;CC2500_B1.c: 58: };
  9088                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9089  0A37  319C  2431  3189   	fcall	_set_TimeoutCleared
  9090                           
  9091                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9092  0A3A  3036               	movlw	54
  9093  0A3B  319E  26D3  3189   	fcall	_CC2500_WriteCommand
  9094                           
  9095                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9096  0A3E  303B               	movlw	59
  9097  0A3F  319E  26D3         	fcall	_CC2500_WriteCommand
  9098                           
  9099                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9100  0A41  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9101  0A42  0008               	return
  9102  0A43                     __end_of_CC2500_TxData:	
  9103                           
  9104                           	psect	text40
  9105  0B73                     __ptext40:	
  9106 ;; *************** function _CC2500_RxData *****************
  9107 ;; Defined at:
  9108 ;;		line 70 in file "../src/CC2500_B1.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;		None               void
  9115 ;; Registers used:
  9116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;Total ram usage:        2 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    7
  9129 ;; This function calls:
  9130 ;;		_CC2500_ReadByte
  9131 ;;		_CC2500_ReadStatus
  9132 ;;		_CC2500_WriteByte
  9133 ;;		_Timeout_Counter
  9134 ;;		_set_TimeoutCleared
  9135 ;; This function is called by:
  9136 ;;		_setRF_Main
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _CC2500_RxData
  9142  0B73                     _CC2500_RxData:	
  9143                           
  9144                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9145                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9149  0B73  0020               	movlb	0	; select bank0
  9150  0B74  188E               	btfsc	14,1	;volatile
  9151  0B75  2B7A               	goto	l6331
  9152  0B76  2B83               	goto	l6337
  9153  0B77                     l6329:	
  9154                           ;CC2500_B1.c: 76: {
  9155                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9156                           
  9157                           
  9158                           ;CC2500_B1.c: 78: Timeout_Counter();
  9159  0B77  319E  2665  318B   	fcall	_Timeout_Counter
  9160  0B7A                     l6331:	
  9161  0B7A  0020               	movlb	0	; select bank0
  9162  0B7B  1C8E               	btfss	14,1	;volatile
  9163  0B7C  2B80               	goto	l6335
  9164  0B7D  0021               	movlb	1	; select bank1
  9165  0B7E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9166  0B7F  2B77               	goto	l6329
  9167  0B80                     l6335:	
  9168                           
  9169                           ;CC2500_B1.c: 79: };
  9170                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9171  0B80  319C  2431  318B   	fcall	_set_TimeoutCleared
  9172  0B83                     l6337:	
  9173                           
  9174                           ;CC2500_B1.c: 81: }
  9175                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9176  0B83  303B               	movlw	59
  9177  0B84  3190  208F  318B   	fcall	_CC2500_ReadStatus
  9178                           
  9179                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9180  0B87  0021               	movlb	1	; select bank1
  9181  0B88  0855               	movf	_s_data^(0+128),w
  9182  0B89  1903               	btfsc	3,2
  9183  0B8A  0008               	return
  9184                           
  9185                           ;CC2500_B1.c: 86: RC0 = 0;
  9186  0B8B  0020               	movlb	0	; select bank0
  9187  0B8C  100E               	bcf	14,0	;volatile
  9188                           
  9189                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9190  0B8D  30FF               	movlw	255
  9191  0B8E  00A4               	movwf	??_CC2500_RxData
  9192  0B8F  0824               	movf	??_CC2500_RxData,w
  9193  0B90  00FB               	movwf	_SPI0Buffer
  9194                           
  9195                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9196  0B91  2B95               	goto	l6347
  9197  0B92                     l6345:	
  9198                           
  9199                           ;CC2500_B1.c: 89: Timeout_Counter();
  9200  0B92  319E  2665  318B   	fcall	_Timeout_Counter
  9201  0B95                     l6347:	
  9202  0B95  0020               	movlb	0	; select bank0
  9203  0B96  1E8E               	btfss	14,5	;volatile
  9204  0B97  2B9B               	goto	l6351
  9205  0B98  0021               	movlb	1	; select bank1
  9206  0B99  1D2C               	btfss	(_myMain^(0+128)+12),2
  9207  0B9A  2B92               	goto	l6345
  9208  0B9B                     l6351:	
  9209                           
  9210                           ;CC2500_B1.c: 90: };
  9211                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9212  0B9B  319C  2431  318B   	fcall	_set_TimeoutCleared
  9213                           
  9214                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9215  0B9E  319E  263D  318B   	fcall	_CC2500_WriteByte
  9216                           
  9217                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9218  0BA1  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9219                           
  9220                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9221  0BA4  087B               	movf	_SPI0Buffer,w
  9222  0BA5  0020               	movlb	0	; select bank0
  9223  0BA6  00A4               	movwf	??_CC2500_RxData
  9224  0BA7  0824               	movf	??_CC2500_RxData,w
  9225  0BA8  0021               	movlb	1	; select bank1
  9226  0BA9  00D0               	movwf	_Rx_Length^(0+128)
  9227                           
  9228                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9229  0BAA  0020               	movlb	0	; select bank0
  9230  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9231  0BAC                     l6367:	
  9232  0BAC  0021               	movlb	1	; select bank1
  9233  0BAD  0850               	movf	_Rx_Length^(0+128),w
  9234  0BAE  0020               	movlb	0	; select bank0
  9235  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9236  0BB0  1803               	btfsc	3,0
  9237  0BB1  2BC4               	goto	l6369
  9238                           
  9239                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9240  0BB2  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9241                           
  9242                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9243  0BB5  087B               	movf	_SPI0Buffer,w
  9244  0BB6  0020               	movlb	0	; select bank0
  9245  0BB7  00A4               	movwf	??_CC2500_RxData
  9246  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9247  0BB9  3E20               	addlw	_RF_Data& (0+255)
  9248  0BBA  0086               	movwf	6
  9249  0BBB  3001               	movlw	1	; select bank2/3
  9250  0BBC  0087               	movwf	7
  9251  0BBD  0824               	movf	??_CC2500_RxData,w
  9252  0BBE  0081               	movwf	1
  9253  0BBF  3001               	movlw	1
  9254  0BC0  00A4               	movwf	??_CC2500_RxData
  9255  0BC1  0824               	movf	??_CC2500_RxData,w
  9256  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9257  0BC3  2BAC               	goto	l6367
  9258  0BC4                     l6369:	
  9259                           
  9260                           ;CC2500_B1.c: 99: }
  9261                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9262  0BC4  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9263                           
  9264                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9265  0BC7  087B               	movf	_SPI0Buffer,w
  9266  0BC8  0020               	movlb	0	; select bank0
  9267  0BC9  00A4               	movwf	??_CC2500_RxData
  9268  0BCA  0824               	movf	??_CC2500_RxData,w
  9269  0BCB  0021               	movlb	1	; select bank1
  9270  0BCC  00CF               	movwf	_RSSI^(0+128)
  9271                           
  9272                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9273  0BCD  319E  26A4         	fcall	_CC2500_ReadByte
  9274                           
  9275                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9276  0BCF  087B               	movf	_SPI0Buffer,w
  9277  0BD0  0020               	movlb	0	; select bank0
  9278  0BD1  00A4               	movwf	??_CC2500_RxData
  9279  0BD2  0824               	movf	??_CC2500_RxData,w
  9280  0BD3  0021               	movlb	1	; select bank1
  9281  0BD4  00CC               	movwf	_CRC^(0+128)
  9282                           
  9283                           ;CC2500_B1.c: 104: RC0 = 1;
  9284  0BD5  0020               	movlb	0	; select bank0
  9285  0BD6  140E               	bsf	14,0	;volatile
  9286                           
  9287                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9288  0BD7  0021               	movlb	1	; select bank1
  9289  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9290                           
  9291                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9292  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9293                           
  9294                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9295  0BDA  11BB               	bcf	_RF1^(0+128),3
  9296                           
  9297                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9298  0BDB  14BB               	bsf	_RF1^(0+128),1
  9299  0BDC  0008               	return
  9300  0BDD                     __end_of_CC2500_RxData:	
  9301                           
  9302                           	psect	text41
  9303  108F                     __ptext41:	
  9304 ;; *************** function _CC2500_ReadStatus *****************
  9305 ;; Defined at:
  9306 ;;		line 301 in file "../src/CC2500_B1.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  status_addr     1    wreg     unsigned char 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;		None               void
  9313 ;; Registers used:
  9314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;Total ram usage:        2 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    6
  9327 ;; This function calls:
  9328 ;;		_CC2500_ReadByte
  9329 ;;		_CC2500_WriteByte
  9330 ;;		_Timeout_Counter
  9331 ;;		_set_TimeoutCleared
  9332 ;; This function is called by:
  9333 ;;		_CC2500_RxData
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _CC2500_ReadStatus
  9339  108F                     _CC2500_ReadStatus:	
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9343                           ;CC2500_ReadStatus@status_addr stored from wreg
  9344  108F  0020               	movlb	0	; select bank0
  9345  1090  00A3               	movwf	CC2500_ReadStatus@status_addr
  9346                           
  9347                           ;CC2500_B1.c: 302: RC0 = 0;
  9348  1091  100E               	bcf	14,0	;volatile
  9349                           
  9350                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9351  1092  0823               	movf	CC2500_ReadStatus@status_addr,w
  9352  1093  3EC0               	addlw	192
  9353  1094  00A2               	movwf	??_CC2500_ReadStatus
  9354  1095  0822               	movf	??_CC2500_ReadStatus,w
  9355  1096  00FB               	movwf	_SPI0Buffer
  9356                           
  9357                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9358  1097  289B               	goto	l6145
  9359  1098                     l6143:	
  9360                           
  9361                           ;CC2500_B1.c: 306: Timeout_Counter();
  9362  1098  319E  2665  3190   	fcall	_Timeout_Counter
  9363  109B                     l6145:	
  9364  109B  0020               	movlb	0	; select bank0
  9365  109C  1E8E               	btfss	14,5	;volatile
  9366  109D  28A1               	goto	l6149
  9367  109E  0021               	movlb	1	; select bank1
  9368  109F  1D2C               	btfss	(_myMain^(0+128)+12),2
  9369  10A0  2898               	goto	l6143
  9370  10A1                     l6149:	
  9371                           
  9372                           ;CC2500_B1.c: 307: };
  9373                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9374  10A1  319C  2431  3190   	fcall	_set_TimeoutCleared
  9375                           
  9376                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9377  10A4  319E  263D  3190   	fcall	_CC2500_WriteByte
  9378                           
  9379                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9380  10A7  319E  26A4         	fcall	_CC2500_ReadByte
  9381                           
  9382                           ;CC2500_B1.c: 312: RC0 = 1;
  9383  10A9  0020               	movlb	0	; select bank0
  9384  10AA  140E               	bsf	14,0	;volatile
  9385                           
  9386                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9387  10AB  087B               	movf	_SPI0Buffer,w
  9388  10AC  00A2               	movwf	??_CC2500_ReadStatus
  9389  10AD  0822               	movf	??_CC2500_ReadStatus,w
  9390  10AE  0021               	movlb	1	; select bank1
  9391  10AF  00D5               	movwf	_s_data^(0+128)
  9392  10B0  0008               	return
  9393  10B1                     __end_of_CC2500_ReadStatus:	
  9394                           
  9395                           	psect	text42
  9396  1EA4                     __ptext42:	
  9397 ;; *************** function _CC2500_ReadByte *****************
  9398 ;; Defined at:
  9399 ;;		line 235 in file "../src/CC2500_B1.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;		None
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9404 ;; Return value:  Size  Location     Type
  9405 ;;		None               void
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;Total ram usage:        2 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    5
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_CC2500_RxData
  9424 ;;		_CC2500_ReadStatus
  9425 ;;		_CC2500_ReadREG
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _CC2500_ReadByte
  9431  1EA4                     _CC2500_ReadByte:	
  9432                           
  9433                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9434                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9438  1EA4  0020               	movlb	0	; select bank0
  9439  1EA5  01A1               	clrf	CC2500_ReadByte@loop_b
  9440  1EA6                     L5:	
  9441  1EA6  3008               	movlw	8
  9442  1EA7  0221               	subwf	CC2500_ReadByte@loop_b,w
  9443  1EA8  1803               	btfsc	3,0
  9444  1EA9  0008               	return
  9445                           
  9446                           ;CC2500_B1.c: 238: RC3 = 1;
  9447  1EAA  158E               	bsf	14,3	;volatile
  9448                           
  9449                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9450  1EAB  1003               	clrc
  9451  1EAC  0DFB               	rlf	_SPI0Buffer,f
  9452                           
  9453                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9454  1EAD  1E8E               	btfss	14,5	;volatile
  9455  1EAE  2EB1               	goto	l6049
  9456                           
  9457                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9458  1EAF  147B               	bsf	_SPI0Buffer,0
  9459  1EB0  2EB5               	goto	l6051
  9460  1EB1                     l6049:	
  9461                           
  9462                           ;CC2500_B1.c: 242: else
  9463                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9464  1EB1  30FE               	movlw	254
  9465  1EB2  00A0               	movwf	??_CC2500_ReadByte
  9466  1EB3  0820               	movf	??_CC2500_ReadByte,w
  9467  1EB4  05FB               	andwf	_SPI0Buffer,f
  9468  1EB5                     l6051:	
  9469                           
  9470                           ;CC2500_B1.c: 244: RC3 = 0;
  9471  1EB5  118E               	bcf	14,3	;volatile
  9472  1EB6  3001               	movlw	1
  9473  1EB7  00A0               	movwf	??_CC2500_ReadByte
  9474  1EB8  0820               	movf	??_CC2500_ReadByte,w
  9475  1EB9  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9476  1EBA  2EA6               	goto	L5
  9477  1EBB                     __end_of_CC2500_ReadByte:	
  9478                           
  9479                           	psect	text43
  9480  1C01                     __ptext43:	
  9481 ;; *************** function _RF_Initialization *****************
  9482 ;; Defined at:
  9483 ;;		line 9 in file "../src/RF_Control_B1.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;		None
  9488 ;; Return value:  Size  Location     Type
  9489 ;;		None               void
  9490 ;; Registers used:
  9491 ;;		wreg, status,2, status,0, pclath, cstack
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;Total ram usage:        0 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    6
  9504 ;; This function calls:
  9505 ;;		_setRF_Initialization
  9506 ;; This function is called by:
  9507 ;;		_main
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           
  9512                           ;psect for function _RF_Initialization
  9513  1C01                     _RF_Initialization:	
  9514                           
  9515                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9519  1C01  319C  24BA         	fcall	_setRF_Initialization
  9520  1C03  0008               	return
  9521  1C04                     __end_of_RF_Initialization:	
  9522                           
  9523                           	psect	text44
  9524  1CBA                     __ptext44:	
  9525 ;; *************** function _setRF_Initialization *****************
  9526 ;; Defined at:
  9527 ;;		line 43 in file "../src/RF_Control_B1.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;		None
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;		None
  9532 ;; Return value:  Size  Location     Type
  9533 ;;		None               void
  9534 ;; Registers used:
  9535 ;;		wreg
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;Total ram usage:        1 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    5
  9548 ;; This function calls:
  9549 ;;		Nothing
  9550 ;; This function is called by:
  9551 ;;		_RF_Initialization
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           
  9556                           ;psect for function _setRF_Initialization
  9557  1CBA                     _setRF_Initialization:	
  9558                           
  9559                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9560                           
  9561                           ;incstack = 0
  9562                           ; Regs used in _setRF_Initialization: [wreg]
  9563  1CBA  3015               	movlw	21
  9564  1CBB  0020               	movlb	0	; select bank0
  9565  1CBC  00A0               	movwf	??_setRF_Initialization
  9566  1CBD  0820               	movf	??_setRF_Initialization,w
  9567  1CBE  0021               	movlb	1	; select bank1
  9568  1CBF  00D2               	movwf	_Tx_Length^(0+128)
  9569                           
  9570                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9571  1CC0  300A               	movlw	10
  9572  1CC1  00C2               	movwf	(_RF1^(0+128)+7)
  9573  1CC2  3000               	movlw	0
  9574  1CC3  00C3               	movwf	(_RF1^(0+128)+8)
  9575  1CC4  0008               	return
  9576  1CC5                     __end_of_setRF_Initialization:	
  9577                           
  9578                           	psect	text45
  9579  1DF3                     __ptext45:	
  9580 ;; *************** function _Mcu_Initialization *****************
  9581 ;; Defined at:
  9582 ;;		line 30 in file "../src/MCU_B1.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;		None
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;		None               void
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0, pclath, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;Total ram usage:        0 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    6
  9603 ;; This function calls:
  9604 ;;		_ADC_Set
  9605 ;;		_Fosc_Set
  9606 ;;		_IOC_Set
  9607 ;;		_IO_Set
  9608 ;;		_TMR1_Set
  9609 ;;		_WDT_Set
  9610 ;; This function is called by:
  9611 ;;		_main
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _Mcu_Initialization
  9617  1DF3                     _Mcu_Initialization:	
  9618                           
  9619                           ;MCU_B1.c: 32: Fosc_Set();
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9623  1DF3  319C  242D  319D   	fcall	_Fosc_Set
  9624                           
  9625                           ;MCU_B1.c: 34: IO_Set();
  9626  1DF6  319E  26BB  319D   	fcall	_IO_Set
  9627                           
  9628                           ;MCU_B1.c: 36: ;;
  9629                           ;MCU_B1.c: 38: TMR1_Set();
  9630  1DF9  319D  250B  319D   	fcall	_TMR1_Set
  9631                           
  9632                           ;MCU_B1.c: 40: ADC_Set();
  9633  1DFC  3190  2066  319D   	fcall	_ADC_Set
  9634                           
  9635                           ;MCU_B1.c: 42: ;;
  9636                           ;MCU_B1.c: 44: ;;
  9637                           ;MCU_B1.c: 46: IOC_Set();
  9638  1DFF  319D  2524  319D   	fcall	_IOC_Set
  9639                           
  9640                           ;MCU_B1.c: 48: ;;
  9641                           ;MCU_B1.c: 50: ;;
  9642                           ;MCU_B1.c: 52: WDT_Set();
  9643  1E02  319C  24AF         	fcall	_WDT_Set
  9644  1E04  0008               	return
  9645  1E05                     __end_of_Mcu_Initialization:	
  9646                           
  9647                           	psect	text46
  9648  1CAF                     __ptext46:	
  9649 ;; *************** function _WDT_Set *****************
  9650 ;; Defined at:
  9651 ;;		line 1022 in file "../src/MCU_B1.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;		None
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;		None
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		wreg
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;Total ram usage:        1 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    5
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_Mcu_Initialization
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _WDT_Set
  9681  1CAF                     _WDT_Set:	
  9682                           
  9683                           ;MCU_B1.c: 1029: WDTCON = 0b00010111;;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _WDT_Set: [wreg]
  9687  1CAF  3017               	movlw	23
  9688  1CB0  0021               	movlb	1	; select bank1
  9689  1CB1  0097               	movwf	23	;volatile
  9690                           
  9691                           ;MCU_B1.c: 1031: WDT.Enable = 1;
  9692  1CB2  144A               	bsf	_WDT^(0+128),0
  9693                           
  9694                           ;MCU_B1.c: 1032: WDT.Timer = 10;
  9695  1CB3  300A               	movlw	10
  9696  1CB4  0020               	movlb	0	; select bank0
  9697  1CB5  00A0               	movwf	??_WDT_Set
  9698  1CB6  0820               	movf	??_WDT_Set,w
  9699  1CB7  0021               	movlb	1	; select bank1
  9700  1CB8  00CB               	movwf	(_WDT^(0+128)+1)
  9701  1CB9  0008               	return
  9702  1CBA                     __end_of_WDT_Set:	
  9703                           
  9704                           	psect	text47
  9705  1D0B                     __ptext47:	
  9706 ;; *************** function _TMR1_Set *****************
  9707 ;; Defined at:
  9708 ;;		line 199 in file "../src/MCU_B1.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;		None               void
  9715 ;; Registers used:
  9716 ;;		wreg
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;Total ram usage:        0 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    5
  9729 ;; This function calls:
  9730 ;;		Nothing
  9731 ;; This function is called by:
  9732 ;;		_Mcu_Initialization
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _TMR1_Set
  9738  1D0B                     _TMR1_Set:	
  9739                           
  9740                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9741                           
  9742                           ;incstack = 0
  9743                           ; Regs used in _TMR1_Set: [wreg]
  9744  1D0B  3041               	movlw	65
  9745  1D0C  0020               	movlb	0	; select bank0
  9746  1D0D  0098               	movwf	24	;volatile
  9747                           
  9748                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9749  1D0E  30FA               	movlw	250
  9750  1D0F  0097               	movwf	23	;volatile
  9751                           
  9752                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9753  1D10  3038               	movlw	56
  9754  1D11  0096               	movwf	22	;volatile
  9755                           
  9756                           ;MCU_B1.c: 203: TMR1IE = 1;
  9757  1D12  0021               	movlb	1	; select bank1
  9758  1D13  1411               	bsf	17,0	;volatile
  9759                           
  9760                           ;MCU_B1.c: 204: PEIE = 1;
  9761  1D14  170B               	bsf	11,6	;volatile
  9762                           
  9763                           ;MCU_B1.c: 205: GIE = 1;
  9764  1D15  178B               	bsf	11,7	;volatile
  9765  1D16  0008               	return
  9766  1D17                     __end_of_TMR1_Set:	
  9767                           
  9768                           	psect	text48
  9769  1EBB                     __ptext48:	
  9770 ;; *************** function _IO_Set *****************
  9771 ;; Defined at:
  9772 ;;		line 60 in file "../src/MCU_B1.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;		None
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;		None
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg, status,2
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;Total ram usage:        0 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    5
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_Mcu_Initialization
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           
  9801                           ;psect for function _IO_Set
  9802  1EBB                     _IO_Set:	
  9803                           
  9804                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9805                           
  9806                           ;incstack = 0
  9807                           ; Regs used in _IO_Set: [wreg+status,2]
  9808  1EBB  30F7               	movlw	247
  9809  1EBC  0021               	movlb	1	; select bank1
  9810  1EBD  008C               	movwf	12	;volatile
  9811                           
  9812                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9813  1EBE  3004               	movlw	4
  9814  1EBF  008D               	movwf	13	;volatile
  9815                           
  9816                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9817  1EC0  3026               	movlw	38
  9818  1EC1  008E               	movwf	14	;volatile
  9819                           
  9820                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9821  1EC2  0022               	movlb	2	; select bank2
  9822  1EC3  018C               	clrf	12	;volatile
  9823                           
  9824                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9825  1EC4  018D               	clrf	13	;volatile
  9826                           
  9827                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9828  1EC5  018E               	clrf	14	;volatile
  9829                           
  9830                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9831  1EC6  300E               	movlw	14
  9832  1EC7  0023               	movlb	3	; select bank3
  9833  1EC8  008C               	movwf	12	;volatile
  9834                           
  9835                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9836  1EC9  018D               	clrf	13	;volatile
  9837                           
  9838                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9839  1ECA  018E               	clrf	14	;volatile
  9840                           
  9841                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9842  1ECB  30F7               	movlw	247
  9843  1ECC  0020               	movlb	0	; select bank0
  9844  1ECD  008C               	movwf	12	;volatile
  9845                           
  9846                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9847  1ECE  3004               	movlw	4
  9848  1ECF  008D               	movwf	13	;volatile
  9849                           
  9850                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9851  1ED0  3026               	movlw	38
  9852  1ED1  008E               	movwf	14	;volatile
  9853  1ED2  0008               	return
  9854  1ED3                     __end_of_IO_Set:	
  9855                           
  9856                           	psect	text49
  9857  1D24                     __ptext49:	
  9858 ;; *************** function _IOC_Set *****************
  9859 ;; Defined at:
  9860 ;;		line 366 in file "../src/MCU_B1.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;		None
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;		None
  9865 ;; Return value:  Size  Location     Type
  9866 ;;		None               void
  9867 ;; Registers used:
  9868 ;;		wreg, status,2
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;Total ram usage:        0 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; Hardware stack levels required when called:    5
  9881 ;; This function calls:
  9882 ;;		Nothing
  9883 ;; This function is called by:
  9884 ;;		_Mcu_Initialization
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           
  9889                           ;psect for function _IOC_Set
  9890  1D24                     _IOC_Set:	
  9891                           
  9892                           ;MCU_B1.c: 367: WPUB2 = 0;
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in _IOC_Set: [wreg+status,2]
  9896  1D24  0024               	movlb	4	; select bank4
  9897  1D25  110D               	bcf	13,2	;volatile
  9898                           
  9899                           ;MCU_B1.c: 382: IOCBP = 0b00000100;
  9900  1D26  3004               	movlw	4
  9901  1D27  0027               	movlb	7	; select bank7
  9902  1D28  0094               	movwf	20	;volatile
  9903                           
  9904                           ;MCU_B1.c: 383: IOCBN = 0b00000100;
  9905  1D29  3004               	movlw	4
  9906  1D2A  0095               	movwf	21	;volatile
  9907                           
  9908                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9909  1D2B  0196               	clrf	22	;volatile
  9910                           
  9911                           ;MCU_B1.c: 394: IOCIE = 1;
  9912  1D2C  158B               	bsf	11,3	;volatile
  9913                           
  9914                           ;MCU_B1.c: 395: IOCIF = 0;
  9915  1D2D  100B               	bcf	11,0	;volatile
  9916                           
  9917                           ;MCU_B1.c: 396: PEIE = 1;
  9918  1D2E  170B               	bsf	11,6	;volatile
  9919                           
  9920                           ;MCU_B1.c: 397: GIE = 1;
  9921  1D2F  178B               	bsf	11,7	;volatile
  9922  1D30  0008               	return
  9923  1D31                     __end_of_IOC_Set:	
  9924                           
  9925                           	psect	text50
  9926  1C2D                     __ptext50:	
  9927 ;; *************** function _Fosc_Set *****************
  9928 ;; Defined at:
  9929 ;;		line 56 in file "../src/MCU_B1.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;		None
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;		None
  9934 ;; Return value:  Size  Location     Type
  9935 ;;		None               void
  9936 ;; Registers used:
  9937 ;;		wreg
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;Total ram usage:        0 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    5
  9950 ;; This function calls:
  9951 ;;		Nothing
  9952 ;; This function is called by:
  9953 ;;		_Mcu_Initialization
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _Fosc_Set
  9959  1C2D                     _Fosc_Set:	
  9960                           
  9961                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9962                           
  9963                           ;incstack = 0
  9964                           ; Regs used in _Fosc_Set: [wreg]
  9965  1C2D  3078               	movlw	120
  9966  1C2E  0021               	movlb	1	; select bank1
  9967  1C2F  0099               	movwf	25	;volatile
  9968  1C30  0008               	return
  9969  1C31                     __end_of_Fosc_Set:	
  9970                           
  9971                           	psect	text51
  9972  1066                     __ptext51:	
  9973 ;; *************** function _ADC_Set *****************
  9974 ;; Defined at:
  9975 ;;		line 420 in file "../src/MCU_B1.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;		None
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;		None
  9980 ;; Return value:  Size  Location     Type
  9981 ;;		None               void
  9982 ;; Registers used:
  9983 ;;		wreg
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:        0 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:    5
  9996 ;; This function calls:
  9997 ;;		Nothing
  9998 ;; This function is called by:
  9999 ;;		_Mcu_Initialization
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           
 10004                           ;psect for function _ADC_Set
 10005  1066                     _ADC_Set:	
 10006                           
 10007                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10008                           
 10009                           ;incstack = 0
 10010                           ; Regs used in _ADC_Set: [wreg]
 10011  1066  30F3               	movlw	243
 10012  1067  0021               	movlb	1	; select bank1
 10013  1068  009E               	movwf	30	;volatile
 10014                           
 10015                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10016  1069  30C1               	movlw	193
 10017  106A  0022               	movlb	2	; select bank2
 10018  106B  0097               	movwf	23	;volatile
 10019  106C  0008               	return
 10020  106D                     __end_of_ADC_Set:	
 10021                           
 10022                           	psect	text52
 10023  01B2                     __ptext52:	
 10024 ;; *************** function _Load_Main *****************
 10025 ;; Defined at:
 10026 ;;		line 39 in file "../src/OverLoad_B1.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;  i               1   15[BANK0 ] unsigned char 
 10031 ;;  error           1   14[BANK0 ] unsigned char 
 10032 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10033 ;;  j               1   11[BANK0 ] unsigned char 
 10034 ;; Return value:  Size  Location     Type
 10035 ;;		None               void
 10036 ;; Registers used:
 10037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;Total ram usage:        7 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    8
 10050 ;; This function calls:
 10051 ;;		_getAll_DimmerLights_AdjGO
 10052 ;;		_getMain_All_Error_Status
 10053 ;;		_getMain_LightsStatus
 10054 ;;		_getMain_Lights_Count
 10055 ;;		_getMain_LoadOK
 10056 ;;		_setLoad_AH_AL_Restore
 10057 ;; This function is called by:
 10058 ;;		_main
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           
 10063                           ;psect for function _Load_Main
 10064  01B2                     _Load_Main:	
 10065                           
 10066                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10067                           
 10068                           ;incstack = 0
 10069                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10070  01B2  0020               	movlb	0	; select bank0
 10071  01B3  01AF               	clrf	Load_Main@i
 10072  01B4  01AB               	clrf	Load_Main@j
 10073  01B5  3000               	movlw	0
 10074  01B6  3192  2287  3181   	fcall	_getMain_All_Error_Status
 10075  01B9  0020               	movlb	0	; select bank0
 10076  01BA  00A9               	movwf	??_Load_Main
 10077  01BB  0829               	movf	??_Load_Main,w
 10078  01BC  00AE               	movwf	Load_Main@error
 10079  01BD  01AC               	clrf	Load_Main@adjgo
 10080                           
 10081                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10082  01BE  0022               	movlb	2	; select bank2
 10083  01BF  1C43               	btfss	_Load^(0+256),0
 10084  01C0  2AF0               	goto	l1540
 10085                           
 10086                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10087  01C1  319C  2479  3181   	fcall	_getAll_DimmerLights_AdjGO
 10088  01C4  0020               	movlb	0	; select bank0
 10089  01C5  00A9               	movwf	??_Load_Main
 10090  01C6  0829               	movf	??_Load_Main,w
 10091  01C7  00AC               	movwf	Load_Main@adjgo
 10092                           
 10093                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10094  01C8  01AD               	clrf	_Load_Main$4106
 10095  01C9  3191  2199  3181   	fcall	_getMain_LightsStatus
 10096  01CC  3A01               	xorlw	1
 10097  01CD  1D03               	skipz
 10098  01CE  29D8               	goto	l7667
 10099  01CF  0020               	movlb	0	; select bank0
 10100  01D0  08AE               	movf	Load_Main@error,f
 10101  01D1  1D03               	skipz
 10102  01D2  29D8               	goto	l7667
 10103  01D3  08AC               	movf	Load_Main@adjgo,f
 10104  01D4  1D03               	skipz
 10105  01D5  29D8               	goto	l7667
 10106  01D6  01AD               	clrf	_Load_Main$4106
 10107  01D7  0AAD               	incf	_Load_Main$4106,f
 10108  01D8                     l7667:	
 10109  01D8  0020               	movlb	0	; select bank0
 10110  01D9  082D               	movf	_Load_Main$4106,w
 10111  01DA  0022               	movlb	2	; select bank2
 10112  01DB  10C3               	bcf	_Load^(0+256),1
 10113  01DC  1D03               	skipz
 10114  01DD  14C3               	bsf	_Load^(0+256),1
 10115                           
 10116                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10117  01DE  319D  2531  3181   	fcall	_getMain_LoadOK
 10118  01E1  3A01               	xorlw	1
 10119  01E2  1D03               	skipz
 10120  01E3  29E9               	goto	l1543
 10121  01E4  0022               	movlb	2	; select bank2
 10122  01E5  19C3               	btfsc	_Load^(0+256),3
 10123  01E6  29E9               	goto	l1543
 10124                           
 10125                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10126  01E7  15C3               	bsf	_Load^(0+256),3
 10127                           
 10128                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10129  01E8  13C3               	bcf	_Load^(0+256),7
 10130  01E9                     l1543:	
 10131                           
 10132                           ;OverLoad_B1.c: 51: }
 10133                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10134  01E9  0022               	movlb	2	; select bank2
 10135  01EA  1CC3               	btfss	_Load^(0+256),1
 10136  01EB  2AC0               	goto	l1544
 10137                           
 10138                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10139  01EC  1543               	bsf	_Load^(0+256),2
 10140                           
 10141                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10142  01ED  1E43               	btfss	_Load^(0+256),4
 10143  01EE  2ABE               	goto	l1545
 10144                           
 10145                           ;OverLoad_B1.c: 58: Load.Time++;
 10146  01EF  3001               	movlw	1
 10147  01F0  07C4               	addwf	(_Load^(0+256)+1),f
 10148  01F1  3000               	movlw	0
 10149  01F2  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10150                           
 10151                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10152  01F3  3000               	movlw	0
 10153  01F4  0245               	subwf	((_Load+1)^(0+256)+1),w
 10154  01F5  3005               	movlw	5
 10155  01F6  1903               	skipnz
 10156  01F7  0244               	subwf	(_Load^(0+256)+1),w
 10157  01F8  1C03               	skipc
 10158  01F9  0008               	return
 10159                           
 10160                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10161  01FA  01C4               	clrf	(_Load^(0+256)+1)
 10162  01FB  01C5               	clrf	((_Load+1)^(0+256)+1)
 10163                           
 10164                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10165  01FC  1243               	bcf	_Load^(0+256),4
 10166                           
 10167                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10168  01FD  0020               	movlb	0	; select bank0
 10169  01FE  01AF               	clrf	Load_Main@i
 10170  01FF  3004               	movlw	4
 10171  0200  022F               	subwf	Load_Main@i,w
 10172  0201  1803               	btfsc	3,0
 10173  0202  2A2D               	goto	l7693
 10174  0203                     l7687:	
 10175                           
 10176                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10177  0203  352F               	lslf	Load_Main@i,w
 10178  0204  3E4E               	addlw	(_Load+11)& (0+255)
 10179  0205  0086               	movwf	6
 10180  0206  3001               	movlw	1	; select bank2/3
 10181  0207  0087               	movwf	7
 10182  0208  3F40               	moviw [0]fsr1
 10183  0209  00A9               	movwf	??_Load_Main
 10184  020A  3F41               	moviw [1]fsr1
 10185  020B  00AA               	movwf	??_Load_Main+1
 10186  020C  0829               	movf	??_Load_Main,w
 10187  020D  0022               	movlb	2	; select bank2
 10188  020E  07C8               	addwf	(_Load^(0+256)+5),f
 10189  020F  0020               	movlb	0	; select bank0
 10190  0210  082A               	movf	??_Load_Main+1,w
 10191  0211  0022               	movlb	2	; select bank2
 10192  0212  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10193                           
 10194                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10195  0213  0020               	movlb	0	; select bank0
 10196  0214  352F               	lslf	Load_Main@i,w
 10197  0215  3E58               	addlw	(_Load+21)& (0+255)
 10198  0216  0086               	movwf	6
 10199  0217  3001               	movlw	1	; select bank2/3
 10200  0218  0087               	movwf	7
 10201  0219  3F40               	moviw [0]fsr1
 10202  021A  00A9               	movwf	??_Load_Main
 10203  021B  3F41               	moviw [1]fsr1
 10204  021C  00AA               	movwf	??_Load_Main+1
 10205  021D  0829               	movf	??_Load_Main,w
 10206  021E  0022               	movlb	2	; select bank2
 10207  021F  07CA               	addwf	(_Load^(0+256)+7),f
 10208  0220  0020               	movlb	0	; select bank0
 10209  0221  082A               	movf	??_Load_Main+1,w
 10210  0222  0022               	movlb	2	; select bank2
 10211  0223  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10212  0224  3001               	movlw	1
 10213  0225  0020               	movlb	0	; select bank0
 10214  0226  00A9               	movwf	??_Load_Main
 10215  0227  0829               	movf	??_Load_Main,w
 10216  0228  07AF               	addwf	Load_Main@i,f
 10217  0229  3004               	movlw	4
 10218  022A  022F               	subwf	Load_Main@i,w
 10219  022B  1C03               	skipc
 10220  022C  2A03               	goto	l7687
 10221  022D                     l7693:	
 10222                           
 10223                           ;OverLoad_B1.c: 66: }
 10224                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10225  022D  3002               	movlw	2
 10226  022E  0022               	movlb	2	; select bank2
 10227  022F                     u7665:	
 10228  022F  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10229  0230  0CC8               	rrf	(_Load^(0+256)+5),f
 10230  0231  0B89               	decfsz	9,f
 10231  0232  2A2F               	goto	u7665
 10232                           
 10233                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10234  0233  3002               	movlw	2
 10235  0234                     u7675:	
 10236  0234  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10237  0235  0CCA               	rrf	(_Load^(0+256)+7),f
 10238  0236  0B89               	decfsz	9,f
 10239  0237  2A34               	goto	u7675
 10240                           
 10241                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10242  0238  319F  2706  3181   	fcall	_setLoad_AH_AL_Restore
 10243                           
 10244                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10245  023B  0022               	movlb	2	; select bank2
 10246  023C  0849               	movf	((_Load+1)^(0+256)+5),w
 10247  023D  024B               	subwf	((_Load+1)^(0+256)+7),w
 10248  023E  1D03               	skipz
 10249  023F  2A42               	goto	u7685
 10250  0240  0848               	movf	(_Load^(0+256)+5),w
 10251  0241  024A               	subwf	(_Load^(0+256)+7),w
 10252  0242                     u7685:	
 10253  0242  1803               	skipnc
 10254  0243  0008               	return
 10255                           
 10256                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10257  0244  3005               	movlw	5
 10258  0245  3E43               	addlw	_Load& (0+255)
 10259  0246  0086               	movwf	6
 10260  0247  3001               	movlw	1	; select bank2/3
 10261  0248  0087               	movwf	7
 10262  0249  094A               	comf	(_Load^(0+256)+7),w
 10263  024A  0020               	movlb	0	; select bank0
 10264  024B  00A9               	movwf	??_Load_Main
 10265  024C  0022               	movlb	2	; select bank2
 10266  024D  094B               	comf	((_Load+1)^(0+256)+7),w
 10267  024E  0020               	movlb	0	; select bank0
 10268  024F  00AA               	movwf	??_Load_Main+1
 10269  0250  0AA9               	incf	??_Load_Main,f
 10270  0251  1903               	skipnz
 10271  0252  0AAA               	incf	??_Load_Main+1,f
 10272  0253  3F40               	moviw [0]fsr1
 10273  0254  0729               	addwf	??_Load_Main,w
 10274  0255  0022               	movlb	2	; select bank2
 10275  0256  00E2               	movwf	(_Load^(0+256)+31)
 10276  0257  3F41               	moviw [1]fsr1
 10277  0258  0020               	movlb	0	; select bank0
 10278  0259  3D2A               	addwfc	??_Load_Main+1,w
 10279  025A  0022               	movlb	2	; select bank2
 10280  025B  00E3               	movwf	(_Load^(0+256)+32)
 10281                           
 10282                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10283  025C  01C8               	clrf	(_Load^(0+256)+5)
 10284  025D  01C9               	clrf	((_Load+1)^(0+256)+5)
 10285                           
 10286                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10287  025E  01CA               	clrf	(_Load^(0+256)+7)
 10288  025F  01CB               	clrf	((_Load+1)^(0+256)+7)
 10289                           
 10290                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10291  0260  319D  257D  3181   	fcall	_getMain_Lights_Count
 10292  0263  0020               	movlb	0	; select bank0
 10293  0264  00A9               	movwf	??_Load_Main
 10294  0265  0829               	movf	??_Load_Main,w
 10295  0266  0022               	movlb	2	; select bank2
 10296  0267  00EE               	movwf	(_Load^(0+256)+43)
 10297                           
 10298                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10299  0268  1DC3               	btfss	_Load^(0+256),3
 10300  0269  2A8F               	goto	l7725
 10301                           
 10302                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10303  026A  3002               	movlw	2
 10304  026B  026C               	subwf	(_Load^(0+256)+41),w
 10305  026C  1803               	skipnc
 10306  026D  2A8F               	goto	l7725
 10307                           
 10308                           ;OverLoad_B1.c: 79: Load.Count++;
 10309  026E  3001               	movlw	1
 10310  026F  0020               	movlb	0	; select bank0
 10311  0270  00A9               	movwf	??_Load_Main
 10312  0271  0829               	movf	??_Load_Main,w
 10313  0272  0022               	movlb	2	; select bank2
 10314  0273  07EC               	addwf	(_Load^(0+256)+41),f
 10315                           
 10316                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10317  0274  086C               	movf	(_Load^(0+256)+41),w
 10318  0275  3A01               	xorlw	1
 10319  0276  1D03               	skipz
 10320  0277  2A7C               	goto	l7717
 10321                           
 10322                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*55);
 10323  0278  304C               	movlw	76
 10324  0279  00E8               	movwf	(_Load^(0+256)+37)
 10325  027A  3004               	movlw	4
 10326  027B  2A87               	goto	L6
 10327  027C                     l7717:	
 10328                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10329                           
 10330  027C  086C               	movf	(_Load^(0+256)+41),w
 10331  027D  3A02               	xorlw	2
 10332  027E  1D03               	skipz
 10333  027F  2A8F               	goto	l7725
 10334                           
 10335                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10336  0280  086E               	movf	(_Load^(0+256)+43),w
 10337  0281  3A01               	xorlw	1
 10338  0282  1D03               	skipz
 10339  0283  2A89               	goto	l7723
 10340                           
 10341                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*55);
 10342  0284  3063               	movlw	99
 10343  0285  00E8               	movwf	(_Load^(0+256)+37)
 10344  0286  3000               	movlw	0
 10345  0287                     L6:	
 10346  0287  00E9               	movwf	(_Load^(0+256)+38)
 10347                           
 10348                           ;OverLoad_B1.c: 85: } else {
 10349  0288  2A8F               	goto	l7725
 10350  0289                     l7723:	
 10351                           
 10352                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.8*55) + Load.TotalLoad;
 10353  0289  084C               	movf	(_Load^(0+256)+9),w
 10354  028A  3E63               	addlw	99
 10355  028B  00E8               	movwf	(_Load^(0+256)+37)
 10356  028C  3000               	movlw	0
 10357  028D  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10358  028E  00E9               	movwf	((_Load+1)^(0+256)+37)
 10359  028F                     l7725:	
 10360                           
 10361                           ;OverLoad_B1.c: 87: }
 10362                           ;OverLoad_B1.c: 88: }
 10363                           ;OverLoad_B1.c: 89: }
 10364                           ;OverLoad_B1.c: 90: }
 10365                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10366  028F  0869               	movf	((_Load+1)^(0+256)+37),w
 10367  0290  0263               	subwf	((_Load+1)^(0+256)+31),w
 10368  0291  1D03               	skipz
 10369  0292  2A95               	goto	u7745
 10370  0293  0868               	movf	(_Load^(0+256)+37),w
 10371  0294  0262               	subwf	(_Load^(0+256)+31),w
 10372  0295                     u7745:	
 10373  0295  1C03               	skipc
 10374  0296  2AA4               	goto	l7735
 10375                           
 10376                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10377  0297  3001               	movlw	1
 10378  0298  0020               	movlb	0	; select bank0
 10379  0299  00A9               	movwf	??_Load_Main
 10380  029A  0829               	movf	??_Load_Main,w
 10381  029B  0022               	movlb	2	; select bank2
 10382  029C  07ED               	addwf	(_Load^(0+256)+42),f
 10383                           
 10384                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10385  029D  3003               	movlw	3
 10386  029E  026D               	subwf	(_Load^(0+256)+42),w
 10387  029F  1C03               	skipc
 10388  02A0  0008               	return
 10389                           
 10390                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10391  02A1  01ED               	clrf	(_Load^(0+256)+42)
 10392                           
 10393                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10394  02A2  16C3               	bsf	_Load^(0+256),5
 10395                           
 10396                           ;OverLoad_B1.c: 109: }
 10397                           ;OverLoad_B1.c: 110: } else {
 10398  02A3  0008               	return
 10399  02A4                     l7735:	
 10400                           
 10401                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10402  02A4  01ED               	clrf	(_Load^(0+256)+42)
 10403                           
 10404                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10405  02A5  1DC3               	btfss	_Load^(0+256),3
 10406  02A6  0008               	return
 10407                           
 10408                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10409  02A7  1BC3               	btfsc	_Load^(0+256),7
 10410  02A8  0008               	return
 10411                           
 10412                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10413  02A9  3001               	movlw	1
 10414  02AA  0020               	movlb	0	; select bank0
 10415  02AB  00A9               	movwf	??_Load_Main
 10416  02AC  0829               	movf	??_Load_Main,w
 10417  02AD  0022               	movlb	2	; select bank2
 10418  02AE  07EF               	addwf	(_Load^(0+256)+44),f
 10419                           
 10420                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10421  02AF  3003               	movlw	3
 10422  02B0  026F               	subwf	(_Load^(0+256)+44),w
 10423  02B1  1C03               	skipc
 10424  02B2  0008               	return
 10425                           
 10426                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10427  02B3  01EF               	clrf	(_Load^(0+256)+44)
 10428                           
 10429                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10430  02B4  17C3               	bsf	_Load^(0+256),7
 10431                           
 10432                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10433  02B5  11C3               	bcf	_Load^(0+256),3
 10434                           
 10435                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10436  02B6  01EC               	clrf	(_Load^(0+256)+41)
 10437                           
 10438                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10439  02B7  0863               	movf	((_Load+1)^(0+256)+31),w
 10440  02B8  01CD               	clrf	((_Load+1)^(0+256)+9)
 10441  02B9  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10442  02BA  0862               	movf	(_Load^(0+256)+31),w
 10443  02BB  01CC               	clrf	(_Load^(0+256)+9)
 10444  02BC  07CC               	addwf	(_Load^(0+256)+9),f
 10445                           
 10446                           ;OverLoad_B1.c: 130: }
 10447                           ;OverLoad_B1.c: 131: }
 10448                           ;OverLoad_B1.c: 132: }
 10449                           ;OverLoad_B1.c: 133: }
 10450                           ;OverLoad_B1.c: 134: }
 10451                           ;OverLoad_B1.c: 135: }
 10452                           ;OverLoad_B1.c: 136: } else {
 10453  02BD  0008               	return
 10454  02BE                     l1545:	
 10455                           
 10456                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10457  02BE  1643               	bsf	_Load^(0+256),4
 10458                           
 10459                           ;OverLoad_B1.c: 138: }
 10460                           ;OverLoad_B1.c: 139: } else {
 10461  02BF  0008               	return
 10462  02C0                     l1544:	
 10463                           
 10464                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10465  02C0  1D43               	btfss	_Load^(0+256),2
 10466  02C1  2ADE               	goto	l7783
 10467  02C2  0020               	movlb	0	; select bank0
 10468  02C3  082E               	movf	Load_Main@error,w
 10469  02C4  3A03               	xorlw	3
 10470  02C5  1903               	skipnz
 10471  02C6  2ADE               	goto	l7783
 10472                           
 10473                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10474  02C7  0022               	movlb	2	; select bank2
 10475  02C8  1143               	bcf	_Load^(0+256),2
 10476                           
 10477                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10478  02C9  01C4               	clrf	(_Load^(0+256)+1)
 10479  02CA  01C5               	clrf	((_Load+1)^(0+256)+1)
 10480                           
 10481                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10482  02CB  1243               	bcf	_Load^(0+256),4
 10483                           
 10484                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10485  02CC  319F  2706  3181   	fcall	_setLoad_AH_AL_Restore
 10486                           
 10487                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10488  02CF  0022               	movlb	2	; select bank2
 10489  02D0  01EC               	clrf	(_Load^(0+256)+41)
 10490                           
 10491                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10492  02D1  01ED               	clrf	(_Load^(0+256)+42)
 10493                           
 10494                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10495  02D2  01EF               	clrf	(_Load^(0+256)+44)
 10496                           
 10497                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10498  02D3  01C8               	clrf	(_Load^(0+256)+5)
 10499  02D4  01C9               	clrf	((_Load+1)^(0+256)+5)
 10500                           
 10501                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10502  02D5  01CA               	clrf	(_Load^(0+256)+7)
 10503  02D6  01CB               	clrf	((_Load+1)^(0+256)+7)
 10504                           
 10505                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10506  02D7  01E2               	clrf	(_Load^(0+256)+31)
 10507  02D8  01E3               	clrf	((_Load+1)^(0+256)+31)
 10508                           
 10509                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10510  02D9  01E8               	clrf	(_Load^(0+256)+37)
 10511  02DA  01E9               	clrf	((_Load+1)^(0+256)+37)
 10512                           
 10513                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10514  02DB  01EE               	clrf	(_Load^(0+256)+43)
 10515                           
 10516                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10517  02DC  11C3               	bcf	_Load^(0+256),3
 10518                           
 10519                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10520  02DD  17C3               	bsf	_Load^(0+256),7
 10521  02DE                     l7783:	
 10522                           
 10523                           ;OverLoad_B1.c: 164: }
 10524                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10525  02DE  0022               	movlb	2	; select bank2
 10526  02DF  1EC3               	btfss	_Load^(0+256),5
 10527  02E0  0008               	return
 10528                           
 10529                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10530  02E1  3001               	movlw	1
 10531  02E2  07C6               	addwf	(_Load^(0+256)+3),f
 10532  02E3  3000               	movlw	0
 10533  02E4  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10534                           
 10535                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10536  02E5  3003               	movlw	3
 10537  02E6  0247               	subwf	((_Load+1)^(0+256)+3),w
 10538  02E7  30E8               	movlw	232
 10539  02E8  1903               	skipnz
 10540  02E9  0246               	subwf	(_Load^(0+256)+3),w
 10541  02EA  1C03               	skipc
 10542  02EB  0008               	return
 10543                           
 10544                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10545  02EC  01C6               	clrf	(_Load^(0+256)+3)
 10546  02ED  01C7               	clrf	((_Load+1)^(0+256)+3)
 10547                           
 10548                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10549  02EE  12C3               	bcf	_Load^(0+256),5
 10550                           
 10551                           ;OverLoad_B1.c: 176: }
 10552                           ;OverLoad_B1.c: 177: }
 10553                           ;OverLoad_B1.c: 178: }
 10554                           ;OverLoad_B1.c: 179: } else {
 10555  02EF  0008               	return
 10556  02F0                     l1540:	
 10557                           
 10558                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10559  02F0  0021               	movlb	1	; select bank1
 10560  02F1  1C20               	btfss	_myMain^(0+128),0
 10561  02F2  0008               	return
 10562                           
 10563                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10564  02F3  0022               	movlb	2	; select bank2
 10565  02F4  1443               	bsf	_Load^(0+256),0
 10566  02F5  0008               	return
 10567  02F6                     __end_of_Load_Main:	
 10568                           
 10569                           	psect	text53
 10570  1D31                     __ptext53:	
 10571 ;; *************** function _getMain_LoadOK *****************
 10572 ;; Defined at:
 10573 ;;		line 444 in file "../src/Main_B1.c"
 10574 ;; Parameters:    Size  Location     Type
 10575 ;;		None
 10576 ;; Auto vars:     Size  Location     Type
 10577 ;;  ok              1    2[BANK0 ] unsigned char 
 10578 ;; Return value:  Size  Location     Type
 10579 ;;                  1    wreg      unsigned char 
 10580 ;; Registers used:
 10581 ;;		wreg, status,2, pclath, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;Total ram usage:        2 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:    6
 10594 ;; This function calls:
 10595 ;;		_getDimmer_LoadOK
 10596 ;; This function is called by:
 10597 ;;		_Load_Main
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           
 10602                           ;psect for function _getMain_LoadOK
 10603  1D31                     _getMain_LoadOK:	
 10604                           
 10605                           ;Main_B1.c: 445: char ok = 0;
 10606                           
 10607                           ;incstack = 0
 10608                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10609  1D31  0020               	movlb	0	; select bank0
 10610  1D32  01A2               	clrf	getMain_LoadOK@ok
 10611                           
 10612                           ;Main_B1.c: 451: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10613  1D33  319C  2455         	fcall	_getDimmer_LoadOK
 10614  1D35  3A01               	xorlw	1
 10615  1D36  3000               	movlw	0
 10616  1D37  1903               	skipnz
 10617  1D38  3001               	movlw	1
 10618  1D39  0020               	movlb	0	; select bank0
 10619  1D3A  00A1               	movwf	??_getMain_LoadOK
 10620  1D3B  0821               	movf	??_getMain_LoadOK,w
 10621  1D3C  00A2               	movwf	getMain_LoadOK@ok
 10622                           
 10623                           ;Main_B1.c: 453: return ok;
 10624  1D3D  0822               	movf	getMain_LoadOK@ok,w
 10625  1D3E  0008               	return
 10626  1D3F                     __end_of_getMain_LoadOK:	
 10627                           
 10628                           	psect	text54
 10629  1C55                     __ptext54:	
 10630 ;; *************** function _getDimmer_LoadOK *****************
 10631 ;; Defined at:
 10632 ;;		line 611 in file "../src/Dimmer_B1.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;		None
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;  status          1    0[BANK0 ] unsigned char 
 10637 ;; Return value:  Size  Location     Type
 10638 ;;                  1    wreg      unsigned char 
 10639 ;; Registers used:
 10640 ;;		wreg, status,2
 10641 ;; Tracked objects:
 10642 ;;		On entry : 0/0
 10643 ;;		On exit  : 0/0
 10644 ;;		Unchanged: 0/0
 10645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;Total ram usage:        1 bytes
 10651 ;; Hardware stack levels used:    1
 10652 ;; Hardware stack levels required when called:    5
 10653 ;; This function calls:
 10654 ;;		Nothing
 10655 ;; This function is called by:
 10656 ;;		_getMain_LoadOK
 10657 ;; This function uses a non-reentrant model
 10658 ;;
 10659                           
 10660                           
 10661                           ;psect for function _getDimmer_LoadOK
 10662  1C55                     _getDimmer_LoadOK:	
 10663                           
 10664                           ;Dimmer_B1.c: 612: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10665                           
 10666                           ;incstack = 0
 10667                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10668  1C55  3000               	movlw	0
 10669  1C56  0022               	movlb	2	; select bank2
 10670  1C57  18BE               	btfsc	_Dimmer^(0+256),1
 10671  1C58  3001               	movlw	1
 10672  1C59  0020               	movlb	0	; select bank0
 10673  1C5A  00A0               	movwf	getDimmer_LoadOK@status
 10674                           
 10675                           ;Dimmer_B1.c: 613: return status;
 10676  1C5B  0820               	movf	getDimmer_LoadOK@status,w
 10677  1C5C  0008               	return
 10678  1C5D                     __end_of_getDimmer_LoadOK:	
 10679                           
 10680                           	psect	text55
 10681  1D7D                     __ptext55:	
 10682 ;; *************** function _getMain_Lights_Count *****************
 10683 ;; Defined at:
 10684 ;;		line 414 in file "../src/Main_B1.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;  status1         1    3[BANK0 ] unsigned char 
 10689 ;;  status3         1    2[BANK0 ] unsigned char 
 10690 ;;  status2         1    1[BANK0 ] unsigned char 
 10691 ;;  count           1    0[BANK0 ] unsigned char 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      unsigned char 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;Total ram usage:        4 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    5
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_Load_Main
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           
 10716                           ;psect for function _getMain_Lights_Count
 10717  1D7D                     _getMain_Lights_Count:	
 10718                           
 10719                           ;Main_B1.c: 415: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10720                           
 10721                           ;incstack = 0
 10722                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10723  1D7D  0020               	movlb	0	; select bank0
 10724  1D7E  01A3               	clrf	getMain_Lights_Count@status1
 10725  1D7F  01A1               	clrf	getMain_Lights_Count@status2
 10726  1D80  01A2               	clrf	getMain_Lights_Count@status3
 10727  1D81  01A0               	clrf	getMain_Lights_Count@count
 10728                           
 10729                           ;Main_B1.c: 419: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10730  1D82  3000               	movlw	0
 10731  1D83  0023               	movlb	3	; select bank3
 10732  1D84  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10733  1D85  3001               	movlw	1
 10734  1D86  0020               	movlb	0	; select bank0
 10735  1D87  00A3               	movwf	getMain_Lights_Count@status1
 10736                           
 10737                           ;Main_B1.c: 440: return count = (status1 + status2 + status3);
 10738  1D88  0823               	movf	getMain_Lights_Count@status1,w
 10739  1D89  0721               	addwf	getMain_Lights_Count@status2,w
 10740  1D8A  0722               	addwf	getMain_Lights_Count@status3,w
 10741  1D8B  00A0               	movwf	getMain_Lights_Count@count
 10742  1D8C  0008               	return
 10743  1D8D                     __end_of_getMain_Lights_Count:	
 10744                           
 10745                           	psect	text56
 10746  1C79                     __ptext56:	
 10747 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10748 ;; Defined at:
 10749 ;;		line 502 in file "../src/Dimmer_B1.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      unsigned char 
 10756 ;; Registers used:
 10757 ;;		wreg, status,2
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        1 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    5
 10770 ;; This function calls:
 10771 ;;		Nothing
 10772 ;; This function is called by:
 10773 ;;		_setDimmerLights_SwOn
 10774 ;;		_setDimmerLights_AdjControl
 10775 ;;		_Load_Main
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _getAll_DimmerLights_AdjGO
 10781  1C79                     _getAll_DimmerLights_AdjGO:	
 10782                           
 10783                           ;Dimmer_B1.c: 503: char adjgo = 0;
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10787  1C79  0020               	movlb	0	; select bank0
 10788  1C7A  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10789                           
 10790                           ;Dimmer_B1.c: 511: adjgo = DimmerLights1.AdjGo == 1;
 10791  1C7B  3000               	movlw	0
 10792  1C7C  0023               	movlb	3	; select bank3
 10793  1C7D  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10794  1C7E  3001               	movlw	1
 10795  1C7F  0020               	movlb	0	; select bank0
 10796  1C80  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10797                           
 10798                           ;Dimmer_B1.c: 513: return adjgo;
 10799  1C81  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10800  1C82  0008               	return
 10801  1C83                     __end_of_getAll_DimmerLights_AdjGO:	
 10802                           
 10803                           	psect	text57
 10804  1C36                     __ptext57:	
 10805 ;; *************** function _Load_Initialization *****************
 10806 ;; Defined at:
 10807 ;;		line 9 in file "../src/OverLoad_B1.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;		None
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;		None
 10812 ;; Return value:  Size  Location     Type
 10813 ;;		None               void
 10814 ;; Registers used:
 10815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 0/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;Total ram usage:        0 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    6
 10828 ;; This function calls:
 10829 ;;		_setLoad_AH_AL_Restore
 10830 ;; This function is called by:
 10831 ;;		_main
 10832 ;; This function uses a non-reentrant model
 10833 ;;
 10834                           
 10835                           
 10836                           ;psect for function _Load_Initialization
 10837  1C36                     _Load_Initialization:	
 10838                           
 10839                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10840                           
 10841                           ;incstack = 0
 10842                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10843  1C36  0022               	movlb	2	; select bank2
 10844  1C37  17C3               	bsf	_Load^(0+256),7
 10845                           
 10846                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10847  1C38  319F  2706         	fcall	_setLoad_AH_AL_Restore
 10848  1C3A  0008               	return
 10849  1C3B                     __end_of_Load_Initialization:	
 10850                           
 10851                           	psect	text58
 10852  1F06                     __ptext58:	
 10853 ;; *************** function _setLoad_AH_AL_Restore *****************
 10854 ;; Defined at:
 10855 ;;		line 207 in file "../src/OverLoad_B1.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;  i               1    1[BANK0 ] unsigned char 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;		None               void
 10862 ;; Registers used:
 10863 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;Total ram usage:        2 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    5
 10876 ;; This function calls:
 10877 ;;		Nothing
 10878 ;; This function is called by:
 10879 ;;		_Load_Initialization
 10880 ;;		_Load_Main
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           
 10885                           ;psect for function _setLoad_AH_AL_Restore
 10886  1F06                     _setLoad_AH_AL_Restore:	
 10887                           
 10888                           ;OverLoad_B1.c: 208: char i;
 10889                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10893  1F06  0020               	movlb	0	; select bank0
 10894  1F07  01A1               	clrf	setLoad_AH_AL_Restore@i
 10895  1F08                     L7:	
 10896  1F08  3005               	movlw	5
 10897  1F09  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10898  1F0A  1803               	btfsc	3,0
 10899  1F0B  0008               	return
 10900                           
 10901                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 10902  1F0C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10903  1F0D  3E4E               	addlw	(_Load+11)& (0+255)
 10904  1F0E  0086               	movwf	6
 10905  1F0F  3001               	movlw	1	; select bank2/3
 10906  1F10  0087               	movwf	7
 10907  1F11  3000               	movlw	0
 10908  1F12  3FC0               	movwi [0]fsr1
 10909  1F13  3FC1               	movwi [1]fsr1
 10910                           
 10911                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 10912  1F14  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10913  1F15  3E58               	addlw	(_Load+21)& (0+255)
 10914  1F16  0086               	movwf	6
 10915  1F17  3001               	movlw	1	; select bank2/3
 10916  1F18  0087               	movwf	7
 10917  1F19  30FF               	movlw	255
 10918  1F1A  3FC0               	movwi [0]fsr1
 10919  1F1B  30FF               	movlw	255
 10920  1F1C  3FC1               	movwi [1]fsr1
 10921  1F1D  3001               	movlw	1
 10922  1F1E  00A0               	movwf	??_setLoad_AH_AL_Restore
 10923  1F1F  0820               	movf	??_setLoad_AH_AL_Restore,w
 10924  1F20  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10925  1F21  2F08               	goto	L7
 10926  1F22                     __end_of_setLoad_AH_AL_Restore:	
 10927                           
 10928                           	psect	text59
 10929  1C29                     __ptext59:	
 10930 ;; *************** function _LED_Main *****************
 10931 ;; Defined at:
 10932 ;;		line 47 in file "../src/LED_B1.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    7
 10953 ;; This function calls:
 10954 ;;		_setLED_Main
 10955 ;; This function is called by:
 10956 ;;		_main
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _LED_Main
 10962  1C29                     _LED_Main:	
 10963                           
 10964                           ;LED_B1.c: 62: setLED_Main(99);
 10965                           
 10966                           ;incstack = 0
 10967                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10968  1C29  3063               	movlw	99
 10969  1C2A  3192  22BA         	fcall	_setLED_Main
 10970  1C2C  0008               	return
 10971  1C2D                     __end_of_LED_Main:	
 10972                           
 10973                           	psect	text60
 10974  12BA                     __ptext60:	
 10975 ;; *************** function _setLED_Main *****************
 10976 ;; Defined at:
 10977 ;;		line 221 in file "../src/LED_B1.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;  led             1    wreg     unsigned char 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;  led             1    4[BANK0 ] unsigned char 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;		None               void
 10984 ;; Registers used:
 10985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:        3 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    6
 10998 ;; This function calls:
 10999 ;;		_LedPointSelect
 11000 ;; This function is called by:
 11001 ;;		_LED_Main
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           
 11006                           ;psect for function _setLED_Main
 11007  12BA                     _setLED_Main:	
 11008                           
 11009                           ;incstack = 0
 11010                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11011                           ;setLED_Main@led stored from wreg
 11012  12BA  0020               	movlb	0	; select bank0
 11013  12BB  00A4               	movwf	setLED_Main@led
 11014                           
 11015                           ;LED_B1.c: 222: LedPointSelect(led);
 11016  12BC  0824               	movf	setLED_Main@led,w
 11017  12BD  319C  24A4  3192   	fcall	_LedPointSelect
 11018                           
 11019                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11020  12C0  087A               	movf	_LED,w
 11021  12C1  0086               	movwf	6
 11022  12C2  3001               	movlw	1	; select bank2/3
 11023  12C3  0087               	movwf	7
 11024  12C4  1C81               	btfss	1,1
 11025  12C5  0008               	return
 11026                           
 11027                           ;LED_B1.c: 224: LED->Time++;
 11028  12C6  0A7A               	incf	_LED,w
 11029  12C7  0086               	movwf	6
 11030  12C8  3001               	movlw	1	; select bank2/3
 11031  12C9  0087               	movwf	7
 11032  12CA  3001               	movlw	1
 11033  12CB  0781               	addwf	1,f
 11034  12CC  3141               	addfsr 1,1
 11035  12CD  1803               	skipnc
 11036  12CE  0A81               	incf	1,f
 11037                           
 11038                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11039  12CF  0A7A               	incf	_LED,w
 11040  12D0  0086               	movwf	6
 11041  12D1  3001               	movlw	1	; select bank2/3
 11042  12D2  0087               	movwf	7
 11043  12D3  3F40               	moviw [0]fsr1
 11044  12D4  0020               	movlb	0	; select bank0
 11045  12D5  00A2               	movwf	??_setLED_Main
 11046  12D6  3F41               	moviw [1]fsr1
 11047  12D7  00A3               	movwf	??_setLED_Main+1
 11048  12D8  3000               	movlw	0
 11049  12D9  0223               	subwf	??_setLED_Main+1,w
 11050  12DA  3032               	movlw	50
 11051  12DB  1903               	skipnz
 11052  12DC  0222               	subwf	??_setLED_Main,w
 11053  12DD  1C03               	skipc
 11054  12DE  0008               	return
 11055                           
 11056                           ;LED_B1.c: 226: LED->Time = 0;
 11057  12DF  0A7A               	incf	_LED,w
 11058  12E0  0086               	movwf	6
 11059  12E1  3001               	movlw	1	; select bank2/3
 11060  12E2  0087               	movwf	7
 11061  12E3  3000               	movlw	0
 11062  12E4  3FC0               	movwi [0]fsr1
 11063  12E5  3FC1               	movwi [1]fsr1
 11064                           
 11065                           ;LED_B1.c: 243: if (led == 99) {
 11066  12E6  0824               	movf	setLED_Main@led,w
 11067  12E7  3A63               	xorlw	99
 11068  12E8  1D03               	skipz
 11069  12E9  0008               	return
 11070                           
 11071                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11072  12EA  3020               	movlw	32
 11073  12EB  068D               	xorwf	13,f
 11074  12EC  0008               	return
 11075  12ED                     __end_of_setLED_Main:	
 11076                           
 11077                           	psect	text61
 11078  1C25                     __ptext61:	
 11079 ;; *************** function _LED_Initialization *****************
 11080 ;; Defined at:
 11081 ;;		line 31 in file "../src/LED_B1.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;		None
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;		None
 11086 ;; Return value:  Size  Location     Type
 11087 ;;		None               void
 11088 ;; Registers used:
 11089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;Total ram usage:        0 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:    8
 11102 ;; This function calls:
 11103 ;;		_setLED_Initialization
 11104 ;; This function is called by:
 11105 ;;		_main
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _LED_Initialization
 11111  1C25                     _LED_Initialization:	
 11112                           
 11113                           ;LED_B1.c: 42: setLED_Initialization(99);
 11114                           
 11115                           ;incstack = 0
 11116                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11117  1C25  3063               	movlw	99
 11118  1C26  319D  259D         	fcall	_setLED_Initialization
 11119  1C28  0008               	return
 11120  1C29                     __end_of_LED_Initialization:	
 11121                           
 11122                           	psect	text62
 11123  1D9D                     __ptext62:	
 11124 ;; *************** function _setLED_Initialization *****************
 11125 ;; Defined at:
 11126 ;;		line 69 in file "../src/LED_B1.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  led             1    wreg     unsigned char 
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  led             1    4[BANK0 ] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;		None               void
 11133 ;; Registers used:
 11134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;Total ram usage:        1 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    7
 11147 ;; This function calls:
 11148 ;;		_LedPointSelect
 11149 ;;		_setLED
 11150 ;; This function is called by:
 11151 ;;		_LED_Initialization
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _setLED_Initialization
 11157  1D9D                     _setLED_Initialization:	
 11158                           
 11159                           ;incstack = 0
 11160                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11161                           ;setLED_Initialization@led stored from wreg
 11162  1D9D  0020               	movlb	0	; select bank0
 11163  1D9E  00A4               	movwf	setLED_Initialization@led
 11164                           
 11165                           ;LED_B1.c: 70: LedPointSelect(led);
 11166  1D9F  0824               	movf	setLED_Initialization@led,w
 11167  1DA0  319C  24A4  319D   	fcall	_LedPointSelect
 11168                           
 11169                           ;LED_B1.c: 71: LED->Enable = 1;
 11170  1DA3  087A               	movf	_LED,w
 11171  1DA4  0086               	movwf	6
 11172  1DA5  3001               	movlw	1	; select bank2/3
 11173  1DA6  0087               	movwf	7
 11174  1DA7  1401               	bsf	1,0
 11175                           
 11176                           ;LED_B1.c: 72: setLED(led, 0);
 11177  1DA8  0020               	movlb	0	; select bank0
 11178  1DA9  01A2               	clrf	setLED@command
 11179  1DAA  0824               	movf	setLED_Initialization@led,w
 11180  1DAB  3193  2322         	fcall	_setLED
 11181  1DAD  0008               	return
 11182  1DAE                     __end_of_setLED_Initialization:	
 11183                           
 11184                           	psect	text63
 11185  1358                     __ptext63:	
 11186 ;; *************** function _Flash_Memory_Main *****************
 11187 ;; Defined at:
 11188 ;;		line 904 in file "../src/MCU_B1.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;		None
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;		None
 11193 ;; Return value:  Size  Location     Type
 11194 ;;		None               void
 11195 ;; Registers used:
 11196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;Total ram usage:        1 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    8
 11209 ;; This function calls:
 11210 ;;		_Flash_Memory_Modify
 11211 ;;		_getMain_LightsStatus
 11212 ;; This function is called by:
 11213 ;;		_main
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           
 11218                           ;psect for function _Flash_Memory_Main
 11219  1358                     _Flash_Memory_Main:	
 11220                           
 11221                           ;MCU_B1.c: 905: if (Memory.Modify == 1) {
 11222                           
 11223                           ;incstack = 0
 11224                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11225  1358  0023               	movlb	3	; select bank3
 11226  1359  1C44               	btfss	(_Memory^(0+384)+36),0
 11227  135A  0008               	return
 11228                           
 11229                           ;MCU_B1.c: 906: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11230  135B  3191  2199  3193   	fcall	_getMain_LightsStatus
 11231  135E  3A00               	xorlw	0
 11232  135F  3000               	movlw	0
 11233  1360  1903               	skipnz
 11234  1361  3001               	movlw	1
 11235  1362  0020               	movlb	0	; select bank0
 11236  1363  00A9               	movwf	??_Flash_Memory_Main
 11237  1364  0DA9               	rlf	??_Flash_Memory_Main,f
 11238  1365  0023               	movlb	3	; select bank3
 11239  1366  0844               	movf	(_Memory^(0+384)+36),w
 11240  1367  0020               	movlb	0	; select bank0
 11241  1368  0629               	xorwf	??_Flash_Memory_Main,w
 11242  1369  39FD               	andlw	-3
 11243  136A  0629               	xorwf	??_Flash_Memory_Main,w
 11244  136B  0023               	movlb	3	; select bank3
 11245  136C  00C4               	movwf	(_Memory^(0+384)+36)
 11246                           
 11247                           ;MCU_B1.c: 907: if (Memory.GO == 1) {
 11248  136D  1CC4               	btfss	(_Memory^(0+384)+36),1
 11249  136E  2B88               	goto	l1181
 11250                           
 11251                           ;MCU_B1.c: 908: Memory.Runtime = 1;
 11252  136F  15C4               	bsf	(_Memory^(0+384)+36),3
 11253                           
 11254                           ;MCU_B1.c: 909: Memory.Time++;
 11255  1370  3001               	movlw	1
 11256  1371  07C2               	addwf	(_Memory^(0+384)+34),f
 11257  1372  3000               	movlw	0
 11258  1373  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11259                           
 11260                           ;MCU_B1.c: 910: if (Memory.Time == 25) {
 11261  1374  3022               	movlw	34
 11262  1375  3EA0               	addlw	_Memory& (0+255)
 11263  1376  0086               	movwf	6
 11264  1377  3001               	movlw	1	; select bank3/4
 11265  1378  0087               	movwf	7
 11266  1379  3F40               	moviw [0]fsr1
 11267  137A  3A19               	xorlw	25
 11268  137B  1D03               	skipz
 11269  137C  2B7F               	goto	u7325
 11270  137D  3F41               	moviw [1]fsr1
 11271  137E  3A00               	xorlw	0
 11272  137F                     u7325:	
 11273  137F  1D03               	skipz
 11274  1380  0008               	return
 11275                           
 11276                           ;MCU_B1.c: 911: Memory.Time = 0;
 11277  1381  01C2               	clrf	(_Memory^(0+384)+34)
 11278  1382  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11279                           
 11280                           ;MCU_B1.c: 912: Memory.Modify = 0;
 11281  1383  1044               	bcf	(_Memory^(0+384)+36),0
 11282                           
 11283                           ;MCU_B1.c: 913: Memory.GO = 0;
 11284  1384  10C4               	bcf	(_Memory^(0+384)+36),1
 11285                           
 11286                           ;MCU_B1.c: 914: Flash_Memory_Modify();
 11287  1385  3195  254E         	fcall	_Flash_Memory_Modify
 11288                           
 11289                           ;MCU_B1.c: 915: }
 11290                           ;MCU_B1.c: 916: } else {
 11291  1387  0008               	return
 11292  1388                     l1181:	
 11293                           
 11294                           ;MCU_B1.c: 917: if (Memory.Runtime == 1) {
 11295  1388  1DC4               	btfss	(_Memory^(0+384)+36),3
 11296  1389  0008               	return
 11297                           
 11298                           ;MCU_B1.c: 918: Memory.Runtime = 0;
 11299  138A  11C4               	bcf	(_Memory^(0+384)+36),3
 11300                           
 11301                           ;MCU_B1.c: 919: Memory.Time = 0;
 11302  138B  01C2               	clrf	(_Memory^(0+384)+34)
 11303  138C  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11304  138D  0008               	return
 11305  138E                     __end_of_Flash_Memory_Main:	
 11306                           
 11307                           	psect	text64
 11308  154E                     __ptext64:	
 11309 ;; *************** function _Flash_Memory_Modify *****************
 11310 ;; Defined at:
 11311 ;;		line 977 in file "../src/MCU_B1.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;		None
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  i               1    5[BANK0 ] unsigned char 
 11316 ;; Return value:  Size  Location     Type
 11317 ;;		None               void
 11318 ;; Registers used:
 11319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;Total ram usage:        2 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    7
 11332 ;; This function calls:
 11333 ;;		_Flash_Memory_Erasing
 11334 ;;		_Flash_Memory_Read
 11335 ;;		_Flash_Memory_Write
 11336 ;;		_setMemory_Data
 11337 ;; This function is called by:
 11338 ;;		_Flash_Memory_Main
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           
 11343                           ;psect for function _Flash_Memory_Modify
 11344  154E                     _Flash_Memory_Modify:	
 11345                           
 11346                           ;MCU_B1.c: 978: char i = 0;
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11350  154E  0020               	movlb	0	; select bank0
 11351  154F  01A5               	clrf	Flash_Memory_Modify@i
 11352                           
 11353                           ;MCU_B1.c: 979: for (i = 0; i < 32; i++) {
 11354  1550  01A5               	clrf	Flash_Memory_Modify@i
 11355  1551  3020               	movlw	32
 11356  1552  0225               	subwf	Flash_Memory_Modify@i,w
 11357  1553  1803               	btfsc	3,0
 11358  1554  2D6A               	goto	l7003
 11359  1555                     l6997:	
 11360                           
 11361                           ;MCU_B1.c: 980: Memory.Data[i] = Flash_Memory_Read(i);
 11362  1555  0825               	movf	Flash_Memory_Modify@i,w
 11363  1556  319E  26EC  3195   	fcall	_Flash_Memory_Read
 11364  1559  0020               	movlb	0	; select bank0
 11365  155A  00A4               	movwf	??_Flash_Memory_Modify
 11366  155B  0825               	movf	Flash_Memory_Modify@i,w
 11367  155C  3EA0               	addlw	_Memory& (0+255)
 11368  155D  0086               	movwf	6
 11369  155E  3001               	movlw	1	; select bank3/4
 11370  155F  0087               	movwf	7
 11371  1560  0824               	movf	??_Flash_Memory_Modify,w
 11372  1561  0081               	movwf	1
 11373  1562  3001               	movlw	1
 11374  1563  00A4               	movwf	??_Flash_Memory_Modify
 11375  1564  0824               	movf	??_Flash_Memory_Modify,w
 11376  1565  07A5               	addwf	Flash_Memory_Modify@i,f
 11377  1566  3020               	movlw	32
 11378  1567  0225               	subwf	Flash_Memory_Modify@i,w
 11379  1568  1C03               	skipc
 11380  1569  2D55               	goto	l6997
 11381  156A                     l7003:	
 11382                           
 11383                           ;MCU_B1.c: 981: }
 11384                           ;MCU_B1.c: 982: setMemory_Data(0, product->Data[12]);
 11385  156A  086E               	movf	_product,w
 11386  156B  0086               	movwf	6
 11387  156C  3002               	movlw	2	; select bank4/5
 11388  156D  0087               	movwf	7
 11389  156E  3002               	movlw	2	; select bank4/5
 11390  156F  3F4C               	moviw [12]fsr1
 11391  1570  00A0               	movwf	setMemory_Data@data
 11392  1571  3000               	movlw	0
 11393  1572  319C  24F3  3195   	fcall	_setMemory_Data
 11394                           
 11395                           ;MCU_B1.c: 983: setMemory_Data(1, product->Data[13]);
 11396  1575  0020               	movlb	0	; select bank0
 11397  1576  086E               	movf	_product,w
 11398  1577  0086               	movwf	6
 11399  1578  3002               	movlw	2	; select bank4/5
 11400  1579  0087               	movwf	7
 11401  157A  3002               	movlw	2	; select bank4/5
 11402  157B  3F4D               	moviw [13]fsr1
 11403  157C  00A0               	movwf	setMemory_Data@data
 11404  157D  3001               	movlw	1
 11405  157E  319C  24F3  3195   	fcall	_setMemory_Data
 11406                           
 11407                           ;MCU_B1.c: 984: setMemory_Data(2, product->Data[14]);
 11408  1581  0020               	movlb	0	; select bank0
 11409  1582  086E               	movf	_product,w
 11410  1583  0086               	movwf	6
 11411  1584  3002               	movlw	2	; select bank4/5
 11412  1585  0087               	movwf	7
 11413  1586  3002               	movlw	2	; select bank4/5
 11414  1587  3F4E               	moviw [14]fsr1
 11415  1588  00A0               	movwf	setMemory_Data@data
 11416  1589  3002               	movlw	2
 11417  158A  319C  24F3  3195   	fcall	_setMemory_Data
 11418                           
 11419                           ;MCU_B1.c: 990: if (Memory.LoopSave == 1) {
 11420  158D  0023               	movlb	3	; select bank3
 11421  158E  1D44               	btfss	(_Memory^(0+384)+36),2
 11422  158F  2D94               	goto	l1204
 11423                           
 11424                           ;MCU_B1.c: 991: Memory.LoopSave = 0;
 11425  1590  1144               	bcf	(_Memory^(0+384)+36),2
 11426                           
 11427                           ;MCU_B1.c: 992: myMain.FirstOpen = 0;
 11428  1591  0021               	movlb	1	; select bank1
 11429  1592  11A0               	bcf	_myMain^(0+128),3
 11430                           
 11431                           ;MCU_B1.c: 993: myMain.First = 0;
 11432  1593  12A0               	bcf	_myMain^(0+128),5
 11433  1594                     l1204:	
 11434                           
 11435                           ;MCU_B1.c: 995: }
 11436                           ;MCU_B1.c: 996: GIE = 0;
 11437  1594  138B               	bcf	11,7	;volatile
 11438                           
 11439                           ;MCU_B1.c: 997: Flash_Memory_Erasing();
 11440  1595  319C  24FF  3195   	fcall	_Flash_Memory_Erasing
 11441                           
 11442                           ;MCU_B1.c: 998: Flash_Memory_Write();
 11443  1598  3191  21C4         	fcall	_Flash_Memory_Write
 11444                           
 11445                           ;MCU_B1.c: 999: GIE = 1;
 11446  159A  178B               	bsf	11,7	;volatile
 11447  159B  0008               	return
 11448  159C                     __end_of_Flash_Memory_Modify:	
 11449                           
 11450                           	psect	text65
 11451  1CFF                     __ptext65:	
 11452 ;; *************** function _Flash_Memory_Erasing *****************
 11453 ;; Defined at:
 11454 ;;		line 966 in file "../src/MCU_B1.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;		None               void
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    6
 11475 ;; This function calls:
 11476 ;;		_Flash_Memory_Unlock
 11477 ;; This function is called by:
 11478 ;;		_Flash_Memory_Modify
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _Flash_Memory_Erasing
 11484  1CFF                     _Flash_Memory_Erasing:	
 11485                           
 11486                           ;MCU_B1.c: 967: CFGS = 0;
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11490  1CFF  0023               	movlb	3	; select bank3
 11491  1D00  1315               	bcf	21,6	;volatile
 11492                           
 11493                           ;MCU_B1.c: 968: PMADRH = 0x30;
 11494  1D01  3030               	movlw	48
 11495  1D02  0092               	movwf	18	;volatile
 11496                           
 11497                           ;MCU_B1.c: 969: PMADRL = 0x00;
 11498  1D03  0191               	clrf	17	;volatile
 11499                           
 11500                           ;MCU_B1.c: 970: FREE = 1;
 11501  1D04  1615               	bsf	21,4	;volatile
 11502                           
 11503                           ;MCU_B1.c: 971: WREN = 1;
 11504  1D05  1515               	bsf	21,2	;volatile
 11505                           
 11506                           ;MCU_B1.c: 972: Flash_Memory_Unlock();
 11507  1D06  319C  2466         	fcall	_Flash_Memory_Unlock
 11508                           
 11509                           ;MCU_B1.c: 973: WREN = 0;
 11510  1D08  0023               	movlb	3	; select bank3
 11511  1D09  1115               	bcf	21,2	;volatile
 11512  1D0A  0008               	return
 11513  1D0B                     __end_of_Flash_Memory_Erasing:	
 11514                           
 11515                           	psect	text66
 11516  060A                     __ptext66:	
 11517 ;; *************** function _Flash_Memory_Initialization *****************
 11518 ;; Defined at:
 11519 ;;		line 863 in file "../src/MCU_B1.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;		None
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  i               1   67[BANK0 ] unsigned char 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;		None               void
 11526 ;; Registers used:
 11527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;Total ram usage:        2 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    8
 11540 ;; This function calls:
 11541 ;;		_Flash_Memory_Read
 11542 ;;		_Flash_Memory_Write
 11543 ;;		_setMemory_Data
 11544 ;;		_setPercentValue
 11545 ;; This function is called by:
 11546 ;;		_main
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           
 11551                           ;psect for function _Flash_Memory_Initialization
 11552  060A                     _Flash_Memory_Initialization:	
 11553                           
 11554                           ;MCU_B1.c: 864: char i = 0;
 11555                           
 11556                           ;incstack = 0
 11557                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11558  060A  0020               	movlb	0	; select bank0
 11559  060B  01E3               	clrf	Flash_Memory_Initialization@i
 11560                           
 11561                           ;MCU_B1.c: 865: if (Flash_Memory_Read(31) == 0xaa) {
 11562  060C  301F               	movlw	31
 11563  060D  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11564  0610  3AAA               	xorlw	170
 11565  0611  1D03               	skipz
 11566  0612  2E7C               	goto	l7471
 11567                           
 11568                           ;MCU_B1.c: 866: product->Data[12] = Flash_Memory_Read(0);
 11569  0613  3000               	movlw	0
 11570  0614  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11571  0617  0020               	movlb	0	; select bank0
 11572  0618  00E2               	movwf	??_Flash_Memory_Initialization
 11573  0619  086E               	movf	_product,w
 11574  061A  3E0C               	addlw	12
 11575  061B  0086               	movwf	6
 11576  061C  3002               	movlw	2	; select bank4/5
 11577  061D  0087               	movwf	7
 11578  061E  0862               	movf	??_Flash_Memory_Initialization,w
 11579  061F  0081               	movwf	1
 11580                           
 11581                           ;MCU_B1.c: 867: product->Data[13] = Flash_Memory_Read(1);
 11582  0620  3001               	movlw	1
 11583  0621  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11584  0624  0020               	movlb	0	; select bank0
 11585  0625  00E2               	movwf	??_Flash_Memory_Initialization
 11586  0626  086E               	movf	_product,w
 11587  0627  3E0D               	addlw	13
 11588  0628  0086               	movwf	6
 11589  0629  3002               	movlw	2	; select bank4/5
 11590  062A  0087               	movwf	7
 11591  062B  0862               	movf	??_Flash_Memory_Initialization,w
 11592  062C  0081               	movwf	1
 11593                           
 11594                           ;MCU_B1.c: 868: product->Data[14] = Flash_Memory_Read(2);
 11595  062D  3002               	movlw	2
 11596  062E  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11597  0631  0020               	movlb	0	; select bank0
 11598  0632  00E2               	movwf	??_Flash_Memory_Initialization
 11599  0633  086E               	movf	_product,w
 11600  0634  3E0E               	addlw	14
 11601  0635  0086               	movwf	6
 11602  0636  3002               	movlw	2	; select bank4/5
 11603  0637  0087               	movwf	7
 11604  0638  0862               	movf	??_Flash_Memory_Initialization,w
 11605  0639  0081               	movwf	1
 11606                           
 11607                           ;MCU_B1.c: 874: i = setPercentValue(((char)(90*0.8)));
 11608  063A  3048               	movlw	72
 11609  063B  318A  2243  3186   	fcall	_setPercentValue
 11610  063E  0020               	movlb	0	; select bank0
 11611  063F  00E2               	movwf	??_Flash_Memory_Initialization
 11612  0640  0862               	movf	??_Flash_Memory_Initialization,w
 11613  0641  00E3               	movwf	Flash_Memory_Initialization@i
 11614                           
 11615                           ;MCU_B1.c: 875: product->Data[21] = i;
 11616  0642  0863               	movf	Flash_Memory_Initialization@i,w
 11617  0643  00E2               	movwf	??_Flash_Memory_Initialization
 11618  0644  086E               	movf	_product,w
 11619  0645  3E15               	addlw	21
 11620  0646  0086               	movwf	6
 11621  0647  3002               	movlw	2	; select bank4/5
 11622  0648  0087               	movwf	7
 11623  0649  0862               	movf	??_Flash_Memory_Initialization,w
 11624  064A  0081               	movwf	1
 11625                           
 11626                           ;MCU_B1.c: 876: product->Data[22] = i;
 11627  064B  0863               	movf	Flash_Memory_Initialization@i,w
 11628  064C  00E2               	movwf	??_Flash_Memory_Initialization
 11629  064D  086E               	movf	_product,w
 11630  064E  3E16               	addlw	22
 11631  064F  0086               	movwf	6
 11632  0650  3002               	movlw	2	; select bank4/5
 11633  0651  0087               	movwf	7
 11634  0652  0862               	movf	??_Flash_Memory_Initialization,w
 11635  0653  0081               	movwf	1
 11636                           
 11637                           ;MCU_B1.c: 877: product->Data[23] = i;
 11638  0654  0863               	movf	Flash_Memory_Initialization@i,w
 11639  0655  00E2               	movwf	??_Flash_Memory_Initialization
 11640  0656  086E               	movf	_product,w
 11641  0657  3E17               	addlw	23
 11642  0658  0086               	movwf	6
 11643  0659  3002               	movlw	2	; select bank4/5
 11644  065A  0087               	movwf	7
 11645  065B  0862               	movf	??_Flash_Memory_Initialization,w
 11646  065C  0081               	movwf	1
 11647                           
 11648                           ;MCU_B1.c: 879: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11649  065D  086E               	movf	_product,w
 11650  065E  3E0C               	addlw	12
 11651  065F  0086               	movwf	6
 11652  0660  3002               	movlw	2	; select bank4/5
 11653  0661  0087               	movwf	7
 11654  0662  0801               	movf	1,w
 11655  0663  3AFF               	xorlw	255
 11656  0664  1D03               	skipz
 11657  0665  0008               	return
 11658  0666  086E               	movf	_product,w
 11659  0667  3E0D               	addlw	13
 11660  0668  0086               	movwf	6
 11661  0669  3002               	movlw	2	; select bank4/5
 11662  066A  0087               	movwf	7
 11663  066B  0801               	movf	1,w
 11664  066C  3AFF               	xorlw	255
 11665  066D  1D03               	skipz
 11666  066E  0008               	return
 11667  066F  086E               	movf	_product,w
 11668  0670  3E0E               	addlw	14
 11669  0671  0086               	movwf	6
 11670  0672  3002               	movlw	2	; select bank4/5
 11671  0673  0087               	movwf	7
 11672  0674  0801               	movf	1,w
 11673  0675  3AFF               	xorlw	255
 11674  0676  1D03               	skipz
 11675  0677  0008               	return
 11676                           
 11677                           ;MCU_B1.c: 880: myMain.FirstOpen = 1;
 11678  0678  0021               	movlb	1	; select bank1
 11679  0679  15A0               	bsf	_myMain^(0+128),3
 11680                           
 11681                           ;MCU_B1.c: 881: myMain.First = 1;
 11682  067A  16A0               	bsf	_myMain^(0+128),5
 11683                           
 11684                           ;MCU_B1.c: 882: }
 11685                           ;MCU_B1.c: 883: } else {
 11686  067B  0008               	return
 11687  067C                     l7471:	
 11688                           
 11689                           ;MCU_B1.c: 884: i = setPercentValue(((char)(90*0.8)));
 11690  067C  3048               	movlw	72
 11691  067D  318A  2243  3186   	fcall	_setPercentValue
 11692  0680  0020               	movlb	0	; select bank0
 11693  0681  00E2               	movwf	??_Flash_Memory_Initialization
 11694  0682  0862               	movf	??_Flash_Memory_Initialization,w
 11695  0683  00E3               	movwf	Flash_Memory_Initialization@i
 11696                           
 11697                           ;MCU_B1.c: 885: setMemory_Data(0, 0xff);
 11698  0684  30FF               	movlw	255
 11699  0685  00E2               	movwf	??_Flash_Memory_Initialization
 11700  0686  0862               	movf	??_Flash_Memory_Initialization,w
 11701  0687  00A0               	movwf	setMemory_Data@data
 11702  0688  3000               	movlw	0
 11703  0689  319C  24F3  3186   	fcall	_setMemory_Data
 11704                           
 11705                           ;MCU_B1.c: 886: setMemory_Data(1, 0xff);
 11706  068C  30FF               	movlw	255
 11707  068D  0020               	movlb	0	; select bank0
 11708  068E  00E2               	movwf	??_Flash_Memory_Initialization
 11709  068F  0862               	movf	??_Flash_Memory_Initialization,w
 11710  0690  00A0               	movwf	setMemory_Data@data
 11711  0691  3001               	movlw	1
 11712  0692  319C  24F3  3186   	fcall	_setMemory_Data
 11713                           
 11714                           ;MCU_B1.c: 887: setMemory_Data(2, 0xff);
 11715  0695  30FF               	movlw	255
 11716  0696  0020               	movlb	0	; select bank0
 11717  0697  00E2               	movwf	??_Flash_Memory_Initialization
 11718  0698  0862               	movf	??_Flash_Memory_Initialization,w
 11719  0699  00A0               	movwf	setMemory_Data@data
 11720  069A  3002               	movlw	2
 11721  069B  319C  24F3  3186   	fcall	_setMemory_Data
 11722                           
 11723                           ;MCU_B1.c: 888: setMemory_Data(3, 0xff);
 11724  069E  30FF               	movlw	255
 11725  069F  0020               	movlb	0	; select bank0
 11726  06A0  00E2               	movwf	??_Flash_Memory_Initialization
 11727  06A1  0862               	movf	??_Flash_Memory_Initialization,w
 11728  06A2  00A0               	movwf	setMemory_Data@data
 11729  06A3  3003               	movlw	3
 11730  06A4  319C  24F3  3186   	fcall	_setMemory_Data
 11731                           
 11732                           ;MCU_B1.c: 889: setMemory_Data(4, 0xff);
 11733  06A7  30FF               	movlw	255
 11734  06A8  0020               	movlb	0	; select bank0
 11735  06A9  00E2               	movwf	??_Flash_Memory_Initialization
 11736  06AA  0862               	movf	??_Flash_Memory_Initialization,w
 11737  06AB  00A0               	movwf	setMemory_Data@data
 11738  06AC  3004               	movlw	4
 11739  06AD  319C  24F3  3186   	fcall	_setMemory_Data
 11740                           
 11741                           ;MCU_B1.c: 890: setMemory_Data(5, 0xff);
 11742  06B0  30FF               	movlw	255
 11743  06B1  0020               	movlb	0	; select bank0
 11744  06B2  00E2               	movwf	??_Flash_Memory_Initialization
 11745  06B3  0862               	movf	??_Flash_Memory_Initialization,w
 11746  06B4  00A0               	movwf	setMemory_Data@data
 11747  06B5  3005               	movlw	5
 11748  06B6  319C  24F3  3186   	fcall	_setMemory_Data
 11749                           
 11750                           ;MCU_B1.c: 891: setMemory_Data(31, 0xaa);
 11751  06B9  30AA               	movlw	170
 11752  06BA  0020               	movlb	0	; select bank0
 11753  06BB  00E2               	movwf	??_Flash_Memory_Initialization
 11754  06BC  0862               	movf	??_Flash_Memory_Initialization,w
 11755  06BD  00A0               	movwf	setMemory_Data@data
 11756  06BE  301F               	movlw	31
 11757  06BF  319C  24F3  3186   	fcall	_setMemory_Data
 11758                           
 11759                           ;MCU_B1.c: 892: product->Data[21] = i;
 11760  06C2  0020               	movlb	0	; select bank0
 11761  06C3  0863               	movf	Flash_Memory_Initialization@i,w
 11762  06C4  00E2               	movwf	??_Flash_Memory_Initialization
 11763  06C5  086E               	movf	_product,w
 11764  06C6  3E15               	addlw	21
 11765  06C7  0086               	movwf	6
 11766  06C8  3002               	movlw	2	; select bank4/5
 11767  06C9  0087               	movwf	7
 11768  06CA  0862               	movf	??_Flash_Memory_Initialization,w
 11769  06CB  0081               	movwf	1
 11770                           
 11771                           ;MCU_B1.c: 893: product->Data[22] = i;
 11772  06CC  0863               	movf	Flash_Memory_Initialization@i,w
 11773  06CD  00E2               	movwf	??_Flash_Memory_Initialization
 11774  06CE  086E               	movf	_product,w
 11775  06CF  3E16               	addlw	22
 11776  06D0  0086               	movwf	6
 11777  06D1  3002               	movlw	2	; select bank4/5
 11778  06D2  0087               	movwf	7
 11779  06D3  0862               	movf	??_Flash_Memory_Initialization,w
 11780  06D4  0081               	movwf	1
 11781                           
 11782                           ;MCU_B1.c: 894: product->Data[23] = i;
 11783  06D5  0863               	movf	Flash_Memory_Initialization@i,w
 11784  06D6  00E2               	movwf	??_Flash_Memory_Initialization
 11785  06D7  086E               	movf	_product,w
 11786  06D8  3E17               	addlw	23
 11787  06D9  0086               	movwf	6
 11788  06DA  3002               	movlw	2	; select bank4/5
 11789  06DB  0087               	movwf	7
 11790  06DC  0862               	movf	??_Flash_Memory_Initialization,w
 11791  06DD  0081               	movwf	1
 11792                           
 11793                           ;MCU_B1.c: 895: GIE = 0;
 11794  06DE  138B               	bcf	11,7	;volatile
 11795                           
 11796                           ;MCU_B1.c: 896: Flash_Memory_Write();
 11797  06DF  3191  21C4         	fcall	_Flash_Memory_Write
 11798                           
 11799                           ;MCU_B1.c: 897: GIE = 1;
 11800  06E1  178B               	bsf	11,7	;volatile
 11801                           
 11802                           ;MCU_B1.c: 898: myMain.FirstOpen = 1;
 11803  06E2  0021               	movlb	1	; select bank1
 11804  06E3  15A0               	bsf	_myMain^(0+128),3
 11805                           
 11806                           ;MCU_B1.c: 899: myMain.First = 1;
 11807  06E4  16A0               	bsf	_myMain^(0+128),5
 11808  06E5  0008               	return
 11809  06E6                     __end_of_Flash_Memory_Initialization:	
 11810                           
 11811                           	psect	text67
 11812  1CF3                     __ptext67:	
 11813 ;; *************** function _setMemory_Data *****************
 11814 ;; Defined at:
 11815 ;;		line 1014 in file "../src/MCU_B1.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  address         1    wreg     unsigned char 
 11818 ;;  data            1    0[BANK0 ] unsigned char 
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;  address         1    2[BANK0 ] unsigned char 
 11821 ;; Return value:  Size  Location     Type
 11822 ;;		None               void
 11823 ;; Registers used:
 11824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11830 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;Total ram usage:        3 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:    5
 11837 ;; This function calls:
 11838 ;;		Nothing
 11839 ;; This function is called by:
 11840 ;;		_Flash_Memory_Initialization
 11841 ;;		_Flash_Memory_Modify
 11842 ;; This function uses a non-reentrant model
 11843 ;;
 11844                           
 11845                           
 11846                           ;psect for function _setMemory_Data
 11847  1CF3                     _setMemory_Data:	
 11848                           
 11849                           ;incstack = 0
 11850                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11851                           ;setMemory_Data@address stored from wreg
 11852  1CF3  0020               	movlb	0	; select bank0
 11853  1CF4  00A2               	movwf	setMemory_Data@address
 11854                           
 11855                           ;MCU_B1.c: 1015: Memory.Data[address] = data;
 11856  1CF5  0820               	movf	setMemory_Data@data,w
 11857  1CF6  00A1               	movwf	??_setMemory_Data
 11858  1CF7  0822               	movf	setMemory_Data@address,w
 11859  1CF8  3EA0               	addlw	_Memory& (0+255)
 11860  1CF9  0086               	movwf	6
 11861  1CFA  3001               	movlw	1	; select bank3/4
 11862  1CFB  0087               	movwf	7
 11863  1CFC  0821               	movf	??_setMemory_Data,w
 11864  1CFD  0081               	movwf	1
 11865  1CFE  0008               	return
 11866  1CFF                     __end_of_setMemory_Data:	
 11867                           
 11868                           	psect	text68
 11869  11C4                     __ptext68:	
 11870 ;; *************** function _Flash_Memory_Write *****************
 11871 ;; Defined at:
 11872 ;;		line 947 in file "../src/MCU_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  i               1    1[BANK0 ] unsigned char 
 11877 ;; Return value:  Size  Location     Type
 11878 ;;		None               void
 11879 ;; Registers used:
 11880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;Total ram usage:        2 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    6
 11893 ;; This function calls:
 11894 ;;		_Flash_Memory_Unlock
 11895 ;; This function is called by:
 11896 ;;		_Flash_Memory_Initialization
 11897 ;;		_Flash_Memory_Modify
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _Flash_Memory_Write
 11903  11C4                     _Flash_Memory_Write:	
 11904                           
 11905                           ;MCU_B1.c: 948: char i = 0;
 11906                           
 11907                           ;incstack = 0
 11908                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11909  11C4  0020               	movlb	0	; select bank0
 11910  11C5  01A1               	clrf	Flash_Memory_Write@i
 11911                           
 11912                           ;MCU_B1.c: 949: CFGS = 0;
 11913  11C6  0023               	movlb	3	; select bank3
 11914  11C7  1315               	bcf	21,6	;volatile
 11915                           
 11916                           ;MCU_B1.c: 950: PMADRH = 0x30;
 11917  11C8  3030               	movlw	48
 11918  11C9  0092               	movwf	18	;volatile
 11919                           
 11920                           ;MCU_B1.c: 951: PMDATH = 0;
 11921  11CA  0194               	clrf	20	;volatile
 11922                           
 11923                           ;MCU_B1.c: 952: FREE = 0;
 11924  11CB  1215               	bcf	21,4	;volatile
 11925                           
 11926                           ;MCU_B1.c: 953: LWLO = 1;
 11927  11CC  1695               	bsf	21,5	;volatile
 11928                           
 11929                           ;MCU_B1.c: 954: WREN = 1;
 11930  11CD  1515               	bsf	21,2	;volatile
 11931                           
 11932                           ;MCU_B1.c: 955: for (i = 0; i < 32; i++) {
 11933  11CE  0020               	movlb	0	; select bank0
 11934  11CF  01A1               	clrf	Flash_Memory_Write@i
 11935  11D0  3020               	movlw	32
 11936  11D1  0221               	subwf	Flash_Memory_Write@i,w
 11937  11D2  1803               	btfsc	3,0
 11938  11D3  29EC               	goto	l1195
 11939  11D4                     l6573:	
 11940                           
 11941                           ;MCU_B1.c: 956: PMADRL = i;
 11942  11D4  0821               	movf	Flash_Memory_Write@i,w
 11943  11D5  0023               	movlb	3	; select bank3
 11944  11D6  0091               	movwf	17	;volatile
 11945                           
 11946                           ;MCU_B1.c: 957: PMDATL = Memory.Data[i];
 11947  11D7  0020               	movlb	0	; select bank0
 11948  11D8  0821               	movf	Flash_Memory_Write@i,w
 11949  11D9  3EA0               	addlw	_Memory& (0+255)
 11950  11DA  0086               	movwf	6
 11951  11DB  3001               	movlw	1	; select bank3/4
 11952  11DC  0087               	movwf	7
 11953  11DD  0801               	movf	1,w
 11954  11DE  0023               	movlb	3	; select bank3
 11955  11DF  0093               	movwf	19	;volatile
 11956                           
 11957                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 11958  11E0  319C  2466  3191   	fcall	_Flash_Memory_Unlock
 11959  11E3  3001               	movlw	1
 11960  11E4  0020               	movlb	0	; select bank0
 11961  11E5  00A0               	movwf	??_Flash_Memory_Write
 11962  11E6  0820               	movf	??_Flash_Memory_Write,w
 11963  11E7  07A1               	addwf	Flash_Memory_Write@i,f
 11964  11E8  3020               	movlw	32
 11965  11E9  0221               	subwf	Flash_Memory_Write@i,w
 11966  11EA  1C03               	skipc
 11967  11EB  29D4               	goto	l6573
 11968  11EC                     l1195:	
 11969                           
 11970                           ;MCU_B1.c: 959: }
 11971                           ;MCU_B1.c: 960: LWLO = 0;
 11972  11EC  0023               	movlb	3	; select bank3
 11973  11ED  1295               	bcf	21,5	;volatile
 11974                           
 11975                           ;MCU_B1.c: 961: Flash_Memory_Unlock();
 11976  11EE  319C  2466         	fcall	_Flash_Memory_Unlock
 11977                           
 11978                           ;MCU_B1.c: 962: WREN = 0;
 11979  11F0  0023               	movlb	3	; select bank3
 11980  11F1  1115               	bcf	21,2	;volatile
 11981  11F2  0008               	return
 11982  11F3                     __end_of_Flash_Memory_Write:	
 11983                           
 11984                           	psect	text69
 11985  1C66                     __ptext69:	
 11986 ;; *************** function _Flash_Memory_Unlock *****************
 11987 ;; Defined at:
 11988 ;;		line 926 in file "../src/MCU_B1.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;		None
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;		None
 11993 ;; Return value:  Size  Location     Type
 11994 ;;		None               void
 11995 ;; Registers used:
 11996 ;;		wreg
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;Total ram usage:        0 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    5
 12009 ;; This function calls:
 12010 ;;		Nothing
 12011 ;; This function is called by:
 12012 ;;		_Flash_Memory_Write
 12013 ;;		_Flash_Memory_Erasing
 12014 ;; This function uses a non-reentrant model
 12015 ;;
 12016                           
 12017                           
 12018                           ;psect for function _Flash_Memory_Unlock
 12019  1C66                     _Flash_Memory_Unlock:	
 12020                           
 12021                           ;MCU_B1.c: 927: PMCON2 = 0x55;
 12022                           
 12023                           ;incstack = 0
 12024                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12025  1C66  3055               	movlw	85
 12026  1C67  0023               	movlb	3	; select bank3
 12027  1C68  0096               	movwf	22	;volatile
 12028                           
 12029                           ;MCU_B1.c: 928: PMCON2 = 0xaa;
 12030  1C69  30AA               	movlw	170
 12031  1C6A  0096               	movwf	22	;volatile
 12032                           
 12033                           ;MCU_B1.c: 929: WR = 1;
 12034  1C6B  1495               	bsf	21,1	;volatile
 12035                           
 12036                           ;MCU_B1.c: 930: __nop();
 12037  1C6C  0000               	nop
 12038                           
 12039                           ;MCU_B1.c: 931: __nop();
 12040  1C6D  0000               	nop
 12041  1C6E  0008               	return
 12042  1C6F                     __end_of_Flash_Memory_Unlock:	
 12043                           
 12044                           	psect	text70
 12045  1EEC                     __ptext70:	
 12046 ;; *************** function _Flash_Memory_Read *****************
 12047 ;; Defined at:
 12048 ;;		line 935 in file "../src/MCU_B1.c"
 12049 ;; Parameters:    Size  Location     Type
 12050 ;;  address         1    wreg     unsigned char 
 12051 ;; Auto vars:     Size  Location     Type
 12052 ;;  address         1    2[BANK0 ] unsigned char 
 12053 ;;  ret             1    3[BANK0 ] unsigned char 
 12054 ;;  i               1    1[BANK0 ] unsigned char 
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  1    wreg      unsigned char 
 12057 ;; Registers used:
 12058 ;;		wreg, status,2
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;Total ram usage:        4 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; Hardware stack levels required when called:    5
 12071 ;; This function calls:
 12072 ;;		Nothing
 12073 ;; This function is called by:
 12074 ;;		_Flash_Memory_Initialization
 12075 ;;		_Flash_Memory_Modify
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _Flash_Memory_Read
 12081  1EEC                     _Flash_Memory_Read:	
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12085                           ;Flash_Memory_Read@address stored from wreg
 12086  1EEC  0020               	movlb	0	; select bank0
 12087  1EED  00A2               	movwf	Flash_Memory_Read@address
 12088                           
 12089                           ;MCU_B1.c: 936: char i = 0, ret = 0;
 12090  1EEE  01A1               	clrf	Flash_Memory_Read@i
 12091  1EEF  01A3               	clrf	Flash_Memory_Read@ret
 12092                           
 12093                           ;MCU_B1.c: 937: PMADRH = 0x30;
 12094  1EF0  3030               	movlw	48
 12095  1EF1  0023               	movlb	3	; select bank3
 12096  1EF2  0092               	movwf	18	;volatile
 12097                           
 12098                           ;MCU_B1.c: 938: PMADRL = address;
 12099  1EF3  0020               	movlb	0	; select bank0
 12100  1EF4  0822               	movf	Flash_Memory_Read@address,w
 12101  1EF5  0023               	movlb	3	; select bank3
 12102  1EF6  0091               	movwf	17	;volatile
 12103                           
 12104                           ;MCU_B1.c: 939: CFGS = 0;
 12105  1EF7  1315               	bcf	21,6	;volatile
 12106                           
 12107                           ;MCU_B1.c: 940: RD = 1;
 12108  1EF8  1415               	bsf	21,0	;volatile
 12109                           
 12110                           ;MCU_B1.c: 941: i = PMDATH;
 12111  1EF9  0814               	movf	20,w	;volatile
 12112  1EFA  0020               	movlb	0	; select bank0
 12113  1EFB  00A0               	movwf	??_Flash_Memory_Read
 12114  1EFC  0820               	movf	??_Flash_Memory_Read,w
 12115  1EFD  00A1               	movwf	Flash_Memory_Read@i
 12116                           
 12117                           ;MCU_B1.c: 942: ret = PMDATL;
 12118  1EFE  0023               	movlb	3	; select bank3
 12119  1EFF  0813               	movf	19,w	;volatile
 12120  1F00  0020               	movlb	0	; select bank0
 12121  1F01  00A0               	movwf	??_Flash_Memory_Read
 12122  1F02  0820               	movf	??_Flash_Memory_Read,w
 12123  1F03  00A3               	movwf	Flash_Memory_Read@ret
 12124                           
 12125                           ;MCU_B1.c: 943: return ret;
 12126  1F04  0823               	movf	Flash_Memory_Read@ret,w
 12127  1F05  0008               	return
 12128  1F06                     __end_of_Flash_Memory_Read:	
 12129                           
 12130                           	psect	text71
 12131  11F3                     __ptext71:	
 12132 ;; *************** function _DimmerLights_Main *****************
 12133 ;; Defined at:
 12134 ;;		line 402 in file "../src/Dimmer_B1.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;		None
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;		None
 12139 ;; Return value:  Size  Location     Type
 12140 ;;		None               void
 12141 ;; Registers used:
 12142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;Total ram usage:        4 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:   10
 12155 ;; This function calls:
 12156 ;;		_getLoad_OK
 12157 ;;		_getMain_All_Error_Status
 12158 ;;		_getMain_LightsStatus
 12159 ;;		_setDimmerLights_Main
 12160 ;; This function is called by:
 12161 ;;		_main
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function _DimmerLights_Main
 12167  11F3                     _DimmerLights_Main:	
 12168                           
 12169                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12173  11F3  3000               	movlw	0
 12174  11F4  3192  2287  3191   	fcall	_getMain_All_Error_Status
 12175  11F7  3800               	iorlw	0
 12176  11F8  1D03               	skipz
 12177  11F9  2A1D               	goto	l707
 12178                           
 12179                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12180  11FA  0022               	movlb	2	; select bank2
 12181  11FB  1CBE               	btfss	_Dimmer^(0+256),1
 12182  11FC  2A1F               	goto	l7413
 12183                           
 12184                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12185  11FD  319C  244D  3191   	fcall	_getLoad_OK
 12186  1200  3A01               	xorlw	1
 12187  1201  1903               	skipnz
 12188  1202  2A14               	goto	l7409
 12189  1203  3191  2199  3191   	fcall	_getMain_LightsStatus
 12190  1206  3A00               	xorlw	0
 12191  1207  1903               	skipnz
 12192  1208  2A14               	goto	l7409
 12193  1209  0022               	movlb	2	; select bank2
 12194  120A  0C3E               	rrf	_Dimmer^(0+256),w
 12195  120B  3901               	andlw	1
 12196  120C  0020               	movlb	0	; select bank0
 12197  120D  00E7               	movwf	??_DimmerLights_Main
 12198  120E  01E8               	clrf	??_DimmerLights_Main+1
 12199  120F  0867               	movf	??_DimmerLights_Main,w
 12200  1210  00E9               	movwf	_DimmerLights_Main$2344
 12201  1211  0868               	movf	??_DimmerLights_Main+1,w
 12202  1212  00EA               	movwf	_DimmerLights_Main$2344+1
 12203  1213  2A17               	goto	l7411
 12204  1214                     l7409:	
 12205  1214  0020               	movlb	0	; select bank0
 12206  1215  01E9               	clrf	_DimmerLights_Main$2344
 12207  1216  01EA               	clrf	_DimmerLights_Main$2344+1
 12208  1217                     l7411:	
 12209  1217  0869               	movf	_DimmerLights_Main$2344,w
 12210  1218  0022               	movlb	2	; select bank2
 12211  1219  10BE               	bcf	_Dimmer^(0+256),1
 12212  121A  1D03               	skipz
 12213  121B  14BE               	bsf	_Dimmer^(0+256),1
 12214                           
 12215                           ;Dimmer_B1.c: 407: }
 12216                           ;Dimmer_B1.c: 408: } else {
 12217  121C  2A1F               	goto	l7413
 12218  121D                     l707:	
 12219                           
 12220                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12221  121D  0022               	movlb	2	; select bank2
 12222  121E  10BE               	bcf	_Dimmer^(0+256),1
 12223  121F                     l7413:	
 12224                           
 12225                           ;Dimmer_B1.c: 410: }
 12226                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12227  121F  3001               	movlw	1
 12228  1220  3187  27A5         	fcall	_setDimmerLights_Main
 12229  1222  0008               	return
 12230  1223                     __end_of_DimmerLights_Main:	
 12231                           
 12232                           	psect	text72
 12233  07A5                     __ptext72:	
 12234 ;; *************** function _setDimmerLights_Main *****************
 12235 ;; Defined at:
 12236 ;;		line 428 in file "../src/Dimmer_B1.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;  lights          1    wreg     unsigned char 
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;  lights          1   70[BANK0 ] unsigned char 
 12241 ;; Return value:  Size  Location     Type
 12242 ;;		None               void
 12243 ;; Registers used:
 12244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;Total ram usage:        1 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:    9
 12257 ;; This function calls:
 12258 ;;		_DimmerLightsPointSelect
 12259 ;;		_setBuz
 12260 ;;		_setDimmerLights
 12261 ;;		_setDimmerLights_Adj
 12262 ;; This function is called by:
 12263 ;;		_DimmerLights_Main
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           
 12268                           ;psect for function _setDimmerLights_Main
 12269  07A5                     _setDimmerLights_Main:	
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12273                           ;setDimmerLights_Main@lights stored from wreg
 12274  07A5  0020               	movlb	0	; select bank0
 12275  07A6  00E6               	movwf	setDimmerLights_Main@lights
 12276                           
 12277                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12278  07A7  0866               	movf	setDimmerLights_Main@lights,w
 12279  07A8  319C  2499  3187   	fcall	_DimmerLightsPointSelect
 12280                           
 12281                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12282  07AB  0020               	movlb	0	; select bank0
 12283  07AC  086F               	movf	_DimmerLights,w
 12284  07AD  3E08               	addlw	8
 12285  07AE  0086               	movwf	6
 12286  07AF  3001               	movlw	1	; select bank2/3
 12287  07B0  0087               	movwf	7
 12288  07B1  1D01               	btfss	1,2
 12289  07B2  2FD0               	goto	l6895
 12290                           
 12291                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12292  07B3  0022               	movlb	2	; select bank2
 12293  07B4  18BE               	btfsc	_Dimmer^(0+256),1
 12294  07B5  0008               	return
 12295                           
 12296                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12297  07B6  0020               	movlb	0	; select bank0
 12298  07B7  086F               	movf	_DimmerLights,w
 12299  07B8  3E08               	addlw	8
 12300  07B9  0086               	movwf	6
 12301  07BA  3001               	movlw	1	; select bank2/3
 12302  07BB  0087               	movwf	7
 12303  07BC  1101               	bcf	1,2
 12304                           
 12305                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12306  07BD  086F               	movf	_DimmerLights,w
 12307  07BE  3E08               	addlw	8
 12308  07BF  0086               	movwf	6
 12309  07C0  3001               	movlw	1	; select bank2/3
 12310  07C1  0087               	movwf	7
 12311  07C2  1C81               	btfss	1,1
 12312  07C3  2FCA               	goto	l6893
 12313                           
 12314                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12315  07C4  01E2               	clrf	setDimmerLights@status
 12316  07C5  0AE2               	incf	setDimmerLights@status,f
 12317  07C6  0866               	movf	setDimmerLights_Main@lights,w
 12318  07C7  318C  24E5         	fcall	_setDimmerLights
 12319                           
 12320                           ;Dimmer_B1.c: 437: } else {
 12321  07C9  0008               	return
 12322  07CA                     l6893:	
 12323                           
 12324                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12325  07CA  0020               	movlb	0	; select bank0
 12326  07CB  01E2               	clrf	setDimmerLights@status
 12327  07CC  0866               	movf	setDimmerLights_Main@lights,w
 12328  07CD  318C  24E5         	fcall	_setDimmerLights
 12329                           
 12330                           ;Dimmer_B1.c: 439: }
 12331                           ;Dimmer_B1.c: 440: }
 12332                           ;Dimmer_B1.c: 441: } else {
 12333  07CF  0008               	return
 12334  07D0                     l6895:	
 12335                           
 12336                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12337  07D0  0020               	movlb	0	; select bank0
 12338  07D1  086F               	movf	_DimmerLights,w
 12339  07D2  3E08               	addlw	8
 12340  07D3  0086               	movwf	6
 12341  07D4  3001               	movlw	1	; select bank2/3
 12342  07D5  0087               	movwf	7
 12343  07D6  1E01               	btfss	1,4
 12344  07D7  0008               	return
 12345                           
 12346                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12347  07D8  0022               	movlb	2	; select bank2
 12348  07D9  18BE               	btfsc	_Dimmer^(0+256),1
 12349  07DA  0008               	return
 12350                           
 12351                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12352  07DB  0020               	movlb	0	; select bank0
 12353  07DC  086F               	movf	_DimmerLights,w
 12354  07DD  3E08               	addlw	8
 12355  07DE  0086               	movwf	6
 12356  07DF  3001               	movlw	1	; select bank2/3
 12357  07E0  0087               	movwf	7
 12358  07E1  1201               	bcf	1,4
 12359                           
 12360                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12361  07E2  086F               	movf	_DimmerLights,w
 12362  07E3  3E08               	addlw	8
 12363  07E4  0086               	movwf	6
 12364  07E5  3001               	movlw	1	; select bank2/3
 12365  07E6  0087               	movwf	7
 12366  07E7  1D81               	btfss	1,3
 12367  07E8  2FF8               	goto	l6905
 12368                           
 12369                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12370  07E9  01E2               	clrf	setDimmerLights_Adj@status
 12371  07EA  0AE2               	incf	setDimmerLights_Adj@status,f
 12372  07EB  0866               	movf	setDimmerLights_Main@lights,w
 12373  07EC  318B  230D  3187   	fcall	_setDimmerLights_Adj
 12374                           
 12375                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12376  07EF  3064               	movlw	100
 12377  07F0  0020               	movlb	0	; select bank0
 12378  07F1  00A9               	movwf	setBuz@time
 12379  07F2  3000               	movlw	0
 12380  07F3  00AA               	movwf	setBuz@time+1
 12381  07F4  3001               	movlw	1
 12382  07F5  3196  26EF         	fcall	_setBuz
 12383                           
 12384                           ;Dimmer_B1.c: 448: } else {
 12385  07F7  0008               	return
 12386  07F8                     l6905:	
 12387                           
 12388                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12389  07F8  0020               	movlb	0	; select bank0
 12390  07F9  01E2               	clrf	setDimmerLights_Adj@status
 12391  07FA  0866               	movf	setDimmerLights_Main@lights,w
 12392  07FB  318B  230D         	fcall	_setDimmerLights_Adj
 12393  07FD  0008               	return
 12394  07FE                     __end_of_setDimmerLights_Main:	
 12395                           
 12396                           	psect	text73
 12397  0B0D                     __ptext73:	
 12398 ;; *************** function _setDimmerLights_Adj *****************
 12399 ;; Defined at:
 12400 ;;		line 728 in file "../src/Dimmer_B1.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  lights          1    wreg     unsigned char 
 12403 ;;  status          1   66[BANK0 ] unsigned char 
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;  lights          1   69[BANK0 ] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;		None               void
 12408 ;; Registers used:
 12409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12415 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;Total ram usage:        4 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    8
 12422 ;; This function calls:
 12423 ;;		_DimmerLightsPointSelect
 12424 ;;		_getMain_All_Error_Status
 12425 ;;		_setPercentValue
 12426 ;;		_setRF_DimmerLights
 12427 ;;		_setTxData
 12428 ;; This function is called by:
 12429 ;;		_setDimmerLights_Main
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           
 12434                           ;psect for function _setDimmerLights_Adj
 12435  0B0D                     _setDimmerLights_Adj:	
 12436                           
 12437                           ;incstack = 0
 12438                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12439                           ;setDimmerLights_Adj@lights stored from wreg
 12440  0B0D  0020               	movlb	0	; select bank0
 12441  0B0E  00E5               	movwf	setDimmerLights_Adj@lights
 12442                           
 12443                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 12444  0B0F  0865               	movf	setDimmerLights_Adj@lights,w
 12445  0B10  319C  2499  318B   	fcall	_DimmerLightsPointSelect
 12446                           
 12447                           ;Dimmer_B1.c: 730: if (status == 1) {
 12448  0B13  0020               	movlb	0	; select bank0
 12449  0B14  0862               	movf	setDimmerLights_Adj@status,w
 12450  0B15  3A01               	xorlw	1
 12451  0B16  1D03               	skipz
 12452  0B17  2B23               	goto	l6483
 12453                           
 12454                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 12455  0B18  086F               	movf	_DimmerLights,w
 12456  0B19  0086               	movwf	6
 12457  0B1A  3001               	movlw	1	; select bank2/3
 12458  0B1B  0087               	movwf	7
 12459  0B1C  1581               	bsf	1,3
 12460                           
 12461                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 12462  0B1D  086F               	movf	_DimmerLights,w
 12463  0B1E  0086               	movwf	6
 12464  0B1F  3001               	movlw	1	; select bank2/3
 12465  0B20  0087               	movwf	7
 12466  0B21  1481               	bsf	1,1
 12467                           
 12468                           ;Dimmer_B1.c: 733: } else {
 12469  0B22  0008               	return
 12470  0B23                     l6483:	
 12471                           
 12472                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 12473  0B23  086F               	movf	_DimmerLights,w
 12474  0B24  0086               	movwf	6
 12475  0B25  3001               	movlw	1	; select bank2/3
 12476  0B26  0087               	movwf	7
 12477  0B27  1D81               	btfss	1,3
 12478  0B28  0008               	return
 12479                           
 12480                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 12481  0B29  086F               	movf	_DimmerLights,w
 12482  0B2A  0086               	movwf	6
 12483  0B2B  3001               	movlw	1	; select bank2/3
 12484  0B2C  0087               	movwf	7
 12485  0B2D  1081               	bcf	1,1
 12486                           
 12487                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 12488  0B2E  086F               	movf	_DimmerLights,w
 12489  0B2F  0086               	movwf	6
 12490  0B30  3001               	movlw	1	; select bank2/3
 12491  0B31  0087               	movwf	7
 12492  0B32  1181               	bcf	1,3
 12493                           
 12494                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12495  0B33  086F               	movf	_DimmerLights,w
 12496  0B34  3E04               	addlw	4
 12497  0B35  0086               	movwf	6
 12498  0B36  3001               	movlw	1	; select bank2/3
 12499  0B37  0087               	movwf	7
 12500  0B38  0801               	movf	1,w
 12501  0B39  00E3               	movwf	??_setDimmerLights_Adj
 12502  0B3A  086F               	movf	_DimmerLights,w
 12503  0B3B  3E05               	addlw	5
 12504  0B3C  0086               	movwf	6
 12505  0B3D  3001               	movlw	1	; select bank2/3
 12506  0B3E  0087               	movwf	7
 12507  0B3F  0863               	movf	??_setDimmerLights_Adj,w
 12508  0B40  0081               	movwf	1
 12509                           
 12510                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12511  0B41  086F               	movf	_DimmerLights,w
 12512  0B42  3E04               	addlw	4
 12513  0B43  0086               	movwf	6
 12514  0B44  3001               	movlw	1	; select bank2/3
 12515  0B45  0087               	movwf	7
 12516  0B46  0801               	movf	1,w
 12517  0B47  318A  2243  318B   	fcall	_setPercentValue
 12518  0B4A  0020               	movlb	0	; select bank0
 12519  0B4B  00E3               	movwf	??_setDimmerLights_Adj
 12520  0B4C  0865               	movf	setDimmerLights_Adj@lights,w
 12521  0B4D  3E14               	addlw	20
 12522  0B4E  076E               	addwf	_product,w
 12523  0B4F  00E4               	movwf	??_setDimmerLights_Adj+1
 12524  0B50  0864               	movf	??_setDimmerLights_Adj+1,w
 12525  0B51  0086               	movwf	6
 12526  0B52  3002               	movlw	2	; select bank4/5
 12527  0B53  0087               	movwf	7
 12528  0B54  0863               	movf	??_setDimmerLights_Adj,w
 12529  0B55  0081               	movwf	1
 12530                           
 12531                           ;Dimmer_B1.c: 748: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12532  0B56  3000               	movlw	0
 12533  0B57  3192  2287  318B   	fcall	_getMain_All_Error_Status
 12534  0B5A  3A00               	xorlw	0
 12535  0B5B  3000               	movlw	0
 12536  0B5C  1903               	skipnz
 12537  0B5D  3001               	movlw	1
 12538  0B5E  0020               	movlb	0	; select bank0
 12539  0B5F  00E3               	movwf	??_setDimmerLights_Adj
 12540  0B60  0DE3               	rlf	??_setDimmerLights_Adj,f
 12541  0B61  0022               	movlb	2	; select bank2
 12542  0B62  083E               	movf	_Dimmer^(0+256),w
 12543  0B63  0020               	movlb	0	; select bank0
 12544  0B64  0663               	xorwf	??_setDimmerLights_Adj,w
 12545  0B65  39FD               	andlw	-3
 12546  0B66  0663               	xorwf	??_setDimmerLights_Adj,w
 12547  0B67  0022               	movlb	2	; select bank2
 12548  0B68  00BE               	movwf	_Dimmer^(0+256)
 12549                           
 12550                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 12551  0B69  0020               	movlb	0	; select bank0
 12552  0B6A  01A0               	clrf	setRF_DimmerLights@on
 12553  0B6B  0AA0               	incf	setRF_DimmerLights@on,f
 12554  0B6C  0865               	movf	setDimmerLights_Adj@lights,w
 12555  0B6D  3197  2748  318B   	fcall	_setRF_DimmerLights
 12556                           
 12557                           ;Dimmer_B1.c: 752: setTxData();
 12558  0B70  3186  26E6         	fcall	_setTxData
 12559  0B72  0008               	return
 12560  0B73                     __end_of_setDimmerLights_Adj:	
 12561                           
 12562                           	psect	text74
 12563  0CE5                     __ptext74:	
 12564 ;; *************** function _setDimmerLights *****************
 12565 ;; Defined at:
 12566 ;;		line 623 in file "../src/Dimmer_B1.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  lights          1    wreg     unsigned char 
 12569 ;;  status          1   66[BANK0 ] unsigned char 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  lights          1   69[BANK0 ] unsigned char 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;		None               void
 12574 ;; Registers used:
 12575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;Total ram usage:        4 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    8
 12588 ;; This function calls:
 12589 ;;		_DimmerLightsPointSelect
 12590 ;;		_getMain_All_Error_Status
 12591 ;;		_setDimmerLights_Line
 12592 ;;		_setLED
 12593 ;;		_setPercentValue
 12594 ;;		_setRF_DimmerLights
 12595 ;;		_setTxData
 12596 ;; This function is called by:
 12597 ;;		_setDimmerLights_Main
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           
 12602                           ;psect for function _setDimmerLights
 12603  0CE5                     _setDimmerLights:	
 12604                           
 12605                           ;incstack = 0
 12606                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12607                           ;setDimmerLights@lights stored from wreg
 12608  0CE5  0020               	movlb	0	; select bank0
 12609  0CE6  00E5               	movwf	setDimmerLights@lights
 12610                           
 12611                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 12612  0CE7  0865               	movf	setDimmerLights@lights,w
 12613  0CE8  319C  2499  318C   	fcall	_DimmerLightsPointSelect
 12614                           
 12615                           ;Dimmer_B1.c: 627: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12616  0CEB  3000               	movlw	0
 12617  0CEC  3192  2287  318C   	fcall	_getMain_All_Error_Status
 12618  0CEF  3A00               	xorlw	0
 12619  0CF0  3000               	movlw	0
 12620  0CF1  1903               	skipnz
 12621  0CF2  3001               	movlw	1
 12622  0CF3  0020               	movlb	0	; select bank0
 12623  0CF4  00E3               	movwf	??_setDimmerLights
 12624  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12625  0CF6  0022               	movlb	2	; select bank2
 12626  0CF7  083E               	movf	_Dimmer^(0+256),w
 12627  0CF8  0020               	movlb	0	; select bank0
 12628  0CF9  0663               	xorwf	??_setDimmerLights,w
 12629  0CFA  39FD               	andlw	-3
 12630  0CFB  0663               	xorwf	??_setDimmerLights,w
 12631  0CFC  0022               	movlb	2	; select bank2
 12632  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12633                           
 12634                           ;Dimmer_B1.c: 631: if (status == 1) {
 12635  0CFE  0020               	movlb	0	; select bank0
 12636  0CFF  0862               	movf	setDimmerLights@status,w
 12637  0D00  3A01               	xorlw	1
 12638  0D01  1D03               	skipz
 12639  0D02  2D33               	goto	l6463
 12640                           
 12641                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 12642  0D03  086F               	movf	_DimmerLights,w
 12643  0D04  3E09               	addlw	9
 12644  0D05  0086               	movwf	6
 12645  0D06  3001               	movlw	1	; select bank2/3
 12646  0D07  0087               	movwf	7
 12647  0D08  1481               	bsf	1,1
 12648                           
 12649                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 12650  0D09  01A2               	clrf	setLED@command
 12651  0D0A  0865               	movf	setDimmerLights@lights,w
 12652  0D0B  3193  2322  318C   	fcall	_setLED
 12653                           
 12654                           ;Dimmer_B1.c: 634: ;;
 12655                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 12656  0D0E  0020               	movlb	0	; select bank0
 12657  0D0F  0865               	movf	setDimmerLights@lights,w
 12658  0D10  319C  24E7  318C   	fcall	_setDimmerLights_Line
 12659                           
 12660                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 12661  0D13  0020               	movlb	0	; select bank0
 12662  0D14  086F               	movf	_DimmerLights,w
 12663  0D15  0086               	movwf	6
 12664  0D16  3001               	movlw	1	; select bank2/3
 12665  0D17  0087               	movwf	7
 12666  0D18  1701               	bsf	1,6
 12667                           
 12668                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(90*0.8));
 12669  0D19  3048               	movlw	72
 12670  0D1A  00E3               	movwf	??_setDimmerLights
 12671  0D1B  086F               	movf	_DimmerLights,w
 12672  0D1C  3E04               	addlw	4
 12673  0D1D  0086               	movwf	6
 12674  0D1E  3001               	movlw	1	; select bank2/3
 12675  0D1F  0087               	movwf	7
 12676  0D20  0863               	movf	??_setDimmerLights,w
 12677  0D21  0081               	movwf	1
 12678                           
 12679                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(90*0.8)));
 12680  0D22  3048               	movlw	72
 12681  0D23  318A  2243  318C   	fcall	_setPercentValue
 12682  0D26  0020               	movlb	0	; select bank0
 12683  0D27  00E3               	movwf	??_setDimmerLights
 12684  0D28  0865               	movf	setDimmerLights@lights,w
 12685  0D29  3E14               	addlw	20
 12686  0D2A  076E               	addwf	_product,w
 12687  0D2B  00E4               	movwf	??_setDimmerLights+1
 12688  0D2C  0864               	movf	??_setDimmerLights+1,w
 12689  0D2D  0086               	movwf	6
 12690  0D2E  3002               	movlw	2	; select bank4/5
 12691  0D2F  0087               	movwf	7
 12692  0D30  0863               	movf	??_setDimmerLights,w
 12693  0D31  0081               	movwf	1
 12694  0D32  2D5A               	goto	l6475
 12695  0D33                     l6463:	
 12696                           ;Dimmer_B1.c: 654: } else {
 12697                           
 12698                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12699                           
 12700                           
 12701                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12702  0D33  086F               	movf	_DimmerLights,w
 12703  0D34  0086               	movwf	6
 12704  0D35  3001               	movlw	1	; select bank2/3
 12705  0D36  0087               	movwf	7
 12706  0D37  1301               	bcf	1,6
 12707                           
 12708                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12709  0D38  086F               	movf	_DimmerLights,w
 12710  0D39  3E09               	addlw	9
 12711  0D3A  0086               	movwf	6
 12712  0D3B  3001               	movlw	1	; select bank2/3
 12713  0D3C  0087               	movwf	7
 12714  0D3D  1081               	bcf	1,1
 12715                           
 12716                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12717  0D3E  01A2               	clrf	setLED@command
 12718  0D3F  0AA2               	incf	setLED@command,f
 12719  0D40  0865               	movf	setDimmerLights@lights,w
 12720  0D41  3193  2322  318C   	fcall	_setLED
 12721                           
 12722                           ;Dimmer_B1.c: 658: ;;
 12723                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 12724  0D44  0020               	movlb	0	; select bank0
 12725  0D45  086F               	movf	_DimmerLights,w
 12726  0D46  3E08               	addlw	8
 12727  0D47  0086               	movwf	6
 12728  0D48  3001               	movlw	1	; select bank2/3
 12729  0D49  0087               	movwf	7
 12730  0D4A  1781               	bsf	1,7
 12731                           
 12732                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 12733  0D4B  086F               	movf	_DimmerLights,w
 12734  0D4C  0086               	movwf	6
 12735  0D4D  3001               	movlw	1	; select bank2/3
 12736  0D4E  0087               	movwf	7
 12737  0D4F  1181               	bcf	1,3
 12738                           
 12739                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 12740  0D50  086F               	movf	_DimmerLights,w
 12741  0D51  0086               	movwf	6
 12742  0D52  3001               	movlw	1	; select bank2/3
 12743  0D53  0087               	movwf	7
 12744  0D54  1201               	bcf	1,4
 12745                           
 12746                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 12747  0D55  086F               	movf	_DimmerLights,w
 12748  0D56  0086               	movwf	6
 12749  0D57  3001               	movlw	1	; select bank2/3
 12750  0D58  0087               	movwf	7
 12751  0D59  1101               	bcf	1,2
 12752  0D5A                     l6475:	
 12753                           
 12754                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 12755  0D5A  3007               	movlw	7
 12756  0D5B  00E3               	movwf	??_setDimmerLights
 12757  0D5C  086F               	movf	_DimmerLights,w
 12758  0D5D  3E02               	addlw	2
 12759  0D5E  0086               	movwf	6
 12760  0D5F  3001               	movlw	1	; select bank2/3
 12761  0D60  0087               	movwf	7
 12762  0D61  0863               	movf	??_setDimmerLights,w
 12763  0D62  0081               	movwf	1
 12764                           
 12765                           ;Dimmer_B1.c: 673: }
 12766                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12767  0D63  0862               	movf	setDimmerLights@status,w
 12768  0D64  00E3               	movwf	??_setDimmerLights
 12769  0D65  0863               	movf	??_setDimmerLights,w
 12770  0D66  00A0               	movwf	setRF_DimmerLights@on
 12771  0D67  0865               	movf	setDimmerLights@lights,w
 12772  0D68  3197  2748  318C   	fcall	_setRF_DimmerLights
 12773                           
 12774                           ;Dimmer_B1.c: 675: setTxData();
 12775  0D6B  3186  26E6         	fcall	_setTxData
 12776  0D6D  0008               	return
 12777  0D6E                     __end_of_setDimmerLights:	
 12778                           
 12779                           	psect	text75
 12780  06E6                     __ptext75:	
 12781 ;; *************** function _setTxData *****************
 12782 ;; Defined at:
 12783 ;;		line 207 in file "../src/RF_Control_B1.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  i               1    0        unsigned char 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;		None               void
 12790 ;; Registers used:
 12791 ;;		wreg, fsr1l, fsr1h
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;Total ram usage:        1 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    5
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_setDimmerLights
 12808 ;;		_setDimmerLights_Adj
 12809 ;;		_getRxData
 12810 ;;		_setControl_Lights_Table
 12811 ;;		_setRFSW_Control
 12812 ;;		_setRFSW_AdjControl
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           
 12817                           ;psect for function _setTxData
 12818  06E6                     _setTxData:	
 12819                           
 12820                           ;RF_Control_B1.c: 208: char i;
 12821                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 12822                           
 12823                           ;incstack = 0
 12824                           ; Regs used in _setTxData: [wregfsr1]
 12825  06E6  0021               	movlb	1	; select bank1
 12826  06E7  1C3B               	btfss	_RF1^(0+128),0
 12827  06E8  0008               	return
 12828                           
 12829                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 12830  06E9  193B               	btfsc	_RF1^(0+128),2
 12831  06EA  0008               	return
 12832                           
 12833                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 12834  06EB  153B               	bsf	_RF1^(0+128),2
 12835                           
 12836                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 12837  06EC  3014               	movlw	20
 12838  06ED  00C2               	movwf	(_RF1^(0+128)+7)
 12839  06EE  3000               	movlw	0
 12840  06EF  00C3               	movwf	(_RF1^(0+128)+8)
 12841                           
 12842                           ;RF_Control_B1.c: 222: RF_Data[0] = 0x63;
 12843  06F0  3063               	movlw	99
 12844  06F1  0020               	movlb	0	; select bank0
 12845  06F2  00A0               	movwf	??_setTxData
 12846  06F3  0820               	movf	??_setTxData,w
 12847  06F4  0022               	movlb	2	; select bank2
 12848  06F5  00A0               	movwf	_RF_Data^(0+256)
 12849                           
 12850                           ;RF_Control_B1.c: 223: RF_Data[1] = 0x02;
 12851  06F6  3002               	movlw	2
 12852  06F7  0020               	movlb	0	; select bank0
 12853  06F8  00A0               	movwf	??_setTxData
 12854  06F9  0820               	movf	??_setTxData,w
 12855  06FA  0022               	movlb	2	; select bank2
 12856  06FB  00A1               	movwf	(_RF_Data^(0+256)+1)
 12857                           
 12858                           ;RF_Control_B1.c: 224: RF_Data[2] = product->Data[2];
 12859  06FC  0020               	movlb	0	; select bank0
 12860  06FD  086E               	movf	_product,w
 12861  06FE  0086               	movwf	6
 12862  06FF  3002               	movlw	2	; select bank4/5
 12863  0700  0087               	movwf	7
 12864  0701  3002               	movlw	2	; select bank4/5
 12865  0702  3F42               	moviw [2]fsr1
 12866  0703  0022               	movlb	2	; select bank2
 12867  0704  00A2               	movwf	(_RF_Data^(0+256)+2)
 12868                           
 12869                           ;RF_Control_B1.c: 225: RF_Data[3] = product->Data[3];
 12870  0705  0020               	movlb	0	; select bank0
 12871  0706  086E               	movf	_product,w
 12872  0707  0086               	movwf	6
 12873  0708  3002               	movlw	2	; select bank4/5
 12874  0709  0087               	movwf	7
 12875  070A  3002               	movlw	2	; select bank4/5
 12876  070B  3F43               	moviw [3]fsr1
 12877  070C  0022               	movlb	2	; select bank2
 12878  070D  00A3               	movwf	(_RF_Data^(0+256)+3)
 12879                           
 12880                           ;RF_Control_B1.c: 226: RF_Data[4] = product->Data[4];
 12881  070E  0020               	movlb	0	; select bank0
 12882  070F  086E               	movf	_product,w
 12883  0710  0086               	movwf	6
 12884  0711  3002               	movlw	2	; select bank4/5
 12885  0712  0087               	movwf	7
 12886  0713  3002               	movlw	2	; select bank4/5
 12887  0714  3F44               	moviw [4]fsr1
 12888  0715  0022               	movlb	2	; select bank2
 12889  0716  00A4               	movwf	(_RF_Data^(0+256)+4)
 12890                           
 12891                           ;RF_Control_B1.c: 227: RF_Data[5] = product->Data[5];
 12892  0717  0020               	movlb	0	; select bank0
 12893  0718  086E               	movf	_product,w
 12894  0719  0086               	movwf	6
 12895  071A  3002               	movlw	2	; select bank4/5
 12896  071B  0087               	movwf	7
 12897  071C  3002               	movlw	2	; select bank4/5
 12898  071D  3F45               	moviw [5]fsr1
 12899  071E  0022               	movlb	2	; select bank2
 12900  071F  00A5               	movwf	(_RF_Data^(0+256)+5)
 12901                           
 12902                           ;RF_Control_B1.c: 228: RF_Data[6] = product->Data[6];
 12903  0720  0020               	movlb	0	; select bank0
 12904  0721  086E               	movf	_product,w
 12905  0722  0086               	movwf	6
 12906  0723  3002               	movlw	2	; select bank4/5
 12907  0724  0087               	movwf	7
 12908  0725  3002               	movlw	2	; select bank4/5
 12909  0726  3F46               	moviw [6]fsr1
 12910  0727  0022               	movlb	2	; select bank2
 12911  0728  00A6               	movwf	(_RF_Data^(0+256)+6)
 12912                           
 12913                           ;RF_Control_B1.c: 229: RF_Data[7] = product->Data[7];
 12914  0729  0020               	movlb	0	; select bank0
 12915  072A  086E               	movf	_product,w
 12916  072B  0086               	movwf	6
 12917  072C  3002               	movlw	2	; select bank4/5
 12918  072D  0087               	movwf	7
 12919  072E  3002               	movlw	2	; select bank4/5
 12920  072F  3F47               	moviw [7]fsr1
 12921  0730  0022               	movlb	2	; select bank2
 12922  0731  00A7               	movwf	(_RF_Data^(0+256)+7)
 12923                           
 12924                           ;RF_Control_B1.c: 230: RF_Data[8] = product->Data[8];
 12925  0732  0020               	movlb	0	; select bank0
 12926  0733  086E               	movf	_product,w
 12927  0734  0086               	movwf	6
 12928  0735  3002               	movlw	2	; select bank4/5
 12929  0736  0087               	movwf	7
 12930  0737  3002               	movlw	2	; select bank4/5
 12931  0738  3F48               	moviw [8]fsr1
 12932  0739  0022               	movlb	2	; select bank2
 12933  073A  00A8               	movwf	(_RF_Data^(0+256)+8)
 12934                           
 12935                           ;RF_Control_B1.c: 231: RF_Data[9] = product->Data[9];
 12936  073B  0020               	movlb	0	; select bank0
 12937  073C  086E               	movf	_product,w
 12938  073D  0086               	movwf	6
 12939  073E  3002               	movlw	2	; select bank4/5
 12940  073F  0087               	movwf	7
 12941  0740  3002               	movlw	2	; select bank4/5
 12942  0741  3F49               	moviw [9]fsr1
 12943  0742  0022               	movlb	2	; select bank2
 12944  0743  00A9               	movwf	(_RF_Data^(0+256)+9)
 12945                           
 12946                           ;RF_Control_B1.c: 232: RF_Data[10] = product->Data[10];
 12947  0744  0020               	movlb	0	; select bank0
 12948  0745  086E               	movf	_product,w
 12949  0746  0086               	movwf	6
 12950  0747  3002               	movlw	2	; select bank4/5
 12951  0748  0087               	movwf	7
 12952  0749  3002               	movlw	2	; select bank4/5
 12953  074A  3F4A               	moviw [10]fsr1
 12954  074B  0022               	movlb	2	; select bank2
 12955  074C  00AA               	movwf	(_RF_Data^(0+256)+10)
 12956                           
 12957                           ;RF_Control_B1.c: 233: RF_Data[11] = product->Data[11];
 12958  074D  0020               	movlb	0	; select bank0
 12959  074E  086E               	movf	_product,w
 12960  074F  0086               	movwf	6
 12961  0750  3002               	movlw	2	; select bank4/5
 12962  0751  0087               	movwf	7
 12963  0752  3002               	movlw	2	; select bank4/5
 12964  0753  3F4B               	moviw [11]fsr1
 12965  0754  0022               	movlb	2	; select bank2
 12966  0755  00AB               	movwf	(_RF_Data^(0+256)+11)
 12967                           
 12968                           ;RF_Control_B1.c: 234: RF_Data[12] = product->Data[12];
 12969  0756  0020               	movlb	0	; select bank0
 12970  0757  086E               	movf	_product,w
 12971  0758  0086               	movwf	6
 12972  0759  3002               	movlw	2	; select bank4/5
 12973  075A  0087               	movwf	7
 12974  075B  3002               	movlw	2	; select bank4/5
 12975  075C  3F4C               	moviw [12]fsr1
 12976  075D  0022               	movlb	2	; select bank2
 12977  075E  00AC               	movwf	(_RF_Data^(0+256)+12)
 12978                           
 12979                           ;RF_Control_B1.c: 235: RF_Data[13] = product->Data[13];
 12980  075F  0020               	movlb	0	; select bank0
 12981  0760  086E               	movf	_product,w
 12982  0761  0086               	movwf	6
 12983  0762  3002               	movlw	2	; select bank4/5
 12984  0763  0087               	movwf	7
 12985  0764  3002               	movlw	2	; select bank4/5
 12986  0765  3F4D               	moviw [13]fsr1
 12987  0766  0022               	movlb	2	; select bank2
 12988  0767  00AD               	movwf	(_RF_Data^(0+256)+13)
 12989                           
 12990                           ;RF_Control_B1.c: 236: RF_Data[14] = product->Data[14];
 12991  0768  0020               	movlb	0	; select bank0
 12992  0769  086E               	movf	_product,w
 12993  076A  0086               	movwf	6
 12994  076B  3002               	movlw	2	; select bank4/5
 12995  076C  0087               	movwf	7
 12996  076D  3002               	movlw	2	; select bank4/5
 12997  076E  3F4E               	moviw [14]fsr1
 12998  076F  0022               	movlb	2	; select bank2
 12999  0770  00AE               	movwf	(_RF_Data^(0+256)+14)
 13000                           
 13001                           ;RF_Control_B1.c: 237: RF_Data[15] = product->Data[15];
 13002  0771  0020               	movlb	0	; select bank0
 13003  0772  086E               	movf	_product,w
 13004  0773  0086               	movwf	6
 13005  0774  3002               	movlw	2	; select bank4/5
 13006  0775  0087               	movwf	7
 13007  0776  3002               	movlw	2	; select bank4/5
 13008  0777  3F4F               	moviw [15]fsr1
 13009  0778  0022               	movlb	2	; select bank2
 13010  0779  00AF               	movwf	(_RF_Data^(0+256)+15)
 13011                           
 13012                           ;RF_Control_B1.c: 238: RF_Data[16] = product->Data[16];
 13013  077A  0020               	movlb	0	; select bank0
 13014  077B  086E               	movf	_product,w
 13015  077C  0086               	movwf	6
 13016  077D  3002               	movlw	2	; select bank4/5
 13017  077E  0087               	movwf	7
 13018  077F  3002               	movlw	2	; select bank4/5
 13019  0780  3F50               	moviw [16]fsr1
 13020  0781  0022               	movlb	2	; select bank2
 13021  0782  00B0               	movwf	(_RF_Data^(0+256)+16)
 13022                           
 13023                           ;RF_Control_B1.c: 239: RF_Data[17] = product->Data[17];
 13024  0783  0020               	movlb	0	; select bank0
 13025  0784  086E               	movf	_product,w
 13026  0785  0086               	movwf	6
 13027  0786  3002               	movlw	2	; select bank4/5
 13028  0787  0087               	movwf	7
 13029  0788  3002               	movlw	2	; select bank4/5
 13030  0789  3F51               	moviw [17]fsr1
 13031  078A  0022               	movlb	2	; select bank2
 13032  078B  00B1               	movwf	(_RF_Data^(0+256)+17)
 13033                           
 13034                           ;RF_Control_B1.c: 240: RF_Data[18] = product->Data[18];
 13035  078C  0020               	movlb	0	; select bank0
 13036  078D  086E               	movf	_product,w
 13037  078E  0086               	movwf	6
 13038  078F  3002               	movlw	2	; select bank4/5
 13039  0790  0087               	movwf	7
 13040  0791  3002               	movlw	2	; select bank4/5
 13041  0792  3F52               	moviw [18]fsr1
 13042  0793  0022               	movlb	2	; select bank2
 13043  0794  00B2               	movwf	(_RF_Data^(0+256)+18)
 13044                           
 13045                           ;RF_Control_B1.c: 241: RF_Data[19] = product->Data[19];
 13046  0795  0020               	movlb	0	; select bank0
 13047  0796  086E               	movf	_product,w
 13048  0797  0086               	movwf	6
 13049  0798  3002               	movlw	2	; select bank4/5
 13050  0799  0087               	movwf	7
 13051  079A  3002               	movlw	2	; select bank4/5
 13052  079B  3F53               	moviw [19]fsr1
 13053  079C  0022               	movlb	2	; select bank2
 13054  079D  00B3               	movwf	(_RF_Data^(0+256)+19)
 13055                           
 13056                           ;RF_Control_B1.c: 242: RF_Data[20] = 209;
 13057  079E  30D1               	movlw	209
 13058  079F  0020               	movlb	0	; select bank0
 13059  07A0  00A0               	movwf	??_setTxData
 13060  07A1  0820               	movf	??_setTxData,w
 13061  07A2  0022               	movlb	2	; select bank2
 13062  07A3  00B4               	movwf	(_RF_Data^(0+256)+20)
 13063  07A4  0008               	return
 13064  07A5                     __end_of_setTxData:	
 13065                           
 13066                           	psect	text76
 13067  1748                     __ptext76:	
 13068 ;; *************** function _setRF_DimmerLights *****************
 13069 ;; Defined at:
 13070 ;;		line 480 in file "../src/RF_Control_B1.c"
 13071 ;; Parameters:    Size  Location     Type
 13072 ;;  lights          1    wreg     unsigned char 
 13073 ;;  on              1    0[BANK0 ] unsigned char 
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;  lights          1    4[BANK0 ] unsigned char 
 13076 ;;  status          1    3[BANK0 ] unsigned char 
 13077 ;; Return value:  Size  Location     Type
 13078 ;;		None               void
 13079 ;; Registers used:
 13080 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13081 ;; Tracked objects:
 13082 ;;		On entry : 0/0
 13083 ;;		On exit  : 0/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13086 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;Total ram usage:        5 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:    5
 13093 ;; This function calls:
 13094 ;;		Nothing
 13095 ;; This function is called by:
 13096 ;;		_setDimmerLights
 13097 ;;		_setDimmerLights_Adj
 13098 ;;		_setRFSW_Control
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _setRF_DimmerLights
 13104  1748                     _setRF_DimmerLights:	
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13108                           ;setRF_DimmerLights@lights stored from wreg
 13109  1748  0020               	movlb	0	; select bank0
 13110  1749  00A4               	movwf	setRF_DimmerLights@lights
 13111                           
 13112                           ;RF_Control_B1.c: 481: char status = 1;
 13113  174A  01A3               	clrf	setRF_DimmerLights@status
 13114  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13115                           
 13116                           ;RF_Control_B1.c: 482: status <<= (lights - 1);
 13117  174C  0824               	movf	setRF_DimmerLights@lights,w
 13118  174D  3EFF               	addlw	-1
 13119  174E  0A89               	incf	9,f
 13120  174F  2F52               	goto	u4940
 13121  1750                     u4945:	
 13122  1750  1003               	clrc
 13123  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13124  1752                     u4940:	
 13125  1752  3EFF               	addlw	-1
 13126  1753  1D03               	skipz
 13127  1754  2F50               	goto	u4945
 13128                           
 13129                           ;RF_Control_B1.c: 483: product->Data[11]=lights;
 13130  1755  0824               	movf	setRF_DimmerLights@lights,w
 13131  1756  00A1               	movwf	??_setRF_DimmerLights
 13132  1757  086E               	movf	_product,w
 13133  1758  3E0B               	addlw	11
 13134  1759  0086               	movwf	6
 13135  175A  3002               	movlw	2	; select bank4/5
 13136  175B  0087               	movwf	7
 13137  175C  0821               	movf	??_setRF_DimmerLights,w
 13138  175D  0081               	movwf	1
 13139                           
 13140                           ;RF_Control_B1.c: 491: product->Data[9]=product->Data[20 + lights];
 13141  175E  0824               	movf	setRF_DimmerLights@lights,w
 13142  175F  3E14               	addlw	20
 13143  1760  076E               	addwf	_product,w
 13144  1761  00A1               	movwf	??_setRF_DimmerLights
 13145  1762  0821               	movf	??_setRF_DimmerLights,w
 13146  1763  0086               	movwf	6
 13147  1764  3002               	movlw	2	; select bank4/5
 13148  1765  0087               	movwf	7
 13149  1766  0801               	movf	1,w
 13150  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13151  1768  086E               	movf	_product,w
 13152  1769  3E09               	addlw	9
 13153  176A  0086               	movwf	6
 13154  176B  3002               	movlw	2	; select bank4/5
 13155  176C  0087               	movwf	7
 13156  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13157  176E  0081               	movwf	1
 13158                           
 13159                           ;RF_Control_B1.c: 492: product->Data[17]=product->Data[26 + lights];
 13160  176F  0824               	movf	setRF_DimmerLights@lights,w
 13161  1770  3E1A               	addlw	26
 13162  1771  076E               	addwf	_product,w
 13163  1772  00A1               	movwf	??_setRF_DimmerLights
 13164  1773  0821               	movf	??_setRF_DimmerLights,w
 13165  1774  0086               	movwf	6
 13166  1775  3002               	movlw	2	; select bank4/5
 13167  1776  0087               	movwf	7
 13168  1777  0801               	movf	1,w
 13169  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13170  1779  086E               	movf	_product,w
 13171  177A  3E11               	addlw	17
 13172  177B  0086               	movwf	6
 13173  177C  3002               	movlw	2	; select bank4/5
 13174  177D  0087               	movwf	7
 13175  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13176  177F  0081               	movwf	1
 13177                           
 13178                           ;RF_Control_B1.c: 493: if (on == 1) {
 13179  1780  0820               	movf	setRF_DimmerLights@on,w
 13180  1781  3A01               	xorlw	1
 13181  1782  1D03               	skipz
 13182  1783  2F94               	goto	l5947
 13183                           
 13184                           ;RF_Control_B1.c: 494: product->Data[15]=(product->Data[15] | status);
 13185  1784  086E               	movf	_product,w
 13186  1785  3E0F               	addlw	15
 13187  1786  0086               	movwf	6
 13188  1787  3002               	movlw	2	; select bank4/5
 13189  1788  0087               	movwf	7
 13190  1789  0801               	movf	1,w
 13191  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13192  178B  00A1               	movwf	??_setRF_DimmerLights
 13193  178C  086E               	movf	_product,w
 13194  178D  3E0F               	addlw	15
 13195  178E  0086               	movwf	6
 13196  178F  3002               	movlw	2	; select bank4/5
 13197  1790  0087               	movwf	7
 13198  1791  0821               	movf	??_setRF_DimmerLights,w
 13199  1792  0081               	movwf	1
 13200                           
 13201                           ;RF_Control_B1.c: 495: } else {
 13202  1793  0008               	return
 13203  1794                     l5947:	
 13204                           
 13205                           ;RF_Control_B1.c: 496: product->Data[15]=(product->Data[15]&(~status));
 13206  1794  086E               	movf	_product,w
 13207  1795  3E0F               	addlw	15
 13208  1796  0086               	movwf	6
 13209  1797  3002               	movlw	2	; select bank4/5
 13210  1798  0087               	movwf	7
 13211  1799  0923               	comf	setRF_DimmerLights@status,w
 13212  179A  0501               	andwf	1,w
 13213  179B  00A1               	movwf	??_setRF_DimmerLights
 13214  179C  086E               	movf	_product,w
 13215  179D  3E0F               	addlw	15
 13216  179E  0086               	movwf	6
 13217  179F  3002               	movlw	2	; select bank4/5
 13218  17A0  0087               	movwf	7
 13219  17A1  0821               	movf	??_setRF_DimmerLights,w
 13220  17A2  0081               	movwf	1
 13221  17A3  0008               	return
 13222  17A4                     __end_of_setRF_DimmerLights:	
 13223                           
 13224                           	psect	text77
 13225  0A43                     __ptext77:	
 13226 ;; *************** function _setPercentValue *****************
 13227 ;; Defined at:
 13228 ;;		line 886 in file "../src/Dimmer_B1.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  value           1    wreg     unsigned char 
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;  value           1   62[BANK0 ] unsigned char 
 13233 ;;  i               3   63[BANK0 ] float 
 13234 ;; Return value:  Size  Location     Type
 13235 ;;                  1    wreg      unsigned char 
 13236 ;; Registers used:
 13237 ;;		wreg, status,2, status,0, pclath, cstack
 13238 ;; Tracked objects:
 13239 ;;		On entry : 0/0
 13240 ;;		On exit  : 0/0
 13241 ;;		Unchanged: 0/0
 13242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;Total ram usage:        6 bytes
 13248 ;; Hardware stack levels used:    1
 13249 ;; Hardware stack levels required when called:    7
 13250 ;; This function calls:
 13251 ;;		___awtoft
 13252 ;;		___ftadd
 13253 ;;		___ftdiv
 13254 ;;		___ftneg
 13255 ;;		___fttol
 13256 ;; This function is called by:
 13257 ;;		_setDimmerLights
 13258 ;;		_setDimmerLights_Adj
 13259 ;;		_Flash_Memory_Initialization
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           
 13264                           ;psect for function _setPercentValue
 13265  0A43                     _setPercentValue:	
 13266                           
 13267                           ;incstack = 0
 13268                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13269                           ;setPercentValue@value stored from wreg
 13270  0A43  0020               	movlb	0	; select bank0
 13271  0A44  00DE               	movwf	setPercentValue@value
 13272                           
 13273                           ;Dimmer_B1.c: 894: float i = ((char)(90*0.8)) - ((char)(15*0.8));
 13274  0A45  3000               	movlw	0
 13275  0A46  00DF               	movwf	setPercentValue@i
 13276  0A47  3070               	movlw	112
 13277  0A48  00E0               	movwf	setPercentValue@i+1
 13278  0A49  3042               	movlw	66
 13279  0A4A  00E1               	movwf	setPercentValue@i+2
 13280                           
 13281                           ;Dimmer_B1.c: 895: i /= 100;
 13282  0A4B  3000               	movlw	0
 13283  0A4C  00AE               	movwf	___ftdiv@f2
 13284  0A4D  30C8               	movlw	200
 13285  0A4E  00AF               	movwf	___ftdiv@f2+1
 13286  0A4F  3042               	movlw	66
 13287  0A50  00B0               	movwf	___ftdiv@f2+2
 13288  0A51  085F               	movf	setPercentValue@i,w
 13289  0A52  00B1               	movwf	___ftdiv@f1
 13290  0A53  0860               	movf	setPercentValue@i+1,w
 13291  0A54  00B2               	movwf	___ftdiv@f1+1
 13292  0A55  0861               	movf	setPercentValue@i+2,w
 13293  0A56  00B3               	movwf	___ftdiv@f1+2
 13294  0A57  318E  26A3  318A   	fcall	___ftdiv
 13295  0A5A  0020               	movlb	0	; select bank0
 13296  0A5B  082E               	movf	?___ftdiv,w
 13297  0A5C  00DF               	movwf	setPercentValue@i
 13298  0A5D  082F               	movf	?___ftdiv+1,w
 13299  0A5E  00E0               	movwf	setPercentValue@i+1
 13300  0A5F  0830               	movf	?___ftdiv+2,w
 13301  0A60  00E1               	movwf	setPercentValue@i+2
 13302                           
 13303                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(90*0.8)) - value) / i));
 13304  0A61  085E               	movf	setPercentValue@value,w
 13305  0A62  00DC               	movwf	??_setPercentValue
 13306  0A63  01DD               	clrf	??_setPercentValue+1
 13307  0A64  09DC               	comf	??_setPercentValue,f
 13308  0A65  09DD               	comf	??_setPercentValue+1,f
 13309  0A66  0ADC               	incf	??_setPercentValue,f
 13310  0A67  1903               	skipnz
 13311  0A68  0ADD               	incf	??_setPercentValue+1,f
 13312  0A69  085C               	movf	??_setPercentValue,w
 13313  0A6A  3E48               	addlw	72
 13314  0A6B  00A8               	movwf	___awtoft@c
 13315  0A6C  3000               	movlw	0
 13316  0A6D  3D5D               	addwfc	??_setPercentValue+1,w
 13317  0A6E  00A9               	movwf	___awtoft@c+1
 13318  0A6F  3190  206D  318A   	fcall	___awtoft
 13319  0A72  0020               	movlb	0	; select bank0
 13320  0A73  0828               	movf	?___awtoft,w
 13321  0A74  00B1               	movwf	___ftdiv@f1
 13322  0A75  0829               	movf	?___awtoft+1,w
 13323  0A76  00B2               	movwf	___ftdiv@f1+1
 13324  0A77  082A               	movf	?___awtoft+2,w
 13325  0A78  00B3               	movwf	___ftdiv@f1+2
 13326  0A79  085F               	movf	setPercentValue@i,w
 13327  0A7A  00AE               	movwf	___ftdiv@f2
 13328  0A7B  0860               	movf	setPercentValue@i+1,w
 13329  0A7C  00AF               	movwf	___ftdiv@f2+1
 13330  0A7D  0861               	movf	setPercentValue@i+2,w
 13331  0A7E  00B0               	movwf	___ftdiv@f2+2
 13332  0A7F  318E  26A3  318A   	fcall	___ftdiv
 13333  0A82  0020               	movlb	0	; select bank0
 13334  0A83  082E               	movf	?___ftdiv,w
 13335  0A84  00BE               	movwf	___ftneg@f1
 13336  0A85  082F               	movf	?___ftdiv+1,w
 13337  0A86  00BF               	movwf	___ftneg@f1+1
 13338  0A87  0830               	movf	?___ftdiv+2,w
 13339  0A88  00C0               	movwf	___ftneg@f1+2
 13340  0A89  319C  245D  318A   	fcall	___ftneg
 13341  0A8C  0020               	movlb	0	; select bank0
 13342  0A8D  083E               	movf	?___ftneg,w
 13343  0A8E  00C4               	movwf	___ftadd@f2
 13344  0A8F  083F               	movf	?___ftneg+1,w
 13345  0A90  00C5               	movwf	___ftadd@f2+1
 13346  0A91  0840               	movf	?___ftneg+2,w
 13347  0A92  00C6               	movwf	___ftadd@f2+2
 13348  0A93  3000               	movlw	0
 13349  0A94  00C1               	movwf	___ftadd@f1
 13350  0A95  30C8               	movlw	200
 13351  0A96  00C2               	movwf	___ftadd@f1+1
 13352  0A97  3042               	movlw	66
 13353  0A98  00C3               	movwf	___ftadd@f1+2
 13354  0A99  3184  242D  318A   	fcall	___ftadd
 13355  0A9C  0020               	movlb	0	; select bank0
 13356  0A9D  0841               	movf	?___ftadd,w
 13357  0A9E  00CE               	movwf	___fttol@f1
 13358  0A9F  0842               	movf	?___ftadd+1,w
 13359  0AA0  00CF               	movwf	___fttol@f1+1
 13360  0AA1  0843               	movf	?___ftadd+2,w
 13361  0AA2  00D0               	movwf	___fttol@f1+2
 13362  0AA3  318C  245E         	fcall	___fttol
 13363  0AA5  0020               	movlb	0	; select bank0
 13364  0AA6  084E               	movf	?___fttol,w
 13365  0AA7  0008               	return
 13366  0AA8                     __end_of_setPercentValue:	
 13367                           
 13368                           	psect	text78
 13369  0C5E                     __ptext78:	
 13370 ;; *************** function ___fttol *****************
 13371 ;; Defined at:
 13372 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  f1              3   46[BANK0 ] float 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  lval            4   55[BANK0 ] unsigned long 
 13377 ;;  exp1            1   59[BANK0 ] unsigned char 
 13378 ;;  sign1           1   54[BANK0 ] unsigned char 
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  4   46[BANK0 ] long 
 13381 ;; Registers used:
 13382 ;;		wreg, status,2, status,0
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13388 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;Total ram usage:       14 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    5
 13395 ;; This function calls:
 13396 ;;		Nothing
 13397 ;; This function is called by:
 13398 ;;		_getPercentValue
 13399 ;;		_setPercentValue
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403                           
 13404                           ;psect for function ___fttol
 13405  0C5E                     ___fttol:	
 13406                           
 13407                           ;incstack = 0
 13408                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13409  0C5E  0020               	movlb	0	; select bank0
 13410  0C5F  084E               	movf	___fttol@f1,w
 13411  0C60  00D2               	movwf	??___fttol
 13412  0C61  084F               	movf	___fttol@f1+1,w
 13413  0C62  00D3               	movwf	??___fttol+1
 13414  0C63  0850               	movf	___fttol@f1+2,w
 13415  0C64  00D4               	movwf	??___fttol+2
 13416  0C65  1003               	clrc
 13417  0C66  0D53               	rlf	??___fttol+1,w
 13418  0C67  0D54               	rlf	??___fttol+2,w
 13419  0C68  00D5               	movwf	??___fttol+3
 13420  0C69  0855               	movf	??___fttol+3,w
 13421  0C6A  00DB               	movwf	___fttol@exp1
 13422  0C6B  08DB               	movf	___fttol@exp1,f
 13423  0C6C  1D03               	skipz
 13424  0C6D  2C77               	goto	l5689
 13425  0C6E  3000               	movlw	0
 13426  0C6F  00D1               	movwf	?___fttol+3
 13427  0C70  3000               	movlw	0
 13428  0C71  00D0               	movwf	?___fttol+2
 13429  0C72  3000               	movlw	0
 13430  0C73  00CF               	movwf	?___fttol+1
 13431  0C74  3000               	movlw	0
 13432  0C75  00CE               	movwf	?___fttol
 13433  0C76  0008               	return
 13434  0C77                     l5689:	
 13435  0C77  084E               	movf	___fttol@f1,w
 13436  0C78  00D2               	movwf	??___fttol
 13437  0C79  084F               	movf	___fttol@f1+1,w
 13438  0C7A  00D3               	movwf	??___fttol+1
 13439  0C7B  0850               	movf	___fttol@f1+2,w
 13440  0C7C  00D4               	movwf	??___fttol+2
 13441  0C7D  3017               	movlw	23
 13442  0C7E                     u4575:	
 13443  0C7E  36D4               	lsrf	??___fttol+2,f
 13444  0C7F  0CD3               	rrf	??___fttol+1,f
 13445  0C80  0CD2               	rrf	??___fttol,f
 13446  0C81  0B89               	decfsz	9,f
 13447  0C82  2C7E               	goto	u4575
 13448  0C83  0852               	movf	??___fttol,w
 13449  0C84  00D5               	movwf	??___fttol+3
 13450  0C85  0855               	movf	??___fttol+3,w
 13451  0C86  00D6               	movwf	___fttol@sign1
 13452  0C87  17CF               	bsf	___fttol@f1+1,7
 13453  0C88  30FF               	movlw	255
 13454  0C89  05CE               	andwf	___fttol@f1,f
 13455  0C8A  30FF               	movlw	255
 13456  0C8B  05CF               	andwf	___fttol@f1+1,f
 13457  0C8C  3000               	movlw	0
 13458  0C8D  05D0               	andwf	___fttol@f1+2,f
 13459  0C8E  084E               	movf	___fttol@f1,w
 13460  0C8F  00D7               	movwf	___fttol@lval
 13461  0C90  084F               	movf	___fttol@f1+1,w
 13462  0C91  00D8               	movwf	___fttol@lval+1
 13463  0C92  0850               	movf	___fttol@f1+2,w
 13464  0C93  00D9               	movwf	___fttol@lval+2
 13465  0C94  01DA               	clrf	___fttol@lval+3
 13466  0C95  308E               	movlw	142
 13467  0C96  02DB               	subwf	___fttol@exp1,f
 13468  0C97  1FDB               	btfss	___fttol@exp1,7
 13469  0C98  2CB5               	goto	l5709
 13470  0C99  085B               	movf	___fttol@exp1,w
 13471  0C9A  3A80               	xorlw	128
 13472  0C9B  3E8F               	addlw	143
 13473  0C9C  1803               	skipnc
 13474  0C9D  2CA7               	goto	l5707
 13475  0C9E  3000               	movlw	0
 13476  0C9F  00D1               	movwf	?___fttol+3
 13477  0CA0  3000               	movlw	0
 13478  0CA1  00D0               	movwf	?___fttol+2
 13479  0CA2  3000               	movlw	0
 13480  0CA3  00CF               	movwf	?___fttol+1
 13481  0CA4  3000               	movlw	0
 13482  0CA5  00CE               	movwf	?___fttol
 13483  0CA6  0008               	return
 13484  0CA7                     l5707:	
 13485  0CA7  3001               	movlw	1
 13486  0CA8                     u4605:	
 13487  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13488  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13489  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13490  0CAB  0CD7               	rrf	___fttol@lval,f
 13491  0CAC  0B89               	decfsz	9,f
 13492  0CAD  2CA8               	goto	u4605
 13493  0CAE  3001               	movlw	1
 13494  0CAF  00D2               	movwf	??___fttol
 13495  0CB0  0852               	movf	??___fttol,w
 13496  0CB1  07DB               	addwf	___fttol@exp1,f
 13497  0CB2  1903               	btfsc	3,2
 13498  0CB3  2CCE               	goto	l5719
 13499  0CB4  2CA7               	goto	l5707
 13500  0CB5                     l5709:	
 13501  0CB5  3018               	movlw	24
 13502  0CB6  025B               	subwf	___fttol@exp1,w
 13503  0CB7  1C03               	skipc
 13504  0CB8  2CCB               	goto	l5717
 13505  0CB9  3000               	movlw	0
 13506  0CBA  00D1               	movwf	?___fttol+3
 13507  0CBB  3000               	movlw	0
 13508  0CBC  00D0               	movwf	?___fttol+2
 13509  0CBD  3000               	movlw	0
 13510  0CBE  00CF               	movwf	?___fttol+1
 13511  0CBF  3000               	movlw	0
 13512  0CC0  00CE               	movwf	?___fttol
 13513  0CC1  0008               	return
 13514  0CC2                     l5715:	
 13515  0CC2  3001               	movlw	1
 13516  0CC3                     u4635:	
 13517  0CC3  35D7               	lslf	___fttol@lval,f
 13518  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13519  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13520  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13521  0CC7  0B89               	decfsz	9,f
 13522  0CC8  2CC3               	goto	u4635
 13523  0CC9  3001               	movlw	1
 13524  0CCA  02DB               	subwf	___fttol@exp1,f
 13525  0CCB                     l5717:	
 13526  0CCB  08DB               	movf	___fttol@exp1,f
 13527  0CCC  1D03               	skipz
 13528  0CCD  2CC2               	goto	l5715
 13529  0CCE                     l5719:	
 13530  0CCE  0856               	movf	___fttol@sign1,w
 13531  0CCF  1903               	btfsc	3,2
 13532  0CD0  2CDC               	goto	l5723
 13533  0CD1  09D7               	comf	___fttol@lval,f
 13534  0CD2  09D8               	comf	___fttol@lval+1,f
 13535  0CD3  09D9               	comf	___fttol@lval+2,f
 13536  0CD4  09DA               	comf	___fttol@lval+3,f
 13537  0CD5  0AD7               	incf	___fttol@lval,f
 13538  0CD6  1903               	skipnz
 13539  0CD7  0AD8               	incf	___fttol@lval+1,f
 13540  0CD8  1903               	skipnz
 13541  0CD9  0AD9               	incf	___fttol@lval+2,f
 13542  0CDA  1903               	skipnz
 13543  0CDB  0ADA               	incf	___fttol@lval+3,f
 13544  0CDC                     l5723:	
 13545  0CDC  085A               	movf	___fttol@lval+3,w
 13546  0CDD  00D1               	movwf	?___fttol+3
 13547  0CDE  0859               	movf	___fttol@lval+2,w
 13548  0CDF  00D0               	movwf	?___fttol+2
 13549  0CE0  0858               	movf	___fttol@lval+1,w
 13550  0CE1  00CF               	movwf	?___fttol+1
 13551  0CE2  0857               	movf	___fttol@lval,w
 13552  0CE3  00CE               	movwf	?___fttol
 13553  0CE4  0008               	return
 13554  0CE5                     __end_of___fttol:	
 13555                           
 13556                           	psect	text79
 13557  1C5D                     __ptext79:	
 13558 ;; *************** function ___ftneg *****************
 13559 ;; Defined at:
 13560 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  f1              3   30[BANK0 ] float 
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;		None
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  3   30[BANK0 ] float 
 13567 ;; Registers used:
 13568 ;;		wreg
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;Total ram usage:        3 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    5
 13581 ;; This function calls:
 13582 ;;		Nothing
 13583 ;; This function is called by:
 13584 ;;		_getPercentValue
 13585 ;;		_setPercentValue
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           
 13590                           ;psect for function ___ftneg
 13591  1C5D                     ___ftneg:	
 13592                           
 13593                           ;incstack = 0
 13594                           ; Regs used in ___ftneg: [wreg]
 13595  1C5D  0020               	movlb	0	; select bank0
 13596  1C5E  0840               	movf	___ftneg@f1+2,w
 13597  1C5F  043F               	iorwf	___ftneg@f1+1,w
 13598  1C60  043E               	iorwf	___ftneg@f1,w
 13599  1C61  1903               	skipnz
 13600  1C62  0008               	return
 13601  1C63  3080               	movlw	128
 13602  1C64  06C0               	xorwf	___ftneg@f1+2,f
 13603  1C65  0008               	return
 13604  1C66                     __end_of___ftneg:	
 13605                           
 13606                           	psect	text80
 13607  0EA3                     __ptext80:	
 13608 ;; *************** function ___ftdiv *****************
 13609 ;; Defined at:
 13610 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13611 ;; Parameters:    Size  Location     Type
 13612 ;;  f2              3   14[BANK0 ] float 
 13613 ;;  f1              3   17[BANK0 ] float 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;  f3              3   25[BANK0 ] float 
 13616 ;;  sign            1   29[BANK0 ] unsigned char 
 13617 ;;  exp             1   28[BANK0 ] unsigned char 
 13618 ;;  cntr            1   24[BANK0 ] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  3   14[BANK0 ] float 
 13621 ;; Registers used:
 13622 ;;		wreg, status,2, status,0, pclath, cstack
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13628 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;Total ram usage:       16 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    6
 13635 ;; This function calls:
 13636 ;;		___ftpack
 13637 ;; This function is called by:
 13638 ;;		_getPercentValue
 13639 ;;		_setPercentValue
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           
 13644                           ;psect for function ___ftdiv
 13645  0EA3                     ___ftdiv:	
 13646                           
 13647                           ;incstack = 0
 13648                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13649  0EA3  0020               	movlb	0	; select bank0
 13650  0EA4  0831               	movf	___ftdiv@f1,w
 13651  0EA5  00B4               	movwf	??___ftdiv
 13652  0EA6  0832               	movf	___ftdiv@f1+1,w
 13653  0EA7  00B5               	movwf	??___ftdiv+1
 13654  0EA8  0833               	movf	___ftdiv@f1+2,w
 13655  0EA9  00B6               	movwf	??___ftdiv+2
 13656  0EAA  1003               	clrc
 13657  0EAB  0D35               	rlf	??___ftdiv+1,w
 13658  0EAC  0D36               	rlf	??___ftdiv+2,w
 13659  0EAD  00B7               	movwf	??___ftdiv+3
 13660  0EAE  0837               	movf	??___ftdiv+3,w
 13661  0EAF  00BC               	movwf	___ftdiv@exp
 13662  0EB0  08BC               	movf	___ftdiv@exp,f
 13663  0EB1  1D03               	skipz
 13664  0EB2  2EBA               	goto	l5589
 13665  0EB3  3000               	movlw	0
 13666  0EB4  00AE               	movwf	?___ftdiv
 13667  0EB5  3000               	movlw	0
 13668  0EB6  00AF               	movwf	?___ftdiv+1
 13669  0EB7  3000               	movlw	0
 13670  0EB8  00B0               	movwf	?___ftdiv+2
 13671  0EB9  0008               	return
 13672  0EBA                     l5589:	
 13673  0EBA  082E               	movf	___ftdiv@f2,w
 13674  0EBB  00B4               	movwf	??___ftdiv
 13675  0EBC  082F               	movf	___ftdiv@f2+1,w
 13676  0EBD  00B5               	movwf	??___ftdiv+1
 13677  0EBE  0830               	movf	___ftdiv@f2+2,w
 13678  0EBF  00B6               	movwf	??___ftdiv+2
 13679  0EC0  1003               	clrc
 13680  0EC1  0D35               	rlf	??___ftdiv+1,w
 13681  0EC2  0D36               	rlf	??___ftdiv+2,w
 13682  0EC3  00B7               	movwf	??___ftdiv+3
 13683  0EC4  0837               	movf	??___ftdiv+3,w
 13684  0EC5  00BD               	movwf	___ftdiv@sign
 13685  0EC6  08BD               	movf	___ftdiv@sign,f
 13686  0EC7  1D03               	skipz
 13687  0EC8  2ED0               	goto	l5595
 13688  0EC9  3000               	movlw	0
 13689  0ECA  00AE               	movwf	?___ftdiv
 13690  0ECB  3000               	movlw	0
 13691  0ECC  00AF               	movwf	?___ftdiv+1
 13692  0ECD  3000               	movlw	0
 13693  0ECE  00B0               	movwf	?___ftdiv+2
 13694  0ECF  0008               	return
 13695  0ED0                     l5595:	
 13696  0ED0  3000               	movlw	0
 13697  0ED1  00B9               	movwf	___ftdiv@f3
 13698  0ED2  3000               	movlw	0
 13699  0ED3  00BA               	movwf	___ftdiv@f3+1
 13700  0ED4  3000               	movlw	0
 13701  0ED5  00BB               	movwf	___ftdiv@f3+2
 13702  0ED6  3089               	movlw	137
 13703  0ED7  073D               	addwf	___ftdiv@sign,w
 13704  0ED8  00B4               	movwf	??___ftdiv
 13705  0ED9  0834               	movf	??___ftdiv,w
 13706  0EDA  02BC               	subwf	___ftdiv@exp,f
 13707  0EDB  0831               	movf	___ftdiv@f1,w
 13708  0EDC  00B4               	movwf	??___ftdiv
 13709  0EDD  0832               	movf	___ftdiv@f1+1,w
 13710  0EDE  00B5               	movwf	??___ftdiv+1
 13711  0EDF  0833               	movf	___ftdiv@f1+2,w
 13712  0EE0  00B6               	movwf	??___ftdiv+2
 13713  0EE1  3010               	movlw	16
 13714  0EE2                     u4375:	
 13715  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13716  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13717  0EE4  0CB4               	rrf	??___ftdiv,f
 13718  0EE5  0B89               	decfsz	9,f
 13719  0EE6  2EE2               	goto	u4375
 13720  0EE7  0834               	movf	??___ftdiv,w
 13721  0EE8  00B7               	movwf	??___ftdiv+3
 13722  0EE9  0837               	movf	??___ftdiv+3,w
 13723  0EEA  00BD               	movwf	___ftdiv@sign
 13724  0EEB  082E               	movf	___ftdiv@f2,w
 13725  0EEC  00B4               	movwf	??___ftdiv
 13726  0EED  082F               	movf	___ftdiv@f2+1,w
 13727  0EEE  00B5               	movwf	??___ftdiv+1
 13728  0EEF  0830               	movf	___ftdiv@f2+2,w
 13729  0EF0  00B6               	movwf	??___ftdiv+2
 13730  0EF1  3010               	movlw	16
 13731  0EF2                     u4385:	
 13732  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13733  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13734  0EF4  0CB4               	rrf	??___ftdiv,f
 13735  0EF5  0B89               	decfsz	9,f
 13736  0EF6  2EF2               	goto	u4385
 13737  0EF7  0834               	movf	??___ftdiv,w
 13738  0EF8  00B7               	movwf	??___ftdiv+3
 13739  0EF9  0837               	movf	??___ftdiv+3,w
 13740  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13741  0EFB  3080               	movlw	128
 13742  0EFC  00B4               	movwf	??___ftdiv
 13743  0EFD  0834               	movf	??___ftdiv,w
 13744  0EFE  05BD               	andwf	___ftdiv@sign,f
 13745  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13746  0F00  30FF               	movlw	255
 13747  0F01  05B1               	andwf	___ftdiv@f1,f
 13748  0F02  30FF               	movlw	255
 13749  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13750  0F04  3000               	movlw	0
 13751  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13752  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13753  0F07  30FF               	movlw	255
 13754  0F08  05AE               	andwf	___ftdiv@f2,f
 13755  0F09  30FF               	movlw	255
 13756  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13757  0F0B  3000               	movlw	0
 13758  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13759  0F0D  3018               	movlw	24
 13760  0F0E  00B4               	movwf	??___ftdiv
 13761  0F0F  0834               	movf	??___ftdiv,w
 13762  0F10  00B8               	movwf	___ftdiv@cntr
 13763  0F11                     l5609:	
 13764  0F11  3001               	movlw	1
 13765  0F12                     u4395:	
 13766  0F12  35B9               	lslf	___ftdiv@f3,f
 13767  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13768  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13769  0F15  0B89               	decfsz	9,f
 13770  0F16  2F12               	goto	u4395
 13771  0F17  0830               	movf	___ftdiv@f2+2,w
 13772  0F18  0233               	subwf	___ftdiv@f1+2,w
 13773  0F19  1D03               	skipz
 13774  0F1A  2F21               	goto	u4405
 13775  0F1B  082F               	movf	___ftdiv@f2+1,w
 13776  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13777  0F1D  1D03               	skipz
 13778  0F1E  2F21               	goto	u4405
 13779  0F1F  082E               	movf	___ftdiv@f2,w
 13780  0F20  0231               	subwf	___ftdiv@f1,w
 13781  0F21                     u4405:	
 13782  0F21  1C03               	skipc
 13783  0F22  2F2A               	goto	l5617
 13784  0F23  082E               	movf	___ftdiv@f2,w
 13785  0F24  02B1               	subwf	___ftdiv@f1,f
 13786  0F25  082F               	movf	___ftdiv@f2+1,w
 13787  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13788  0F27  0830               	movf	___ftdiv@f2+2,w
 13789  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13790  0F29  1439               	bsf	___ftdiv@f3,0
 13791  0F2A                     l5617:	
 13792  0F2A  3001               	movlw	1
 13793  0F2B                     u4415:	
 13794  0F2B  35B1               	lslf	___ftdiv@f1,f
 13795  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13796  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13797  0F2E  0B89               	decfsz	9,f
 13798  0F2F  2F2B               	goto	u4415
 13799  0F30  3001               	movlw	1
 13800  0F31  02B8               	subwf	___ftdiv@cntr,f
 13801  0F32  1D03               	btfss	3,2
 13802  0F33  2F11               	goto	l5609
 13803  0F34  0839               	movf	___ftdiv@f3,w
 13804  0F35  00A0               	movwf	___ftpack@arg
 13805  0F36  083A               	movf	___ftdiv@f3+1,w
 13806  0F37  00A1               	movwf	___ftpack@arg+1
 13807  0F38  083B               	movf	___ftdiv@f3+2,w
 13808  0F39  00A2               	movwf	___ftpack@arg+2
 13809  0F3A  083C               	movf	___ftdiv@exp,w
 13810  0F3B  00B4               	movwf	??___ftdiv
 13811  0F3C  0834               	movf	??___ftdiv,w
 13812  0F3D  00A3               	movwf	___ftpack@exp
 13813  0F3E  083D               	movf	___ftdiv@sign,w
 13814  0F3F  00B5               	movwf	??___ftdiv+1
 13815  0F40  0835               	movf	??___ftdiv+1,w
 13816  0F41  00A4               	movwf	___ftpack@sign
 13817  0F42  3189  2181         	fcall	___ftpack
 13818  0F44  0020               	movlb	0	; select bank0
 13819  0F45  0820               	movf	?___ftpack,w
 13820  0F46  00AE               	movwf	?___ftdiv
 13821  0F47  0821               	movf	?___ftpack+1,w
 13822  0F48  00AF               	movwf	?___ftdiv+1
 13823  0F49  0822               	movf	?___ftpack+2,w
 13824  0F4A  00B0               	movwf	?___ftdiv+2
 13825  0F4B  0008               	return
 13826  0F4C                     __end_of___ftdiv:	
 13827                           
 13828                           	psect	text81
 13829  042D                     __ptext81:	
 13830 ;; *************** function ___ftadd *****************
 13831 ;; Defined at:
 13832 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  f1              3   33[BANK0 ] float 
 13835 ;;  f2              3   36[BANK0 ] float 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  exp1            1   45[BANK0 ] unsigned char 
 13838 ;;  exp2            1   44[BANK0 ] unsigned char 
 13839 ;;  sign            1   43[BANK0 ] unsigned char 
 13840 ;; Return value:  Size  Location     Type
 13841 ;;                  3   33[BANK0 ] float 
 13842 ;; Registers used:
 13843 ;;		wreg, status,2, status,0, pclath, cstack
 13844 ;; Tracked objects:
 13845 ;;		On entry : 0/0
 13846 ;;		On exit  : 0/0
 13847 ;;		Unchanged: 0/0
 13848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13849 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;Total ram usage:       13 bytes
 13854 ;; Hardware stack levels used:    1
 13855 ;; Hardware stack levels required when called:    6
 13856 ;; This function calls:
 13857 ;;		___ftpack
 13858 ;; This function is called by:
 13859 ;;		_getPercentValue
 13860 ;;		_setPercentValue
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           
 13865                           ;psect for function ___ftadd
 13866  042D                     ___ftadd:	
 13867                           
 13868                           ;incstack = 0
 13869                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13870  042D  0020               	movlb	0	; select bank0
 13871  042E  0841               	movf	___ftadd@f1,w
 13872  042F  00C7               	movwf	??___ftadd
 13873  0430  0842               	movf	___ftadd@f1+1,w
 13874  0431  00C8               	movwf	??___ftadd+1
 13875  0432  0843               	movf	___ftadd@f1+2,w
 13876  0433  00C9               	movwf	??___ftadd+2
 13877  0434  1003               	clrc
 13878  0435  0D48               	rlf	??___ftadd+1,w
 13879  0436  0D49               	rlf	??___ftadd+2,w
 13880  0437  00CA               	movwf	??___ftadd+3
 13881  0438  084A               	movf	??___ftadd+3,w
 13882  0439  00CD               	movwf	___ftadd@exp1
 13883  043A  0844               	movf	___ftadd@f2,w
 13884  043B  00C7               	movwf	??___ftadd
 13885  043C  0845               	movf	___ftadd@f2+1,w
 13886  043D  00C8               	movwf	??___ftadd+1
 13887  043E  0846               	movf	___ftadd@f2+2,w
 13888  043F  00C9               	movwf	??___ftadd+2
 13889  0440  1003               	clrc
 13890  0441  0D48               	rlf	??___ftadd+1,w
 13891  0442  0D49               	rlf	??___ftadd+2,w
 13892  0443  00CA               	movwf	??___ftadd+3
 13893  0444  084A               	movf	??___ftadd+3,w
 13894  0445  00CC               	movwf	___ftadd@exp2
 13895  0446  084D               	movf	___ftadd@exp1,w
 13896  0447  1903               	btfsc	3,2
 13897  0448  2C55               	goto	l5519
 13898  0449  084C               	movf	___ftadd@exp2,w
 13899  044A  024D               	subwf	___ftadd@exp1,w
 13900  044B  1803               	skipnc
 13901  044C  2C5C               	goto	l5523
 13902  044D  034D               	decf	___ftadd@exp1,w
 13903  044E  3AFF               	xorlw	255
 13904  044F  074C               	addwf	___ftadd@exp2,w
 13905  0450  00C7               	movwf	??___ftadd
 13906  0451  3019               	movlw	25
 13907  0452  0247               	subwf	??___ftadd,w
 13908  0453  1C03               	skipc
 13909  0454  2C5C               	goto	l5523
 13910  0455                     l5519:	
 13911  0455  0844               	movf	___ftadd@f2,w
 13912  0456  00C1               	movwf	?___ftadd
 13913  0457  0845               	movf	___ftadd@f2+1,w
 13914  0458  00C2               	movwf	?___ftadd+1
 13915  0459  0846               	movf	___ftadd@f2+2,w
 13916  045A  00C3               	movwf	?___ftadd+2
 13917  045B  0008               	return
 13918  045C                     l5523:	
 13919  045C  084C               	movf	___ftadd@exp2,w
 13920  045D  1903               	btfsc	3,2
 13921  045E  0008               	return
 13922  045F  084D               	movf	___ftadd@exp1,w
 13923  0460  024C               	subwf	___ftadd@exp2,w
 13924  0461  1803               	skipnc
 13925  0462  2C6B               	goto	l5529
 13926  0463  034C               	decf	___ftadd@exp2,w
 13927  0464  3AFF               	xorlw	255
 13928  0465  074D               	addwf	___ftadd@exp1,w
 13929  0466  00C7               	movwf	??___ftadd
 13930  0467  3019               	movlw	25
 13931  0468  0247               	subwf	??___ftadd,w
 13932  0469  1803               	btfsc	3,0
 13933  046A  0008               	return
 13934  046B                     l5529:	
 13935  046B  3006               	movlw	6
 13936  046C  00C7               	movwf	??___ftadd
 13937  046D  0847               	movf	??___ftadd,w
 13938  046E  00CB               	movwf	___ftadd@sign
 13939  046F  1BC3               	btfsc	___ftadd@f1+2,7
 13940  0470  17CB               	bsf	___ftadd@sign,7
 13941  0471  1BC6               	btfsc	___ftadd@f2+2,7
 13942  0472  174B               	bsf	___ftadd@sign,6
 13943  0473  17C2               	bsf	___ftadd@f1+1,7
 13944  0474  30FF               	movlw	255
 13945  0475  05C1               	andwf	___ftadd@f1,f
 13946  0476  30FF               	movlw	255
 13947  0477  05C2               	andwf	___ftadd@f1+1,f
 13948  0478  3000               	movlw	0
 13949  0479  05C3               	andwf	___ftadd@f1+2,f
 13950  047A  17C5               	bsf	___ftadd@f2+1,7
 13951  047B  30FF               	movlw	255
 13952  047C  05C4               	andwf	___ftadd@f2,f
 13953  047D  30FF               	movlw	255
 13954  047E  05C5               	andwf	___ftadd@f2+1,f
 13955  047F  3000               	movlw	0
 13956  0480  05C6               	andwf	___ftadd@f2+2,f
 13957  0481  084C               	movf	___ftadd@exp2,w
 13958  0482  024D               	subwf	___ftadd@exp1,w
 13959  0483  1803               	skipnc
 13960  0484  2CA7               	goto	l5551
 13961  0485                     l5541:	
 13962  0485  3001               	movlw	1
 13963  0486                     u4215:	
 13964  0486  35C4               	lslf	___ftadd@f2,f
 13965  0487  0DC5               	rlf	___ftadd@f2+1,f
 13966  0488  0DC6               	rlf	___ftadd@f2+2,f
 13967  0489  0B89               	decfsz	9,f
 13968  048A  2C86               	goto	u4215
 13969  048B  3001               	movlw	1
 13970  048C  02CC               	subwf	___ftadd@exp2,f
 13971  048D  084C               	movf	___ftadd@exp2,w
 13972  048E  064D               	xorwf	___ftadd@exp1,w
 13973  048F  1903               	skipnz
 13974  0490  2CA2               	goto	l5549
 13975  0491  3001               	movlw	1
 13976  0492  02CB               	subwf	___ftadd@sign,f
 13977  0493  084B               	movf	___ftadd@sign,w
 13978  0494  3907               	andlw	7
 13979  0495  1903               	btfsc	3,2
 13980  0496  2CA2               	goto	l5549
 13981  0497  2C85               	goto	l5541
 13982  0498                     l5547:	
 13983  0498  3001               	movlw	1
 13984  0499                     u4245:	
 13985  0499  36C3               	lsrf	___ftadd@f1+2,f
 13986  049A  0CC2               	rrf	___ftadd@f1+1,f
 13987  049B  0CC1               	rrf	___ftadd@f1,f
 13988  049C  0B89               	decfsz	9,f
 13989  049D  2C99               	goto	u4245
 13990  049E  3001               	movlw	1
 13991  049F  00C7               	movwf	??___ftadd
 13992  04A0  0847               	movf	??___ftadd,w
 13993  04A1  07CD               	addwf	___ftadd@exp1,f
 13994  04A2                     l5549:	
 13995  04A2  084D               	movf	___ftadd@exp1,w
 13996  04A3  064C               	xorwf	___ftadd@exp2,w
 13997  04A4  1903               	btfsc	3,2
 13998  04A5  2CCC               	goto	l2758
 13999  04A6  2C98               	goto	l5547
 14000  04A7                     l5551:	
 14001  04A7  084D               	movf	___ftadd@exp1,w
 14002  04A8  024C               	subwf	___ftadd@exp2,w
 14003  04A9  1803               	skipnc
 14004  04AA  2CCC               	goto	l2758
 14005  04AB                     l5553:	
 14006  04AB  3001               	movlw	1
 14007  04AC                     u4275:	
 14008  04AC  35C1               	lslf	___ftadd@f1,f
 14009  04AD  0DC2               	rlf	___ftadd@f1+1,f
 14010  04AE  0DC3               	rlf	___ftadd@f1+2,f
 14011  04AF  0B89               	decfsz	9,f
 14012  04B0  2CAC               	goto	u4275
 14013  04B1  3001               	movlw	1
 14014  04B2  02CD               	subwf	___ftadd@exp1,f
 14015  04B3  084C               	movf	___ftadd@exp2,w
 14016  04B4  064D               	xorwf	___ftadd@exp1,w
 14017  04B5  1903               	skipnz
 14018  04B6  2CC8               	goto	l5561
 14019  04B7  3001               	movlw	1
 14020  04B8  02CB               	subwf	___ftadd@sign,f
 14021  04B9  084B               	movf	___ftadd@sign,w
 14022  04BA  3907               	andlw	7
 14023  04BB  1903               	btfsc	3,2
 14024  04BC  2CC8               	goto	l5561
 14025  04BD  2CAB               	goto	l5553
 14026  04BE                     l5559:	
 14027  04BE  3001               	movlw	1
 14028  04BF                     u4305:	
 14029  04BF  36C6               	lsrf	___ftadd@f2+2,f
 14030  04C0  0CC5               	rrf	___ftadd@f2+1,f
 14031  04C1  0CC4               	rrf	___ftadd@f2,f
 14032  04C2  0B89               	decfsz	9,f
 14033  04C3  2CBF               	goto	u4305
 14034  04C4  3001               	movlw	1
 14035  04C5  00C7               	movwf	??___ftadd
 14036  04C6  0847               	movf	??___ftadd,w
 14037  04C7  07CC               	addwf	___ftadd@exp2,f
 14038  04C8                     l5561:	
 14039  04C8  084D               	movf	___ftadd@exp1,w
 14040  04C9  064C               	xorwf	___ftadd@exp2,w
 14041  04CA  1D03               	skipz
 14042  04CB  2CBE               	goto	l5559
 14043  04CC                     l2758:	
 14044  04CC  1FCB               	btfss	___ftadd@sign,7
 14045  04CD  2CDE               	goto	l5565
 14046  04CE  30FF               	movlw	255
 14047  04CF  06C1               	xorwf	___ftadd@f1,f
 14048  04D0  30FF               	movlw	255
 14049  04D1  06C2               	xorwf	___ftadd@f1+1,f
 14050  04D2  30FF               	movlw	255
 14051  04D3  06C3               	xorwf	___ftadd@f1+2,f
 14052  04D4  3001               	movlw	1
 14053  04D5  07C1               	addwf	___ftadd@f1,f
 14054  04D6  3000               	movlw	0
 14055  04D7  1803               	skipnc
 14056  04D8  3001               	movlw	1
 14057  04D9  07C2               	addwf	___ftadd@f1+1,f
 14058  04DA  3000               	movlw	0
 14059  04DB  1803               	skipnc
 14060  04DC  3001               	movlw	1
 14061  04DD  07C3               	addwf	___ftadd@f1+2,f
 14062  04DE                     l5565:	
 14063  04DE  1F4B               	btfss	___ftadd@sign,6
 14064  04DF  2CF0               	goto	l5569
 14065  04E0  30FF               	movlw	255
 14066  04E1  06C4               	xorwf	___ftadd@f2,f
 14067  04E2  30FF               	movlw	255
 14068  04E3  06C5               	xorwf	___ftadd@f2+1,f
 14069  04E4  30FF               	movlw	255
 14070  04E5  06C6               	xorwf	___ftadd@f2+2,f
 14071  04E6  3001               	movlw	1
 14072  04E7  07C4               	addwf	___ftadd@f2,f
 14073  04E8  3000               	movlw	0
 14074  04E9  1803               	skipnc
 14075  04EA  3001               	movlw	1
 14076  04EB  07C5               	addwf	___ftadd@f2+1,f
 14077  04EC  3000               	movlw	0
 14078  04ED  1803               	skipnc
 14079  04EE  3001               	movlw	1
 14080  04EF  07C6               	addwf	___ftadd@f2+2,f
 14081  04F0                     l5569:	
 14082  04F0  01CB               	clrf	___ftadd@sign
 14083  04F1  0841               	movf	___ftadd@f1,w
 14084  04F2  07C4               	addwf	___ftadd@f2,f
 14085  04F3  0842               	movf	___ftadd@f1+1,w
 14086  04F4  3DC5               	addwfc	___ftadd@f2+1,f
 14087  04F5  0843               	movf	___ftadd@f1+2,w
 14088  04F6  3DC6               	addwfc	___ftadd@f2+2,f
 14089  04F7  1FC6               	btfss	___ftadd@f2+2,7
 14090  04F8  2D0B               	goto	l5579
 14091  04F9  30FF               	movlw	255
 14092  04FA  06C4               	xorwf	___ftadd@f2,f
 14093  04FB  30FF               	movlw	255
 14094  04FC  06C5               	xorwf	___ftadd@f2+1,f
 14095  04FD  30FF               	movlw	255
 14096  04FE  06C6               	xorwf	___ftadd@f2+2,f
 14097  04FF  3001               	movlw	1
 14098  0500  07C4               	addwf	___ftadd@f2,f
 14099  0501  3000               	movlw	0
 14100  0502  1803               	skipnc
 14101  0503  3001               	movlw	1
 14102  0504  07C5               	addwf	___ftadd@f2+1,f
 14103  0505  3000               	movlw	0
 14104  0506  1803               	skipnc
 14105  0507  3001               	movlw	1
 14106  0508  07C6               	addwf	___ftadd@f2+2,f
 14107  0509  01CB               	clrf	___ftadd@sign
 14108  050A  0ACB               	incf	___ftadd@sign,f
 14109  050B                     l5579:	
 14110  050B  0844               	movf	___ftadd@f2,w
 14111  050C  00A0               	movwf	___ftpack@arg
 14112  050D  0845               	movf	___ftadd@f2+1,w
 14113  050E  00A1               	movwf	___ftpack@arg+1
 14114  050F  0846               	movf	___ftadd@f2+2,w
 14115  0510  00A2               	movwf	___ftpack@arg+2
 14116  0511  084D               	movf	___ftadd@exp1,w
 14117  0512  00C7               	movwf	??___ftadd
 14118  0513  0847               	movf	??___ftadd,w
 14119  0514  00A3               	movwf	___ftpack@exp
 14120  0515  084B               	movf	___ftadd@sign,w
 14121  0516  00C8               	movwf	??___ftadd+1
 14122  0517  0848               	movf	??___ftadd+1,w
 14123  0518  00A4               	movwf	___ftpack@sign
 14124  0519  3189  2181         	fcall	___ftpack
 14125  051B  0020               	movlb	0	; select bank0
 14126  051C  0820               	movf	?___ftpack,w
 14127  051D  00C1               	movwf	?___ftadd
 14128  051E  0821               	movf	?___ftpack+1,w
 14129  051F  00C2               	movwf	?___ftadd+1
 14130  0520  0822               	movf	?___ftpack+2,w
 14131  0521  00C3               	movwf	?___ftadd+2
 14132  0522  0008               	return
 14133  0523                     __end_of___ftadd:	
 14134                           
 14135                           	psect	text82
 14136  106D                     __ptext82:	
 14137 ;; *************** function ___awtoft *****************
 14138 ;; Defined at:
 14139 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14140 ;; Parameters:    Size  Location     Type
 14141 ;;  c               2    8[BANK0 ] int 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  sign            1   13[BANK0 ] unsigned char 
 14144 ;; Return value:  Size  Location     Type
 14145 ;;                  3    8[BANK0 ] float 
 14146 ;; Registers used:
 14147 ;;		wreg, status,2, status,0, pclath, cstack
 14148 ;; Tracked objects:
 14149 ;;		On entry : 0/0
 14150 ;;		On exit  : 0/0
 14151 ;;		Unchanged: 0/0
 14152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14153 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;Total ram usage:        6 bytes
 14158 ;; Hardware stack levels used:    1
 14159 ;; Hardware stack levels required when called:    6
 14160 ;; This function calls:
 14161 ;;		___ftpack
 14162 ;; This function is called by:
 14163 ;;		_getPercentValue
 14164 ;;		_setPercentValue
 14165 ;; This function uses a non-reentrant model
 14166 ;;
 14167                           
 14168                           
 14169                           ;psect for function ___awtoft
 14170  106D                     ___awtoft:	
 14171                           
 14172                           ;incstack = 0
 14173                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14174  106D  0020               	movlb	0	; select bank0
 14175  106E  01AD               	clrf	___awtoft@sign
 14176  106F  1FA9               	btfss	___awtoft@c+1,7
 14177  1070  2878               	goto	l5507
 14178  1071  09A8               	comf	___awtoft@c,f
 14179  1072  09A9               	comf	___awtoft@c+1,f
 14180  1073  0AA8               	incf	___awtoft@c,f
 14181  1074  1903               	skipnz
 14182  1075  0AA9               	incf	___awtoft@c+1,f
 14183  1076  01AD               	clrf	___awtoft@sign
 14184  1077  0AAD               	incf	___awtoft@sign,f
 14185  1078                     l5507:	
 14186  1078  0828               	movf	___awtoft@c,w
 14187  1079  00A0               	movwf	___ftpack@arg
 14188  107A  0829               	movf	___awtoft@c+1,w
 14189  107B  00A1               	movwf	___ftpack@arg+1
 14190  107C  01A2               	clrf	___ftpack@arg+2
 14191  107D  308E               	movlw	142
 14192  107E  00AB               	movwf	??___awtoft
 14193  107F  082B               	movf	??___awtoft,w
 14194  1080  00A3               	movwf	___ftpack@exp
 14195  1081  082D               	movf	___awtoft@sign,w
 14196  1082  00AC               	movwf	??___awtoft+1
 14197  1083  082C               	movf	??___awtoft+1,w
 14198  1084  00A4               	movwf	___ftpack@sign
 14199  1085  3189  2181         	fcall	___ftpack
 14200  1087  0020               	movlb	0	; select bank0
 14201  1088  0820               	movf	?___ftpack,w
 14202  1089  00A8               	movwf	?___awtoft
 14203  108A  0821               	movf	?___ftpack+1,w
 14204  108B  00A9               	movwf	?___awtoft+1
 14205  108C  0822               	movf	?___ftpack+2,w
 14206  108D  00AA               	movwf	?___awtoft+2
 14207  108E  0008               	return
 14208  108F                     __end_of___awtoft:	
 14209                           
 14210                           	psect	text83
 14211  0981                     __ptext83:	
 14212 ;; *************** function ___ftpack *****************
 14213 ;; Defined at:
 14214 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14215 ;; Parameters:    Size  Location     Type
 14216 ;;  arg             3    0[BANK0 ] unsigned um
 14217 ;;  exp             1    3[BANK0 ] unsigned char 
 14218 ;;  sign            1    4[BANK0 ] unsigned char 
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;		None
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  3    0[BANK0 ] float 
 14223 ;; Registers used:
 14224 ;;		wreg, status,2, status,0
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14230 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;Total ram usage:        8 bytes
 14235 ;; Hardware stack levels used:    1
 14236 ;; Hardware stack levels required when called:    5
 14237 ;; This function calls:
 14238 ;;		Nothing
 14239 ;; This function is called by:
 14240 ;;		___awtoft
 14241 ;;		___ftadd
 14242 ;;		___ftdiv
 14243 ;;		___ftmul
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           
 14248                           ;psect for function ___ftpack
 14249  0981                     ___ftpack:	
 14250                           
 14251                           ;incstack = 0
 14252                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14253  0981  0020               	movlb	0	; select bank0
 14254  0982  0823               	movf	___ftpack@exp,w
 14255  0983  1903               	btfsc	3,2
 14256  0984  298A               	goto	l5457
 14257  0985  0822               	movf	___ftpack@arg+2,w
 14258  0986  0421               	iorwf	___ftpack@arg+1,w
 14259  0987  0420               	iorwf	___ftpack@arg,w
 14260  0988  1D03               	skipz
 14261  0989  299B               	goto	l5463
 14262  098A                     l5457:	
 14263  098A  3000               	movlw	0
 14264  098B  00A0               	movwf	?___ftpack
 14265  098C  3000               	movlw	0
 14266  098D  00A1               	movwf	?___ftpack+1
 14267  098E  3000               	movlw	0
 14268  098F  00A2               	movwf	?___ftpack+2
 14269  0990  0008               	return
 14270  0991                     l5461:	
 14271  0991  3001               	movlw	1
 14272  0992  00A5               	movwf	??___ftpack
 14273  0993  0825               	movf	??___ftpack,w
 14274  0994  07A3               	addwf	___ftpack@exp,f
 14275  0995  3001               	movlw	1
 14276  0996                     u4005:	
 14277  0996  36A2               	lsrf	___ftpack@arg+2,f
 14278  0997  0CA1               	rrf	___ftpack@arg+1,f
 14279  0998  0CA0               	rrf	___ftpack@arg,f
 14280  0999  0B89               	decfsz	9,f
 14281  099A  2996               	goto	u4005
 14282  099B                     l5463:	
 14283  099B  30FE               	movlw	254
 14284  099C  0522               	andwf	___ftpack@arg+2,w
 14285  099D  1903               	btfsc	3,2
 14286  099E  29B4               	goto	l2729
 14287  099F  2991               	goto	l5461
 14288  09A0                     l5465:	
 14289  09A0  3001               	movlw	1
 14290  09A1  00A5               	movwf	??___ftpack
 14291  09A2  0825               	movf	??___ftpack,w
 14292  09A3  07A3               	addwf	___ftpack@exp,f
 14293  09A4  3001               	movlw	1
 14294  09A5  07A0               	addwf	___ftpack@arg,f
 14295  09A6  3000               	movlw	0
 14296  09A7  1803               	skipnc
 14297  09A8  3001               	movlw	1
 14298  09A9  07A1               	addwf	___ftpack@arg+1,f
 14299  09AA  3000               	movlw	0
 14300  09AB  1803               	skipnc
 14301  09AC  3001               	movlw	1
 14302  09AD  07A2               	addwf	___ftpack@arg+2,f
 14303  09AE  3001               	movlw	1
 14304  09AF                     u4025:	
 14305  09AF  36A2               	lsrf	___ftpack@arg+2,f
 14306  09B0  0CA1               	rrf	___ftpack@arg+1,f
 14307  09B1  0CA0               	rrf	___ftpack@arg,f
 14308  09B2  0B89               	decfsz	9,f
 14309  09B3  29AF               	goto	u4025
 14310  09B4                     l2729:	
 14311  09B4  30FF               	movlw	255
 14312  09B5  0522               	andwf	___ftpack@arg+2,w
 14313  09B6  1903               	btfsc	3,2
 14314  09B7  29C1               	goto	l5473
 14315  09B8  29A0               	goto	l5465
 14316  09B9                     l5471:	
 14317  09B9  3001               	movlw	1
 14318  09BA  02A3               	subwf	___ftpack@exp,f
 14319  09BB  3001               	movlw	1
 14320  09BC                     u4045:	
 14321  09BC  35A0               	lslf	___ftpack@arg,f
 14322  09BD  0DA1               	rlf	___ftpack@arg+1,f
 14323  09BE  0DA2               	rlf	___ftpack@arg+2,f
 14324  09BF  0B89               	decfsz	9,f
 14325  09C0  29BC               	goto	u4045
 14326  09C1                     l5473:	
 14327  09C1  1FA1               	btfss	___ftpack@arg+1,7
 14328  09C2  29B9               	goto	l5471
 14329  09C3  1823               	btfsc	___ftpack@exp,0
 14330  09C4  29CB               	goto	l2735
 14331  09C5  30FF               	movlw	255
 14332  09C6  05A0               	andwf	___ftpack@arg,f
 14333  09C7  307F               	movlw	127
 14334  09C8  05A1               	andwf	___ftpack@arg+1,f
 14335  09C9  30FF               	movlw	255
 14336  09CA  05A2               	andwf	___ftpack@arg+2,f
 14337  09CB                     l2735:	
 14338  09CB  1003               	clrc
 14339  09CC  0CA3               	rrf	___ftpack@exp,f
 14340  09CD  0823               	movf	___ftpack@exp,w
 14341  09CE  00A5               	movwf	??___ftpack
 14342  09CF  01A6               	clrf	??___ftpack+1
 14343  09D0  01A7               	clrf	??___ftpack+2
 14344  09D1  3010               	movlw	16
 14345  09D2                     u4075:	
 14346  09D2  35A5               	lslf	??___ftpack,f
 14347  09D3  0DA6               	rlf	??___ftpack+1,f
 14348  09D4  0DA7               	rlf	??___ftpack+2,f
 14349  09D5  0B89               	decfsz	9,f
 14350  09D6  29D2               	goto	u4075
 14351  09D7  0825               	movf	??___ftpack,w
 14352  09D8  04A0               	iorwf	___ftpack@arg,f
 14353  09D9  0826               	movf	??___ftpack+1,w
 14354  09DA  04A1               	iorwf	___ftpack@arg+1,f
 14355  09DB  0827               	movf	??___ftpack+2,w
 14356  09DC  04A2               	iorwf	___ftpack@arg+2,f
 14357  09DD  0824               	movf	___ftpack@sign,w
 14358  09DE  1903               	btfsc	3,2
 14359  09DF  0008               	return
 14360  09E0  17A2               	bsf	___ftpack@arg+2,7
 14361  09E1  0008               	return
 14362  09E2                     __end_of___ftpack:	
 14363                           
 14364                           	psect	text84
 14365  1322                     __ptext84:	
 14366 ;; *************** function _setLED *****************
 14367 ;; Defined at:
 14368 ;;		line 76 in file "../src/LED_B1.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;  led             1    wreg     unsigned char 
 14371 ;;  command         1    2[BANK0 ] unsigned char 
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;  led             1    3[BANK0 ] unsigned char 
 14374 ;; Return value:  Size  Location     Type
 14375 ;;		None               void
 14376 ;; Registers used:
 14377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14383 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;Total ram usage:        2 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; Hardware stack levels required when called:    6
 14390 ;; This function calls:
 14391 ;;		_LedPointSelect
 14392 ;; This function is called by:
 14393 ;;		_setDimmerLights
 14394 ;;		_setLED_Initialization
 14395 ;;		_setMain_Exception
 14396 ;;		_setSw_Initialization
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           
 14401                           ;psect for function _setLED
 14402  1322                     _setLED:	
 14403                           
 14404                           ;incstack = 0
 14405                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14406                           ;setLED@led stored from wreg
 14407  1322  0020               	movlb	0	; select bank0
 14408  1323  00A3               	movwf	setLED@led
 14409                           
 14410                           ;LED_B1.c: 77: LedPointSelect(led);
 14411  1324  0823               	movf	setLED@led,w
 14412  1325  319C  24A4  3193   	fcall	_LedPointSelect
 14413                           
 14414                           ;LED_B1.c: 78: if (command == 0) {
 14415  1328  0020               	movlb	0	; select bank0
 14416  1329  08A2               	movf	setLED@command,f
 14417  132A  1D03               	skipz
 14418  132B  2B31               	goto	l6195
 14419                           
 14420                           ;LED_B1.c: 107: if (led == 99) {
 14421  132C  0823               	movf	setLED@led,w
 14422  132D  3A63               	xorlw	99
 14423  132E  1D03               	skipz
 14424  132F  2B31               	goto	l6195
 14425                           
 14426                           ;LED_B1.c: 111: RB5 = 1;
 14427  1330  168D               	bsf	13,5	;volatile
 14428  1331                     l6195:	
 14429                           
 14430                           ;LED_B1.c: 113: }
 14431                           ;LED_B1.c: 115: }
 14432                           ;LED_B1.c: 116: if (command == 1) {
 14433  1331  0822               	movf	setLED@command,w
 14434  1332  3A01               	xorlw	1
 14435  1333  1D03               	skipz
 14436  1334  2B3A               	goto	l6201
 14437                           
 14438                           ;LED_B1.c: 145: if (led == 99) {
 14439  1335  0823               	movf	setLED@led,w
 14440  1336  3A63               	xorlw	99
 14441  1337  1D03               	skipz
 14442  1338  2B3A               	goto	l6201
 14443                           
 14444                           ;LED_B1.c: 149: RB5 = 0;
 14445  1339  128D               	bcf	13,5	;volatile
 14446  133A                     l6201:	
 14447                           
 14448                           ;LED_B1.c: 151: }
 14449                           ;LED_B1.c: 153: }
 14450                           ;LED_B1.c: 154: if (command == 10) {
 14451  133A  0822               	movf	setLED@command,w
 14452  133B  3A0A               	xorlw	10
 14453  133C  1D03               	skipz
 14454  133D  2B4E               	goto	l6209
 14455                           
 14456                           ;LED_B1.c: 155: LED->GO = 0;
 14457  133E  087A               	movf	_LED,w
 14458  133F  0086               	movwf	6
 14459  1340  3001               	movlw	1	; select bank2/3
 14460  1341  0087               	movwf	7
 14461  1342  1081               	bcf	1,1
 14462                           
 14463                           ;LED_B1.c: 156: LED->Time = 0;
 14464  1343  0A7A               	incf	_LED,w
 14465  1344  0086               	movwf	6
 14466  1345  3001               	movlw	1	; select bank2/3
 14467  1346  0087               	movwf	7
 14468  1347  3000               	movlw	0
 14469  1348  3FC0               	movwi [0]fsr1
 14470  1349  3FC1               	movwi [1]fsr1
 14471                           
 14472                           ;LED_B1.c: 185: if (led == 99) {
 14473  134A  0823               	movf	setLED@led,w
 14474  134B  3A63               	xorlw	99
 14475  134C  1903               	btfsc	3,2
 14476                           
 14477                           ;LED_B1.c: 189: RB5 = 1;
 14478  134D  168D               	bsf	13,5	;volatile
 14479  134E                     l6209:	
 14480                           
 14481                           ;LED_B1.c: 191: }
 14482                           ;LED_B1.c: 193: }
 14483                           ;LED_B1.c: 194: if (command == 11) {
 14484  134E  0822               	movf	setLED@command,w
 14485  134F  3A0B               	xorlw	11
 14486  1350  1D03               	skipz
 14487  1351  0008               	return
 14488                           
 14489                           ;LED_B1.c: 195: LED->GO = 1;
 14490  1352  087A               	movf	_LED,w
 14491  1353  0086               	movwf	6
 14492  1354  3001               	movlw	1	; select bank2/3
 14493  1355  0087               	movwf	7
 14494  1356  1481               	bsf	1,1
 14495  1357  0008               	return
 14496  1358                     __end_of_setLED:	
 14497                           
 14498                           	psect	text85
 14499  1CA4                     __ptext85:	
 14500 ;; *************** function _LedPointSelect *****************
 14501 ;; Defined at:
 14502 ;;		line 7 in file "../src/LED_B1.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  led             1    wreg     unsigned char 
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;  led             1    1[BANK0 ] unsigned char 
 14507 ;; Return value:  Size  Location     Type
 14508 ;;		None               void
 14509 ;; Registers used:
 14510 ;;		wreg
 14511 ;; Tracked objects:
 14512 ;;		On entry : 0/0
 14513 ;;		On exit  : 0/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;Total ram usage:        2 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    5
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_setLED_Initialization
 14527 ;;		_setLED
 14528 ;;		_setLED_Main
 14529 ;; This function uses a non-reentrant model
 14530 ;;
 14531                           
 14532                           
 14533                           ;psect for function _LedPointSelect
 14534  1CA4                     _LedPointSelect:	
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _LedPointSelect: [wreg]
 14538                           ;LedPointSelect@led stored from wreg
 14539  1CA4  0020               	movlb	0	; select bank0
 14540  1CA5  00A1               	movwf	LedPointSelect@led
 14541                           
 14542                           ;LED_B1.c: 24: if (led == 99) {
 14543  1CA6  0821               	movf	LedPointSelect@led,w
 14544  1CA7  3A63               	xorlw	99
 14545  1CA8  1D03               	skipz
 14546  1CA9  0008               	return
 14547                           
 14548                           ;LED_B1.c: 25: LED = &VarErrLED;
 14549  1CAA  30E2               	movlw	_VarErrLED& (0+255)
 14550  1CAB  00A0               	movwf	??_LedPointSelect
 14551  1CAC  0820               	movf	??_LedPointSelect,w
 14552  1CAD  00FA               	movwf	_LED
 14553  1CAE  0008               	return
 14554  1CAF                     __end_of_LedPointSelect:	
 14555                           
 14556                           	psect	text86
 14557  1CE7                     __ptext86:	
 14558 ;; *************** function _setDimmerLights_Line *****************
 14559 ;; Defined at:
 14560 ;;		line 679 in file "../src/Dimmer_B1.c"
 14561 ;; Parameters:    Size  Location     Type
 14562 ;;  lights          1    wreg     unsigned char 
 14563 ;; Auto vars:     Size  Location     Type
 14564 ;;  lights          1    0[BANK0 ] unsigned char 
 14565 ;; Return value:  Size  Location     Type
 14566 ;;		None               void
 14567 ;; Registers used:
 14568 ;;		wreg
 14569 ;; Tracked objects:
 14570 ;;		On entry : 0/0
 14571 ;;		On exit  : 0/0
 14572 ;;		Unchanged: 0/0
 14573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;Total ram usage:        1 bytes
 14579 ;; Hardware stack levels used:    1
 14580 ;; Hardware stack levels required when called:    5
 14581 ;; This function calls:
 14582 ;;		Nothing
 14583 ;; This function is called by:
 14584 ;;		_setDimmerLights
 14585 ;; This function uses a non-reentrant model
 14586 ;;
 14587                           
 14588                           
 14589                           ;psect for function _setDimmerLights_Line
 14590  1CE7                     _setDimmerLights_Line:	
 14591                           
 14592                           ;incstack = 0
 14593                           ; Regs used in _setDimmerLights_Line: [wreg]
 14594                           ;setDimmerLights_Line@lights stored from wreg
 14595  1CE7  0020               	movlb	0	; select bank0
 14596  1CE8  00A0               	movwf	setDimmerLights_Line@lights
 14597                           
 14598                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 14599  1CE9  0023               	movlb	3	; select bank3
 14600  1CEA  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14601                           
 14602                           ;Dimmer_B1.c: 690: if (lights == 1) {
 14603  1CEB  0020               	movlb	0	; select bank0
 14604  1CEC  0820               	movf	setDimmerLights_Line@lights,w
 14605  1CED  3A01               	xorlw	1
 14606  1CEE  1D03               	skipz
 14607  1CEF  0008               	return
 14608                           
 14609                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 14610  1CF0  0023               	movlb	3	; select bank3
 14611  1CF1  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14612  1CF2  0008               	return
 14613  1CF3                     __end_of_setDimmerLights_Line:	
 14614                           
 14615                           	psect	text87
 14616  1287                     __ptext87:	
 14617 ;; *************** function _getMain_All_Error_Status *****************
 14618 ;; Defined at:
 14619 ;;		line 373 in file "../src/Main_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;  command         1    wreg     unsigned char 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  command         1    5[BANK0 ] unsigned char 
 14624 ;;  status          1    6[BANK0 ] unsigned char 
 14625 ;; Return value:  Size  Location     Type
 14626 ;;                  1    wreg      unsigned char 
 14627 ;; Registers used:
 14628 ;;		wreg, status,2, status,0
 14629 ;; Tracked objects:
 14630 ;;		On entry : 0/0
 14631 ;;		On exit  : 0/0
 14632 ;;		Unchanged: 0/0
 14633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;Total ram usage:        7 bytes
 14639 ;; Hardware stack levels used:    1
 14640 ;; Hardware stack levels required when called:    5
 14641 ;; This function calls:
 14642 ;;		Nothing
 14643 ;; This function is called by:
 14644 ;;		_DimmerLights_Main
 14645 ;;		_setDimmerLights
 14646 ;;		_setDimmerLights_Adj
 14647 ;;		_Load_Main
 14648 ;;		_setTemp_Main
 14649 ;;		_setRF_Main
 14650 ;;		_getRxData
 14651 ;;		_Switch_Main
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function _getMain_All_Error_Status
 14657  1287                     _getMain_All_Error_Status:	
 14658                           
 14659                           ;incstack = 0
 14660                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14661                           ;getMain_All_Error_Status@command stored from wreg
 14662  1287  0020               	movlb	0	; select bank0
 14663  1288  00A5               	movwf	getMain_All_Error_Status@command
 14664                           
 14665                           ;Main_B1.c: 374: char status = 0;
 14666  1289  01A6               	clrf	getMain_All_Error_Status@status
 14667                           
 14668                           ;Main_B1.c: 385: if (status == 0 && command != 2) {
 14669  128A  08A6               	movf	getMain_All_Error_Status@status,f
 14670  128B  1D03               	skipz
 14671  128C  2AA1               	goto	l6175
 14672  128D  0825               	movf	getMain_All_Error_Status@command,w
 14673  128E  3A02               	xorlw	2
 14674  128F  1903               	skipnz
 14675  1290  2AA1               	goto	l6175
 14676                           
 14677                           ;Main_B1.c: 386: status = Temp.ERROR == 1 ? 2 : 0;
 14678  1291  0021               	movlb	1	; select bank1
 14679  1292  18D6               	btfsc	_Temp^(0+128),1
 14680  1293  2A98               	goto	l6173
 14681  1294  0020               	movlb	0	; select bank0
 14682  1295  01A1               	clrf	_getMain_All_Error_Status$3747
 14683  1296  01A2               	clrf	_getMain_All_Error_Status$3747+1
 14684  1297  2A9D               	goto	l1425
 14685  1298                     l6173:	
 14686  1298  3002               	movlw	2
 14687  1299  0020               	movlb	0	; select bank0
 14688  129A  00A1               	movwf	_getMain_All_Error_Status$3747
 14689  129B  3000               	movlw	0
 14690  129C  00A2               	movwf	_getMain_All_Error_Status$3747+1
 14691  129D                     l1425:	
 14692  129D  0821               	movf	_getMain_All_Error_Status$3747,w
 14693  129E  00A0               	movwf	??_getMain_All_Error_Status
 14694  129F  0820               	movf	??_getMain_All_Error_Status,w
 14695  12A0  00A6               	movwf	getMain_All_Error_Status@status
 14696  12A1                     l6175:	
 14697                           
 14698                           ;Main_B1.c: 387: }
 14699                           ;Main_B1.c: 392: if (status == 0 && command != 3) {
 14700  12A1  08A6               	movf	getMain_All_Error_Status@status,f
 14701  12A2  1D03               	skipz
 14702  12A3  2AB8               	goto	l1426
 14703  12A4  0825               	movf	getMain_All_Error_Status@command,w
 14704  12A5  3A03               	xorlw	3
 14705  12A6  1903               	skipnz
 14706  12A7  2AB8               	goto	l1426
 14707                           
 14708                           ;Main_B1.c: 393: status = Load.ERROR == 1 ? 3 : 0;
 14709  12A8  0022               	movlb	2	; select bank2
 14710  12A9  1AC3               	btfsc	_Load^(0+256),5
 14711  12AA  2AAF               	goto	l6183
 14712  12AB  0020               	movlb	0	; select bank0
 14713  12AC  01A3               	clrf	_getMain_All_Error_Status$3756
 14714  12AD  01A4               	clrf	_getMain_All_Error_Status$3756+1
 14715  12AE  2AB4               	goto	l1430
 14716  12AF                     l6183:	
 14717  12AF  3003               	movlw	3
 14718  12B0  0020               	movlb	0	; select bank0
 14719  12B1  00A3               	movwf	_getMain_All_Error_Status$3756
 14720  12B2  3000               	movlw	0
 14721  12B3  00A4               	movwf	_getMain_All_Error_Status$3756+1
 14722  12B4                     l1430:	
 14723  12B4  0823               	movf	_getMain_All_Error_Status$3756,w
 14724  12B5  00A0               	movwf	??_getMain_All_Error_Status
 14725  12B6  0820               	movf	??_getMain_All_Error_Status,w
 14726  12B7  00A6               	movwf	getMain_All_Error_Status@status
 14727  12B8                     l1426:	
 14728                           
 14729                           ;Main_B1.c: 394: }
 14730                           ;Main_B1.c: 410: return status;
 14731  12B8  0826               	movf	getMain_All_Error_Status@status,w
 14732  12B9  0008               	return
 14733  12BA                     __end_of_getMain_All_Error_Status:	
 14734                           
 14735                           	psect	text88
 14736  1199                     __ptext88:	
 14737 ;; *************** function _getMain_LightsStatus *****************
 14738 ;; Defined at:
 14739 ;;		line 346 in file "../src/Main_B1.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;		None
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  i               2    6[BANK0 ] int 
 14744 ;;  status          1    8[BANK0 ] unsigned char 
 14745 ;;  count           1    5[BANK0 ] unsigned char 
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      unsigned char 
 14748 ;; Registers used:
 14749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        5 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    7
 14762 ;; This function calls:
 14763 ;;		_getDimmerLights_Status
 14764 ;; This function is called by:
 14765 ;;		_DimmerLights_Main
 14766 ;;		_Flash_Memory_Main
 14767 ;;		_setMain_Exception
 14768 ;;		_Load_Main
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function _getMain_LightsStatus
 14774  1199                     _getMain_LightsStatus:	
 14775                           
 14776                           ;Main_B1.c: 347: char status = 0, count = 0;
 14777                           
 14778                           ;incstack = 0
 14779                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14780  1199  0020               	movlb	0	; select bank0
 14781  119A  01A8               	clrf	getMain_LightsStatus@status
 14782  119B  01A5               	clrf	getMain_LightsStatus@count
 14783                           
 14784                           ;Main_B1.c: 350: count = 1;
 14785  119C  01A5               	clrf	getMain_LightsStatus@count
 14786  119D  0AA5               	incf	getMain_LightsStatus@count,f
 14787                           
 14788                           ;Main_B1.c: 359: for (int i = 0; i < count; i++) {
 14789  119E  01A6               	clrf	getMain_LightsStatus@i
 14790  119F  01A7               	clrf	getMain_LightsStatus@i+1
 14791  11A0                     l6439:	
 14792  11A0  0827               	movf	getMain_LightsStatus@i+1,w
 14793  11A1  3A80               	xorlw	128
 14794  11A2  00A4               	movwf	??_getMain_LightsStatus
 14795  11A3  3080               	movlw	128
 14796  11A4  0224               	subwf	??_getMain_LightsStatus,w
 14797  11A5  1D03               	skipz
 14798  11A6  29A9               	goto	u5625
 14799  11A7  0825               	movf	getMain_LightsStatus@count,w
 14800  11A8  0226               	subwf	getMain_LightsStatus@i,w
 14801  11A9                     u5625:	
 14802  11A9  1803               	btfsc	3,0
 14803  11AA  29C1               	goto	l6441
 14804                           
 14805                           ;Main_B1.c: 360: if (status == 0) {
 14806  11AB  0020               	movlb	0	; select bank0
 14807  11AC  08A8               	movf	getMain_LightsStatus@status,f
 14808  11AD  1D03               	skipz
 14809  11AE  29BC               	goto	l6437
 14810                           
 14811                           ;Main_B1.c: 365: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14812  11AF  0826               	movf	getMain_LightsStatus@i,w
 14813  11B0  3E01               	addlw	1
 14814  11B1  319D  255D  3191   	fcall	_getDimmerLights_Status
 14815  11B4  3A01               	xorlw	1
 14816  11B5  3000               	movlw	0
 14817  11B6  1903               	skipnz
 14818  11B7  3001               	movlw	1
 14819  11B8  0020               	movlb	0	; select bank0
 14820  11B9  00A4               	movwf	??_getMain_LightsStatus
 14821  11BA  0824               	movf	??_getMain_LightsStatus,w
 14822  11BB  00A8               	movwf	getMain_LightsStatus@status
 14823  11BC                     l6437:	
 14824  11BC  3001               	movlw	1
 14825  11BD  07A6               	addwf	getMain_LightsStatus@i,f
 14826  11BE  3000               	movlw	0
 14827  11BF  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14828  11C0  29A0               	goto	l6439
 14829  11C1                     l6441:	
 14830                           
 14831                           ;Main_B1.c: 367: }
 14832                           ;Main_B1.c: 368: }
 14833                           ;Main_B1.c: 369: return status;
 14834  11C1  0020               	movlb	0	; select bank0
 14835  11C2  0828               	movf	getMain_LightsStatus@status,w
 14836  11C3  0008               	return
 14837  11C4                     __end_of_getMain_LightsStatus:	
 14838                           
 14839                           	psect	text89
 14840  1C4D                     __ptext89:	
 14841 ;; *************** function _getLoad_OK *****************
 14842 ;; Defined at:
 14843 ;;		line 188 in file "../src/OverLoad_B1.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;		None
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;  ok              1    0[BANK0 ] unsigned char 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      unsigned char 
 14850 ;; Registers used:
 14851 ;;		wreg, status,2
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14860 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;Total ram usage:        1 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    5
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_DimmerLights_Main
 14868 ;; This function uses a non-reentrant model
 14869 ;;
 14870                           
 14871                           
 14872                           ;psect for function _getLoad_OK
 14873  1C4D                     _getLoad_OK:	
 14874                           
 14875                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 14876                           
 14877                           ;incstack = 0
 14878                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14879  1C4D  3000               	movlw	0
 14880  1C4E  0022               	movlb	2	; select bank2
 14881  1C4F  1BC3               	btfsc	_Load^(0+256),7
 14882  1C50  3001               	movlw	1
 14883  1C51  0020               	movlb	0	; select bank0
 14884  1C52  00A0               	movwf	getLoad_OK@ok
 14885                           
 14886                           ;OverLoad_B1.c: 190: return ok;
 14887  1C53  0820               	movf	getLoad_OK@ok,w
 14888  1C54  0008               	return
 14889  1C55                     __end_of_getLoad_OK:	
 14890                           
 14891                           	psect	text90
 14892  1D17                     __ptext90:	
 14893 ;; *************** function _DimmerLights_Initialization *****************
 14894 ;; Defined at:
 14895 ;;		line 341 in file "../src/Dimmer_B1.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;		None
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;		None
 14900 ;; Return value:  Size  Location     Type
 14901 ;;		None               void
 14902 ;; Registers used:
 14903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:        1 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    7
 14916 ;; This function calls:
 14917 ;;		_Dimmer_Initialization
 14918 ;;		_setDimmerLights_Initialization
 14919 ;; This function is called by:
 14920 ;;		_main
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           
 14925                           ;psect for function _DimmerLights_Initialization
 14926  1D17                     _DimmerLights_Initialization:	
 14927                           
 14928                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 14929                           
 14930                           ;incstack = 0
 14931                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14932  1D17  30C5               	movlw	_DimmerLights1& (0+255)
 14933  1D18  0020               	movlb	0	; select bank0
 14934  1D19  00A4               	movwf	??_DimmerLights_Initialization
 14935  1D1A  0824               	movf	??_DimmerLights_Initialization,w
 14936  1D1B  0021               	movlb	1	; select bank1
 14937  1D1C  00CD               	movwf	_DimmerLights11^(0+128)
 14938                           
 14939                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 14940  1D1D  3001               	movlw	1
 14941  1D1E  3191  211E  319D   	fcall	_setDimmerLights_Initialization
 14942                           
 14943                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 14944  1D21  3180  2002         	fcall	_Dimmer_Initialization
 14945  1D23  0008               	return
 14946  1D24                     __end_of_DimmerLights_Initialization:	
 14947                           
 14948                           	psect	text91
 14949  111E                     __ptext91:	
 14950 ;; *************** function _setDimmerLights_Initialization *****************
 14951 ;; Defined at:
 14952 ;;		line 364 in file "../src/Dimmer_B1.c"
 14953 ;; Parameters:    Size  Location     Type
 14954 ;;  lights          1    wreg     unsigned char 
 14955 ;; Auto vars:     Size  Location     Type
 14956 ;;  lights          1    3[BANK0 ] unsigned char 
 14957 ;; Return value:  Size  Location     Type
 14958 ;;		None               void
 14959 ;; Registers used:
 14960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14961 ;; Tracked objects:
 14962 ;;		On entry : 0/0
 14963 ;;		On exit  : 0/0
 14964 ;;		Unchanged: 0/0
 14965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;Total ram usage:        2 bytes
 14971 ;; Hardware stack levels used:    1
 14972 ;; Hardware stack levels required when called:    6
 14973 ;; This function calls:
 14974 ;;		_DimmerLightsPointSelect
 14975 ;; This function is called by:
 14976 ;;		_DimmerLights_Initialization
 14977 ;; This function uses a non-reentrant model
 14978 ;;
 14979                           
 14980                           
 14981                           ;psect for function _setDimmerLights_Initialization
 14982  111E                     _setDimmerLights_Initialization:	
 14983                           
 14984                           ;incstack = 0
 14985                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14986                           ;setDimmerLights_Initialization@lights stored from wreg
 14987  111E  0020               	movlb	0	; select bank0
 14988  111F  00A3               	movwf	setDimmerLights_Initialization@lights
 14989                           
 14990                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 14991  1120  0823               	movf	setDimmerLights_Initialization@lights,w
 14992  1121  319C  2499         	fcall	_DimmerLightsPointSelect
 14993                           
 14994                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(90*0.8));
 14995  1123  3048               	movlw	72
 14996  1124  0020               	movlb	0	; select bank0
 14997  1125  00A2               	movwf	??_setDimmerLights_Initialization
 14998  1126  086F               	movf	_DimmerLights,w
 14999  1127  3E05               	addlw	5
 15000  1128  0086               	movwf	6
 15001  1129  3001               	movlw	1	; select bank2/3
 15002  112A  0087               	movwf	7
 15003  112B  0822               	movf	??_setDimmerLights_Initialization,w
 15004  112C  0081               	movwf	1
 15005                           
 15006                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 15007  112D  300C               	movlw	12
 15008  112E  00A2               	movwf	??_setDimmerLights_Initialization
 15009  112F  086F               	movf	_DimmerLights,w
 15010  1130  3E06               	addlw	6
 15011  1131  0086               	movwf	6
 15012  1132  3001               	movlw	1	; select bank2/3
 15013  1133  0087               	movwf	7
 15014  1134  0822               	movf	??_setDimmerLights_Initialization,w
 15015  1135  0081               	movwf	1
 15016                           
 15017                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15018  1136  086F               	movf	_DimmerLights,w
 15019  1137  3E05               	addlw	5
 15020  1138  0086               	movwf	6
 15021  1139  3001               	movlw	1	; select bank2/3
 15022  113A  0087               	movwf	7
 15023  113B  0801               	movf	1,w
 15024  113C  00A2               	movwf	??_setDimmerLights_Initialization
 15025  113D  086F               	movf	_DimmerLights,w
 15026  113E  3E04               	addlw	4
 15027  113F  0086               	movwf	6
 15028  1140  3001               	movlw	1	; select bank2/3
 15029  1141  0087               	movwf	7
 15030  1142  0822               	movf	??_setDimmerLights_Initialization,w
 15031  1143  0081               	movwf	1
 15032  1144  0008               	return
 15033  1145                     __end_of_setDimmerLights_Initialization:	
 15034                           
 15035                           	psect	text92
 15036  0002                     __ptext92:	
 15037 ;; *************** function _Dimmer_Initialization *****************
 15038 ;; Defined at:
 15039 ;;		line 904 in file "../src/Dimmer_B1.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;		None
 15044 ;; Return value:  Size  Location     Type
 15045 ;;		None               void
 15046 ;; Registers used:
 15047 ;;		None
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;Total ram usage:        0 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; Hardware stack levels required when called:    5
 15060 ;; This function calls:
 15061 ;;		Nothing
 15062 ;; This function is called by:
 15063 ;;		_DimmerLights_Initialization
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067                           
 15068                           ;psect for function _Dimmer_Initialization
 15069  0002                     _Dimmer_Initialization:	
 15070                           
 15071                           ;incstack = 0
 15072                           ; Regs used in _Dimmer_Initialization: []
 15073  0002  0008               	return
 15074  0003                     __end_of_Dimmer_Initialization:	
 15075                           
 15076                           	psect	text93
 15077  1C21                     __ptext93:	
 15078 ;; *************** function _DelayOff_Main *****************
 15079 ;; Defined at:
 15080 ;;		line 41 in file "../src/DelayOff_B1.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;		None               void
 15087 ;; Registers used:
 15088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;Total ram usage:        0 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:   11
 15101 ;; This function calls:
 15102 ;;		_DlyOff_Main
 15103 ;; This function is called by:
 15104 ;;		_main
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108                           
 15109                           ;psect for function _DelayOff_Main
 15110  1C21                     _DelayOff_Main:	
 15111                           
 15112                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15116  1C21  3001               	movlw	1
 15117  1C22  3188  2066         	fcall	_DlyOff_Main
 15118  1C24  0008               	return
 15119  1C25                     __end_of_DelayOff_Main:	
 15120                           
 15121                           	psect	text94
 15122  0866                     __ptext94:	
 15123 ;; *************** function _DlyOff_Main *****************
 15124 ;; Defined at:
 15125 ;;		line 61 in file "../src/DelayOff_B1.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  sw              1    wreg     unsigned char 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  sw              1   24[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;		None               void
 15132 ;; Registers used:
 15133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;Total ram usage:        3 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:   10
 15146 ;; This function calls:
 15147 ;;		_DelayOffPointSelect
 15148 ;;		_setBuz
 15149 ;;		_setDimmerLights_ErrorClose
 15150 ;; This function is called by:
 15151 ;;		_DelayOff_Main
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           
 15156                           ;psect for function _DlyOff_Main
 15157  0866                     _DlyOff_Main:	
 15158                           
 15159                           ;incstack = 0
 15160                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15161                           ;DlyOff_Main@sw stored from wreg
 15162  0866  0020               	movlb	0	; select bank0
 15163  0867  00B8               	movwf	DlyOff_Main@sw
 15164                           
 15165                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15166  0868  0838               	movf	DlyOff_Main@sw,w
 15167  0869  319C  248E  3188   	fcall	_DelayOffPointSelect
 15168                           
 15169                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15170  086C  0878               	movf	_DelayOff,w
 15171  086D  0086               	movwf	6
 15172  086E  3001               	movlw	1	; select bank2/3
 15173  086F  0087               	movwf	7
 15174  0870  1C81               	btfss	1,1
 15175  0871  0008               	return
 15176                           
 15177                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15178  0872  0878               	movf	_DelayOff,w
 15179  0873  3E02               	addlw	2
 15180  0874  0086               	movwf	6
 15181  0875  3001               	movlw	1	; select bank2/3
 15182  0876  0087               	movwf	7
 15183  0877  3001               	movlw	1
 15184  0878  0781               	addwf	1,f
 15185  0879  3141               	addfsr 1,1
 15186  087A  1803               	skipnc
 15187  087B  0A81               	incf	1,f
 15188                           
 15189                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15190  087C  0878               	movf	_DelayOff,w
 15191  087D  3E02               	addlw	2
 15192  087E  0086               	movwf	6
 15193  087F  3001               	movlw	1	; select bank2/3
 15194  0880  0087               	movwf	7
 15195  0881  3F40               	moviw [0]fsr1
 15196  0882  0020               	movlb	0	; select bank0
 15197  0883  00B6               	movwf	??_DlyOff_Main
 15198  0884  3F41               	moviw [1]fsr1
 15199  0885  00B7               	movwf	??_DlyOff_Main+1
 15200  0886  3017               	movlw	23
 15201  0887  0237               	subwf	??_DlyOff_Main+1,w
 15202  0888  3070               	movlw	112
 15203  0889  1903               	skipnz
 15204  088A  0236               	subwf	??_DlyOff_Main,w
 15205  088B  1C03               	skipc
 15206  088C  0008               	return
 15207                           
 15208                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15209  088D  0878               	movf	_DelayOff,w
 15210  088E  3E02               	addlw	2
 15211  088F  0086               	movwf	6
 15212  0890  3001               	movlw	1	; select bank2/3
 15213  0891  0087               	movwf	7
 15214  0892  3000               	movlw	0
 15215  0893  3FC0               	movwi [0]fsr1
 15216  0894  3FC1               	movwi [1]fsr1
 15217                           
 15218                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15219  0895  3001               	movlw	1
 15220  0896  00B6               	movwf	??_DlyOff_Main
 15221  0897  0878               	movf	_DelayOff,w
 15222  0898  3E04               	addlw	4
 15223  0899  0086               	movwf	6
 15224  089A  3001               	movlw	1	; select bank2/3
 15225  089B  0087               	movwf	7
 15226  089C  0836               	movf	??_DlyOff_Main,w
 15227  089D  0781               	addwf	1,f
 15228                           
 15229                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15230  089E  0878               	movf	_DelayOff,w
 15231  089F  3E04               	addlw	4
 15232  08A0  0086               	movwf	6
 15233  08A1  3001               	movlw	1	; select bank2/3
 15234  08A2  0087               	movwf	7
 15235  08A3  0A78               	incf	_DelayOff,w
 15236  08A4  0084               	movwf	4
 15237  08A5  3001               	movlw	1	; select bank2/3
 15238  08A6  0085               	movwf	5
 15239  08A7  0800               	movf	0,w
 15240  08A8  0201               	subwf	1,w
 15241  08A9  1C03               	skipc
 15242  08AA  0008               	return
 15243                           
 15244                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15245  08AB  0878               	movf	_DelayOff,w
 15246  08AC  3E04               	addlw	4
 15247  08AD  0086               	movwf	6
 15248  08AE  3001               	movlw	1	; select bank2/3
 15249  08AF  0087               	movwf	7
 15250  08B0  0181               	clrf	1
 15251                           
 15252                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15253  08B1  0878               	movf	_DelayOff,w
 15254  08B2  0086               	movwf	6
 15255  08B3  3001               	movlw	1	; select bank2/3
 15256  08B4  0087               	movwf	7
 15257  08B5  1081               	bcf	1,1
 15258                           
 15259                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15260  08B6  3064               	movlw	100
 15261  08B7  00A9               	movwf	setBuz@time
 15262  08B8  3000               	movlw	0
 15263  08B9  00AA               	movwf	setBuz@time+1
 15264  08BA  3001               	movlw	1
 15265  08BB  3196  26EF  3188   	fcall	_setBuz
 15266                           
 15267                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15268  08BE  0020               	movlb	0	; select bank0
 15269  08BF  0838               	movf	DlyOff_Main@sw,w
 15270  08C0  3196  263F         	fcall	_setDimmerLights_ErrorClose
 15271  08C2  0008               	return
 15272  08C3                     __end_of_DlyOff_Main:	
 15273                           
 15274                           	psect	text95
 15275  163F                     __ptext95:	
 15276 ;; *************** function _setDimmerLights_ErrorClose *****************
 15277 ;; Defined at:
 15278 ;;		line 574 in file "../src/Dimmer_B1.c"
 15279 ;; Parameters:    Size  Location     Type
 15280 ;;  lights          1    wreg     unsigned char 
 15281 ;; Auto vars:     Size  Location     Type
 15282 ;;  lights          1   19[BANK0 ] unsigned char 
 15283 ;;  i               2   20[BANK0 ] int 
 15284 ;;  count           1   18[BANK0 ] unsigned char 
 15285 ;; Return value:  Size  Location     Type
 15286 ;;		None               void
 15287 ;; Registers used:
 15288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;Total ram usage:        5 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    9
 15301 ;; This function calls:
 15302 ;;		_DimmerLightsPointSelect
 15303 ;;		_getDimmerLights_Status
 15304 ;;		_setDimmerLights_SwOff
 15305 ;; This function is called by:
 15306 ;;		_DlyOff_Main
 15307 ;;		_setMain_Exception
 15308 ;;		_setControl_Lights_Table
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           
 15313                           ;psect for function _setDimmerLights_ErrorClose
 15314  163F                     _setDimmerLights_ErrorClose:	
 15315                           
 15316                           ;incstack = 0
 15317                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15318                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15319  163F  0020               	movlb	0	; select bank0
 15320  1640  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15321                           
 15322                           ;Dimmer_B1.c: 575: if (lights == 255) {
 15323  1641  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15324  1642  3AFF               	xorlw	255
 15325  1643  1D03               	skipz
 15326  1644  2E7A               	goto	l6073
 15327                           
 15328                           ;Dimmer_B1.c: 577: char count = 1;
 15329  1645  01B2               	clrf	setDimmerLights_ErrorClose@count
 15330  1646  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15331                           
 15332                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 15333  1647  01B4               	clrf	setDimmerLights_ErrorClose@i
 15334  1648  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15335  1649                     l6071:	
 15336  1649  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15337  164A  3A80               	xorlw	128
 15338  164B  00B1               	movwf	??_setDimmerLights_ErrorClose
 15339  164C  3080               	movlw	128
 15340  164D  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15341  164E  1D03               	skipz
 15342  164F  2E52               	goto	u5085
 15343  1650  0832               	movf	setDimmerLights_ErrorClose@count,w
 15344  1651  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15345  1652                     u5085:	
 15346  1652  1803               	btfsc	3,0
 15347  1653  0008               	return
 15348                           
 15349                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 15350  1654  0020               	movlb	0	; select bank0
 15351  1655  0834               	movf	setDimmerLights_ErrorClose@i,w
 15352  1656  3E01               	addlw	1
 15353  1657  319C  2499  3196   	fcall	_DimmerLightsPointSelect
 15354                           
 15355                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 15356  165A  0020               	movlb	0	; select bank0
 15357  165B  0834               	movf	setDimmerLights_ErrorClose@i,w
 15358  165C  3E01               	addlw	1
 15359  165D  319D  255D  3196   	fcall	_getDimmerLights_Status
 15360  1660  3A01               	xorlw	1
 15361  1661  1D03               	skipz
 15362  1662  2E74               	goto	l6069
 15363                           
 15364                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 15365  1663  0020               	movlb	0	; select bank0
 15366  1664  086F               	movf	_DimmerLights,w
 15367  1665  3E09               	addlw	9
 15368  1666  0086               	movwf	6
 15369  1667  3001               	movlw	1	; select bank2/3
 15370  1668  0087               	movwf	7
 15371  1669  1701               	bsf	1,6
 15372                           
 15373                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 15374  166A  086F               	movf	_DimmerLights,w
 15375  166B  0086               	movwf	6
 15376  166C  3001               	movlw	1	; select bank2/3
 15377  166D  0087               	movwf	7
 15378  166E  1281               	bcf	1,5
 15379                           
 15380                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 15381  166F  0834               	movf	setDimmerLights_ErrorClose@i,w
 15382  1670  3E01               	addlw	1
 15383  1671  3194  24BB  3196   	fcall	_setDimmerLights_SwOff
 15384  1674                     l6069:	
 15385  1674  3001               	movlw	1
 15386  1675  0020               	movlb	0	; select bank0
 15387  1676  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15388  1677  3000               	movlw	0
 15389  1678  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15390  1679  2E49               	goto	l6071
 15391  167A                     l6073:	
 15392                           ;Dimmer_B1.c: 591: }
 15393                           ;Dimmer_B1.c: 592: }
 15394                           ;Dimmer_B1.c: 593: } else {
 15395                           
 15396                           
 15397                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 15398  167A  0020               	movlb	0	; select bank0
 15399  167B  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15400  167C  319C  2499  3196   	fcall	_DimmerLightsPointSelect
 15401                           
 15402                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 15403  167F  0020               	movlb	0	; select bank0
 15404  1680  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15405  1681  319D  255D  3196   	fcall	_getDimmerLights_Status
 15406  1684  3A01               	xorlw	1
 15407  1685  1D03               	skipz
 15408  1686  0008               	return
 15409                           
 15410                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 15411  1687  0020               	movlb	0	; select bank0
 15412  1688  086F               	movf	_DimmerLights,w
 15413  1689  3E09               	addlw	9
 15414  168A  0086               	movwf	6
 15415  168B  3001               	movlw	1	; select bank2/3
 15416  168C  0087               	movwf	7
 15417  168D  1701               	bsf	1,6
 15418                           
 15419                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 15420  168E  086F               	movf	_DimmerLights,w
 15421  168F  0086               	movwf	6
 15422  1690  3001               	movlw	1	; select bank2/3
 15423  1691  0087               	movwf	7
 15424  1692  1281               	bcf	1,5
 15425                           
 15426                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 15427  1693  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15428  1694  3194  24BB         	fcall	_setDimmerLights_SwOff
 15429  1696  0008               	return
 15430  1697                     __end_of_setDimmerLights_ErrorClose:	
 15431                           
 15432                           	psect	text96
 15433  14BB                     __ptext96:	
 15434 ;; *************** function _setDimmerLights_SwOff *****************
 15435 ;; Defined at:
 15436 ;;		line 536 in file "../src/Dimmer_B1.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  sw              1    wreg     unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  sw              1   16[BANK0 ] unsigned char 
 15441 ;;  command         1   15[BANK0 ] unsigned char 
 15442 ;; Return value:  Size  Location     Type
 15443 ;;		None               void
 15444 ;; Registers used:
 15445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15446 ;; Tracked objects:
 15447 ;;		On entry : 0/0
 15448 ;;		On exit  : 0/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;Total ram usage:        2 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:    8
 15458 ;; This function calls:
 15459 ;;		_DimmerLightsPointSelect
 15460 ;;		_getDelayOff_GO
 15461 ;;		_setDelayOff_GO
 15462 ;;		_setDimmerLights_Trigger
 15463 ;;		_setDimmerLights_TriggerAdj
 15464 ;; This function is called by:
 15465 ;;		_setDimmerLights_ErrorClose
 15466 ;;		_setRFSW_Control
 15467 ;;		_setSw_Main
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           
 15472                           ;psect for function _setDimmerLights_SwOff
 15473  14BB                     _setDimmerLights_SwOff:	
 15474                           
 15475                           ;incstack = 0
 15476                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15477                           ;setDimmerLights_SwOff@sw stored from wreg
 15478  14BB  0020               	movlb	0	; select bank0
 15479  14BC  00B0               	movwf	setDimmerLights_SwOff@sw
 15480                           
 15481                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15482  14BD  0830               	movf	setDimmerLights_SwOff@sw,w
 15483  14BE  319C  2499  3194   	fcall	_DimmerLightsPointSelect
 15484                           
 15485                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15486  14C1  0020               	movlb	0	; select bank0
 15487  14C2  086F               	movf	_DimmerLights,w
 15488  14C3  0086               	movwf	6
 15489  14C4  3001               	movlw	1	; select bank2/3
 15490  14C5  0087               	movwf	7
 15491  14C6  3000               	movlw	0
 15492  14C7  1A81               	btfsc	1,5
 15493  14C8  3001               	movlw	1
 15494  14C9  00AF               	movwf	setDimmerLights_SwOff@command
 15495                           
 15496                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15497  14CA  086F               	movf	_DimmerLights,w
 15498  14CB  3E09               	addlw	9
 15499  14CC  0086               	movwf	6
 15500  14CD  3001               	movlw	1	; select bank2/3
 15501  14CE  0087               	movwf	7
 15502  14CF  1F01               	btfss	1,6
 15503  14D0  0008               	return
 15504                           
 15505                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15506  14D1  086F               	movf	_DimmerLights,w
 15507  14D2  3E09               	addlw	9
 15508  14D3  0086               	movwf	6
 15509  14D4  3001               	movlw	1	; select bank2/3
 15510  14D5  0087               	movwf	7
 15511  14D6  1301               	bcf	1,6
 15512                           
 15513                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15514  14D7  086F               	movf	_DimmerLights,w
 15515  14D8  0086               	movwf	6
 15516  14D9  3001               	movlw	1	; select bank2/3
 15517  14DA  0087               	movwf	7
 15518  14DB  1E81               	btfss	1,5
 15519  14DC  2CEF               	goto	l5929
 15520                           
 15521                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15522  14DD  086F               	movf	_DimmerLights,w
 15523  14DE  3E09               	addlw	9
 15524  14DF  0086               	movwf	6
 15525  14E0  3001               	movlw	1	; select bank2/3
 15526  14E1  0087               	movwf	7
 15527  14E2  1F81               	btfss	1,7
 15528  14E3  0008               	return
 15529                           
 15530                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15531  14E4  086F               	movf	_DimmerLights,w
 15532  14E5  3E09               	addlw	9
 15533  14E6  0086               	movwf	6
 15534  14E7  3001               	movlw	1	; select bank2/3
 15535  14E8  0087               	movwf	7
 15536  14E9  1381               	bcf	1,7
 15537                           
 15538                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15539  14EA  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15540  14EB  0830               	movf	setDimmerLights_SwOff@sw,w
 15541  14EC  319F  275F         	fcall	_setDimmerLights_TriggerAdj
 15542                           
 15543                           ;Dimmer_B1.c: 545: }
 15544                           ;Dimmer_B1.c: 546: } else {
 15545  14EE  0008               	return
 15546  14EF                     l5929:	
 15547                           
 15548                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 15549  14EF  0020               	movlb	0	; select bank0
 15550  14F0  01A2               	clrf	setDimmerLights_Trigger@command
 15551  14F1  0830               	movf	setDimmerLights_SwOff@sw,w
 15552  14F2  319F  2722  3194   	fcall	_setDimmerLights_Trigger
 15553                           
 15554                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 15555  14F5  0020               	movlb	0	; select bank0
 15556  14F6  0830               	movf	setDimmerLights_SwOff@sw,w
 15557  14F7  319D  256D  3194   	fcall	_getDelayOff_GO
 15558  14FA  3A01               	xorlw	1
 15559  14FB  1D03               	skipz
 15560  14FC  0008               	return
 15561                           
 15562                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 15563  14FD  0020               	movlb	0	; select bank0
 15564  14FE  01AA               	clrf	setDelayOff_GO@command
 15565  14FF  01AB               	clrf	setDelayOff_GO@value
 15566  1500  0830               	movf	setDimmerLights_SwOff@sw,w
 15567  1501  3188  2009         	fcall	_setDelayOff_GO
 15568  1503  0008               	return
 15569  1504                     __end_of_setDimmerLights_SwOff:	
 15570                           
 15571                           	psect	text97
 15572  1F5F                     __ptext97:	
 15573 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15574 ;; Defined at:
 15575 ;;		line 785 in file "../src/Dimmer_B1.c"
 15576 ;; Parameters:    Size  Location     Type
 15577 ;;  lights          1    wreg     unsigned char 
 15578 ;;  command         1    2[BANK0 ] unsigned char 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  lights          1    4[BANK0 ] unsigned char 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;		None               void
 15583 ;; Registers used:
 15584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : 0/0
 15587 ;;		On exit  : 0/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15590 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;Total ram usage:        3 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    6
 15597 ;; This function calls:
 15598 ;;		_DimmerLightsPointSelect
 15599 ;; This function is called by:
 15600 ;;		_setDimmerLights_SwOff
 15601 ;;		_setDimmerLights_AdjControl
 15602 ;; This function uses a non-reentrant model
 15603 ;;
 15604                           
 15605                           
 15606                           ;psect for function _setDimmerLights_TriggerAdj
 15607  1F5F                     _setDimmerLights_TriggerAdj:	
 15608                           
 15609                           ;incstack = 0
 15610                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15611                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15612  1F5F  0020               	movlb	0	; select bank0
 15613  1F60  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15614                           
 15615                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15616  1F61  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15617  1F62  319C  2499         	fcall	_DimmerLightsPointSelect
 15618                           
 15619                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 15620  1F64  0020               	movlb	0	; select bank0
 15621  1F65  086F               	movf	_DimmerLights,w
 15622  1F66  3E08               	addlw	8
 15623  1F67  0086               	movwf	6
 15624  1F68  3001               	movlw	1	; select bank2/3
 15625  1F69  0087               	movwf	7
 15626  1F6A  1601               	bsf	1,4
 15627                           
 15628                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15629  1F6B  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15630  1F6C  3A01               	xorlw	1
 15631  1F6D  3000               	movlw	0
 15632  1F6E  1903               	skipnz
 15633  1F6F  3001               	movlw	1
 15634  1F70  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15635  1F71  086F               	movf	_DimmerLights,w
 15636  1F72  3E08               	addlw	8
 15637  1F73  0086               	movwf	6
 15638  1F74  3001               	movlw	1	; select bank2/3
 15639  1F75  0087               	movwf	7
 15640  1F76  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15641  1F77  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15642  1F78  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15643  1F79  0801               	movf	1,w
 15644  1F7A  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15645  1F7B  39F7               	andlw	-9
 15646  1F7C  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15647  1F7D  0081               	movwf	1
 15648  1F7E  0008               	return
 15649  1F7F                     __end_of_setDimmerLights_TriggerAdj:	
 15650                           
 15651                           	psect	text98
 15652  1F22                     __ptext98:	
 15653 ;; *************** function _setDimmerLights_Trigger *****************
 15654 ;; Defined at:
 15655 ;;		line 779 in file "../src/Dimmer_B1.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  lights          1    wreg     unsigned char 
 15658 ;;  command         1    2[BANK0 ] unsigned char 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;  lights          1    4[BANK0 ] unsigned char 
 15661 ;; Return value:  Size  Location     Type
 15662 ;;		None               void
 15663 ;; Registers used:
 15664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;Total ram usage:        3 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    6
 15677 ;; This function calls:
 15678 ;;		_DimmerLightsPointSelect
 15679 ;; This function is called by:
 15680 ;;		_setDimmerLights_SwOn
 15681 ;;		_setDimmerLights_SwOff
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           
 15686                           ;psect for function _setDimmerLights_Trigger
 15687  1F22                     _setDimmerLights_Trigger:	
 15688                           
 15689                           ;incstack = 0
 15690                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15691                           ;setDimmerLights_Trigger@lights stored from wreg
 15692  1F22  0020               	movlb	0	; select bank0
 15693  1F23  00A4               	movwf	setDimmerLights_Trigger@lights
 15694                           
 15695                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 15696  1F24  0824               	movf	setDimmerLights_Trigger@lights,w
 15697  1F25  319C  2499         	fcall	_DimmerLightsPointSelect
 15698                           
 15699                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 15700  1F27  0020               	movlb	0	; select bank0
 15701  1F28  086F               	movf	_DimmerLights,w
 15702  1F29  3E08               	addlw	8
 15703  1F2A  0086               	movwf	6
 15704  1F2B  3001               	movlw	1	; select bank2/3
 15705  1F2C  0087               	movwf	7
 15706  1F2D  1501               	bsf	1,2
 15707                           
 15708                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 15709  1F2E  0822               	movf	setDimmerLights_Trigger@command,w
 15710  1F2F  3A01               	xorlw	1
 15711  1F30  3000               	movlw	0
 15712  1F31  1903               	skipnz
 15713  1F32  3001               	movlw	1
 15714  1F33  00A3               	movwf	??_setDimmerLights_Trigger
 15715  1F34  086F               	movf	_DimmerLights,w
 15716  1F35  3E08               	addlw	8
 15717  1F36  0086               	movwf	6
 15718  1F37  3001               	movlw	1	; select bank2/3
 15719  1F38  0087               	movwf	7
 15720  1F39  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15721  1F3A  0801               	movf	1,w
 15722  1F3B  0623               	xorwf	??_setDimmerLights_Trigger,w
 15723  1F3C  39FD               	andlw	-3
 15724  1F3D  0623               	xorwf	??_setDimmerLights_Trigger,w
 15725  1F3E  0081               	movwf	1
 15726  1F3F  0008               	return
 15727  1F40                     __end_of_setDimmerLights_Trigger:	
 15728                           
 15729                           	psect	text99
 15730  0809                     __ptext99:	
 15731 ;; *************** function _setDelayOff_GO *****************
 15732 ;; Defined at:
 15733 ;;		line 83 in file "../src/DelayOff_B1.c"
 15734 ;; Parameters:    Size  Location     Type
 15735 ;;  sw              1    wreg     unsigned char 
 15736 ;;  command         1   10[BANK0 ] unsigned char 
 15737 ;;  value           1   11[BANK0 ] unsigned char 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  sw              1   14[BANK0 ] unsigned char 
 15740 ;; Return value:  Size  Location     Type
 15741 ;;		None               void
 15742 ;; Registers used:
 15743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15749 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;Total ram usage:        5 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    7
 15756 ;; This function calls:
 15757 ;;		_DelayOffPointSelect
 15758 ;;		_DelayTimejudge
 15759 ;; This function is called by:
 15760 ;;		_setDimmerLights_SwOff
 15761 ;;		_setRFSW_Control
 15762 ;; This function uses a non-reentrant model
 15763 ;;
 15764                           
 15765                           
 15766                           ;psect for function _setDelayOff_GO
 15767  0809                     _setDelayOff_GO:	
 15768                           
 15769                           ;incstack = 0
 15770                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15771                           ;setDelayOff_GO@sw stored from wreg
 15772  0809  0020               	movlb	0	; select bank0
 15773  080A  00AE               	movwf	setDelayOff_GO@sw
 15774                           
 15775                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15776  080B  082E               	movf	setDelayOff_GO@sw,w
 15777  080C  319C  248E  3188   	fcall	_DelayOffPointSelect
 15778                           
 15779                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15780  080F  0020               	movlb	0	; select bank0
 15781  0810  082A               	movf	setDelayOff_GO@command,w
 15782  0811  3A01               	xorlw	1
 15783  0812  3000               	movlw	0
 15784  0813  1903               	skipnz
 15785  0814  3001               	movlw	1
 15786  0815  00AC               	movwf	??_setDelayOff_GO
 15787  0816  0878               	movf	_DelayOff,w
 15788  0817  0086               	movwf	6
 15789  0818  3001               	movlw	1	; select bank2/3
 15790  0819  0087               	movwf	7
 15791  081A  0DAC               	rlf	??_setDelayOff_GO,f
 15792  081B  0801               	movf	1,w
 15793  081C  062C               	xorwf	??_setDelayOff_GO,w
 15794  081D  39FD               	andlw	-3
 15795  081E  062C               	xorwf	??_setDelayOff_GO,w
 15796  081F  0081               	movwf	1
 15797                           
 15798                           ;DelayOff_B1.c: 89: if (command == 1) {
 15799  0820  082A               	movf	setDelayOff_GO@command,w
 15800  0821  3A01               	xorlw	1
 15801  0822  1D03               	skipz
 15802  0823  284E               	goto	l5849
 15803                           
 15804                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15805  0824  082B               	movf	setDelayOff_GO@value,w
 15806  0825  3191  216F  3188   	fcall	_DelayTimejudge
 15807  0828  0020               	movlb	0	; select bank0
 15808  0829  00AC               	movwf	??_setDelayOff_GO
 15809  082A  0A78               	incf	_DelayOff,w
 15810  082B  0086               	movwf	6
 15811  082C  3001               	movlw	1	; select bank2/3
 15812  082D  0087               	movwf	7
 15813  082E  082C               	movf	??_setDelayOff_GO,w
 15814  082F  0081               	movwf	1
 15815                           
 15816                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15817  0830  300F               	movlw	15
 15818  0831  052B               	andwf	setDelayOff_GO@value,w
 15819  0832  00AC               	movwf	??_setDelayOff_GO
 15820  0833  082C               	movf	??_setDelayOff_GO,w
 15821  0834  3A05               	xorlw	5
 15822  0835  1903               	skipnz
 15823  0836  283B               	goto	l5843
 15824  0837  082B               	movf	setDelayOff_GO@value,w
 15825  0838  390F               	andlw	15
 15826  0839  1D03               	btfss	3,2
 15827  083A  2841               	goto	l5847
 15828  083B                     l5843:	
 15829  083B  3026               	movlw	38
 15830  083C  022B               	subwf	setDelayOff_GO@value,w
 15831  083D  1803               	skipnc
 15832  083E  2841               	goto	l5847
 15833                           
 15834                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15835  083F  082B               	movf	setDelayOff_GO@value,w
 15836  0840  2842               	goto	L8
 15837  0841                     l5847:	
 15838                           ;DelayOff_B1.c: 93: } else {
 15839                           
 15840                           
 15841                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15842  0841  3005               	movlw	5
 15843  0842                     L8:	
 15844  0842  00AC               	movwf	??_setDelayOff_GO
 15845  0843  082E               	movf	setDelayOff_GO@sw,w
 15846  0844  3E1A               	addlw	26
 15847  0845  076E               	addwf	_product,w
 15848  0846  00AD               	movwf	??_setDelayOff_GO+1
 15849  0847  082D               	movf	??_setDelayOff_GO+1,w
 15850  0848  0086               	movwf	6
 15851  0849  3002               	movlw	2	; select bank4/5
 15852  084A  0087               	movwf	7
 15853  084B  082C               	movf	??_setDelayOff_GO,w
 15854  084C  0081               	movwf	1
 15855                           
 15856                           ;DelayOff_B1.c: 95: }
 15857                           ;DelayOff_B1.c: 96: } else {
 15858  084D  2857               	goto	l5851
 15859  084E                     l5849:	
 15860                           
 15861                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15862  084E  082E               	movf	setDelayOff_GO@sw,w
 15863  084F  3E1A               	addlw	26
 15864  0850  076E               	addwf	_product,w
 15865  0851  00AC               	movwf	??_setDelayOff_GO
 15866  0852  082C               	movf	??_setDelayOff_GO,w
 15867  0853  0086               	movwf	6
 15868  0854  3002               	movlw	2	; select bank4/5
 15869  0855  0087               	movwf	7
 15870  0856  0181               	clrf	1
 15871  0857                     l5851:	
 15872                           
 15873                           ;DelayOff_B1.c: 98: }
 15874                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15875  0857  0878               	movf	_DelayOff,w
 15876  0858  3E02               	addlw	2
 15877  0859  0086               	movwf	6
 15878  085A  3001               	movlw	1	; select bank2/3
 15879  085B  0087               	movwf	7
 15880  085C  3000               	movlw	0
 15881  085D  3FC0               	movwi [0]fsr1
 15882  085E  3FC1               	movwi [1]fsr1
 15883                           
 15884                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15885  085F  0878               	movf	_DelayOff,w
 15886  0860  3E04               	addlw	4
 15887  0861  0086               	movwf	6
 15888  0862  3001               	movlw	1	; select bank2/3
 15889  0863  0087               	movwf	7
 15890  0864  0181               	clrf	1
 15891  0865  0008               	return
 15892  0866                     __end_of_setDelayOff_GO:	
 15893                           
 15894                           	psect	text100
 15895  116F                     __ptext100:	
 15896 ;; *************** function _DelayTimejudge *****************
 15897 ;; Defined at:
 15898 ;;		line 112 in file "../src/DelayOff_B1.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;  value           1    wreg     unsigned char 
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;  value           1    9[BANK0 ] unsigned char 
 15903 ;;  k               1    8[BANK0 ] unsigned char 
 15904 ;;  j               1    7[BANK0 ] unsigned char 
 15905 ;;  i               1    6[BANK0 ] unsigned char 
 15906 ;; Return value:  Size  Location     Type
 15907 ;;                  1    wreg      unsigned char 
 15908 ;; Registers used:
 15909 ;;		wreg, status,2, status,0, pclath, cstack
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;Total ram usage:        6 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:    6
 15922 ;; This function calls:
 15923 ;;		___bmul
 15924 ;; This function is called by:
 15925 ;;		_setDelayOff_GO
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           
 15930                           ;psect for function _DelayTimejudge
 15931  116F                     _DelayTimejudge:	
 15932                           
 15933                           ;incstack = 0
 15934                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15935                           ;DelayTimejudge@value stored from wreg
 15936  116F  0020               	movlb	0	; select bank0
 15937  1170  00A9               	movwf	DelayTimejudge@value
 15938                           
 15939                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15940  1171  3005               	movlw	5
 15941  1172  00A4               	movwf	??_DelayTimejudge
 15942  1173  0824               	movf	??_DelayTimejudge,w
 15943  1174  00A6               	movwf	DelayTimejudge@i
 15944  1175  01A7               	clrf	DelayTimejudge@j
 15945  1176  01A8               	clrf	DelayTimejudge@k
 15946                           
 15947                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15948  1177  3031               	movlw	49
 15949  1178  0229               	subwf	DelayTimejudge@value,w
 15950  1179  1803               	skipnc
 15951  117A  2997               	goto	l5743
 15952                           
 15953                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15954  117B  0829               	movf	DelayTimejudge@value,w
 15955  117C  390F               	andlw	15
 15956  117D  00A4               	movwf	??_DelayTimejudge
 15957  117E  0824               	movf	??_DelayTimejudge,w
 15958  117F  00A7               	movwf	DelayTimejudge@j
 15959                           
 15960                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15961  1180  0829               	movf	DelayTimejudge@value,w
 15962  1181  00A4               	movwf	??_DelayTimejudge
 15963  1182  3004               	movlw	4
 15964  1183                     u4685:	
 15965  1183  36A4               	lsrf	??_DelayTimejudge,f
 15966  1184  0B89               	decfsz	9,f
 15967  1185  2983               	goto	u4685
 15968  1186  0824               	movf	??_DelayTimejudge,w
 15969  1187  390F               	andlw	15
 15970  1188  00A5               	movwf	??_DelayTimejudge+1
 15971  1189  0825               	movf	??_DelayTimejudge+1,w
 15972  118A  00A8               	movwf	DelayTimejudge@k
 15973                           
 15974                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15975  118B  300A               	movlw	10
 15976  118C  00A4               	movwf	??_DelayTimejudge
 15977  118D  0824               	movf	??_DelayTimejudge,w
 15978  118E  00A0               	movwf	___bmul@multiplicand
 15979  118F  0828               	movf	DelayTimejudge@k,w
 15980  1190  319D  25E1         	fcall	___bmul
 15981  1192  0020               	movlb	0	; select bank0
 15982  1193  0727               	addwf	DelayTimejudge@j,w
 15983  1194  00A5               	movwf	??_DelayTimejudge+1
 15984  1195  0825               	movf	??_DelayTimejudge+1,w
 15985  1196  00A6               	movwf	DelayTimejudge@i
 15986  1197                     l5743:	
 15987                           
 15988                           ;DelayOff_B1.c: 118: }
 15989                           ;DelayOff_B1.c: 139: return i;
 15990  1197  0826               	movf	DelayTimejudge@i,w
 15991  1198  0008               	return
 15992  1199                     __end_of_DelayTimejudge:	
 15993                           
 15994                           	psect	text101
 15995  1DE1                     __ptext101:	
 15996 ;; *************** function ___bmul *****************
 15997 ;; Defined at:
 15998 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;  multiplier      1    wreg     unsigned char 
 16001 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16004 ;;  product         1    2[BANK0 ] unsigned char 
 16005 ;; Return value:  Size  Location     Type
 16006 ;;                  1    wreg      unsigned char 
 16007 ;; Registers used:
 16008 ;;		wreg, status,2, status,0
 16009 ;; Tracked objects:
 16010 ;;		On entry : 0/0
 16011 ;;		On exit  : 0/0
 16012 ;;		Unchanged: 0/0
 16013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16014 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;Total ram usage:        4 bytes
 16019 ;; Hardware stack levels used:    1
 16020 ;; Hardware stack levels required when called:    5
 16021 ;; This function calls:
 16022 ;;		Nothing
 16023 ;; This function is called by:
 16024 ;;		_DelayTimejudge
 16025 ;; This function uses a non-reentrant model
 16026 ;;
 16027                           
 16028                           
 16029                           ;psect for function ___bmul
 16030  1DE1                     ___bmul:	
 16031                           
 16032                           ;incstack = 0
 16033                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16034                           ;___bmul@multiplier stored from wreg
 16035  1DE1  0020               	movlb	0	; select bank0
 16036  1DE2  00A3               	movwf	___bmul@multiplier
 16037  1DE3  01A2               	clrf	___bmul@product
 16038  1DE4                     l5485:	
 16039  1DE4  1C23               	btfss	___bmul@multiplier,0
 16040  1DE5  2DEA               	goto	l5489
 16041  1DE6  0820               	movf	___bmul@multiplicand,w
 16042  1DE7  00A1               	movwf	??___bmul
 16043  1DE8  0821               	movf	??___bmul,w
 16044  1DE9  07A2               	addwf	___bmul@product,f
 16045  1DEA                     l5489:	
 16046  1DEA  1003               	clrc
 16047  1DEB  0DA0               	rlf	___bmul@multiplicand,f
 16048  1DEC  1003               	clrc
 16049  1DED  0CA3               	rrf	___bmul@multiplier,f
 16050  1DEE  08A3               	movf	___bmul@multiplier,f
 16051  1DEF  1D03               	skipz
 16052  1DF0  2DE4               	goto	l5485
 16053  1DF1  0822               	movf	___bmul@product,w
 16054  1DF2  0008               	return
 16055  1DF3                     __end_of___bmul:	
 16056                           
 16057                           	psect	text102
 16058  1D6D                     __ptext102:	
 16059 ;; *************** function _getDelayOff_GO *****************
 16060 ;; Defined at:
 16061 ;;		line 105 in file "../src/DelayOff_B1.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  sw              1    wreg     unsigned char 
 16064 ;; Auto vars:     Size  Location     Type
 16065 ;;  sw              1    2[BANK0 ] unsigned char 
 16066 ;;  go              1    3[BANK0 ] unsigned char 
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  1    wreg      unsigned char 
 16069 ;; Registers used:
 16070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;Total ram usage:        2 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    6
 16083 ;; This function calls:
 16084 ;;		_DelayOffPointSelect
 16085 ;; This function is called by:
 16086 ;;		_setDimmerLights_SwOff
 16087 ;;		_setRFSW_Control
 16088 ;; This function uses a non-reentrant model
 16089 ;;
 16090                           
 16091                           
 16092                           ;psect for function _getDelayOff_GO
 16093  1D6D                     _getDelayOff_GO:	
 16094                           
 16095                           ;incstack = 0
 16096                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16097                           ;getDelayOff_GO@sw stored from wreg
 16098  1D6D  0020               	movlb	0	; select bank0
 16099  1D6E  00A2               	movwf	getDelayOff_GO@sw
 16100                           
 16101                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16102  1D6F  0822               	movf	getDelayOff_GO@sw,w
 16103  1D70  319C  248E         	fcall	_DelayOffPointSelect
 16104                           
 16105                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16106  1D72  0878               	movf	_DelayOff,w
 16107  1D73  0086               	movwf	6
 16108  1D74  3001               	movlw	1	; select bank2/3
 16109  1D75  0087               	movwf	7
 16110  1D76  3000               	movlw	0
 16111  1D77  1881               	btfsc	1,1
 16112  1D78  3001               	movlw	1
 16113  1D79  0020               	movlb	0	; select bank0
 16114  1D7A  00A3               	movwf	getDelayOff_GO@go
 16115                           
 16116                           ;DelayOff_B1.c: 108: return go;
 16117  1D7B  0823               	movf	getDelayOff_GO@go,w
 16118  1D7C  0008               	return
 16119  1D7D                     __end_of_getDelayOff_GO:	
 16120                           
 16121                           	psect	text103
 16122  1D5D                     __ptext103:	
 16123 ;; *************** function _getDimmerLights_Status *****************
 16124 ;; Defined at:
 16125 ;;		line 457 in file "../src/Dimmer_B1.c"
 16126 ;; Parameters:    Size  Location     Type
 16127 ;;  lights          1    wreg     unsigned char 
 16128 ;; Auto vars:     Size  Location     Type
 16129 ;;  lights          1    2[BANK0 ] unsigned char 
 16130 ;;  status          1    3[BANK0 ] unsigned char 
 16131 ;; Return value:  Size  Location     Type
 16132 ;;                  1    wreg      unsigned char 
 16133 ;; Registers used:
 16134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16135 ;; Tracked objects:
 16136 ;;		On entry : 0/0
 16137 ;;		On exit  : 0/0
 16138 ;;		Unchanged: 0/0
 16139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16144 ;;Total ram usage:        2 bytes
 16145 ;; Hardware stack levels used:    1
 16146 ;; Hardware stack levels required when called:    6
 16147 ;; This function calls:
 16148 ;;		_DimmerLightsPointSelect
 16149 ;; This function is called by:
 16150 ;;		_setDimmerLights_ErrorClose
 16151 ;;		_getMain_LightsStatus
 16152 ;;		_setRFSW_Control
 16153 ;;		_setRFSW_AdjControl
 16154 ;; This function uses a non-reentrant model
 16155 ;;
 16156                           
 16157                           
 16158                           ;psect for function _getDimmerLights_Status
 16159  1D5D                     _getDimmerLights_Status:	
 16160                           
 16161                           ;incstack = 0
 16162                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16163                           ;getDimmerLights_Status@lights stored from wreg
 16164  1D5D  0020               	movlb	0	; select bank0
 16165  1D5E  00A2               	movwf	getDimmerLights_Status@lights
 16166                           
 16167                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16168  1D5F  0822               	movf	getDimmerLights_Status@lights,w
 16169  1D60  319C  2499         	fcall	_DimmerLightsPointSelect
 16170                           
 16171                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16172  1D62  0020               	movlb	0	; select bank0
 16173  1D63  086F               	movf	_DimmerLights,w
 16174  1D64  0086               	movwf	6
 16175  1D65  3001               	movlw	1	; select bank2/3
 16176  1D66  0087               	movwf	7
 16177  1D67  3000               	movlw	0
 16178  1D68  1A81               	btfsc	1,5
 16179  1D69  3001               	movlw	1
 16180  1D6A  00A3               	movwf	getDimmerLights_Status@status
 16181                           
 16182                           ;Dimmer_B1.c: 460: return status;
 16183  1D6B  0823               	movf	getDimmerLights_Status@status,w
 16184  1D6C  0008               	return
 16185  1D6D                     __end_of_getDimmerLights_Status:	
 16186                           
 16187                           	psect	text104
 16188  1C99                     __ptext104:	
 16189 ;; *************** function _DimmerLightsPointSelect *****************
 16190 ;; Defined at:
 16191 ;;		line 322 in file "../src/Dimmer_B1.c"
 16192 ;; Parameters:    Size  Location     Type
 16193 ;;  lights          1    wreg     unsigned char 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  lights          1    1[BANK0 ] unsigned char 
 16196 ;; Return value:  Size  Location     Type
 16197 ;;		None               void
 16198 ;; Registers used:
 16199 ;;		wreg
 16200 ;; Tracked objects:
 16201 ;;		On entry : 0/0
 16202 ;;		On exit  : 0/0
 16203 ;;		Unchanged: 0/0
 16204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;Total ram usage:        2 bytes
 16210 ;; Hardware stack levels used:    1
 16211 ;; Hardware stack levels required when called:    5
 16212 ;; This function calls:
 16213 ;;		Nothing
 16214 ;; This function is called by:
 16215 ;;		_setDimmerLights_Initialization
 16216 ;;		_setDimmerLights_Main
 16217 ;;		_getDimmerLights_Status
 16218 ;;		_setDimmerLights_SwOn
 16219 ;;		_setDimmerLights_SwOff
 16220 ;;		_setDimmerLights_AdjControl
 16221 ;;		_setDimmerLights_ErrorClose
 16222 ;;		_setDimmerLights
 16223 ;;		_setDimmerLights_Adj
 16224 ;;		_setDimmerLights_AdjRF
 16225 ;;		_setDimmerLights_Trigger
 16226 ;;		_setDimmerLights_TriggerAdj
 16227 ;;		_setDimmerLights_Status
 16228 ;;		_setDimmerLights_GO
 16229 ;;		_setDimmerLights_MaxmumValue
 16230 ;; This function uses a non-reentrant model
 16231 ;;
 16232                           
 16233                           
 16234                           ;psect for function _DimmerLightsPointSelect
 16235  1C99                     _DimmerLightsPointSelect:	
 16236                           
 16237                           ;incstack = 0
 16238                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16239                           ;DimmerLightsPointSelect@lights stored from wreg
 16240  1C99  0020               	movlb	0	; select bank0
 16241  1C9A  00A1               	movwf	DimmerLightsPointSelect@lights
 16242                           
 16243                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16244  1C9B  0821               	movf	DimmerLightsPointSelect@lights,w
 16245  1C9C  3A01               	xorlw	1
 16246  1C9D  1D03               	skipz
 16247  1C9E  0008               	return
 16248                           
 16249                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16250  1C9F  30C5               	movlw	_DimmerLights1& (0+255)
 16251  1CA0  00A0               	movwf	??_DimmerLightsPointSelect
 16252  1CA1  0820               	movf	??_DimmerLightsPointSelect,w
 16253  1CA2  00EF               	movwf	_DimmerLights
 16254  1CA3  0008               	return
 16255  1CA4                     __end_of_DimmerLightsPointSelect:	
 16256                           
 16257                           	psect	text105
 16258  16EF                     __ptext105:	
 16259 ;; *************** function _setBuz *****************
 16260 ;; Defined at:
 16261 ;;		line 22 in file "../src/Buzzer_B1.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  count           1    wreg     unsigned char 
 16264 ;;  time            2    9[BANK0 ] int 
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;  count           1   12[BANK0 ] unsigned char 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;		None               void
 16269 ;; Registers used:
 16270 ;;		wreg, status,2, status,0, pclath, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:        4 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    6
 16283 ;; This function calls:
 16284 ;;		___awdiv
 16285 ;; This function is called by:
 16286 ;;		_DlyOff_Main
 16287 ;;		_setDimmerLights_Main
 16288 ;;		_setDimmerLights_SwOn
 16289 ;;		_my_MainTimer
 16290 ;;		_setMain_Exception
 16291 ;;		_setTemp_Main
 16292 ;;		_setLog_Code
 16293 ;;		_setControl_Lights_Table
 16294 ;;		_setRFSW_Control
 16295 ;;		_setSw_Main
 16296 ;; This function uses a non-reentrant model
 16297 ;;
 16298                           
 16299                           
 16300                           ;psect for function _setBuz
 16301  16EF                     _setBuz:	
 16302                           
 16303                           ;incstack = 0
 16304                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16305                           ;setBuz@count stored from wreg
 16306  16EF  0020               	movlb	0	; select bank0
 16307  16F0  00AC               	movwf	setBuz@count
 16308                           
 16309                           ;Buzzer_B1.c: 23: time /= 10;
 16310  16F1  300A               	movlw	10
 16311  16F2  00A0               	movwf	___awdiv@divisor
 16312  16F3  3000               	movlw	0
 16313  16F4  00A1               	movwf	___awdiv@divisor+1
 16314  16F5  082A               	movf	setBuz@time+1,w
 16315  16F6  01A3               	clrf	___awdiv@dividend+1
 16316  16F7  07A3               	addwf	___awdiv@dividend+1,f
 16317  16F8  0829               	movf	setBuz@time,w
 16318  16F9  01A2               	clrf	___awdiv@dividend
 16319  16FA  07A2               	addwf	___awdiv@dividend,f
 16320  16FB  3195  25EB  3196   	fcall	___awdiv
 16321  16FE  0020               	movlb	0	; select bank0
 16322  16FF  0821               	movf	?___awdiv+1,w
 16323  1700  01AA               	clrf	setBuz@time+1
 16324  1701  07AA               	addwf	setBuz@time+1,f
 16325  1702  0820               	movf	?___awdiv,w
 16326  1703  01A9               	clrf	setBuz@time
 16327  1704  07A9               	addwf	setBuz@time,f
 16328                           
 16329                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16330  1705  0021               	movlb	1	; select bank1
 16331  1706  1C2F               	btfss	_Buz1^(0+128),0
 16332  1707  0008               	return
 16333                           
 16334                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16335  1708  18AF               	btfsc	_Buz1^(0+128),1
 16336  1709  2F20               	goto	l84
 16337                           
 16338                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16339  170A  14AF               	bsf	_Buz1^(0+128),1
 16340                           
 16341                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16342  170B  01B0               	clrf	(_Buz1^(0+128)+1)
 16343  170C  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16344                           
 16345                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16346  170D  0020               	movlb	0	; select bank0
 16347  170E  082C               	movf	setBuz@count,w
 16348  170F  00AB               	movwf	??_setBuz
 16349  1710  082B               	movf	??_setBuz,w
 16350  1711  0021               	movlb	1	; select bank1
 16351  1712  00B2               	movwf	(_Buz1^(0+128)+3)
 16352                           
 16353                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16354  1713  0020               	movlb	0	; select bank0
 16355  1714  082A               	movf	setBuz@time+1,w
 16356  1715  0021               	movlb	1	; select bank1
 16357  1716  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16358  1717  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16359  1718  0020               	movlb	0	; select bank0
 16360  1719  0829               	movf	setBuz@time,w
 16361  171A  0021               	movlb	1	; select bank1
 16362  171B  01B5               	clrf	(_Buz1^(0+128)+6)
 16363  171C  07B5               	addwf	(_Buz1^(0+128)+6),f
 16364                           
 16365                           ;Buzzer_B1.c: 30: RB3 = 1;
 16366  171D  0020               	movlb	0	; select bank0
 16367  171E  158D               	bsf	13,3	;volatile
 16368                           
 16369                           ;Buzzer_B1.c: 31: } else {
 16370  171F  0008               	return
 16371  1720                     l84:	
 16372                           
 16373                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16374  1720  19AF               	btfsc	_Buz1^(0+128),3
 16375  1721  2F34               	goto	l86
 16376                           
 16377                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16378  1722  15AF               	bsf	_Buz1^(0+128),3
 16379                           
 16380                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16381  1723  0020               	movlb	0	; select bank0
 16382  1724  082C               	movf	setBuz@count,w
 16383  1725  00AB               	movwf	??_setBuz
 16384  1726  082B               	movf	??_setBuz,w
 16385  1727  0021               	movlb	1	; select bank1
 16386  1728  00B3               	movwf	(_Buz1^(0+128)+4)
 16387                           
 16388                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16389  1729  0020               	movlb	0	; select bank0
 16390  172A  082A               	movf	setBuz@time+1,w
 16391  172B  0021               	movlb	1	; select bank1
 16392  172C  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16393  172D  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16394  172E  0020               	movlb	0	; select bank0
 16395  172F  0829               	movf	setBuz@time,w
 16396  1730  0021               	movlb	1	; select bank1
 16397  1731  01B7               	clrf	(_Buz1^(0+128)+8)
 16398  1732  07B7               	addwf	(_Buz1^(0+128)+8),f
 16399                           
 16400                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16401  1733  0008               	return
 16402  1734                     l86:	
 16403  1734  1A2F               	btfsc	_Buz1^(0+128),4
 16404  1735  0008               	return
 16405                           
 16406                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16407  1736  162F               	bsf	_Buz1^(0+128),4
 16408                           
 16409                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16410  1737  0020               	movlb	0	; select bank0
 16411  1738  082C               	movf	setBuz@count,w
 16412  1739  00AB               	movwf	??_setBuz
 16413  173A  082B               	movf	??_setBuz,w
 16414  173B  0021               	movlb	1	; select bank1
 16415  173C  00B4               	movwf	(_Buz1^(0+128)+5)
 16416                           
 16417                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16418  173D  0020               	movlb	0	; select bank0
 16419  173E  082A               	movf	setBuz@time+1,w
 16420  173F  0021               	movlb	1	; select bank1
 16421  1740  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16422  1741  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16423  1742  0020               	movlb	0	; select bank0
 16424  1743  0829               	movf	setBuz@time,w
 16425  1744  0021               	movlb	1	; select bank1
 16426  1745  01B9               	clrf	(_Buz1^(0+128)+10)
 16427  1746  07B9               	addwf	(_Buz1^(0+128)+10),f
 16428  1747  0008               	return
 16429  1748                     __end_of_setBuz:	
 16430                           
 16431                           	psect	text106
 16432  15EB                     __ptext106:	
 16433 ;; *************** function ___awdiv *****************
 16434 ;; Defined at:
 16435 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16436 ;; Parameters:    Size  Location     Type
 16437 ;;  divisor         2    0[BANK0 ] int 
 16438 ;;  dividend        2    2[BANK0 ] int 
 16439 ;; Auto vars:     Size  Location     Type
 16440 ;;  quotient        2    7[BANK0 ] int 
 16441 ;;  sign            1    6[BANK0 ] unsigned char 
 16442 ;;  counter         1    5[BANK0 ] unsigned char 
 16443 ;; Return value:  Size  Location     Type
 16444 ;;                  2    0[BANK0 ] int 
 16445 ;; Registers used:
 16446 ;;		wreg, status,2, status,0
 16447 ;; Tracked objects:
 16448 ;;		On entry : 0/0
 16449 ;;		On exit  : 0/0
 16450 ;;		Unchanged: 0/0
 16451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;Total ram usage:        9 bytes
 16457 ;; Hardware stack levels used:    1
 16458 ;; Hardware stack levels required when called:    5
 16459 ;; This function calls:
 16460 ;;		Nothing
 16461 ;; This function is called by:
 16462 ;;		_setBuz
 16463 ;; This function uses a non-reentrant model
 16464 ;;
 16465                           
 16466                           
 16467                           ;psect for function ___awdiv
 16468  15EB                     ___awdiv:	
 16469                           
 16470                           ;incstack = 0
 16471                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16472  15EB  0020               	movlb	0	; select bank0
 16473  15EC  01A6               	clrf	___awdiv@sign
 16474  15ED  1FA1               	btfss	___awdiv@divisor+1,7
 16475  15EE  2DF6               	goto	l5767
 16476  15EF  09A0               	comf	___awdiv@divisor,f
 16477  15F0  09A1               	comf	___awdiv@divisor+1,f
 16478  15F1  0AA0               	incf	___awdiv@divisor,f
 16479  15F2  1903               	skipnz
 16480  15F3  0AA1               	incf	___awdiv@divisor+1,f
 16481  15F4  01A6               	clrf	___awdiv@sign
 16482  15F5  0AA6               	incf	___awdiv@sign,f
 16483  15F6                     l5767:	
 16484  15F6  1FA3               	btfss	___awdiv@dividend+1,7
 16485  15F7  2E01               	goto	l5773
 16486  15F8  09A2               	comf	___awdiv@dividend,f
 16487  15F9  09A3               	comf	___awdiv@dividend+1,f
 16488  15FA  0AA2               	incf	___awdiv@dividend,f
 16489  15FB  1903               	skipnz
 16490  15FC  0AA3               	incf	___awdiv@dividend+1,f
 16491  15FD  3001               	movlw	1
 16492  15FE  00A4               	movwf	??___awdiv
 16493  15FF  0824               	movf	??___awdiv,w
 16494  1600  06A6               	xorwf	___awdiv@sign,f
 16495  1601                     l5773:	
 16496  1601  01A7               	clrf	___awdiv@quotient
 16497  1602  01A8               	clrf	___awdiv@quotient+1
 16498  1603  0821               	movf	___awdiv@divisor+1,w
 16499  1604  0420               	iorwf	___awdiv@divisor,w
 16500  1605  1903               	skipnz
 16501  1606  2E30               	goto	l5795
 16502  1607  01A5               	clrf	___awdiv@counter
 16503  1608  0AA5               	incf	___awdiv@counter,f
 16504  1609                     l5783:	
 16505  1609  1BA1               	btfsc	___awdiv@divisor+1,7
 16506  160A  2E15               	goto	l5785
 16507  160B  3001               	movlw	1
 16508  160C                     u4735:	
 16509  160C  35A0               	lslf	___awdiv@divisor,f
 16510  160D  0DA1               	rlf	___awdiv@divisor+1,f
 16511  160E  0B89               	decfsz	9,f
 16512  160F  2E0C               	goto	u4735
 16513  1610  3001               	movlw	1
 16514  1611  00A4               	movwf	??___awdiv
 16515  1612  0824               	movf	??___awdiv,w
 16516  1613  07A5               	addwf	___awdiv@counter,f
 16517  1614  2E09               	goto	l5783
 16518  1615                     l5785:	
 16519  1615  3001               	movlw	1
 16520  1616                     u4755:	
 16521  1616  35A7               	lslf	___awdiv@quotient,f
 16522  1617  0DA8               	rlf	___awdiv@quotient+1,f
 16523  1618  0B89               	decfsz	9,f
 16524  1619  2E16               	goto	u4755
 16525  161A  0821               	movf	___awdiv@divisor+1,w
 16526  161B  0223               	subwf	___awdiv@dividend+1,w
 16527  161C  1D03               	skipz
 16528  161D  2E20               	goto	u4765
 16529  161E  0820               	movf	___awdiv@divisor,w
 16530  161F  0222               	subwf	___awdiv@dividend,w
 16531  1620                     u4765:	
 16532  1620  1C03               	skipc
 16533  1621  2E27               	goto	l5791
 16534  1622  0820               	movf	___awdiv@divisor,w
 16535  1623  02A2               	subwf	___awdiv@dividend,f
 16536  1624  0821               	movf	___awdiv@divisor+1,w
 16537  1625  3BA3               	subwfb	___awdiv@dividend+1,f
 16538  1626  1427               	bsf	___awdiv@quotient,0
 16539  1627                     l5791:	
 16540  1627  3001               	movlw	1
 16541  1628                     u4775:	
 16542  1628  36A1               	lsrf	___awdiv@divisor+1,f
 16543  1629  0CA0               	rrf	___awdiv@divisor,f
 16544  162A  0B89               	decfsz	9,f
 16545  162B  2E28               	goto	u4775
 16546  162C  3001               	movlw	1
 16547  162D  02A5               	subwf	___awdiv@counter,f
 16548  162E  1D03               	btfss	3,2
 16549  162F  2E15               	goto	l5785
 16550  1630                     l5795:	
 16551  1630  0826               	movf	___awdiv@sign,w
 16552  1631  1903               	btfsc	3,2
 16553  1632  2E38               	goto	l5799
 16554  1633  09A7               	comf	___awdiv@quotient,f
 16555  1634  09A8               	comf	___awdiv@quotient+1,f
 16556  1635  0AA7               	incf	___awdiv@quotient,f
 16557  1636  1903               	skipnz
 16558  1637  0AA8               	incf	___awdiv@quotient+1,f
 16559  1638                     l5799:	
 16560  1638  0828               	movf	___awdiv@quotient+1,w
 16561  1639  01A1               	clrf	?___awdiv+1
 16562  163A  07A1               	addwf	?___awdiv+1,f
 16563  163B  0827               	movf	___awdiv@quotient,w
 16564  163C  01A0               	clrf	?___awdiv
 16565  163D  07A0               	addwf	?___awdiv,f
 16566  163E  0008               	return
 16567  163F                     __end_of___awdiv:	
 16568                           
 16569                           	psect	text107
 16570  1C1D                     __ptext107:	
 16571 ;; *************** function _DelayOff_Initialization *****************
 16572 ;; Defined at:
 16573 ;;		line 26 in file "../src/DelayOff_B1.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;		None
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;		None
 16578 ;; Return value:  Size  Location     Type
 16579 ;;		None               void
 16580 ;; Registers used:
 16581 ;;		wreg, status,2, status,0, pclath, cstack
 16582 ;; Tracked objects:
 16583 ;;		On entry : 0/0
 16584 ;;		On exit  : 0/0
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;Total ram usage:        0 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    7
 16594 ;; This function calls:
 16595 ;;		_DlyOff_Initialization
 16596 ;; This function is called by:
 16597 ;;		_main
 16598 ;; This function uses a non-reentrant model
 16599 ;;
 16600                           
 16601                           
 16602                           ;psect for function _DelayOff_Initialization
 16603  1C1D                     _DelayOff_Initialization:	
 16604                           
 16605                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16606                           
 16607                           ;incstack = 0
 16608                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16609  1C1D  3001               	movlw	1
 16610  1C1E  319C  243B         	fcall	_DlyOff_Initialization
 16611  1C20  0008               	return
 16612  1C21                     __end_of_DelayOff_Initialization:	
 16613                           
 16614                           	psect	text108
 16615  1C3B                     __ptext108:	
 16616 ;; *************** function _DlyOff_Initialization *****************
 16617 ;; Defined at:
 16618 ;;		line 56 in file "../src/DelayOff_B1.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;  sw              1    wreg     unsigned char 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  sw              1    2[BANK0 ] unsigned char 
 16623 ;; Return value:  Size  Location     Type
 16624 ;;		None               void
 16625 ;; Registers used:
 16626 ;;		wreg, status,2, status,0, pclath, cstack
 16627 ;; Tracked objects:
 16628 ;;		On entry : 0/0
 16629 ;;		On exit  : 0/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;Total ram usage:        1 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; Hardware stack levels required when called:    6
 16639 ;; This function calls:
 16640 ;;		_DelayOffPointSelect
 16641 ;; This function is called by:
 16642 ;;		_DelayOff_Initialization
 16643 ;; This function uses a non-reentrant model
 16644 ;;
 16645                           
 16646                           
 16647                           ;psect for function _DlyOff_Initialization
 16648  1C3B                     _DlyOff_Initialization:	
 16649                           
 16650                           ;incstack = 0
 16651                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16652                           ;DlyOff_Initialization@sw stored from wreg
 16653  1C3B  0020               	movlb	0	; select bank0
 16654  1C3C  00A2               	movwf	DlyOff_Initialization@sw
 16655                           
 16656                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16657  1C3D  0822               	movf	DlyOff_Initialization@sw,w
 16658  1C3E  319C  248E         	fcall	_DelayOffPointSelect
 16659  1C40  0008               	return
 16660  1C41                     __end_of_DlyOff_Initialization:	
 16661                           
 16662                           	psect	text109
 16663  1C8E                     __ptext109:	
 16664 ;; *************** function _DelayOffPointSelect *****************
 16665 ;; Defined at:
 16666 ;;		line 7 in file "../src/DelayOff_B1.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  sw              1    wreg     unsigned char 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  sw              1    1[BANK0 ] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;		None               void
 16673 ;; Registers used:
 16674 ;;		wreg
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;Total ram usage:        2 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    5
 16687 ;; This function calls:
 16688 ;;		Nothing
 16689 ;; This function is called by:
 16690 ;;		_DlyOff_Initialization
 16691 ;;		_DlyOff_Main
 16692 ;;		_setDelayOff_GO
 16693 ;;		_getDelayOff_GO
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           
 16698                           ;psect for function _DelayOffPointSelect
 16699  1C8E                     _DelayOffPointSelect:	
 16700                           
 16701                           ;incstack = 0
 16702                           ; Regs used in _DelayOffPointSelect: [wreg]
 16703                           ;DelayOffPointSelect@sw stored from wreg
 16704  1C8E  0020               	movlb	0	; select bank0
 16705  1C8F  00A1               	movwf	DelayOffPointSelect@sw
 16706                           
 16707                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16708  1C90  0821               	movf	DelayOffPointSelect@sw,w
 16709  1C91  3A01               	xorlw	1
 16710  1C92  1D03               	skipz
 16711  1C93  0008               	return
 16712                           
 16713                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16714  1C94  30DD               	movlw	_DlySw1& (0+255)
 16715  1C95  00A0               	movwf	??_DelayOffPointSelect
 16716  1C96  0820               	movf	??_DelayOffPointSelect,w
 16717  1C97  00F8               	movwf	_DelayOff
 16718  1C98  0008               	return
 16719  1C99                     __end_of_DelayOffPointSelect:	
 16720                           
 16721                           	psect	text110
 16722  1E7A                     __ptext110:	
 16723 ;; *************** function _CC2500_PowerOnInitial *****************
 16724 ;; Defined at:
 16725 ;;		line 119 in file "../src/CC2500_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;		None
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;		None
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        0 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    8
 16746 ;; This function calls:
 16747 ;;		_CC2500_ClearRXFIFO
 16748 ;;		_CC2500_ClearTXFIFO
 16749 ;;		_CC2500_FrequencyCabr
 16750 ;;		_CC2500_InitPATable
 16751 ;;		_CC2500_InitSetREG
 16752 ;;		_CC2500_PowerRST
 16753 ;;		_CC2500_SIDLEMode
 16754 ;; This function is called by:
 16755 ;;		_main
 16756 ;; This function uses a non-reentrant model
 16757 ;;
 16758                           
 16759                           
 16760                           ;psect for function _CC2500_PowerOnInitial
 16761  1E7A                     _CC2500_PowerOnInitial:	
 16762                           
 16763                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16764                           
 16765                           ;incstack = 0
 16766                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16767  1E7A  3194  2478  319E   	fcall	_CC2500_PowerRST
 16768                           
 16769                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16770  1E7D  3191  2145  319E   	fcall	_CC2500_InitSetREG
 16771                           
 16772                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16773  1E80  319F  2740  319E   	fcall	_CC2500_InitPATable
 16774                           
 16775                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16776  1E83  319C  2415  319E   	fcall	_CC2500_ClearTXFIFO
 16777                           
 16778                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16779  1E86  319C  2411  319E   	fcall	_CC2500_ClearRXFIFO
 16780                           
 16781                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16782  1E89  319C  24DB  319E   	fcall	_CC2500_FrequencyCabr
 16783                           
 16784                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16785  1E8C  319C  2419         	fcall	_CC2500_SIDLEMode
 16786  1E8E  0008               	return
 16787  1E8F                     __end_of_CC2500_PowerOnInitial:	
 16788                           
 16789                           	psect	text111
 16790  1C19                     __ptext111:	
 16791 ;; *************** function _CC2500_SIDLEMode *****************
 16792 ;; Defined at:
 16793 ;;		line 209 in file "../src/CC2500_B1.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;		None
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;		None
 16798 ;; Return value:  Size  Location     Type
 16799 ;;		None               void
 16800 ;; Registers used:
 16801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16802 ;; Tracked objects:
 16803 ;;		On entry : 0/0
 16804 ;;		On exit  : 0/0
 16805 ;;		Unchanged: 0/0
 16806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;Total ram usage:        0 bytes
 16812 ;; Hardware stack levels used:    1
 16813 ;; Hardware stack levels required when called:    7
 16814 ;; This function calls:
 16815 ;;		_CC2500_WriteCommand
 16816 ;; This function is called by:
 16817 ;;		_CC2500_PowerOnInitial
 16818 ;; This function uses a non-reentrant model
 16819 ;;
 16820                           
 16821                           
 16822                           ;psect for function _CC2500_SIDLEMode
 16823  1C19                     _CC2500_SIDLEMode:	
 16824                           
 16825                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16826                           
 16827                           ;incstack = 0
 16828                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16829  1C19  3036               	movlw	54
 16830  1C1A  319E  26D3         	fcall	_CC2500_WriteCommand
 16831  1C1C  0008               	return
 16832  1C1D                     __end_of_CC2500_SIDLEMode:	
 16833                           
 16834                           	psect	text112
 16835  1478                     __ptext112:	
 16836 ;; *************** function _CC2500_PowerRST *****************
 16837 ;; Defined at:
 16838 ;;		line 132 in file "../src/CC2500_B1.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;		None
 16841 ;; Auto vars:     Size  Location     Type
 16842 ;;		None
 16843 ;; Return value:  Size  Location     Type
 16844 ;;		None               void
 16845 ;; Registers used:
 16846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16847 ;; Tracked objects:
 16848 ;;		On entry : 0/0
 16849 ;;		On exit  : 0/0
 16850 ;;		Unchanged: 0/0
 16851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;Total ram usage:        1 bytes
 16857 ;; Hardware stack levels used:    1
 16858 ;; Hardware stack levels required when called:    6
 16859 ;; This function calls:
 16860 ;;		_CC2500_WriteByte
 16861 ;;		_DelayTime_1us
 16862 ;;		_Timeout_Counter
 16863 ;;		_set_TimeoutCleared
 16864 ;; This function is called by:
 16865 ;;		_CC2500_PowerOnInitial
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           
 16870                           ;psect for function _CC2500_PowerRST
 16871  1478                     _CC2500_PowerRST:	
 16872                           
 16873                           ;CC2500_B1.c: 133: RC3 = 0;
 16874                           
 16875                           ;incstack = 0
 16876                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16877  1478  0020               	movlb	0	; select bank0
 16878  1479  118E               	bcf	14,3	;volatile
 16879                           
 16880                           ;CC2500_B1.c: 134: RC4 = 0;
 16881  147A  120E               	bcf	14,4	;volatile
 16882                           
 16883                           ;CC2500_B1.c: 135: RC0 = 1;
 16884  147B  140E               	bsf	14,0	;volatile
 16885                           
 16886                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16887  147C  300A               	movlw	10
 16888  147D  00A0               	movwf	DelayTime_1us@count
 16889  147E  3000               	movlw	0
 16890  147F  00A1               	movwf	DelayTime_1us@count+1
 16891  1480  3190  20F8  3194   	fcall	_DelayTime_1us
 16892                           
 16893                           ;CC2500_B1.c: 137: RC0 = 0;
 16894  1483  0020               	movlb	0	; select bank0
 16895  1484  100E               	bcf	14,0	;volatile
 16896                           
 16897                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16898  1485  300A               	movlw	10
 16899  1486  00A0               	movwf	DelayTime_1us@count
 16900  1487  3000               	movlw	0
 16901  1488  00A1               	movwf	DelayTime_1us@count+1
 16902  1489  3190  20F8  3194   	fcall	_DelayTime_1us
 16903                           
 16904                           ;CC2500_B1.c: 139: RC0 = 1;
 16905  148C  0020               	movlb	0	; select bank0
 16906  148D  140E               	bsf	14,0	;volatile
 16907                           
 16908                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16909  148E  3028               	movlw	40
 16910  148F  00A0               	movwf	DelayTime_1us@count
 16911  1490  3000               	movlw	0
 16912  1491  00A1               	movwf	DelayTime_1us@count+1
 16913  1492  3190  20F8  3194   	fcall	_DelayTime_1us
 16914                           
 16915                           ;CC2500_B1.c: 141: RC0 = 0;
 16916  1495  0020               	movlb	0	; select bank0
 16917  1496  100E               	bcf	14,0	;volatile
 16918                           
 16919                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16920  1497  3030               	movlw	48
 16921  1498  00A6               	movwf	??_CC2500_PowerRST
 16922  1499  0826               	movf	??_CC2500_PowerRST,w
 16923  149A  00FB               	movwf	_SPI0Buffer
 16924                           
 16925                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16926  149B  2C9F               	goto	l6719
 16927  149C                     l6717:	
 16928                           
 16929                           ;CC2500_B1.c: 144: Timeout_Counter();
 16930  149C  319E  2665  3194   	fcall	_Timeout_Counter
 16931  149F                     l6719:	
 16932  149F  0020               	movlb	0	; select bank0
 16933  14A0  1E8E               	btfss	14,5	;volatile
 16934  14A1  2CA5               	goto	l6723
 16935  14A2  0021               	movlb	1	; select bank1
 16936  14A3  1D2C               	btfss	(_myMain^(0+128)+12),2
 16937  14A4  2C9C               	goto	l6717
 16938  14A5                     l6723:	
 16939                           
 16940                           ;CC2500_B1.c: 145: };
 16941                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16942  14A5  319C  2431  3194   	fcall	_set_TimeoutCleared
 16943                           
 16944                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 16945  14A8  319E  263D  3194   	fcall	_CC2500_WriteByte
 16946                           
 16947                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 16948  14AB  2CAF               	goto	l6729
 16949  14AC                     l6727:	
 16950                           
 16951                           ;CC2500_B1.c: 149: Timeout_Counter();
 16952  14AC  319E  2665  3194   	fcall	_Timeout_Counter
 16953  14AF                     l6729:	
 16954  14AF  0020               	movlb	0	; select bank0
 16955  14B0  1E8E               	btfss	14,5	;volatile
 16956  14B1  2CB5               	goto	l6733
 16957  14B2  0021               	movlb	1	; select bank1
 16958  14B3  1D2C               	btfss	(_myMain^(0+128)+12),2
 16959  14B4  2CAC               	goto	l6727
 16960  14B5                     l6733:	
 16961                           
 16962                           ;CC2500_B1.c: 150: };
 16963                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 16964  14B5  319C  2431         	fcall	_set_TimeoutCleared
 16965                           
 16966                           ;CC2500_B1.c: 152: RC4 = 0;
 16967  14B7  0020               	movlb	0	; select bank0
 16968  14B8  120E               	bcf	14,4	;volatile
 16969                           
 16970                           ;CC2500_B1.c: 153: RC0 = 1;
 16971  14B9  140E               	bsf	14,0	;volatile
 16972  14BA  0008               	return
 16973  14BB                     __end_of_CC2500_PowerRST:	
 16974                           
 16975                           	psect	text113
 16976  1145                     __ptext113:	
 16977 ;; *************** function _CC2500_InitSetREG *****************
 16978 ;; Defined at:
 16979 ;;		line 159 in file "../src/CC2500_B1.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;		None
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16984 ;;  temp2           1    7[BANK0 ] unsigned char 
 16985 ;;  temp1           1    6[BANK0 ] unsigned char 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;		None               void
 16988 ;; Registers used:
 16989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;Total ram usage:        4 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    7
 17002 ;; This function calls:
 17003 ;;		_CC2500_WriteREG
 17004 ;; This function is called by:
 17005 ;;		_CC2500_PowerOnInitial
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           
 17010                           ;psect for function _CC2500_InitSetREG
 17011  1145                     _CC2500_InitSetREG:	
 17012                           
 17013                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17014                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17015                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17016                           
 17017                           ;incstack = 0
 17018                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17019  1145  0020               	movlb	0	; select bank0
 17020  1146  01A8               	clrf	CC2500_InitSetREG@loop_c
 17021  1147                     L9:	
 17022  1147  302F               	movlw	47
 17023  1148  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17024  1149  1803               	btfsc	3,0
 17025  114A  0008               	return
 17026                           
 17027                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17028  114B  0828               	movf	CC2500_InitSetREG@loop_c,w
 17029  114C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17030  114D  0084               	movwf	4
 17031  114E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17032  114F  1803               	skipnc
 17033  1150  3E01               	addlw	1
 17034  1151  0085               	movwf	5
 17035  1152  0800               	movf	0,w	;code access
 17036  1153  00A5               	movwf	??_CC2500_InitSetREG
 17037  1154  0825               	movf	??_CC2500_InitSetREG,w
 17038  1155  00A6               	movwf	CC2500_InitSetREG@temp1
 17039                           
 17040                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17041  1156  0828               	movf	CC2500_InitSetREG@loop_c,w
 17042  1157  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17043  1158  0084               	movwf	4
 17044  1159  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17045  115A  1803               	skipnc
 17046  115B  3E01               	addlw	1
 17047  115C  0085               	movwf	5
 17048  115D  0800               	movf	0,w	;code access
 17049  115E  00A5               	movwf	??_CC2500_InitSetREG
 17050  115F  0825               	movf	??_CC2500_InitSetREG,w
 17051  1160  00A7               	movwf	CC2500_InitSetREG@temp2
 17052                           
 17053                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17054  1161  0827               	movf	CC2500_InitSetREG@temp2,w
 17055  1162  00A5               	movwf	??_CC2500_InitSetREG
 17056  1163  0825               	movf	??_CC2500_InitSetREG,w
 17057  1164  00A2               	movwf	CC2500_WriteREG@value
 17058  1165  0826               	movf	CC2500_InitSetREG@temp1,w
 17059  1166  319F  27DF  3191   	fcall	_CC2500_WriteREG
 17060  1169  3001               	movlw	1
 17061  116A  0020               	movlb	0	; select bank0
 17062  116B  00A5               	movwf	??_CC2500_InitSetREG
 17063  116C  0825               	movf	??_CC2500_InitSetREG,w
 17064  116D  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17065  116E  2947               	goto	L9
 17066  116F                     __end_of_CC2500_InitSetREG:	
 17067                           
 17068                           	psect	text114
 17069  1F40                     __ptext114:	
 17070 ;; *************** function _CC2500_InitPATable *****************
 17071 ;; Defined at:
 17072 ;;		line 174 in file "../src/CC2500_B1.c"
 17073 ;; Parameters:    Size  Location     Type
 17074 ;;		None
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17077 ;;  temp            1    6[BANK0 ] unsigned char 
 17078 ;; Return value:  Size  Location     Type
 17079 ;;		None               void
 17080 ;; Registers used:
 17081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;Total ram usage:        3 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; Hardware stack levels required when called:    7
 17094 ;; This function calls:
 17095 ;;		_CC2500_WriteREG
 17096 ;; This function is called by:
 17097 ;;		_CC2500_PowerOnInitial
 17098 ;; This function uses a non-reentrant model
 17099 ;;
 17100                           
 17101                           
 17102                           ;psect for function _CC2500_InitPATable
 17103  1F40                     _CC2500_InitPATable:	
 17104                           
 17105                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17106                           ;CC2500_B1.c: 176: unsigned char temp;
 17107                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17111  1F40  0020               	movlb	0	; select bank0
 17112  1F41  01A7               	clrf	CC2500_InitPATable@loop_d
 17113  1F42                     L10:	
 17114  1F42  3008               	movlw	8
 17115  1F43  0227               	subwf	CC2500_InitPATable@loop_d,w
 17116  1F44  1803               	btfsc	3,0
 17117  1F45  0008               	return
 17118                           
 17119                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17120  1F46  0827               	movf	CC2500_InitPATable@loop_d,w
 17121  1F47  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17122  1F48  0084               	movwf	4
 17123  1F49  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17124  1F4A  1803               	skipnc
 17125  1F4B  3E01               	addlw	1
 17126  1F4C  0085               	movwf	5
 17127  1F4D  0800               	movf	0,w	;code access
 17128  1F4E  00A5               	movwf	??_CC2500_InitPATable
 17129  1F4F  0825               	movf	??_CC2500_InitPATable,w
 17130  1F50  00A6               	movwf	CC2500_InitPATable@temp
 17131                           
 17132                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17133  1F51  0826               	movf	CC2500_InitPATable@temp,w
 17134  1F52  00A5               	movwf	??_CC2500_InitPATable
 17135  1F53  0825               	movf	??_CC2500_InitPATable,w
 17136  1F54  00A2               	movwf	CC2500_WriteREG@value
 17137  1F55  303E               	movlw	62
 17138  1F56  319F  27DF  319F   	fcall	_CC2500_WriteREG
 17139  1F59  3001               	movlw	1
 17140  1F5A  0020               	movlb	0	; select bank0
 17141  1F5B  00A5               	movwf	??_CC2500_InitPATable
 17142  1F5C  0825               	movf	??_CC2500_InitPATable,w
 17143  1F5D  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17144  1F5E  2F42               	goto	L10
 17145  1F5F                     __end_of_CC2500_InitPATable:	
 17146                           
 17147                           	psect	text115
 17148  1FDF                     __ptext115:	
 17149 ;; *************** function _CC2500_WriteREG *****************
 17150 ;; Defined at:
 17151 ;;		line 251 in file "../src/CC2500_B1.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  w_addr          1    wreg     unsigned char 
 17154 ;;  value           1    2[BANK0 ] unsigned char 
 17155 ;; Auto vars:     Size  Location     Type
 17156 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17157 ;; Return value:  Size  Location     Type
 17158 ;;		None               void
 17159 ;; Registers used:
 17160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;Total ram usage:        3 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    6
 17173 ;; This function calls:
 17174 ;;		_CC2500_WriteByte
 17175 ;;		_Timeout_Counter
 17176 ;;		_set_TimeoutCleared
 17177 ;; This function is called by:
 17178 ;;		_CC2500_InitSetREG
 17179 ;;		_CC2500_InitPATable
 17180 ;; This function uses a non-reentrant model
 17181 ;;
 17182                           
 17183                           
 17184                           ;psect for function _CC2500_WriteREG
 17185  1FDF                     _CC2500_WriteREG:	
 17186                           
 17187                           ;incstack = 0
 17188                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17189                           ;CC2500_WriteREG@w_addr stored from wreg
 17190  1FDF  0020               	movlb	0	; select bank0
 17191  1FE0  00A4               	movwf	CC2500_WriteREG@w_addr
 17192                           
 17193                           ;CC2500_B1.c: 252: RC0 = 0;
 17194  1FE1  100E               	bcf	14,0	;volatile
 17195                           
 17196                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17197  1FE2  0824               	movf	CC2500_WriteREG@w_addr,w
 17198  1FE3  00A3               	movwf	??_CC2500_WriteREG
 17199  1FE4  0823               	movf	??_CC2500_WriteREG,w
 17200  1FE5  00FB               	movwf	_SPI0Buffer
 17201                           
 17202                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17203  1FE6  2FEA               	goto	l6399
 17204  1FE7                     l6397:	
 17205                           
 17206                           ;CC2500_B1.c: 255: Timeout_Counter();
 17207  1FE7  319E  2665  319F   	fcall	_Timeout_Counter
 17208  1FEA                     l6399:	
 17209  1FEA  0020               	movlb	0	; select bank0
 17210  1FEB  1E8E               	btfss	14,5	;volatile
 17211  1FEC  2FF0               	goto	l6403
 17212  1FED  0021               	movlb	1	; select bank1
 17213  1FEE  1D2C               	btfss	(_myMain^(0+128)+12),2
 17214  1FEF  2FE7               	goto	l6397
 17215  1FF0                     l6403:	
 17216                           
 17217                           ;CC2500_B1.c: 256: };
 17218                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17219  1FF0  319C  2431  319F   	fcall	_set_TimeoutCleared
 17220                           
 17221                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17222  1FF3  319E  263D  319F   	fcall	_CC2500_WriteByte
 17223                           
 17224                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17225  1FF6  0020               	movlb	0	; select bank0
 17226  1FF7  0822               	movf	CC2500_WriteREG@value,w
 17227  1FF8  00A3               	movwf	??_CC2500_WriteREG
 17228  1FF9  0823               	movf	??_CC2500_WriteREG,w
 17229  1FFA  00FB               	movwf	_SPI0Buffer
 17230                           
 17231                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17232  1FFB  319E  263D         	fcall	_CC2500_WriteByte
 17233                           
 17234                           ;CC2500_B1.c: 262: RC0 = 1;
 17235  1FFD  0020               	movlb	0	; select bank0
 17236  1FFE  140E               	bsf	14,0	;volatile
 17237  1FFF  0008               	return
 17238  2000                     __end_of_CC2500_WriteREG:	
 17239                           
 17240                           	psect	text116
 17241  1CDB                     __ptext116:	
 17242 ;; *************** function _CC2500_FrequencyCabr *****************
 17243 ;; Defined at:
 17244 ;;		line 201 in file "../src/CC2500_B1.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;		None
 17247 ;; Auto vars:     Size  Location     Type
 17248 ;;		None
 17249 ;; Return value:  Size  Location     Type
 17250 ;;		None               void
 17251 ;; Registers used:
 17252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;Total ram usage:        0 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; Hardware stack levels required when called:    7
 17265 ;; This function calls:
 17266 ;;		_CC2500_WriteCommand
 17267 ;;		_DelayTime_1us
 17268 ;; This function is called by:
 17269 ;;		_CC2500_PowerOnInitial
 17270 ;; This function uses a non-reentrant model
 17271 ;;
 17272                           
 17273                           
 17274                           ;psect for function _CC2500_FrequencyCabr
 17275  1CDB                     _CC2500_FrequencyCabr:	
 17276                           
 17277                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17278                           
 17279                           ;incstack = 0
 17280                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17281  1CDB  3033               	movlw	51
 17282  1CDC  319E  26D3  319C   	fcall	_CC2500_WriteCommand
 17283                           
 17284                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17285  1CDF  30E8               	movlw	232
 17286  1CE0  0020               	movlb	0	; select bank0
 17287  1CE1  00A0               	movwf	DelayTime_1us@count
 17288  1CE2  3003               	movlw	3
 17289  1CE3  00A1               	movwf	DelayTime_1us@count+1
 17290  1CE4  3190  20F8         	fcall	_DelayTime_1us
 17291  1CE6  0008               	return
 17292  1CE7                     __end_of_CC2500_FrequencyCabr:	
 17293                           
 17294                           	psect	text117
 17295  10F8                     __ptext117:	
 17296 ;; *************** function _DelayTime_1us *****************
 17297 ;; Defined at:
 17298 ;;		line 320 in file "../src/CC2500_B1.c"
 17299 ;; Parameters:    Size  Location     Type
 17300 ;;  count           2    0[BANK0 ] int 
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;  j               2    4[BANK0 ] unsigned int 
 17303 ;;  i               2    2[BANK0 ] unsigned int 
 17304 ;; Return value:  Size  Location     Type
 17305 ;;		None               void
 17306 ;; Registers used:
 17307 ;;		wreg, status,2
 17308 ;; Tracked objects:
 17309 ;;		On entry : 0/0
 17310 ;;		On exit  : 0/0
 17311 ;;		Unchanged: 0/0
 17312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17313 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;Total ram usage:        6 bytes
 17318 ;; Hardware stack levels used:    1
 17319 ;; Hardware stack levels required when called:    5
 17320 ;; This function calls:
 17321 ;;		Nothing
 17322 ;; This function is called by:
 17323 ;;		_CC2500_PowerRST
 17324 ;;		_CC2500_FrequencyCabr
 17325 ;; This function uses a non-reentrant model
 17326 ;;
 17327                           
 17328                           
 17329                           ;psect for function _DelayTime_1us
 17330  10F8                     _DelayTime_1us:	
 17331                           
 17332                           ;CC2500_B1.c: 321: unsigned int i, j;
 17333                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17337  10F8  3001               	movlw	1
 17338  10F9  0020               	movlb	0	; select bank0
 17339  10FA  00A2               	movwf	DelayTime_1us@i
 17340  10FB  3000               	movlw	0
 17341  10FC  00A3               	movwf	DelayTime_1us@i+1
 17342  10FD                     l348:	
 17343  10FD  0821               	movf	DelayTime_1us@count+1,w
 17344  10FE  0223               	subwf	DelayTime_1us@i+1,w
 17345  10FF  1D03               	skipz
 17346  1100  2903               	goto	u5535
 17347  1101  0820               	movf	DelayTime_1us@count,w
 17348  1102  0222               	subwf	DelayTime_1us@i,w
 17349  1103                     u5535:	
 17350  1103  1803               	btfsc	3,0
 17351  1104  0008               	return
 17352                           
 17353                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17354  1105  01A4               	clrf	DelayTime_1us@j
 17355  1106  01A5               	clrf	DelayTime_1us@j+1
 17356  1107  3000               	movlw	0
 17357  1108  0225               	subwf	DelayTime_1us@j+1,w
 17358  1109  3002               	movlw	2
 17359  110A  1903               	skipnz
 17360  110B  0224               	subwf	DelayTime_1us@j,w
 17361  110C  1803               	btfsc	3,0
 17362  110D  2919               	goto	l6391
 17363  110E                     l6389:	
 17364  110E  3001               	movlw	1
 17365  110F  07A4               	addwf	DelayTime_1us@j,f
 17366  1110  3000               	movlw	0
 17367  1111  3DA5               	addwfc	DelayTime_1us@j+1,f
 17368  1112  3000               	movlw	0
 17369  1113  0225               	subwf	DelayTime_1us@j+1,w
 17370  1114  3002               	movlw	2
 17371  1115  1903               	skipnz
 17372  1116  0224               	subwf	DelayTime_1us@j,w
 17373  1117  1C03               	skipc
 17374  1118  290E               	goto	l6389
 17375  1119                     l6391:	
 17376  1119  3001               	movlw	1
 17377  111A  07A2               	addwf	DelayTime_1us@i,f
 17378  111B  3000               	movlw	0
 17379  111C  3DA3               	addwfc	DelayTime_1us@i+1,f
 17380  111D  28FD               	goto	l348
 17381  111E                     __end_of_DelayTime_1us:	
 17382                           
 17383                           	psect	text118
 17384  1C15                     __ptext118:	
 17385 ;; *************** function _CC2500_ClearTXFIFO *****************
 17386 ;; Defined at:
 17387 ;;		line 187 in file "../src/CC2500_B1.c"
 17388 ;; Parameters:    Size  Location     Type
 17389 ;;		None
 17390 ;; Auto vars:     Size  Location     Type
 17391 ;;		None
 17392 ;; Return value:  Size  Location     Type
 17393 ;;		None               void
 17394 ;; Registers used:
 17395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17396 ;; Tracked objects:
 17397 ;;		On entry : 0/0
 17398 ;;		On exit  : 0/0
 17399 ;;		Unchanged: 0/0
 17400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;Total ram usage:        0 bytes
 17406 ;; Hardware stack levels used:    1
 17407 ;; Hardware stack levels required when called:    7
 17408 ;; This function calls:
 17409 ;;		_CC2500_WriteCommand
 17410 ;; This function is called by:
 17411 ;;		_CC2500_PowerOnInitial
 17412 ;; This function uses a non-reentrant model
 17413 ;;
 17414                           
 17415                           
 17416                           ;psect for function _CC2500_ClearTXFIFO
 17417  1C15                     _CC2500_ClearTXFIFO:	
 17418                           
 17419                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17420                           
 17421                           ;incstack = 0
 17422                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17423  1C15  303B               	movlw	59
 17424  1C16  319E  26D3         	fcall	_CC2500_WriteCommand
 17425  1C18  0008               	return
 17426  1C19                     __end_of_CC2500_ClearTXFIFO:	
 17427                           
 17428                           	psect	text119
 17429  1C11                     __ptext119:	
 17430 ;; *************** function _CC2500_ClearRXFIFO *****************
 17431 ;; Defined at:
 17432 ;;		line 194 in file "../src/CC2500_B1.c"
 17433 ;; Parameters:    Size  Location     Type
 17434 ;;		None
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;		None
 17437 ;; Return value:  Size  Location     Type
 17438 ;;		None               void
 17439 ;; Registers used:
 17440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17441 ;; Tracked objects:
 17442 ;;		On entry : 0/0
 17443 ;;		On exit  : 0/0
 17444 ;;		Unchanged: 0/0
 17445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;Total ram usage:        0 bytes
 17451 ;; Hardware stack levels used:    1
 17452 ;; Hardware stack levels required when called:    7
 17453 ;; This function calls:
 17454 ;;		_CC2500_WriteCommand
 17455 ;; This function is called by:
 17456 ;;		_CC2500_PowerOnInitial
 17457 ;; This function uses a non-reentrant model
 17458 ;;
 17459                           
 17460                           
 17461                           ;psect for function _CC2500_ClearRXFIFO
 17462  1C11                     _CC2500_ClearRXFIFO:	
 17463                           
 17464                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17465                           
 17466                           ;incstack = 0
 17467                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17468  1C11  303A               	movlw	58
 17469  1C12  319E  26D3         	fcall	_CC2500_WriteCommand
 17470  1C14  0008               	return
 17471  1C15                     __end_of_CC2500_ClearRXFIFO:	
 17472                           
 17473                           	psect	text120
 17474  1ED3                     __ptext120:	
 17475 ;; *************** function _CC2500_WriteCommand *****************
 17476 ;; Defined at:
 17477 ;;		line 285 in file "../src/CC2500_B1.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;  command         1    wreg     unsigned char 
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;  command         1    3[BANK0 ] unsigned char 
 17482 ;; Return value:  Size  Location     Type
 17483 ;;		None               void
 17484 ;; Registers used:
 17485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17486 ;; Tracked objects:
 17487 ;;		On entry : 0/0
 17488 ;;		On exit  : 0/0
 17489 ;;		Unchanged: 0/0
 17490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;Total ram usage:        2 bytes
 17496 ;; Hardware stack levels used:    1
 17497 ;; Hardware stack levels required when called:    6
 17498 ;; This function calls:
 17499 ;;		_CC2500_WriteByte
 17500 ;;		_Timeout_Counter
 17501 ;;		_set_TimeoutCleared
 17502 ;; This function is called by:
 17503 ;;		_CC2500_TxData
 17504 ;;		_CC2500_ClearTXFIFO
 17505 ;;		_CC2500_ClearRXFIFO
 17506 ;;		_CC2500_FrequencyCabr
 17507 ;;		_CC2500_SIDLEMode
 17508 ;;		_setRF_Main
 17509 ;;		_RF_RxDisable
 17510 ;; This function uses a non-reentrant model
 17511 ;;
 17512                           
 17513                           
 17514                           ;psect for function _CC2500_WriteCommand
 17515  1ED3                     _CC2500_WriteCommand:	
 17516                           
 17517                           ;incstack = 0
 17518                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17519                           ;CC2500_WriteCommand@command stored from wreg
 17520  1ED3  0020               	movlb	0	; select bank0
 17521  1ED4  00A3               	movwf	CC2500_WriteCommand@command
 17522                           
 17523                           ;CC2500_B1.c: 286: RC0 = 0;
 17524  1ED5  100E               	bcf	14,0	;volatile
 17525                           
 17526                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17527  1ED6  0823               	movf	CC2500_WriteCommand@command,w
 17528  1ED7  00A2               	movwf	??_CC2500_WriteCommand
 17529  1ED8  0822               	movf	??_CC2500_WriteCommand,w
 17530  1ED9  00FB               	movwf	_SPI0Buffer
 17531                           
 17532                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17533  1EDA  2EDE               	goto	l6129
 17534  1EDB                     l6127:	
 17535                           
 17536                           ;CC2500_B1.c: 290: Timeout_Counter();
 17537  1EDB  319E  2665  319E   	fcall	_Timeout_Counter
 17538  1EDE                     l6129:	
 17539  1EDE  0020               	movlb	0	; select bank0
 17540  1EDF  1E8E               	btfss	14,5	;volatile
 17541  1EE0  2EE4               	goto	l6133
 17542  1EE1  0021               	movlb	1	; select bank1
 17543  1EE2  1D2C               	btfss	(_myMain^(0+128)+12),2
 17544  1EE3  2EDB               	goto	l6127
 17545  1EE4                     l6133:	
 17546                           
 17547                           ;CC2500_B1.c: 291: };
 17548                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17549  1EE4  319C  2431  319E   	fcall	_set_TimeoutCleared
 17550                           
 17551                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17552  1EE7  319E  263D         	fcall	_CC2500_WriteByte
 17553                           
 17554                           ;CC2500_B1.c: 295: RC0 = 1;
 17555  1EE9  0020               	movlb	0	; select bank0
 17556  1EEA  140E               	bsf	14,0	;volatile
 17557  1EEB  0008               	return
 17558  1EEC                     __end_of_CC2500_WriteCommand:	
 17559                           
 17560                           	psect	text121
 17561  1C31                     __ptext121:	
 17562 ;; *************** function _set_TimeoutCleared *****************
 17563 ;; Defined at:
 17564 ;;		line 280 in file "../src/Main_B1.c"
 17565 ;; Parameters:    Size  Location     Type
 17566 ;;		None
 17567 ;; Auto vars:     Size  Location     Type
 17568 ;;		None
 17569 ;; Return value:  Size  Location     Type
 17570 ;;		None               void
 17571 ;; Registers used:
 17572 ;;		status,2
 17573 ;; Tracked objects:
 17574 ;;		On entry : 0/0
 17575 ;;		On exit  : 0/0
 17576 ;;		Unchanged: 0/0
 17577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;Total ram usage:        0 bytes
 17583 ;; Hardware stack levels used:    1
 17584 ;; Hardware stack levels required when called:    5
 17585 ;; This function calls:
 17586 ;;		Nothing
 17587 ;; This function is called by:
 17588 ;;		_CC2500_TxData
 17589 ;;		_CC2500_RxData
 17590 ;;		_CC2500_PowerRST
 17591 ;;		_CC2500_WriteREG
 17592 ;;		_CC2500_WriteCommand
 17593 ;;		_CC2500_ReadStatus
 17594 ;;		_getAD
 17595 ;;		_TouchPower
 17596 ;;		_CC2500_ReadREG
 17597 ;; This function uses a non-reentrant model
 17598 ;;
 17599                           
 17600                           
 17601                           ;psect for function _set_TimeoutCleared
 17602  1C31                     _set_TimeoutCleared:	
 17603                           
 17604                           ;Main_B1.c: 281: myMain.Timeout = 0;
 17605                           
 17606                           ;incstack = 0
 17607                           ; Regs used in _set_TimeoutCleared: [status,2]
 17608  1C31  0021               	movlb	1	; select bank1
 17609  1C32  112C               	bcf	(_myMain^(0+128)+12),2
 17610                           
 17611                           ;Main_B1.c: 282: myMain.Timeout_Counter = 0;
 17612  1C33  01AD               	clrf	(_myMain^(0+128)+13)
 17613  1C34  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17614  1C35  0008               	return
 17615  1C36                     __end_of_set_TimeoutCleared:	
 17616                           
 17617                           	psect	text122
 17618  1E65                     __ptext122:	
 17619 ;; *************** function _Timeout_Counter *****************
 17620 ;; Defined at:
 17621 ;;		line 271 in file "../src/Main_B1.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;		None
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;		None
 17626 ;; Return value:  Size  Location     Type
 17627 ;;		None               void
 17628 ;; Registers used:
 17629 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17630 ;; Tracked objects:
 17631 ;;		On entry : 0/0
 17632 ;;		On exit  : 0/0
 17633 ;;		Unchanged: 0/0
 17634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;Total ram usage:        0 bytes
 17640 ;; Hardware stack levels used:    1
 17641 ;; Hardware stack levels required when called:    5
 17642 ;; This function calls:
 17643 ;;		Nothing
 17644 ;; This function is called by:
 17645 ;;		_CC2500_TxData
 17646 ;;		_CC2500_RxData
 17647 ;;		_CC2500_PowerRST
 17648 ;;		_CC2500_WriteREG
 17649 ;;		_CC2500_WriteCommand
 17650 ;;		_CC2500_ReadStatus
 17651 ;;		_getAD
 17652 ;;		_TouchPower
 17653 ;;		_CC2500_ReadREG
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           
 17658                           ;psect for function _Timeout_Counter
 17659  1E65                     _Timeout_Counter:	
 17660                           
 17661                           ;Main_B1.c: 272: myMain.Timeout_Counter++;
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17665  1E65  3001               	movlw	1
 17666  1E66  0021               	movlb	1	; select bank1
 17667  1E67  07AD               	addwf	(_myMain^(0+128)+13),f
 17668  1E68  3000               	movlw	0
 17669  1E69  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17670                           
 17671                           ;Main_B1.c: 273: if (myMain.Timeout_Counter == 10000) {
 17672  1E6A  300D               	movlw	13
 17673  1E6B  3EA0               	addlw	_myMain& (0+255)
 17674  1E6C  0086               	movwf	6
 17675  1E6D  0187               	clrf	7
 17676  1E6E  3F40               	moviw [0]fsr1
 17677  1E6F  3A10               	xorlw	16
 17678  1E70  1D03               	skipz
 17679  1E71  2E74               	goto	u4995
 17680  1E72  3F41               	moviw [1]fsr1
 17681  1E73  3A27               	xorlw	39
 17682  1E74                     u4995:	
 17683  1E74  1D03               	skipz
 17684  1E75  0008               	return
 17685                           
 17686                           ;Main_B1.c: 274: myMain.Timeout_Counter = 0;
 17687  1E76  01AD               	clrf	(_myMain^(0+128)+13)
 17688  1E77  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17689                           
 17690                           ;Main_B1.c: 275: myMain.Timeout = 1;
 17691  1E78  152C               	bsf	(_myMain^(0+128)+12),2
 17692  1E79  0008               	return
 17693  1E7A                     __end_of_Timeout_Counter:	
 17694                           
 17695                           	psect	text123
 17696  1E3D                     __ptext123:	
 17697 ;; *************** function _CC2500_WriteByte *****************
 17698 ;; Defined at:
 17699 ;;		line 219 in file "../src/CC2500_B1.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;		None
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17704 ;; Return value:  Size  Location     Type
 17705 ;;		None               void
 17706 ;; Registers used:
 17707 ;;		wreg, status,2, status,0
 17708 ;; Tracked objects:
 17709 ;;		On entry : 0/0
 17710 ;;		On exit  : 0/0
 17711 ;;		Unchanged: 0/0
 17712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;Total ram usage:        2 bytes
 17718 ;; Hardware stack levels used:    1
 17719 ;; Hardware stack levels required when called:    5
 17720 ;; This function calls:
 17721 ;;		Nothing
 17722 ;; This function is called by:
 17723 ;;		_CC2500_TxData
 17724 ;;		_CC2500_RxData
 17725 ;;		_CC2500_PowerRST
 17726 ;;		_CC2500_WriteREG
 17727 ;;		_CC2500_WriteCommand
 17728 ;;		_CC2500_ReadStatus
 17729 ;;		_CC2500_ReadREG
 17730 ;; This function uses a non-reentrant model
 17731 ;;
 17732                           
 17733                           
 17734                           ;psect for function _CC2500_WriteByte
 17735  1E3D                     _CC2500_WriteByte:	
 17736                           
 17737                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17738                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17739                           
 17740                           ;incstack = 0
 17741                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17742  1E3D  0020               	movlb	0	; select bank0
 17743  1E3E  01A1               	clrf	CC2500_WriteByte@loop_a
 17744  1E3F                     L11:	
 17745  1E3F  3008               	movlw	8
 17746  1E40  0221               	subwf	CC2500_WriteByte@loop_a,w
 17747  1E41  1803               	btfsc	3,0
 17748  1E42  0008               	return
 17749                           
 17750                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17751  1E43  1FFB               	btfss	_SPI0Buffer,7
 17752  1E44  2E47               	goto	l304
 17753                           
 17754                           ;CC2500_B1.c: 223: RC4 = 1;
 17755  1E45  160E               	bsf	14,4	;volatile
 17756  1E46  2E48               	goto	l305
 17757  1E47                     l304:	
 17758                           
 17759                           ;CC2500_B1.c: 224: else
 17760                           ;CC2500_B1.c: 225: RC4 = 0;
 17761  1E47  120E               	bcf	14,4	;volatile
 17762  1E48                     l305:	
 17763                           
 17764                           ;CC2500_B1.c: 226: RC3 = 1;
 17765  1E48  158E               	bsf	14,3	;volatile
 17766                           
 17767                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17768  1E49  1003               	clrc
 17769  1E4A  0DFB               	rlf	_SPI0Buffer,f
 17770                           
 17771                           ;CC2500_B1.c: 228: RC3 = 0;
 17772  1E4B  118E               	bcf	14,3	;volatile
 17773  1E4C  3001               	movlw	1
 17774  1E4D  00A0               	movwf	??_CC2500_WriteByte
 17775  1E4E  0820               	movf	??_CC2500_WriteByte,w
 17776  1E4F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17777  1E50  2E3F               	goto	L11
 17778  1E51                     __end_of_CC2500_WriteByte:	
 17779                           
 17780                           	psect	text124
 17781  1504                     __ptext124:	
 17782 ;; *************** function _Buzzer_Main *****************
 17783 ;; Defined at:
 17784 ;;		line 46 in file "../src/Buzzer_B1.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;		None
 17787 ;; Auto vars:     Size  Location     Type
 17788 ;;		None
 17789 ;; Return value:  Size  Location     Type
 17790 ;;		None               void
 17791 ;; Registers used:
 17792 ;;		wreg, status,2, status,0
 17793 ;; Tracked objects:
 17794 ;;		On entry : 0/0
 17795 ;;		On exit  : 0/0
 17796 ;;		Unchanged: 0/0
 17797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;Total ram usage:        1 bytes
 17803 ;; Hardware stack levels used:    1
 17804 ;; Hardware stack levels required when called:    5
 17805 ;; This function calls:
 17806 ;;		Nothing
 17807 ;; This function is called by:
 17808 ;;		_main
 17809 ;; This function uses a non-reentrant model
 17810 ;;
 17811                           
 17812                           
 17813                           ;psect for function _Buzzer_Main
 17814  1504                     _Buzzer_Main:	
 17815                           
 17816                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17817                           
 17818                           ;incstack = 0
 17819                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17820  1504  0021               	movlb	1	; select bank1
 17821  1505  1CAF               	btfss	_Buz1^(0+128),1
 17822  1506  0008               	return
 17823                           
 17824                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17825  1507  3001               	movlw	1
 17826  1508  07B0               	addwf	(_Buz1^(0+128)+1),f
 17827  1509  3000               	movlw	0
 17828  150A  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 17829                           
 17830                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17831  150B  0836               	movf	((_Buz1+1)^(0+128)+6),w
 17832  150C  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 17833  150D  1D03               	skipz
 17834  150E  2D11               	goto	u7095
 17835  150F  0835               	movf	(_Buz1^(0+128)+6),w
 17836  1510  0230               	subwf	(_Buz1^(0+128)+1),w
 17837  1511                     u7095:	
 17838  1511  1C03               	skipc
 17839  1512  0008               	return
 17840                           
 17841                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17842  1513  01B0               	clrf	(_Buz1^(0+128)+1)
 17843  1514  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 17844                           
 17845                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17846  1515  12AF               	bcf	_Buz1^(0+128),5
 17847  1516  0020               	movlb	0	; select bank0
 17848  1517  1D8D               	btfss	13,3	;volatile
 17849  1518  2D1B               	goto	l7363
 17850  1519  0021               	movlb	1	; select bank1
 17851  151A  16AF               	bsf	_Buz1^(0+128),5
 17852  151B                     l7363:	
 17853                           
 17854                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17855  151B  0021               	movlb	1	; select bank1
 17856  151C  1AAF               	btfsc	_Buz1^(0+128),5
 17857  151D  2D47               	goto	l94
 17858                           
 17859                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17860  151E  08B2               	movf	(_Buz1^(0+128)+3),f
 17861  151F  1D03               	skipz
 17862  1520  2D43               	goto	l95
 17863                           
 17864                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17865  1521  1DAF               	btfss	_Buz1^(0+128),3
 17866  1522  2D31               	goto	l96
 17867                           
 17868                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17869  1523  11AF               	bcf	_Buz1^(0+128),3
 17870                           
 17871                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17872  1524  0833               	movf	(_Buz1^(0+128)+4),w
 17873  1525  0020               	movlb	0	; select bank0
 17874  1526  00A0               	movwf	??_Buzzer_Main
 17875  1527  0820               	movf	??_Buzzer_Main,w
 17876  1528  0021               	movlb	1	; select bank1
 17877  1529  00B2               	movwf	(_Buz1^(0+128)+3)
 17878                           
 17879                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17880  152A  0838               	movf	((_Buz1+1)^(0+128)+8),w
 17881  152B  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17882  152C  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17883  152D  0837               	movf	(_Buz1^(0+128)+8),w
 17884  152E  01B5               	clrf	(_Buz1^(0+128)+6)
 17885  152F  07B5               	addwf	(_Buz1^(0+128)+6),f
 17886                           
 17887                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17888  1530  0008               	return
 17889  1531                     l96:	
 17890  1531  1E2F               	btfss	_Buz1^(0+128),4
 17891  1532  2D41               	goto	l98
 17892                           
 17893                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17894  1533  122F               	bcf	_Buz1^(0+128),4
 17895                           
 17896                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17897  1534  0834               	movf	(_Buz1^(0+128)+5),w
 17898  1535  0020               	movlb	0	; select bank0
 17899  1536  00A0               	movwf	??_Buzzer_Main
 17900  1537  0820               	movf	??_Buzzer_Main,w
 17901  1538  0021               	movlb	1	; select bank1
 17902  1539  00B2               	movwf	(_Buz1^(0+128)+3)
 17903                           
 17904                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17905  153A  083A               	movf	((_Buz1+1)^(0+128)+10),w
 17906  153B  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17907  153C  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17908  153D  0839               	movf	(_Buz1^(0+128)+10),w
 17909  153E  01B5               	clrf	(_Buz1^(0+128)+6)
 17910  153F  07B5               	addwf	(_Buz1^(0+128)+6),f
 17911                           
 17912                           ;Buzzer_B1.c: 62: } else {
 17913  1540  0008               	return
 17914  1541                     l98:	
 17915                           
 17916                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17917  1541  10AF               	bcf	_Buz1^(0+128),1
 17918                           
 17919                           ;Buzzer_B1.c: 64: }
 17920                           ;Buzzer_B1.c: 65: } else {
 17921  1542  0008               	return
 17922  1543                     l95:	
 17923                           
 17924                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17925  1543  16AF               	bsf	_Buz1^(0+128),5
 17926                           
 17927                           ;Buzzer_B1.c: 68: RB3 = 1;
 17928  1544  0020               	movlb	0	; select bank0
 17929  1545  158D               	bsf	13,3	;volatile
 17930                           
 17931                           ;Buzzer_B1.c: 69: }
 17932                           ;Buzzer_B1.c: 70: } else {
 17933  1546  0008               	return
 17934  1547                     l94:	
 17935                           
 17936                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17937  1547  12AF               	bcf	_Buz1^(0+128),5
 17938                           
 17939                           ;Buzzer_B1.c: 73: RB3 = 0;
 17940  1548  0020               	movlb	0	; select bank0
 17941  1549  118D               	bcf	13,3	;volatile
 17942                           
 17943                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17944  154A  3001               	movlw	1
 17945  154B  0021               	movlb	1	; select bank1
 17946  154C  02B2               	subwf	(_Buz1^(0+128)+3),f
 17947  154D  0008               	return
 17948  154E                     __end_of_Buzzer_Main:	
 17949                           
 17950                           	psect	text125
 17951  1BFE                     __ptext125:	
 17952 ;; *************** function _Buzzer_Initialization *****************
 17953 ;; Defined at:
 17954 ;;		line 11 in file "../src/Buzzer_B1.c"
 17955 ;; Parameters:    Size  Location     Type
 17956 ;;		None
 17957 ;; Auto vars:     Size  Location     Type
 17958 ;;		None
 17959 ;; Return value:  Size  Location     Type
 17960 ;;		None               void
 17961 ;; Registers used:
 17962 ;;		None
 17963 ;; Tracked objects:
 17964 ;;		On entry : 0/0
 17965 ;;		On exit  : 0/0
 17966 ;;		Unchanged: 0/0
 17967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;Total ram usage:        0 bytes
 17973 ;; Hardware stack levels used:    1
 17974 ;; Hardware stack levels required when called:    5
 17975 ;; This function calls:
 17976 ;;		Nothing
 17977 ;; This function is called by:
 17978 ;;		_main
 17979 ;; This function uses a non-reentrant model
 17980 ;;
 17981                           
 17982                           
 17983                           ;psect for function _Buzzer_Initialization
 17984  1BFE                     _Buzzer_Initialization:	
 17985                           
 17986                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17987                           
 17988                           ;incstack = 0
 17989                           ; Regs used in _Buzzer_Initialization: []
 17990  1BFE  0021               	movlb	1	; select bank1
 17991  1BFF  142F               	bsf	_Buz1^(0+128),0
 17992  1C00  0008               	return
 17993  1C01                     __end_of_Buzzer_Initialization:	
 17994                           
 17995                           	psect	intentry
 17996  0004                     __pintentry:	
 17997 ;; *************** function _ISR *****************
 17998 ;; Defined at:
 17999 ;;		line 107 in file "../src/MCU_B1.c"
 18000 ;; Parameters:    Size  Location     Type
 18001 ;;		None
 18002 ;; Auto vars:     Size  Location     Type
 18003 ;;		None
 18004 ;; Return value:  Size  Location     Type
 18005 ;;		None               void
 18006 ;; Registers used:
 18007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18008 ;; Tracked objects:
 18009 ;;		On entry : 0/0
 18010 ;;		On exit  : 0/0
 18011 ;;		Unchanged: 0/0
 18012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;Total ram usage:        1 bytes
 18018 ;; Hardware stack levels used:    1
 18019 ;; Hardware stack levels required when called:    4
 18020 ;; This function calls:
 18021 ;;		_IOC_ISR
 18022 ;;		_TMR1_ISR
 18023 ;; This function is called by:
 18024 ;;		Interrupt level 1
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028  0004                     _ISR:	
 18029                           
 18030                           ;incstack = 0
 18031                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18032  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18033  0005  3180               	pagesel	$
 18034  0006  0020               	movlb	0	; select bank0
 18035  0007  087F               	movf	127,w
 18036  0008  00F7               	movwf	??_ISR
 18037                           
 18038                           ;MCU_B1.c: 109: IOC_ISR();
 18039  0009  319D  253F  3180   	fcall	_IOC_ISR
 18040                           
 18041                           ;MCU_B1.c: 111: ;;
 18042                           ;MCU_B1.c: 113: TMR1_ISR();
 18043  000C  3190  20D4         	fcall	_TMR1_ISR
 18044  000E  0877               	movf	??_ISR,w
 18045  000F  0020               	movlb	0	; select bank0
 18046  0010  00FF               	movwf	127
 18047  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18048  0012  0009               	retfie
 18049  0013                     __end_of_ISR:	
 18050                           
 18051                           	psect	text127
 18052  10D4                     __ptext127:	
 18053 ;; *************** function _TMR1_ISR *****************
 18054 ;; Defined at:
 18055 ;;		line 209 in file "../src/MCU_B1.c"
 18056 ;; Parameters:    Size  Location     Type
 18057 ;;		None
 18058 ;; Auto vars:     Size  Location     Type
 18059 ;;		None
 18060 ;; Return value:  Size  Location     Type
 18061 ;;		None               void
 18062 ;; Registers used:
 18063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18064 ;; Tracked objects:
 18065 ;;		On entry : 0/0
 18066 ;;		On exit  : 0/0
 18067 ;;		Unchanged: 0/0
 18068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18073 ;;Total ram usage:        0 bytes
 18074 ;; Hardware stack levels used:    1
 18075 ;; Hardware stack levels required when called:    2
 18076 ;; This function calls:
 18077 ;;		_setDimmerLights_IntrControl
 18078 ;; This function is called by:
 18079 ;;		_ISR
 18080 ;; This function uses a non-reentrant model
 18081 ;;
 18082                           
 18083                           
 18084                           ;psect for function _TMR1_ISR
 18085  10D4                     _TMR1_ISR:	
 18086                           
 18087                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18088                           
 18089                           ;incstack = 0
 18090                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18091  10D4  0021               	movlb	1	; select bank1
 18092  10D5  1C11               	btfss	17,0	;volatile
 18093  10D6  0008               	return
 18094  10D7  0020               	movlb	0	; select bank0
 18095  10D8  1C11               	btfss	17,0	;volatile
 18096  10D9  0008               	return
 18097                           
 18098                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18099  10DA  30FA               	movlw	250
 18100  10DB  0097               	movwf	23	;volatile
 18101                           
 18102                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18103  10DC  3038               	movlw	56
 18104  10DD  0096               	movwf	22	;volatile
 18105                           
 18106                           ;MCU_B1.c: 214: TMR1IF = 0;
 18107  10DE  1011               	bcf	17,0	;volatile
 18108                           
 18109                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18110  10DF  3001               	movlw	1
 18111  10E0  3182  22F6  3190   	fcall	_setDimmerLights_IntrControl
 18112                           
 18113                           ;MCU_B1.c: 234: Timer1.Count++;
 18114  10E3  3001               	movlw	1
 18115  10E4  0021               	movlb	1	; select bank1
 18116  10E5  07C8               	addwf	(_Timer1^(0+128)+1),f
 18117  10E6  3000               	movlw	0
 18118  10E7  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18119                           
 18120                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18121  10E8  3001               	movlw	1
 18122  10E9  3EC7               	addlw	_Timer1& (0+255)
 18123  10EA  0086               	movwf	6
 18124  10EB  0187               	clrf	7
 18125  10EC  3F40               	moviw [0]fsr1
 18126  10ED  3A64               	xorlw	100
 18127  10EE  1D03               	skipz
 18128  10EF  28F2               	goto	u725_25
 18129  10F0  3F41               	moviw [1]fsr1
 18130  10F1  3A00               	xorlw	0
 18131  10F2                     u725_25:	
 18132  10F2  1D03               	skipz
 18133  10F3  0008               	return
 18134                           
 18135                           ;MCU_B1.c: 236: {
 18136                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18137  10F4  01C8               	clrf	(_Timer1^(0+128)+1)
 18138  10F5  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18139                           
 18140                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18141  10F6  1447               	bsf	_Timer1^(0+128),0
 18142  10F7  0008               	return
 18143  10F8                     __end_of_TMR1_ISR:	
 18144                           
 18145                           	psect	text128
 18146  02F6                     __ptext128:	
 18147 ;; *************** function _setDimmerLights_IntrControl *****************
 18148 ;; Defined at:
 18149 ;;		line 92 in file "../src/Dimmer_B1.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;  lights          1    wreg     unsigned char 
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;  lights          1    6[COMMON] unsigned char 
 18154 ;; Return value:  Size  Location     Type
 18155 ;;		None               void
 18156 ;; Registers used:
 18157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;Total ram usage:        5 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    1
 18170 ;; This function calls:
 18171 ;;		_DimmerIntrPointSelect
 18172 ;; This function is called by:
 18173 ;;		_TMR1_ISR
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _setDimmerLights_IntrControl
 18179  02F6                     _setDimmerLights_IntrControl:	
 18180                           
 18181                           ;incstack = 0
 18182                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18183                           ;setDimmerLights_IntrControl@lights stored from wreg
 18184  02F6  00F6               	movwf	setDimmerLights_IntrControl@lights
 18185                           
 18186                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18187  02F7  0876               	movf	setDimmerLights_IntrControl@lights,w
 18188  02F8  319C  246F  3182   	fcall	_DimmerIntrPointSelect
 18189                           
 18190                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18191  02FB  0879               	movf	_DimmerLightsIntr,w
 18192  02FC  0086               	movwf	6
 18193  02FD  3001               	movlw	1	; select bank2/3
 18194  02FE  0087               	movwf	7
 18195  02FF  1C01               	btfss	1,0
 18196  0300  2B53               	goto	i1l6821
 18197                           
 18198                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18199  0301  3001               	movlw	1
 18200  0302  00F2               	movwf	??_setDimmerLights_IntrControl
 18201  0303  0879               	movf	_DimmerLightsIntr,w
 18202  0304  3E03               	addlw	3
 18203  0305  0086               	movwf	6
 18204  0306  3001               	movlw	1	; select bank2/3
 18205  0307  0087               	movwf	7
 18206  0308  0872               	movf	??_setDimmerLights_IntrControl,w
 18207  0309  0781               	addwf	1,f
 18208                           
 18209                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18210                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18211  030A  0022               	movlb	2	; select bank2
 18212  030B  0840               	movf	(_Dimmer^(0+256)+2),w
 18213  030C  00F2               	movwf	??_setDimmerLights_IntrControl
 18214  030D  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18215  030E  09F2               	comf	??_setDimmerLights_IntrControl,f
 18216  030F  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18217  0310  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18218  0311  1903               	skipnz
 18219  0312  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18220  0313  0879               	movf	_DimmerLightsIntr,w
 18221  0314  3E04               	addlw	4
 18222  0315  0086               	movwf	6
 18223  0316  3001               	movlw	1	; select bank2/3
 18224  0317  0087               	movwf	7
 18225  0318  0801               	movf	1,w
 18226  0319  0772               	addwf	??_setDimmerLights_IntrControl,w
 18227  031A  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18228  031B  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18229  031C  1803               	skipnc
 18230  031D  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18231  031E  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18232  031F  0879               	movf	_DimmerLightsIntr,w
 18233  0320  3E03               	addlw	3
 18234  0321  0086               	movwf	6
 18235  0322  3001               	movlw	1	; select bank2/3
 18236  0323  0087               	movwf	7
 18237  0324  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18238  0325  3A80               	xorlw	128
 18239  0326  3C80               	sublw	128
 18240  0327  1D03               	skipz
 18241  0328  2B2B               	goto	u612_25
 18242  0329  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18243  032A  0201               	subwf	1,w
 18244  032B                     u612_25:	
 18245  032B  1C03               	skipc
 18246  032C  0008               	return
 18247                           
 18248                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18249  032D  0879               	movf	_DimmerLightsIntr,w
 18250  032E  3E03               	addlw	3
 18251  032F  0086               	movwf	6
 18252  0330  3001               	movlw	1	; select bank2/3
 18253  0331  0087               	movwf	7
 18254  0332  0181               	clrf	1
 18255                           
 18256                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18257  0333  0879               	movf	_DimmerLightsIntr,w
 18258  0334  0086               	movwf	6
 18259  0335  3001               	movlw	1	; select bank2/3
 18260  0336  0087               	movwf	7
 18261  0337  1001               	bcf	1,0
 18262                           
 18263                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18264  0338  0879               	movf	_DimmerLightsIntr,w
 18265  0339  3E08               	addlw	8
 18266  033A  0086               	movwf	6
 18267  033B  3001               	movlw	1	; select bank2/3
 18268  033C  0087               	movwf	7
 18269  033D  1401               	bsf	1,0
 18270                           
 18271                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18272  033E  0879               	movf	_DimmerLightsIntr,w
 18273  033F  3E09               	addlw	9
 18274  0340  0086               	movwf	6
 18275  0341  3001               	movlw	1	; select bank2/3
 18276  0342  0087               	movwf	7
 18277  0343  1E01               	btfss	1,4
 18278  0344  0008               	return
 18279                           
 18280                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18281  0345  0879               	movf	_DimmerLightsIntr,w
 18282  0346  3E09               	addlw	9
 18283  0347  0086               	movwf	6
 18284  0348  3001               	movlw	1	; select bank2/3
 18285  0349  0087               	movwf	7
 18286  034A  1201               	bcf	1,4
 18287                           
 18288                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18289  034B  0876               	movf	setDimmerLights_IntrControl@lights,w
 18290  034C  3A01               	xorlw	1
 18291  034D  1D03               	skipz
 18292  034E  0008               	return
 18293                           
 18294                           ;Dimmer_B1.c: 240: RB4 = 0;
 18295  034F  0020               	movlb	0	; select bank0
 18296  0350  120D               	bcf	13,4	;volatile
 18297                           
 18298                           ;Dimmer_B1.c: 241: RB4=0;
 18299  0351  120D               	bcf	13,4	;volatile
 18300                           
 18301                           ;Dimmer_B1.c: 242: }
 18302                           ;Dimmer_B1.c: 249: }
 18303                           ;Dimmer_B1.c: 250: }
 18304                           ;Dimmer_B1.c: 251: } else {
 18305  0352  0008               	return
 18306  0353                     i1l6821:	
 18307                           
 18308                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18309  0353  0879               	movf	_DimmerLightsIntr,w
 18310  0354  3E08               	addlw	8
 18311  0355  0086               	movwf	6
 18312  0356  3001               	movlw	1	; select bank2/3
 18313  0357  0087               	movwf	7
 18314  0358  1C01               	btfss	1,0
 18315  0359  2C07               	goto	i1l676
 18316                           
 18317                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18318  035A  0879               	movf	_DimmerLightsIntr,w
 18319  035B  3E08               	addlw	8
 18320  035C  0086               	movwf	6
 18321  035D  3001               	movlw	1	; select bank2/3
 18322  035E  0087               	movwf	7
 18323  035F  1001               	bcf	1,0
 18324                           
 18325                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18326  0360  0879               	movf	_DimmerLightsIntr,w
 18327  0361  0086               	movwf	6
 18328  0362  3001               	movlw	1	; select bank2/3
 18329  0363  0087               	movwf	7
 18330  0364  1C81               	btfss	1,1
 18331  0365  2C07               	goto	i1l676
 18332                           
 18333                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18334  0366  3001               	movlw	1
 18335  0367  00F2               	movwf	??_setDimmerLights_IntrControl
 18336  0368  0A79               	incf	_DimmerLightsIntr,w
 18337  0369  0086               	movwf	6
 18338  036A  3001               	movlw	1	; select bank2/3
 18339  036B  0087               	movwf	7
 18340  036C  0872               	movf	??_setDimmerLights_IntrControl,w
 18341  036D  0781               	addwf	1,f
 18342                           
 18343                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18344  036E  0A79               	incf	_DimmerLightsIntr,w
 18345  036F  0086               	movwf	6
 18346  0370  3001               	movlw	1	; select bank2/3
 18347  0371  0087               	movwf	7
 18348  0372  0879               	movf	_DimmerLightsIntr,w
 18349  0373  3E02               	addlw	2
 18350  0374  0084               	movwf	4
 18351  0375  3001               	movlw	1	; select bank2/3
 18352  0376  0085               	movwf	5
 18353  0377  0800               	movf	0,w
 18354  0378  0201               	subwf	1,w
 18355  0379  1C03               	skipc
 18356  037A  2C07               	goto	i1l676
 18357                           
 18358                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18359  037B  0A79               	incf	_DimmerLightsIntr,w
 18360  037C  0086               	movwf	6
 18361  037D  3001               	movlw	1	; select bank2/3
 18362  037E  0087               	movwf	7
 18363  037F  0181               	clrf	1
 18364                           
 18365                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18366  0380  0879               	movf	_DimmerLightsIntr,w
 18367  0381  0086               	movwf	6
 18368  0382  3001               	movlw	1	; select bank2/3
 18369  0383  0087               	movwf	7
 18370  0384  1D81               	btfss	1,3
 18371  0385  2BBC               	goto	i1l6847
 18372                           
 18373                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18374  0386  0879               	movf	_DimmerLightsIntr,w
 18375  0387  0086               	movwf	6
 18376  0388  3001               	movlw	1	; select bank2/3
 18377  0389  0087               	movwf	7
 18378  038A  1A01               	btfsc	1,4
 18379  038B  2BA5               	goto	i1l6841
 18380                           
 18381                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(90*0.8))) {
 18382  038C  0879               	movf	_DimmerLightsIntr,w
 18383  038D  3E04               	addlw	4
 18384  038E  0086               	movwf	6
 18385  038F  3001               	movlw	1	; select bank2/3
 18386  0390  0087               	movwf	7
 18387  0391  3048               	movlw	72
 18388  0392  0201               	subwf	1,w
 18389  0393  1803               	skipnc
 18390  0394  2B9F               	goto	i1l6839
 18391                           
 18392                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18393  0395  3001               	movlw	1
 18394  0396  00F2               	movwf	??_setDimmerLights_IntrControl
 18395  0397  0879               	movf	_DimmerLightsIntr,w
 18396  0398  3E04               	addlw	4
 18397  0399  0086               	movwf	6
 18398  039A  3001               	movlw	1	; select bank2/3
 18399  039B  0087               	movwf	7
 18400  039C  0872               	movf	??_setDimmerLights_IntrControl,w
 18401  039D  0781               	addwf	1,f
 18402                           
 18403                           ;Dimmer_B1.c: 262: } else {
 18404  039E  2C07               	goto	i1l676
 18405  039F                     i1l6839:	
 18406                           
 18407                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18408  039F  0879               	movf	_DimmerLightsIntr,w
 18409  03A0  0086               	movwf	6
 18410  03A1  3001               	movlw	1	; select bank2/3
 18411  03A2  0087               	movwf	7
 18412  03A3  1601               	bsf	1,4
 18413                           
 18414                           ;Dimmer_B1.c: 264: }
 18415                           ;Dimmer_B1.c: 265: } else {
 18416  03A4  2C07               	goto	i1l676
 18417  03A5                     i1l6841:	
 18418                           
 18419                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18420  03A5  0879               	movf	_DimmerLightsIntr,w
 18421  03A6  3E04               	addlw	4
 18422  03A7  0086               	movwf	6
 18423  03A8  3001               	movlw	1	; select bank2/3
 18424  03A9  0087               	movwf	7
 18425  03AA  300D               	movlw	13
 18426  03AB  0201               	subwf	1,w
 18427  03AC  1C03               	skipc
 18428  03AD  2BB6               	goto	i1l6845
 18429                           
 18430                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18431  03AE  0879               	movf	_DimmerLightsIntr,w
 18432  03AF  3E04               	addlw	4
 18433  03B0  0086               	movwf	6
 18434  03B1  3001               	movlw	1	; select bank2/3
 18435  03B2  0087               	movwf	7
 18436  03B3  3001               	movlw	1
 18437  03B4  0281               	subwf	1,f
 18438                           
 18439                           ;Dimmer_B1.c: 268: } else {
 18440  03B5  2C07               	goto	i1l676
 18441  03B6                     i1l6845:	
 18442                           
 18443                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18444  03B6  0879               	movf	_DimmerLightsIntr,w
 18445  03B7  0086               	movwf	6
 18446  03B8  3001               	movlw	1	; select bank2/3
 18447  03B9  0087               	movwf	7
 18448  03BA  1201               	bcf	1,4
 18449                           
 18450                           ;Dimmer_B1.c: 270: }
 18451                           ;Dimmer_B1.c: 271: }
 18452                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18453  03BB  2C07               	goto	i1l676
 18454  03BC                     i1l6847:	
 18455  03BC  0879               	movf	_DimmerLightsIntr,w
 18456  03BD  0086               	movwf	6
 18457  03BE  3001               	movlw	1	; select bank2/3
 18458  03BF  0087               	movwf	7
 18459  03C0  1D01               	btfss	1,2
 18460  03C1  2C07               	goto	i1l676
 18461                           
 18462                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18463  03C2  0879               	movf	_DimmerLightsIntr,w
 18464  03C3  3E04               	addlw	4
 18465  03C4  0086               	movwf	6
 18466  03C5  3001               	movlw	1	; select bank2/3
 18467  03C6  0087               	movwf	7
 18468  03C7  0879               	movf	_DimmerLightsIntr,w
 18469  03C8  3E05               	addlw	5
 18470  03C9  0084               	movwf	4
 18471  03CA  3001               	movlw	1	; select bank2/3
 18472  03CB  0085               	movwf	5
 18473  03CC  0800               	movf	0,w
 18474  03CD  0201               	subwf	1,w
 18475  03CE  1803               	skipnc
 18476  03CF  2BDA               	goto	i1l6853
 18477                           
 18478                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18479  03D0  3001               	movlw	1
 18480  03D1  00F2               	movwf	??_setDimmerLights_IntrControl
 18481  03D2  0879               	movf	_DimmerLightsIntr,w
 18482  03D3  3E04               	addlw	4
 18483  03D4  0086               	movwf	6
 18484  03D5  3001               	movlw	1	; select bank2/3
 18485  03D6  0087               	movwf	7
 18486  03D7  0872               	movf	??_setDimmerLights_IntrControl,w
 18487  03D8  0781               	addwf	1,f
 18488                           
 18489                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18490  03D9  2BEF               	goto	i1l6857
 18491  03DA                     i1l6853:	
 18492  03DA  0879               	movf	_DimmerLightsIntr,w
 18493  03DB  3E05               	addlw	5
 18494  03DC  0086               	movwf	6
 18495  03DD  3001               	movlw	1	; select bank2/3
 18496  03DE  0087               	movwf	7
 18497  03DF  0879               	movf	_DimmerLightsIntr,w
 18498  03E0  3E04               	addlw	4
 18499  03E1  0084               	movwf	4
 18500  03E2  3001               	movlw	1	; select bank2/3
 18501  03E3  0085               	movwf	5
 18502  03E4  0800               	movf	0,w
 18503  03E5  0201               	subwf	1,w
 18504  03E6  1803               	skipnc
 18505  03E7  2BEF               	goto	i1l6857
 18506                           
 18507                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18508  03E8  0879               	movf	_DimmerLightsIntr,w
 18509  03E9  3E04               	addlw	4
 18510  03EA  0086               	movwf	6
 18511  03EB  3001               	movlw	1	; select bank2/3
 18512  03EC  0087               	movwf	7
 18513  03ED  3001               	movlw	1
 18514  03EE  0281               	subwf	1,f
 18515  03EF                     i1l6857:	
 18516                           
 18517                           ;Dimmer_B1.c: 277: }
 18518                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18519  03EF  0879               	movf	_DimmerLightsIntr,w
 18520  03F0  3E05               	addlw	5
 18521  03F1  0086               	movwf	6
 18522  03F2  3001               	movlw	1	; select bank2/3
 18523  03F3  0087               	movwf	7
 18524  03F4  0879               	movf	_DimmerLightsIntr,w
 18525  03F5  3E04               	addlw	4
 18526  03F6  0084               	movwf	4
 18527  03F7  3001               	movlw	1	; select bank2/3
 18528  03F8  0085               	movwf	5
 18529  03F9  0800               	movf	0,w
 18530  03FA  0601               	xorwf	1,w
 18531  03FB  1D03               	skipz
 18532  03FC  2C07               	goto	i1l676
 18533                           
 18534                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18535  03FD  0879               	movf	_DimmerLightsIntr,w
 18536  03FE  0086               	movwf	6
 18537  03FF  3001               	movlw	1	; select bank2/3
 18538  0400  0087               	movwf	7
 18539  0401  1101               	bcf	1,2
 18540                           
 18541                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18542  0402  0879               	movf	_DimmerLightsIntr,w
 18543  0403  0086               	movwf	6
 18544  0404  3001               	movlw	1	; select bank2/3
 18545  0405  0087               	movwf	7
 18546  0406  1081               	bcf	1,1
 18547  0407                     i1l676:	
 18548                           
 18549                           ;Dimmer_B1.c: 281: }
 18550                           ;Dimmer_B1.c: 282: }
 18551                           ;Dimmer_B1.c: 300: }
 18552                           ;Dimmer_B1.c: 301: }
 18553                           ;Dimmer_B1.c: 302: }
 18554                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18555  0407  0879               	movf	_DimmerLightsIntr,w
 18556  0408  3E09               	addlw	9
 18557  0409  0086               	movwf	6
 18558  040A  3001               	movlw	1	; select bank2/3
 18559  040B  0087               	movwf	7
 18560  040C  1D81               	btfss	1,3
 18561  040D  0008               	return
 18562                           
 18563                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18564  040E  3001               	movlw	1
 18565  040F  00F2               	movwf	??_setDimmerLights_IntrControl
 18566  0410  0879               	movf	_DimmerLightsIntr,w
 18567  0411  3E0C               	addlw	12
 18568  0412  0086               	movwf	6
 18569  0413  3001               	movlw	1	; select bank2/3
 18570  0414  0087               	movwf	7
 18571  0415  0872               	movf	??_setDimmerLights_IntrControl,w
 18572  0416  0781               	addwf	1,f
 18573                           
 18574                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18575  0417  0879               	movf	_DimmerLightsIntr,w
 18576  0418  3E0C               	addlw	12
 18577  0419  0086               	movwf	6
 18578  041A  3001               	movlw	1	; select bank2/3
 18579  041B  0087               	movwf	7
 18580  041C  0801               	movf	1,w
 18581  041D  3A05               	xorlw	5
 18582  041E  1D03               	skipz
 18583  041F  0008               	return
 18584                           
 18585                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18586  0420  0879               	movf	_DimmerLightsIntr,w
 18587  0421  3E0C               	addlw	12
 18588  0422  0086               	movwf	6
 18589  0423  3001               	movlw	1	; select bank2/3
 18590  0424  0087               	movwf	7
 18591  0425  0181               	clrf	1
 18592                           
 18593                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18594  0426  0879               	movf	_DimmerLightsIntr,w
 18595  0427  3E09               	addlw	9
 18596  0428  0086               	movwf	6
 18597  0429  3001               	movlw	1	; select bank2/3
 18598  042A  0087               	movwf	7
 18599  042B  1181               	bcf	1,3
 18600  042C  0008               	return
 18601  042D                     __end_of_setDimmerLights_IntrControl:	
 18602                           
 18603                           	psect	text129
 18604  1C6F                     __ptext129:	
 18605 ;; *************** function _DimmerIntrPointSelect *****************
 18606 ;; Defined at:
 18607 ;;		line 70 in file "../src/Dimmer_B1.c"
 18608 ;; Parameters:    Size  Location     Type
 18609 ;;  lights          1    wreg     unsigned char 
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;  lights          1    1[COMMON] unsigned char 
 18612 ;; Return value:  Size  Location     Type
 18613 ;;		None               void
 18614 ;; Registers used:
 18615 ;;		wreg
 18616 ;; Tracked objects:
 18617 ;;		On entry : 0/0
 18618 ;;		On exit  : 0/0
 18619 ;;		Unchanged: 0/0
 18620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18625 ;;Total ram usage:        2 bytes
 18626 ;; Hardware stack levels used:    1
 18627 ;; This function calls:
 18628 ;;		Nothing
 18629 ;; This function is called by:
 18630 ;;		_setDimmerLights_IntrControl
 18631 ;; This function uses a non-reentrant model
 18632 ;;
 18633                           
 18634                           
 18635                           ;psect for function _DimmerIntrPointSelect
 18636  1C6F                     _DimmerIntrPointSelect:	
 18637                           
 18638                           ;incstack = 0
 18639                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18640                           ;DimmerIntrPointSelect@lights stored from wreg
 18641  1C6F  00F1               	movwf	DimmerIntrPointSelect@lights
 18642                           
 18643                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18644  1C70  0871               	movf	DimmerIntrPointSelect@lights,w
 18645  1C71  3A01               	xorlw	1
 18646  1C72  1D03               	skipz
 18647  1C73  0008               	return
 18648                           
 18649                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18650  1C74  30C5               	movlw	_DimmerLights1& (0+255)
 18651  1C75  00F0               	movwf	??_DimmerIntrPointSelect
 18652  1C76  0870               	movf	??_DimmerIntrPointSelect,w
 18653  1C77  00F9               	movwf	_DimmerLightsIntr
 18654  1C78  0008               	return
 18655  1C79                     __end_of_DimmerIntrPointSelect:	
 18656                           
 18657                           	psect	text130
 18658  1D3F                     __ptext130:	
 18659 ;; *************** function _IOC_ISR *****************
 18660 ;; Defined at:
 18661 ;;		line 401 in file "../src/MCU_B1.c"
 18662 ;; Parameters:    Size  Location     Type
 18663 ;;		None
 18664 ;; Auto vars:     Size  Location     Type
 18665 ;;		None
 18666 ;; Return value:  Size  Location     Type
 18667 ;;		None               void
 18668 ;; Registers used:
 18669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18670 ;; Tracked objects:
 18671 ;;		On entry : 0/0
 18672 ;;		On exit  : 0/0
 18673 ;;		Unchanged: 0/0
 18674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18679 ;;Total ram usage:        0 bytes
 18680 ;; Hardware stack levels used:    1
 18681 ;; Hardware stack levels required when called:    3
 18682 ;; This function calls:
 18683 ;;		_setDimmerReClock
 18684 ;; This function is called by:
 18685 ;;		_ISR
 18686 ;; This function uses a non-reentrant model
 18687 ;;
 18688                           
 18689                           
 18690                           ;psect for function _IOC_ISR
 18691  1D3F                     _IOC_ISR:	
 18692                           
 18693                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18694                           
 18695                           ;incstack = 0
 18696                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18697  1D3F  1D8B               	btfss	11,3	;volatile
 18698  1D40  0008               	return
 18699  1D41  1C0B               	btfss	11,0	;volatile
 18700  1D42  0008               	return
 18701  1D43  0027               	movlb	7	; select bank7
 18702  1D44  1D16               	btfss	22,2	;volatile
 18703  1D45  0008               	return
 18704                           
 18705                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18706  1D46  1116               	bcf	22,2	;volatile
 18707                           
 18708                           ;MCU_B1.c: 404: IOCIF = 0;
 18709  1D47  100B               	bcf	11,0	;volatile
 18710                           
 18711                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18712  1D48  0021               	movlb	1	; select bank1
 18713  1D49  1C20               	btfss	_myMain^(0+128),0
 18714  1D4A  0008               	return
 18715                           
 18716                           ;MCU_B1.c: 408: setDimmerReClock();
 18717  1D4B  319C  240D         	fcall	_setDimmerReClock
 18718  1D4D  0008               	return
 18719  1D4E                     __end_of_IOC_ISR:	
 18720                           
 18721                           	psect	text131
 18722  1C0D                     __ptext131:	
 18723 ;; *************** function _setDimmerReClock *****************
 18724 ;; Defined at:
 18725 ;;		line 244 in file "../src/MCU_B1.c"
 18726 ;; Parameters:    Size  Location     Type
 18727 ;;		None
 18728 ;; Auto vars:     Size  Location     Type
 18729 ;;		None
 18730 ;; Return value:  Size  Location     Type
 18731 ;;		None               void
 18732 ;; Registers used:
 18733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18734 ;; Tracked objects:
 18735 ;;		On entry : 0/0
 18736 ;;		On exit  : 0/0
 18737 ;;		Unchanged: 0/0
 18738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18743 ;;Total ram usage:        0 bytes
 18744 ;; Hardware stack levels used:    1
 18745 ;; Hardware stack levels required when called:    2
 18746 ;; This function calls:
 18747 ;;		_setDimmerLights_IntrIOC_GO
 18748 ;; This function is called by:
 18749 ;;		_IOC_ISR
 18750 ;; This function uses a non-reentrant model
 18751 ;;
 18752                           
 18753                           
 18754                           ;psect for function _setDimmerReClock
 18755  1C0D                     _setDimmerReClock:	
 18756                           
 18757                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18758                           
 18759                           ;incstack = 0
 18760                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18761  1C0D  3001               	movlw	1
 18762  1C0E  3192  2223         	fcall	_setDimmerLights_IntrIOC_GO
 18763  1C10  0008               	return
 18764  1C11                     __end_of_setDimmerReClock:	
 18765                           
 18766                           	psect	text132
 18767  1223                     __ptext132:	
 18768 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18769 ;; Defined at:
 18770 ;;		line 28 in file "../src/Dimmer_B1.c"
 18771 ;; Parameters:    Size  Location     Type
 18772 ;;  lights          1    wreg     unsigned char 
 18773 ;; Auto vars:     Size  Location     Type
 18774 ;;  lights          1    2[COMMON] unsigned char 
 18775 ;; Return value:  Size  Location     Type
 18776 ;;		None               void
 18777 ;; Registers used:
 18778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18779 ;; Tracked objects:
 18780 ;;		On entry : 0/0
 18781 ;;		On exit  : 0/0
 18782 ;;		Unchanged: 0/0
 18783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18788 ;;Total ram usage:        1 bytes
 18789 ;; Hardware stack levels used:    1
 18790 ;; Hardware stack levels required when called:    1
 18791 ;; This function calls:
 18792 ;;		_DimmerIntrIOCPointSelect
 18793 ;; This function is called by:
 18794 ;;		_setDimmerReClock
 18795 ;; This function uses a non-reentrant model
 18796 ;;
 18797                           
 18798                           
 18799                           ;psect for function _setDimmerLights_IntrIOC_GO
 18800  1223                     _setDimmerLights_IntrIOC_GO:	
 18801                           
 18802                           ;incstack = 0
 18803                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18804                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18805  1223  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18806                           
 18807                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18808  1224  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18809  1225  319C  2483  3192   	fcall	_DimmerIntrIOCPointSelect
 18810                           
 18811                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 18812  1228  0021               	movlb	1	; select bank1
 18813  1229  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18814  122A  0086               	movwf	6
 18815  122B  3001               	movlw	1	; select bank2/3
 18816  122C  0087               	movwf	7
 18817  122D  1801               	btfsc	1,0
 18818  122E  0008               	return
 18819  122F  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18820  1230  3E09               	addlw	9
 18821  1231  0086               	movwf	6
 18822  1232  3001               	movlw	1	; select bank2/3
 18823  1233  0087               	movwf	7
 18824  1234  1981               	btfsc	1,3
 18825  1235  0008               	return
 18826                           
 18827                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18828  1236  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18829  1237  0086               	movwf	6
 18830  1238  3001               	movlw	1	; select bank2/3
 18831  1239  0087               	movwf	7
 18832  123A  1401               	bsf	1,0
 18833                           
 18834                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18835  123B  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18836  123C  3E09               	addlw	9
 18837  123D  0086               	movwf	6
 18838  123E  3001               	movlw	1	; select bank2/3
 18839  123F  0087               	movwf	7
 18840  1240  1581               	bsf	1,3
 18841                           
 18842                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18843  1241  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18844  1242  0086               	movwf	6
 18845  1243  3001               	movlw	1	; select bank2/3
 18846  1244  0087               	movwf	7
 18847  1245  1F01               	btfss	1,6
 18848  1246  0008               	return
 18849                           
 18850                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 18851  1247  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18852  1248  3E09               	addlw	9
 18853  1249  0086               	movwf	6
 18854  124A  3001               	movlw	1	; select bank2/3
 18855  124B  0087               	movwf	7
 18856  124C  1601               	bsf	1,4
 18857                           
 18858                           ;Dimmer_B1.c: 51: if (lights == 1) {
 18859  124D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18860  124E  3A01               	xorlw	1
 18861  124F  1D03               	skipz
 18862  1250  0008               	return
 18863                           
 18864                           ;Dimmer_B1.c: 52: RB4 = 1;
 18865  1251  0020               	movlb	0	; select bank0
 18866  1252  160D               	bsf	13,4	;volatile
 18867                           
 18868                           ;Dimmer_B1.c: 53: RB4=1;
 18869  1253  160D               	bsf	13,4	;volatile
 18870  1254  0008               	return
 18871  1255                     __end_of_setDimmerLights_IntrIOC_GO:	
 18872                           
 18873                           	psect	text133
 18874  1C83                     __ptext133:	
 18875 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18876 ;; Defined at:
 18877 ;;		line 8 in file "../src/Dimmer_B1.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;  lights          1    wreg     unsigned char 
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;  lights          1    1[COMMON] unsigned char 
 18882 ;; Return value:  Size  Location     Type
 18883 ;;		None               void
 18884 ;; Registers used:
 18885 ;;		wreg
 18886 ;; Tracked objects:
 18887 ;;		On entry : 0/0
 18888 ;;		On exit  : 0/0
 18889 ;;		Unchanged: 0/0
 18890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18894 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18895 ;;Total ram usage:        2 bytes
 18896 ;; Hardware stack levels used:    1
 18897 ;; This function calls:
 18898 ;;		Nothing
 18899 ;; This function is called by:
 18900 ;;		_setDimmerLights_IntrIOC_GO
 18901 ;; This function uses a non-reentrant model
 18902 ;;
 18903                           
 18904                           
 18905                           ;psect for function _DimmerIntrIOCPointSelect
 18906  1C83                     _DimmerIntrIOCPointSelect:	
 18907                           
 18908                           ;incstack = 0
 18909                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18910                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18911  1C83  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18912                           
 18913                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18914  1C84  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18915  1C85  3A01               	xorlw	1
 18916  1C86  1D03               	skipz
 18917  1C87  0008               	return
 18918                           
 18919                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18920  1C88  30C5               	movlw	_DimmerLights1& (0+255)
 18921  1C89  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18922  1C8A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18923  1C8B  0021               	movlb	1	; select bank1
 18924  1C8C  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 18925  1C8D  0008               	return
 18926  1C8E                     __end_of_DimmerIntrIOCPointSelect:	
 18927  007E                     btemp	set	126	;btemp
 18928  007E                     pic14e$flags	set	126
 18929  007E                     wtemp	set	126
 18930  007E                     wtemp0	set	126
 18931  0080                     wtemp1	set	128
 18932  0082                     wtemp2	set	130
 18933  0084                     wtemp3	set	132
 18934  0086                     wtemp4	set	134
 18935  0088                     wtemp5	set	136
 18936  007F                     wtemp6	set	127
 18937  007E                     ttemp	set	126
 18938  007E                     ttemp0	set	126
 18939  0081                     ttemp1	set	129
 18940  0084                     ttemp2	set	132
 18941  0087                     ttemp3	set	135
 18942  007F                     ttemp4	set	127
 18943  007E                     ltemp	set	126
 18944  007E                     ltemp0	set	126
 18945  0082                     ltemp1	set	130
 18946  0086                     ltemp2	set	134
 18947  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95341
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11071
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4872
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28960
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   28960
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     762
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1347
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28352
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 28 16:41:16 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 07FE             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 1720                                       l94 1547  
                                     l86 1734                                       l95 1543  
                                     l96 1531                                       l98 1541  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 2000  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CC5  
                 __end_of_setDelayOff_GO 0866                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 07A5  
                   _setDimmerLights_Line 1CE7                             ___ftadd@sign 004B  
                                    l231 0A1B                                      l304 1E47  
                                    l305 1E48                     _setDimmerLights_SwOn 13FB  
                                    l348 10FD                                      l707 121D  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RC0 0070  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RB4 006C                                      _RA6 0066  
                                    _RC3 0073                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RF1 00BB  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01D4  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E51  
                  _Buzzer_Initialization 1BFE                          __end_of_ADC_Set 106D  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0CE5                   _setMain_Exception$3731 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 10B1  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D4E  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l2000 0606  
                                   l2010 0582                                     l2002 054C  
                                   l2003 054E                                     l1204 1594  
                                   l2004 0556                                     l2014 05C2  
                                   l2009 0586                                     l1181 1388  
                                   l1430 12B4                                     l2072 13C0  
                                   l2056 0DA5                           _Load_Main$4106 002D  
                                   l1425 129D                                     l1426 12B8  
                                   l2066 0DFB                 ?_DimmerLightsPointSelect 0070  
                                   l1195 11EC                                     l1540 02F0  
                                   l1381 090D                                     l2086 0980  
                                   l1543 01E9                                     l1544 02C0  
                                   l1545 02BE                                     l2098 1463  
                        __end_of_IOC_Set 1D31                                     l2382 1F8F  
                                   l2368 1E96                                     l2392 01A9  
                                   l6001 1262                                     l2394 0082  
                                   l6101 15CF                                     l1685 0E9F  
                                   l2735 09CB                                     l6201 133A  
                                   l2729 09B4                                     l6105 15DE  
                                   l7003 156A                                     l6051 1EB5  
                                   l6133 1EE4                                     l2758 04CC  
                                   l6127 1EDB                                     l6071 1649  
                                   l6143 1098                                     l6311 0A2E  
                                   l6303 0A21                                     l6119 1451  
                                   l7031 17C3                                     l7023 17B0  
                                   l6129 1EDE                                     l6073 167A  
                                   l6209 134E                                     l6049 1EB1  
                                   l6145 109B                                     l6313 0A31  
                                   l6305 0A24                                     l7041 17E1  
                                   l7121 0E6D                                     l6403 1FF0  
                                   l5507 1078                                     l5523 045C  
                                   l6331 0B7A                                     l7131 0E82  
                                   l6069 1674                                     l6173 1298  
                                   l5461 0991                                     l5541 0485  
                                   l6149 10A1                                     l6317 0A37  
                                   l6309 0A2A                                     l7205 05A7  
                                   l7037 17D1                                     l7133 0E83  
                                   l6183 12AF                                     l6175 12A1  
                                   l5471 09B9                                     l5463 099B  
                                   l5551 04A7                                     l5519 0455  
                                   l6351 0B9B                                     l6335 0B80  
                                   l5631 0F63                                     l6263 095D  
                                   l6247 0922                                     l7207 05A9  
                                   l7223 05D3                                     l7047 17F1  
                                   l7119 0E6B                                     l6441 11C1  
                                   l5473 09C1                                     l5465 09A0  
                                   l5457 098A                                     l5561 04C8  
                                   l5553 04AB                                     l5529 046B  
                                   l5617 0F2A                                     l5609 0F11  
                                   l6345 0B92                                     l6329 0B77  
                                   l6337 0B83                                     l6281 09EC  
                                   l6265 0961                                     l7049 17FA  
                                   l7313 0120                                     l6195 1331  
                                   l5547 0498                                     l5723 0CDC  
                                   l5715 0CC2                                     l5707 0CA7  
                                   l7411 1217                                     l6347 0B95  
                                   l6259 0947                                     l7235 05F4  
                                   l7171 056D                                     l6507 1302  
                                   l7323 0152                    _setDimmerLights_SwOff 14BB  
                                   l5485 1DE4                                     l6437 11BC  
                                   l5565 04DE                                     l5549 04A2  
                                   l5717 0CCB                                     l5709 0CB5  
                                   l7413 121F                                     l6285 09F2  
                                   l5661 0FD0                                     l5653 0FBC  
                                   l5637 0F79                                     l6269 0965  
                                   l6391 1119                                     l5743 1197  
                                   l6439 11A0                                     l5559 04BE  
                                   l5719 0CCE                                     l6463 0D33  
                                   l6367 0BAC                                     l6279 09E9  
                                   l7183 057A                                     l7255 1E9B  
                                   l5489 1DEA                                     l5569 04F0  
                                   l7409 1214                                     l6369 0BC4  
                                   l6617 1DCA                                     l5665 0FD8  
                                   l5649 0FB4                                     l5913 1431  
                                   l6529 1CCD                                     l7273 006D  
                                   l7089 0E12                                     l7363 151B  
                                   l6723 14A5                                     l5851 0857  
                                   l5843 083B                                     l5579 050B  
                                   l5595 0ED0                                     l6475 0D5A  
                                   l6483 0B23                                     l6299 0A03  
                                   l6635 0D91                                     l7259 1EA1  
                                   l6389 110E                                     l6397 1FE7  
                                   l6733 14B5                                     l6717 149C  
                                   l5773 1601                                     l5589 0EBA  
                                   l6573 11D4                                     l7349 01A5  
                                   l7605 13EC                                     l6399 1FEA  
                                   l6727 14AC                                     l6719 149F  
                                   l5791 1627                                     l5783 1609  
                                   l5767 15F6                                     l5847 0841  
                                   l7471 067C                                     l6647 0DA8  
                                   l7623 08E5                                     l6729 14AF  
                                   l5785 1615                                     l5849 084E  
                                   l5929 14EF                                     l5689 0C77  
                                   l6905 07F8                                     l7289 00B0  
                                   l5795 1630                                     l5947 1794  
                                   l7723 0289                                     l6675 0DF1  
                                   l6659 0DC0                                     l7299 00E2  
                                   l7571 0C23                                     l7563 0BFE  
                                   l7717 027C                                     l7725 028F  
                                   l6669 0DE6                                     l7629 08F7  
                                   l5799 1638                                     l7735 02A4  
                                   l7807 1F98                                     l7591 0C58  
                                   l7575 0C2B                                     l7639 090E  
                                   l7667 01D8                                     l6699 1DDB  
                                   l6893 07CA                                     l7693 022D  
                                   l6981 1FAD                    _myMain_Initialization 1D4E  
                                   l6895 07D0                                     l7783 02DE  
                                   l7687 0203                                     l6985 1FB2  
                                   l6979 1FAA                                     l7883 16BB  
                                   l6997 1555                                     l7887 16C6  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4005 0996                                     u4025 09AF  
                                   u4045 09BC                                     u4215 0486  
                                   u4305 04BF                                     u4075 09D2  
                                   u4245 0499                                     u4405 0F21  
                                   u4415 0F2B                                     u4275 04AC  
                                   _PEIE 005E                                     u5085 1652  
                                   u4605 0CA8                                     u4525 0FD9  
                                   u4375 0EE2                                     u4535 0FDF  
                                   u4455 0F85                                     u4385 0EF2  
                                   u4465 0F95                                     u4395 0F12  
                                   u4635 0CC3                                     u4485 0FBD  
                                   u5535 1103                                     u4735 160C  
                                   u4575 0C7E                                     u4495 0FC3  
                                   u5625 11A9                                     u4755 1616  
                                   u4940 1752                                     u4765 1620  
                                   u4685 1183                                     u7325 137F  
                                   u7095 1511                                     u4775 1628  
                                   u4945 1750                                     u7505 08D4  
                                   u7435 0C45                                     u7515 08F3  
                                   u6565 0E53                                     u7525 0905  
                                   u6825 05E4                                     u6585 0E73  
                                   u7385 0C11                                     u7545 091C  
                                   u4995 1E74                                     u7475 13E3  
                                   u6685 0567                                     u7485 13F2  
                                   u7745 0295                                     u7665 022F  
                                   u7675 0234                                     u7685 0242  
                                   _LWLO 0CAD                                     _RSSI 00CF  
                                   _WREN 0CAA                                     _Buz1 00AF  
                                   _Load 0143                                     _Temp 00D6  
                                   _main 1697                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 08C3                          __end_of_RF_Main 1C07  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1CBA  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1C0D                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1478  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1D5D                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1C2D  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1C79  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EB  
                        __end_of___awdiv 163F                          __end_of___ftadd 0523  
                        __end_of___ftdiv 0F4C                          __end_of___ftneg 1C66  
                        __end_of___ftmul 1000                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0CE5  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l676 0407  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1E7A  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1255  
             _setDimmerLights_IntrIOC_GO 1223                         __end_of_TMR1_ISR 10F8  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 1697  
             _setDimmerLights_ErrorClose 163F                         __end_of_TMR1_Set 1D17  
                                  _getAD 1F9F                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1E17              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D8D  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 11C4  
          __end_of_setLED_Initialization 1DAE                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1748  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0AA8                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 16EF  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1C31  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D6E  
                   _setSw_Initialization 1D8D                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0921                           _setMemory_Data 1CF3  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1CA4  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 0866                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 108F  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09E2  
               _getMain_All_Error_Status 1287                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F22                                   i1l6821 0353  
                                 i1l6841 03A5                                   i1l6853 03DA  
                                 i1l6845 03B6                                   i1l6839 039F  
                                 i1l6847 03BC                                   i1l6857 03EF  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u612_25 032B                                   _OSCCON 0099  
                                 u725_25 10F2                       __size_of_Load_Main 0144  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1EBB                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 0002  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E8F  
                                 _Dimmer 013E                                   _DlySw1 01DD  
             __end_of_Mcu_Initialization 1E05                      __end_of_Buzzer_Main 154E  
                                 _Memory 01A0                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1F7F               _setDimmerLights_TriggerAdj 1F5F  
                                 ___bmul 1DE1                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D4                                   _s_data 00D5  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 1322  
                                 _myMain 00A0                   __end_of_setMemory_Data 1CFF  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 16EF                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1C3B         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 042D  
            _setDimmerLights_IntrControl 02F6                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1E3D  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1CDB  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1E8F  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0B0D  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5487 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1FBF  
                          __end_of_getAD 1FBF                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1C25                          _getSw_KeyStatus 1DD0  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1D7D                                ?_WDT_Main 0070  
                      __end_of_Load_Main 02F6                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 1199               __end_of_set_TimeoutCleared 1C36  
               __end_of_setDimmerReClock 1C11                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CD  
                   __size_of_setLED_Main 0033                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1C07  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1504                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1C0D                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1C1D                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 1697                           _getDelayOff_GO 1D6D  
                    _CC2500_WriteCommand 1ED3                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BDD                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1C4D                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1066  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13C4  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1CC5                       _setRFSW_AdjControl 1438  
                                _IOC_ISR 1D3F                                  _IOC_Set 1D24  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1358                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1EEC              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1C04  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1CAF          __end_of_setControl_Lights_Table 0981  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 0A43  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1CE7                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1DBF                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1D7D  
         __end_of_getDimmerLights_Status 1D6D                        __end_of_getRxData 0DFE  
                __end_of_getSw_KeyStatus 1DE1                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1C8E                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1F40                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 15EB                                  ___ftadd 042D  
                                ___ftdiv 0EA3                                  ___ftneg 1C5D  
                                ___ftmul 0F4C                                  ___fttol 0C5E  
                    __end_of_Switch_Main 1F9F                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1DBF                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 08C3                                  __ptext2 1D4E  
                                __ptext3 13C4                                  __ptext4 0BDD  
                                __ptext5 1F9F                                  __ptext6 1E05  
                                __ptext7 07FE                                  __ptext8 1C0A  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C6F  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 138E                __end_of_Flash_Memory_Read 1F06  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0523  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1C21  
                      _DimmerLights_Main 11F3           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1C41               __end_of_CC2500_ClearRXFIFO 1C15  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1C19  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1CA4                      _DelayOffPointSelect 1C8E  
                         _getMain_LoadOK 1D31                                  clrloop0 1C48  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 0809  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1145                            _DelayTime_1us 10F8  
                      __end_of_setTxData 07A5               __end_of_Flash_Memory_Write 11F3  
                                init_ram 1C41                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C42                               _setSw_Main 0043  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 108F                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1D9D                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B73  
                          _CC2500_TxData 09E2                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 154E  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C66                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1223                       _Mcu_Initialization 1DF3  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 0921  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1CAF                  __end_of_setPercentValue 0AA8  
                 __end_of_getMain_LoadOK 1D3F                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 116F                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0B0D  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 10B1  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1ED3  
                   _setRF_Initialization 1CBA                       _setMemory_LoopSave 1E2A  
                            _Switch_Main 1F7F                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C99  
                __end_of_getRF_KeyStatus 1DD0                        _setMain_Exception 17A4  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E7A                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1DF3  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
               _DimmerIntrIOCPointSelect 1C83          _setDimmerLights_AdjControl$2408 0027  
                      getSw_KeyStatus@sw 0070                        __size_of_TMR1_ISR 0024  
          __size_of_getDimmerLights_Line 000B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 1358            __size_of_setDimmerLights_Line 000C  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 1748  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1CDB  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 159C  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1255  
                        ?_LedPointSelect 0070                                _Load_Main 01B2  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1C55                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F5F  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1C31                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E2  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 1800                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1C0A                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D2                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1C79                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 12BA                         _CC2500_SIDLEMode 1C19  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 1287  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1E17  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1F22  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00E7  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 0003  
                              _getBuz_GO 1DAE      __end_of_Flash_Memory_Initialization 06E6  
            _Flash_Memory_Initialization 060A                                 ?___awdiv 0020  
                              __ptext100 116F                                __ptext101 1DE1  
                              __ptext110 1E7A                                __ptext102 1D6D  
                              __ptext111 1C19                                __ptext103 1D5D  
                              __ptext120 1ED3                                __ptext112 1478  
                              __ptext104 1C99                                __ptext121 1C31  
                              __ptext113 1145                                __ptext105 16EF  
                              __ptext130 1D3F                                __ptext122 1E65  
                              __ptext114 1F40                                __ptext106 15EB  
                              __ptext131 1C0D                                __ptext123 1E3D  
                              __ptext115 1FDF                                __ptext107 1C1D  
                              __ptext132 1223                                __ptext124 1504  
                              __ptext116 1CDB                                __ptext108 1C3B  
                              __ptext133 1C83                                __ptext125 1BFE  
                              __ptext117 10F8                                __ptext109 1C8E  
                               ?___ftadd 0041                                __ptext118 1C15  
                              __ptext127 10D4                                __ptext119 1C11  
                              __ptext128 02F6                                __ptext129 1C6F  
                              _getRxData 0D6E                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 005E  
                __end_of_setRFSW_Control 15EB            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1C01                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0020                       __end_of_TouchPower 1EA4  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 10D4  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2344 0069  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 1504  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D5D  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1CD0                      __end_of_setLED_Main 12ED  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1C0A  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1C29                          SwPointSelect@sw 0021  
                              clear_ram0 1C47                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 08C3  
                              _setTxData 06E6      __end_of_DimmerLights_Initialization 1D24  
            _DimmerLights_Initialization 1D17                       _CC2500_ClearRXFIFO 1C11  
                     _CC2500_ClearTXFIFO 1C15           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E65                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 11C4                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10D4  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1D0B  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0141  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1EEC  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1E05  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E8  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1D0B  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0800                      __end_of_setLog_Code 13C4  
                  _DlyOff_Initialization 1C3B                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1C2D  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1C55                    _Switch_Initialization 0800  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 13FB  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E3D  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$3747 0021  
          _getMain_All_Error_Status$3756 0023                 __end_of_getDimmer_LoadOK 1C5D  
                    _Load_Initialization 1C36                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 106D  
                       ??_LedPointSelect 0020                                 ___ftpack 0981  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002B                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 12BA               __end_of_setRF_DimmerLights 17A4  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 000A                     ?_Load_Initialization 0070  
                               __ptext10 1C07                                 __ptext11 0003  
                               __ptext20 0800                                 __ptext12 1F7F  
                               __ptext21 1D8D                                 __ptext13 0043  
                               __ptext30 13FB                                 __ptext22 1E8F  
                               __ptext14 1E51                                 __ptext31 1438  
                               __ptext23 1C04                                 __ptext15 12ED  
                               __ptext40 0B73                                 __ptext32 1255  
                               __ptext24 0523                                 __ptext16 1DD0  
                               __ptext41 108F                                 __ptext33 10B1  
                               __ptext25 0D6E                                 __ptext17 1CD0  
                               __ptext50 1C2D                                 __ptext42 1EA4  
                               __ptext34 0AA8                                 __ptext26 138E  
                               __ptext18 17A4                                 __ptext51 1066  
                               __ptext43 1C01                                 __ptext35 0F4C  
                               __ptext27 1E2A                                 __ptext19 1CC5  
                               __ptext60 12BA                                 __ptext52 01B2  
                               __ptext44 1CBA                                 __ptext36 1E17  
                               __ptext28 0921                                 __ptext61 1C25  
                               __ptext53 1D31                                 __ptext45 1DF3  
                               __ptext37 1DBF                                 __ptext29 159C  
                               __ptext70 1EEC                                 __ptext62 1D9D  
                               __ptext54 1C55                                 __ptext46 1CAF  
                               __ptext38 1DAE                                 __ptext71 11F3  
                               __ptext63 1358                                 __ptext55 1D7D  
                               __ptext47 1D0B                                 __ptext39 09E2  
                               __ptext80 0EA3                                 __ptext72 07A5  
                               __ptext64 154E                                 __ptext56 1C79  
                               __ptext48 1EBB                                 __ptext81 042D  
                               __ptext73 0B0D                                 __ptext65 1CFF  
                               __ptext57 1C36                                 __ptext49 1D24  
                               __ptext90 1D17                                 __ptext82 106D  
                               __ptext74 0CE5                                 __ptext66 060A  
                               __ptext58 1F06                                 __ptext91 111E  
                               __ptext83 0981                                 __ptext75 06E6  
                               __ptext67 1CF3                                 __ptext59 1C29  
                               __ptext92 0002                                 __ptext84 1322  
                               __ptext76 1748                                 __ptext68 11C4  
                               __ptext93 1C21                                 __ptext85 1CA4  
                               __ptext77 0A43                                 __ptext69 1C66  
                               __ptext94 0866                                 __ptext86 1CE7  
                               __ptext78 0C5E                                 __ptext95 163F  
                               __ptext87 1287                                 __ptext79 1C5D  
                               __ptext96 14BB                                 __ptext88 1199  
                               __ptext97 1F5F                                 __ptext89 1C4D  
                               __ptext98 1F22                                 __ptext99 0809  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1CD0  
          __end_of_Dimmer_Initialization 0003             __end_of_setDimmerLights_Main 07FE  
           __end_of_setDimmerLights_Line 1CF3                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 1438                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1E51  
               __end_of_CC2500_SIDLEMode 1C1D               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C99               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00E9                __size_of_setDimmerReClock 0004  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1EA4  
                     _CC2500_InitPATable 1F40                 __end_of_setMemory_Modify 1E2A  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 060A  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EB  
                               main@argv 00ED                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6543 0022                          _CC2500_PowerRST 1478  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 159C  
                      ??_getPercentValue 005C                              _setLog_Code 138E  
            __end_of_Flash_Memory_Unlock 1C6F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1FDF                       __end_of_setSw_Main 01B2  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 116F  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C83  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1145  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 111E  
            __end_of_setDimmerLights_Adj 0B73                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1C01     __size_of_setDimmerLights_IntrControl 0137  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1CFF  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1C21      __size_of_setDimmerLights_IntrIOC_GO 0032  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1C25       __end_of_setDimmerLights_AdjControl 1322  
             _setDimmerLights_AdjControl 12ED                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0809  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 1199  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 111E                  __end_of_CC2500_ReadByte 1EBB  
           __end_of_setSw_Initialization 1D9D                          _Timeout_Counter 1E65  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
             __end_of_LED_Initialization 1C29         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 0004                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1C04                    __end_of_CC2500_RxData 0BDD  
                  __end_of_CC2500_TxData 0A43                    _setLoad_AH_AL_Restore 1F06  
                __end_of_CC2500_PowerRST 14BB           getAll_DimmerLights_AdjGO@adjgo 0020  
