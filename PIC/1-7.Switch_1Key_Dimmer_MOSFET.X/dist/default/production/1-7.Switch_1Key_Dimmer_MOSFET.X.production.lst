

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 05 14:56:53 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	intentry,global,class=CODE,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	dabs	1,0x7E,2
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  011D                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0194                     	;# 
   215  0195                     	;# 
   216  0196                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020D                     	;# 
   230  0210                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0298                     	;# 
   251  0298                     	;# 
   252  0299                     	;# 
   253  029A                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0095                     	;# 
   302  0096                     	;# 
   303  0097                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  011D                     	;# 
   317  018C                     	;# 
   318  018D                     	;# 
   319  018E                     	;# 
   320  0191                     	;# 
   321  0191                     	;# 
   322  0192                     	;# 
   323  0193                     	;# 
   324  0193                     	;# 
   325  0194                     	;# 
   326  0195                     	;# 
   327  0196                     	;# 
   328  0197                     	;# 
   329  0199                     	;# 
   330  019A                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020D                     	;# 
   341  0210                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0298                     	;# 
   362  0298                     	;# 
   363  0299                     	;# 
   364  029A                     	;# 
   365  0394                     	;# 
   366  0395                     	;# 
   367  0396                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0095                     	;# 
   413  0096                     	;# 
   414  0097                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  010C                     	;# 
   423  010D                     	;# 
   424  010E                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0194                     	;# 
   437  0195                     	;# 
   438  0196                     	;# 
   439  0197                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020D                     	;# 
   452  0210                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0291                     	;# 
   469  0291                     	;# 
   470  0292                     	;# 
   471  0293                     	;# 
   472  0298                     	;# 
   473  0298                     	;# 
   474  0299                     	;# 
   475  029A                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  0010                     	;# 
   506  0011                     	;# 
   507  0012                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0090                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  010C                     	;# 
   534  010D                     	;# 
   535  010E                     	;# 
   536  0116                     	;# 
   537  0117                     	;# 
   538  011D                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541  018E                     	;# 
   542  0191                     	;# 
   543  0191                     	;# 
   544  0192                     	;# 
   545  0193                     	;# 
   546  0193                     	;# 
   547  0194                     	;# 
   548  0195                     	;# 
   549  0196                     	;# 
   550  0197                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019E                     	;# 
   561  019F                     	;# 
   562  020D                     	;# 
   563  0210                     	;# 
   564  0211                     	;# 
   565  0211                     	;# 
   566  0212                     	;# 
   567  0212                     	;# 
   568  0213                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0214                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0216                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0217                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0298                     	;# 
   584  0298                     	;# 
   585  0299                     	;# 
   586  029A                     	;# 
   587  0394                     	;# 
   588  0395                     	;# 
   589  0396                     	;# 
   590  0FE4                     	;# 
   591  0FE5                     	;# 
   592  0FE6                     	;# 
   593  0FE7                     	;# 
   594  0FE8                     	;# 
   595  0FE9                     	;# 
   596  0FEA                     	;# 
   597  0FEB                     	;# 
   598  0FED                     	;# 
   599  0FEE                     	;# 
   600  0FEF                     	;# 
   601  0000                     	;# 
   602  0001                     	;# 
   603  0002                     	;# 
   604  0003                     	;# 
   605  0004                     	;# 
   606  0005                     	;# 
   607  0006                     	;# 
   608  0007                     	;# 
   609  0008                     	;# 
   610  0009                     	;# 
   611  000A                     	;# 
   612  000B                     	;# 
   613  000C                     	;# 
   614  000D                     	;# 
   615  000E                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0015                     	;# 
   620  0016                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001B                     	;# 
   627  001C                     	;# 
   628  008C                     	;# 
   629  008D                     	;# 
   630  008E                     	;# 
   631  0090                     	;# 
   632  0091                     	;# 
   633  0092                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019C                     	;# 
   669  019C                     	;# 
   670  019D                     	;# 
   671  019E                     	;# 
   672  019F                     	;# 
   673  020D                     	;# 
   674  0210                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0216                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0217                     	;# 
   690  0291                     	;# 
   691  0291                     	;# 
   692  0292                     	;# 
   693  0293                     	;# 
   694  0298                     	;# 
   695  0298                     	;# 
   696  0299                     	;# 
   697  029A                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  0FE4                     	;# 
   702  0FE5                     	;# 
   703  0FE6                     	;# 
   704  0FE7                     	;# 
   705  0FE8                     	;# 
   706  0FE9                     	;# 
   707  0FEA                     	;# 
   708  0FEB                     	;# 
   709  0FED                     	;# 
   710  0FEE                     	;# 
   711  0FEF                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0095                     	;# 
   746  0096                     	;# 
   747  0097                     	;# 
   748  0099                     	;# 
   749  009A                     	;# 
   750  009B                     	;# 
   751  009B                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009E                     	;# 
   755  010C                     	;# 
   756  010D                     	;# 
   757  010E                     	;# 
   758  0116                     	;# 
   759  0117                     	;# 
   760  011D                     	;# 
   761  018C                     	;# 
   762  018D                     	;# 
   763  018E                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0194                     	;# 
   770  0195                     	;# 
   771  0196                     	;# 
   772  0197                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019C                     	;# 
   780  019C                     	;# 
   781  019D                     	;# 
   782  019E                     	;# 
   783  019F                     	;# 
   784  020D                     	;# 
   785  0210                     	;# 
   786  0211                     	;# 
   787  0211                     	;# 
   788  0212                     	;# 
   789  0212                     	;# 
   790  0213                     	;# 
   791  0213                     	;# 
   792  0214                     	;# 
   793  0214                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0216                     	;# 
   798  0216                     	;# 
   799  0217                     	;# 
   800  0217                     	;# 
   801  0291                     	;# 
   802  0291                     	;# 
   803  0292                     	;# 
   804  0293                     	;# 
   805  0298                     	;# 
   806  0298                     	;# 
   807  0299                     	;# 
   808  029A                     	;# 
   809  0394                     	;# 
   810  0395                     	;# 
   811  0396                     	;# 
   812  0FE4                     	;# 
   813  0FE5                     	;# 
   814  0FE6                     	;# 
   815  0FE7                     	;# 
   816  0FE8                     	;# 
   817  0FE9                     	;# 
   818  0FEA                     	;# 
   819  0FEB                     	;# 
   820  0FED                     	;# 
   821  0FEE                     	;# 
   822  0FEF                     	;# 
   823  0000                     	;# 
   824  0001                     	;# 
   825  0002                     	;# 
   826  0003                     	;# 
   827  0004                     	;# 
   828  0005                     	;# 
   829  0006                     	;# 
   830  0007                     	;# 
   831  0008                     	;# 
   832  0009                     	;# 
   833  000A                     	;# 
   834  000B                     	;# 
   835  000C                     	;# 
   836  000D                     	;# 
   837  000E                     	;# 
   838  0010                     	;# 
   839  0011                     	;# 
   840  0012                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0090                     	;# 
   854  0091                     	;# 
   855  0092                     	;# 
   856  0095                     	;# 
   857  0096                     	;# 
   858  0097                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009B                     	;# 
   863  009C                     	;# 
   864  009D                     	;# 
   865  009E                     	;# 
   866  010C                     	;# 
   867  010D                     	;# 
   868  010E                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  011D                     	;# 
   872  018C                     	;# 
   873  018D                     	;# 
   874  018E                     	;# 
   875  0191                     	;# 
   876  0191                     	;# 
   877  0192                     	;# 
   878  0193                     	;# 
   879  0193                     	;# 
   880  0194                     	;# 
   881  0195                     	;# 
   882  0196                     	;# 
   883  0197                     	;# 
   884  0199                     	;# 
   885  019A                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020D                     	;# 
   896  0210                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  0291                     	;# 
   913  0291                     	;# 
   914  0292                     	;# 
   915  0293                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  0394                     	;# 
   921  0395                     	;# 
   922  0396                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0010                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0090                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  010C                     	;# 
   978  010D                     	;# 
   979  010E                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0197                     	;# 
   995  0199                     	;# 
   996  019A                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019C                     	;# 
  1002  019C                     	;# 
  1003  019D                     	;# 
  1004  019E                     	;# 
  1005  019F                     	;# 
  1006  020D                     	;# 
  1007  0210                     	;# 
  1008  0211                     	;# 
  1009  0211                     	;# 
  1010  0212                     	;# 
  1011  0212                     	;# 
  1012  0213                     	;# 
  1013  0213                     	;# 
  1014  0214                     	;# 
  1015  0214                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0216                     	;# 
  1020  0216                     	;# 
  1021  0217                     	;# 
  1022  0217                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0298                     	;# 
  1028  0298                     	;# 
  1029  0299                     	;# 
  1030  029A                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  0090                     	;# 
  1076  0091                     	;# 
  1077  0092                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  010E                     	;# 
  1091  0116                     	;# 
  1092  0117                     	;# 
  1093  011D                     	;# 
  1094  018C                     	;# 
  1095  018D                     	;# 
  1096  018E                     	;# 
  1097  0191                     	;# 
  1098  0191                     	;# 
  1099  0192                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0194                     	;# 
  1103  0195                     	;# 
  1104  0196                     	;# 
  1105  0197                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019C                     	;# 
  1113  019C                     	;# 
  1114  019D                     	;# 
  1115  019E                     	;# 
  1116  019F                     	;# 
  1117  020D                     	;# 
  1118  0210                     	;# 
  1119  0211                     	;# 
  1120  0211                     	;# 
  1121  0212                     	;# 
  1122  0212                     	;# 
  1123  0213                     	;# 
  1124  0213                     	;# 
  1125  0214                     	;# 
  1126  0214                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0216                     	;# 
  1131  0216                     	;# 
  1132  0217                     	;# 
  1133  0217                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0298                     	;# 
  1139  0298                     	;# 
  1140  0299                     	;# 
  1141  029A                     	;# 
  1142  0394                     	;# 
  1143  0395                     	;# 
  1144  0396                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0010                     	;# 
  1172  0011                     	;# 
  1173  0012                     	;# 
  1174  0015                     	;# 
  1175  0016                     	;# 
  1176  0016                     	;# 
  1177  0017                     	;# 
  1178  0018                     	;# 
  1179  0019                     	;# 
  1180  001A                     	;# 
  1181  001B                     	;# 
  1182  001C                     	;# 
  1183  008C                     	;# 
  1184  008D                     	;# 
  1185  008E                     	;# 
  1186  0090                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0095                     	;# 
  1190  0096                     	;# 
  1191  0097                     	;# 
  1192  0099                     	;# 
  1193  009A                     	;# 
  1194  009B                     	;# 
  1195  009B                     	;# 
  1196  009C                     	;# 
  1197  009D                     	;# 
  1198  009E                     	;# 
  1199  010C                     	;# 
  1200  010D                     	;# 
  1201  010E                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  011D                     	;# 
  1205  018C                     	;# 
  1206  018D                     	;# 
  1207  018E                     	;# 
  1208  0191                     	;# 
  1209  0191                     	;# 
  1210  0192                     	;# 
  1211  0193                     	;# 
  1212  0193                     	;# 
  1213  0194                     	;# 
  1214  0195                     	;# 
  1215  0196                     	;# 
  1216  0197                     	;# 
  1217  0199                     	;# 
  1218  019A                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019C                     	;# 
  1224  019C                     	;# 
  1225  019D                     	;# 
  1226  019E                     	;# 
  1227  019F                     	;# 
  1228  020D                     	;# 
  1229  0210                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  0212                     	;# 
  1233  0212                     	;# 
  1234  0213                     	;# 
  1235  0213                     	;# 
  1236  0214                     	;# 
  1237  0214                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  0394                     	;# 
  1254  0395                     	;# 
  1255  0396                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  0010                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0095                     	;# 
  1301  0096                     	;# 
  1302  0097                     	;# 
  1303  0099                     	;# 
  1304  009A                     	;# 
  1305  009B                     	;# 
  1306  009B                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009E                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010E                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  011D                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0194                     	;# 
  1325  0195                     	;# 
  1326  0196                     	;# 
  1327  0197                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019C                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020D                     	;# 
  1340  0210                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0216                     	;# 
  1353  0216                     	;# 
  1354  0217                     	;# 
  1355  0217                     	;# 
  1356  0291                     	;# 
  1357  0291                     	;# 
  1358  0292                     	;# 
  1359  0293                     	;# 
  1360  0298                     	;# 
  1361  0298                     	;# 
  1362  0299                     	;# 
  1363  029A                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  0FE4                     	;# 
  1368  0FE5                     	;# 
  1369  0FE6                     	;# 
  1370  0FE7                     	;# 
  1371  0FE8                     	;# 
  1372  0FE9                     	;# 
  1373  0FEA                     	;# 
  1374  0FEB                     	;# 
  1375  0FED                     	;# 
  1376  0FEE                     	;# 
  1377  0FEF                     	;# 
  1378  0000                     	;# 
  1379  0001                     	;# 
  1380  0002                     	;# 
  1381  0003                     	;# 
  1382  0004                     	;# 
  1383  0005                     	;# 
  1384  0006                     	;# 
  1385  0007                     	;# 
  1386  0008                     	;# 
  1387  0009                     	;# 
  1388  000A                     	;# 
  1389  000B                     	;# 
  1390  000C                     	;# 
  1391  000D                     	;# 
  1392  000E                     	;# 
  1393  0010                     	;# 
  1394  0011                     	;# 
  1395  0012                     	;# 
  1396  0015                     	;# 
  1397  0016                     	;# 
  1398  0016                     	;# 
  1399  0017                     	;# 
  1400  0018                     	;# 
  1401  0019                     	;# 
  1402  001A                     	;# 
  1403  001B                     	;# 
  1404  001C                     	;# 
  1405  008C                     	;# 
  1406  008D                     	;# 
  1407  008E                     	;# 
  1408  0090                     	;# 
  1409  0091                     	;# 
  1410  0092                     	;# 
  1411  0095                     	;# 
  1412  0096                     	;# 
  1413  0097                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  010C                     	;# 
  1422  010D                     	;# 
  1423  010E                     	;# 
  1424  0116                     	;# 
  1425  0117                     	;# 
  1426  011D                     	;# 
  1427  018C                     	;# 
  1428  018D                     	;# 
  1429  018E                     	;# 
  1430  0191                     	;# 
  1431  0191                     	;# 
  1432  0192                     	;# 
  1433  0193                     	;# 
  1434  0193                     	;# 
  1435  0194                     	;# 
  1436  0195                     	;# 
  1437  0196                     	;# 
  1438  0197                     	;# 
  1439  0199                     	;# 
  1440  019A                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019C                     	;# 
  1446  019C                     	;# 
  1447  019D                     	;# 
  1448  019E                     	;# 
  1449  019F                     	;# 
  1450  020D                     	;# 
  1451  0210                     	;# 
  1452  0211                     	;# 
  1453  0211                     	;# 
  1454  0212                     	;# 
  1455  0212                     	;# 
  1456  0213                     	;# 
  1457  0213                     	;# 
  1458  0214                     	;# 
  1459  0214                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0216                     	;# 
  1464  0216                     	;# 
  1465  0217                     	;# 
  1466  0217                     	;# 
  1467  0291                     	;# 
  1468  0291                     	;# 
  1469  0292                     	;# 
  1470  0293                     	;# 
  1471  0298                     	;# 
  1472  0298                     	;# 
  1473  0299                     	;# 
  1474  029A                     	;# 
  1475  0394                     	;# 
  1476  0395                     	;# 
  1477  0396                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0090                     	;# 
  1520  0091                     	;# 
  1521  0092                     	;# 
  1522  0095                     	;# 
  1523  0096                     	;# 
  1524  0097                     	;# 
  1525  0099                     	;# 
  1526  009A                     	;# 
  1527  009B                     	;# 
  1528  009B                     	;# 
  1529  009C                     	;# 
  1530  009D                     	;# 
  1531  009E                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0197                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020D                     	;# 
  1562  0210                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0298                     	;# 
  1583  0298                     	;# 
  1584  0299                     	;# 
  1585  029A                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  008C                     	;# 
  1628  008D                     	;# 
  1629  008E                     	;# 
  1630  0090                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0095                     	;# 
  1634  0096                     	;# 
  1635  0097                     	;# 
  1636  0099                     	;# 
  1637  009A                     	;# 
  1638  009B                     	;# 
  1639  009B                     	;# 
  1640  009C                     	;# 
  1641  009D                     	;# 
  1642  009E                     	;# 
  1643  010C                     	;# 
  1644  010D                     	;# 
  1645  010E                     	;# 
  1646  0116                     	;# 
  1647  0117                     	;# 
  1648  011D                     	;# 
  1649  018C                     	;# 
  1650  018D                     	;# 
  1651  018E                     	;# 
  1652  0191                     	;# 
  1653  0191                     	;# 
  1654  0192                     	;# 
  1655  0193                     	;# 
  1656  0193                     	;# 
  1657  0194                     	;# 
  1658  0195                     	;# 
  1659  0196                     	;# 
  1660  0197                     	;# 
  1661  0199                     	;# 
  1662  019A                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019D                     	;# 
  1670  019E                     	;# 
  1671  019F                     	;# 
  1672  020D                     	;# 
  1673  0210                     	;# 
  1674  0211                     	;# 
  1675  0211                     	;# 
  1676  0212                     	;# 
  1677  0212                     	;# 
  1678  0213                     	;# 
  1679  0213                     	;# 
  1680  0214                     	;# 
  1681  0214                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0216                     	;# 
  1686  0216                     	;# 
  1687  0217                     	;# 
  1688  0217                     	;# 
  1689  0291                     	;# 
  1690  0291                     	;# 
  1691  0292                     	;# 
  1692  0293                     	;# 
  1693  0298                     	;# 
  1694  0298                     	;# 
  1695  0299                     	;# 
  1696  029A                     	;# 
  1697  0394                     	;# 
  1698  0395                     	;# 
  1699  0396                     	;# 
  1700  0FE4                     	;# 
  1701  0FE5                     	;# 
  1702  0FE6                     	;# 
  1703  0FE7                     	;# 
  1704  0FE8                     	;# 
  1705  0FE9                     	;# 
  1706  0FEA                     	;# 
  1707  0FEB                     	;# 
  1708  0FED                     	;# 
  1709  0FEE                     	;# 
  1710  0FEF                     	;# 
  1711  0000                     	;# 
  1712  0001                     	;# 
  1713  0002                     	;# 
  1714  0003                     	;# 
  1715  0004                     	;# 
  1716  0005                     	;# 
  1717  0006                     	;# 
  1718  0007                     	;# 
  1719  0008                     	;# 
  1720  0009                     	;# 
  1721  000A                     	;# 
  1722  000B                     	;# 
  1723  000C                     	;# 
  1724  000D                     	;# 
  1725  000E                     	;# 
  1726  0010                     	;# 
  1727  0011                     	;# 
  1728  0012                     	;# 
  1729  0015                     	;# 
  1730  0016                     	;# 
  1731  0016                     	;# 
  1732  0017                     	;# 
  1733  0018                     	;# 
  1734  0019                     	;# 
  1735  001A                     	;# 
  1736  001B                     	;# 
  1737  001C                     	;# 
  1738  008C                     	;# 
  1739  008D                     	;# 
  1740  008E                     	;# 
  1741  0090                     	;# 
  1742  0091                     	;# 
  1743  0092                     	;# 
  1744  0095                     	;# 
  1745  0096                     	;# 
  1746  0097                     	;# 
  1747  0099                     	;# 
  1748  009A                     	;# 
  1749  009B                     	;# 
  1750  009B                     	;# 
  1751  009C                     	;# 
  1752  009D                     	;# 
  1753  009E                     	;# 
  1754  010C                     	;# 
  1755  010D                     	;# 
  1756  010E                     	;# 
  1757  0116                     	;# 
  1758  0117                     	;# 
  1759  011D                     	;# 
  1760  018C                     	;# 
  1761  018D                     	;# 
  1762  018E                     	;# 
  1763  0191                     	;# 
  1764  0191                     	;# 
  1765  0192                     	;# 
  1766  0193                     	;# 
  1767  0193                     	;# 
  1768  0194                     	;# 
  1769  0195                     	;# 
  1770  0196                     	;# 
  1771  0197                     	;# 
  1772  0199                     	;# 
  1773  019A                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019C                     	;# 
  1779  019C                     	;# 
  1780  019D                     	;# 
  1781  019E                     	;# 
  1782  019F                     	;# 
  1783  020D                     	;# 
  1784  0210                     	;# 
  1785  0211                     	;# 
  1786  0211                     	;# 
  1787  0212                     	;# 
  1788  0212                     	;# 
  1789  0213                     	;# 
  1790  0213                     	;# 
  1791  0214                     	;# 
  1792  0214                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0216                     	;# 
  1797  0216                     	;# 
  1798  0217                     	;# 
  1799  0217                     	;# 
  1800  0291                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0298                     	;# 
  1805  0298                     	;# 
  1806  0299                     	;# 
  1807  029A                     	;# 
  1808  0394                     	;# 
  1809  0395                     	;# 
  1810  0396                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0010                     	;# 
  1838  0011                     	;# 
  1839  0012                     	;# 
  1840  0015                     	;# 
  1841  0016                     	;# 
  1842  0016                     	;# 
  1843  0017                     	;# 
  1844  0018                     	;# 
  1845  0019                     	;# 
  1846  001A                     	;# 
  1847  001B                     	;# 
  1848  001C                     	;# 
  1849  008C                     	;# 
  1850  008D                     	;# 
  1851  008E                     	;# 
  1852  0090                     	;# 
  1853  0091                     	;# 
  1854  0092                     	;# 
  1855  0095                     	;# 
  1856  0096                     	;# 
  1857  0097                     	;# 
  1858  0099                     	;# 
  1859  009A                     	;# 
  1860  009B                     	;# 
  1861  009B                     	;# 
  1862  009C                     	;# 
  1863  009D                     	;# 
  1864  009E                     	;# 
  1865  010C                     	;# 
  1866  010D                     	;# 
  1867  010E                     	;# 
  1868  0116                     	;# 
  1869  0117                     	;# 
  1870  011D                     	;# 
  1871  018C                     	;# 
  1872  018D                     	;# 
  1873  018E                     	;# 
  1874  0191                     	;# 
  1875  0191                     	;# 
  1876  0192                     	;# 
  1877  0193                     	;# 
  1878  0193                     	;# 
  1879  0194                     	;# 
  1880  0195                     	;# 
  1881  0196                     	;# 
  1882  0197                     	;# 
  1883  0199                     	;# 
  1884  019A                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019D                     	;# 
  1892  019E                     	;# 
  1893  019F                     	;# 
  1894  020D                     	;# 
  1895  0210                     	;# 
  1896  0211                     	;# 
  1897  0211                     	;# 
  1898  0212                     	;# 
  1899  0212                     	;# 
  1900  0213                     	;# 
  1901  0213                     	;# 
  1902  0214                     	;# 
  1903  0214                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0216                     	;# 
  1908  0216                     	;# 
  1909  0217                     	;# 
  1910  0217                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0298                     	;# 
  1916  0298                     	;# 
  1917  0299                     	;# 
  1918  029A                     	;# 
  1919  0394                     	;# 
  1920  0395                     	;# 
  1921  0396                     	;# 
  1922  0FE4                     	;# 
  1923  0FE5                     	;# 
  1924  0FE6                     	;# 
  1925  0FE7                     	;# 
  1926  0FE8                     	;# 
  1927  0FE9                     	;# 
  1928  0FEA                     	;# 
  1929  0FEB                     	;# 
  1930  0FED                     	;# 
  1931  0FEE                     	;# 
  1932  0FEF                     	;# 
  1933  0000                     	;# 
  1934  0001                     	;# 
  1935  0002                     	;# 
  1936  0003                     	;# 
  1937  0004                     	;# 
  1938  0005                     	;# 
  1939  0006                     	;# 
  1940  0007                     	;# 
  1941  0008                     	;# 
  1942  0009                     	;# 
  1943  000A                     	;# 
  1944  000B                     	;# 
  1945  000C                     	;# 
  1946  000D                     	;# 
  1947  000E                     	;# 
  1948  0010                     	;# 
  1949  0011                     	;# 
  1950  0012                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  0090                     	;# 
  1964  0091                     	;# 
  1965  0092                     	;# 
  1966  0095                     	;# 
  1967  0096                     	;# 
  1968  0097                     	;# 
  1969  0099                     	;# 
  1970  009A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  010C                     	;# 
  1977  010D                     	;# 
  1978  010E                     	;# 
  1979  0116                     	;# 
  1980  0117                     	;# 
  1981  011D                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0191                     	;# 
  1986  0191                     	;# 
  1987  0192                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019C                     	;# 
  2001  019C                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019F                     	;# 
  2005  020D                     	;# 
  2006  0210                     	;# 
  2007  0211                     	;# 
  2008  0211                     	;# 
  2009  0212                     	;# 
  2010  0212                     	;# 
  2011  0213                     	;# 
  2012  0213                     	;# 
  2013  0214                     	;# 
  2014  0214                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0216                     	;# 
  2019  0216                     	;# 
  2020  0217                     	;# 
  2021  0217                     	;# 
  2022  0291                     	;# 
  2023  0291                     	;# 
  2024  0292                     	;# 
  2025  0293                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  0394                     	;# 
  2031  0395                     	;# 
  2032  0396                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;# 
  2044  0000                     	;# 
  2045  0001                     	;# 
  2046  0002                     	;# 
  2047  0003                     	;# 
  2048  0004                     	;# 
  2049  0005                     	;# 
  2050  0006                     	;# 
  2051  0007                     	;# 
  2052  0008                     	;# 
  2053  0009                     	;# 
  2054  000A                     	;# 
  2055  000B                     	;# 
  2056  000C                     	;# 
  2057  000D                     	;# 
  2058  000E                     	;# 
  2059  0010                     	;# 
  2060  0011                     	;# 
  2061  0012                     	;# 
  2062  0015                     	;# 
  2063  0016                     	;# 
  2064  0016                     	;# 
  2065  0017                     	;# 
  2066  0018                     	;# 
  2067  0019                     	;# 
  2068  001A                     	;# 
  2069  001B                     	;# 
  2070  001C                     	;# 
  2071  008C                     	;# 
  2072  008D                     	;# 
  2073  008E                     	;# 
  2074  0090                     	;# 
  2075  0091                     	;# 
  2076  0092                     	;# 
  2077  0095                     	;# 
  2078  0096                     	;# 
  2079  0097                     	;# 
  2080  0099                     	;# 
  2081  009A                     	;# 
  2082  009B                     	;# 
  2083  009B                     	;# 
  2084  009C                     	;# 
  2085  009D                     	;# 
  2086  009E                     	;# 
  2087  010C                     	;# 
  2088  010D                     	;# 
  2089  010E                     	;# 
  2090  0116                     	;# 
  2091  0117                     	;# 
  2092  011D                     	;# 
  2093  018C                     	;# 
  2094  018D                     	;# 
  2095  018E                     	;# 
  2096  0191                     	;# 
  2097  0191                     	;# 
  2098  0192                     	;# 
  2099  0193                     	;# 
  2100  0193                     	;# 
  2101  0194                     	;# 
  2102  0195                     	;# 
  2103  0196                     	;# 
  2104  0197                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019C                     	;# 
  2113  019D                     	;# 
  2114  019E                     	;# 
  2115  019F                     	;# 
  2116  020D                     	;# 
  2117  0210                     	;# 
  2118  0211                     	;# 
  2119  0211                     	;# 
  2120  0212                     	;# 
  2121  0212                     	;# 
  2122  0213                     	;# 
  2123  0213                     	;# 
  2124  0214                     	;# 
  2125  0214                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0216                     	;# 
  2130  0216                     	;# 
  2131  0217                     	;# 
  2132  0217                     	;# 
  2133  0291                     	;# 
  2134  0291                     	;# 
  2135  0292                     	;# 
  2136  0293                     	;# 
  2137  0298                     	;# 
  2138  0298                     	;# 
  2139  0299                     	;# 
  2140  029A                     	;# 
  2141  0394                     	;# 
  2142  0395                     	;# 
  2143  0396                     	;# 
  2144  0FE4                     	;# 
  2145  0FE5                     	;# 
  2146  0FE6                     	;# 
  2147  0FE7                     	;# 
  2148  0FE8                     	;# 
  2149  0FE9                     	;# 
  2150  0FEA                     	;# 
  2151  0FEB                     	;# 
  2152  0FED                     	;# 
  2153  0FEE                     	;# 
  2154  0FEF                     	;# 
  2155                           
  2156                           	psect	idataBANK4
  2157  1F58                     __pidataBANK4:	
  2158                           
  2159                           ;initializer for __product
  2160  1F58  3463               	retlw	99
  2161  1F59  3402               	retlw	2
  2162  1F5A  3400               	retlw	0
  2163  1F5B  3400               	retlw	0
  2164  1F5C  3400               	retlw	0
  2165  1F5D  3400               	retlw	0
  2166  1F5E  3400               	retlw	0
  2167  1F5F  3400               	retlw	0
  2168  1F60  3400               	retlw	0
  2169  1F61  3400               	retlw	0
  2170  1F62  3400               	retlw	0
  2171  1F63  3400               	retlw	0
  2172  1F64  34FF               	retlw	255
  2173  1F65  34FF               	retlw	255
  2174  1F66  34FF               	retlw	255
  2175  1F67  3400               	retlw	0
  2176  1F68  3400               	retlw	0
  2177  1F69  3400               	retlw	0
  2178  1F6A  3400               	retlw	0
  2179  1F6B  3400               	retlw	0
  2180  1F6C  3400               	retlw	0
  2181  1F6D  3400               	retlw	0
  2182  1F6E  3400               	retlw	0
  2183  1F6F  3400               	retlw	0
  2184  1F70  3400               	retlw	0
  2185  1F71  3400               	retlw	0
  2186  1F72  3400               	retlw	0
  2187  1F73  3400               	retlw	0
  2188  1F74  3400               	retlw	0
  2189  1F75  3400               	retlw	0
  2190  1F76  3400               	retlw	0
  2191  1F77  3400               	retlw	0
  2192                           
  2193                           	psect	stringtext
  2194  1000                     __pstringtext:	
  2195  1000                     _CC2500_registers_address:	
  2196  1000  3403               	retlw	3
  2197  1001  3416               	retlw	22
  2198  1002  3417               	retlw	23
  2199  1003  341E               	retlw	30
  2200  1004  341F               	retlw	31
  2201  1005  3420               	retlw	32
  2202  1006  342A               	retlw	42
  2203  1007  342B               	retlw	43
  2204  1008  340B               	retlw	11
  2205  1009  340C               	retlw	12
  2206  100A  340D               	retlw	13
  2207  100B  340E               	retlw	14
  2208  100C  340F               	retlw	15
  2209  100D  3410               	retlw	16
  2210  100E  3411               	retlw	17
  2211  100F  3412               	retlw	18
  2212  1010  3413               	retlw	19
  2213  1011  3414               	retlw	20
  2214  1012  340A               	retlw	10
  2215  1013  3415               	retlw	21
  2216  1014  3421               	retlw	33
  2217  1015  3422               	retlw	34
  2218  1016  3418               	retlw	24
  2219  1017  3419               	retlw	25
  2220  1018  341A               	retlw	26
  2221  1019  341B               	retlw	27
  2222  101A  341C               	retlw	28
  2223  101B  341D               	retlw	29
  2224  101C  3423               	retlw	35
  2225  101D  3424               	retlw	36
  2226  101E  3425               	retlw	37
  2227  101F  3426               	retlw	38
  2228  1020  3429               	retlw	41
  2229  1021  342C               	retlw	44
  2230  1022  342D               	retlw	45
  2231  1023  342E               	retlw	46
  2232  1024  3400               	retlw	0
  2233  1025  3401               	retlw	1
  2234  1026  3402               	retlw	2
  2235  1027  3407               	retlw	7
  2236  1028  3408               	retlw	8
  2237  1029  3409               	retlw	9
  2238  102A  3406               	retlw	6
  2239  102B  3404               	retlw	4
  2240  102C  3405               	retlw	5
  2241  102D  3427               	retlw	39
  2242  102E  3428               	retlw	40
  2243  102F                     __end_of_CC2500_registers_address:	
  2244  102F                     _CC2500_rfSettings:	
  2245  102F  3407               	retlw	7
  2246  1030  3407               	retlw	7
  2247  1031  3430               	retlw	48
  2248  1032  3487               	retlw	135
  2249  1033  346B               	retlw	107
  2250  1034  34F8               	retlw	248
  2251  1035  347F               	retlw	127
  2252  1036  343F               	retlw	63
  2253  1037  3409               	retlw	9
  2254  1038  3400               	retlw	0
  2255  1039  345C               	retlw	92
  2256  103A  34A7               	retlw	167
  2257  103B  3462               	retlw	98
  2258  103C  3486               	retlw	134
  2259  103D  3483               	retlw	131
  2260  103E  3403               	retlw	3
  2261  103F  3422               	retlw	34
  2262  1040  34F8               	retlw	248
  2263  1041  3400               	retlw	0
  2264  1042  3444               	retlw	68
  2265  1043  34B6               	retlw	182
  2266  1044  3410               	retlw	16
  2267  1045  3418               	retlw	24
  2268  1046  341D               	retlw	29
  2269  1047  341C               	retlw	28
  2270  1048  34C7               	retlw	199
  2271  1049  3400               	retlw	0
  2272  104A  34B2               	retlw	178
  2273  104B  34EA               	retlw	234
  2274  104C  340A               	retlw	10
  2275  104D  3400               	retlw	0
  2276  104E  3411               	retlw	17
  2277  104F  3459               	retlw	89
  2278  1050  3488               	retlw	136
  2279  1051  3431               	retlw	49
  2280  1052  340B               	retlw	11
  2281  1053  342F               	retlw	47
  2282  1054  342E               	retlw	46
  2283  1055  3406               	retlw	6
  2284  1056  3404               	retlw	4
  2285  1057  3405               	retlw	5
  2286  1058  3400               	retlw	0
  2287  1059  3430               	retlw	48
  2288  105A  34D3               	retlw	211
  2289  105B  3491               	retlw	145
  2290  105C  3441               	retlw	65
  2291  105D  3400               	retlw	0
  2292  105E                     __end_of_CC2500_rfSettings:	
  2293  105E                     _CC2500_patable_vaule:	
  2294  105E  34FE               	retlw	254
  2295  105F  34FE               	retlw	254
  2296  1060  34FE               	retlw	254
  2297  1061  34FE               	retlw	254
  2298  1062  34FE               	retlw	254
  2299  1063  34FE               	retlw	254
  2300  1064  34FE               	retlw	254
  2301  1065  34FE               	retlw	254
  2302  1066                     __end_of_CC2500_patable_vaule:	
  2303                           
  2304                           	psect	nvBANK0
  2305  006E                     __pnvBANK0:	
  2306  006E                     _product:	
  2307  006E                     	ds	1
  2308  000C                     _PORTA	set	12
  2309  000D                     _PORTB	set	13
  2310  000E                     _PORTC	set	14
  2311  0018                     _T1CON	set	24
  2312  0017                     _TMR1H	set	23
  2313  0016                     _TMR1L	set	22
  2314  005F                     _GIE	set	95
  2315  005B                     _IOCIE	set	91
  2316  0058                     _IOCIF	set	88
  2317  005E                     _PEIE	set	94
  2318  0060                     _RA0	set	96
  2319  0064                     _RA4	set	100
  2320  0066                     _RA6	set	102
  2321  0067                     _RA7	set	103
  2322  0068                     _RB0	set	104
  2323  0069                     _RB1	set	105
  2324  006A                     _RB2	set	106
  2325  006B                     _RB3	set	107
  2326  006D                     _RB5	set	109
  2327  0070                     _RC0	set	112
  2328  0071                     _RC1	set	113
  2329  0073                     _RC3	set	115
  2330  0074                     _RC4	set	116
  2331  0075                     _RC5	set	117
  2332  0088                     _TMR1IF	set	136
  2333  009D                     _ADCON0	set	157
  2334  009E                     _ADCON1	set	158
  2335  009C                     _ADRESH	set	156
  2336  009B                     _ADRESL	set	155
  2337  0099                     _OSCCON	set	153
  2338  008C                     _TRISA	set	140
  2339  008D                     _TRISB	set	141
  2340  008E                     _TRISC	set	142
  2341  0097                     _WDTCON	set	151
  2342  04E9                     _GO_nDONE	set	1257
  2343  0488                     _TMR1IE	set	1160
  2344  0117                     _FVRCON	set	279
  2345  010C                     _LATA	set	268
  2346  010D                     _LATB	set	269
  2347  010E                     _LATC	set	270
  2348  018C                     _ANSELA	set	396
  2349  018D                     _ANSELB	set	397
  2350  018E                     _ANSELC	set	398
  2351  0192                     _PMADRH	set	402
  2352  0191                     _PMADRL	set	401
  2353  0196                     _PMCON2	set	406
  2354  0194                     _PMDATH	set	404
  2355  0193                     _PMDATL	set	403
  2356  0CAE                     _CFGS	set	3246
  2357  0CAC                     _FREE	set	3244
  2358  0CAD                     _LWLO	set	3245
  2359  0CA8                     _RD	set	3240
  2360  0CA9                     _WR	set	3241
  2361  0CAA                     _WREN	set	3242
  2362  1069                     _WPUB1	set	4201
  2363  106A                     _WPUB2	set	4202
  2364  0396                     _IOCBF	set	918
  2365  0395                     _IOCBN	set	917
  2366  0394                     _IOCBP	set	916
  2367  1CB2                     _IOCBF2	set	7346
  2368                           
  2369                           ; #config settings
  2370  0000                     
  2371                           	psect	cinit
  2372  0015                     start_initialization:	
  2373  0015                     __initialization:	
  2374                           
  2375                           ; Clear objects allocated to BITCOMMON
  2376  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2377                           
  2378                           ; Clear objects allocated to COMMON
  2379  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2380  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2381  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2382  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2383  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001C  30A0               	movlw	low __pbssBANK1
  2390  001D  0084               	movwf	4
  2391  001E  3000               	movlw	high __pbssBANK1
  2392  001F  0085               	movwf	5
  2393  0020  3048               	movlw	72
  2394  0021  319B  23E1  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0024  3020               	movlw	low __pbssBANK2
  2398  0025  0084               	movwf	4
  2399  0026  3001               	movlw	high __pbssBANK2
  2400  0027  0085               	movwf	5
  2401  0028  304B               	movlw	75
  2402  0029  319B  23E1  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002C  30A0               	movlw	low __pbssBANK3
  2406  002D  0084               	movwf	4
  2407  002E  3001               	movlw	high __pbssBANK3
  2408  002F  0085               	movwf	5
  2409  0030  304C               	movlw	76
  2410  0031  319B  23E1  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0034  3058               	movlw	low __pidataBANK4
  2414  0035  0084               	movwf	4
  2415  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2416  0037  0085               	movwf	5
  2417  0038  3020               	movlw	low __pdataBANK4
  2418  0039  0086               	movwf	6
  2419  003A  3002               	movlw	high __pdataBANK4
  2420  003B  0087               	movwf	7
  2421  003C  3020               	movlw	32
  2422  003D  319B  23DB         	fcall	init_ram
  2423  003F                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003F                     __end_of__initialization:	
  2427  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  0040  0020               	movlb	0
  2429  0041  3196  2E9A         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03E8                     __pbitbssCOMMON:	
  2433  03E8                     _Receive_OK:	
  2434  03E8                     	ds	1
  2435  03E9                     _Transceive_OK:	
  2436  03E9                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0078                     __pbssCOMMON:	
  2440  0078                     _DelayOff:	
  2441  0078                     	ds	1
  2442  0079                     _DimmerLightsIntr:	
  2443  0079                     	ds	1
  2444  007A                     _LED:	
  2445  007A                     	ds	1
  2446  007B                     _SPI0Buffer:	
  2447  007B                     	ds	1
  2448  007C                     _Sw:	
  2449  007C                     	ds	1
  2450                           
  2451                           	psect	bssBANK0
  2452  006F                     __pbssBANK0:	
  2453  006F                     _DimmerLights:	
  2454  006F                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _myMain:	
  2459  00A0                     	ds	15
  2460  00AF                     _Buz1:	
  2461  00AF                     	ds	12
  2462  00BB                     _RF1:	
  2463  00BB                     	ds	12
  2464  00C7                     _Timer1:	
  2465  00C7                     	ds	3
  2466  00CA                     _WDT:	
  2467  00CA                     	ds	2
  2468  00CC                     _CRC:	
  2469  00CC                     	ds	1
  2470  00CD                     _DimmerLights11:	
  2471  00CD                     	ds	1
  2472  00CE                     _DimmerLightsIntrIOC:	
  2473  00CE                     	ds	1
  2474  00CF                     _RSSI:	
  2475  00CF                     	ds	1
  2476  00D0                     _Rx_Length:	
  2477  00D0                     	ds	1
  2478  00D1                     _SwDetect:	
  2479  00D1                     	ds	1
  2480  00D2                     _Tx_Length:	
  2481  00D2                     	ds	1
  2482  00D3                     _r_address:	
  2483  00D3                     	ds	1
  2484  00D4                     _r_data:	
  2485  00D4                     	ds	1
  2486  00D5                     _s_data:	
  2487  00D5                     	ds	1
  2488  00D6                     _Temp:	
  2489  00D6                     	ds	18
  2490                           
  2491                           	psect	bssBANK2
  2492  0120                     __pbssBANK2:	
  2493  0120                     _Dimmer:	
  2494  0120                     	ds	3
  2495  0123                     _RF_Count:	
  2496  0123                     	ds	2
  2497  0125                     _Load:	
  2498  0125                     	ds	46
  2499  0153                     _DimmerLights1:	
  2500  0153                     	ds	15
  2501  0162                     _DlySw1:	
  2502  0162                     	ds	5
  2503  0167                     _VarErrLED:	
  2504  0167                     	ds	4
  2505                           
  2506                           	psect	bssBANK3
  2507  01A0                     __pbssBANK3:	
  2508  01A0                     _RF_Data:	
  2509  01A0                     	ds	30
  2510  01BE                     _Memory:	
  2511  01BE                     	ds	37
  2512  01E3                     _Sw1:	
  2513  01E3                     	ds	9
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1BE1                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1BE1  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1BE2                     clrloop0:	
  2527  1BE2  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1BE3  3101               	addfsr 0,1
  2529  1BE4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1BE5  2BE2               	goto	clrloop0	;have we reached the end yet?
  2531  1BE6  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1BDB                     init_ram:	
  2535  1BDB  00FE               	movwf	126
  2536  1BDC                     initloop:	
  2537  1BDC  0012               	moviw fsr0++
  2538  1BDD  001E               	movwi fsr1++
  2539  1BDE  0BFE               	decfsz	126,f
  2540  1BDF  2BDC               	goto	initloop
  2541  1BE0  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK1
  2544  00E8                     __pcstackBANK1:	
  2545  00E8                     setRF_Main@loop_f:	
  2546                           
  2547                           ; 1 bytes @ 0x0
  2548  00E8                     	ds	1
  2549  00E9                     setRF_Main@Receive_OK:	
  2550                           
  2551                           ; 1 bytes @ 0x1
  2552  00E9                     	ds	1
  2553  00EA                     setRF_Main@error:	
  2554                           
  2555                           ; 1 bytes @ 0x2
  2556  00EA                     	ds	1
  2557  00EB                     ?_main:	
  2558  00EB                     main@argc:	
  2559                           ; 2 bytes @ 0x3
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0x3
  2563  00EB                     	ds	2
  2564  00ED                     main@argv:	
  2565                           
  2566                           ; 2 bytes @ 0x5
  2567  00ED                     	ds	2
  2568                           
  2569                           	psect	cstackCOMMON
  2570  0070                     __pcstackCOMMON:	
  2571  0070                     ?_Timeout_Counter:	
  2572  0070                     ?_set_TimeoutCleared:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_WriteByte:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_CC2500_WriteCommand:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_ReadStatus:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_ReadByte:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_PowerRST:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_InitSetREG:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_InitPATable:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ClearTXFIFO:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_ClearRXFIFO:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_FrequencyCabr:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_SIDLEMode:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DlyOff_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DlyOff_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setDimmerLights_ErrorClose:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_Dimmer_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setDimmerLights_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_Line:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setTxData:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setLED_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setLED_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Fosc_Set:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_IO_Set:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_TMR1_Set:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_ADC_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_IOC_Set:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_WDT_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_IOC_ISR:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR1_ISR:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Write:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Flash_Memory_Modify:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_WDT_Clearing:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_myMain_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Temp_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Load_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Switch_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_RF_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_getLoad_AD:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_getTemp_AD:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_my_MainTimer:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Temp_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Load_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Switch_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_RF_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setLoad_AH_AL_Restore:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setTemp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setTemp_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setRF_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setRF_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_RxDisable:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getRxData:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setLog_Code:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setControl_Lights_Table:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRFSW_Control:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRFSW_AdjControl:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setRF_DimmerValue:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setSw_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setSw_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Buzzer_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_TxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_RxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_CC2500_PowerOnInitial:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOffPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayOff_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??_DimmerIntrIOCPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerIntrPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLightsPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_Main:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOn:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_SwOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_AdjRF:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerReClock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Unlock:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Flash_Memory_Erasing:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_Modify:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMemory_LoopSave:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_setMain_Exception:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_setRF_Learn:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_TouchPower:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_SwPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_DelayTimejudge:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_All_Error_Status:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_getLoad_OK:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getMain_LightsStatus:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_setPercentValue:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_getPercentValue:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Read:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getRF_KeyStatus:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getSw_KeyStatus:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDelayOff_GO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getAll_DimmerLights_AdjGO:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmer_LoadOK:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Line:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_Lights_Count:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_LoadOK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     getSw_KeyStatus@sw:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x0
  2916  0070                     	ds	1
  2917  0071                     DimmerIntrIOCPointSelect@lights:	
  2918  0071                     DimmerIntrPointSelect@lights:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921                           
  2922                           ; 1 bytes @ 0x1
  2923  0071                     	ds	1
  2924  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2925  0072                     ??_setDimmerLights_IntrControl:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2929                           ; 0 bytes @ 0x2
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2
  2933  0072                     	ds	1
  2934  0073                     ??_IOC_ISR:	
  2935  0073                     ??_setDimmerReClock:	
  2936                           ; 0 bytes @ 0x3
  2937                           
  2938                           
  2939                           ; 0 bytes @ 0x3
  2940  0073                     	ds	3
  2941  0076                     setDimmerLights_IntrControl@lights:	
  2942                           
  2943                           ; 1 bytes @ 0x6
  2944  0076                     	ds	1
  2945  0077                     ??_TMR1_ISR:	
  2946  0077                     ??_ISR:	
  2947                           ; 0 bytes @ 0x7
  2948                           
  2949                           
  2950                           ; 0 bytes @ 0x7
  2951  0077                     	ds	1
  2952                           
  2953                           	psect	cstackBANK0
  2954  0020                     __pcstackBANK0:	
  2955  0020                     ??_Timeout_Counter:	
  2956  0020                     ??_set_TimeoutCleared:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_CC2500_WriteByte:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_CC2500_ReadByte:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ?_DelayTime_1us:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_Dimmer_Initialization:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_getMain_All_Error_Status:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_getLoad_OK:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setDimmerLights_Line:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ?_setRF_DimmerLights:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_setTxData:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_Fosc_Set:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_IO_Set:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_TMR1_Set:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_ADC_Set:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_IOC_Set:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_WDT_Set:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Flash_Memory_Read:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ?_setMemory_Data:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_Flash_Memory_Write:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_WDT_Clearing:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_myMain_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_Temp_Initialization:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setLoad_AH_AL_Restore:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_setTemp_Initialization:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_setRF_Initialization:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getRF_KeyStatus:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_getSw_KeyStatus:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Buzzer_Initialization:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_Buzzer_Main:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_DelayOffPointSelect:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_DimmerLightsPointSelect:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getAll_DimmerLights_AdjGO:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_getDimmer_LoadOK:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_getDimmerLights_Line:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_LedPointSelect:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Unlock:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Flash_Memory_Erasing:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_setMemory_Modify:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_setMemory_LoopSave:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Main:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getMain_Lights_Count:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_setRF_Learn:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_TouchPower:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_SwPointSelect:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ?___bmul:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ?_getBuz_GO:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0020                     ?_getAD:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     ?___awdiv:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100  0020                     ?___lwdiv:	
  3101                           ; 2 bytes @ 0x0
  3102                           
  3103  0020                     ?___ftpack:	
  3104                           ; 2 bytes @ 0x0
  3105                           
  3106  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3107                           ; 3 bytes @ 0x0
  3108                           
  3109  0020                     getDimmer_LoadOK@status:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     setDimmerLights_Line@lights:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0020                     getDimmerLights_Line@line:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     getAD@adcon1:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0020                     setMemory_Data@data:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0020                     getMain_Lights_Count@count:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     getLoad_OK@ok:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     setRF_DimmerLights@on:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0020                     ___bmul@multiplicand:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     DelayTime_1us@count:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     ___awdiv@divisor:	
  3140                           ; 2 bytes @ 0x0
  3141                           
  3142  0020                     ___lwdiv@divisor:	
  3143                           ; 2 bytes @ 0x0
  3144                           
  3145  0020                     ___ftpack@arg:	
  3146                           ; 2 bytes @ 0x0
  3147                           
  3148                           
  3149                           ; 3 bytes @ 0x0
  3150  0020                     	ds	1
  3151  0021                     ??_setRF_DimmerLights:	
  3152  0021                     ??_setMemory_Data:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_RF_Initialization:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??_Mcu_Initialization:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_getMain_LoadOK:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??___bmul:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     CC2500_WriteByte@loop_a:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     CC2500_ReadByte@loop_b:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  0021                     DelayOffPointSelect@sw:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0021                     DimmerLightsPointSelect@lights:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     LedPointSelect@led:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     Flash_Memory_Read@i:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     Flash_Memory_Write@i:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     setMemory_Modify@command:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     setMemory_LoopSave@command:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     getMain_Lights_Count@status2:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     setLoad_AH_AL_Restore@i:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     setRF_Learn@command:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     getRF_KeyStatus@key:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     SwPointSelect@sw:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     getSw_KeyStatus@status:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     _getMain_All_Error_Status$3757:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215                           
  3216                           ; 2 bytes @ 0x1
  3217  0021                     	ds	1
  3218  0022                     ??_CC2500_WriteCommand:	
  3219  0022                     ??_CC2500_ReadStatus:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ??_DelayTime_1us:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ?_CC2500_WriteREG:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ??_DlyOff_Initialization:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     ??_setDimmerLights_Initialization:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ?_setDimmerLights_Trigger:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ?_setDimmerLights_TriggerAdj:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ?_setLED:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_setLED_Main:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_Load_Initialization:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ??_getBuz_GO:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ??_getDelayOff_GO:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_getDimmerLights_Status:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     CC2500_WriteREG@value:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     DlyOff_Initialization@sw:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     getDelayOff_GO@sw:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     getDimmerLights_Status@lights:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     setDimmerLights_Trigger@command:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     setDimmerLights_TriggerAdj@command:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     setLED@command:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     Flash_Memory_Read@address:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     setMemory_Data@address:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     getMain_Lights_Count@status3:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     getMain_LoadOK@ok:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     _getRF_KeyStatus$5506:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     _getSw_KeyStatus$6565:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     ___bmul@product:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     DelayTime_1us@i:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     ___awdiv@dividend:	
  3304                           ; 2 bytes @ 0x2
  3305                           
  3306  0022                     ___lwdiv@dividend:	
  3307                           ; 2 bytes @ 0x2
  3308                           
  3309                           
  3310                           ; 2 bytes @ 0x2
  3311  0022                     	ds	1
  3312  0023                     ??_CC2500_WriteREG:	
  3313  0023                     ??_setDimmerLights_Trigger:	
  3314                           ; 0 bytes @ 0x3
  3315                           
  3316  0023                     ??_setDimmerLights_TriggerAdj:	
  3317                           ; 0 bytes @ 0x3
  3318                           
  3319  0023                     ??_setLED:	
  3320                           ; 0 bytes @ 0x3
  3321                           
  3322  0023                     ??_DelayOff_Initialization:	
  3323                           ; 0 bytes @ 0x3
  3324                           
  3325  0023                     ??_getAD:	
  3326                           ; 0 bytes @ 0x3
  3327                           
  3328  0023                     CC2500_WriteCommand@command:	
  3329                           ; 0 bytes @ 0x3
  3330                           
  3331  0023                     CC2500_ReadStatus@status_addr:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     getDelayOff_GO@go:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     setDimmerLights_Initialization@lights:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     getDimmerLights_Status@status:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     setLED@led:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     getAD@adcon0:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     Flash_Memory_Read@ret:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setRF_DimmerLights@status:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     ___bmul@multiplier:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     ___ftpack@exp:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     _getMain_All_Error_Status$3766:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x3
  3369  0023                     	ds	1
  3370  0024                     ??_CC2500_ClearTXFIFO:	
  3371  0024                     ??_CC2500_ClearRXFIFO:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_CC2500_SIDLEMode:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_DelayTimejudge:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_getMain_LightsStatus:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_setLED_Initialization:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_Flash_Memory_Modify:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_getLoad_AD:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??_getTemp_AD:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??_RF_RxDisable:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     ??_setSw_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_CC2500_TxData:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_CC2500_RxData:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_DimmerLights_Initialization:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??___awdiv:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??___lwdiv:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     CC2500_WriteREG@w_addr:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     setDimmerLights_Trigger@lights:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     setDimmerLights_TriggerAdj@lights:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0024                     setLED_Initialization@led:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0024                     setLED_Main@led:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0024                     setRF_DimmerLights@lights:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     setSw_Initialization@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0024                     ___ftpack@sign:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0024                     getBuz_GO@i:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0024                     DelayTime_1us@j:	
  3444                           ; 2 bytes @ 0x4
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x4
  3448  0024                     	ds	1
  3449  0025                     ??_CC2500_InitSetREG:	
  3450  0025                     ??_CC2500_InitPATable:	
  3451                           ; 0 bytes @ 0x5
  3452                           
  3453  0025                     ??_Switch_Initialization:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0025                     ??___ftpack:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0025                     ??_setDimmerLights_AdjControl:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0025                     ??_LED_Initialization:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0025                     ??_LED_Main:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0025                     CC2500_TxData@loop_e:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0025                     CC2500_RxData@loop_f:	
  3472                           ; 1 bytes @ 0x5
  3473                           
  3474  0025                     Flash_Memory_Modify@i:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0025                     getMain_LightsStatus@count:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0025                     getMain_All_Error_Status@command:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0025                     getTemp_AD@channel:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0025                     ___awdiv@counter:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0025                     ___lwdiv@quotient:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492                           
  3493                           ; 2 bytes @ 0x5
  3494  0025                     	ds	1
  3495  0026                     ??_CC2500_PowerRST:	
  3496  0026                     ??_CC2500_FrequencyCabr:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0026                     CC2500_InitSetREG@temp1:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0026                     CC2500_InitPATable@temp:	
  3503                           ; 1 bytes @ 0x6
  3504                           
  3505  0026                     DelayTimejudge@i:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0026                     setDimmerLights_AdjControl@idle:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0026                     getMain_All_Error_Status@status:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514  0026                     getLoad_AD@channel:	
  3515                           ; 1 bytes @ 0x6
  3516                           
  3517  0026                     ___awdiv@sign:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0026                     getMain_LightsStatus@i:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523                           
  3524                           ; 2 bytes @ 0x6
  3525  0026                     	ds	1
  3526  0027                     CC2500_InitSetREG@temp2:	
  3527  0027                     CC2500_InitPATable@loop_d:	
  3528                           ; 1 bytes @ 0x7
  3529                           
  3530  0027                     DelayTimejudge@j:	
  3531                           ; 1 bytes @ 0x7
  3532                           
  3533  0027                     _setDimmerLights_AdjControl$2415:	
  3534                           ; 1 bytes @ 0x7
  3535                           
  3536  0027                     getLoad_AD@k:	
  3537                           ; 1 bytes @ 0x7
  3538                           
  3539  0027                     ___lwdiv@counter:	
  3540                           ; 1 bytes @ 0x7
  3541                           
  3542  0027                     ___awdiv@quotient:	
  3543                           ; 1 bytes @ 0x7
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x7
  3547  0027                     	ds	1
  3548  0028                     ?___awtoft:	
  3549  0028                     CC2500_InitSetREG@loop_c:	
  3550                           ; 3 bytes @ 0x8
  3551                           
  3552  0028                     DelayTimejudge@k:	
  3553                           ; 1 bytes @ 0x8
  3554                           
  3555  0028                     setDimmerLights_AdjControl@sw:	
  3556                           ; 1 bytes @ 0x8
  3557                           
  3558  0028                     getMain_LightsStatus@status:	
  3559                           ; 1 bytes @ 0x8
  3560                           
  3561  0028                     getLoad_AD@j:	
  3562                           ; 1 bytes @ 0x8
  3563                           
  3564  0028                     ___awtoft@c:	
  3565                           ; 1 bytes @ 0x8
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x8
  3569  0028                     	ds	1
  3570  0029                     ??_Load_Main:	
  3571  0029                     ?_setBuz:	
  3572                           ; 0 bytes @ 0x9
  3573                           
  3574  0029                     ??_CC2500_PowerOnInitial:	
  3575                           ; 0 bytes @ 0x9
  3576                           
  3577  0029                     ??_Flash_Memory_Main:	
  3578                           ; 0 bytes @ 0x9
  3579                           
  3580  0029                     DelayTimejudge@value:	
  3581                           ; 0 bytes @ 0x9
  3582                           
  3583  0029                     getLoad_AD@i:	
  3584                           ; 1 bytes @ 0x9
  3585                           
  3586  0029                     setBuz@time:	
  3587                           ; 1 bytes @ 0x9
  3588                           
  3589                           
  3590                           ; 2 bytes @ 0x9
  3591  0029                     	ds	1
  3592  002A                     ?_setDelayOff_GO:	
  3593  002A                     setDelayOff_GO@command:	
  3594                           ; 0 bytes @ 0xA
  3595                           
  3596                           
  3597                           ; 1 bytes @ 0xA
  3598  002A                     	ds	1
  3599  002B                     ??_setBuz:	
  3600  002B                     ??___awtoft:	
  3601                           ; 0 bytes @ 0xB
  3602                           
  3603  002B                     setDelayOff_GO@value:	
  3604                           ; 0 bytes @ 0xB
  3605                           
  3606  002B                     Load_Main@j:	
  3607                           ; 1 bytes @ 0xB
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0xB
  3611  002B                     	ds	1
  3612  002C                     ??_setDelayOff_GO:	
  3613  002C                     setBuz@count:	
  3614                           ; 0 bytes @ 0xC
  3615                           
  3616  002C                     Load_Main@adjgo:	
  3617                           ; 1 bytes @ 0xC
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xC
  3621  002C                     	ds	1
  3622  002D                     ??_my_MainTimer:	
  3623  002D                     ??_setTemp_Main:	
  3624                           ; 0 bytes @ 0xD
  3625                           
  3626  002D                     ??_setLog_Code:	
  3627                           ; 0 bytes @ 0xD
  3628                           
  3629  002D                     ??_setDimmerLights_SwOn:	
  3630                           ; 0 bytes @ 0xD
  3631                           
  3632  002D                     _Load_Main$4117:	
  3633                           ; 0 bytes @ 0xD
  3634                           
  3635  002D                     ___awtoft@sign:	
  3636                           ; 1 bytes @ 0xD
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0xD
  3640  002D                     	ds	1
  3641  002E                     ?___ftdiv:	
  3642  002E                     ?___ftmul:	
  3643                           ; 3 bytes @ 0xE
  3644                           
  3645  002E                     setDelayOff_GO@sw:	
  3646                           ; 3 bytes @ 0xE
  3647                           
  3648  002E                     setDimmerLights_SwOn@idle:	
  3649                           ; 1 bytes @ 0xE
  3650                           
  3651  002E                     Load_Main@error:	
  3652                           ; 1 bytes @ 0xE
  3653                           
  3654  002E                     ___ftdiv@f2:	
  3655                           ; 1 bytes @ 0xE
  3656                           
  3657  002E                     ___ftmul@f1:	
  3658                           ; 3 bytes @ 0xE
  3659                           
  3660                           
  3661                           ; 3 bytes @ 0xE
  3662  002E                     	ds	1
  3663  002F                     ??_Temp_Main:	
  3664  002F                     ??_setDimmerLights_SwOff:	
  3665                           ; 0 bytes @ 0xF
  3666                           
  3667  002F                     setDimmerLights_SwOn@sw:	
  3668                           ; 0 bytes @ 0xF
  3669                           
  3670  002F                     setDimmerLights_SwOff@command:	
  3671                           ; 1 bytes @ 0xF
  3672                           
  3673  002F                     Load_Main@i:	
  3674                           ; 1 bytes @ 0xF
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0xF
  3678  002F                     	ds	1
  3679  0030                     setDimmerLights_SwOff@sw:	
  3680                           
  3681                           ; 1 bytes @ 0x10
  3682  0030                     	ds	1
  3683  0031                     ??_setDimmerLights_ErrorClose:	
  3684  0031                     ??_setRFSW_Control:	
  3685                           ; 0 bytes @ 0x11
  3686                           
  3687  0031                     ??_setSw_Main:	
  3688                           ; 0 bytes @ 0x11
  3689                           
  3690  0031                     ___ftdiv@f1:	
  3691                           ; 0 bytes @ 0x11
  3692                           
  3693  0031                     ___ftmul@f2:	
  3694                           ; 3 bytes @ 0x11
  3695                           
  3696                           
  3697                           ; 3 bytes @ 0x11
  3698  0031                     	ds	1
  3699  0032                     setDimmerLights_ErrorClose@count:	
  3700  0032                     setRFSW_Control@status:	
  3701                           ; 1 bytes @ 0x12
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x12
  3705  0032                     	ds	1
  3706  0033                     setDimmerLights_ErrorClose@lights:	
  3707  0033                     setRFSW_Control@sw:	
  3708                           ; 1 bytes @ 0x13
  3709                           
  3710  0033                     setSw_Main@sw:	
  3711                           ; 1 bytes @ 0x13
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x13
  3715  0033                     	ds	1
  3716  0034                     ??___ftdiv:	
  3717  0034                     ??___ftmul:	
  3718                           ; 0 bytes @ 0x14
  3719                           
  3720  0034                     setDimmerLights_ErrorClose@i:	
  3721                           ; 0 bytes @ 0x14
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x14
  3725  0034                     	ds	2
  3726  0036                     ??_DlyOff_Main:	
  3727  0036                     ??_setMain_Exception:	
  3728                           ; 0 bytes @ 0x16
  3729                           
  3730                           
  3731                           ; 0 bytes @ 0x16
  3732  0036                     	ds	2
  3733  0038                     DlyOff_Main@sw:	
  3734  0038                     setMain_Exception@buz:	
  3735                           ; 1 bytes @ 0x18
  3736                           
  3737  0038                     ___ftdiv@cntr:	
  3738                           ; 1 bytes @ 0x18
  3739                           
  3740  0038                     ___ftmul@exp:	
  3741                           ; 1 bytes @ 0x18
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x18
  3745  0038                     	ds	1
  3746  0039                     ??_DelayOff_Main:	
  3747  0039                     _setMain_Exception$3741:	
  3748                           ; 0 bytes @ 0x19
  3749                           
  3750  0039                     ___ftdiv@f3:	
  3751                           ; 2 bytes @ 0x19
  3752                           
  3753  0039                     ___ftmul@f3_as_product:	
  3754                           ; 3 bytes @ 0x19
  3755                           
  3756                           
  3757                           ; 3 bytes @ 0x19
  3758  0039                     	ds	2
  3759  003B                     setMain_Exception@status:	
  3760                           
  3761                           ; 1 bytes @ 0x1B
  3762  003B                     	ds	1
  3763  003C                     setMain_Exception@command:	
  3764  003C                     ___ftdiv@exp:	
  3765                           ; 1 bytes @ 0x1C
  3766                           
  3767  003C                     ___ftmul@cntr:	
  3768                           ; 1 bytes @ 0x1C
  3769                           
  3770                           
  3771                           ; 1 bytes @ 0x1C
  3772  003C                     	ds	1
  3773  003D                     ??_Switch_Main:	
  3774  003D                     ___ftdiv@sign:	
  3775                           ; 0 bytes @ 0x1D
  3776                           
  3777  003D                     ___ftmul@sign:	
  3778                           ; 1 bytes @ 0x1D
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x1D
  3782  003D                     	ds	1
  3783  003E                     ?___ftneg:	
  3784  003E                     Switch_Main@error:	
  3785                           ; 3 bytes @ 0x1E
  3786                           
  3787  003E                     ___ftneg@f1:	
  3788                           ; 1 bytes @ 0x1E
  3789                           
  3790                           
  3791                           ; 3 bytes @ 0x1E
  3792  003E                     	ds	3
  3793  0041                     ??___ftneg:	
  3794  0041                     ?___ftadd:	
  3795                           ; 0 bytes @ 0x21
  3796                           
  3797  0041                     ___ftadd@f1:	
  3798                           ; 3 bytes @ 0x21
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x21
  3802  0041                     	ds	3
  3803  0044                     ___ftadd@f2:	
  3804                           
  3805                           ; 3 bytes @ 0x24
  3806  0044                     	ds	3
  3807  0047                     ??___ftadd:	
  3808                           
  3809                           ; 0 bytes @ 0x27
  3810  0047                     	ds	4
  3811  004B                     ___ftadd@sign:	
  3812                           
  3813                           ; 1 bytes @ 0x2B
  3814  004B                     	ds	1
  3815  004C                     ___ftadd@exp2:	
  3816                           
  3817                           ; 1 bytes @ 0x2C
  3818  004C                     	ds	1
  3819  004D                     ___ftadd@exp1:	
  3820                           
  3821                           ; 1 bytes @ 0x2D
  3822  004D                     	ds	1
  3823  004E                     ?___fttol:	
  3824  004E                     ___fttol@f1:	
  3825                           ; 4 bytes @ 0x2E
  3826                           
  3827                           
  3828                           ; 3 bytes @ 0x2E
  3829  004E                     	ds	4
  3830  0052                     ??___fttol:	
  3831                           
  3832                           ; 0 bytes @ 0x32
  3833  0052                     	ds	4
  3834  0056                     ___fttol@sign1:	
  3835                           
  3836                           ; 1 bytes @ 0x36
  3837  0056                     	ds	1
  3838  0057                     ___fttol@lval:	
  3839                           
  3840                           ; 4 bytes @ 0x37
  3841  0057                     	ds	4
  3842  005B                     ___fttol@exp1:	
  3843                           
  3844                           ; 1 bytes @ 0x3B
  3845  005B                     	ds	1
  3846  005C                     ??_setPercentValue:	
  3847  005C                     ??_getPercentValue:	
  3848                           ; 0 bytes @ 0x3C
  3849                           
  3850                           
  3851                           ; 0 bytes @ 0x3C
  3852  005C                     	ds	2
  3853  005E                     getPercentValue@value:	
  3854  005E                     setPercentValue@value:	
  3855                           ; 1 bytes @ 0x3E
  3856                           
  3857                           
  3858                           ; 1 bytes @ 0x3E
  3859  005E                     	ds	1
  3860  005F                     getPercentValue@i:	
  3861  005F                     setPercentValue@i:	
  3862                           ; 3 bytes @ 0x3F
  3863                           
  3864                           
  3865                           ; 3 bytes @ 0x3F
  3866  005F                     	ds	3
  3867  0062                     ?_setDimmerLights:	
  3868  0062                     ?_setDimmerLights_Adj:	
  3869                           ; 0 bytes @ 0x42
  3870                           
  3871  0062                     ??_setDimmerLights_AdjRF:	
  3872                           ; 0 bytes @ 0x42
  3873                           
  3874  0062                     ??_Flash_Memory_Initialization:	
  3875                           ; 0 bytes @ 0x42
  3876                           
  3877  0062                     setDimmerLights@status:	
  3878                           ; 0 bytes @ 0x42
  3879                           
  3880  0062                     setDimmerLights_Adj@status:	
  3881                           ; 1 bytes @ 0x42
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x42
  3885  0062                     	ds	1
  3886  0063                     ??_setDimmerLights:	
  3887  0063                     ??_setDimmerLights_Adj:	
  3888                           ; 0 bytes @ 0x43
  3889                           
  3890  0063                     setDimmerLights_AdjRF@lights:	
  3891                           ; 0 bytes @ 0x43
  3892                           
  3893  0063                     Flash_Memory_Initialization@i:	
  3894                           ; 1 bytes @ 0x43
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x43
  3898  0063                     	ds	1
  3899  0064                     ??_setRF_DimmerValue:	
  3900                           
  3901                           ; 0 bytes @ 0x44
  3902  0064                     	ds	1
  3903  0065                     setDimmerLights@lights:	
  3904  0065                     setDimmerLights_Adj@lights:	
  3905                           ; 1 bytes @ 0x45
  3906                           
  3907                           
  3908                           ; 1 bytes @ 0x45
  3909  0065                     	ds	1
  3910  0066                     ??_setDimmerLights_Main:	
  3911  0066                     setDimmerLights_Main@lights:	
  3912                           ; 0 bytes @ 0x46
  3913                           
  3914  0066                     setRF_DimmerValue@lights:	
  3915                           ; 1 bytes @ 0x46
  3916                           
  3917                           
  3918                           ; 1 bytes @ 0x46
  3919  0066                     	ds	1
  3920  0067                     ??_setRFSW_AdjControl:	
  3921  0067                     ??_DimmerLights_Main:	
  3922                           ; 0 bytes @ 0x47
  3923                           
  3924                           
  3925                           ; 0 bytes @ 0x47
  3926  0067                     	ds	2
  3927  0069                     setRFSW_AdjControl@status:	
  3928  0069                     _DimmerLights_Main$2351:	
  3929                           ; 1 bytes @ 0x49
  3930                           
  3931                           
  3932                           ; 2 bytes @ 0x49
  3933  0069                     	ds	1
  3934  006A                     setRFSW_AdjControl@sw:	
  3935                           
  3936                           ; 1 bytes @ 0x4A
  3937  006A                     	ds	1
  3938  006B                     ??_getRxData:	
  3939  006B                     ??_setControl_Lights_Table:	
  3940                           ; 0 bytes @ 0x4B
  3941                           
  3942                           
  3943                           ; 0 bytes @ 0x4B
  3944  006B                     	ds	1
  3945  006C                     getRxData@error:	
  3946                           
  3947                           ; 1 bytes @ 0x4C
  3948  006C                     	ds	1
  3949  006D                     ??_setRF_Main:	
  3950                           
  3951                           ; 0 bytes @ 0x4D
  3952  006D                     	ds	1
  3953  006E                     ??_RF_Main:	
  3954  006E                     ??_main:	
  3955                           ; 0 bytes @ 0x4E
  3956                           
  3957                           
  3958                           	psect	maintext
  3959  169A                     __pmaintext:	
  3960                           ; 0 bytes @ 0x4E
  3961 ;;
  3962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3963 ;;
  3964 ;; *************** function _main *****************
  3965 ;; Defined at:
  3966 ;;		line 7 in file "../src/Main_B1.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  argc            2    3[BANK1 ] int 
  3969 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  2    3[BANK1 ] int 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 17F/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3981 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;Total ram usage:        4 bytes
  3986 ;; Hardware stack levels required when called:   15
  3987 ;; This function calls:
  3988 ;;		_Buzzer_Initialization
  3989 ;;		_Buzzer_Main
  3990 ;;		_CC2500_PowerOnInitial
  3991 ;;		_DelayOff_Initialization
  3992 ;;		_DelayOff_Main
  3993 ;;		_DimmerLights_Initialization
  3994 ;;		_DimmerLights_Main
  3995 ;;		_Flash_Memory_Initialization
  3996 ;;		_Flash_Memory_Main
  3997 ;;		_LED_Initialization
  3998 ;;		_LED_Main
  3999 ;;		_Load_Initialization
  4000 ;;		_Load_Main
  4001 ;;		_Mcu_Initialization
  4002 ;;		_RF_Initialization
  4003 ;;		_RF_Main
  4004 ;;		_Switch_Initialization
  4005 ;;		_Switch_Main
  4006 ;;		_Temp_Initialization
  4007 ;;		_Temp_Main
  4008 ;;		_WDT_Main
  4009 ;;		_getLoad_AD
  4010 ;;		_getTemp_AD
  4011 ;;		_myMain_Initialization
  4012 ;;		_my_MainTimer
  4013 ;; This function is called by:
  4014 ;;		Startup code after reset
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _main
  4020  169A                     _main:	
  4021                           
  4022                           ;Main_B1.c: 8: myMain_Initialization();
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4026  169A  319C  24FB  3196   	fcall	_myMain_Initialization
  4027                           
  4028                           ;Main_B1.c: 9: Mcu_Initialization();
  4029  169D  319D  25A0  3196   	fcall	_Mcu_Initialization
  4030                           
  4031                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4032  16A0  3185  256B  3196   	fcall	_Flash_Memory_Initialization
  4033                           
  4034                           ;Main_B1.c: 11: LED_Initialization();
  4035  16A3  319B  23BF  3196   	fcall	_LED_Initialization
  4036                           
  4037                           ;Main_B1.c: 12: Buzzer_Initialization();
  4038  16A6  319B  2398  3196   	fcall	_Buzzer_Initialization
  4039                           
  4040                           ;Main_B1.c: 14: ;;
  4041                           ;Main_B1.c: 15: Temp_Initialization();
  4042  16A9  319B  23A1  3196   	fcall	_Temp_Initialization
  4043                           
  4044                           ;Main_B1.c: 16: Load_Initialization();
  4045  16AC  319B  23D0  3196   	fcall	_Load_Initialization
  4046                           
  4047                           ;Main_B1.c: 17: ;;
  4048                           ;Main_B1.c: 18: DelayOff_Initialization();
  4049  16AF  319B  23B7  3196   	fcall	_DelayOff_Initialization
  4050                           
  4051                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4052  16B2  319C  24C2  3196   	fcall	_DimmerLights_Initialization
  4053                           
  4054                           ;Main_B1.c: 21: ;;
  4055                           ;Main_B1.c: 22: ;;
  4056                           ;Main_B1.c: 23: ;;
  4057                           ;Main_B1.c: 24: Switch_Initialization();
  4058  16B5  319C  2410  3196   	fcall	_Switch_Initialization
  4059                           
  4060                           ;Main_B1.c: 25: RF_Initialization();
  4061  16B8  319B  239B  3196   	fcall	_RF_Initialization
  4062                           
  4063                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4064  16BB  319E  2613  3196   	fcall	_CC2500_PowerOnInitial
  4065  16BE                     l7939:	
  4066                           ;Main_B1.c: 27: ;;
  4067                           ;Main_B1.c: 28: ;;
  4068                           ;Main_B1.c: 30: while (1) {
  4069                           
  4070                           
  4071                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4072  16BE  0021               	movlb	1	; select bank1
  4073  16BF  1C20               	btfss	_myMain^(0+128),0
  4074  16C0  2EC9               	goto	l7943
  4075                           
  4076                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4077  16C1  3005               	movlw	5
  4078  16C2  318B  23DD  3196   	fcall	_getLoad_AD
  4079                           
  4080                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4081  16C5  3009               	movlw	9
  4082  16C6  3193  2344  3196   	fcall	_getTemp_AD
  4083  16C9                     l7943:	
  4084                           
  4085                           ;Main_B1.c: 57: }
  4086                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4087  16C9  0021               	movlb	1	; select bank1
  4088  16CA  1C47               	btfss	_Timer1^(0+128),0
  4089  16CB  2EBE               	goto	l7939
  4090                           
  4091                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4092  16CC  1047               	bcf	_Timer1^(0+128),0
  4093                           
  4094                           ;Main_B1.c: 95: my_MainTimer();
  4095  16CD  3195  2506  3196   	fcall	_my_MainTimer
  4096                           
  4097                           ;Main_B1.c: 96: WDT_Main();
  4098  16D0  319D  25B2  3196   	fcall	_WDT_Main
  4099                           
  4100                           ;Main_B1.c: 97: ;;
  4101                           ;Main_B1.c: 98: ;;
  4102                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4103  16D3  0021               	movlb	1	; select bank1
  4104  16D4  1C20               	btfss	_myMain^(0+128),0
  4105  16D5  2EBE               	goto	l7939
  4106                           
  4107                           ;Main_B1.c: 100: Flash_Memory_Main();
  4108  16D6  3192  22A1  3196   	fcall	_Flash_Memory_Main
  4109                           
  4110                           ;Main_B1.c: 102: LED_Main();
  4111  16D9  319B  23C3  3196   	fcall	_LED_Main
  4112                           
  4113                           ;Main_B1.c: 103: Buzzer_Main();
  4114  16DC  3194  24BC  3196   	fcall	_Buzzer_Main
  4115                           
  4116                           ;Main_B1.c: 105: ;;
  4117                           ;Main_B1.c: 106: Temp_Main();
  4118  16DF  319B  23A4  3196   	fcall	_Temp_Main
  4119                           
  4120                           ;Main_B1.c: 107: Load_Main();
  4121  16E2  3180  2043  3196   	fcall	_Load_Main
  4122                           
  4123                           ;Main_B1.c: 108: ;;
  4124                           ;Main_B1.c: 110: ;;
  4125                           ;Main_B1.c: 111: DimmerLights_Main();
  4126  16E5  3191  216E  3196   	fcall	_DimmerLights_Main
  4127                           
  4128                           ;Main_B1.c: 112: Switch_Main();
  4129  16E8  319F  2718  3196   	fcall	_Switch_Main
  4130                           
  4131                           ;Main_B1.c: 113: ;;
  4132                           ;Main_B1.c: 114: ;;
  4133                           ;Main_B1.c: 116: RF_Main();
  4134  16EB  319B  239E  3196   	fcall	_RF_Main
  4135                           
  4136                           ;Main_B1.c: 117: DelayOff_Main();
  4137  16EE  319B  23BB  3196   	fcall	_DelayOff_Main
  4138                           
  4139                           ;Main_B1.c: 118: ;;
  4140                           ;Main_B1.c: 119: ;;
  4141  16F1  2EBE               	goto	l7939
  4142  16F2                     __end_of_main:	
  4143                           ;Main_B1.c: 126: }
  4144                           ;Main_B1.c: 127: }
  4145                           ;Main_B1.c: 161: }
  4146                           ;Main_B1.c: 162: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  1506                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 181 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        0 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  1506                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  1506  0021               	movlb	1	; select bank1
  4191  1507  1820               	btfsc	_myMain^(0+128),0
  4192  1508  2D27               	goto	l7681
  4193                           
  4194                           ;Main_B1.c: 184: myMain.PowerCount++;
  4195  1509  3001               	movlw	1
  4196  150A  07A1               	addwf	(_myMain^(0+128)+1),f
  4197  150B  3000               	movlw	0
  4198  150C  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4199                           
  4200                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  4201  150D  3001               	movlw	1
  4202  150E  3EA0               	addlw	_myMain& (0+255)
  4203  150F  0086               	movwf	6
  4204  1510  0187               	clrf	7
  4205  1511  3F40               	moviw [0]fsr1
  4206  1512  3A96               	xorlw	150
  4207  1513  1D03               	skipz
  4208  1514  2D17               	goto	u7615
  4209  1515  3F41               	moviw [1]fsr1
  4210  1516  3A00               	xorlw	0
  4211  1517                     u7615:	
  4212  1517  1D03               	skipz
  4213  1518  0008               	return
  4214                           
  4215                           ;Main_B1.c: 186: {
  4216                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  4217  1519  01A1               	clrf	(_myMain^(0+128)+1)
  4218  151A  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4219                           
  4220                           ;Main_B1.c: 188: myMain.PowerON = 1;
  4221  151B  1420               	bsf	_myMain^(0+128),0
  4222                           
  4223                           ;Main_B1.c: 193: setBuz(3, 50);
  4224  151C  3032               	movlw	50
  4225  151D  0020               	movlb	0	; select bank0
  4226  151E  00A9               	movwf	setBuz@time
  4227  151F  3000               	movlw	0
  4228  1520  00AA               	movwf	setBuz@time+1
  4229  1521  3003               	movlw	3
  4230  1522  3196  26F2         	fcall	_setBuz
  4231                           
  4232                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4233  1524  0021               	movlb	1	; select bank1
  4234  1525  1620               	bsf	_myMain^(0+128),4
  4235                           
  4236                           ;Main_B1.c: 203: }
  4237                           ;Main_B1.c: 204: } else {
  4238  1526  0008               	return
  4239  1527                     l7681:	
  4240                           
  4241                           ;Main_B1.c: 205: myMain.PowerCount++;
  4242  1527  3001               	movlw	1
  4243  1528  07A1               	addwf	(_myMain^(0+128)+1),f
  4244  1529  3000               	movlw	0
  4245  152A  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4246                           
  4247                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  4248  152B  3001               	movlw	1
  4249  152C  3EA0               	addlw	_myMain& (0+255)
  4250  152D  0086               	movwf	6
  4251  152E  0187               	clrf	7
  4252  152F  3F40               	moviw [0]fsr1
  4253  1530  3A64               	xorlw	100
  4254  1531  1D03               	skipz
  4255  1532  2D35               	goto	u7625
  4256  1533  3F41               	moviw [1]fsr1
  4257  1534  3A00               	xorlw	0
  4258  1535                     u7625:	
  4259  1535  1D03               	skipz
  4260  1536  2D39               	goto	l7687
  4261                           
  4262                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  4263  1537  01A1               	clrf	(_myMain^(0+128)+1)
  4264  1538  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4265  1539                     l7687:	
  4266                           
  4267                           ;Main_B1.c: 219: }
  4268                           ;Main_B1.c: 221: myMain.Count1++;
  4269  1539  3001               	movlw	1
  4270  153A  07A5               	addwf	(_myMain^(0+128)+5),f
  4271  153B  3000               	movlw	0
  4272  153C  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4273                           
  4274                           ;Main_B1.c: 222: if (myMain.Count1 == 100)
  4275  153D  3005               	movlw	5
  4276  153E  3EA0               	addlw	_myMain& (0+255)
  4277  153F  0086               	movwf	6
  4278  1540  0187               	clrf	7
  4279  1541  3F40               	moviw [0]fsr1
  4280  1542  3A64               	xorlw	100
  4281  1543  1D03               	skipz
  4282  1544  2D47               	goto	u7635
  4283  1545  3F41               	moviw [1]fsr1
  4284  1546  3A00               	xorlw	0
  4285  1547                     u7635:	
  4286  1547  1D03               	skipz
  4287  1548  0008               	return
  4288                           
  4289                           ;Main_B1.c: 223: {
  4290                           ;Main_B1.c: 224: myMain.Count1 = 0;
  4291  1549  01A5               	clrf	(_myMain^(0+128)+5)
  4292  154A  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4293                           
  4294                           ;Main_B1.c: 236: if (myMain.Flag) {
  4295  154B  1CA0               	btfss	_myMain^(0+128),1
  4296  154C  2D4F               	goto	l1383
  4297                           
  4298                           ;Main_B1.c: 237: myMain.Flag = 0;
  4299  154D  10A0               	bcf	_myMain^(0+128),1
  4300                           
  4301                           ;Main_B1.c: 246: } else {
  4302  154E  0008               	return
  4303  154F                     l1383:	
  4304                           
  4305                           ;Main_B1.c: 247: myMain.Flag = 1;
  4306  154F  14A0               	bsf	_myMain^(0+128),1
  4307  1550  0008               	return
  4308  1551                     __end_of_my_MainTimer:	
  4309                           
  4310                           	psect	text2
  4311  1CFB                     __ptext2:	
  4312 ;; *************** function _myMain_Initialization *****************
  4313 ;; Defined at:
  4314 ;;		line 168 in file "../src/Main_B1.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;		None               void
  4321 ;; Registers used:
  4322 ;;		wreg, fsr1l, fsr1h
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;Total ram usage:        1 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    5
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function _myMain_Initialization
  4344  1CFB                     _myMain_Initialization:	
  4345                           
  4346                           ;Main_B1.c: 170: product = &_product;
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4350  1CFB  3020               	movlw	__product& (0+255)
  4351  1CFC  0020               	movlb	0	; select bank0
  4352  1CFD  00A0               	movwf	??_myMain_Initialization
  4353  1CFE  0820               	movf	??_myMain_Initialization,w
  4354  1CFF  00EE               	movwf	_product
  4355                           
  4356                           ;Main_B1.c: 171: product->Data[20] = 209;
  4357  1D00  30D1               	movlw	209
  4358  1D01  00A0               	movwf	??_myMain_Initialization
  4359  1D02  086E               	movf	_product,w
  4360  1D03  3E14               	addlw	20
  4361  1D04  0086               	movwf	6
  4362  1D05  3002               	movlw	2	; select bank4/5
  4363  1D06  0087               	movwf	7
  4364  1D07  0820               	movf	??_myMain_Initialization,w
  4365  1D08  0081               	movwf	1
  4366  1D09  0008               	return
  4367  1D0A                     __end_of_myMain_Initialization:	
  4368                           
  4369                           	psect	text3
  4370  1344                     __ptext3:	
  4371 ;; *************** function _getTemp_AD *****************
  4372 ;; Defined at:
  4373 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  channel         1    wreg     unsigned char 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  channel         1    5[BANK0 ] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;		None               void
  4380 ;; Registers used:
  4381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;Total ram usage:        2 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    7
  4394 ;; This function calls:
  4395 ;;		_getAD
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _getTemp_AD
  4403  1344                     _getTemp_AD:	
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4407                           ;getTemp_AD@channel stored from wreg
  4408  1344  0020               	movlb	0	; select bank0
  4409  1345  00A5               	movwf	getTemp_AD@channel
  4410                           
  4411                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4412  1346  0021               	movlb	1	; select bank1
  4413  1347  1D56               	btfss	_Temp^(0+128),2
  4414  1348  0008               	return
  4415                           
  4416                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4417  1349  1656               	bsf	_Temp^(0+128),4
  4418                           
  4419                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4420  134A  30F0               	movlw	240
  4421  134B  0020               	movlb	0	; select bank0
  4422  134C  00A4               	movwf	??_getTemp_AD
  4423  134D  0824               	movf	??_getTemp_AD,w
  4424  134E  00A0               	movwf	getAD@adcon1
  4425  134F  0825               	movf	getTemp_AD@channel,w
  4426  1350  319F  2738  3193   	fcall	_getAD
  4427  1353  0020               	movlb	0	; select bank0
  4428  1354  0821               	movf	?_getAD+1,w
  4429  1355  0021               	movlb	1	; select bank1
  4430  1356  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4431  1357  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4432  1358  0020               	movlb	0	; select bank0
  4433  1359  0820               	movf	?_getAD,w
  4434  135A  0021               	movlb	1	; select bank1
  4435  135B  01E2               	clrf	(_Temp^(0+128)+12)
  4436  135C  07E2               	addwf	(_Temp^(0+128)+12),f
  4437                           
  4438                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4439  135D  0863               	movf	((_Temp+1)^(0+128)+12),w
  4440  135E  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4441  135F  1D03               	skipz
  4442  1360  2B63               	goto	u7585
  4443  1361  0862               	movf	(_Temp^(0+128)+12),w
  4444  1362  025E               	subwf	(_Temp^(0+128)+8),w
  4445  1363                     u7585:	
  4446  1363  1803               	skipnc
  4447  1364  2B6C               	goto	l7663
  4448                           
  4449                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4450  1365  0863               	movf	((_Temp+1)^(0+128)+12),w
  4451  1366  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4452  1367  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4453  1368  0862               	movf	(_Temp^(0+128)+12),w
  4454  1369  01DE               	clrf	(_Temp^(0+128)+8)
  4455  136A  07DE               	addwf	(_Temp^(0+128)+8),f
  4456                           
  4457                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4458  136B  0008               	return
  4459  136C                     l7663:	
  4460  136C  0863               	movf	((_Temp+1)^(0+128)+12),w
  4461  136D  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4462  136E  1D03               	skipz
  4463  136F  2B72               	goto	u7595
  4464  1370  0862               	movf	(_Temp^(0+128)+12),w
  4465  1371  0260               	subwf	(_Temp^(0+128)+10),w
  4466  1372                     u7595:	
  4467  1372  1803               	skipnc
  4468  1373  0008               	return
  4469                           
  4470                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4471  1374  0863               	movf	((_Temp+1)^(0+128)+12),w
  4472  1375  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4473  1376  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4474  1377  0862               	movf	(_Temp^(0+128)+12),w
  4475  1378  01E0               	clrf	(_Temp^(0+128)+10)
  4476  1379  07E0               	addwf	(_Temp^(0+128)+10),f
  4477  137A  0008               	return
  4478  137B                     __end_of_getTemp_AD:	
  4479                           
  4480                           	psect	text4
  4481  0BDD                     __ptext4:	
  4482 ;; *************** function _getLoad_AD *****************
  4483 ;; Defined at:
  4484 ;;		line 15 in file "../src/OverLoad_B1.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;  channel         1    wreg     unsigned char 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  channel         1    6[BANK0 ] unsigned char 
  4489 ;;  i               1    9[BANK0 ] unsigned char 
  4490 ;;  j               1    8[BANK0 ] unsigned char 
  4491 ;;  k               1    7[BANK0 ] unsigned char 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;		None               void
  4494 ;; Registers used:
  4495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;Total ram usage:        6 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    7
  4508 ;; This function calls:
  4509 ;;		_getAD
  4510 ;; This function is called by:
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _getLoad_AD
  4517  0BDD                     _getLoad_AD:	
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4521                           ;getLoad_AD@channel stored from wreg
  4522  0BDD  0020               	movlb	0	; select bank0
  4523  0BDE  00A6               	movwf	getLoad_AD@channel
  4524                           
  4525                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4526  0BDF  01A9               	clrf	getLoad_AD@i
  4527  0BE0  01A8               	clrf	getLoad_AD@j
  4528  0BE1  01A7               	clrf	getLoad_AD@k
  4529                           
  4530                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4531  0BE2  0022               	movlb	2	; select bank2
  4532  0BE3  1E25               	btfss	_Load^(0+256),4
  4533  0BE4  0008               	return
  4534                           
  4535                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4536  0BE5  30F3               	movlw	243
  4537  0BE6  0020               	movlb	0	; select bank0
  4538  0BE7  00A4               	movwf	??_getLoad_AD
  4539  0BE8  0824               	movf	??_getLoad_AD,w
  4540  0BE9  00A0               	movwf	getAD@adcon1
  4541  0BEA  0826               	movf	getLoad_AD@channel,w
  4542  0BEB  319F  2738  318B   	fcall	_getAD
  4543  0BEE  0020               	movlb	0	; select bank0
  4544  0BEF  0821               	movf	?_getAD+1,w
  4545  0BF0  0022               	movlb	2	; select bank2
  4546  0BF1  01C7               	clrf	((_Load+1)^(0+256)+33)
  4547  0BF2  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4548  0BF3  0020               	movlb	0	; select bank0
  4549  0BF4  0820               	movf	?_getAD,w
  4550  0BF5  0022               	movlb	2	; select bank2
  4551  0BF6  01C6               	clrf	(_Load^(0+256)+33)
  4552  0BF7  07C6               	addwf	(_Load^(0+256)+33),f
  4553                           
  4554                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4555  0BF8  0020               	movlb	0	; select bank0
  4556  0BF9  01A9               	clrf	getLoad_AD@i
  4557  0BFA  3004               	movlw	4
  4558  0BFB  0229               	subwf	getLoad_AD@i,w
  4559  0BFC  1803               	btfsc	3,0
  4560  0BFD  2C2B               	goto	l7633
  4561  0BFE                     l7621:	
  4562                           
  4563                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4564  0BFE  3529               	lslf	getLoad_AD@i,w
  4565  0BFF  3E30               	addlw	(_Load+11)& (0+255)
  4566  0C00  0086               	movwf	6
  4567  0C01  3001               	movlw	1	; select bank2/3
  4568  0C02  0087               	movwf	7
  4569  0C03  3F40               	moviw [0]fsr1
  4570  0C04  00A4               	movwf	??_getLoad_AD
  4571  0C05  3F41               	moviw [1]fsr1
  4572  0C06  00A5               	movwf	??_getLoad_AD+1
  4573  0C07  0022               	movlb	2	; select bank2
  4574  0C08  0847               	movf	((_Load+1)^(0+256)+33),w
  4575  0C09  0020               	movlb	0	; select bank0
  4576  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4577  0C0B  1D03               	skipz
  4578  0C0C  2C11               	goto	u7495
  4579  0C0D  0022               	movlb	2	; select bank2
  4580  0C0E  0846               	movf	(_Load^(0+256)+33),w
  4581  0C0F  0020               	movlb	0	; select bank0
  4582  0C10  0224               	subwf	??_getLoad_AD,w
  4583  0C11                     u7495:	
  4584  0C11  1803               	skipnc
  4585  0C12  2C23               	goto	l7629
  4586  0C13  08A8               	movf	getLoad_AD@j,f
  4587  0C14  1D03               	skipz
  4588  0C15  2C23               	goto	l7629
  4589                           
  4590                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4591  0C16  3529               	lslf	getLoad_AD@i,w
  4592  0C17  3E30               	addlw	(_Load+11)& (0+255)
  4593  0C18  0086               	movwf	6
  4594  0C19  3001               	movlw	1	; select bank2/3
  4595  0C1A  0087               	movwf	7
  4596  0C1B  0022               	movlb	2	; select bank2
  4597  0C1C  0846               	movf	(_Load^(0+256)+33),w
  4598  0C1D  3FC0               	movwi [0]fsr1
  4599  0C1E  0847               	movf	((_Load+1)^(0+256)+33),w
  4600  0C1F  3FC1               	movwi [1]fsr1
  4601                           
  4602                           ;OverLoad_B1.c: 24: j = 1;
  4603  0C20  0020               	movlb	0	; select bank0
  4604  0C21  01A8               	clrf	getLoad_AD@j
  4605  0C22  0AA8               	incf	getLoad_AD@j,f
  4606  0C23                     l7629:	
  4607  0C23  3001               	movlw	1
  4608  0C24  00A4               	movwf	??_getLoad_AD
  4609  0C25  0824               	movf	??_getLoad_AD,w
  4610  0C26  07A9               	addwf	getLoad_AD@i,f
  4611  0C27  3004               	movlw	4
  4612  0C28  0229               	subwf	getLoad_AD@i,w
  4613  0C29  1C03               	skipc
  4614  0C2A  2BFE               	goto	l7621
  4615  0C2B                     l7633:	
  4616                           
  4617                           ;OverLoad_B1.c: 25: }
  4618                           ;OverLoad_B1.c: 26: }
  4619                           ;OverLoad_B1.c: 27: if (j == 0) {
  4620  0C2B  08A8               	movf	getLoad_AD@j,f
  4621  0C2C  1D03               	skipz
  4622  0C2D  0008               	return
  4623                           
  4624                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4625  0C2E  01A9               	clrf	getLoad_AD@i
  4626  0C2F                     L1:	
  4627  0C2F  3004               	movlw	4
  4628  0C30  0229               	subwf	getLoad_AD@i,w
  4629  0C31  1803               	btfsc	3,0
  4630  0C32  0008               	return
  4631                           
  4632                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4633  0C33  3529               	lslf	getLoad_AD@i,w
  4634  0C34  3E3A               	addlw	(_Load+21)& (0+255)
  4635  0C35  0086               	movwf	6
  4636  0C36  3001               	movlw	1	; select bank2/3
  4637  0C37  0087               	movwf	7
  4638  0C38  3F40               	moviw [0]fsr1
  4639  0C39  00A4               	movwf	??_getLoad_AD
  4640  0C3A  3F41               	moviw [1]fsr1
  4641  0C3B  00A5               	movwf	??_getLoad_AD+1
  4642  0C3C  0825               	movf	??_getLoad_AD+1,w
  4643  0C3D  0022               	movlb	2	; select bank2
  4644  0C3E  0247               	subwf	((_Load+1)^(0+256)+33),w
  4645  0C3F  1D03               	skipz
  4646  0C40  2C45               	goto	u7545
  4647  0C41  0020               	movlb	0	; select bank0
  4648  0C42  0824               	movf	??_getLoad_AD,w
  4649  0C43  0022               	movlb	2	; select bank2
  4650  0C44  0246               	subwf	(_Load^(0+256)+33),w
  4651  0C45                     u7545:	
  4652  0C45  1803               	skipnc
  4653  0C46  2C58               	goto	l7649
  4654  0C47  0020               	movlb	0	; select bank0
  4655  0C48  08A7               	movf	getLoad_AD@k,f
  4656  0C49  1D03               	skipz
  4657  0C4A  2C58               	goto	l7649
  4658                           
  4659                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4660  0C4B  3529               	lslf	getLoad_AD@i,w
  4661  0C4C  3E3A               	addlw	(_Load+21)& (0+255)
  4662  0C4D  0086               	movwf	6
  4663  0C4E  3001               	movlw	1	; select bank2/3
  4664  0C4F  0087               	movwf	7
  4665  0C50  0022               	movlb	2	; select bank2
  4666  0C51  0846               	movf	(_Load^(0+256)+33),w
  4667  0C52  3FC0               	movwi [0]fsr1
  4668  0C53  0847               	movf	((_Load+1)^(0+256)+33),w
  4669  0C54  3FC1               	movwi [1]fsr1
  4670                           
  4671                           ;OverLoad_B1.c: 31: k = 1;
  4672  0C55  0020               	movlb	0	; select bank0
  4673  0C56  01A7               	clrf	getLoad_AD@k
  4674  0C57  0AA7               	incf	getLoad_AD@k,f
  4675  0C58                     l7649:	
  4676  0C58  3001               	movlw	1
  4677  0C59  0020               	movlb	0	; select bank0
  4678  0C5A  00A4               	movwf	??_getLoad_AD
  4679  0C5B  0824               	movf	??_getLoad_AD,w
  4680  0C5C  07A9               	addwf	getLoad_AD@i,f
  4681  0C5D  2C2F               	goto	L1
  4682  0C5E                     __end_of_getLoad_AD:	
  4683                           
  4684                           	psect	text5
  4685  1F38                     __ptext5:	
  4686 ;; *************** function _getAD *****************
  4687 ;; Defined at:
  4688 ;;		line 455 in file "../src/MCU_B1.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  adcon0          1    wreg     unsigned char 
  4691 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  2    0[BANK0 ] int 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        4 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    6
  4710 ;; This function calls:
  4711 ;;		_Timeout_Counter
  4712 ;;		_set_TimeoutCleared
  4713 ;; This function is called by:
  4714 ;;		_getLoad_AD
  4715 ;;		_getTemp_AD
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _getAD
  4721  1F38                     _getAD:	
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4725                           ;getAD@adcon0 stored from wreg
  4726  1F38  0020               	movlb	0	; select bank0
  4727  1F39  00A3               	movwf	getAD@adcon0
  4728                           
  4729                           ;MCU_B1.c: 456: ADCON0 = adcon0;
  4730  1F3A  0823               	movf	getAD@adcon0,w
  4731  1F3B  0021               	movlb	1	; select bank1
  4732  1F3C  009D               	movwf	29	;volatile
  4733                           
  4734                           ;MCU_B1.c: 457: ADCON1 = adcon1;
  4735  1F3D  0020               	movlb	0	; select bank0
  4736  1F3E  0820               	movf	getAD@adcon1,w
  4737  1F3F  0021               	movlb	1	; select bank1
  4738  1F40  009E               	movwf	30	;volatile
  4739                           
  4740                           ;MCU_B1.c: 458: GO_nDONE = 1;
  4741  1F41  149D               	bsf	29,1	;volatile
  4742                           
  4743                           ;MCU_B1.c: 459: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4744  1F42  2F46               	goto	l7023
  4745  1F43                     l7021:	
  4746                           
  4747                           ;MCU_B1.c: 460: Timeout_Counter();
  4748  1F43  319D  25FE  319F   	fcall	_Timeout_Counter
  4749  1F46                     l7023:	
  4750  1F46  0021               	movlb	1	; select bank1
  4751  1F47  1C9D               	btfss	29,1	;volatile
  4752  1F48  2F4B               	goto	l7027
  4753  1F49  1D2C               	btfss	(_myMain^(0+128)+12),2
  4754  1F4A  2F43               	goto	l7021
  4755  1F4B                     l7027:	
  4756                           
  4757                           ;MCU_B1.c: 461: };
  4758                           ;MCU_B1.c: 462: set_TimeoutCleared();
  4759  1F4B  319B  23CB         	fcall	_set_TimeoutCleared
  4760                           
  4761                           ;MCU_B1.c: 463: return ((ADRESH*256)+ADRESL);
  4762  1F4D  0021               	movlb	1	; select bank1
  4763  1F4E  081C               	movf	28,w	;volatile
  4764  1F4F  0020               	movlb	0	; select bank0
  4765  1F50  01A1               	clrf	?_getAD+1
  4766  1F51  07A1               	addwf	?_getAD+1,f
  4767  1F52  0021               	movlb	1	; select bank1
  4768  1F53  081B               	movf	27,w	;volatile
  4769  1F54  0020               	movlb	0	; select bank0
  4770  1F55  01A0               	clrf	?_getAD
  4771  1F56  07A0               	addwf	?_getAD,f
  4772  1F57  0008               	return
  4773  1F58                     __end_of_getAD:	
  4774                           
  4775                           	psect	text6
  4776  1DB2                     __ptext6:	
  4777 ;; *************** function _WDT_Main *****************
  4778 ;; Defined at:
  4779 ;;		line 1058 in file "../src/MCU_B1.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;		None
  4784 ;; Return value:  Size  Location     Type
  4785 ;;		None               void
  4786 ;; Registers used:
  4787 ;;		wreg, status,2, status,0, pclath, cstack
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;Total ram usage:        1 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    6
  4800 ;; This function calls:
  4801 ;;		_WDT_Clearing
  4802 ;; This function is called by:
  4803 ;;		_main
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           
  4808                           ;psect for function _WDT_Main
  4809  1DB2                     _WDT_Main:	
  4810                           
  4811                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  4812                           
  4813                           ;incstack = 0
  4814                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4815  1DB2  0021               	movlb	1	; select bank1
  4816  1DB3  1C4A               	btfss	_WDT^(0+128),0
  4817  1DB4  0008               	return
  4818                           
  4819                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  4820  1DB5  3001               	movlw	1
  4821  1DB6  02CB               	subwf	(_WDT^(0+128)+1),f
  4822  1DB7  084B               	movf	(_WDT^(0+128)+1),w
  4823  1DB8  3AFF               	xorlw	255
  4824  1DB9  1903               	skipnz
  4825  1DBA  0008               	return
  4826                           
  4827                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  4828  1DBB  3064               	movlw	100
  4829  1DBC  0020               	movlb	0	; select bank0
  4830  1DBD  00A0               	movwf	??_WDT_Main
  4831  1DBE  0820               	movf	??_WDT_Main,w
  4832  1DBF  0021               	movlb	1	; select bank1
  4833  1DC0  00CB               	movwf	(_WDT^(0+128)+1)
  4834                           
  4835                           ;MCU_B1.c: 1062: WDT_Clearing();
  4836  1DC1  3180  2002         	fcall	_WDT_Clearing
  4837  1DC3  0008               	return
  4838  1DC4                     __end_of_WDT_Main:	
  4839                           
  4840                           	psect	text7
  4841  0002                     __ptext7:	
  4842 ;; *************** function _WDT_Clearing *****************
  4843 ;; Defined at:
  4844 ;;		line 1068 in file "../src/MCU_B1.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;		None
  4849 ;; Return value:  Size  Location     Type
  4850 ;;		None               void
  4851 ;; Registers used:
  4852 ;;		None
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;Total ram usage:        0 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    5
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_WDT_Main
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           
  4873                           ;psect for function _WDT_Clearing
  4874  0002                     _WDT_Clearing:	
  4875                           
  4876                           ;incstack = 0
  4877                           ; Regs used in _WDT_Clearing: []
  4878  0002  0064               	clrwdt	;# 
  4879  0003  0008               	return
  4880  0004                     __end_of_WDT_Clearing:	
  4881                           
  4882                           	psect	text8
  4883  1BA4                     __ptext8:	
  4884 ;; *************** function _Temp_Main *****************
  4885 ;; Defined at:
  4886 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;		None               void
  4893 ;; Registers used:
  4894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    8
  4907 ;; This function calls:
  4908 ;;		_setTemp_Main
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _Temp_Main
  4916  1BA4                     _Temp_Main:	
  4917                           
  4918                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4922  1BA4  318D  25FE         	fcall	_setTemp_Main
  4923  1BA6  0008               	return
  4924  1BA7                     __end_of_Temp_Main:	
  4925                           
  4926                           	psect	text9
  4927  0DFE                     __ptext9:	
  4928 ;; *************** function _setTemp_Main *****************
  4929 ;; Defined at:
  4930 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;		None
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;		None               void
  4937 ;; Registers used:
  4938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;Total ram usage:        2 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    7
  4951 ;; This function calls:
  4952 ;;		_getMain_All_Error_Status
  4953 ;;		_setBuz
  4954 ;; This function is called by:
  4955 ;;		_Temp_Main
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           
  4960                           ;psect for function _setTemp_Main
  4961  0DFE                     _setTemp_Main:	
  4962                           
  4963                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4964                           
  4965                           ;incstack = 0
  4966                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4967  0DFE  0021               	movlb	1	; select bank1
  4968  0DFF  1C56               	btfss	_Temp^(0+128),0
  4969  0E00  2E9F               	goto	l1686
  4970                           
  4971                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4972  0E01  1956               	btfsc	_Temp^(0+128),2
  4973  0E02  2E12               	goto	l7131
  4974                           
  4975                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4976  0E03  3001               	movlw	1
  4977  0E04  07D7               	addwf	(_Temp^(0+128)+1),f
  4978  0E05  3000               	movlw	0
  4979  0E06  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4980                           
  4981                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4982  0E07  3001               	movlw	1
  4983  0E08  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4984  0E09  30F4               	movlw	244
  4985  0E0A  1903               	skipnz
  4986  0E0B  0257               	subwf	(_Temp^(0+128)+1),w
  4987  0E0C  1C03               	skipc
  4988  0E0D  0008               	return
  4989                           
  4990                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4991  0E0E  01D7               	clrf	(_Temp^(0+128)+1)
  4992  0E0F  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4993                           
  4994                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4995  0E10  1556               	bsf	_Temp^(0+128),2
  4996                           
  4997                           ;OverTemperature_B1.c: 64: }
  4998                           ;OverTemperature_B1.c: 65: } else {
  4999  0E11  0008               	return
  5000  0E12                     l7131:	
  5001                           
  5002                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5003  0E12  3002               	movlw	2
  5004  0E13  3191  21D0  318D   	fcall	_getMain_All_Error_Status
  5005  0E16  3800               	iorlw	0
  5006  0E17  1D03               	skipz
  5007  0E18  0008               	return
  5008                           
  5009                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5010  0E19  3001               	movlw	1
  5011  0E1A  0021               	movlb	1	; select bank1
  5012  0E1B  07D7               	addwf	(_Temp^(0+128)+1),f
  5013  0E1C  3000               	movlw	0
  5014  0E1D  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5015                           
  5016                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5017  0E1E  3000               	movlw	0
  5018  0E1F  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5019  0E20  3005               	movlw	5
  5020  0E21  1903               	skipnz
  5021  0E22  0257               	subwf	(_Temp^(0+128)+1),w
  5022  0E23  1C03               	skipc
  5023  0E24  0008               	return
  5024                           
  5025                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5026  0E25  01D7               	clrf	(_Temp^(0+128)+1)
  5027  0E26  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5028                           
  5029                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5030  0E27  1E56               	btfss	_Temp^(0+128),4
  5031  0E28  0008               	return
  5032                           
  5033                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5034  0E29  1156               	bcf	_Temp^(0+128),2
  5035                           
  5036                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5037  0E2A  300A               	movlw	10
  5038  0E2B  3ED6               	addlw	_Temp& (0+255)
  5039  0E2C  0086               	movwf	6
  5040  0E2D  0187               	clrf	7
  5041  0E2E  3008               	movlw	8
  5042  0E2F  3ED6               	addlw	_Temp& (0+255)
  5043  0E30  0084               	movwf	4
  5044  0E31  0185               	clrf	5
  5045  0E32  3F40               	moviw [0]fsr1
  5046  0E33  0700               	addwf	0,w
  5047  0E34  0020               	movlb	0	; select bank0
  5048  0E35  00AD               	movwf	??_setTemp_Main
  5049  0E36  3101               	addfsr 0,1
  5050  0E37  3F41               	moviw [1]fsr1
  5051  0E38  3D00               	addwfc	0,w
  5052  0E39  00AE               	movwf	??_setTemp_Main+1
  5053  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5054  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5055  0E3C  082D               	movf	??_setTemp_Main,w
  5056  0E3D  0021               	movlb	1	; select bank1
  5057  0E3E  00DC               	movwf	(_Temp^(0+128)+6)
  5058  0E3F  0020               	movlb	0	; select bank0
  5059  0E40  082E               	movf	??_setTemp_Main+1,w
  5060  0E41  0021               	movlb	1	; select bank1
  5061  0E42  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5062                           
  5063                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 500;
  5064  0E43  30F4               	movlw	244
  5065  0E44  00E4               	movwf	(_Temp^(0+128)+14)
  5066  0E45  3001               	movlw	1
  5067  0E46  00E5               	movwf	(_Temp^(0+128)+15)
  5068                           
  5069                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 458;
  5070  0E47  30CA               	movlw	202
  5071  0E48  00E6               	movwf	(_Temp^(0+128)+16)
  5072  0E49  3001               	movlw	1
  5073  0E4A  00E7               	movwf	(_Temp^(0+128)+17)
  5074                           
  5075                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5076  0E4B  1CD6               	btfss	_Temp^(0+128),1
  5077  0E4C  2E6D               	goto	l7163
  5078                           
  5079                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5080  0E4D  0865               	movf	((_Temp+1)^(0+128)+14),w
  5081  0E4E  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5082  0E4F  1D03               	skipz
  5083  0E50  2E53               	goto	u6645
  5084  0E51  0864               	movf	(_Temp^(0+128)+14),w
  5085  0E52  025C               	subwf	(_Temp^(0+128)+6),w
  5086  0E53                     u6645:	
  5087  0E53  1C03               	skipc
  5088  0E54  2E6B               	goto	l7161
  5089                           
  5090                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5091  0E55  3001               	movlw	1
  5092  0E56  0020               	movlb	0	; select bank0
  5093  0E57  00AD               	movwf	??_setTemp_Main
  5094  0E58  082D               	movf	??_setTemp_Main,w
  5095  0E59  0021               	movlb	1	; select bank1
  5096  0E5A  07D9               	addwf	(_Temp^(0+128)+3),f
  5097                           
  5098                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5099  0E5B  3003               	movlw	3
  5100  0E5C  0259               	subwf	(_Temp^(0+128)+3),w
  5101  0E5D  1C03               	skipc
  5102  0E5E  2E83               	goto	l7175
  5103                           
  5104                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5105  0E5F  01D9               	clrf	(_Temp^(0+128)+3)
  5106                           
  5107                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5108  0E60  10D6               	bcf	_Temp^(0+128),1
  5109                           
  5110                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5111  0E61  3064               	movlw	100
  5112  0E62  0020               	movlb	0	; select bank0
  5113  0E63  00A9               	movwf	setBuz@time
  5114  0E64  3000               	movlw	0
  5115  0E65  00AA               	movwf	setBuz@time+1
  5116  0E66  3002               	movlw	2
  5117  0E67  3196  26F2  318D   	fcall	_setBuz
  5118                           
  5119                           ;OverTemperature_B1.c: 96: }
  5120                           ;OverTemperature_B1.c: 97: } else {
  5121  0E6A  2E83               	goto	l7175
  5122  0E6B                     l7161:	
  5123                           
  5124                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5125  0E6B  0021               	movlb	1	; select bank1
  5126  0E6C  2E82               	goto	l7173
  5127  0E6D                     l7163:	
  5128                           ;OverTemperature_B1.c: 99: }
  5129                           ;OverTemperature_B1.c: 100: } else {
  5130                           
  5131                           
  5132                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5133  0E6D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5134  0E6E  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5135  0E6F  1D03               	skipz
  5136  0E70  2E73               	goto	u6665
  5137  0E71  085C               	movf	(_Temp^(0+128)+6),w
  5138  0E72  0266               	subwf	(_Temp^(0+128)+16),w
  5139  0E73                     u6665:	
  5140  0E73  1C03               	skipc
  5141  0E74  2E82               	goto	l7173
  5142                           
  5143                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5144  0E75  3001               	movlw	1
  5145  0E76  0020               	movlb	0	; select bank0
  5146  0E77  00AD               	movwf	??_setTemp_Main
  5147  0E78  082D               	movf	??_setTemp_Main,w
  5148  0E79  0021               	movlb	1	; select bank1
  5149  0E7A  07D9               	addwf	(_Temp^(0+128)+3),f
  5150                           
  5151                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5152  0E7B  3003               	movlw	3
  5153  0E7C  0259               	subwf	(_Temp^(0+128)+3),w
  5154  0E7D  1C03               	skipc
  5155  0E7E  2E83               	goto	l7175
  5156                           
  5157                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5158  0E7F  01D9               	clrf	(_Temp^(0+128)+3)
  5159                           
  5160                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5161  0E80  14D6               	bsf	_Temp^(0+128),1
  5162                           
  5163                           ;OverTemperature_B1.c: 106: }
  5164                           ;OverTemperature_B1.c: 107: } else {
  5165  0E81  2E83               	goto	l7175
  5166  0E82                     l7173:	
  5167                           
  5168                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5169  0E82  01D9               	clrf	(_Temp^(0+128)+3)
  5170  0E83                     l7175:	
  5171                           
  5172                           ;OverTemperature_B1.c: 109: }
  5173                           ;OverTemperature_B1.c: 110: }
  5174                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5175  0E83  0021               	movlb	1	; select bank1
  5176  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5177  0E85  0020               	movlb	0	; select bank0
  5178  0E86  00AD               	movwf	??_setTemp_Main
  5179  0E87  086E               	movf	_product,w
  5180  0E88  3E18               	addlw	24
  5181  0E89  0086               	movwf	6
  5182  0E8A  3002               	movlw	2	; select bank4/5
  5183  0E8B  0087               	movwf	7
  5184  0E8C  082D               	movf	??_setTemp_Main,w
  5185  0E8D  0081               	movwf	1
  5186                           
  5187                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5188  0E8E  0021               	movlb	1	; select bank1
  5189  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5190  0E90  0020               	movlb	0	; select bank0
  5191  0E91  00AD               	movwf	??_setTemp_Main
  5192  0E92  086E               	movf	_product,w
  5193  0E93  3E19               	addlw	25
  5194  0E94  0086               	movwf	6
  5195  0E95  3002               	movlw	2	; select bank4/5
  5196  0E96  0087               	movwf	7
  5197  0E97  082D               	movf	??_setTemp_Main,w
  5198  0E98  0081               	movwf	1
  5199                           
  5200                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5201  0E99  0021               	movlb	1	; select bank1
  5202  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5203  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5204                           
  5205                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5206  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5207  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5208                           
  5209                           ;OverTemperature_B1.c: 120: }
  5210                           ;OverTemperature_B1.c: 121: }
  5211                           ;OverTemperature_B1.c: 122: }
  5212                           ;OverTemperature_B1.c: 123: }
  5213                           ;OverTemperature_B1.c: 124: } else {
  5214  0E9E  0008               	return
  5215  0E9F                     l1686:	
  5216                           
  5217                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5218  0E9F  1C20               	btfss	_myMain^(0+128),0
  5219  0EA0  0008               	return
  5220                           
  5221                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5222  0EA1  1456               	bsf	_Temp^(0+128),0
  5223  0EA2  0008               	return
  5224  0EA3                     __end_of_setTemp_Main:	
  5225                           
  5226                           	psect	text10
  5227  1BA1                     __ptext10:	
  5228 ;; *************** function _Temp_Initialization *****************
  5229 ;; Defined at:
  5230 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:        0 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    6
  5251 ;; This function calls:
  5252 ;;		_setTemp_Initialization
  5253 ;; This function is called by:
  5254 ;;		_main
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _Temp_Initialization
  5260  1BA1                     _Temp_Initialization:	
  5261                           
  5262                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5266  1BA1  3187  27FF         	fcall	_setTemp_Initialization
  5267  1BA3  0008               	return
  5268  1BA4                     __end_of_Temp_Initialization:	
  5269                           
  5270                           	psect	text11
  5271  07FF                     __ptext11:	
  5272 ;; *************** function _setTemp_Initialization *****************
  5273 ;; Defined at:
  5274 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		None
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    5
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_Temp_Initialization
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _setTemp_Initialization
  5304  07FF                     _setTemp_Initialization:	
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _setTemp_Initialization: []
  5308  07FF  0008               	return
  5309  0800                     __end_of_setTemp_Initialization:	
  5310                           
  5311                           	psect	text12
  5312  1F18                     __ptext12:	
  5313 ;; *************** function _Switch_Main *****************
  5314 ;; Defined at:
  5315 ;;		line 72 in file "../src/Switch_B1.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  error           1   30[BANK0 ] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;Total ram usage:        2 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:   11
  5336 ;; This function calls:
  5337 ;;		_TouchPower
  5338 ;;		_getMain_All_Error_Status
  5339 ;;		_setMain_Exception
  5340 ;;		_setSw_Main
  5341 ;; This function is called by:
  5342 ;;		_main
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           
  5347                           ;psect for function _Switch_Main
  5348  1F18                     _Switch_Main:	
  5349                           
  5350                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5351                           
  5352                           ;incstack = 0
  5353                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5354  1F18  3000               	movlw	0
  5355  1F19  3191  21D0  319F   	fcall	_getMain_All_Error_Status
  5356  1F1C  0020               	movlb	0	; select bank0
  5357  1F1D  00BD               	movwf	??_Switch_Main
  5358  1F1E  083D               	movf	??_Switch_Main,w
  5359  1F1F  00BE               	movwf	Switch_Main@error
  5360                           
  5361                           ;Switch_B1.c: 74: if (error != 0) {
  5362  1F20  083E               	movf	Switch_Main@error,w
  5363  1F21  1903               	btfsc	3,2
  5364  1F22  2F28               	goto	l2380
  5365                           
  5366                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5367  1F23  0021               	movlb	1	; select bank1
  5368  1F24  1851               	btfsc	_SwDetect^(0+128),0
  5369  1F25  2F31               	goto	l7863
  5370                           
  5371                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5372  1F26  1451               	bsf	_SwDetect^(0+128),0
  5373  1F27  2F2C               	goto	L2
  5374  1F28                     l2380:	
  5375                           ;Switch_B1.c: 80: }
  5376                           ;Switch_B1.c: 81: } else {
  5377                           
  5378                           ;Switch_B1.c: 78: setMain_Exception(error);
  5379                           
  5380                           
  5381                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5382  1F28  0021               	movlb	1	; select bank1
  5383  1F29  1C51               	btfss	_SwDetect^(0+128),0
  5384  1F2A  2F31               	goto	l7863
  5385                           
  5386                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5387  1F2B  1051               	bcf	_SwDetect^(0+128),0
  5388  1F2C                     L2:	
  5389                           
  5390                           ;Switch_B1.c: 85: setMain_Exception(error);
  5391  1F2C  0020               	movlb	0	; select bank0
  5392  1F2D  083E               	movf	Switch_Main@error,w
  5393  1F2E  3188  200B  319F   	fcall	_setMain_Exception
  5394  1F31                     l7863:	
  5395                           
  5396                           ;Switch_B1.c: 87: }
  5397                           ;Switch_B1.c: 88: }
  5398                           ;Switch_B1.c: 91: setSw_Main(1);
  5399  1F31  3001               	movlw	1
  5400  1F32  3181  21C0  319F   	fcall	_setSw_Main
  5401                           
  5402                           ;Switch_B1.c: 103: TouchPower();
  5403  1F35  319E  2628         	fcall	_TouchPower
  5404  1F37  0008               	return
  5405  1F38                     __end_of_Switch_Main:	
  5406                           
  5407                           	psect	text13
  5408  01C0                     __ptext13:	
  5409 ;; *************** function _setSw_Main *****************
  5410 ;; Defined at:
  5411 ;;		line 137 in file "../src/Switch_B1.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  sw              1    wreg     unsigned char 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  sw              1   19[BANK0 ] unsigned char 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;		None               void
  5418 ;; Registers used:
  5419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;Total ram usage:        3 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    9
  5432 ;; This function calls:
  5433 ;;		_SwPointSelect
  5434 ;;		_getSw_KeyStatus
  5435 ;;		_setBuz
  5436 ;;		_setDimmerLights_AdjControl
  5437 ;;		_setDimmerLights_SwOff
  5438 ;;		_setDimmerLights_SwOn
  5439 ;;		_setRF_Learn
  5440 ;; This function is called by:
  5441 ;;		_Switch_Main
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _setSw_Main
  5447  01C0                     _setSw_Main:	
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5451                           ;setSw_Main@sw stored from wreg
  5452  01C0  0020               	movlb	0	; select bank0
  5453  01C1  00B3               	movwf	setSw_Main@sw
  5454                           
  5455                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5456  01C2  0833               	movf	setSw_Main@sw,w
  5457  01C3  3188  2000  3181   	fcall	_SwPointSelect
  5458                           
  5459                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5460  01C6  087C               	movf	_Sw,w
  5461  01C7  0086               	movwf	6
  5462  01C8  3001               	movlw	1	; select bank2/3
  5463  01C9  0087               	movwf	7
  5464  01CA  1C01               	btfss	1,0
  5465  01CB  2B26               	goto	l2390
  5466                           
  5467                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5468  01CC  0021               	movlb	1	; select bank1
  5469  01CD  1851               	btfsc	_SwDetect^(0+128),0
  5470  01CE  29EA               	goto	l7305
  5471                           
  5472                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5473  01CF  0A7C               	incf	_Sw,w
  5474  01D0  0086               	movwf	6
  5475  01D1  3001               	movlw	1	; select bank2/3
  5476  01D2  0087               	movwf	7
  5477  01D3  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5480  01D4  0020               	movlb	0	; select bank0
  5481  01D5  0833               	movf	setSw_Main@sw,w
  5482  01D6  319D  257D  3181   	fcall	_getSw_KeyStatus
  5483  01D9  3A01               	xorlw	1
  5484  01DA  3000               	movlw	0
  5485  01DB  1903               	skipnz
  5486  01DC  3001               	movlw	1
  5487  01DD  0020               	movlb	0	; select bank0
  5488  01DE  00B1               	movwf	??_setSw_Main
  5489  01DF  087C               	movf	_Sw,w
  5490  01E0  0086               	movwf	6
  5491  01E1  3001               	movlw	1	; select bank2/3
  5492  01E2  0087               	movwf	7
  5493  01E3  0DB1               	rlf	??_setSw_Main,f
  5494  01E4  0801               	movf	1,w
  5495  01E5  0631               	xorwf	??_setSw_Main,w
  5496  01E6  39FD               	andlw	-3
  5497  01E7  0631               	xorwf	??_setSw_Main,w
  5498  01E8  0081               	movwf	1
  5499                           
  5500                           ;Switch_B1.c: 143: } else {
  5501  01E9  29FF               	goto	l2392
  5502  01EA                     l7305:	
  5503                           
  5504                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5505  01EA  0A7C               	incf	_Sw,w
  5506  01EB  0086               	movwf	6
  5507  01EC  3001               	movlw	1	; select bank2/3
  5508  01ED  0087               	movwf	7
  5509  01EE  1881               	btfsc	1,1
  5510  01EF  29FF               	goto	l2392
  5511                           
  5512                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5513  01F0  0A7C               	incf	_Sw,w
  5514  01F1  0086               	movwf	6
  5515  01F2  3001               	movlw	1	; select bank2/3
  5516  01F3  0087               	movwf	7
  5517  01F4  1481               	bsf	1,1
  5518                           
  5519                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5520  01F5  087C               	movf	_Sw,w
  5521  01F6  0086               	movwf	6
  5522  01F7  3001               	movlw	1	; select bank2/3
  5523  01F8  0087               	movwf	7
  5524  01F9  1081               	bcf	1,1
  5525                           
  5526                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5527  01FA  087C               	movf	_Sw,w
  5528  01FB  0086               	movwf	6
  5529  01FC  3001               	movlw	1	; select bank2/3
  5530  01FD  0087               	movwf	7
  5531  01FE  1501               	bsf	1,2
  5532  01FF                     l2392:	
  5533                           
  5534                           ;Switch_B1.c: 148: }
  5535                           ;Switch_B1.c: 149: }
  5536                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5537  01FF  087C               	movf	_Sw,w
  5538  0200  0086               	movwf	6
  5539  0201  3001               	movlw	1	; select bank2/3
  5540  0202  0087               	movwf	7
  5541  0203  1C81               	btfss	1,1
  5542  0204  2ACF               	goto	l7355
  5543                           
  5544                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5545  0205  087C               	movf	_Sw,w
  5546  0206  0086               	movwf	6
  5547  0207  3001               	movlw	1	; select bank2/3
  5548  0208  0087               	movwf	7
  5549  0209  1901               	btfsc	1,2
  5550  020A  2A2D               	goto	l7321
  5551                           
  5552                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5553  020B  3001               	movlw	1
  5554  020C  0020               	movlb	0	; select bank0
  5555  020D  00B1               	movwf	??_setSw_Main
  5556  020E  087C               	movf	_Sw,w
  5557  020F  3E02               	addlw	2
  5558  0210  0086               	movwf	6
  5559  0211  3001               	movlw	1	; select bank2/3
  5560  0212  0087               	movwf	7
  5561  0213  0831               	movf	??_setSw_Main,w
  5562  0214  0781               	addwf	1,f
  5563                           
  5564                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5565  0215  087C               	movf	_Sw,w
  5566  0216  3E02               	addlw	2
  5567  0217  0086               	movwf	6
  5568  0218  3001               	movlw	1	; select bank2/3
  5569  0219  0087               	movwf	7
  5570  021A  3005               	movlw	5
  5571  021B  0201               	subwf	1,w
  5572  021C  1C03               	skipc
  5573  021D  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5576  021E  087C               	movf	_Sw,w
  5577  021F  3E02               	addlw	2
  5578  0220  0086               	movwf	6
  5579  0221  3001               	movlw	1	; select bank2/3
  5580  0222  0087               	movwf	7
  5581  0223  0181               	clrf	1
  5582                           
  5583                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5584  0224  087C               	movf	_Sw,w
  5585  0225  0086               	movwf	6
  5586  0226  3001               	movlw	1	; select bank2/3
  5587  0227  0087               	movwf	7
  5588  0228  1501               	bsf	1,2
  5589                           
  5590                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5591  0229  0833               	movf	setSw_Main@sw,w
  5592  022A  3193  23B3         	fcall	_setDimmerLights_SwOn
  5593                           
  5594                           ;Switch_B1.c: 162: }
  5595                           ;Switch_B1.c: 163: } else {
  5596  022C  0008               	return
  5597  022D                     l7321:	
  5598                           
  5599                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5600  022D  087C               	movf	_Sw,w
  5601  022E  0086               	movwf	6
  5602  022F  3001               	movlw	1	; select bank2/3
  5603  0230  0087               	movwf	7
  5604  0231  1981               	btfsc	1,3
  5605  0232  2A5F               	goto	l7331
  5606                           
  5607                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5608  0233  087C               	movf	_Sw,w
  5609  0234  3E03               	addlw	3
  5610  0235  0086               	movwf	6
  5611  0236  3001               	movlw	1	; select bank2/3
  5612  0237  0087               	movwf	7
  5613  0238  3001               	movlw	1
  5614  0239  0781               	addwf	1,f
  5615  023A  3141               	addfsr 1,1
  5616  023B  1803               	skipnc
  5617  023C  0A81               	incf	1,f
  5618                           
  5619                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5620  023D  087C               	movf	_Sw,w
  5621  023E  3E03               	addlw	3
  5622  023F  0086               	movwf	6
  5623  0240  3001               	movlw	1	; select bank2/3
  5624  0241  0087               	movwf	7
  5625  0242  3F40               	moviw [0]fsr1
  5626  0243  0020               	movlb	0	; select bank0
  5627  0244  00B1               	movwf	??_setSw_Main
  5628  0245  3F41               	moviw [1]fsr1
  5629  0246  00B2               	movwf	??_setSw_Main+1
  5630  0247  3000               	movlw	0
  5631  0248  0232               	subwf	??_setSw_Main+1,w
  5632  0249  3096               	movlw	150
  5633  024A  1903               	skipnz
  5634  024B  0231               	subwf	??_setSw_Main,w
  5635  024C  1C03               	skipc
  5636  024D  0008               	return
  5637                           
  5638                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5639  024E  087C               	movf	_Sw,w
  5640  024F  3E03               	addlw	3
  5641  0250  0086               	movwf	6
  5642  0251  3001               	movlw	1	; select bank2/3
  5643  0252  0087               	movwf	7
  5644  0253  3000               	movlw	0
  5645  0254  3FC0               	movwi [0]fsr1
  5646  0255  3FC1               	movwi [1]fsr1
  5647                           
  5648                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5649  0256  087C               	movf	_Sw,w
  5650  0257  0086               	movwf	6
  5651  0258  3001               	movlw	1	; select bank2/3
  5652  0259  0087               	movwf	7
  5653  025A  1581               	bsf	1,3
  5654                           
  5655                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5656  025B  0833               	movf	setSw_Main@sw,w
  5657  025C  3192  2236         	fcall	_setDimmerLights_AdjControl
  5658                           
  5659                           ;Switch_B1.c: 174: }
  5660                           ;Switch_B1.c: 175: } else {
  5661  025E  0008               	return
  5662  025F                     l7331:	
  5663                           
  5664                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5665  025F  087C               	movf	_Sw,w
  5666  0260  0086               	movwf	6
  5667  0261  3001               	movlw	1	; select bank2/3
  5668  0262  0087               	movwf	7
  5669  0263  1A01               	btfsc	1,4
  5670  0264  2A9D               	goto	l7345
  5671                           
  5672                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5673  0265  087C               	movf	_Sw,w
  5674  0266  3E05               	addlw	5
  5675  0267  0086               	movwf	6
  5676  0268  3001               	movlw	1	; select bank2/3
  5677  0269  0087               	movwf	7
  5678  026A  3001               	movlw	1
  5679  026B  0781               	addwf	1,f
  5680  026C  3141               	addfsr 1,1
  5681  026D  1803               	skipnc
  5682  026E  0A81               	incf	1,f
  5683                           
  5684                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5685  026F  087C               	movf	_Sw,w
  5686  0270  3E05               	addlw	5
  5687  0271  0086               	movwf	6
  5688  0272  3001               	movlw	1	; select bank2/3
  5689  0273  0087               	movwf	7
  5690  0274  3F40               	moviw [0]fsr1
  5691  0275  0020               	movlb	0	; select bank0
  5692  0276  00B1               	movwf	??_setSw_Main
  5693  0277  3F41               	moviw [1]fsr1
  5694  0278  00B2               	movwf	??_setSw_Main+1
  5695  0279  3000               	movlw	0
  5696  027A  0232               	subwf	??_setSw_Main+1,w
  5697  027B  3096               	movlw	150
  5698  027C  1903               	skipnz
  5699  027D  0231               	subwf	??_setSw_Main,w
  5700  027E  1C03               	skipc
  5701  027F  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5704  0280  087C               	movf	_Sw,w
  5705  0281  3E05               	addlw	5
  5706  0282  0086               	movwf	6
  5707  0283  3001               	movlw	1	; select bank2/3
  5708  0284  0087               	movwf	7
  5709  0285  3000               	movlw	0
  5710  0286  3FC0               	movwi [0]fsr1
  5711  0287  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5714  0288  087C               	movf	_Sw,w
  5715  0289  0086               	movwf	6
  5716  028A  3001               	movlw	1	; select bank2/3
  5717  028B  0087               	movwf	7
  5718  028C  1601               	bsf	1,4
  5719                           
  5720                           ;Switch_B1.c: 183: setRF_Learn(1);
  5721  028D  3001               	movlw	1
  5722  028E  3190  2066  3181   	fcall	_setRF_Learn
  5723                           
  5724                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5725  0291  0021               	movlb	1	; select bank1
  5726  0292  1EA0               	btfss	_myMain^(0+128),5
  5727  0293  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 186: setBuz(2, 100);
  5730  0294  3064               	movlw	100
  5731  0295  0020               	movlb	0	; select bank0
  5732  0296  00A9               	movwf	setBuz@time
  5733  0297  3000               	movlw	0
  5734  0298  00AA               	movwf	setBuz@time+1
  5735  0299  3002               	movlw	2
  5736  029A  3196  26F2         	fcall	_setBuz
  5737                           
  5738                           ;Switch_B1.c: 187: }
  5739                           ;Switch_B1.c: 189: }
  5740                           ;Switch_B1.c: 190: } else {
  5741  029C  0008               	return
  5742  029D                     l7345:	
  5743                           
  5744                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5745  029D  087C               	movf	_Sw,w
  5746  029E  0086               	movwf	6
  5747  029F  3001               	movlw	1	; select bank2/3
  5748  02A0  0087               	movwf	7
  5749  02A1  1A81               	btfsc	1,5
  5750  02A2  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5753  02A3  087C               	movf	_Sw,w
  5754  02A4  3E07               	addlw	7
  5755  02A5  0086               	movwf	6
  5756  02A6  3001               	movlw	1	; select bank2/3
  5757  02A7  0087               	movwf	7
  5758  02A8  3001               	movlw	1
  5759  02A9  0781               	addwf	1,f
  5760  02AA  3141               	addfsr 1,1
  5761  02AB  1803               	skipnc
  5762  02AC  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5765  02AD  087C               	movf	_Sw,w
  5766  02AE  3E07               	addlw	7
  5767  02AF  0086               	movwf	6
  5768  02B0  3001               	movlw	1	; select bank2/3
  5769  02B1  0087               	movwf	7
  5770  02B2  3F40               	moviw [0]fsr1
  5771  02B3  0020               	movlb	0	; select bank0
  5772  02B4  00B1               	movwf	??_setSw_Main
  5773  02B5  3F41               	moviw [1]fsr1
  5774  02B6  00B2               	movwf	??_setSw_Main+1
  5775  02B7  3001               	movlw	1
  5776  02B8  0232               	subwf	??_setSw_Main+1,w
  5777  02B9  302C               	movlw	44
  5778  02BA  1903               	skipnz
  5779  02BB  0231               	subwf	??_setSw_Main,w
  5780  02BC  1C03               	skipc
  5781  02BD  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5784  02BE  087C               	movf	_Sw,w
  5785  02BF  3E07               	addlw	7
  5786  02C0  0086               	movwf	6
  5787  02C1  3001               	movlw	1	; select bank2/3
  5788  02C2  0087               	movwf	7
  5789  02C3  3000               	movlw	0
  5790  02C4  3FC0               	movwi [0]fsr1
  5791  02C5  3FC1               	movwi [1]fsr1
  5792                           
  5793                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5794  02C6  087C               	movf	_Sw,w
  5795  02C7  0086               	movwf	6
  5796  02C8  3001               	movlw	1	; select bank2/3
  5797  02C9  0087               	movwf	7
  5798  02CA  1681               	bsf	1,5
  5799                           
  5800                           ;Switch_B1.c: 198: setRF_Learn(0);
  5801  02CB  3000               	movlw	0
  5802  02CC  3190  2066         	fcall	_setRF_Learn
  5803                           
  5804                           ;Switch_B1.c: 201: }
  5805                           ;Switch_B1.c: 202: }
  5806                           ;Switch_B1.c: 203: }
  5807                           ;Switch_B1.c: 204: }
  5808                           ;Switch_B1.c: 205: }
  5809                           ;Switch_B1.c: 206: } else {
  5810  02CE  0008               	return
  5811  02CF                     l7355:	
  5812                           
  5813                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5814  02CF  087C               	movf	_Sw,w
  5815  02D0  0086               	movwf	6
  5816  02D1  3001               	movlw	1	; select bank2/3
  5817  02D2  0087               	movwf	7
  5818  02D3  1D01               	btfss	1,2
  5819  02D4  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5822  02D5  3001               	movlw	1
  5823  02D6  0020               	movlb	0	; select bank0
  5824  02D7  00B1               	movwf	??_setSw_Main
  5825  02D8  087C               	movf	_Sw,w
  5826  02D9  3E02               	addlw	2
  5827  02DA  0086               	movwf	6
  5828  02DB  3001               	movlw	1	; select bank2/3
  5829  02DC  0087               	movwf	7
  5830  02DD  0831               	movf	??_setSw_Main,w
  5831  02DE  0781               	addwf	1,f
  5832                           
  5833                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5834  02DF  087C               	movf	_Sw,w
  5835  02E0  3E02               	addlw	2
  5836  02E1  0086               	movwf	6
  5837  02E2  3001               	movlw	1	; select bank2/3
  5838  02E3  0087               	movwf	7
  5839  02E4  3005               	movlw	5
  5840  02E5  0201               	subwf	1,w
  5841  02E6  1C03               	skipc
  5842  02E7  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5845  02E8  087C               	movf	_Sw,w
  5846  02E9  3E02               	addlw	2
  5847  02EA  0086               	movwf	6
  5848  02EB  3001               	movlw	1	; select bank2/3
  5849  02EC  0087               	movwf	7
  5850  02ED  0181               	clrf	1
  5851                           
  5852                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5853  02EE  087C               	movf	_Sw,w
  5854  02EF  0086               	movwf	6
  5855  02F0  3001               	movlw	1	; select bank2/3
  5856  02F1  0087               	movwf	7
  5857  02F2  1101               	bcf	1,2
  5858                           
  5859                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5860  02F3  087C               	movf	_Sw,w
  5861  02F4  3E03               	addlw	3
  5862  02F5  0086               	movwf	6
  5863  02F6  3001               	movlw	1	; select bank2/3
  5864  02F7  0087               	movwf	7
  5865  02F8  3000               	movlw	0
  5866  02F9  3FC0               	movwi [0]fsr1
  5867  02FA  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5870  02FB  087C               	movf	_Sw,w
  5871  02FC  0086               	movwf	6
  5872  02FD  3001               	movlw	1	; select bank2/3
  5873  02FE  0087               	movwf	7
  5874  02FF  1181               	bcf	1,3
  5875                           
  5876                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5877  0300  087C               	movf	_Sw,w
  5878  0301  3E05               	addlw	5
  5879  0302  0086               	movwf	6
  5880  0303  3001               	movlw	1	; select bank2/3
  5881  0304  0087               	movwf	7
  5882  0305  3000               	movlw	0
  5883  0306  3FC0               	movwi [0]fsr1
  5884  0307  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5887  0308  087C               	movf	_Sw,w
  5888  0309  0086               	movwf	6
  5889  030A  3001               	movlw	1	; select bank2/3
  5890  030B  0087               	movwf	7
  5891  030C  1201               	bcf	1,4
  5892                           
  5893                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5894  030D  087C               	movf	_Sw,w
  5895  030E  3E07               	addlw	7
  5896  030F  0086               	movwf	6
  5897  0310  3001               	movlw	1	; select bank2/3
  5898  0311  0087               	movwf	7
  5899  0312  3000               	movlw	0
  5900  0313  3FC0               	movwi [0]fsr1
  5901  0314  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5904  0315  087C               	movf	_Sw,w
  5905  0316  0086               	movwf	6
  5906  0317  3001               	movlw	1	; select bank2/3
  5907  0318  0087               	movwf	7
  5908  0319  1281               	bcf	1,5
  5909                           
  5910                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5911  031A  0021               	movlb	1	; select bank1
  5912  031B  1851               	btfsc	_SwDetect^(0+128),0
  5913  031C  2B22               	goto	l7381
  5914                           
  5915                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5916  031D  0020               	movlb	0	; select bank0
  5917  031E  0833               	movf	setSw_Main@sw,w
  5918  031F  3194  2473  3181   	fcall	_setDimmerLights_SwOff
  5919  0322                     l7381:	
  5920                           
  5921                           ;Switch_B1.c: 221: }
  5922                           ;Switch_B1.c: 224: setRF_Learn(0);
  5923  0322  3000               	movlw	0
  5924  0323  3190  2066         	fcall	_setRF_Learn
  5925                           
  5926                           ;Switch_B1.c: 226: }
  5927                           ;Switch_B1.c: 227: }
  5928                           ;Switch_B1.c: 228: }
  5929                           ;Switch_B1.c: 229: } else {
  5930  0325  0008               	return
  5931  0326                     l2390:	
  5932                           
  5933                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5934  0326  0021               	movlb	1	; select bank1
  5935  0327  1C20               	btfss	_myMain^(0+128),0
  5936  0328  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5939  0329  087C               	movf	_Sw,w
  5940  032A  0086               	movwf	6
  5941  032B  3001               	movlw	1	; select bank2/3
  5942  032C  0087               	movwf	7
  5943  032D  1401               	bsf	1,0
  5944  032E  0008               	return
  5945  032F                     __end_of_setSw_Main:	
  5946                           
  5947                           	psect	text14
  5948  1066                     __ptext14:	
  5949 ;; *************** function _setRF_Learn *****************
  5950 ;; Defined at:
  5951 ;;		line 23 in file "../src/RF_Control_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  command         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  command         1    1[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        2 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _setRF_Learn
  5981  1066                     _setRF_Learn:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5985                           ;setRF_Learn@command stored from wreg
  5986  1066  0020               	movlb	0	; select bank0
  5987  1067  00A1               	movwf	setRF_Learn@command
  5988                           
  5989                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5990  1068  0821               	movf	setRF_Learn@command,w
  5991  1069  3A01               	xorlw	1
  5992  106A  3000               	movlw	0
  5993  106B  1903               	skipnz
  5994  106C  3001               	movlw	1
  5995  106D  00A0               	movwf	??_setRF_Learn
  5996  106E  0EA0               	swapf	??_setRF_Learn,f
  5997  106F  0DA0               	rlf	??_setRF_Learn,f
  5998  1070  0DA0               	rlf	??_setRF_Learn,f
  5999  1071  0021               	movlb	1	; select bank1
  6000  1072  083B               	movf	_RF1^(0+128),w
  6001  1073  0020               	movlb	0	; select bank0
  6002  1074  0620               	xorwf	??_setRF_Learn,w
  6003  1075  39BF               	andlw	-65
  6004  1076  0620               	xorwf	??_setRF_Learn,w
  6005  1077  0021               	movlb	1	; select bank1
  6006  1078  00BB               	movwf	_RF1^(0+128)
  6007  1079  0008               	return
  6008  107A                     __end_of_setRF_Learn:	
  6009                           
  6010                           	psect	text15
  6011  1236                     __ptext15:	
  6012 ;; *************** function _setDimmerLights_AdjControl *****************
  6013 ;; Defined at:
  6014 ;;		line 546 in file "../src/Dimmer_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  sw              1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  sw              1    8[BANK0 ] unsigned char 
  6019 ;;  idle            1    6[BANK0 ] unsigned char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;		None               void
  6022 ;; Registers used:
  6023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;Total ram usage:        4 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    7
  6036 ;; This function calls:
  6037 ;;		_DimmerLightsPointSelect
  6038 ;;		_getAll_DimmerLights_AdjGO
  6039 ;;		_setDimmerLights_TriggerAdj
  6040 ;; This function is called by:
  6041 ;;		_setSw_Main
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function _setDimmerLights_AdjControl
  6047  1236                     _setDimmerLights_AdjControl:	
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6051                           ;setDimmerLights_AdjControl@sw stored from wreg
  6052  1236  0020               	movlb	0	; select bank0
  6053  1237  00A8               	movwf	setDimmerLights_AdjControl@sw
  6054                           
  6055                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6056  1238  0828               	movf	setDimmerLights_AdjControl@sw,w
  6057  1239  319C  2443  3192   	fcall	_DimmerLightsPointSelect
  6058                           
  6059                           ;Dimmer_B1.c: 548: char idle = 0;
  6060  123C  0020               	movlb	0	; select bank0
  6061  123D  01A6               	clrf	setDimmerLights_AdjControl@idle
  6062                           
  6063                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6064  123E  01A7               	clrf	_setDimmerLights_AdjControl$2415
  6065  123F  319C  2423  3192   	fcall	_getAll_DimmerLights_AdjGO
  6066  1242  3A01               	xorlw	1
  6067  1243  1D03               	skipz
  6068  1244  2A4B               	goto	l6537
  6069  1245  0022               	movlb	2	; select bank2
  6070  1246  1CA0               	btfss	_Dimmer^(0+256),1
  6071  1247  2A4B               	goto	l6537
  6072  1248  0020               	movlb	0	; select bank0
  6073  1249  01A7               	clrf	_setDimmerLights_AdjControl$2415
  6074  124A  0AA7               	incf	_setDimmerLights_AdjControl$2415,f
  6075  124B                     l6537:	
  6076  124B  0020               	movlb	0	; select bank0
  6077  124C  0827               	movf	_setDimmerLights_AdjControl$2415,w
  6078  124D  00A5               	movwf	??_setDimmerLights_AdjControl
  6079  124E  0825               	movf	??_setDimmerLights_AdjControl,w
  6080  124F  00A6               	movwf	setDimmerLights_AdjControl@idle
  6081                           
  6082                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6083  1250  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6084  1251  1D03               	skipz
  6085  1252  0008               	return
  6086                           
  6087                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6088  1253  086F               	movf	_DimmerLights,w
  6089  1254  3E09               	addlw	9
  6090  1255  0086               	movwf	6
  6091  1256  3001               	movlw	1	; select bank2/3
  6092  1257  0087               	movwf	7
  6093  1258  1F01               	btfss	1,6
  6094  1259  0008               	return
  6095                           
  6096                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6097  125A  086F               	movf	_DimmerLights,w
  6098  125B  3E09               	addlw	9
  6099  125C  0086               	movwf	6
  6100  125D  3001               	movlw	1	; select bank2/3
  6101  125E  0087               	movwf	7
  6102  125F  1781               	bsf	1,7
  6103                           
  6104                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6105  1260  086F               	movf	_DimmerLights,w
  6106  1261  0086               	movwf	6
  6107  1262  3001               	movlw	1	; select bank2/3
  6108  1263  0087               	movwf	7
  6109  1264  1681               	bsf	1,5
  6110                           
  6111                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6112  1265  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6113  1266  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6114  1267  0828               	movf	setDimmerLights_AdjControl@sw,w
  6115  1268  319E  26F8         	fcall	_setDimmerLights_TriggerAdj
  6116  126A  0008               	return
  6117  126B                     __end_of_setDimmerLights_AdjControl:	
  6118                           
  6119                           	psect	text16
  6120  1D7D                     __ptext16:	
  6121 ;; *************** function _getSw_KeyStatus *****************
  6122 ;; Defined at:
  6123 ;;		line 237 in file "../src/Switch_B1.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  sw              1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  sw              1    0[COMMON] unsigned char 
  6128 ;;  status          1    1[BANK0 ] unsigned char 
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      unsigned char 
  6131 ;; Registers used:
  6132 ;;		wreg, status,2
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;Total ram usage:        3 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:    5
  6145 ;; This function calls:
  6146 ;;		Nothing
  6147 ;; This function is called by:
  6148 ;;		_setSw_Main
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           
  6153                           ;psect for function _getSw_KeyStatus
  6154  1D7D                     _getSw_KeyStatus:	
  6155                           
  6156                           ;Switch_B1.c: 238: char status = 0;
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6160  1D7D  0020               	movlb	0	; select bank0
  6161  1D7E  01A1               	clrf	getSw_KeyStatus@status
  6162                           
  6163                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6164  1D7F  01A2               	clrf	_getSw_KeyStatus$6565
  6165  1D80  0AA2               	incf	_getSw_KeyStatus$6565,f
  6166  1D81  1F0C               	btfss	12,6	;volatile
  6167  1D82  1A0C               	btfsc	12,4	;volatile
  6168  1D83  2D88               	goto	l6735
  6169  1D84  1C0C               	btfss	12,0	;volatile
  6170  1D85  1B8C               	btfsc	12,7	;volatile
  6171  1D86  2D88               	goto	l6735
  6172  1D87  01A2               	clrf	_getSw_KeyStatus$6565
  6173  1D88                     l6735:	
  6174  1D88  0822               	movf	_getSw_KeyStatus$6565,w
  6175  1D89  00A0               	movwf	??_getSw_KeyStatus
  6176  1D8A  0820               	movf	??_getSw_KeyStatus,w
  6177  1D8B  00A1               	movwf	getSw_KeyStatus@status
  6178                           
  6179                           ;Switch_B1.c: 261: return status;
  6180  1D8C  0821               	movf	getSw_KeyStatus@status,w
  6181  1D8D  0008               	return
  6182  1D8E                     __end_of_getSw_KeyStatus:	
  6183                           
  6184                           	psect	text17
  6185  0800                     __ptext17:	
  6186 ;; *************** function _SwPointSelect *****************
  6187 ;; Defined at:
  6188 ;;		line 25 in file "../src/Switch_B1.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  sw              1    wreg     unsigned char 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  sw              1    1[BANK0 ] unsigned char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;		None               void
  6195 ;; Registers used:
  6196 ;;		wreg
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;Total ram usage:        2 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    5
  6209 ;; This function calls:
  6210 ;;		Nothing
  6211 ;; This function is called by:
  6212 ;;		_setSw_Main
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function _SwPointSelect
  6218  0800                     _SwPointSelect:	
  6219                           
  6220                           ;incstack = 0
  6221                           ; Regs used in _SwPointSelect: [wreg]
  6222                           ;SwPointSelect@sw stored from wreg
  6223  0800  0020               	movlb	0	; select bank0
  6224  0801  00A1               	movwf	SwPointSelect@sw
  6225                           
  6226                           ;Switch_B1.c: 28: if (sw == 1) {
  6227  0802  0821               	movf	SwPointSelect@sw,w
  6228  0803  3A01               	xorlw	1
  6229  0804  1D03               	skipz
  6230  0805  0008               	return
  6231                           
  6232                           ;Switch_B1.c: 29: Sw = &Sw1;
  6233  0806  30E3               	movlw	_Sw1& (0+255)
  6234  0807  00A0               	movwf	??_SwPointSelect
  6235  0808  0820               	movf	??_SwPointSelect,w
  6236  0809  00FC               	movwf	_Sw
  6237  080A  0008               	return
  6238  080B                     __end_of_SwPointSelect:	
  6239                           
  6240                           	psect	text18
  6241  080B                     __ptext18:	
  6242 ;; *************** function _setMain_Exception *****************
  6243 ;; Defined at:
  6244 ;;		line 282 in file "../src/Main_B1.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  command         1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  command         1   28[BANK0 ] unsigned char 
  6249 ;;  status          1   27[BANK0 ] unsigned char 
  6250 ;;  buz             1   24[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;		None               void
  6253 ;; Registers used:
  6254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        7 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:   10
  6267 ;; This function calls:
  6268 ;;		_getDimmerLights_Line
  6269 ;;		_getMain_LightsStatus
  6270 ;;		_setBuz
  6271 ;;		_setDimmerLights_ErrorClose
  6272 ;;		_setLED
  6273 ;; This function is called by:
  6274 ;;		_Switch_Main
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _setMain_Exception
  6280  080B                     _setMain_Exception:	
  6281                           
  6282                           ;incstack = 0
  6283                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6284                           ;setMain_Exception@command stored from wreg
  6285  080B  0020               	movlb	0	; select bank0
  6286  080C  00BC               	movwf	setMain_Exception@command
  6287                           
  6288                           ;Main_B1.c: 283: char status = 0, buz = 0;
  6289  080D  01BB               	clrf	setMain_Exception@status
  6290  080E  01B8               	clrf	setMain_Exception@buz
  6291                           
  6292                           ;Main_B1.c: 300: status = command == 3 ? getDimmerLights_Line() : 255;
  6293  080F  083C               	movf	setMain_Exception@command,w
  6294  0810  3A03               	xorlw	3
  6295  0811  1903               	skipnz
  6296  0812  2817               	goto	l7065
  6297  0813  30FF               	movlw	255
  6298  0814  00B9               	movwf	_setMain_Exception$3741
  6299  0815  3000               	movlw	0
  6300  0816  2820               	goto	L3
  6301  0817                     l7065:	
  6302  0817  319C  246F  3188   	fcall	_getDimmerLights_Line
  6303  081A  0020               	movlb	0	; select bank0
  6304  081B  00B6               	movwf	??_setMain_Exception
  6305  081C  01B7               	clrf	??_setMain_Exception+1
  6306  081D  0836               	movf	??_setMain_Exception,w
  6307  081E  00B9               	movwf	_setMain_Exception$3741
  6308  081F  0837               	movf	??_setMain_Exception+1,w
  6309  0820                     L3:	
  6310  0820  00BA               	movwf	_setMain_Exception$3741+1
  6311  0821  0839               	movf	_setMain_Exception$3741,w
  6312  0822  00B6               	movwf	??_setMain_Exception
  6313  0823  0836               	movf	??_setMain_Exception,w
  6314  0824  00BB               	movwf	setMain_Exception@status
  6315                           
  6316                           ;Main_B1.c: 302: if (command == 0) {
  6317  0825  08BC               	movf	setMain_Exception@command,f
  6318  0826  1D03               	skipz
  6319  0827  282A               	goto	l7073
  6320                           
  6321                           ;Main_B1.c: 303: setLED(99, 10);
  6322  0828  300A               	movlw	10
  6323  0829  282C               	goto	L4
  6324  082A                     l7073:	
  6325                           ;Main_B1.c: 304: } else {
  6326                           
  6327                           
  6328                           ;Main_B1.c: 305: setLED(99, 11);
  6329  082A  300B               	movlw	11
  6330  082B  0020               	movlb	0	; select bank0
  6331  082C                     L4:	
  6332  082C  00B6               	movwf	??_setMain_Exception
  6333  082D  0836               	movf	??_setMain_Exception,w
  6334  082E  00A2               	movwf	setLED@command
  6335  082F  3063               	movlw	99
  6336  0830  3192  226B  3188   	fcall	_setLED
  6337                           
  6338                           ;Main_B1.c: 306: }
  6339                           ;Main_B1.c: 308: if (command != 0) {
  6340  0833  0020               	movlb	0	; select bank0
  6341  0834  083C               	movf	setMain_Exception@command,w
  6342  0835  1903               	btfsc	3,2
  6343  0836  0008               	return
  6344                           
  6345                           ;Main_B1.c: 309: switch (command) {
  6346  0837  2858               	goto	l7089
  6347  0838                     l7079:	
  6348                           ;Main_B1.c: 310: case 2:
  6349                           
  6350                           
  6351                           ;Main_B1.c: 311: if (getMain_LightsStatus() == 1) {
  6352  0838  3187  27D4  3188   	fcall	_getMain_LightsStatus
  6353  083B  3A01               	xorlw	1
  6354  083C  1D03               	skipz
  6355  083D  2861               	goto	l7091
  6356                           
  6357                           ;Main_B1.c: 312: setBuz(10, 300);
  6358  083E  302C               	movlw	44
  6359  083F  0020               	movlb	0	; select bank0
  6360  0840  00A9               	movwf	setBuz@time
  6361  0841  3001               	movlw	1
  6362  0842  00AA               	movwf	setBuz@time+1
  6363  0843  300A               	movlw	10
  6364  0844  3196  26F2  3188   	fcall	_setBuz
  6365                           
  6366                           ;Main_B1.c: 313: }
  6367                           ;Main_B1.c: 314: break;
  6368  0847  2861               	goto	l7091
  6369  0848                     l7083:	
  6370                           ;Main_B1.c: 315: case 3:
  6371                           
  6372                           
  6373                           ;Main_B1.c: 316: if (getMain_LightsStatus() == 1) {
  6374  0848  3187  27D4  3188   	fcall	_getMain_LightsStatus
  6375  084B  3A01               	xorlw	1
  6376  084C  1D03               	skipz
  6377  084D  2861               	goto	l7091
  6378                           
  6379                           ;Main_B1.c: 317: setBuz(5, 300);
  6380  084E  302C               	movlw	44
  6381  084F  0020               	movlb	0	; select bank0
  6382  0850  00A9               	movwf	setBuz@time
  6383  0851  3001               	movlw	1
  6384  0852  00AA               	movwf	setBuz@time+1
  6385  0853  3005               	movlw	5
  6386  0854  3196  26F2  3188   	fcall	_setBuz
  6387                           
  6388                           ;Main_B1.c: 320: }
  6389                           
  6390                           ;Main_B1.c: 318: }
  6391                           ;Main_B1.c: 319: break;
  6392  0857  2861               	goto	l7091
  6393  0858                     l7089:	
  6394  0858  0020               	movlb	0	; select bank0
  6395  0859  083C               	movf	setMain_Exception@command,w
  6396                           
  6397                           ; Switch size 1, requested type "space"
  6398                           ; Number of cases is 2, Range of values is 2 to 3
  6399                           ; switch strategies available:
  6400                           ; Name         Instructions Cycles
  6401                           ; simple_byte            7     4 (average)
  6402                           ; direct_byte           13     9 (fixed)
  6403                           ; jumptable            263     9 (fixed)
  6404                           ;	Chosen strategy is simple_byte
  6405  085A  3A02               	xorlw	2	; case 2
  6406  085B  1903               	skipnz
  6407  085C  2838               	goto	l7079
  6408  085D  3A01               	xorlw	1	; case 3
  6409  085E  1903               	skipnz
  6410  085F  2848               	goto	l7083
  6411  0860  2861               	goto	l7091
  6412  0861                     l7091:	
  6413                           
  6414                           ;Main_B1.c: 321: setDimmerLights_ErrorClose(status);
  6415  0861  0020               	movlb	0	; select bank0
  6416  0862  083B               	movf	setMain_Exception@status,w
  6417  0863  3196  2642         	fcall	_setDimmerLights_ErrorClose
  6418  0865  0020               	movlb	0	; select bank0
  6419  0866  0008               	return
  6420  0867                     __end_of_setMain_Exception:	
  6421                           
  6422                           	psect	text19
  6423  1C6F                     __ptext19:	
  6424 ;; *************** function _getDimmerLights_Line *****************
  6425 ;; Defined at:
  6426 ;;		line 695 in file "../src/Dimmer_B1.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  line            1    0[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      unsigned char 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        1 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    5
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_setMain_Exception
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _getDimmerLights_Line
  6456  1C6F                     _getDimmerLights_Line:	
  6457                           
  6458                           ;Dimmer_B1.c: 696: char line = 0;
  6459                           
  6460                           ;incstack = 0
  6461                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6462  1C6F  0020               	movlb	0	; select bank0
  6463  1C70  01A0               	clrf	getDimmerLights_Line@line
  6464                           
  6465                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6466  1C71  0022               	movlb	2	; select bank2
  6467  1C72  1C5C               	btfss	(_DimmerLights1^(0+256)+9),0
  6468  1C73  2C77               	goto	l6559
  6469                           
  6470                           ;Dimmer_B1.c: 699: line = 1;
  6471  1C74  0020               	movlb	0	; select bank0
  6472  1C75  01A0               	clrf	getDimmerLights_Line@line
  6473  1C76  0AA0               	incf	getDimmerLights_Line@line,f
  6474  1C77                     l6559:	
  6475                           
  6476                           ;Dimmer_B1.c: 700: }
  6477                           ;Dimmer_B1.c: 712: return line;
  6478  1C77  0020               	movlb	0	; select bank0
  6479  1C78  0820               	movf	getDimmerLights_Line@line,w
  6480  1C79  0008               	return
  6481  1C7A                     __end_of_getDimmerLights_Line:	
  6482                           
  6483                           	psect	text20
  6484  1C10                     __ptext20:	
  6485 ;; *************** function _Switch_Initialization *****************
  6486 ;; Defined at:
  6487 ;;		line 46 in file "../src/Switch_B1.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    8
  6508 ;; This function calls:
  6509 ;;		_TouchPower
  6510 ;;		_setSw_Initialization
  6511 ;; This function is called by:
  6512 ;;		_main
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           
  6517                           ;psect for function _Switch_Initialization
  6518  1C10                     _Switch_Initialization:	
  6519                           
  6520                           ;Switch_B1.c: 47: TouchPower();
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6524  1C10  319E  2628  319C   	fcall	_TouchPower
  6525                           
  6526                           ;Switch_B1.c: 49: WPUB1 = 0;
  6527  1C13  0024               	movlb	4	; select bank4
  6528  1C14  108D               	bcf	13,1	;volatile
  6529                           
  6530                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6531  1C15  3001               	movlw	1
  6532  1C16  319D  253A         	fcall	_setSw_Initialization
  6533  1C18  0008               	return
  6534  1C19                     __end_of_Switch_Initialization:	
  6535                           
  6536                           	psect	text21
  6537  1D3A                     __ptext21:	
  6538 ;; *************** function _setSw_Initialization *****************
  6539 ;; Defined at:
  6540 ;;		line 109 in file "../src/Switch_B1.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  sw              1    wreg     unsigned char 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  sw              1    4[BANK0 ] unsigned char 
  6545 ;; Return value:  Size  Location     Type
  6546 ;;		None               void
  6547 ;; Registers used:
  6548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:        1 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    7
  6561 ;; This function calls:
  6562 ;;		_setLED
  6563 ;; This function is called by:
  6564 ;;		_Switch_Initialization
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _setSw_Initialization
  6570  1D3A                     _setSw_Initialization:	
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6574                           ;setSw_Initialization@sw stored from wreg
  6575  1D3A  0020               	movlb	0	; select bank0
  6576  1D3B  00A4               	movwf	setSw_Initialization@sw
  6577                           
  6578                           ;Switch_B1.c: 110: setLED(sw, 1);
  6579  1D3C  01A2               	clrf	setLED@command
  6580  1D3D  0AA2               	incf	setLED@command,f
  6581  1D3E  0824               	movf	setSw_Initialization@sw,w
  6582  1D3F  3192  226B  319D   	fcall	_setLED
  6583                           
  6584                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6585  1D42  0020               	movlb	0	; select bank0
  6586  1D43  01A2               	clrf	setLED@command
  6587  1D44  0AA2               	incf	setLED@command,f
  6588  1D45  0824               	movf	setSw_Initialization@sw,w
  6589  1D46  3E01               	addlw	1
  6590  1D47  3192  226B         	fcall	_setLED
  6591  1D49  0008               	return
  6592  1D4A                     __end_of_setSw_Initialization:	
  6593                           
  6594                           	psect	text22
  6595  1E28                     __ptext22:	
  6596 ;; *************** function _TouchPower *****************
  6597 ;; Defined at:
  6598 ;;		line 10 in file "../src/Switch_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        0 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    6
  6619 ;; This function calls:
  6620 ;;		_Timeout_Counter
  6621 ;;		_set_TimeoutCleared
  6622 ;; This function is called by:
  6623 ;;		_Switch_Initialization
  6624 ;;		_Switch_Main
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _TouchPower
  6630  1E28                     _TouchPower:	
  6631                           
  6632                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6636  1E28  0020               	movlb	0	; select bank0
  6637  1E29  180D               	btfsc	13,0	;volatile
  6638  1E2A  0008               	return
  6639                           
  6640                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6641  1E2B  0021               	movlb	1	; select bank1
  6642  1E2C  1C20               	btfss	_myMain^(0+128),0
  6643  1E2D  0008               	return
  6644  1E2E  2E34               	goto	l7287
  6645  1E2F                     l2366:	
  6646                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6647                           
  6648                           
  6649                           ;Switch_B1.c: 14: RB0 = 1;
  6650  1E2F  0020               	movlb	0	; select bank0
  6651  1E30  140D               	bsf	13,0	;volatile
  6652                           
  6653                           ;Switch_B1.c: 15: Timeout_Counter();
  6654  1E31  319D  25FE  319E   	fcall	_Timeout_Counter
  6655  1E34                     l7287:	
  6656  1E34  0020               	movlb	0	; select bank0
  6657  1E35  180D               	btfsc	13,0	;volatile
  6658  1E36  2E3A               	goto	l7291
  6659  1E37  0021               	movlb	1	; select bank1
  6660  1E38  1D2C               	btfss	(_myMain^(0+128)+12),2
  6661  1E39  2E2F               	goto	l2366
  6662  1E3A                     l7291:	
  6663                           
  6664                           ;Switch_B1.c: 16: }
  6665                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6666  1E3A  319B  23CB         	fcall	_set_TimeoutCleared
  6667  1E3C  0008               	return
  6668  1E3D                     __end_of_TouchPower:	
  6669                           
  6670                           	psect	text23
  6671  1B9E                     __ptext23:	
  6672 ;; *************** function _RF_Main *****************
  6673 ;; Defined at:
  6674 ;;		line 16 in file "../src/RF_Control_B1.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;		None
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;		None               void
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;Total ram usage:        0 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:   14
  6695 ;; This function calls:
  6696 ;;		_setRF_Main
  6697 ;; This function is called by:
  6698 ;;		_main
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _RF_Main
  6704  1B9E                     _RF_Main:	
  6705                           
  6706                           ;RF_Control_B1.c: 18: setRF_Main();
  6707                           
  6708                           ;incstack = 0
  6709                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6710  1B9E  3186  2647         	fcall	_setRF_Main
  6711  1BA0  0008               	return
  6712  1BA1                     __end_of_RF_Main:	
  6713                           
  6714                           	psect	text24
  6715  0647                     __ptext24:	
  6716 ;; *************** function _setRF_Main *****************
  6717 ;; Defined at:
  6718 ;;		line 52 in file "../src/RF_Control_B1.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;		None
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  error           1    2[BANK1 ] unsigned char 
  6723 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6724 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        4 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:   13
  6741 ;; This function calls:
  6742 ;;		_CC2500_RxData
  6743 ;;		_CC2500_TxData
  6744 ;;		_CC2500_WriteCommand
  6745 ;;		_RF_RxDisable
  6746 ;;		_getBuz_GO
  6747 ;;		_getMain_All_Error_Status
  6748 ;;		_getRF_KeyStatus
  6749 ;;		_getRxData
  6750 ;; This function is called by:
  6751 ;;		_RF_Main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _setRF_Main
  6757  0647                     _setRF_Main:	
  6758                           
  6759                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6760                           
  6761                           ;incstack = 0
  6762                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6763  0647  0021               	movlb	1	; select bank1
  6764  0648  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6765  0649  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6766  064A  01EA               	clrf	setRF_Main@error^(0+128)
  6767                           
  6768                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6769  064B  1C3B               	btfss	_RF1^(0+128),0
  6770  064C  2F11               	goto	l2003
  6771                           
  6772                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6773  064D  319D  255B  3186   	fcall	_getBuz_GO
  6774  0650  0020               	movlb	0	; select bank0
  6775  0651  0821               	movf	?_getBuz_GO+1,w
  6776  0652  0420               	iorwf	?_getBuz_GO,w
  6777  0653  1D03               	skipz
  6778  0654  0008               	return
  6779                           
  6780                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6781  0655  3000               	movlw	0
  6782  0656  3191  21D0  3186   	fcall	_getMain_All_Error_Status
  6783  0659  3800               	iorlw	0
  6784  065A  1D03               	skipz
  6785  065B  2E70               	goto	l2005
  6786                           
  6787                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6788  065C  319D  256C  3186   	fcall	_getRF_KeyStatus
  6789  065F  3A01               	xorlw	1
  6790  0660  3000               	movlw	0
  6791  0661  1903               	skipnz
  6792  0662  3001               	movlw	1
  6793  0663  0020               	movlb	0	; select bank0
  6794  0664  00ED               	movwf	??_setRF_Main
  6795  0665  0CED               	rrf	??_setRF_Main,f
  6796  0666  0CED               	rrf	??_setRF_Main,f
  6797  0667  0021               	movlb	1	; select bank1
  6798  0668  083B               	movf	_RF1^(0+128),w
  6799  0669  0020               	movlb	0	; select bank0
  6800  066A  066D               	xorwf	??_setRF_Main,w
  6801  066B  397F               	andlw	-129
  6802  066C  066D               	xorwf	??_setRF_Main,w
  6803  066D  0021               	movlb	1	; select bank1
  6804  066E  00BB               	movwf	_RF1^(0+128)
  6805                           
  6806                           ;RF_Control_B1.c: 65: } else {
  6807  066F  2E72               	goto	l2006
  6808  0670                     l2005:	
  6809                           
  6810                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6811  0670  0021               	movlb	1	; select bank1
  6812  0671  13BB               	bcf	_RF1^(0+128),7
  6813  0672                     l2006:	
  6814                           
  6815                           ;RF_Control_B1.c: 70: }
  6816                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6817  0672  1BBB               	btfsc	_RF1^(0+128),7
  6818  0673  1B3B               	btfsc	_RF1^(0+128),6
  6819  0674  2E7A               	goto	l2007
  6820                           
  6821                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6822  0675  01BD               	clrf	(_RF1^(0+128)+2)
  6823  0676  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6824                           
  6825                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6826  0677  14BC               	bsf	(_RF1^(0+128)+1),1
  6827                           
  6828                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6829  0678  11BB               	bcf	_RF1^(0+128),3
  6830                           
  6831                           ;RF_Control_B1.c: 76: } else {
  6832  0679  0008               	return
  6833  067A                     l2007:	
  6834                           
  6835                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6836  067A  18BC               	btfsc	(_RF1^(0+128)+1),1
  6837  067B  1B3B               	btfsc	_RF1^(0+128),6
  6838  067C  2E91               	goto	l7213
  6839                           
  6840                           ;RF_Control_B1.c: 78: RF1.Count++;
  6841  067D  3001               	movlw	1
  6842  067E  07BD               	addwf	(_RF1^(0+128)+2),f
  6843  067F  3000               	movlw	0
  6844  0680  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6845                           
  6846                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6847  0681  3002               	movlw	2
  6848  0682  3EBB               	addlw	_RF1& (0+255)
  6849  0683  0086               	movwf	6
  6850  0684  0187               	clrf	7
  6851  0685  3F40               	moviw [0]fsr1
  6852  0686  0642               	xorwf	(_RF1^(0+128)+7),w
  6853  0687  1D03               	skipz
  6854  0688  2E8B               	goto	u6765
  6855  0689  3F41               	moviw [1]fsr1
  6856  068A  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6857  068B                     u6765:	
  6858  068B  1D03               	skipz
  6859  068C  2EEF               	goto	l7265
  6860                           
  6861                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6862  068D  01BD               	clrf	(_RF1^(0+128)+2)
  6863  068E  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6864                           
  6865                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6866  068F  10BC               	bcf	(_RF1^(0+128)+1),1
  6867                           
  6868                           ;RF_Control_B1.c: 82: }
  6869                           ;RF_Control_B1.c: 83: } else {
  6870  0690  2EEF               	goto	l7265
  6871  0691                     l7213:	
  6872                           
  6873                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6874  0691  01BD               	clrf	(_RF1^(0+128)+2)
  6875  0692  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6876                           
  6877                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6878  0693  10BC               	bcf	(_RF1^(0+128)+1),1
  6879                           
  6880                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6881  0694  193B               	btfsc	_RF1^(0+128),2
  6882  0695  1B3B               	btfsc	_RF1^(0+128),6
  6883  0696  2EA5               	goto	l2012
  6884                           
  6885                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6886  0697  113B               	bcf	_RF1^(0+128),2
  6887                           
  6888                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6889  0698  11BB               	bcf	_RF1^(0+128),3
  6890                           
  6891                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6892  0699  10BB               	bcf	_RF1^(0+128),1
  6893                           
  6894                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6895  069A  300A               	movlw	10
  6896  069B  00C2               	movwf	(_RF1^(0+128)+7)
  6897  069C  3000               	movlw	0
  6898  069D  00C3               	movwf	(_RF1^(0+128)+8)
  6899                           
  6900                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6901  069E  319C  24EC  3186   	fcall	_RF_RxDisable
  6902                           
  6903                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6904  06A1  3189  21E2  3186   	fcall	_CC2500_TxData
  6905                           
  6906                           ;RF_Control_B1.c: 106: } else {
  6907  06A4  2EEF               	goto	l7265
  6908  06A5                     l2012:	
  6909                           
  6910                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6911  06A5  1DBB               	btfss	_RF1^(0+128),3
  6912  06A6  2EDE               	goto	l2014
  6913                           
  6914                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6915  06A7  318B  2373  3186   	fcall	_CC2500_RxData
  6916                           
  6917                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6918  06AA  0021               	movlb	1	; select bank1
  6919  06AB  1CBB               	btfss	_RF1^(0+128),1
  6920  06AC  2EEF               	goto	l7265
  6921                           
  6922                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6923  06AD  10BB               	bcf	_RF1^(0+128),1
  6924                           
  6925                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6926  06AE  12BC               	bcf	(_RF1^(0+128)+1),5
  6927                           
  6928                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6929  06AF  01C5               	clrf	(_RF1^(0+128)+10)
  6930  06B0  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6931                           
  6932                           ;RF_Control_B1.c: 126: getRxData();
  6933  06B1  318D  256E  3186   	fcall	_getRxData
  6934                           
  6935                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6936  06B4  0021               	movlb	1	; select bank1
  6937  06B5  14BC               	bsf	(_RF1^(0+128)+1),1
  6938                           
  6939                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  6940  06B6  1DBC               	btfss	(_RF1^(0+128)+1),3
  6941  06B7  2EC5               	goto	l7249
  6942                           
  6943                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  6944  06B8  3000               	movlw	0
  6945  06B9  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6946  06BA  300B               	movlw	11
  6947  06BB  1903               	skipnz
  6948  06BC  0242               	subwf	(_RF1^(0+128)+7),w
  6949  06BD  1C03               	skipc
  6950  06BE  2EC3               	goto	l7247
  6951                           
  6952                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  6953  06BF  300A               	movlw	10
  6954  06C0  00C2               	movwf	(_RF1^(0+128)+7)
  6955  06C1  3000               	movlw	0
  6956  06C2  00C3               	movwf	(_RF1^(0+128)+8)
  6957  06C3                     l7247:	
  6958                           
  6959                           ;RF_Control_B1.c: 132: }
  6960                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  6961  06C3  01BF               	clrf	(_RF1^(0+128)+4)
  6962                           
  6963                           ;RF_Control_B1.c: 134: } else {
  6964  06C4  2EEF               	goto	l7265
  6965  06C5                     l7249:	
  6966                           
  6967                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  6968  06C5  3001               	movlw	1
  6969  06C6  0020               	movlb	0	; select bank0
  6970  06C7  00ED               	movwf	??_setRF_Main
  6971  06C8  086D               	movf	??_setRF_Main,w
  6972  06C9  0021               	movlb	1	; select bank1
  6973  06CA  07BF               	addwf	(_RF1^(0+128)+4),f
  6974                           
  6975                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  6976  06CB  083F               	movf	(_RF1^(0+128)+4),w
  6977  06CC  3A02               	xorlw	2
  6978  06CD  1D03               	skipz
  6979  06CE  2EEF               	goto	l7265
  6980                           
  6981                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  6982  06CF  01BF               	clrf	(_RF1^(0+128)+4)
  6983                           
  6984                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  6985  06D0  01C0               	clrf	(_RF1^(0+128)+5)
  6986  06D1  01C1               	clrf	((_RF1+1)^(0+128)+5)
  6987                           
  6988                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  6989  06D2  3000               	movlw	0
  6990  06D3  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6991  06D4  30C8               	movlw	200
  6992  06D5  1903               	skipnz
  6993  06D6  0242               	subwf	(_RF1^(0+128)+7),w
  6994  06D7  1803               	skipnc
  6995  06D8  2EEF               	goto	l7265
  6996                           
  6997                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  6998  06D9  300A               	movlw	10
  6999  06DA  07C2               	addwf	(_RF1^(0+128)+7),f
  7000  06DB  3000               	movlw	0
  7001  06DC  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7002                           
  7003                           ;RF_Control_B1.c: 141: }
  7004                           ;RF_Control_B1.c: 142: }
  7005                           ;RF_Control_B1.c: 143: }
  7006                           ;RF_Control_B1.c: 144: }
  7007                           ;RF_Control_B1.c: 145: } else {
  7008  06DD  2EEF               	goto	l7265
  7009  06DE                     l2014:	
  7010                           
  7011                           ;RF_Control_B1.c: 147: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7012  06DE  1DBB               	btfss	_RF1^(0+128),3
  7013  06DF  18BB               	btfsc	_RF1^(0+128),1
  7014  06E0  2EEF               	goto	l7265
  7015                           
  7016                           ;RF_Control_B1.c: 148: RF1.RxStatus = 1;
  7017  06E1  15BB               	bsf	_RF1^(0+128),3
  7018                           
  7019                           ;RF_Control_B1.c: 149: RF1.Correction = 1;
  7020  06E2  16BC               	bsf	(_RF1^(0+128)+1),5
  7021                           
  7022                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x36);
  7023  06E3  3036               	movlw	54
  7024  06E4  319E  266C  3186   	fcall	_CC2500_WriteCommand
  7025                           
  7026                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x3A);
  7027  06E7  303A               	movlw	58
  7028  06E8  319E  266C  3186   	fcall	_CC2500_WriteCommand
  7029                           
  7030                           ;RF_Control_B1.c: 154: CC2500_WriteCommand(0x34);
  7031  06EB  3034               	movlw	52
  7032  06EC  319E  266C  3186   	fcall	_CC2500_WriteCommand
  7033  06EF                     l7265:	
  7034                           
  7035                           ;RF_Control_B1.c: 155: }
  7036                           ;RF_Control_B1.c: 157: }
  7037                           ;RF_Control_B1.c: 158: }
  7038                           ;RF_Control_B1.c: 159: }
  7039                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7040  06EF  0021               	movlb	1	; select bank1
  7041  06F0  1DBB               	btfss	_RF1^(0+128),3
  7042  06F1  0008               	return
  7043                           
  7044                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7045  06F2  3001               	movlw	1
  7046  06F3  07C0               	addwf	(_RF1^(0+128)+5),f
  7047  06F4  3000               	movlw	0
  7048  06F5  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7049                           
  7050                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7051  06F6  3005               	movlw	5
  7052  06F7  3EBB               	addlw	_RF1& (0+255)
  7053  06F8  0086               	movwf	6
  7054  06F9  0187               	clrf	7
  7055  06FA  3F40               	moviw [0]fsr1
  7056  06FB  3A64               	xorlw	100
  7057  06FC  1D03               	skipz
  7058  06FD  2F00               	goto	u6885
  7059  06FE  3F41               	moviw [1]fsr1
  7060  06FF  3A00               	xorlw	0
  7061  0700                     u6885:	
  7062  0700  1D03               	skipz
  7063  0701  0008               	return
  7064                           
  7065                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7066  0702  01C0               	clrf	(_RF1^(0+128)+5)
  7067  0703  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7068                           
  7069                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7070  0704  01BF               	clrf	(_RF1^(0+128)+4)
  7071                           
  7072                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7073  0705  3000               	movlw	0
  7074  0706  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7075  0707  300B               	movlw	11
  7076  0708  1903               	skipnz
  7077  0709  0242               	subwf	(_RF1^(0+128)+7),w
  7078  070A  1C03               	skipc
  7079  070B  0008               	return
  7080                           
  7081                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7082  070C  300A               	movlw	10
  7083  070D  02C2               	subwf	(_RF1^(0+128)+7),f
  7084  070E  3000               	movlw	0
  7085  070F  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7086                           
  7087                           ;RF_Control_B1.c: 167: }
  7088                           ;RF_Control_B1.c: 168: }
  7089                           ;RF_Control_B1.c: 169: }
  7090                           ;RF_Control_B1.c: 177: }
  7091                           ;RF_Control_B1.c: 178: }
  7092                           ;RF_Control_B1.c: 185: } else {
  7093  0710  0008               	return
  7094  0711                     l2003:	
  7095                           
  7096                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7097  0711  1C20               	btfss	_myMain^(0+128),0
  7098  0712  0008               	return
  7099                           
  7100                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7101  0713  143B               	bsf	_RF1^(0+128),0
  7102  0714  0008               	return
  7103  0715                     __end_of_setRF_Main:	
  7104                           
  7105                           	psect	text25
  7106  0D6E                     __ptext25:	
  7107 ;; *************** function _getRxData *****************
  7108 ;; Defined at:
  7109 ;;		line 281 in file "../src/RF_Control_B1.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  error           1   76[BANK0 ] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;		None               void
  7116 ;; Registers used:
  7117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;Total ram usage:        2 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:   12
  7130 ;; This function calls:
  7131 ;;		_getMain_All_Error_Status
  7132 ;;		_setControl_Lights_Table
  7133 ;;		_setLog_Code
  7134 ;;		_setTxData
  7135 ;; This function is called by:
  7136 ;;		_setRF_Main
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function _getRxData
  7142  0D6E                     _getRxData:	
  7143                           
  7144                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7148  0D6E  3000               	movlw	0
  7149  0D6F  3191  21D0  318D   	fcall	_getMain_All_Error_Status
  7150  0D72  0020               	movlb	0	; select bank0
  7151  0D73  00EB               	movwf	??_getRxData
  7152  0D74  086B               	movf	??_getRxData,w
  7153  0D75  00EC               	movwf	getRxData@error
  7154                           
  7155                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7156  0D76  0023               	movlb	3	; select bank3
  7157  0D77  0820               	movf	_RF_Data^(0+384),w
  7158  0D78  3AAA               	xorlw	170
  7159  0D79  1D03               	skipz
  7160  0D7A  2D91               	goto	l6671
  7161  0D7B  0821               	movf	(_RF_Data^(0+384)+1),w
  7162  0D7C  3A01               	xorlw	1
  7163  0D7D  1D03               	skipz
  7164  0D7E  2D91               	goto	l6671
  7165                           
  7166                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7167  0D7F  3055               	movlw	85
  7168  0D80  0020               	movlb	0	; select bank0
  7169  0D81  00EB               	movwf	??_getRxData
  7170  0D82  086E               	movf	_product,w
  7171  0D83  3E02               	addlw	2
  7172  0D84  0086               	movwf	6
  7173  0D85  3002               	movlw	2	; select bank4/5
  7174  0D86  0087               	movwf	7
  7175  0D87  086B               	movf	??_getRxData,w
  7176  0D88  0081               	movwf	1
  7177                           
  7178                           ;RF_Control_B1.c: 286: setTxData();
  7179  0D89  3187  2715         	fcall	_setTxData
  7180                           
  7181                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7182  0D8B  300A               	movlw	10
  7183  0D8C  0021               	movlb	1	; select bank1
  7184  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7185  0D8E  3000               	movlw	0
  7186  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7187                           
  7188                           ;RF_Control_B1.c: 293: } else {
  7189  0D90  0008               	return
  7190  0D91                     l6671:	
  7191                           
  7192                           ;RF_Control_B1.c: 295: if (error == 0) {
  7193  0D91  0020               	movlb	0	; select bank0
  7194  0D92  08EC               	movf	getRxData@error,f
  7195  0D93  1D03               	skipz
  7196  0D94  0008               	return
  7197                           
  7198                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7199  0D95  0021               	movlb	1	; select bank1
  7200  0D96  1F3B               	btfss	_RF1^(0+128),6
  7201  0D97  2DA8               	goto	l6683
  7202                           
  7203                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7204  0D98  0023               	movlb	3	; select bank3
  7205  0D99  08A0               	movf	_RF_Data^(0+384),f
  7206  0D9A  1D03               	skipz
  7207  0D9B  2DA5               	goto	l2054
  7208  0D9C  0821               	movf	(_RF_Data^(0+384)+1),w
  7209  0D9D  3A64               	xorlw	100
  7210  0D9E  1D03               	skipz
  7211  0D9F  2DA5               	goto	l2054
  7212                           
  7213                           ;RF_Control_B1.c: 298: setLog_Code();
  7214  0DA0  3192  22D7         	fcall	_setLog_Code
  7215                           
  7216                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7217  0DA2  0021               	movlb	1	; select bank1
  7218  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7219                           
  7220                           ;RF_Control_B1.c: 300: } else {
  7221  0DA4  0008               	return
  7222  0DA5                     l2054:	
  7223                           
  7224                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7225  0DA5  0021               	movlb	1	; select bank1
  7226  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7227                           
  7228                           ;RF_Control_B1.c: 302: }
  7229                           ;RF_Control_B1.c: 303: } else {
  7230  0DA7  0008               	return
  7231  0DA8                     l6683:	
  7232                           
  7233                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7234  0DA8  0023               	movlb	3	; select bank3
  7235  0DA9  08A0               	movf	_RF_Data^(0+384),f
  7236  0DAA  1D03               	skipz
  7237  0DAB  2DE6               	goto	l6705
  7238  0DAC  0821               	movf	(_RF_Data^(0+384)+1),w
  7239  0DAD  3A02               	xorlw	2
  7240  0DAE  1D03               	skipz
  7241  0DAF  2DE6               	goto	l6705
  7242                           
  7243                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7244  0DB0  082C               	movf	(_RF_Data^(0+384)+12),w
  7245  0DB1  3AFF               	xorlw	255
  7246  0DB2  1D03               	skipz
  7247  0DB3  2DC0               	goto	l6695
  7248  0DB4  082D               	movf	(_RF_Data^(0+384)+13),w
  7249  0DB5  3AFF               	xorlw	255
  7250  0DB6  1D03               	skipz
  7251  0DB7  2DC0               	goto	l6695
  7252  0DB8  082E               	movf	(_RF_Data^(0+384)+14),w
  7253  0DB9  3AFF               	xorlw	255
  7254  0DBA  1D03               	skipz
  7255  0DBB  2DC0               	goto	l6695
  7256                           
  7257                           ;RF_Control_B1.c: 307: __nop();
  7258  0DBC  0000               	nop
  7259                           
  7260                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7261  0DBD  0021               	movlb	1	; select bank1
  7262  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7263                           
  7264                           ;RF_Control_B1.c: 309: } else {
  7265  0DBF  0008               	return
  7266  0DC0                     l6695:	
  7267                           
  7268                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7269  0DC0  0020               	movlb	0	; select bank0
  7270  0DC1  086E               	movf	_product,w
  7271  0DC2  3E0C               	addlw	12
  7272  0DC3  0086               	movwf	6
  7273  0DC4  3002               	movlw	2	; select bank4/5
  7274  0DC5  0087               	movwf	7
  7275  0DC6  0023               	movlb	3	; select bank3
  7276  0DC7  082C               	movf	(_RF_Data^(0+384)+12),w
  7277  0DC8  0601               	xorwf	1,w
  7278  0DC9  1D03               	skipz
  7279  0DCA  0008               	return
  7280  0DCB  0020               	movlb	0	; select bank0
  7281  0DCC  086E               	movf	_product,w
  7282  0DCD  3E0D               	addlw	13
  7283  0DCE  0086               	movwf	6
  7284  0DCF  3002               	movlw	2	; select bank4/5
  7285  0DD0  0087               	movwf	7
  7286  0DD1  0023               	movlb	3	; select bank3
  7287  0DD2  082D               	movf	(_RF_Data^(0+384)+13),w
  7288  0DD3  0601               	xorwf	1,w
  7289  0DD4  1D03               	skipz
  7290  0DD5  0008               	return
  7291  0DD6  0020               	movlb	0	; select bank0
  7292  0DD7  086E               	movf	_product,w
  7293  0DD8  3E0E               	addlw	14
  7294  0DD9  0086               	movwf	6
  7295  0DDA  3002               	movlw	2	; select bank4/5
  7296  0DDB  0087               	movwf	7
  7297  0DDC  0023               	movlb	3	; select bank3
  7298  0DDD  082E               	movf	(_RF_Data^(0+384)+14),w
  7299  0DDE  0601               	xorwf	1,w
  7300  0DDF  1D03               	skipz
  7301  0DE0  0008               	return
  7302                           
  7303                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7304  0DE1  3189  2121         	fcall	_setControl_Lights_Table
  7305                           
  7306                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7307  0DE3  0021               	movlb	1	; select bank1
  7308  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7309                           
  7310                           ;RF_Control_B1.c: 313: }
  7311                           ;RF_Control_B1.c: 314: }
  7312                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7313  0DE5  0008               	return
  7314  0DE6                     l6705:	
  7315  0DE6  0023               	movlb	3	; select bank3
  7316  0DE7  0820               	movf	_RF_Data^(0+384),w
  7317  0DE8  3AFF               	xorlw	255
  7318  0DE9  1D03               	skipz
  7319  0DEA  2DF1               	goto	l6711
  7320  0DEB  0821               	movf	(_RF_Data^(0+384)+1),w
  7321  0DEC  3A02               	xorlw	2
  7322  0DED  1D03               	skipz
  7323  0DEE  2DF1               	goto	l6711
  7324                           
  7325                           ;RF_Control_B1.c: 316: __nop();
  7326  0DEF  0000               	nop
  7327                           
  7328                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7329  0DF0  0008               	return
  7330  0DF1                     l6711:	
  7331  0DF1  0023               	movlb	3	; select bank3
  7332  0DF2  08A0               	movf	_RF_Data^(0+384),f
  7333  0DF3  1D03               	skipz
  7334  0DF4  2DFB               	goto	l2064
  7335  0DF5  0821               	movf	(_RF_Data^(0+384)+1),w
  7336  0DF6  3A65               	xorlw	101
  7337  0DF7  1D03               	skipz
  7338  0DF8  2DFB               	goto	l2064
  7339                           
  7340                           ;RF_Control_B1.c: 318: __nop();
  7341  0DF9  0000               	nop
  7342                           
  7343                           ;RF_Control_B1.c: 319: } else {
  7344  0DFA  0008               	return
  7345  0DFB                     l2064:	
  7346                           
  7347                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7348  0DFB  0021               	movlb	1	; select bank1
  7349  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7350                           
  7351                           ;RF_Control_B1.c: 328: ;
  7352                           
  7353                           ;RF_Control_B1.c: 321: }
  7354                           ;RF_Control_B1.c: 326: }
  7355                           ;RF_Control_B1.c: 327: } else {
  7356  0DFD  0008               	return
  7357  0DFE                     __end_of_getRxData:	
  7358                           
  7359                           	psect	text26
  7360  12D7                     __ptext26:	
  7361 ;; *************** function _setLog_Code *****************
  7362 ;; Defined at:
  7363 ;;		line 334 in file "../src/RF_Control_B1.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;		None               void
  7370 ;; Registers used:
  7371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;Total ram usage:        1 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    7
  7384 ;; This function calls:
  7385 ;;		_setBuz
  7386 ;;		_setMemory_LoopSave
  7387 ;;		_setMemory_Modify
  7388 ;; This function is called by:
  7389 ;;		_getRxData
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _setLog_Code
  7395  12D7                     _setLog_Code:	
  7396                           
  7397                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7401  12D7  0021               	movlb	1	; select bank1
  7402  12D8  133B               	bcf	_RF1^(0+128),6
  7403                           
  7404                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7405  12D9  0023               	movlb	3	; select bank3
  7406  12DA  082C               	movf	(_RF_Data^(0+384)+12),w
  7407  12DB  0020               	movlb	0	; select bank0
  7408  12DC  00AD               	movwf	??_setLog_Code
  7409  12DD  086E               	movf	_product,w
  7410  12DE  3E0C               	addlw	12
  7411  12DF  0086               	movwf	6
  7412  12E0  3002               	movlw	2	; select bank4/5
  7413  12E1  0087               	movwf	7
  7414  12E2  082D               	movf	??_setLog_Code,w
  7415  12E3  0081               	movwf	1
  7416                           
  7417                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7418  12E4  0023               	movlb	3	; select bank3
  7419  12E5  082D               	movf	(_RF_Data^(0+384)+13),w
  7420  12E6  0020               	movlb	0	; select bank0
  7421  12E7  00AD               	movwf	??_setLog_Code
  7422  12E8  086E               	movf	_product,w
  7423  12E9  3E0D               	addlw	13
  7424  12EA  0086               	movwf	6
  7425  12EB  3002               	movlw	2	; select bank4/5
  7426  12EC  0087               	movwf	7
  7427  12ED  082D               	movf	??_setLog_Code,w
  7428  12EE  0081               	movwf	1
  7429                           
  7430                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7431  12EF  0023               	movlb	3	; select bank3
  7432  12F0  082E               	movf	(_RF_Data^(0+384)+14),w
  7433  12F1  0020               	movlb	0	; select bank0
  7434  12F2  00AD               	movwf	??_setLog_Code
  7435  12F3  086E               	movf	_product,w
  7436  12F4  3E0E               	addlw	14
  7437  12F5  0086               	movwf	6
  7438  12F6  3002               	movlw	2	; select bank4/5
  7439  12F7  0087               	movwf	7
  7440  12F8  082D               	movf	??_setLog_Code,w
  7441  12F9  0081               	movwf	1
  7442                           
  7443                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7444  12FA  3064               	movlw	100
  7445  12FB  00A9               	movwf	setBuz@time
  7446  12FC  3000               	movlw	0
  7447  12FD  00AA               	movwf	setBuz@time+1
  7448  12FE  3001               	movlw	1
  7449  12FF  3196  26F2  3192   	fcall	_setBuz
  7450                           
  7451                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7452  1302  0021               	movlb	1	; select bank1
  7453  1303  1EA0               	btfss	_myMain^(0+128),5
  7454  1304  2B09               	goto	l2070
  7455                           
  7456                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7457  1305  3001               	movlw	1
  7458  1306  319D  25D7  3192   	fcall	_setMemory_LoopSave
  7459  1309                     l2070:	
  7460                           
  7461                           ;RF_Control_B1.c: 342: }
  7462                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7463  1309  3001               	movlw	1
  7464  130A  319D  25C4         	fcall	_setMemory_Modify
  7465  130C  0008               	return
  7466  130D                     __end_of_setLog_Code:	
  7467                           
  7468                           	psect	text27
  7469  1DD7                     __ptext27:	
  7470 ;; *************** function _setMemory_LoopSave *****************
  7471 ;; Defined at:
  7472 ;;		line 1031 in file "../src/MCU_B1.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  command         1    wreg     unsigned char 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  command         1    1[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;		None               void
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;Total ram usage:        2 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    5
  7493 ;; This function calls:
  7494 ;;		Nothing
  7495 ;; This function is called by:
  7496 ;;		_setLog_Code
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _setMemory_LoopSave
  7502  1DD7                     _setMemory_LoopSave:	
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7506                           ;setMemory_LoopSave@command stored from wreg
  7507  1DD7  0020               	movlb	0	; select bank0
  7508  1DD8  00A1               	movwf	setMemory_LoopSave@command
  7509                           
  7510                           ;MCU_B1.c: 1032: Memory.LoopSave = command == 1 ? 1 : 0;
  7511  1DD9  0821               	movf	setMemory_LoopSave@command,w
  7512  1DDA  3A01               	xorlw	1
  7513  1DDB  3000               	movlw	0
  7514  1DDC  1903               	skipnz
  7515  1DDD  3001               	movlw	1
  7516  1DDE  00A0               	movwf	??_setMemory_LoopSave
  7517  1DDF  0DA0               	rlf	??_setMemory_LoopSave,f
  7518  1DE0  0DA0               	rlf	??_setMemory_LoopSave,f
  7519  1DE1  0023               	movlb	3	; select bank3
  7520  1DE2  0862               	movf	(_Memory^(0+384)+36),w
  7521  1DE3  0020               	movlb	0	; select bank0
  7522  1DE4  0620               	xorwf	??_setMemory_LoopSave,w
  7523  1DE5  39FB               	andlw	-5
  7524  1DE6  0620               	xorwf	??_setMemory_LoopSave,w
  7525  1DE7  0023               	movlb	3	; select bank3
  7526  1DE8  00E2               	movwf	(_Memory^(0+384)+36)
  7527  1DE9  0008               	return
  7528  1DEA                     __end_of_setMemory_LoopSave:	
  7529                           
  7530                           	psect	text28
  7531  0921                     __ptext28:	
  7532 ;; *************** function _setControl_Lights_Table *****************
  7533 ;; Defined at:
  7534 ;;		line 347 in file "../src/RF_Control_B1.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;		None
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;		None               void
  7541 ;; Registers used:
  7542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;Total ram usage:        0 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:   11
  7555 ;; This function calls:
  7556 ;;		_setBuz
  7557 ;;		_setDimmerLights_ErrorClose
  7558 ;;		_setRFSW_AdjControl
  7559 ;;		_setRFSW_Control
  7560 ;;		_setTxData
  7561 ;; This function is called by:
  7562 ;;		_getRxData
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           
  7567                           ;psect for function _setControl_Lights_Table
  7568  0921                     _setControl_Lights_Table:	
  7569                           
  7570                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7571                           
  7572                           ;incstack = 0
  7573                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7574  0921  2965               	goto	l6293
  7575  0922                     l6271:	
  7576                           ;RF_Control_B1.c: 349: case 0x00:
  7577                           
  7578                           
  7579                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7580  0922  30FF               	movlw	255
  7581  0923  3196  2642  3189   	fcall	_setDimmerLights_ErrorClose
  7582                           
  7583                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7584  0926  0020               	movlb	0	; select bank0
  7585  0927  086E               	movf	_product,w
  7586  0928  3E09               	addlw	9
  7587  0929  0086               	movwf	6
  7588  092A  3002               	movlw	2	; select bank4/5
  7589  092B  0087               	movwf	7
  7590  092C  0181               	clrf	1
  7591                           
  7592                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7593  092D  086E               	movf	_product,w
  7594  092E  3E0B               	addlw	11
  7595  092F  0086               	movwf	6
  7596  0930  3002               	movlw	2	; select bank4/5
  7597  0931  0087               	movwf	7
  7598  0932  0181               	clrf	1
  7599                           
  7600                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7601  0933  086E               	movf	_product,w
  7602  0934  3E0F               	addlw	15
  7603  0935  0086               	movwf	6
  7604  0936  3002               	movlw	2	; select bank4/5
  7605  0937  0087               	movwf	7
  7606  0938  0181               	clrf	1
  7607                           
  7608                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7609  0939  086E               	movf	_product,w
  7610  093A  3E11               	addlw	17
  7611  093B  0086               	movwf	6
  7612  093C  3002               	movlw	2	; select bank4/5
  7613  093D  0087               	movwf	7
  7614  093E  0181               	clrf	1
  7615                           
  7616                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7617  093F  3064               	movlw	100
  7618  0940  00A9               	movwf	setBuz@time
  7619  0941  3000               	movlw	0
  7620  0942  00AA               	movwf	setBuz@time+1
  7621  0943  3001               	movlw	1
  7622  0944  3196  26F2         	fcall	_setBuz
  7623                           
  7624                           ;RF_Control_B1.c: 359: break;
  7625  0946  0008               	return
  7626  0947                     l6283:	
  7627                           ;RF_Control_B1.c: 360: case 0x20:
  7628                           
  7629                           
  7630                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7631  0947  0020               	movlb	0	; select bank0
  7632  0948  086E               	movf	_product,w
  7633  0949  3E09               	addlw	9
  7634  094A  0086               	movwf	6
  7635  094B  3002               	movlw	2	; select bank4/5
  7636  094C  0087               	movwf	7
  7637  094D  0181               	clrf	1
  7638                           
  7639                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7640  094E  086E               	movf	_product,w
  7641  094F  3E0B               	addlw	11
  7642  0950  0086               	movwf	6
  7643  0951  3002               	movlw	2	; select bank4/5
  7644  0952  0087               	movwf	7
  7645  0953  0181               	clrf	1
  7646                           
  7647                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7648  0954  086E               	movf	_product,w
  7649  0955  3E11               	addlw	17
  7650  0956  0086               	movwf	6
  7651  0957  3002               	movlw	2	; select bank4/5
  7652  0958  0087               	movwf	7
  7653  0959  0181               	clrf	1
  7654                           
  7655                           ;RF_Control_B1.c: 364: setTxData();
  7656  095A  3187  2715         	fcall	_setTxData
  7657                           
  7658                           ;RF_Control_B1.c: 365: break;
  7659  095C  0008               	return
  7660  095D                     l6287:	
  7661                           ;RF_Control_B1.c: 366: case 0x01:
  7662                           
  7663                           
  7664                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7665  095D  3001               	movlw	1
  7666  095E  3195  259F         	fcall	_setRFSW_Control
  7667                           
  7668                           ;RF_Control_B1.c: 380: break;
  7669                           
  7670                           ;RF_Control_B1.c: 376: case 0x03:
  7671                           
  7672                           ;RF_Control_B1.c: 375: break;
  7673                           
  7674                           ;RF_Control_B1.c: 371: case 0x02:
  7675                           
  7676                           ;RF_Control_B1.c: 370: break;
  7677  0960  0008               	return
  7678  0961                     l6289:	
  7679                           ;RF_Control_B1.c: 381: case 0x11:
  7680                           
  7681                           
  7682                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7683  0961  3001               	movlw	1
  7684  0962  3193  23F0         	fcall	_setRFSW_AdjControl
  7685                           
  7686                           ;RF_Control_B1.c: 402: }
  7687                           
  7688                           ;RF_Control_B1.c: 401: break;
  7689                           
  7690                           ;RF_Control_B1.c: 395: case 0x31:
  7691                           
  7692                           ;RF_Control_B1.c: 394: break;
  7693                           
  7694                           ;RF_Control_B1.c: 388: case 0x21:
  7695                           
  7696                           ;RF_Control_B1.c: 387: break;
  7697  0964  0008               	return
  7698  0965                     l6293:	
  7699  0965  0023               	movlb	3	; select bank3
  7700  0966  082F               	movf	(_RF_Data^(0+384)+15),w
  7701                           
  7702                           ; Switch size 1, requested type "space"
  7703                           ; Number of cases is 8, Range of values is 0 to 49
  7704                           ; switch strategies available:
  7705                           ; Name         Instructions Cycles
  7706                           ; simple_byte           25    13 (average)
  7707                           ; direct_byte          106     6 (fixed)
  7708                           ; jumptable            260     6 (fixed)
  7709                           ;	Chosen strategy is simple_byte
  7710  0967  3A00               	xorlw	0	; case 0
  7711  0968  1903               	skipnz
  7712  0969  2922               	goto	l6271
  7713  096A  3A01               	xorlw	1	; case 1
  7714  096B  1903               	skipnz
  7715  096C  295D               	goto	l6287
  7716  096D  3A03               	xorlw	3	; case 2
  7717  096E  1903               	skipnz
  7718  096F  2980               	goto	l2084
  7719  0970  3A01               	xorlw	1	; case 3
  7720  0971  1903               	skipnz
  7721  0972  2980               	goto	l2084
  7722  0973  3A12               	xorlw	18	; case 17
  7723  0974  1903               	skipnz
  7724  0975  2961               	goto	l6289
  7725  0976  3A31               	xorlw	49	; case 32
  7726  0977  1903               	skipnz
  7727  0978  2947               	goto	l6283
  7728  0979  3A01               	xorlw	1	; case 33
  7729  097A  1903               	skipnz
  7730  097B  2980               	goto	l2084
  7731  097C  3A10               	xorlw	16	; case 49
  7732  097D  1903               	skipnz
  7733  097E  2980               	goto	l2084
  7734  097F  2980               	goto	l2084
  7735  0980                     l2084:	
  7736  0980  0008               	return
  7737  0981                     __end_of_setControl_Lights_Table:	
  7738                           
  7739                           	psect	text29
  7740  159F                     __ptext29:	
  7741 ;; *************** function _setRFSW_Control *****************
  7742 ;; Defined at:
  7743 ;;		line 429 in file "../src/RF_Control_B1.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  sw              1    wreg     unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  sw              1   19[BANK0 ] unsigned char 
  7748 ;;  status          1   18[BANK0 ] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;		None               void
  7751 ;; Registers used:
  7752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;Total ram usage:        3 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    9
  7765 ;; This function calls:
  7766 ;;		_getDelayOff_GO
  7767 ;;		_getDimmerLights_Status
  7768 ;;		_setBuz
  7769 ;;		_setDelayOff_GO
  7770 ;;		_setDimmerLights_SwOff
  7771 ;;		_setDimmerLights_SwOn
  7772 ;;		_setRF_DimmerLights
  7773 ;;		_setTxData
  7774 ;; This function is called by:
  7775 ;;		_setControl_Lights_Table
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _setRFSW_Control
  7781  159F                     _setRFSW_Control:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7785                           ;setRFSW_Control@sw stored from wreg
  7786  159F  0020               	movlb	0	; select bank0
  7787  15A0  00B3               	movwf	setRFSW_Control@sw
  7788                           
  7789                           ;RF_Control_B1.c: 430: char status = 0;
  7790  15A1  01B2               	clrf	setRFSW_Control@status
  7791                           
  7792                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7793  15A2  0023               	movlb	3	; select bank3
  7794  15A3  0830               	movf	(_RF_Data^(0+384)+16),w
  7795  15A4  3A80               	xorlw	128
  7796  15A5  1D03               	skipz
  7797  15A6  2DD2               	goto	l6125
  7798                           
  7799                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7800  15A7  0020               	movlb	0	; select bank0
  7801  15A8  01AA               	clrf	setDelayOff_GO@command
  7802  15A9  0AAA               	incf	setDelayOff_GO@command,f
  7803  15AA  0023               	movlb	3	; select bank3
  7804  15AB  0831               	movf	(_RF_Data^(0+384)+17),w
  7805  15AC  0020               	movlb	0	; select bank0
  7806  15AD  00B1               	movwf	??_setRFSW_Control
  7807  15AE  0831               	movf	??_setRFSW_Control,w
  7808  15AF  00AB               	movwf	setDelayOff_GO@value
  7809  15B0  0833               	movf	setRFSW_Control@sw,w
  7810  15B1  3188  2067  3195   	fcall	_setDelayOff_GO
  7811                           
  7812                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7813  15B4  0020               	movlb	0	; select bank0
  7814  15B5  0833               	movf	setRFSW_Control@sw,w
  7815  15B6  319D  250A  3195   	fcall	_getDimmerLights_Status
  7816  15B9  3A01               	xorlw	1
  7817  15BA  1D03               	skipz
  7818  15BB  2DE1               	goto	l6129
  7819                           
  7820                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7821  15BC  3064               	movlw	100
  7822  15BD  0020               	movlb	0	; select bank0
  7823  15BE  00A9               	movwf	setBuz@time
  7824  15BF  3000               	movlw	0
  7825  15C0  00AA               	movwf	setBuz@time+1
  7826  15C1  3001               	movlw	1
  7827  15C2  3196  26F2  3195   	fcall	_setBuz
  7828                           
  7829                           ;RF_Control_B1.c: 437: status = 1;
  7830  15C5  0020               	movlb	0	; select bank0
  7831  15C6  01B2               	clrf	setRFSW_Control@status
  7832  15C7  0AB2               	incf	setRFSW_Control@status,f
  7833                           
  7834                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7835  15C8  01A0               	clrf	setRF_DimmerLights@on
  7836  15C9  0AA0               	incf	setRF_DimmerLights@on,f
  7837  15CA  0833               	movf	setRFSW_Control@sw,w
  7838  15CB  3197  27A4  3195   	fcall	_setRF_DimmerLights
  7839                           
  7840                           ;RF_Control_B1.c: 439: setTxData();
  7841  15CE  3187  2715  3195   	fcall	_setTxData
  7842                           
  7843                           ;RF_Control_B1.c: 441: }
  7844                           ;RF_Control_B1.c: 442: } else {
  7845  15D1  2DE1               	goto	l6129
  7846  15D2                     l6125:	
  7847                           
  7848                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7849  15D2  0020               	movlb	0	; select bank0
  7850  15D3  0833               	movf	setRFSW_Control@sw,w
  7851  15D4  319D  251A  3195   	fcall	_getDelayOff_GO
  7852  15D7  3A01               	xorlw	1
  7853  15D8  1D03               	skipz
  7854  15D9  2DE1               	goto	l6129
  7855                           
  7856                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7857  15DA  0020               	movlb	0	; select bank0
  7858  15DB  01AA               	clrf	setDelayOff_GO@command
  7859  15DC  01AB               	clrf	setDelayOff_GO@value
  7860  15DD  0833               	movf	setRFSW_Control@sw,w
  7861  15DE  3188  2067  3195   	fcall	_setDelayOff_GO
  7862  15E1                     l6129:	
  7863                           
  7864                           ;RF_Control_B1.c: 446: }
  7865                           ;RF_Control_B1.c: 448: }
  7866                           ;RF_Control_B1.c: 449: if (status == 0) {
  7867  15E1  0020               	movlb	0	; select bank0
  7868  15E2  08B2               	movf	setRFSW_Control@status,f
  7869  15E3  1D03               	skipz
  7870  15E4  0008               	return
  7871                           
  7872                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7873  15E5  0833               	movf	setRFSW_Control@sw,w
  7874  15E6  3193  23B3  3195   	fcall	_setDimmerLights_SwOn
  7875                           
  7876                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7877  15E9  0020               	movlb	0	; select bank0
  7878  15EA  0833               	movf	setRFSW_Control@sw,w
  7879  15EB  3194  2473         	fcall	_setDimmerLights_SwOff
  7880  15ED  0008               	return
  7881  15EE                     __end_of_setRFSW_Control:	
  7882                           
  7883                           	psect	text30
  7884  13B3                     __ptext30:	
  7885 ;; *************** function _setDimmerLights_SwOn *****************
  7886 ;; Defined at:
  7887 ;;		line 505 in file "../src/Dimmer_B1.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  sw              1    wreg     unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  sw              1   15[BANK0 ] unsigned char 
  7892 ;;  idle            1   14[BANK0 ] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;		None               void
  7895 ;; Registers used:
  7896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;Total ram usage:        3 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    7
  7909 ;; This function calls:
  7910 ;;		_DimmerLightsPointSelect
  7911 ;;		_getAll_DimmerLights_AdjGO
  7912 ;;		_setBuz
  7913 ;;		_setDimmerLights_Trigger
  7914 ;; This function is called by:
  7915 ;;		_setRFSW_Control
  7916 ;;		_setSw_Main
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           
  7921                           ;psect for function _setDimmerLights_SwOn
  7922  13B3                     _setDimmerLights_SwOn:	
  7923                           
  7924                           ;incstack = 0
  7925                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7926                           ;setDimmerLights_SwOn@sw stored from wreg
  7927  13B3  0020               	movlb	0	; select bank0
  7928  13B4  00AF               	movwf	setDimmerLights_SwOn@sw
  7929                           
  7930                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7931  13B5  082F               	movf	setDimmerLights_SwOn@sw,w
  7932  13B6  319C  2443  3193   	fcall	_DimmerLightsPointSelect
  7933                           
  7934                           ;Dimmer_B1.c: 507: char idle = 0;
  7935  13B9  0020               	movlb	0	; select bank0
  7936  13BA  01AE               	clrf	setDimmerLights_SwOn@idle
  7937                           
  7938                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7939  13BB  319C  2423  3193   	fcall	_getAll_DimmerLights_AdjGO
  7940  13BE  3A01               	xorlw	1
  7941  13BF  3000               	movlw	0
  7942  13C0  1903               	skipnz
  7943  13C1  3001               	movlw	1
  7944  13C2  0020               	movlb	0	; select bank0
  7945  13C3  00AD               	movwf	??_setDimmerLights_SwOn
  7946  13C4  082D               	movf	??_setDimmerLights_SwOn,w
  7947  13C5  00AE               	movwf	setDimmerLights_SwOn@idle
  7948                           
  7949                           ;Dimmer_B1.c: 511: if (idle == 0) {
  7950  13C6  08AE               	movf	setDimmerLights_SwOn@idle,f
  7951  13C7  1D03               	skipz
  7952  13C8  0008               	return
  7953                           
  7954                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  7955  13C9  086F               	movf	_DimmerLights,w
  7956  13CA  3E09               	addlw	9
  7957  13CB  0086               	movwf	6
  7958  13CC  3001               	movlw	1	; select bank2/3
  7959  13CD  0087               	movwf	7
  7960  13CE  1701               	bsf	1,6
  7961                           
  7962                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  7963  13CF  3064               	movlw	100
  7964  13D0  00A9               	movwf	setBuz@time
  7965  13D1  3000               	movlw	0
  7966  13D2  00AA               	movwf	setBuz@time+1
  7967  13D3  3001               	movlw	1
  7968  13D4  3196  26F2  3193   	fcall	_setBuz
  7969                           
  7970                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  7971  13D7  0020               	movlb	0	; select bank0
  7972  13D8  086F               	movf	_DimmerLights,w
  7973  13D9  0086               	movwf	6
  7974  13DA  3001               	movlw	1	; select bank2/3
  7975  13DB  0087               	movwf	7
  7976  13DC  1A81               	btfsc	1,5
  7977  13DD  2BE9               	goto	l5937
  7978                           
  7979                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  7980  13DE  086F               	movf	_DimmerLights,w
  7981  13DF  0086               	movwf	6
  7982  13E0  3001               	movlw	1	; select bank2/3
  7983  13E1  0087               	movwf	7
  7984  13E2  1681               	bsf	1,5
  7985                           
  7986                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  7987  13E3  01A2               	clrf	setDimmerLights_Trigger@command
  7988  13E4  0AA2               	incf	setDimmerLights_Trigger@command,f
  7989  13E5  082F               	movf	setDimmerLights_SwOn@sw,w
  7990  13E6  319E  26BB         	fcall	_setDimmerLights_Trigger
  7991                           
  7992                           ;Dimmer_B1.c: 517: } else {
  7993  13E8  0008               	return
  7994  13E9                     l5937:	
  7995                           
  7996                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  7997  13E9  0020               	movlb	0	; select bank0
  7998  13EA  086F               	movf	_DimmerLights,w
  7999  13EB  0086               	movwf	6
  8000  13EC  3001               	movlw	1	; select bank2/3
  8001  13ED  0087               	movwf	7
  8002  13EE  1281               	bcf	1,5
  8003  13EF  0008               	return
  8004  13F0                     __end_of_setDimmerLights_SwOn:	
  8005                           
  8006                           	psect	text31
  8007  13F0                     __ptext31:	
  8008 ;; *************** function _setRFSW_AdjControl *****************
  8009 ;; Defined at:
  8010 ;;		line 458 in file "../src/RF_Control_B1.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  sw              1    wreg     unsigned char 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  sw              1   74[BANK0 ] unsigned char 
  8015 ;;  status          1   73[BANK0 ] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;		None               void
  8018 ;; Registers used:
  8019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;Total ram usage:        4 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:   10
  8032 ;; This function calls:
  8033 ;;		_getDimmerLights_Status
  8034 ;;		_setMemory_Modify
  8035 ;;		_setRF_DimmerValue
  8036 ;;		_setTxData
  8037 ;; This function is called by:
  8038 ;;		_setControl_Lights_Table
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _setRFSW_AdjControl
  8044  13F0                     _setRFSW_AdjControl:	
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8048                           ;setRFSW_AdjControl@sw stored from wreg
  8049  13F0  0020               	movlb	0	; select bank0
  8050  13F1  00EA               	movwf	setRFSW_AdjControl@sw
  8051                           
  8052                           ;RF_Control_B1.c: 459: char status = 0;
  8053  13F2  01E9               	clrf	setRFSW_AdjControl@status
  8054                           
  8055                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8056  13F3  086A               	movf	setRFSW_AdjControl@sw,w
  8057  13F4  319D  250A  3193   	fcall	_getDimmerLights_Status
  8058  13F7  0020               	movlb	0	; select bank0
  8059  13F8  00E7               	movwf	??_setRFSW_AdjControl
  8060  13F9  0867               	movf	??_setRFSW_AdjControl,w
  8061  13FA  00E9               	movwf	setRFSW_AdjControl@status
  8062                           
  8063                           ;RF_Control_B1.c: 464: if (status == 1) {
  8064  13FB  0869               	movf	setRFSW_AdjControl@status,w
  8065  13FC  3A01               	xorlw	1
  8066  13FD  1D03               	skipz
  8067  13FE  2C09               	goto	l6143
  8068                           
  8069                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8070  13FF  3001               	movlw	1
  8071  1400  319D  25C4  3193   	fcall	_setMemory_Modify
  8072                           
  8073                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8074  1403  0020               	movlb	0	; select bank0
  8075  1404  086A               	movf	setRFSW_AdjControl@sw,w
  8076  1405  3191  219E  3193   	fcall	_setRF_DimmerValue
  8077                           
  8078                           ;RF_Control_B1.c: 467: } else {
  8079  1408  2C1B               	goto	l2096
  8080  1409                     l6143:	
  8081                           
  8082                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8083  1409  0020               	movlb	0	; select bank0
  8084  140A  086A               	movf	setRFSW_AdjControl@sw,w
  8085  140B  3E14               	addlw	20
  8086  140C  076E               	addwf	_product,w
  8087  140D  00E7               	movwf	??_setRFSW_AdjControl
  8088  140E  0867               	movf	??_setRFSW_AdjControl,w
  8089  140F  0086               	movwf	6
  8090  1410  3002               	movlw	2	; select bank4/5
  8091  1411  0087               	movwf	7
  8092  1412  0801               	movf	1,w
  8093  1413  00E8               	movwf	??_setRFSW_AdjControl+1
  8094  1414  086E               	movf	_product,w
  8095  1415  3E09               	addlw	9
  8096  1416  0086               	movwf	6
  8097  1417  3002               	movlw	2	; select bank4/5
  8098  1418  0087               	movwf	7
  8099  1419  0868               	movf	??_setRFSW_AdjControl+1,w
  8100  141A  0081               	movwf	1
  8101  141B                     l2096:	
  8102                           
  8103                           ;RF_Control_B1.c: 469: }
  8104                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8105  141B  0020               	movlb	0	; select bank0
  8106  141C  086A               	movf	setRFSW_AdjControl@sw,w
  8107  141D  3E1A               	addlw	26
  8108  141E  076E               	addwf	_product,w
  8109  141F  00E7               	movwf	??_setRFSW_AdjControl
  8110  1420  0867               	movf	??_setRFSW_AdjControl,w
  8111  1421  0086               	movwf	6
  8112  1422  3002               	movlw	2	; select bank4/5
  8113  1423  0087               	movwf	7
  8114  1424  0801               	movf	1,w
  8115  1425  00E8               	movwf	??_setRFSW_AdjControl+1
  8116  1426  086E               	movf	_product,w
  8117  1427  3E11               	addlw	17
  8118  1428  0086               	movwf	6
  8119  1429  3002               	movlw	2	; select bank4/5
  8120  142A  0087               	movwf	7
  8121  142B  0868               	movf	??_setRFSW_AdjControl+1,w
  8122  142C  0081               	movwf	1
  8123                           
  8124                           ;RF_Control_B1.c: 471: setTxData();
  8125  142D  3187  2715         	fcall	_setTxData
  8126  142F  0008               	return
  8127  1430                     __end_of_setRFSW_AdjControl:	
  8128                           
  8129                           	psect	text32
  8130  119E                     __ptext32:	
  8131 ;; *************** function _setRF_DimmerValue *****************
  8132 ;; Defined at:
  8133 ;;		line 476 in file "../src/RF_Control_B1.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  lights          1    wreg     unsigned char 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  lights          1   70[BANK0 ] unsigned char 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;		None               void
  8140 ;; Registers used:
  8141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;Total ram usage:        3 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    9
  8154 ;; This function calls:
  8155 ;;		_setDimmerLights_AdjRF
  8156 ;; This function is called by:
  8157 ;;		_setRFSW_AdjControl
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _setRF_DimmerValue
  8163  119E                     _setRF_DimmerValue:	
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8167                           ;setRF_DimmerValue@lights stored from wreg
  8168  119E  0020               	movlb	0	; select bank0
  8169  119F  00E6               	movwf	setRF_DimmerValue@lights
  8170                           
  8171                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8172  11A0  3065               	movlw	101
  8173  11A1  0023               	movlb	3	; select bank3
  8174  11A2  0229               	subwf	(_RF_Data^(0+384)+9),w
  8175  11A3  1C03               	skipc
  8176  11A4  29AB               	goto	l6025
  8177                           
  8178                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8179  11A5  3064               	movlw	100
  8180  11A6  0020               	movlb	0	; select bank0
  8181  11A7  00E4               	movwf	??_setRF_DimmerValue
  8182  11A8  0864               	movf	??_setRF_DimmerValue,w
  8183  11A9  0023               	movlb	3	; select bank3
  8184  11AA  00A9               	movwf	(_RF_Data^(0+384)+9)
  8185  11AB                     l6025:	
  8186                           
  8187                           ;RF_Control_B1.c: 479: }
  8188                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8189  11AB  0829               	movf	(_RF_Data^(0+384)+9),w
  8190  11AC  0020               	movlb	0	; select bank0
  8191  11AD  00E4               	movwf	??_setRF_DimmerValue
  8192  11AE  086E               	movf	_product,w
  8193  11AF  3E09               	addlw	9
  8194  11B0  0086               	movwf	6
  8195  11B1  3002               	movlw	2	; select bank4/5
  8196  11B2  0087               	movwf	7
  8197  11B3  0864               	movf	??_setRF_DimmerValue,w
  8198  11B4  0081               	movwf	1
  8199                           
  8200                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8201  11B5  0866               	movf	setRF_DimmerValue@lights,w
  8202  11B6  00E4               	movwf	??_setRF_DimmerValue
  8203  11B7  086E               	movf	_product,w
  8204  11B8  3E0B               	addlw	11
  8205  11B9  0086               	movwf	6
  8206  11BA  3002               	movlw	2	; select bank4/5
  8207  11BB  0087               	movwf	7
  8208  11BC  0864               	movf	??_setRF_DimmerValue,w
  8209  11BD  0081               	movwf	1
  8210                           
  8211                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8212  11BE  0023               	movlb	3	; select bank3
  8213  11BF  0829               	movf	(_RF_Data^(0+384)+9),w
  8214  11C0  0020               	movlb	0	; select bank0
  8215  11C1  00E4               	movwf	??_setRF_DimmerValue
  8216  11C2  0866               	movf	setRF_DimmerValue@lights,w
  8217  11C3  3E14               	addlw	20
  8218  11C4  076E               	addwf	_product,w
  8219  11C5  00E5               	movwf	??_setRF_DimmerValue+1
  8220  11C6  0865               	movf	??_setRF_DimmerValue+1,w
  8221  11C7  0086               	movwf	6
  8222  11C8  3002               	movlw	2	; select bank4/5
  8223  11C9  0087               	movwf	7
  8224  11CA  0864               	movf	??_setRF_DimmerValue,w
  8225  11CB  0081               	movwf	1
  8226                           
  8227                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8228  11CC  0866               	movf	setRF_DimmerValue@lights,w
  8229  11CD  319F  27DD         	fcall	_setDimmerLights_AdjRF
  8230  11CF  0008               	return
  8231  11D0                     __end_of_setRF_DimmerValue:	
  8232                           
  8233                           	psect	text33
  8234  1FDD                     __ptext33:	
  8235 ;; *************** function _setDimmerLights_AdjRF *****************
  8236 ;; Defined at:
  8237 ;;		line 746 in file "../src/Dimmer_B1.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;  lights          1    wreg     unsigned char 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  lights          1   67[BANK0 ] unsigned char 
  8242 ;; Return value:  Size  Location     Type
  8243 ;;		None               void
  8244 ;; Registers used:
  8245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:        2 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    8
  8258 ;; This function calls:
  8259 ;;		_DimmerLightsPointSelect
  8260 ;;		_getPercentValue
  8261 ;; This function is called by:
  8262 ;;		_setRF_DimmerValue
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           
  8267                           ;psect for function _setDimmerLights_AdjRF
  8268  1FDD                     _setDimmerLights_AdjRF:	
  8269                           
  8270                           ;incstack = 0
  8271                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8272                           ;setDimmerLights_AdjRF@lights stored from wreg
  8273  1FDD  0020               	movlb	0	; select bank0
  8274  1FDE  00E3               	movwf	setDimmerLights_AdjRF@lights
  8275                           
  8276                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8277  1FDF  0863               	movf	setDimmerLights_AdjRF@lights,w
  8278  1FE0  319C  2443  319F   	fcall	_DimmerLightsPointSelect
  8279                           
  8280                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8281  1FE3  0020               	movlb	0	; select bank0
  8282  1FE4  086F               	movf	_DimmerLights,w
  8283  1FE5  0086               	movwf	6
  8284  1FE6  3001               	movlw	1	; select bank2/3
  8285  1FE7  0087               	movwf	7
  8286  1FE8  1501               	bsf	1,2
  8287                           
  8288                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8289  1FE9  086F               	movf	_DimmerLights,w
  8290  1FEA  0086               	movwf	6
  8291  1FEB  3001               	movlw	1	; select bank2/3
  8292  1FEC  0087               	movwf	7
  8293  1FED  1481               	bsf	1,1
  8294                           
  8295                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8296  1FEE  086E               	movf	_product,w
  8297  1FEF  3E09               	addlw	9
  8298  1FF0  0086               	movwf	6
  8299  1FF1  3002               	movlw	2	; select bank4/5
  8300  1FF2  0087               	movwf	7
  8301  1FF3  0801               	movf	1,w
  8302  1FF4  318A  22A8         	fcall	_getPercentValue
  8303  1FF6  0020               	movlb	0	; select bank0
  8304  1FF7  00E2               	movwf	??_setDimmerLights_AdjRF
  8305  1FF8  086F               	movf	_DimmerLights,w
  8306  1FF9  3E05               	addlw	5
  8307  1FFA  0086               	movwf	6
  8308  1FFB  3001               	movlw	1	; select bank2/3
  8309  1FFC  0087               	movwf	7
  8310  1FFD  0862               	movf	??_setDimmerLights_AdjRF,w
  8311  1FFE  0081               	movwf	1
  8312  1FFF  0008               	return
  8313  2000                     __end_of_setDimmerLights_AdjRF:	
  8314                           
  8315                           	psect	text34
  8316  0AA8                     __ptext34:	
  8317 ;; *************** function _getPercentValue *****************
  8318 ;; Defined at:
  8319 ;;		line 858 in file "../src/Dimmer_B1.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  value           1    wreg     unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  value           1   62[BANK0 ] unsigned char 
  8324 ;;  i               3   63[BANK0 ] float 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      unsigned char 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0, pclath, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;Total ram usage:        6 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    7
  8341 ;; This function calls:
  8342 ;;		___awtoft
  8343 ;;		___ftadd
  8344 ;;		___ftdiv
  8345 ;;		___ftmul
  8346 ;;		___ftneg
  8347 ;;		___fttol
  8348 ;; This function is called by:
  8349 ;;		_setDimmerLights_AdjRF
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           
  8354                           ;psect for function _getPercentValue
  8355  0AA8                     _getPercentValue:	
  8356                           
  8357                           ;incstack = 0
  8358                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8359                           ;getPercentValue@value stored from wreg
  8360  0AA8  0020               	movlb	0	; select bank0
  8361  0AA9  00DE               	movwf	getPercentValue@value
  8362                           
  8363                           ;Dimmer_B1.c: 866: float i = ((char)(85*0.8)) - ((char)(15*0.8));
  8364  0AAA  3000               	movlw	0
  8365  0AAB  00DF               	movwf	getPercentValue@i
  8366  0AAC  3060               	movlw	96
  8367  0AAD  00E0               	movwf	getPercentValue@i+1
  8368  0AAE  3042               	movlw	66
  8369  0AAF  00E1               	movwf	getPercentValue@i+2
  8370                           
  8371                           ;Dimmer_B1.c: 867: i /= 100;
  8372  0AB0  3000               	movlw	0
  8373  0AB1  00AE               	movwf	___ftdiv@f2
  8374  0AB2  30C8               	movlw	200
  8375  0AB3  00AF               	movwf	___ftdiv@f2+1
  8376  0AB4  3042               	movlw	66
  8377  0AB5  00B0               	movwf	___ftdiv@f2+2
  8378  0AB6  085F               	movf	getPercentValue@i,w
  8379  0AB7  00B1               	movwf	___ftdiv@f1
  8380  0AB8  0860               	movf	getPercentValue@i+1,w
  8381  0AB9  00B2               	movwf	___ftdiv@f1+1
  8382  0ABA  0861               	movf	getPercentValue@i+2,w
  8383  0ABB  00B3               	movwf	___ftdiv@f1+2
  8384  0ABC  318E  26A3  318A   	fcall	___ftdiv
  8385  0ABF  0020               	movlb	0	; select bank0
  8386  0AC0  082E               	movf	?___ftdiv,w
  8387  0AC1  00DF               	movwf	getPercentValue@i
  8388  0AC2  082F               	movf	?___ftdiv+1,w
  8389  0AC3  00E0               	movwf	getPercentValue@i+1
  8390  0AC4  0830               	movf	?___ftdiv+2,w
  8391  0AC5  00E1               	movwf	getPercentValue@i+2
  8392                           
  8393                           ;Dimmer_B1.c: 869: return (char) (((char)(85*0.8)) - ((100 - value) * i));
  8394  0AC6  085E               	movf	getPercentValue@value,w
  8395  0AC7  00DC               	movwf	??_getPercentValue
  8396  0AC8  01DD               	clrf	??_getPercentValue+1
  8397  0AC9  09DC               	comf	??_getPercentValue,f
  8398  0ACA  09DD               	comf	??_getPercentValue+1,f
  8399  0ACB  0ADC               	incf	??_getPercentValue,f
  8400  0ACC  1903               	skipnz
  8401  0ACD  0ADD               	incf	??_getPercentValue+1,f
  8402  0ACE  085C               	movf	??_getPercentValue,w
  8403  0ACF  3E64               	addlw	100
  8404  0AD0  00A8               	movwf	___awtoft@c
  8405  0AD1  3000               	movlw	0
  8406  0AD2  3D5D               	addwfc	??_getPercentValue+1,w
  8407  0AD3  00A9               	movwf	___awtoft@c+1
  8408  0AD4  319F  2799  318A   	fcall	___awtoft
  8409  0AD7  0020               	movlb	0	; select bank0
  8410  0AD8  0828               	movf	?___awtoft,w
  8411  0AD9  00B1               	movwf	___ftmul@f2
  8412  0ADA  0829               	movf	?___awtoft+1,w
  8413  0ADB  00B2               	movwf	___ftmul@f2+1
  8414  0ADC  082A               	movf	?___awtoft+2,w
  8415  0ADD  00B3               	movwf	___ftmul@f2+2
  8416  0ADE  085F               	movf	getPercentValue@i,w
  8417  0ADF  00AE               	movwf	___ftmul@f1
  8418  0AE0  0860               	movf	getPercentValue@i+1,w
  8419  0AE1  00AF               	movwf	___ftmul@f1+1
  8420  0AE2  0861               	movf	getPercentValue@i+2,w
  8421  0AE3  00B0               	movwf	___ftmul@f1+2
  8422  0AE4  318F  274C  318A   	fcall	___ftmul
  8423  0AE7  0020               	movlb	0	; select bank0
  8424  0AE8  082E               	movf	?___ftmul,w
  8425  0AE9  00BE               	movwf	___ftneg@f1
  8426  0AEA  082F               	movf	?___ftmul+1,w
  8427  0AEB  00BF               	movwf	___ftneg@f1+1
  8428  0AEC  0830               	movf	?___ftmul+2,w
  8429  0AED  00C0               	movwf	___ftneg@f1+2
  8430  0AEE  319B  23FE  318A   	fcall	___ftneg
  8431  0AF1  0020               	movlb	0	; select bank0
  8432  0AF2  083E               	movf	?___ftneg,w
  8433  0AF3  00C4               	movwf	___ftadd@f2
  8434  0AF4  083F               	movf	?___ftneg+1,w
  8435  0AF5  00C5               	movwf	___ftadd@f2+1
  8436  0AF6  0840               	movf	?___ftneg+2,w
  8437  0AF7  00C6               	movwf	___ftadd@f2+2
  8438  0AF8  3000               	movlw	0
  8439  0AF9  00C1               	movwf	___ftadd@f1
  8440  0AFA  3088               	movlw	136
  8441  0AFB  00C2               	movwf	___ftadd@f1+1
  8442  0AFC  3042               	movlw	66
  8443  0AFD  00C3               	movwf	___ftadd@f1+2
  8444  0AFE  3184  2475  318A   	fcall	___ftadd
  8445  0B01  0020               	movlb	0	; select bank0
  8446  0B02  0841               	movf	?___ftadd,w
  8447  0B03  00CE               	movwf	___fttol@f1
  8448  0B04  0842               	movf	?___ftadd+1,w
  8449  0B05  00CF               	movwf	___fttol@f1+1
  8450  0B06  0843               	movf	?___ftadd+2,w
  8451  0B07  00D0               	movwf	___fttol@f1+2
  8452  0B08  318C  245E         	fcall	___fttol
  8453  0B0A  0020               	movlb	0	; select bank0
  8454  0B0B  084E               	movf	?___fttol,w
  8455  0B0C  0008               	return
  8456  0B0D                     __end_of_getPercentValue:	
  8457                           
  8458                           	psect	text35
  8459  0F4C                     __ptext35:	
  8460 ;; *************** function ___ftmul *****************
  8461 ;; Defined at:
  8462 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  f1              3   14[BANK0 ] float 
  8465 ;;  f2              3   17[BANK0 ] float 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8468 ;;  sign            1   29[BANK0 ] unsigned char 
  8469 ;;  cntr            1   28[BANK0 ] unsigned char 
  8470 ;;  exp             1   24[BANK0 ] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  3   14[BANK0 ] float 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, pclath, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8480 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;Total ram usage:       16 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    6
  8487 ;; This function calls:
  8488 ;;		___ftpack
  8489 ;; This function is called by:
  8490 ;;		_getPercentValue
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function ___ftmul
  8496  0F4C                     ___ftmul:	
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8500  0F4C  0020               	movlb	0	; select bank0
  8501  0F4D  082E               	movf	___ftmul@f1,w
  8502  0F4E  00B4               	movwf	??___ftmul
  8503  0F4F  082F               	movf	___ftmul@f1+1,w
  8504  0F50  00B5               	movwf	??___ftmul+1
  8505  0F51  0830               	movf	___ftmul@f1+2,w
  8506  0F52  00B6               	movwf	??___ftmul+2
  8507  0F53  1003               	clrc
  8508  0F54  0D35               	rlf	??___ftmul+1,w
  8509  0F55  0D36               	rlf	??___ftmul+2,w
  8510  0F56  00B7               	movwf	??___ftmul+3
  8511  0F57  0837               	movf	??___ftmul+3,w
  8512  0F58  00B8               	movwf	___ftmul@exp
  8513  0F59  08B8               	movf	___ftmul@exp,f
  8514  0F5A  1D03               	skipz
  8515  0F5B  2F63               	goto	l5655
  8516  0F5C  3000               	movlw	0
  8517  0F5D  00AE               	movwf	?___ftmul
  8518  0F5E  3000               	movlw	0
  8519  0F5F  00AF               	movwf	?___ftmul+1
  8520  0F60  3000               	movlw	0
  8521  0F61  00B0               	movwf	?___ftmul+2
  8522  0F62  0008               	return
  8523  0F63                     l5655:	
  8524  0F63  0831               	movf	___ftmul@f2,w
  8525  0F64  00B4               	movwf	??___ftmul
  8526  0F65  0832               	movf	___ftmul@f2+1,w
  8527  0F66  00B5               	movwf	??___ftmul+1
  8528  0F67  0833               	movf	___ftmul@f2+2,w
  8529  0F68  00B6               	movwf	??___ftmul+2
  8530  0F69  1003               	clrc
  8531  0F6A  0D35               	rlf	??___ftmul+1,w
  8532  0F6B  0D36               	rlf	??___ftmul+2,w
  8533  0F6C  00B7               	movwf	??___ftmul+3
  8534  0F6D  0837               	movf	??___ftmul+3,w
  8535  0F6E  00BD               	movwf	___ftmul@sign
  8536  0F6F  08BD               	movf	___ftmul@sign,f
  8537  0F70  1D03               	skipz
  8538  0F71  2F79               	goto	l5661
  8539  0F72  3000               	movlw	0
  8540  0F73  00AE               	movwf	?___ftmul
  8541  0F74  3000               	movlw	0
  8542  0F75  00AF               	movwf	?___ftmul+1
  8543  0F76  3000               	movlw	0
  8544  0F77  00B0               	movwf	?___ftmul+2
  8545  0F78  0008               	return
  8546  0F79                     l5661:	
  8547  0F79  083D               	movf	___ftmul@sign,w
  8548  0F7A  3E7B               	addlw	123
  8549  0F7B  00B4               	movwf	??___ftmul
  8550  0F7C  0834               	movf	??___ftmul,w
  8551  0F7D  07B8               	addwf	___ftmul@exp,f
  8552  0F7E  082E               	movf	___ftmul@f1,w
  8553  0F7F  00B4               	movwf	??___ftmul
  8554  0F80  082F               	movf	___ftmul@f1+1,w
  8555  0F81  00B5               	movwf	??___ftmul+1
  8556  0F82  0830               	movf	___ftmul@f1+2,w
  8557  0F83  00B6               	movwf	??___ftmul+2
  8558  0F84  3010               	movlw	16
  8559  0F85                     u4485:	
  8560  0F85  36B6               	lsrf	??___ftmul+2,f
  8561  0F86  0CB5               	rrf	??___ftmul+1,f
  8562  0F87  0CB4               	rrf	??___ftmul,f
  8563  0F88  0B89               	decfsz	9,f
  8564  0F89  2F85               	goto	u4485
  8565  0F8A  0834               	movf	??___ftmul,w
  8566  0F8B  00B7               	movwf	??___ftmul+3
  8567  0F8C  0837               	movf	??___ftmul+3,w
  8568  0F8D  00BD               	movwf	___ftmul@sign
  8569  0F8E  0831               	movf	___ftmul@f2,w
  8570  0F8F  00B4               	movwf	??___ftmul
  8571  0F90  0832               	movf	___ftmul@f2+1,w
  8572  0F91  00B5               	movwf	??___ftmul+1
  8573  0F92  0833               	movf	___ftmul@f2+2,w
  8574  0F93  00B6               	movwf	??___ftmul+2
  8575  0F94  3010               	movlw	16
  8576  0F95                     u4495:	
  8577  0F95  36B6               	lsrf	??___ftmul+2,f
  8578  0F96  0CB5               	rrf	??___ftmul+1,f
  8579  0F97  0CB4               	rrf	??___ftmul,f
  8580  0F98  0B89               	decfsz	9,f
  8581  0F99  2F95               	goto	u4495
  8582  0F9A  0834               	movf	??___ftmul,w
  8583  0F9B  00B7               	movwf	??___ftmul+3
  8584  0F9C  0837               	movf	??___ftmul+3,w
  8585  0F9D  06BD               	xorwf	___ftmul@sign,f
  8586  0F9E  3080               	movlw	128
  8587  0F9F  00B4               	movwf	??___ftmul
  8588  0FA0  0834               	movf	??___ftmul,w
  8589  0FA1  05BD               	andwf	___ftmul@sign,f
  8590  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8591  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8592  0FA4  30FF               	movlw	255
  8593  0FA5  05B1               	andwf	___ftmul@f2,f
  8594  0FA6  30FF               	movlw	255
  8595  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8596  0FA8  3000               	movlw	0
  8597  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8598  0FAA  3000               	movlw	0
  8599  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8600  0FAC  3000               	movlw	0
  8601  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8602  0FAE  3000               	movlw	0
  8603  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8604  0FB0  3007               	movlw	7
  8605  0FB1  00B4               	movwf	??___ftmul
  8606  0FB2  0834               	movf	??___ftmul,w
  8607  0FB3  00BC               	movwf	___ftmul@cntr
  8608  0FB4                     l5673:	
  8609  0FB4  1C2E               	btfss	___ftmul@f1,0
  8610  0FB5  2FBC               	goto	l5677
  8611  0FB6  0831               	movf	___ftmul@f2,w
  8612  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8613  0FB8  0832               	movf	___ftmul@f2+1,w
  8614  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8615  0FBA  0833               	movf	___ftmul@f2+2,w
  8616  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8617  0FBC                     l5677:	
  8618  0FBC  3001               	movlw	1
  8619  0FBD                     u4515:	
  8620  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8621  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8622  0FBF  0CAE               	rrf	___ftmul@f1,f
  8623  0FC0  0B89               	decfsz	9,f
  8624  0FC1  2FBD               	goto	u4515
  8625  0FC2  3001               	movlw	1
  8626  0FC3                     u4525:	
  8627  0FC3  35B1               	lslf	___ftmul@f2,f
  8628  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8629  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8630  0FC6  0B89               	decfsz	9,f
  8631  0FC7  2FC3               	goto	u4525
  8632  0FC8  3001               	movlw	1
  8633  0FC9  02BC               	subwf	___ftmul@cntr,f
  8634  0FCA  1D03               	btfss	3,2
  8635  0FCB  2FB4               	goto	l5673
  8636  0FCC  3009               	movlw	9
  8637  0FCD  00B4               	movwf	??___ftmul
  8638  0FCE  0834               	movf	??___ftmul,w
  8639  0FCF  00BC               	movwf	___ftmul@cntr
  8640  0FD0                     l5685:	
  8641  0FD0  1C2E               	btfss	___ftmul@f1,0
  8642  0FD1  2FD8               	goto	l5689
  8643  0FD2  0831               	movf	___ftmul@f2,w
  8644  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8645  0FD4  0832               	movf	___ftmul@f2+1,w
  8646  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8647  0FD6  0833               	movf	___ftmul@f2+2,w
  8648  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8649  0FD8                     l5689:	
  8650  0FD8  3001               	movlw	1
  8651  0FD9                     u4555:	
  8652  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8653  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8654  0FDB  0CAE               	rrf	___ftmul@f1,f
  8655  0FDC  0B89               	decfsz	9,f
  8656  0FDD  2FD9               	goto	u4555
  8657  0FDE  3001               	movlw	1
  8658  0FDF                     u4565:	
  8659  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8660  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8661  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8662  0FE2  0B89               	decfsz	9,f
  8663  0FE3  2FDF               	goto	u4565
  8664  0FE4  3001               	movlw	1
  8665  0FE5  02BC               	subwf	___ftmul@cntr,f
  8666  0FE6  1D03               	btfss	3,2
  8667  0FE7  2FD0               	goto	l5685
  8668  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8669  0FE9  00A0               	movwf	___ftpack@arg
  8670  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8671  0FEB  00A1               	movwf	___ftpack@arg+1
  8672  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8673  0FED  00A2               	movwf	___ftpack@arg+2
  8674  0FEE  0838               	movf	___ftmul@exp,w
  8675  0FEF  00B4               	movwf	??___ftmul
  8676  0FF0  0834               	movf	??___ftmul,w
  8677  0FF1  00A3               	movwf	___ftpack@exp
  8678  0FF2  083D               	movf	___ftmul@sign,w
  8679  0FF3  00B5               	movwf	??___ftmul+1
  8680  0FF4  0835               	movf	??___ftmul+1,w
  8681  0FF5  00A4               	movwf	___ftpack@sign
  8682  0FF6  3189  2181         	fcall	___ftpack
  8683  0FF8  0020               	movlb	0	; select bank0
  8684  0FF9  0820               	movf	?___ftpack,w
  8685  0FFA  00AE               	movwf	?___ftmul
  8686  0FFB  0821               	movf	?___ftpack+1,w
  8687  0FFC  00AF               	movwf	?___ftmul+1
  8688  0FFD  0822               	movf	?___ftpack+2,w
  8689  0FFE  00B0               	movwf	?___ftmul+2
  8690  0FFF  0008               	return
  8691  1000                     __end_of___ftmul:	
  8692                           
  8693                           	psect	text36
  8694  1DC4                     __ptext36:	
  8695 ;; *************** function _setMemory_Modify *****************
  8696 ;; Defined at:
  8697 ;;		line 1025 in file "../src/MCU_B1.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  command         1    wreg     unsigned char 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  command         1    1[BANK0 ] unsigned char 
  8702 ;; Return value:  Size  Location     Type
  8703 ;;		None               void
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;Total ram usage:        2 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    5
  8718 ;; This function calls:
  8719 ;;		Nothing
  8720 ;; This function is called by:
  8721 ;;		_setLog_Code
  8722 ;;		_setRFSW_AdjControl
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _setMemory_Modify
  8728  1DC4                     _setMemory_Modify:	
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8732                           ;setMemory_Modify@command stored from wreg
  8733  1DC4  0020               	movlb	0	; select bank0
  8734  1DC5  00A1               	movwf	setMemory_Modify@command
  8735                           
  8736                           ;MCU_B1.c: 1026: Memory.Modify = command == 1 ? 1 : 0;
  8737  1DC6  0821               	movf	setMemory_Modify@command,w
  8738  1DC7  3A01               	xorlw	1
  8739  1DC8  3000               	movlw	0
  8740  1DC9  1903               	skipnz
  8741  1DCA  3001               	movlw	1
  8742  1DCB  00A0               	movwf	??_setMemory_Modify
  8743  1DCC  0023               	movlb	3	; select bank3
  8744  1DCD  0862               	movf	(_Memory^(0+384)+36),w
  8745  1DCE  0020               	movlb	0	; select bank0
  8746  1DCF  0620               	xorwf	??_setMemory_Modify,w
  8747  1DD0  39FE               	andlw	-2
  8748  1DD1  0620               	xorwf	??_setMemory_Modify,w
  8749  1DD2  0023               	movlb	3	; select bank3
  8750  1DD3  00E2               	movwf	(_Memory^(0+384)+36)
  8751                           
  8752                           ;MCU_B1.c: 1027: Memory.Time = 0;
  8753  1DD4  01E0               	clrf	(_Memory^(0+384)+34)
  8754  1DD5  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8755  1DD6  0008               	return
  8756  1DD7                     __end_of_setMemory_Modify:	
  8757                           
  8758                           	psect	text37
  8759  1D6C                     __ptext37:	
  8760 ;; *************** function _getRF_KeyStatus *****************
  8761 ;; Defined at:
  8762 ;;		line 193 in file "../src/RF_Control_B1.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  key             1    1[BANK0 ] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      unsigned char 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;Total ram usage:        3 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    5
  8783 ;; This function calls:
  8784 ;;		Nothing
  8785 ;; This function is called by:
  8786 ;;		_setRF_Main
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function _getRF_KeyStatus
  8792  1D6C                     _getRF_KeyStatus:	
  8793                           
  8794                           ;RF_Control_B1.c: 194: char key = 0;
  8795                           
  8796                           ;incstack = 0
  8797                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8798  1D6C  0020               	movlb	0	; select bank0
  8799  1D6D  01A1               	clrf	getRF_KeyStatus@key
  8800                           
  8801                           ;RF_Control_B1.c: 204: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8802  1D6E  01A2               	clrf	_getRF_KeyStatus$5506
  8803  1D6F  0AA2               	incf	_getRF_KeyStatus$5506,f
  8804  1D70  1F0C               	btfss	12,6	;volatile
  8805  1D71  1A0C               	btfsc	12,4	;volatile
  8806  1D72  2D77               	goto	l6647
  8807  1D73  1C0C               	btfss	12,0	;volatile
  8808  1D74  1B8C               	btfsc	12,7	;volatile
  8809  1D75  2D77               	goto	l6647
  8810  1D76  01A2               	clrf	_getRF_KeyStatus$5506
  8811  1D77                     l6647:	
  8812  1D77  0822               	movf	_getRF_KeyStatus$5506,w
  8813  1D78  00A0               	movwf	??_getRF_KeyStatus
  8814  1D79  0820               	movf	??_getRF_KeyStatus,w
  8815  1D7A  00A1               	movwf	getRF_KeyStatus@key
  8816                           
  8817                           ;RF_Control_B1.c: 206: return key;
  8818  1D7B  0821               	movf	getRF_KeyStatus@key,w
  8819  1D7C  0008               	return
  8820  1D7D                     __end_of_getRF_KeyStatus:	
  8821                           
  8822                           	psect	text38
  8823  1D5B                     __ptext38:	
  8824 ;; *************** function _getBuz_GO *****************
  8825 ;; Defined at:
  8826 ;;		line 82 in file "../src/Buzzer_B1.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;		None
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  i               2    4[BANK0 ] int 
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  2    0[BANK0 ] int 
  8833 ;; Registers used:
  8834 ;;		wreg, status,2, status,0
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;Total ram usage:        6 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    5
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_setRF_Main
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           
  8855                           ;psect for function _getBuz_GO
  8856  1D5B                     _getBuz_GO:	
  8857                           
  8858                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8859                           
  8860                           ;incstack = 0
  8861                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8862  1D5B  0021               	movlb	1	; select bank1
  8863  1D5C  0C2F               	rrf	_Buz1^(0+128),w
  8864  1D5D  3901               	andlw	1
  8865  1D5E  0020               	movlb	0	; select bank0
  8866  1D5F  00A2               	movwf	??_getBuz_GO
  8867  1D60  01A3               	clrf	??_getBuz_GO+1
  8868  1D61  0822               	movf	??_getBuz_GO,w
  8869  1D62  00A4               	movwf	getBuz_GO@i
  8870  1D63  0823               	movf	??_getBuz_GO+1,w
  8871  1D64  00A5               	movwf	getBuz_GO@i+1
  8872                           
  8873                           ;Buzzer_B1.c: 84: return i;
  8874  1D65  0825               	movf	getBuz_GO@i+1,w
  8875  1D66  01A1               	clrf	?_getBuz_GO+1
  8876  1D67  07A1               	addwf	?_getBuz_GO+1,f
  8877  1D68  0824               	movf	getBuz_GO@i,w
  8878  1D69  01A0               	clrf	?_getBuz_GO
  8879  1D6A  07A0               	addwf	?_getBuz_GO,f
  8880  1D6B  0008               	return
  8881  1D6C                     __end_of_getBuz_GO:	
  8882                           
  8883                           	psect	text39
  8884  1CEC                     __ptext39:	
  8885 ;; *************** function _RF_RxDisable *****************
  8886 ;; Defined at:
  8887 ;;		line 268 in file "../src/RF_Control_B1.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;		None
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;		None
  8892 ;; Return value:  Size  Location     Type
  8893 ;;		None               void
  8894 ;; Registers used:
  8895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : 0/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;Total ram usage:        0 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    7
  8908 ;; This function calls:
  8909 ;;		_CC2500_WriteCommand
  8910 ;; This function is called by:
  8911 ;;		_setRF_Main
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           
  8916                           ;psect for function _RF_RxDisable
  8917  1CEC                     _RF_RxDisable:	
  8918                           
  8919                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8923  1CEC  0021               	movlb	1	; select bank1
  8924  1CED  18BB               	btfsc	_RF1^(0+128),1
  8925  1CEE  2CF1               	goto	l2046
  8926  1CEF  1DBB               	btfss	_RF1^(0+128),3
  8927  1CF0  0008               	return
  8928  1CF1                     l2046:	
  8929                           
  8930                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  8931  1CF1  11BB               	bcf	_RF1^(0+128),3
  8932                           
  8933                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  8934  1CF2  10BB               	bcf	_RF1^(0+128),1
  8935                           
  8936                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  8937  1CF3  3036               	movlw	54
  8938  1CF4  319E  266C  319C   	fcall	_CC2500_WriteCommand
  8939                           
  8940                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  8941  1CF7  303A               	movlw	58
  8942  1CF8  319E  266C         	fcall	_CC2500_WriteCommand
  8943  1CFA  0008               	return
  8944  1CFB                     __end_of_RF_RxDisable:	
  8945                           
  8946                           	psect	text40
  8947  09E2                     __ptext40:	
  8948 ;; *************** function _CC2500_TxData *****************
  8949 ;; Defined at:
  8950 ;;		line 32 in file "../src/CC2500_B1.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;		None               void
  8957 ;; Registers used:
  8958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:        2 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    7
  8971 ;; This function calls:
  8972 ;;		_CC2500_WriteByte
  8973 ;;		_CC2500_WriteCommand
  8974 ;;		_Timeout_Counter
  8975 ;;		_set_TimeoutCleared
  8976 ;; This function is called by:
  8977 ;;		_setRF_Main
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _CC2500_TxData
  8983  09E2                     _CC2500_TxData:	
  8984                           
  8985                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8986                           ;CC2500_B1.c: 35: RC0 = 0;
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8990  09E2  0020               	movlb	0	; select bank0
  8991  09E3  100E               	bcf	14,0	;volatile
  8992                           
  8993                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8994  09E4  307F               	movlw	127
  8995  09E5  00A4               	movwf	??_CC2500_TxData
  8996  09E6  0824               	movf	??_CC2500_TxData,w
  8997  09E7  00FB               	movwf	_SPI0Buffer
  8998                           
  8999                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9000  09E8  29EC               	goto	l6305
  9001  09E9                     l6303:	
  9002                           
  9003                           ;CC2500_B1.c: 38: Timeout_Counter();
  9004  09E9  319D  25FE  3189   	fcall	_Timeout_Counter
  9005  09EC                     l6305:	
  9006  09EC  0020               	movlb	0	; select bank0
  9007  09ED  1E8E               	btfss	14,5	;volatile
  9008  09EE  29F2               	goto	l6309
  9009  09EF  0021               	movlb	1	; select bank1
  9010  09F0  1D2C               	btfss	(_myMain^(0+128)+12),2
  9011  09F1  29E9               	goto	l6303
  9012  09F2                     l6309:	
  9013                           
  9014                           ;CC2500_B1.c: 39: };
  9015                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9016  09F2  319B  23CB  3189   	fcall	_set_TimeoutCleared
  9017                           
  9018                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9019  09F5  319D  25EA  3189   	fcall	_CC2500_WriteByte
  9020                           
  9021                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9022  09F8  0021               	movlb	1	; select bank1
  9023  09F9  0852               	movf	_Tx_Length^(0+128),w
  9024  09FA  0020               	movlb	0	; select bank0
  9025  09FB  00A4               	movwf	??_CC2500_TxData
  9026  09FC  0824               	movf	??_CC2500_TxData,w
  9027  09FD  00FB               	movwf	_SPI0Buffer
  9028                           
  9029                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9030  09FE  319D  25EA  3189   	fcall	_CC2500_WriteByte
  9031                           
  9032                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9033  0A01  0020               	movlb	0	; select bank0
  9034  0A02  01A5               	clrf	CC2500_TxData@loop_e
  9035  0A03                     l6323:	
  9036  0A03  0021               	movlb	1	; select bank1
  9037  0A04  0852               	movf	_Tx_Length^(0+128),w
  9038  0A05  0020               	movlb	0	; select bank0
  9039  0A06  0225               	subwf	CC2500_TxData@loop_e,w
  9040  0A07  1803               	btfsc	3,0
  9041  0A08  2A1B               	goto	l231
  9042                           
  9043                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9044  0A09  0825               	movf	CC2500_TxData@loop_e,w
  9045  0A0A  3EA0               	addlw	_RF_Data& (0+255)
  9046  0A0B  0086               	movwf	6
  9047  0A0C  3001               	movlw	1	; select bank3/4
  9048  0A0D  0087               	movwf	7
  9049  0A0E  0801               	movf	1,w
  9050  0A0F  00A4               	movwf	??_CC2500_TxData
  9051  0A10  0824               	movf	??_CC2500_TxData,w
  9052  0A11  00FB               	movwf	_SPI0Buffer
  9053                           
  9054                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9055  0A12  319D  25EA  3189   	fcall	_CC2500_WriteByte
  9056  0A15  3001               	movlw	1
  9057  0A16  0020               	movlb	0	; select bank0
  9058  0A17  00A4               	movwf	??_CC2500_TxData
  9059  0A18  0824               	movf	??_CC2500_TxData,w
  9060  0A19  07A5               	addwf	CC2500_TxData@loop_e,f
  9061  0A1A  2A03               	goto	l6323
  9062  0A1B                     l231:	
  9063                           
  9064                           ;CC2500_B1.c: 48: }
  9065                           ;CC2500_B1.c: 49: RC0 = 1;
  9066  0A1B  140E               	bsf	14,0	;volatile
  9067                           
  9068                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9069  0A1C  3035               	movlw	53
  9070  0A1D  319E  266C  3189   	fcall	_CC2500_WriteCommand
  9071                           
  9072                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9073  0A20  2A24               	goto	l6329
  9074  0A21                     l6327:	
  9075                           
  9076                           ;CC2500_B1.c: 52: Timeout_Counter();
  9077  0A21  319D  25FE  3189   	fcall	_Timeout_Counter
  9078  0A24                     l6329:	
  9079  0A24  0020               	movlb	0	; select bank0
  9080  0A25  188E               	btfsc	14,1	;volatile
  9081  0A26  2A2A               	goto	l6333
  9082  0A27  0021               	movlb	1	; select bank1
  9083  0A28  1D2C               	btfss	(_myMain^(0+128)+12),2
  9084  0A29  2A21               	goto	l6327
  9085  0A2A                     l6333:	
  9086                           
  9087                           ;CC2500_B1.c: 53: };
  9088                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9089  0A2A  319B  23CB  3189   	fcall	_set_TimeoutCleared
  9090                           
  9091                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9092  0A2D  2A31               	goto	l6337
  9093  0A2E                     l6335:	
  9094                           
  9095                           ;CC2500_B1.c: 57: Timeout_Counter();
  9096  0A2E  319D  25FE  3189   	fcall	_Timeout_Counter
  9097  0A31                     l6337:	
  9098  0A31  0020               	movlb	0	; select bank0
  9099  0A32  1C8E               	btfss	14,1	;volatile
  9100  0A33  2A37               	goto	l6341
  9101  0A34  0021               	movlb	1	; select bank1
  9102  0A35  1D2C               	btfss	(_myMain^(0+128)+12),2
  9103  0A36  2A2E               	goto	l6335
  9104  0A37                     l6341:	
  9105                           
  9106                           ;CC2500_B1.c: 58: };
  9107                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9108  0A37  319B  23CB  3189   	fcall	_set_TimeoutCleared
  9109                           
  9110                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9111  0A3A  3036               	movlw	54
  9112  0A3B  319E  266C  3189   	fcall	_CC2500_WriteCommand
  9113                           
  9114                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9115  0A3E  303B               	movlw	59
  9116  0A3F  319E  266C         	fcall	_CC2500_WriteCommand
  9117                           
  9118                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9119  0A41  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9120  0A42  0008               	return
  9121  0A43                     __end_of_CC2500_TxData:	
  9122                           
  9123                           	psect	text41
  9124  0B73                     __ptext41:	
  9125 ;; *************** function _CC2500_RxData *****************
  9126 ;; Defined at:
  9127 ;;		line 70 in file "../src/CC2500_B1.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;		None
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9132 ;; Return value:  Size  Location     Type
  9133 ;;		None               void
  9134 ;; Registers used:
  9135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;Total ram usage:        2 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:    7
  9148 ;; This function calls:
  9149 ;;		_CC2500_ReadByte
  9150 ;;		_CC2500_ReadStatus
  9151 ;;		_CC2500_WriteByte
  9152 ;;		_Timeout_Counter
  9153 ;;		_set_TimeoutCleared
  9154 ;; This function is called by:
  9155 ;;		_setRF_Main
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           
  9160                           ;psect for function _CC2500_RxData
  9161  0B73                     _CC2500_RxData:	
  9162                           
  9163                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9164                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9168  0B73  0020               	movlb	0	; select bank0
  9169  0B74  188E               	btfsc	14,1	;volatile
  9170  0B75  2B7A               	goto	l6355
  9171  0B76  2B83               	goto	l6361
  9172  0B77                     l6353:	
  9173                           ;CC2500_B1.c: 76: {
  9174                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9175                           
  9176                           
  9177                           ;CC2500_B1.c: 78: Timeout_Counter();
  9178  0B77  319D  25FE  318B   	fcall	_Timeout_Counter
  9179  0B7A                     l6355:	
  9180  0B7A  0020               	movlb	0	; select bank0
  9181  0B7B  1C8E               	btfss	14,1	;volatile
  9182  0B7C  2B80               	goto	l6359
  9183  0B7D  0021               	movlb	1	; select bank1
  9184  0B7E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9185  0B7F  2B77               	goto	l6353
  9186  0B80                     l6359:	
  9187                           
  9188                           ;CC2500_B1.c: 79: };
  9189                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9190  0B80  319B  23CB  318B   	fcall	_set_TimeoutCleared
  9191  0B83                     l6361:	
  9192                           
  9193                           ;CC2500_B1.c: 81: }
  9194                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9195  0B83  303B               	movlw	59
  9196  0B84  319F  27BB  318B   	fcall	_CC2500_ReadStatus
  9197                           
  9198                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9199  0B87  0021               	movlb	1	; select bank1
  9200  0B88  0855               	movf	_s_data^(0+128),w
  9201  0B89  1903               	btfsc	3,2
  9202  0B8A  0008               	return
  9203                           
  9204                           ;CC2500_B1.c: 86: RC0 = 0;
  9205  0B8B  0020               	movlb	0	; select bank0
  9206  0B8C  100E               	bcf	14,0	;volatile
  9207                           
  9208                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9209  0B8D  30FF               	movlw	255
  9210  0B8E  00A4               	movwf	??_CC2500_RxData
  9211  0B8F  0824               	movf	??_CC2500_RxData,w
  9212  0B90  00FB               	movwf	_SPI0Buffer
  9213                           
  9214                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9215  0B91  2B95               	goto	l6371
  9216  0B92                     l6369:	
  9217                           
  9218                           ;CC2500_B1.c: 89: Timeout_Counter();
  9219  0B92  319D  25FE  318B   	fcall	_Timeout_Counter
  9220  0B95                     l6371:	
  9221  0B95  0020               	movlb	0	; select bank0
  9222  0B96  1E8E               	btfss	14,5	;volatile
  9223  0B97  2B9B               	goto	l6375
  9224  0B98  0021               	movlb	1	; select bank1
  9225  0B99  1D2C               	btfss	(_myMain^(0+128)+12),2
  9226  0B9A  2B92               	goto	l6369
  9227  0B9B                     l6375:	
  9228                           
  9229                           ;CC2500_B1.c: 90: };
  9230                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9231  0B9B  319B  23CB  318B   	fcall	_set_TimeoutCleared
  9232                           
  9233                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9234  0B9E  319D  25EA  318B   	fcall	_CC2500_WriteByte
  9235                           
  9236                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9237  0BA1  319E  263D  318B   	fcall	_CC2500_ReadByte
  9238                           
  9239                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9240  0BA4  087B               	movf	_SPI0Buffer,w
  9241  0BA5  0020               	movlb	0	; select bank0
  9242  0BA6  00A4               	movwf	??_CC2500_RxData
  9243  0BA7  0824               	movf	??_CC2500_RxData,w
  9244  0BA8  0021               	movlb	1	; select bank1
  9245  0BA9  00D0               	movwf	_Rx_Length^(0+128)
  9246                           
  9247                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9248  0BAA  0020               	movlb	0	; select bank0
  9249  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9250  0BAC                     l6391:	
  9251  0BAC  0021               	movlb	1	; select bank1
  9252  0BAD  0850               	movf	_Rx_Length^(0+128),w
  9253  0BAE  0020               	movlb	0	; select bank0
  9254  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9255  0BB0  1803               	btfsc	3,0
  9256  0BB1  2BC4               	goto	l6393
  9257                           
  9258                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9259  0BB2  319E  263D  318B   	fcall	_CC2500_ReadByte
  9260                           
  9261                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9262  0BB5  087B               	movf	_SPI0Buffer,w
  9263  0BB6  0020               	movlb	0	; select bank0
  9264  0BB7  00A4               	movwf	??_CC2500_RxData
  9265  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9266  0BB9  3EA0               	addlw	_RF_Data& (0+255)
  9267  0BBA  0086               	movwf	6
  9268  0BBB  3001               	movlw	1	; select bank3/4
  9269  0BBC  0087               	movwf	7
  9270  0BBD  0824               	movf	??_CC2500_RxData,w
  9271  0BBE  0081               	movwf	1
  9272  0BBF  3001               	movlw	1
  9273  0BC0  00A4               	movwf	??_CC2500_RxData
  9274  0BC1  0824               	movf	??_CC2500_RxData,w
  9275  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9276  0BC3  2BAC               	goto	l6391
  9277  0BC4                     l6393:	
  9278                           
  9279                           ;CC2500_B1.c: 99: }
  9280                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9281  0BC4  319E  263D  318B   	fcall	_CC2500_ReadByte
  9282                           
  9283                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9284  0BC7  087B               	movf	_SPI0Buffer,w
  9285  0BC8  0020               	movlb	0	; select bank0
  9286  0BC9  00A4               	movwf	??_CC2500_RxData
  9287  0BCA  0824               	movf	??_CC2500_RxData,w
  9288  0BCB  0021               	movlb	1	; select bank1
  9289  0BCC  00CF               	movwf	_RSSI^(0+128)
  9290                           
  9291                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9292  0BCD  319E  263D         	fcall	_CC2500_ReadByte
  9293                           
  9294                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9295  0BCF  087B               	movf	_SPI0Buffer,w
  9296  0BD0  0020               	movlb	0	; select bank0
  9297  0BD1  00A4               	movwf	??_CC2500_RxData
  9298  0BD2  0824               	movf	??_CC2500_RxData,w
  9299  0BD3  0021               	movlb	1	; select bank1
  9300  0BD4  00CC               	movwf	_CRC^(0+128)
  9301                           
  9302                           ;CC2500_B1.c: 104: RC0 = 1;
  9303  0BD5  0020               	movlb	0	; select bank0
  9304  0BD6  140E               	bsf	14,0	;volatile
  9305                           
  9306                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9307  0BD7  0021               	movlb	1	; select bank1
  9308  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9309                           
  9310                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9311  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9312                           
  9313                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9314  0BDA  11BB               	bcf	_RF1^(0+128),3
  9315                           
  9316                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9317  0BDB  14BB               	bsf	_RF1^(0+128),1
  9318  0BDC  0008               	return
  9319  0BDD                     __end_of_CC2500_RxData:	
  9320                           
  9321                           	psect	text42
  9322  1FBB                     __ptext42:	
  9323 ;; *************** function _CC2500_ReadStatus *****************
  9324 ;; Defined at:
  9325 ;;		line 301 in file "../src/CC2500_B1.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  status_addr     1    wreg     unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        2 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    6
  9346 ;; This function calls:
  9347 ;;		_CC2500_ReadByte
  9348 ;;		_CC2500_WriteByte
  9349 ;;		_Timeout_Counter
  9350 ;;		_set_TimeoutCleared
  9351 ;; This function is called by:
  9352 ;;		_CC2500_RxData
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _CC2500_ReadStatus
  9358  1FBB                     _CC2500_ReadStatus:	
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9362                           ;CC2500_ReadStatus@status_addr stored from wreg
  9363  1FBB  0020               	movlb	0	; select bank0
  9364  1FBC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9365                           
  9366                           ;CC2500_B1.c: 302: RC0 = 0;
  9367  1FBD  100E               	bcf	14,0	;volatile
  9368                           
  9369                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9370  1FBE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9371  1FBF  3EC0               	addlw	192
  9372  1FC0  00A2               	movwf	??_CC2500_ReadStatus
  9373  1FC1  0822               	movf	??_CC2500_ReadStatus,w
  9374  1FC2  00FB               	movwf	_SPI0Buffer
  9375                           
  9376                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9377  1FC3  2FC7               	goto	l6169
  9378  1FC4                     l6167:	
  9379                           
  9380                           ;CC2500_B1.c: 306: Timeout_Counter();
  9381  1FC4  319D  25FE  319F   	fcall	_Timeout_Counter
  9382  1FC7                     l6169:	
  9383  1FC7  0020               	movlb	0	; select bank0
  9384  1FC8  1E8E               	btfss	14,5	;volatile
  9385  1FC9  2FCD               	goto	l6173
  9386  1FCA  0021               	movlb	1	; select bank1
  9387  1FCB  1D2C               	btfss	(_myMain^(0+128)+12),2
  9388  1FCC  2FC4               	goto	l6167
  9389  1FCD                     l6173:	
  9390                           
  9391                           ;CC2500_B1.c: 307: };
  9392                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9393  1FCD  319B  23CB  319F   	fcall	_set_TimeoutCleared
  9394                           
  9395                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9396  1FD0  319D  25EA  319F   	fcall	_CC2500_WriteByte
  9397                           
  9398                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9399  1FD3  319E  263D         	fcall	_CC2500_ReadByte
  9400                           
  9401                           ;CC2500_B1.c: 312: RC0 = 1;
  9402  1FD5  0020               	movlb	0	; select bank0
  9403  1FD6  140E               	bsf	14,0	;volatile
  9404                           
  9405                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9406  1FD7  087B               	movf	_SPI0Buffer,w
  9407  1FD8  00A2               	movwf	??_CC2500_ReadStatus
  9408  1FD9  0822               	movf	??_CC2500_ReadStatus,w
  9409  1FDA  0021               	movlb	1	; select bank1
  9410  1FDB  00D5               	movwf	_s_data^(0+128)
  9411  1FDC  0008               	return
  9412  1FDD                     __end_of_CC2500_ReadStatus:	
  9413                           
  9414                           	psect	text43
  9415  1E3D                     __ptext43:	
  9416 ;; *************** function _CC2500_ReadByte *****************
  9417 ;; Defined at:
  9418 ;;		line 235 in file "../src/CC2500_B1.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;		None               void
  9425 ;; Registers used:
  9426 ;;		wreg, status,2, status,0
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:        2 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    5
  9439 ;; This function calls:
  9440 ;;		Nothing
  9441 ;; This function is called by:
  9442 ;;		_CC2500_RxData
  9443 ;;		_CC2500_ReadStatus
  9444 ;;		_CC2500_ReadREG
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           
  9449                           ;psect for function _CC2500_ReadByte
  9450  1E3D                     _CC2500_ReadByte:	
  9451                           
  9452                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9453                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9454                           
  9455                           ;incstack = 0
  9456                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9457  1E3D  0020               	movlb	0	; select bank0
  9458  1E3E  01A1               	clrf	CC2500_ReadByte@loop_b
  9459  1E3F                     L5:	
  9460  1E3F  3008               	movlw	8
  9461  1E40  0221               	subwf	CC2500_ReadByte@loop_b,w
  9462  1E41  1803               	btfsc	3,0
  9463  1E42  0008               	return
  9464                           
  9465                           ;CC2500_B1.c: 238: RC3 = 1;
  9466  1E43  158E               	bsf	14,3	;volatile
  9467                           
  9468                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9469  1E44  1003               	clrc
  9470  1E45  0DFB               	rlf	_SPI0Buffer,f
  9471                           
  9472                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9473  1E46  1E8E               	btfss	14,5	;volatile
  9474  1E47  2E4A               	goto	l6073
  9475                           
  9476                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9477  1E48  147B               	bsf	_SPI0Buffer,0
  9478  1E49  2E4E               	goto	l6075
  9479  1E4A                     l6073:	
  9480                           
  9481                           ;CC2500_B1.c: 242: else
  9482                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9483  1E4A  30FE               	movlw	254
  9484  1E4B  00A0               	movwf	??_CC2500_ReadByte
  9485  1E4C  0820               	movf	??_CC2500_ReadByte,w
  9486  1E4D  05FB               	andwf	_SPI0Buffer,f
  9487  1E4E                     l6075:	
  9488                           
  9489                           ;CC2500_B1.c: 244: RC3 = 0;
  9490  1E4E  118E               	bcf	14,3	;volatile
  9491  1E4F  3001               	movlw	1
  9492  1E50  00A0               	movwf	??_CC2500_ReadByte
  9493  1E51  0820               	movf	??_CC2500_ReadByte,w
  9494  1E52  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9495  1E53  2E3F               	goto	L5
  9496  1E54                     __end_of_CC2500_ReadByte:	
  9497                           
  9498                           	psect	text44
  9499  1B9B                     __ptext44:	
  9500 ;; *************** function _RF_Initialization *****************
  9501 ;; Defined at:
  9502 ;;		line 9 in file "../src/RF_Control_B1.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;		None
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        0 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    6
  9523 ;; This function calls:
  9524 ;;		_setRF_Initialization
  9525 ;; This function is called by:
  9526 ;;		_main
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _RF_Initialization
  9532  1B9B                     _RF_Initialization:	
  9533                           
  9534                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9535                           
  9536                           ;incstack = 0
  9537                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9538  1B9B  319C  2464         	fcall	_setRF_Initialization
  9539  1B9D  0008               	return
  9540  1B9E                     __end_of_RF_Initialization:	
  9541                           
  9542                           	psect	text45
  9543  1C64                     __ptext45:	
  9544 ;; *************** function _setRF_Initialization *****************
  9545 ;; Defined at:
  9546 ;;		line 43 in file "../src/RF_Control_B1.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;		None
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;		None
  9551 ;; Return value:  Size  Location     Type
  9552 ;;		None               void
  9553 ;; Registers used:
  9554 ;;		wreg
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;Total ram usage:        1 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    5
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_RF_Initialization
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           
  9575                           ;psect for function _setRF_Initialization
  9576  1C64                     _setRF_Initialization:	
  9577                           
  9578                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _setRF_Initialization: [wreg]
  9582  1C64  3015               	movlw	21
  9583  1C65  0020               	movlb	0	; select bank0
  9584  1C66  00A0               	movwf	??_setRF_Initialization
  9585  1C67  0820               	movf	??_setRF_Initialization,w
  9586  1C68  0021               	movlb	1	; select bank1
  9587  1C69  00D2               	movwf	_Tx_Length^(0+128)
  9588                           
  9589                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9590  1C6A  300A               	movlw	10
  9591  1C6B  00C2               	movwf	(_RF1^(0+128)+7)
  9592  1C6C  3000               	movlw	0
  9593  1C6D  00C3               	movwf	(_RF1^(0+128)+8)
  9594  1C6E  0008               	return
  9595  1C6F                     __end_of_setRF_Initialization:	
  9596                           
  9597                           	psect	text46
  9598  1DA0                     __ptext46:	
  9599 ;; *************** function _Mcu_Initialization *****************
  9600 ;; Defined at:
  9601 ;;		line 30 in file "../src/MCU_B1.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;		None               void
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0, pclath, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;Total ram usage:        0 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    6
  9622 ;; This function calls:
  9623 ;;		_ADC_Set
  9624 ;;		_Fosc_Set
  9625 ;;		_IOC_Set
  9626 ;;		_IO_Set
  9627 ;;		_TMR1_Set
  9628 ;;		_WDT_Set
  9629 ;; This function is called by:
  9630 ;;		_main
  9631 ;; This function uses a non-reentrant model
  9632 ;;
  9633                           
  9634                           
  9635                           ;psect for function _Mcu_Initialization
  9636  1DA0                     _Mcu_Initialization:	
  9637                           
  9638                           ;MCU_B1.c: 32: Fosc_Set();
  9639                           
  9640                           ;incstack = 0
  9641                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9642  1DA0  319B  23C7  319D   	fcall	_Fosc_Set
  9643                           
  9644                           ;MCU_B1.c: 34: IO_Set();
  9645  1DA3  319E  2654  319D   	fcall	_IO_Set
  9646                           
  9647                           ;MCU_B1.c: 36: ;;
  9648                           ;MCU_B1.c: 38: TMR1_Set();
  9649  1DA6  319C  24B6  319D   	fcall	_TMR1_Set
  9650                           
  9651                           ;MCU_B1.c: 40: ADC_Set();
  9652  1DA9  319B  23E7  319D   	fcall	_ADC_Set
  9653                           
  9654                           ;MCU_B1.c: 42: ;;
  9655                           ;MCU_B1.c: 44: ;;
  9656                           ;MCU_B1.c: 46: IOC_Set();
  9657  1DAC  319C  24AA  319D   	fcall	_IOC_Set
  9658                           
  9659                           ;MCU_B1.c: 48: ;;
  9660                           ;MCU_B1.c: 50: ;;
  9661                           ;MCU_B1.c: 52: WDT_Set();
  9662  1DAF  319C  2459         	fcall	_WDT_Set
  9663  1DB1  0008               	return
  9664  1DB2                     __end_of_Mcu_Initialization:	
  9665                           
  9666                           	psect	text47
  9667  1C59                     __ptext47:	
  9668 ;; *************** function _WDT_Set *****************
  9669 ;; Defined at:
  9670 ;;		line 1044 in file "../src/MCU_B1.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;		None
  9673 ;; Auto vars:     Size  Location     Type
  9674 ;;		None
  9675 ;; Return value:  Size  Location     Type
  9676 ;;		None               void
  9677 ;; Registers used:
  9678 ;;		wreg
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;Total ram usage:        1 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; Hardware stack levels required when called:    5
  9691 ;; This function calls:
  9692 ;;		Nothing
  9693 ;; This function is called by:
  9694 ;;		_Mcu_Initialization
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           
  9699                           ;psect for function _WDT_Set
  9700  1C59                     _WDT_Set:	
  9701                           
  9702                           ;MCU_B1.c: 1051: WDTCON = 0b00010111;;
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _WDT_Set: [wreg]
  9706  1C59  3017               	movlw	23
  9707  1C5A  0021               	movlb	1	; select bank1
  9708  1C5B  0097               	movwf	23	;volatile
  9709                           
  9710                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  9711  1C5C  144A               	bsf	_WDT^(0+128),0
  9712                           
  9713                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  9714  1C5D  300A               	movlw	10
  9715  1C5E  0020               	movlb	0	; select bank0
  9716  1C5F  00A0               	movwf	??_WDT_Set
  9717  1C60  0820               	movf	??_WDT_Set,w
  9718  1C61  0021               	movlb	1	; select bank1
  9719  1C62  00CB               	movwf	(_WDT^(0+128)+1)
  9720  1C63  0008               	return
  9721  1C64                     __end_of_WDT_Set:	
  9722                           
  9723                           	psect	text48
  9724  1CB6                     __ptext48:	
  9725 ;; *************** function _TMR1_Set *****************
  9726 ;; Defined at:
  9727 ;;		line 199 in file "../src/MCU_B1.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;		None               void
  9734 ;; Registers used:
  9735 ;;		wreg
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    5
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_Mcu_Initialization
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           
  9756                           ;psect for function _TMR1_Set
  9757  1CB6                     _TMR1_Set:	
  9758                           
  9759                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9760                           
  9761                           ;incstack = 0
  9762                           ; Regs used in _TMR1_Set: [wreg]
  9763  1CB6  3041               	movlw	65
  9764  1CB7  0020               	movlb	0	; select bank0
  9765  1CB8  0098               	movwf	24	;volatile
  9766                           
  9767                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9768  1CB9  30FA               	movlw	250
  9769  1CBA  0097               	movwf	23	;volatile
  9770                           
  9771                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9772  1CBB  3038               	movlw	56
  9773  1CBC  0096               	movwf	22	;volatile
  9774                           
  9775                           ;MCU_B1.c: 203: TMR1IE = 1;
  9776  1CBD  0021               	movlb	1	; select bank1
  9777  1CBE  1411               	bsf	17,0	;volatile
  9778                           
  9779                           ;MCU_B1.c: 204: PEIE = 1;
  9780  1CBF  170B               	bsf	11,6	;volatile
  9781                           
  9782                           ;MCU_B1.c: 205: GIE = 1;
  9783  1CC0  178B               	bsf	11,7	;volatile
  9784  1CC1  0008               	return
  9785  1CC2                     __end_of_TMR1_Set:	
  9786                           
  9787                           	psect	text49
  9788  1E54                     __ptext49:	
  9789 ;; *************** function _IO_Set *****************
  9790 ;; Defined at:
  9791 ;;		line 60 in file "../src/MCU_B1.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;		None
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;		None
  9796 ;; Return value:  Size  Location     Type
  9797 ;;		None               void
  9798 ;; Registers used:
  9799 ;;		wreg, status,2
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;Total ram usage:        0 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    5
  9812 ;; This function calls:
  9813 ;;		Nothing
  9814 ;; This function is called by:
  9815 ;;		_Mcu_Initialization
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           
  9820                           ;psect for function _IO_Set
  9821  1E54                     _IO_Set:	
  9822                           
  9823                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9824                           
  9825                           ;incstack = 0
  9826                           ; Regs used in _IO_Set: [wreg+status,2]
  9827  1E54  30F7               	movlw	247
  9828  1E55  0021               	movlb	1	; select bank1
  9829  1E56  008C               	movwf	12	;volatile
  9830                           
  9831                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9832  1E57  3004               	movlw	4
  9833  1E58  008D               	movwf	13	;volatile
  9834                           
  9835                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9836  1E59  3026               	movlw	38
  9837  1E5A  008E               	movwf	14	;volatile
  9838                           
  9839                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9840  1E5B  0022               	movlb	2	; select bank2
  9841  1E5C  018C               	clrf	12	;volatile
  9842                           
  9843                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9844  1E5D  018D               	clrf	13	;volatile
  9845                           
  9846                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9847  1E5E  018E               	clrf	14	;volatile
  9848                           
  9849                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9850  1E5F  300E               	movlw	14
  9851  1E60  0023               	movlb	3	; select bank3
  9852  1E61  008C               	movwf	12	;volatile
  9853                           
  9854                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9855  1E62  018D               	clrf	13	;volatile
  9856                           
  9857                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9858  1E63  018E               	clrf	14	;volatile
  9859                           
  9860                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9861  1E64  30F7               	movlw	247
  9862  1E65  0020               	movlb	0	; select bank0
  9863  1E66  008C               	movwf	12	;volatile
  9864                           
  9865                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9866  1E67  3004               	movlw	4
  9867  1E68  008D               	movwf	13	;volatile
  9868                           
  9869                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9870  1E69  3026               	movlw	38
  9871  1E6A  008E               	movwf	14	;volatile
  9872  1E6B  0008               	return
  9873  1E6C                     __end_of_IO_Set:	
  9874                           
  9875                           	psect	text50
  9876  1CAA                     __ptext50:	
  9877 ;; *************** function _IOC_Set *****************
  9878 ;; Defined at:
  9879 ;;		line 366 in file "../src/MCU_B1.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;		None
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;		None
  9884 ;; Return value:  Size  Location     Type
  9885 ;;		None               void
  9886 ;; Registers used:
  9887 ;;		wreg, status,2
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;Total ram usage:        0 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; Hardware stack levels required when called:    5
  9900 ;; This function calls:
  9901 ;;		Nothing
  9902 ;; This function is called by:
  9903 ;;		_Mcu_Initialization
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           
  9908                           ;psect for function _IOC_Set
  9909  1CAA                     _IOC_Set:	
  9910                           
  9911                           ;MCU_B1.c: 367: WPUB2 = 0;
  9912                           
  9913                           ;incstack = 0
  9914                           ; Regs used in _IOC_Set: [wreg+status,2]
  9915  1CAA  0024               	movlb	4	; select bank4
  9916  1CAB  110D               	bcf	13,2	;volatile
  9917                           
  9918                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9919  1CAC  0027               	movlb	7	; select bank7
  9920  1CAD  0194               	clrf	20	;volatile
  9921                           
  9922                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9923  1CAE  3004               	movlw	4
  9924  1CAF  0095               	movwf	21	;volatile
  9925                           
  9926                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9927  1CB0  0196               	clrf	22	;volatile
  9928                           
  9929                           ;MCU_B1.c: 394: IOCIE = 1;
  9930  1CB1  158B               	bsf	11,3	;volatile
  9931                           
  9932                           ;MCU_B1.c: 395: IOCIF = 0;
  9933  1CB2  100B               	bcf	11,0	;volatile
  9934                           
  9935                           ;MCU_B1.c: 396: PEIE = 1;
  9936  1CB3  170B               	bsf	11,6	;volatile
  9937                           
  9938                           ;MCU_B1.c: 397: GIE = 1;
  9939  1CB4  178B               	bsf	11,7	;volatile
  9940  1CB5  0008               	return
  9941  1CB6                     __end_of_IOC_Set:	
  9942                           
  9943                           	psect	text51
  9944  1BC7                     __ptext51:	
  9945 ;; *************** function _Fosc_Set *****************
  9946 ;; Defined at:
  9947 ;;		line 56 in file "../src/MCU_B1.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;		None
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;		None               void
  9954 ;; Registers used:
  9955 ;;		wreg
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;Total ram usage:        0 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    5
  9968 ;; This function calls:
  9969 ;;		Nothing
  9970 ;; This function is called by:
  9971 ;;		_Mcu_Initialization
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           
  9976                           ;psect for function _Fosc_Set
  9977  1BC7                     _Fosc_Set:	
  9978                           
  9979                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in _Fosc_Set: [wreg]
  9983  1BC7  3078               	movlw	120
  9984  1BC8  0021               	movlb	1	; select bank1
  9985  1BC9  0099               	movwf	25	;volatile
  9986  1BCA  0008               	return
  9987  1BCB                     __end_of_Fosc_Set:	
  9988                           
  9989                           	psect	text52
  9990  1BE7                     __ptext52:	
  9991 ;; *************** function _ADC_Set *****************
  9992 ;; Defined at:
  9993 ;;		line 421 in file "../src/MCU_B1.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;Total ram usage:        0 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    5
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_Mcu_Initialization
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           
 10022                           ;psect for function _ADC_Set
 10023  1BE7                     _ADC_Set:	
 10024                           
 10025                           ;MCU_B1.c: 422: ADCON1 = 0xf3;
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _ADC_Set: [wreg]
 10029  1BE7  30F3               	movlw	243
 10030  1BE8  0021               	movlb	1	; select bank1
 10031  1BE9  009E               	movwf	30	;volatile
 10032                           
 10033                           ;MCU_B1.c: 423: FVRCON = 0xc1;
 10034  1BEA  30C1               	movlw	193
 10035  1BEB  0022               	movlb	2	; select bank2
 10036  1BEC  0097               	movwf	23	;volatile
 10037  1BED  0008               	return
 10038  1BEE                     __end_of_ADC_Set:	
 10039                           
 10040                           	psect	text53
 10041  0043                     __ptext53:	
 10042 ;; *************** function _Load_Main *****************
 10043 ;; Defined at:
 10044 ;;		line 39 in file "../src/OverLoad_B1.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  i               1   15[BANK0 ] unsigned char 
 10049 ;;  error           1   14[BANK0 ] unsigned char 
 10050 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10051 ;;  j               1   11[BANK0 ] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        7 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    8
 10068 ;; This function calls:
 10069 ;;		___lwdiv
 10070 ;;		_getAll_DimmerLights_AdjGO
 10071 ;;		_getMain_All_Error_Status
 10072 ;;		_getMain_LightsStatus
 10073 ;;		_getMain_Lights_Count
 10074 ;;		_getMain_LoadOK
 10075 ;;		_setLoad_AH_AL_Restore
 10076 ;; This function is called by:
 10077 ;;		_main
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _Load_Main
 10083  0043                     _Load_Main:	
 10084                           
 10085                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10089  0043  0020               	movlb	0	; select bank0
 10090  0044  01AF               	clrf	Load_Main@i
 10091  0045  01AB               	clrf	Load_Main@j
 10092  0046  3000               	movlw	0
 10093  0047  3191  21D0  3180   	fcall	_getMain_All_Error_Status
 10094  004A  0020               	movlb	0	; select bank0
 10095  004B  00A9               	movwf	??_Load_Main
 10096  004C  0829               	movf	??_Load_Main,w
 10097  004D  00AE               	movwf	Load_Main@error
 10098  004E  01AC               	clrf	Load_Main@adjgo
 10099                           
 10100                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10101  004F  0022               	movlb	2	; select bank2
 10102  0050  1C25               	btfss	_Load^(0+256),0
 10103  0051  29BA               	goto	l1541
 10104                           
 10105                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10106  0052  319C  2423  3180   	fcall	_getAll_DimmerLights_AdjGO
 10107  0055  0020               	movlb	0	; select bank0
 10108  0056  00A9               	movwf	??_Load_Main
 10109  0057  0829               	movf	??_Load_Main,w
 10110  0058  00AC               	movwf	Load_Main@adjgo
 10111                           
 10112                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10113  0059  01AD               	clrf	_Load_Main$4117
 10114  005A  3187  27D4  3180   	fcall	_getMain_LightsStatus
 10115  005D  3A01               	xorlw	1
 10116  005E  1D03               	skipz
 10117  005F  2869               	goto	l7719
 10118  0060  0020               	movlb	0	; select bank0
 10119  0061  08AE               	movf	Load_Main@error,f
 10120  0062  1D03               	skipz
 10121  0063  2869               	goto	l7719
 10122  0064  08AC               	movf	Load_Main@adjgo,f
 10123  0065  1D03               	skipz
 10124  0066  2869               	goto	l7719
 10125  0067  01AD               	clrf	_Load_Main$4117
 10126  0068  0AAD               	incf	_Load_Main$4117,f
 10127  0069                     l7719:	
 10128  0069  0020               	movlb	0	; select bank0
 10129  006A  082D               	movf	_Load_Main$4117,w
 10130  006B  0022               	movlb	2	; select bank2
 10131  006C  10A5               	bcf	_Load^(0+256),1
 10132  006D  1D03               	skipz
 10133  006E  14A5               	bsf	_Load^(0+256),1
 10134                           
 10135                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10136  006F  319C  24CF  3180   	fcall	_getMain_LoadOK
 10137  0072  3A01               	xorlw	1
 10138  0073  1D03               	skipz
 10139  0074  287A               	goto	l1544
 10140  0075  0022               	movlb	2	; select bank2
 10141  0076  19A5               	btfsc	_Load^(0+256),3
 10142  0077  287A               	goto	l1544
 10143                           
 10144                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10145  0078  15A5               	bsf	_Load^(0+256),3
 10146                           
 10147                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10148  0079  13A5               	bcf	_Load^(0+256),7
 10149  007A                     l1544:	
 10150                           
 10151                           ;OverLoad_B1.c: 51: }
 10152                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10153  007A  0022               	movlb	2	; select bank2
 10154  007B  1CA5               	btfss	_Load^(0+256),1
 10155  007C  298A               	goto	l1545
 10156                           
 10157                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10158  007D  1525               	bsf	_Load^(0+256),2
 10159                           
 10160                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10161  007E  1E25               	btfss	_Load^(0+256),4
 10162  007F  2988               	goto	l1546
 10163                           
 10164                           ;OverLoad_B1.c: 58: Load.Time++;
 10165  0080  3001               	movlw	1
 10166  0081  07A6               	addwf	(_Load^(0+256)+1),f
 10167  0082  3000               	movlw	0
 10168  0083  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
 10169                           
 10170                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10171  0084  3000               	movlw	0
 10172  0085  0227               	subwf	((_Load+1)^(0+256)+1),w
 10173  0086  3005               	movlw	5
 10174  0087  1903               	skipnz
 10175  0088  0226               	subwf	(_Load^(0+256)+1),w
 10176  0089  1C03               	skipc
 10177  008A  0008               	return
 10178                           
 10179                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10180  008B  01A6               	clrf	(_Load^(0+256)+1)
 10181  008C  01A7               	clrf	((_Load+1)^(0+256)+1)
 10182                           
 10183                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10184  008D  1225               	bcf	_Load^(0+256),4
 10185                           
 10186                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10187  008E  0020               	movlb	0	; select bank0
 10188  008F  01AF               	clrf	Load_Main@i
 10189  0090  0AAF               	incf	Load_Main@i,f
 10190  0091  3004               	movlw	4
 10191  0092  022F               	subwf	Load_Main@i,w
 10192  0093  1803               	btfsc	3,0
 10193  0094  28BF               	goto	l7747
 10194  0095                     l7741:	
 10195                           
 10196                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10197  0095  352F               	lslf	Load_Main@i,w
 10198  0096  3E30               	addlw	(_Load+11)& (0+255)
 10199  0097  0086               	movwf	6
 10200  0098  3001               	movlw	1	; select bank2/3
 10201  0099  0087               	movwf	7
 10202  009A  3F40               	moviw [0]fsr1
 10203  009B  00A9               	movwf	??_Load_Main
 10204  009C  3F41               	moviw [1]fsr1
 10205  009D  00AA               	movwf	??_Load_Main+1
 10206  009E  0829               	movf	??_Load_Main,w
 10207  009F  0022               	movlb	2	; select bank2
 10208  00A0  07AA               	addwf	(_Load^(0+256)+5),f
 10209  00A1  0020               	movlb	0	; select bank0
 10210  00A2  082A               	movf	??_Load_Main+1,w
 10211  00A3  0022               	movlb	2	; select bank2
 10212  00A4  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
 10213                           
 10214                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10215  00A5  0020               	movlb	0	; select bank0
 10216  00A6  352F               	lslf	Load_Main@i,w
 10217  00A7  3E3A               	addlw	(_Load+21)& (0+255)
 10218  00A8  0086               	movwf	6
 10219  00A9  3001               	movlw	1	; select bank2/3
 10220  00AA  0087               	movwf	7
 10221  00AB  3F40               	moviw [0]fsr1
 10222  00AC  00A9               	movwf	??_Load_Main
 10223  00AD  3F41               	moviw [1]fsr1
 10224  00AE  00AA               	movwf	??_Load_Main+1
 10225  00AF  0829               	movf	??_Load_Main,w
 10226  00B0  0022               	movlb	2	; select bank2
 10227  00B1  07AC               	addwf	(_Load^(0+256)+7),f
 10228  00B2  0020               	movlb	0	; select bank0
 10229  00B3  082A               	movf	??_Load_Main+1,w
 10230  00B4  0022               	movlb	2	; select bank2
 10231  00B5  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
 10232  00B6  3001               	movlw	1
 10233  00B7  0020               	movlb	0	; select bank0
 10234  00B8  00A9               	movwf	??_Load_Main
 10235  00B9  0829               	movf	??_Load_Main,w
 10236  00BA  07AF               	addwf	Load_Main@i,f
 10237  00BB  3004               	movlw	4
 10238  00BC  022F               	subwf	Load_Main@i,w
 10239  00BD  1C03               	skipc
 10240  00BE  2895               	goto	l7741
 10241  00BF                     l7747:	
 10242                           
 10243                           ;OverLoad_B1.c: 66: }
 10244                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10245  00BF  3003               	movlw	3
 10246  00C0  00A0               	movwf	___lwdiv@divisor
 10247  00C1  3000               	movlw	0
 10248  00C2  00A1               	movwf	___lwdiv@divisor+1
 10249  00C3  0022               	movlb	2	; select bank2
 10250  00C4  082B               	movf	((_Load+1)^(0+256)+5),w
 10251  00C5  0020               	movlb	0	; select bank0
 10252  00C6  01A3               	clrf	___lwdiv@dividend+1
 10253  00C7  07A3               	addwf	___lwdiv@dividend+1,f
 10254  00C8  0022               	movlb	2	; select bank2
 10255  00C9  082A               	movf	(_Load^(0+256)+5),w
 10256  00CA  0020               	movlb	0	; select bank0
 10257  00CB  01A2               	clrf	___lwdiv@dividend
 10258  00CC  07A2               	addwf	___lwdiv@dividend,f
 10259  00CD  3193  230D  3180   	fcall	___lwdiv
 10260  00D0  0020               	movlb	0	; select bank0
 10261  00D1  0821               	movf	?___lwdiv+1,w
 10262  00D2  0022               	movlb	2	; select bank2
 10263  00D3  01AB               	clrf	((_Load+1)^(0+256)+5)
 10264  00D4  07AB               	addwf	((_Load+1)^(0+256)+5),f
 10265  00D5  0020               	movlb	0	; select bank0
 10266  00D6  0820               	movf	?___lwdiv,w
 10267  00D7  0022               	movlb	2	; select bank2
 10268  00D8  01AA               	clrf	(_Load^(0+256)+5)
 10269  00D9  07AA               	addwf	(_Load^(0+256)+5),f
 10270                           
 10271                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10272  00DA  3003               	movlw	3
 10273  00DB  0020               	movlb	0	; select bank0
 10274  00DC  00A0               	movwf	___lwdiv@divisor
 10275  00DD  3000               	movlw	0
 10276  00DE  00A1               	movwf	___lwdiv@divisor+1
 10277  00DF  0022               	movlb	2	; select bank2
 10278  00E0  082D               	movf	((_Load+1)^(0+256)+7),w
 10279  00E1  0020               	movlb	0	; select bank0
 10280  00E2  01A3               	clrf	___lwdiv@dividend+1
 10281  00E3  07A3               	addwf	___lwdiv@dividend+1,f
 10282  00E4  0022               	movlb	2	; select bank2
 10283  00E5  082C               	movf	(_Load^(0+256)+7),w
 10284  00E6  0020               	movlb	0	; select bank0
 10285  00E7  01A2               	clrf	___lwdiv@dividend
 10286  00E8  07A2               	addwf	___lwdiv@dividend,f
 10287  00E9  3193  230D  3180   	fcall	___lwdiv
 10288  00EC  0020               	movlb	0	; select bank0
 10289  00ED  0821               	movf	?___lwdiv+1,w
 10290  00EE  0022               	movlb	2	; select bank2
 10291  00EF  01AD               	clrf	((_Load+1)^(0+256)+7)
 10292  00F0  07AD               	addwf	((_Load+1)^(0+256)+7),f
 10293  00F1  0020               	movlb	0	; select bank0
 10294  00F2  0820               	movf	?___lwdiv,w
 10295  00F3  0022               	movlb	2	; select bank2
 10296  00F4  01AC               	clrf	(_Load^(0+256)+7)
 10297  00F5  07AC               	addwf	(_Load^(0+256)+7),f
 10298                           
 10299                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10300  00F6  319E  269F  3180   	fcall	_setLoad_AH_AL_Restore
 10301                           
 10302                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10303  00F9  0022               	movlb	2	; select bank2
 10304  00FA  082B               	movf	((_Load+1)^(0+256)+5),w
 10305  00FB  022D               	subwf	((_Load+1)^(0+256)+7),w
 10306  00FC  1D03               	skipz
 10307  00FD  2900               	goto	u7765
 10308  00FE  082A               	movf	(_Load^(0+256)+5),w
 10309  00FF  022C               	subwf	(_Load^(0+256)+7),w
 10310  0100                     u7765:	
 10311  0100  1803               	skipnc
 10312  0101  0008               	return
 10313                           
 10314                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10315  0102  3005               	movlw	5
 10316  0103  3E25               	addlw	_Load& (0+255)
 10317  0104  0086               	movwf	6
 10318  0105  3001               	movlw	1	; select bank2/3
 10319  0106  0087               	movwf	7
 10320  0107  092C               	comf	(_Load^(0+256)+7),w
 10321  0108  0020               	movlb	0	; select bank0
 10322  0109  00A9               	movwf	??_Load_Main
 10323  010A  0022               	movlb	2	; select bank2
 10324  010B  092D               	comf	((_Load+1)^(0+256)+7),w
 10325  010C  0020               	movlb	0	; select bank0
 10326  010D  00AA               	movwf	??_Load_Main+1
 10327  010E  0AA9               	incf	??_Load_Main,f
 10328  010F  1903               	skipnz
 10329  0110  0AAA               	incf	??_Load_Main+1,f
 10330  0111  3F40               	moviw [0]fsr1
 10331  0112  0729               	addwf	??_Load_Main,w
 10332  0113  0022               	movlb	2	; select bank2
 10333  0114  00C4               	movwf	(_Load^(0+256)+31)
 10334  0115  3F41               	moviw [1]fsr1
 10335  0116  0020               	movlb	0	; select bank0
 10336  0117  3D2A               	addwfc	??_Load_Main+1,w
 10337  0118  0022               	movlb	2	; select bank2
 10338  0119  00C5               	movwf	(_Load^(0+256)+32)
 10339                           
 10340                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10341  011A  01AA               	clrf	(_Load^(0+256)+5)
 10342  011B  01AB               	clrf	((_Load+1)^(0+256)+5)
 10343                           
 10344                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10345  011C  01AC               	clrf	(_Load^(0+256)+7)
 10346  011D  01AD               	clrf	((_Load+1)^(0+256)+7)
 10347                           
 10348                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10349  011E  319D  252A  3180   	fcall	_getMain_Lights_Count
 10350  0121  0020               	movlb	0	; select bank0
 10351  0122  00A9               	movwf	??_Load_Main
 10352  0123  0829               	movf	??_Load_Main,w
 10353  0124  0022               	movlb	2	; select bank2
 10354  0125  00D1               	movwf	(_Load^(0+256)+44)
 10355                           
 10356                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10357  0126  1DA5               	btfss	_Load^(0+256),3
 10358  0127  2953               	goto	l7779
 10359                           
 10360                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10361  0128  3002               	movlw	2
 10362  0129  024E               	subwf	(_Load^(0+256)+41),w
 10363  012A  1803               	skipnc
 10364  012B  2953               	goto	l7779
 10365                           
 10366                           ;OverLoad_B1.c: 79: Load.Count++;
 10367  012C  3001               	movlw	1
 10368  012D  0020               	movlb	0	; select bank0
 10369  012E  00A9               	movwf	??_Load_Main
 10370  012F  0829               	movf	??_Load_Main,w
 10371  0130  0022               	movlb	2	; select bank2
 10372  0131  07CE               	addwf	(_Load^(0+256)+41),f
 10373                           
 10374                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10375  0132  084E               	movf	(_Load^(0+256)+41),w
 10376  0133  3A01               	xorlw	1
 10377  0134  1D03               	skipz
 10378  0135  2940               	goto	l7771
 10379                           
 10380                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10381  0136  3002               	movlw	2
 10382  0137  0020               	movlb	0	; select bank0
 10383  0138  00A9               	movwf	??_Load_Main
 10384  0139  0829               	movf	??_Load_Main,w
 10385  013A  0022               	movlb	2	; select bank2
 10386  013B  00D0               	movwf	(_Load^(0+256)+43)
 10387                           
 10388                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*57);
 10389  013C  3074               	movlw	116
 10390  013D  00CA               	movwf	(_Load^(0+256)+37)
 10391  013E  3004               	movlw	4
 10392  013F  294B               	goto	L6
 10393  0140                     l7771:	
 10394                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10395                           
 10396  0140  084E               	movf	(_Load^(0+256)+41),w
 10397  0141  3A02               	xorlw	2
 10398  0142  1D03               	skipz
 10399  0143  2953               	goto	l7779
 10400                           
 10401                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10402  0144  0851               	movf	(_Load^(0+256)+44),w
 10403  0145  3A01               	xorlw	1
 10404  0146  1D03               	skipz
 10405  0147  294D               	goto	l7777
 10406                           
 10407                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(2.5*57);
 10408  0148  308E               	movlw	142
 10409  0149  00CA               	movwf	(_Load^(0+256)+37)
 10410  014A  3000               	movlw	0
 10411  014B                     L6:	
 10412  014B  00CB               	movwf	(_Load^(0+256)+38)
 10413                           
 10414                           ;OverLoad_B1.c: 86: } else {
 10415  014C  2953               	goto	l7779
 10416  014D                     l7777:	
 10417                           
 10418                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
 10419  014D  082E               	movf	(_Load^(0+256)+9),w
 10420  014E  3E8E               	addlw	142
 10421  014F  00CA               	movwf	(_Load^(0+256)+37)
 10422  0150  3000               	movlw	0
 10423  0151  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10424  0152  00CB               	movwf	((_Load+1)^(0+256)+37)
 10425  0153                     l7779:	
 10426                           
 10427                           ;OverLoad_B1.c: 88: }
 10428                           ;OverLoad_B1.c: 89: }
 10429                           ;OverLoad_B1.c: 90: }
 10430                           ;OverLoad_B1.c: 91: }
 10431                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10432  0153  084B               	movf	((_Load+1)^(0+256)+37),w
 10433  0154  0245               	subwf	((_Load+1)^(0+256)+31),w
 10434  0155  1D03               	skipz
 10435  0156  2959               	goto	u7825
 10436  0157  084A               	movf	(_Load^(0+256)+37),w
 10437  0158  0244               	subwf	(_Load^(0+256)+31),w
 10438  0159                     u7825:	
 10439  0159  1C03               	skipc
 10440  015A  2968               	goto	l7789
 10441                           
 10442                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10443  015B  3001               	movlw	1
 10444  015C  0020               	movlb	0	; select bank0
 10445  015D  00A9               	movwf	??_Load_Main
 10446  015E  0829               	movf	??_Load_Main,w
 10447  015F  0022               	movlb	2	; select bank2
 10448  0160  07CF               	addwf	(_Load^(0+256)+42),f
 10449                           
 10450                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10451  0161  084F               	movf	(_Load^(0+256)+42),w
 10452  0162  0250               	subwf	(_Load^(0+256)+43),w
 10453  0163  1803               	skipnc
 10454  0164  0008               	return
 10455                           
 10456                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10457  0165  01CF               	clrf	(_Load^(0+256)+42)
 10458                           
 10459                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10460  0166  16A5               	bsf	_Load^(0+256),5
 10461                           
 10462                           ;OverLoad_B1.c: 118: }
 10463                           ;OverLoad_B1.c: 119: } else {
 10464  0167  0008               	return
 10465  0168                     l7789:	
 10466                           
 10467                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10468  0168  01CF               	clrf	(_Load^(0+256)+42)
 10469                           
 10470                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10471  0169  1DA5               	btfss	_Load^(0+256),3
 10472  016A  0008               	return
 10473                           
 10474                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10475  016B  1BA5               	btfsc	_Load^(0+256),7
 10476  016C  0008               	return
 10477                           
 10478                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10479  016D  3001               	movlw	1
 10480  016E  0020               	movlb	0	; select bank0
 10481  016F  00A9               	movwf	??_Load_Main
 10482  0170  0829               	movf	??_Load_Main,w
 10483  0171  0022               	movlb	2	; select bank2
 10484  0172  07D2               	addwf	(_Load^(0+256)+45),f
 10485                           
 10486                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10487  0173  3003               	movlw	3
 10488  0174  0252               	subwf	(_Load^(0+256)+45),w
 10489  0175  1C03               	skipc
 10490  0176  0008               	return
 10491                           
 10492                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10493  0177  01D2               	clrf	(_Load^(0+256)+45)
 10494                           
 10495                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10496  0178  17A5               	bsf	_Load^(0+256),7
 10497                           
 10498                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10499  0179  11A5               	bcf	_Load^(0+256),3
 10500                           
 10501                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10502  017A  01CE               	clrf	(_Load^(0+256)+41)
 10503                           
 10504                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10505  017B  0845               	movf	((_Load+1)^(0+256)+31),w
 10506  017C  01AF               	clrf	((_Load+1)^(0+256)+9)
 10507  017D  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10508  017E  0844               	movf	(_Load^(0+256)+31),w
 10509  017F  01AE               	clrf	(_Load^(0+256)+9)
 10510  0180  07AE               	addwf	(_Load^(0+256)+9),f
 10511                           
 10512                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10513  0181  3003               	movlw	3
 10514  0182  0020               	movlb	0	; select bank0
 10515  0183  00A9               	movwf	??_Load_Main
 10516  0184  0829               	movf	??_Load_Main,w
 10517  0185  0022               	movlb	2	; select bank2
 10518  0186  00D0               	movwf	(_Load^(0+256)+43)
 10519                           
 10520                           ;OverLoad_B1.c: 154: }
 10521                           ;OverLoad_B1.c: 155: }
 10522                           ;OverLoad_B1.c: 156: }
 10523                           ;OverLoad_B1.c: 157: }
 10524                           ;OverLoad_B1.c: 158: }
 10525                           ;OverLoad_B1.c: 159: }
 10526                           ;OverLoad_B1.c: 160: } else {
 10527  0187  0008               	return
 10528  0188                     l1546:	
 10529                           
 10530                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10531  0188  1625               	bsf	_Load^(0+256),4
 10532                           
 10533                           ;OverLoad_B1.c: 162: }
 10534                           ;OverLoad_B1.c: 163: } else {
 10535  0189  0008               	return
 10536  018A                     l1545:	
 10537                           
 10538                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10539  018A  1D25               	btfss	_Load^(0+256),2
 10540  018B  29A8               	goto	l7839
 10541  018C  0020               	movlb	0	; select bank0
 10542  018D  082E               	movf	Load_Main@error,w
 10543  018E  3A03               	xorlw	3
 10544  018F  1903               	skipnz
 10545  0190  29A8               	goto	l7839
 10546                           
 10547                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10548  0191  0022               	movlb	2	; select bank2
 10549  0192  1125               	bcf	_Load^(0+256),2
 10550                           
 10551                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10552  0193  01A6               	clrf	(_Load^(0+256)+1)
 10553  0194  01A7               	clrf	((_Load+1)^(0+256)+1)
 10554                           
 10555                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10556  0195  1225               	bcf	_Load^(0+256),4
 10557                           
 10558                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10559  0196  319E  269F  3180   	fcall	_setLoad_AH_AL_Restore
 10560                           
 10561                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10562  0199  0022               	movlb	2	; select bank2
 10563  019A  01CE               	clrf	(_Load^(0+256)+41)
 10564                           
 10565                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10566  019B  01CF               	clrf	(_Load^(0+256)+42)
 10567                           
 10568                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10569  019C  01D2               	clrf	(_Load^(0+256)+45)
 10570                           
 10571                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10572  019D  01AA               	clrf	(_Load^(0+256)+5)
 10573  019E  01AB               	clrf	((_Load+1)^(0+256)+5)
 10574                           
 10575                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10576  019F  01AC               	clrf	(_Load^(0+256)+7)
 10577  01A0  01AD               	clrf	((_Load+1)^(0+256)+7)
 10578                           
 10579                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10580  01A1  01C4               	clrf	(_Load^(0+256)+31)
 10581  01A2  01C5               	clrf	((_Load+1)^(0+256)+31)
 10582                           
 10583                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10584  01A3  01CA               	clrf	(_Load^(0+256)+37)
 10585  01A4  01CB               	clrf	((_Load+1)^(0+256)+37)
 10586                           
 10587                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10588  01A5  01D1               	clrf	(_Load^(0+256)+44)
 10589                           
 10590                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10591  01A6  11A5               	bcf	_Load^(0+256),3
 10592                           
 10593                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10594  01A7  17A5               	bsf	_Load^(0+256),7
 10595  01A8                     l7839:	
 10596                           
 10597                           ;OverLoad_B1.c: 201: }
 10598                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10599  01A8  0022               	movlb	2	; select bank2
 10600  01A9  1EA5               	btfss	_Load^(0+256),5
 10601  01AA  0008               	return
 10602                           
 10603                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10604  01AB  3001               	movlw	1
 10605  01AC  07A8               	addwf	(_Load^(0+256)+3),f
 10606  01AD  3000               	movlw	0
 10607  01AE  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10608                           
 10609                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10610  01AF  3003               	movlw	3
 10611  01B0  0229               	subwf	((_Load+1)^(0+256)+3),w
 10612  01B1  30E8               	movlw	232
 10613  01B2  1903               	skipnz
 10614  01B3  0228               	subwf	(_Load^(0+256)+3),w
 10615  01B4  1C03               	skipc
 10616  01B5  0008               	return
 10617                           
 10618                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10619  01B6  01A8               	clrf	(_Load^(0+256)+3)
 10620  01B7  01A9               	clrf	((_Load+1)^(0+256)+3)
 10621                           
 10622                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10623  01B8  12A5               	bcf	_Load^(0+256),5
 10624                           
 10625                           ;OverLoad_B1.c: 207: }
 10626                           ;OverLoad_B1.c: 208: }
 10627                           ;OverLoad_B1.c: 209: }
 10628                           ;OverLoad_B1.c: 210: } else {
 10629  01B9  0008               	return
 10630  01BA                     l1541:	
 10631                           
 10632                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10633  01BA  0021               	movlb	1	; select bank1
 10634  01BB  1C20               	btfss	_myMain^(0+128),0
 10635  01BC  0008               	return
 10636                           
 10637                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10638  01BD  0022               	movlb	2	; select bank2
 10639  01BE  1425               	bsf	_Load^(0+256),0
 10640  01BF  0008               	return
 10641  01C0                     __end_of_Load_Main:	
 10642                           
 10643                           	psect	text54
 10644  1CCF                     __ptext54:	
 10645 ;; *************** function _getMain_LoadOK *****************
 10646 ;; Defined at:
 10647 ;;		line 440 in file "../src/Main_B1.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;		None
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;  ok              1    2[BANK0 ] unsigned char 
 10652 ;; Return value:  Size  Location     Type
 10653 ;;                  1    wreg      unsigned char 
 10654 ;; Registers used:
 10655 ;;		wreg, status,2, pclath, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;Total ram usage:        2 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    6
 10668 ;; This function calls:
 10669 ;;		_getDimmer_LoadOK
 10670 ;; This function is called by:
 10671 ;;		_Load_Main
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _getMain_LoadOK
 10677  1CCF                     _getMain_LoadOK:	
 10678                           
 10679                           ;Main_B1.c: 441: char ok = 0;
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10683  1CCF  0020               	movlb	0	; select bank0
 10684  1CD0  01A2               	clrf	getMain_LoadOK@ok
 10685                           
 10686                           ;Main_B1.c: 447: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10687  1CD1  319B  23F6         	fcall	_getDimmer_LoadOK
 10688  1CD3  3A01               	xorlw	1
 10689  1CD4  3000               	movlw	0
 10690  1CD5  1903               	skipnz
 10691  1CD6  3001               	movlw	1
 10692  1CD7  0020               	movlb	0	; select bank0
 10693  1CD8  00A1               	movwf	??_getMain_LoadOK
 10694  1CD9  0821               	movf	??_getMain_LoadOK,w
 10695  1CDA  00A2               	movwf	getMain_LoadOK@ok
 10696                           
 10697                           ;Main_B1.c: 449: return ok;
 10698  1CDB  0822               	movf	getMain_LoadOK@ok,w
 10699  1CDC  0008               	return
 10700  1CDD                     __end_of_getMain_LoadOK:	
 10701                           
 10702                           	psect	text55
 10703  1BF6                     __ptext55:	
 10704 ;; *************** function _getDimmer_LoadOK *****************
 10705 ;; Defined at:
 10706 ;;		line 599 in file "../src/Dimmer_B1.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;		None
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  status          1    0[BANK0 ] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      unsigned char 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        1 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    5
 10727 ;; This function calls:
 10728 ;;		Nothing
 10729 ;; This function is called by:
 10730 ;;		_getMain_LoadOK
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           
 10735                           ;psect for function _getDimmer_LoadOK
 10736  1BF6                     _getDimmer_LoadOK:	
 10737                           
 10738                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10739                           
 10740                           ;incstack = 0
 10741                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10742  1BF6  3000               	movlw	0
 10743  1BF7  0022               	movlb	2	; select bank2
 10744  1BF8  18A0               	btfsc	_Dimmer^(0+256),1
 10745  1BF9  3001               	movlw	1
 10746  1BFA  0020               	movlb	0	; select bank0
 10747  1BFB  00A0               	movwf	getDimmer_LoadOK@status
 10748                           
 10749                           ;Dimmer_B1.c: 601: return status;
 10750  1BFC  0820               	movf	getDimmer_LoadOK@status,w
 10751  1BFD  0008               	return
 10752  1BFE                     __end_of_getDimmer_LoadOK:	
 10753                           
 10754                           	psect	text56
 10755  1D2A                     __ptext56:	
 10756 ;; *************** function _getMain_Lights_Count *****************
 10757 ;; Defined at:
 10758 ;;		line 410 in file "../src/Main_B1.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;  status1         1    3[BANK0 ] unsigned char 
 10763 ;;  status3         1    2[BANK0 ] unsigned char 
 10764 ;;  status2         1    1[BANK0 ] unsigned char 
 10765 ;;  count           1    0[BANK0 ] unsigned char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      unsigned char 
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        4 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    5
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_Load_Main
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _getMain_Lights_Count
 10791  1D2A                     _getMain_Lights_Count:	
 10792                           
 10793                           ;Main_B1.c: 411: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10797  1D2A  0020               	movlb	0	; select bank0
 10798  1D2B  01A3               	clrf	getMain_Lights_Count@status1
 10799  1D2C  01A1               	clrf	getMain_Lights_Count@status2
 10800  1D2D  01A2               	clrf	getMain_Lights_Count@status3
 10801  1D2E  01A0               	clrf	getMain_Lights_Count@count
 10802                           
 10803                           ;Main_B1.c: 415: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10804  1D2F  3000               	movlw	0
 10805  1D30  0022               	movlb	2	; select bank2
 10806  1D31  18DC               	btfsc	(_DimmerLights1^(0+256)+9),1
 10807  1D32  3001               	movlw	1
 10808  1D33  0020               	movlb	0	; select bank0
 10809  1D34  00A3               	movwf	getMain_Lights_Count@status1
 10810                           
 10811                           ;Main_B1.c: 436: return count = (status1 + status2 + status3);
 10812  1D35  0823               	movf	getMain_Lights_Count@status1,w
 10813  1D36  0721               	addwf	getMain_Lights_Count@status2,w
 10814  1D37  0722               	addwf	getMain_Lights_Count@status3,w
 10815  1D38  00A0               	movwf	getMain_Lights_Count@count
 10816  1D39  0008               	return
 10817  1D3A                     __end_of_getMain_Lights_Count:	
 10818                           
 10819                           	psect	text57
 10820  1C23                     __ptext57:	
 10821 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10822 ;; Defined at:
 10823 ;;		line 490 in file "../src/Dimmer_B1.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;		None
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  1    wreg      unsigned char 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;Total ram usage:        1 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    5
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_setDimmerLights_SwOn
 10848 ;;		_setDimmerLights_AdjControl
 10849 ;;		_Load_Main
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _getAll_DimmerLights_AdjGO
 10855  1C23                     _getAll_DimmerLights_AdjGO:	
 10856                           
 10857                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10861  1C23  0020               	movlb	0	; select bank0
 10862  1C24  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10863                           
 10864                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10865  1C25  3000               	movlw	0
 10866  1C26  0022               	movlb	2	; select bank2
 10867  1C27  19DB               	btfsc	(_DimmerLights1^(0+256)+8),3
 10868  1C28  3001               	movlw	1
 10869  1C29  0020               	movlb	0	; select bank0
 10870  1C2A  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10871                           
 10872                           ;Dimmer_B1.c: 501: return adjgo;
 10873  1C2B  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10874  1C2C  0008               	return
 10875  1C2D                     __end_of_getAll_DimmerLights_AdjGO:	
 10876                           
 10877                           	psect	text58
 10878  130D                     __ptext58:	
 10879 ;; *************** function ___lwdiv *****************
 10880 ;; Defined at:
 10881 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  divisor         2    0[BANK0 ] unsigned int 
 10884 ;;  dividend        2    2[BANK0 ] unsigned int 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  quotient        2    5[BANK0 ] unsigned int 
 10887 ;;  counter         1    7[BANK0 ] unsigned char 
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  2    0[BANK0 ] unsigned int 
 10890 ;; Registers used:
 10891 ;;		wreg, status,2, status,0
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;Total ram usage:        8 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; Hardware stack levels required when called:    5
 10904 ;; This function calls:
 10905 ;;		Nothing
 10906 ;; This function is called by:
 10907 ;;		_Load_Main
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function ___lwdiv
 10913  130D                     ___lwdiv:	
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10917  130D  0020               	movlb	0	; select bank0
 10918  130E  01A5               	clrf	___lwdiv@quotient
 10919  130F  01A6               	clrf	___lwdiv@quotient+1
 10920  1310  0821               	movf	___lwdiv@divisor+1,w
 10921  1311  0420               	iorwf	___lwdiv@divisor,w
 10922  1312  1903               	skipnz
 10923  1313  2B3D               	goto	l7407
 10924  1314  01A7               	clrf	___lwdiv@counter
 10925  1315  0AA7               	incf	___lwdiv@counter,f
 10926  1316                     l7395:	
 10927  1316  1BA1               	btfsc	___lwdiv@divisor+1,7
 10928  1317  2B22               	goto	l7397
 10929  1318  3001               	movlw	1
 10930  1319                     u7135:	
 10931  1319  35A0               	lslf	___lwdiv@divisor,f
 10932  131A  0DA1               	rlf	___lwdiv@divisor+1,f
 10933  131B  0B89               	decfsz	9,f
 10934  131C  2B19               	goto	u7135
 10935  131D  3001               	movlw	1
 10936  131E  00A4               	movwf	??___lwdiv
 10937  131F  0824               	movf	??___lwdiv,w
 10938  1320  07A7               	addwf	___lwdiv@counter,f
 10939  1321  2B16               	goto	l7395
 10940  1322                     l7397:	
 10941  1322  3001               	movlw	1
 10942  1323                     u7155:	
 10943  1323  35A5               	lslf	___lwdiv@quotient,f
 10944  1324  0DA6               	rlf	___lwdiv@quotient+1,f
 10945  1325  0B89               	decfsz	9,f
 10946  1326  2B23               	goto	u7155
 10947  1327  0821               	movf	___lwdiv@divisor+1,w
 10948  1328  0223               	subwf	___lwdiv@dividend+1,w
 10949  1329  1D03               	skipz
 10950  132A  2B2D               	goto	u7165
 10951  132B  0820               	movf	___lwdiv@divisor,w
 10952  132C  0222               	subwf	___lwdiv@dividend,w
 10953  132D                     u7165:	
 10954  132D  1C03               	skipc
 10955  132E  2B34               	goto	l7403
 10956  132F  0820               	movf	___lwdiv@divisor,w
 10957  1330  02A2               	subwf	___lwdiv@dividend,f
 10958  1331  0821               	movf	___lwdiv@divisor+1,w
 10959  1332  3BA3               	subwfb	___lwdiv@dividend+1,f
 10960  1333  1425               	bsf	___lwdiv@quotient,0
 10961  1334                     l7403:	
 10962  1334  3001               	movlw	1
 10963  1335                     u7175:	
 10964  1335  36A1               	lsrf	___lwdiv@divisor+1,f
 10965  1336  0CA0               	rrf	___lwdiv@divisor,f
 10966  1337  0B89               	decfsz	9,f
 10967  1338  2B35               	goto	u7175
 10968  1339  3001               	movlw	1
 10969  133A  02A7               	subwf	___lwdiv@counter,f
 10970  133B  1D03               	btfss	3,2
 10971  133C  2B22               	goto	l7397
 10972  133D                     l7407:	
 10973  133D  0826               	movf	___lwdiv@quotient+1,w
 10974  133E  01A1               	clrf	?___lwdiv+1
 10975  133F  07A1               	addwf	?___lwdiv+1,f
 10976  1340  0825               	movf	___lwdiv@quotient,w
 10977  1341  01A0               	clrf	?___lwdiv
 10978  1342  07A0               	addwf	?___lwdiv,f
 10979  1343  0008               	return
 10980  1344                     __end_of___lwdiv:	
 10981                           
 10982                           	psect	text59
 10983  1BD0                     __ptext59:	
 10984 ;; *************** function _Load_Initialization *****************
 10985 ;; Defined at:
 10986 ;;		line 9 in file "../src/OverLoad_B1.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;		None               void
 10993 ;; Registers used:
 10994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    6
 11007 ;; This function calls:
 11008 ;;		_setLoad_AH_AL_Restore
 11009 ;; This function is called by:
 11010 ;;		_main
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           
 11015                           ;psect for function _Load_Initialization
 11016  1BD0                     _Load_Initialization:	
 11017                           
 11018                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11022  1BD0  0022               	movlb	2	; select bank2
 11023  1BD1  17A5               	bsf	_Load^(0+256),7
 11024                           
 11025                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11026  1BD2  319E  269F         	fcall	_setLoad_AH_AL_Restore
 11027  1BD4  0008               	return
 11028  1BD5                     __end_of_Load_Initialization:	
 11029                           
 11030                           	psect	text60
 11031  1E9F                     __ptext60:	
 11032 ;; *************** function _setLoad_AH_AL_Restore *****************
 11033 ;; Defined at:
 11034 ;;		line 239 in file "../src/OverLoad_B1.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;  i               1    1[BANK0 ] unsigned char 
 11039 ;; Return value:  Size  Location     Type
 11040 ;;		None               void
 11041 ;; Registers used:
 11042 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;Total ram usage:        2 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; Hardware stack levels required when called:    5
 11055 ;; This function calls:
 11056 ;;		Nothing
 11057 ;; This function is called by:
 11058 ;;		_Load_Initialization
 11059 ;;		_Load_Main
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           
 11064                           ;psect for function _setLoad_AH_AL_Restore
 11065  1E9F                     _setLoad_AH_AL_Restore:	
 11066                           
 11067                           ;OverLoad_B1.c: 240: char i;
 11068                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11069                           
 11070                           ;incstack = 0
 11071                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11072  1E9F  0020               	movlb	0	; select bank0
 11073  1EA0  01A1               	clrf	setLoad_AH_AL_Restore@i
 11074  1EA1                     L7:	
 11075  1EA1  3005               	movlw	5
 11076  1EA2  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11077  1EA3  1803               	btfsc	3,0
 11078  1EA4  0008               	return
 11079                           
 11080                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11081  1EA5  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11082  1EA6  3E30               	addlw	(_Load+11)& (0+255)
 11083  1EA7  0086               	movwf	6
 11084  1EA8  3001               	movlw	1	; select bank2/3
 11085  1EA9  0087               	movwf	7
 11086  1EAA  3000               	movlw	0
 11087  1EAB  3FC0               	movwi [0]fsr1
 11088  1EAC  3FC1               	movwi [1]fsr1
 11089                           
 11090                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11091  1EAD  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11092  1EAE  3E3A               	addlw	(_Load+21)& (0+255)
 11093  1EAF  0086               	movwf	6
 11094  1EB0  3001               	movlw	1	; select bank2/3
 11095  1EB1  0087               	movwf	7
 11096  1EB2  30FF               	movlw	255
 11097  1EB3  3FC0               	movwi [0]fsr1
 11098  1EB4  30FF               	movlw	255
 11099  1EB5  3FC1               	movwi [1]fsr1
 11100  1EB6  3001               	movlw	1
 11101  1EB7  00A0               	movwf	??_setLoad_AH_AL_Restore
 11102  1EB8  0820               	movf	??_setLoad_AH_AL_Restore,w
 11103  1EB9  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11104  1EBA  2EA1               	goto	L7
 11105  1EBB                     __end_of_setLoad_AH_AL_Restore:	
 11106                           
 11107                           	psect	text61
 11108  1BC3                     __ptext61:	
 11109 ;; *************** function _LED_Main *****************
 11110 ;; Defined at:
 11111 ;;		line 47 in file "../src/LED_B1.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;		None
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;		None               void
 11118 ;; Registers used:
 11119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;Total ram usage:        0 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    7
 11132 ;; This function calls:
 11133 ;;		_setLED_Main
 11134 ;; This function is called by:
 11135 ;;		_main
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           
 11140                           ;psect for function _LED_Main
 11141  1BC3                     _LED_Main:	
 11142                           
 11143                           ;LED_B1.c: 62: setLED_Main(99);
 11144                           
 11145                           ;incstack = 0
 11146                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11147  1BC3  3063               	movlw	99
 11148  1BC4  3192  2203         	fcall	_setLED_Main
 11149  1BC6  0008               	return
 11150  1BC7                     __end_of_LED_Main:	
 11151                           
 11152                           	psect	text62
 11153  1203                     __ptext62:	
 11154 ;; *************** function _setLED_Main *****************
 11155 ;; Defined at:
 11156 ;;		line 221 in file "../src/LED_B1.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;  led             1    wreg     unsigned char 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;  led             1    4[BANK0 ] unsigned char 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;		None               void
 11163 ;; Registers used:
 11164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        3 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    6
 11177 ;; This function calls:
 11178 ;;		_LedPointSelect
 11179 ;; This function is called by:
 11180 ;;		_LED_Main
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function _setLED_Main
 11186  1203                     _setLED_Main:	
 11187                           
 11188                           ;incstack = 0
 11189                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11190                           ;setLED_Main@led stored from wreg
 11191  1203  0020               	movlb	0	; select bank0
 11192  1204  00A4               	movwf	setLED_Main@led
 11193                           
 11194                           ;LED_B1.c: 222: LedPointSelect(led);
 11195  1205  0824               	movf	setLED_Main@led,w
 11196  1206  319C  244E  3192   	fcall	_LedPointSelect
 11197                           
 11198                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11199  1209  087A               	movf	_LED,w
 11200  120A  0086               	movwf	6
 11201  120B  3001               	movlw	1	; select bank2/3
 11202  120C  0087               	movwf	7
 11203  120D  1C81               	btfss	1,1
 11204  120E  0008               	return
 11205                           
 11206                           ;LED_B1.c: 224: LED->Time++;
 11207  120F  0A7A               	incf	_LED,w
 11208  1210  0086               	movwf	6
 11209  1211  3001               	movlw	1	; select bank2/3
 11210  1212  0087               	movwf	7
 11211  1213  3001               	movlw	1
 11212  1214  0781               	addwf	1,f
 11213  1215  3141               	addfsr 1,1
 11214  1216  1803               	skipnc
 11215  1217  0A81               	incf	1,f
 11216                           
 11217                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11218  1218  0A7A               	incf	_LED,w
 11219  1219  0086               	movwf	6
 11220  121A  3001               	movlw	1	; select bank2/3
 11221  121B  0087               	movwf	7
 11222  121C  3F40               	moviw [0]fsr1
 11223  121D  0020               	movlb	0	; select bank0
 11224  121E  00A2               	movwf	??_setLED_Main
 11225  121F  3F41               	moviw [1]fsr1
 11226  1220  00A3               	movwf	??_setLED_Main+1
 11227  1221  3000               	movlw	0
 11228  1222  0223               	subwf	??_setLED_Main+1,w
 11229  1223  3032               	movlw	50
 11230  1224  1903               	skipnz
 11231  1225  0222               	subwf	??_setLED_Main,w
 11232  1226  1C03               	skipc
 11233  1227  0008               	return
 11234                           
 11235                           ;LED_B1.c: 226: LED->Time = 0;
 11236  1228  0A7A               	incf	_LED,w
 11237  1229  0086               	movwf	6
 11238  122A  3001               	movlw	1	; select bank2/3
 11239  122B  0087               	movwf	7
 11240  122C  3000               	movlw	0
 11241  122D  3FC0               	movwi [0]fsr1
 11242  122E  3FC1               	movwi [1]fsr1
 11243                           
 11244                           ;LED_B1.c: 243: if (led == 99) {
 11245  122F  0824               	movf	setLED_Main@led,w
 11246  1230  3A63               	xorlw	99
 11247  1231  1D03               	skipz
 11248  1232  0008               	return
 11249                           
 11250                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11251  1233  3020               	movlw	32
 11252  1234  068D               	xorwf	13,f
 11253  1235  0008               	return
 11254  1236                     __end_of_setLED_Main:	
 11255                           
 11256                           	psect	text63
 11257  1BBF                     __ptext63:	
 11258 ;; *************** function _LED_Initialization *****************
 11259 ;; Defined at:
 11260 ;;		line 31 in file "../src/LED_B1.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;		None               void
 11267 ;; Registers used:
 11268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;Total ram usage:        0 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    8
 11281 ;; This function calls:
 11282 ;;		_setLED_Initialization
 11283 ;; This function is called by:
 11284 ;;		_main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _LED_Initialization
 11290  1BBF                     _LED_Initialization:	
 11291                           
 11292                           ;LED_B1.c: 42: setLED_Initialization(99);
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11296  1BBF  3063               	movlw	99
 11297  1BC0  319D  254A         	fcall	_setLED_Initialization
 11298  1BC2  0008               	return
 11299  1BC3                     __end_of_LED_Initialization:	
 11300                           
 11301                           	psect	text64
 11302  1D4A                     __ptext64:	
 11303 ;; *************** function _setLED_Initialization *****************
 11304 ;; Defined at:
 11305 ;;		line 69 in file "../src/LED_B1.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;  led             1    wreg     unsigned char 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;  led             1    4[BANK0 ] unsigned char 
 11310 ;; Return value:  Size  Location     Type
 11311 ;;		None               void
 11312 ;; Registers used:
 11313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;Total ram usage:        1 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    7
 11326 ;; This function calls:
 11327 ;;		_LedPointSelect
 11328 ;;		_setLED
 11329 ;; This function is called by:
 11330 ;;		_LED_Initialization
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           
 11335                           ;psect for function _setLED_Initialization
 11336  1D4A                     _setLED_Initialization:	
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11340                           ;setLED_Initialization@led stored from wreg
 11341  1D4A  0020               	movlb	0	; select bank0
 11342  1D4B  00A4               	movwf	setLED_Initialization@led
 11343                           
 11344                           ;LED_B1.c: 70: LedPointSelect(led);
 11345  1D4C  0824               	movf	setLED_Initialization@led,w
 11346  1D4D  319C  244E  319D   	fcall	_LedPointSelect
 11347                           
 11348                           ;LED_B1.c: 71: LED->Enable = 1;
 11349  1D50  087A               	movf	_LED,w
 11350  1D51  0086               	movwf	6
 11351  1D52  3001               	movlw	1	; select bank2/3
 11352  1D53  0087               	movwf	7
 11353  1D54  1401               	bsf	1,0
 11354                           
 11355                           ;LED_B1.c: 72: setLED(led, 0);
 11356  1D55  0020               	movlb	0	; select bank0
 11357  1D56  01A2               	clrf	setLED@command
 11358  1D57  0824               	movf	setLED_Initialization@led,w
 11359  1D58  3192  226B         	fcall	_setLED
 11360  1D5A  0008               	return
 11361  1D5B                     __end_of_setLED_Initialization:	
 11362                           
 11363                           	psect	text65
 11364  12A1                     __ptext65:	
 11365 ;; *************** function _Flash_Memory_Main *****************
 11366 ;; Defined at:
 11367 ;;		line 926 in file "../src/MCU_B1.c"
 11368 ;; Parameters:    Size  Location     Type
 11369 ;;		None
 11370 ;; Auto vars:     Size  Location     Type
 11371 ;;		None
 11372 ;; Return value:  Size  Location     Type
 11373 ;;		None               void
 11374 ;; Registers used:
 11375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11376 ;; Tracked objects:
 11377 ;;		On entry : 0/0
 11378 ;;		On exit  : 0/0
 11379 ;;		Unchanged: 0/0
 11380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;Total ram usage:        1 bytes
 11386 ;; Hardware stack levels used:    1
 11387 ;; Hardware stack levels required when called:    8
 11388 ;; This function calls:
 11389 ;;		_Flash_Memory_Modify
 11390 ;;		_getMain_LightsStatus
 11391 ;; This function is called by:
 11392 ;;		_main
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _Flash_Memory_Main
 11398  12A1                     _Flash_Memory_Main:	
 11399                           
 11400                           ;MCU_B1.c: 927: if (Memory.Modify == 1) {
 11401                           
 11402                           ;incstack = 0
 11403                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11404  12A1  0023               	movlb	3	; select bank3
 11405  12A2  1C62               	btfss	(_Memory^(0+384)+36),0
 11406  12A3  0008               	return
 11407                           
 11408                           ;MCU_B1.c: 928: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11409  12A4  3187  27D4  3192   	fcall	_getMain_LightsStatus
 11410  12A7  3A00               	xorlw	0
 11411  12A8  3000               	movlw	0
 11412  12A9  1903               	skipnz
 11413  12AA  3001               	movlw	1
 11414  12AB  0020               	movlb	0	; select bank0
 11415  12AC  00A9               	movwf	??_Flash_Memory_Main
 11416  12AD  0DA9               	rlf	??_Flash_Memory_Main,f
 11417  12AE  0023               	movlb	3	; select bank3
 11418  12AF  0862               	movf	(_Memory^(0+384)+36),w
 11419  12B0  0020               	movlb	0	; select bank0
 11420  12B1  0629               	xorwf	??_Flash_Memory_Main,w
 11421  12B2  39FD               	andlw	-3
 11422  12B3  0629               	xorwf	??_Flash_Memory_Main,w
 11423  12B4  0023               	movlb	3	; select bank3
 11424  12B5  00E2               	movwf	(_Memory^(0+384)+36)
 11425                           
 11426                           ;MCU_B1.c: 929: if (Memory.GO == 1) {
 11427  12B6  1CE2               	btfss	(_Memory^(0+384)+36),1
 11428  12B7  2AD1               	goto	l1183
 11429                           
 11430                           ;MCU_B1.c: 930: Memory.Runtime = 1;
 11431  12B8  15E2               	bsf	(_Memory^(0+384)+36),3
 11432                           
 11433                           ;MCU_B1.c: 931: Memory.Time++;
 11434  12B9  3001               	movlw	1
 11435  12BA  07E0               	addwf	(_Memory^(0+384)+34),f
 11436  12BB  3000               	movlw	0
 11437  12BC  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11438                           
 11439                           ;MCU_B1.c: 932: if (Memory.Time == 25) {
 11440  12BD  3022               	movlw	34
 11441  12BE  3EBE               	addlw	_Memory& (0+255)
 11442  12BF  0086               	movwf	6
 11443  12C0  3001               	movlw	1	; select bank3/4
 11444  12C1  0087               	movwf	7
 11445  12C2  3F40               	moviw [0]fsr1
 11446  12C3  3A19               	xorlw	25
 11447  12C4  1D03               	skipz
 11448  12C5  2AC8               	goto	u7435
 11449  12C6  3F41               	moviw [1]fsr1
 11450  12C7  3A00               	xorlw	0
 11451  12C8                     u7435:	
 11452  12C8  1D03               	skipz
 11453  12C9  0008               	return
 11454                           
 11455                           ;MCU_B1.c: 933: Memory.Time = 0;
 11456  12CA  01E0               	clrf	(_Memory^(0+384)+34)
 11457  12CB  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11458                           
 11459                           ;MCU_B1.c: 934: Memory.Modify = 0;
 11460  12CC  1062               	bcf	(_Memory^(0+384)+36),0
 11461                           
 11462                           ;MCU_B1.c: 935: Memory.GO = 0;
 11463  12CD  10E2               	bcf	(_Memory^(0+384)+36),1
 11464                           
 11465                           ;MCU_B1.c: 936: Flash_Memory_Modify();
 11466  12CE  3195  2551         	fcall	_Flash_Memory_Modify
 11467                           
 11468                           ;MCU_B1.c: 937: }
 11469                           ;MCU_B1.c: 938: } else {
 11470  12D0  0008               	return
 11471  12D1                     l1183:	
 11472                           
 11473                           ;MCU_B1.c: 939: if (Memory.Runtime == 1) {
 11474  12D1  1DE2               	btfss	(_Memory^(0+384)+36),3
 11475  12D2  0008               	return
 11476                           
 11477                           ;MCU_B1.c: 940: Memory.Runtime = 0;
 11478  12D3  11E2               	bcf	(_Memory^(0+384)+36),3
 11479                           
 11480                           ;MCU_B1.c: 941: Memory.Time = 0;
 11481  12D4  01E0               	clrf	(_Memory^(0+384)+34)
 11482  12D5  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11483  12D6  0008               	return
 11484  12D7                     __end_of_Flash_Memory_Main:	
 11485                           
 11486                           	psect	text66
 11487  1551                     __ptext66:	
 11488 ;; *************** function _Flash_Memory_Modify *****************
 11489 ;; Defined at:
 11490 ;;		line 999 in file "../src/MCU_B1.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;		None
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  i               1    5[BANK0 ] unsigned char 
 11495 ;; Return value:  Size  Location     Type
 11496 ;;		None               void
 11497 ;; Registers used:
 11498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;Total ram usage:        2 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    7
 11511 ;; This function calls:
 11512 ;;		_Flash_Memory_Erasing
 11513 ;;		_Flash_Memory_Read
 11514 ;;		_Flash_Memory_Write
 11515 ;;		_setMemory_Data
 11516 ;; This function is called by:
 11517 ;;		_Flash_Memory_Main
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           
 11522                           ;psect for function _Flash_Memory_Modify
 11523  1551                     _Flash_Memory_Modify:	
 11524                           
 11525                           ;MCU_B1.c: 1000: char i = 0;
 11526                           
 11527                           ;incstack = 0
 11528                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11529  1551  0020               	movlb	0	; select bank0
 11530  1552  01A5               	clrf	Flash_Memory_Modify@i
 11531                           
 11532                           ;MCU_B1.c: 1001: for (i = 0; i < 32; i++) {
 11533  1553  01A5               	clrf	Flash_Memory_Modify@i
 11534  1554  3020               	movlw	32
 11535  1555  0225               	subwf	Flash_Memory_Modify@i,w
 11536  1556  1803               	btfsc	3,0
 11537  1557  2D6D               	goto	l7045
 11538  1558                     l7039:	
 11539                           
 11540                           ;MCU_B1.c: 1002: Memory.Data[i] = Flash_Memory_Read(i);
 11541  1558  0825               	movf	Flash_Memory_Modify@i,w
 11542  1559  319E  2685  3195   	fcall	_Flash_Memory_Read
 11543  155C  0020               	movlb	0	; select bank0
 11544  155D  00A4               	movwf	??_Flash_Memory_Modify
 11545  155E  0825               	movf	Flash_Memory_Modify@i,w
 11546  155F  3EBE               	addlw	_Memory& (0+255)
 11547  1560  0086               	movwf	6
 11548  1561  3001               	movlw	1	; select bank3/4
 11549  1562  0087               	movwf	7
 11550  1563  0824               	movf	??_Flash_Memory_Modify,w
 11551  1564  0081               	movwf	1
 11552  1565  3001               	movlw	1
 11553  1566  00A4               	movwf	??_Flash_Memory_Modify
 11554  1567  0824               	movf	??_Flash_Memory_Modify,w
 11555  1568  07A5               	addwf	Flash_Memory_Modify@i,f
 11556  1569  3020               	movlw	32
 11557  156A  0225               	subwf	Flash_Memory_Modify@i,w
 11558  156B  1C03               	skipc
 11559  156C  2D58               	goto	l7039
 11560  156D                     l7045:	
 11561                           
 11562                           ;MCU_B1.c: 1003: }
 11563                           ;MCU_B1.c: 1004: setMemory_Data(0, product->Data[12]);
 11564  156D  086E               	movf	_product,w
 11565  156E  0086               	movwf	6
 11566  156F  3002               	movlw	2	; select bank4/5
 11567  1570  0087               	movwf	7
 11568  1571  3002               	movlw	2	; select bank4/5
 11569  1572  3F4C               	moviw [12]fsr1
 11570  1573  00A0               	movwf	setMemory_Data@data
 11571  1574  3000               	movlw	0
 11572  1575  319C  2492  3195   	fcall	_setMemory_Data
 11573                           
 11574                           ;MCU_B1.c: 1005: setMemory_Data(1, product->Data[13]);
 11575  1578  0020               	movlb	0	; select bank0
 11576  1579  086E               	movf	_product,w
 11577  157A  0086               	movwf	6
 11578  157B  3002               	movlw	2	; select bank4/5
 11579  157C  0087               	movwf	7
 11580  157D  3002               	movlw	2	; select bank4/5
 11581  157E  3F4D               	moviw [13]fsr1
 11582  157F  00A0               	movwf	setMemory_Data@data
 11583  1580  3001               	movlw	1
 11584  1581  319C  2492  3195   	fcall	_setMemory_Data
 11585                           
 11586                           ;MCU_B1.c: 1006: setMemory_Data(2, product->Data[14]);
 11587  1584  0020               	movlb	0	; select bank0
 11588  1585  086E               	movf	_product,w
 11589  1586  0086               	movwf	6
 11590  1587  3002               	movlw	2	; select bank4/5
 11591  1588  0087               	movwf	7
 11592  1589  3002               	movlw	2	; select bank4/5
 11593  158A  3F4E               	moviw [14]fsr1
 11594  158B  00A0               	movwf	setMemory_Data@data
 11595  158C  3002               	movlw	2
 11596  158D  319C  2492  3195   	fcall	_setMemory_Data
 11597                           
 11598                           ;MCU_B1.c: 1012: if (Memory.LoopSave == 1) {
 11599  1590  0023               	movlb	3	; select bank3
 11600  1591  1D62               	btfss	(_Memory^(0+384)+36),2
 11601  1592  2D97               	goto	l1206
 11602                           
 11603                           ;MCU_B1.c: 1013: Memory.LoopSave = 0;
 11604  1593  1162               	bcf	(_Memory^(0+384)+36),2
 11605                           
 11606                           ;MCU_B1.c: 1014: myMain.FirstOpen = 0;
 11607  1594  0021               	movlb	1	; select bank1
 11608  1595  11A0               	bcf	_myMain^(0+128),3
 11609                           
 11610                           ;MCU_B1.c: 1015: myMain.First = 0;
 11611  1596  12A0               	bcf	_myMain^(0+128),5
 11612  1597                     l1206:	
 11613                           
 11614                           ;MCU_B1.c: 1017: }
 11615                           ;MCU_B1.c: 1018: GIE = 0;
 11616  1597  138B               	bcf	11,7	;volatile
 11617                           
 11618                           ;MCU_B1.c: 1019: Flash_Memory_Erasing();
 11619  1598  319C  249E  3195   	fcall	_Flash_Memory_Erasing
 11620                           
 11621                           ;MCU_B1.c: 1020: Flash_Memory_Write();
 11622  159B  3191  213F         	fcall	_Flash_Memory_Write
 11623                           
 11624                           ;MCU_B1.c: 1021: GIE = 1;
 11625  159D  178B               	bsf	11,7	;volatile
 11626  159E  0008               	return
 11627  159F                     __end_of_Flash_Memory_Modify:	
 11628                           
 11629                           	psect	text67
 11630  1C9E                     __ptext67:	
 11631 ;; *************** function _Flash_Memory_Erasing *****************
 11632 ;; Defined at:
 11633 ;;		line 988 in file "../src/MCU_B1.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;		None
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;		None
 11638 ;; Return value:  Size  Location     Type
 11639 ;;		None               void
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0, pclath, cstack
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;Total ram usage:        0 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    6
 11654 ;; This function calls:
 11655 ;;		_Flash_Memory_Unlock
 11656 ;; This function is called by:
 11657 ;;		_Flash_Memory_Modify
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           
 11662                           ;psect for function _Flash_Memory_Erasing
 11663  1C9E                     _Flash_Memory_Erasing:	
 11664                           
 11665                           ;MCU_B1.c: 989: CFGS = 0;
 11666                           
 11667                           ;incstack = 0
 11668                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11669  1C9E  0023               	movlb	3	; select bank3
 11670  1C9F  1315               	bcf	21,6	;volatile
 11671                           
 11672                           ;MCU_B1.c: 990: PMADRH = 0x30;
 11673  1CA0  3030               	movlw	48
 11674  1CA1  0092               	movwf	18	;volatile
 11675                           
 11676                           ;MCU_B1.c: 991: PMADRL = 0x00;
 11677  1CA2  0191               	clrf	17	;volatile
 11678                           
 11679                           ;MCU_B1.c: 992: FREE = 1;
 11680  1CA3  1615               	bsf	21,4	;volatile
 11681                           
 11682                           ;MCU_B1.c: 993: WREN = 1;
 11683  1CA4  1515               	bsf	21,2	;volatile
 11684                           
 11685                           ;MCU_B1.c: 994: Flash_Memory_Unlock();
 11686  1CA5  319C  2407         	fcall	_Flash_Memory_Unlock
 11687                           
 11688                           ;MCU_B1.c: 995: WREN = 0;
 11689  1CA7  0023               	movlb	3	; select bank3
 11690  1CA8  1115               	bcf	21,2	;volatile
 11691  1CA9  0008               	return
 11692  1CAA                     __end_of_Flash_Memory_Erasing:	
 11693                           
 11694                           	psect	text68
 11695  056B                     __ptext68:	
 11696 ;; *************** function _Flash_Memory_Initialization *****************
 11697 ;; Defined at:
 11698 ;;		line 885 in file "../src/MCU_B1.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;		None
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;  i               1   67[BANK0 ] unsigned char 
 11703 ;; Return value:  Size  Location     Type
 11704 ;;		None               void
 11705 ;; Registers used:
 11706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;Total ram usage:        2 bytes
 11717 ;; Hardware stack levels used:    1
 11718 ;; Hardware stack levels required when called:    8
 11719 ;; This function calls:
 11720 ;;		_Flash_Memory_Read
 11721 ;;		_Flash_Memory_Write
 11722 ;;		_setMemory_Data
 11723 ;;		_setPercentValue
 11724 ;; This function is called by:
 11725 ;;		_main
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           
 11730                           ;psect for function _Flash_Memory_Initialization
 11731  056B                     _Flash_Memory_Initialization:	
 11732                           
 11733                           ;MCU_B1.c: 886: char i = 0;
 11734                           
 11735                           ;incstack = 0
 11736                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11737  056B  0020               	movlb	0	; select bank0
 11738  056C  01E3               	clrf	Flash_Memory_Initialization@i
 11739                           
 11740                           ;MCU_B1.c: 887: if (Flash_Memory_Read(31) == 0xaa) {
 11741  056D  301F               	movlw	31
 11742  056E  319E  2685  3185   	fcall	_Flash_Memory_Read
 11743  0571  3AAA               	xorlw	170
 11744  0572  1D03               	skipz
 11745  0573  2DDD               	goto	l7529
 11746                           
 11747                           ;MCU_B1.c: 888: product->Data[12] = Flash_Memory_Read(0);
 11748  0574  3000               	movlw	0
 11749  0575  319E  2685  3185   	fcall	_Flash_Memory_Read
 11750  0578  0020               	movlb	0	; select bank0
 11751  0579  00E2               	movwf	??_Flash_Memory_Initialization
 11752  057A  086E               	movf	_product,w
 11753  057B  3E0C               	addlw	12
 11754  057C  0086               	movwf	6
 11755  057D  3002               	movlw	2	; select bank4/5
 11756  057E  0087               	movwf	7
 11757  057F  0862               	movf	??_Flash_Memory_Initialization,w
 11758  0580  0081               	movwf	1
 11759                           
 11760                           ;MCU_B1.c: 889: product->Data[13] = Flash_Memory_Read(1);
 11761  0581  3001               	movlw	1
 11762  0582  319E  2685  3185   	fcall	_Flash_Memory_Read
 11763  0585  0020               	movlb	0	; select bank0
 11764  0586  00E2               	movwf	??_Flash_Memory_Initialization
 11765  0587  086E               	movf	_product,w
 11766  0588  3E0D               	addlw	13
 11767  0589  0086               	movwf	6
 11768  058A  3002               	movlw	2	; select bank4/5
 11769  058B  0087               	movwf	7
 11770  058C  0862               	movf	??_Flash_Memory_Initialization,w
 11771  058D  0081               	movwf	1
 11772                           
 11773                           ;MCU_B1.c: 890: product->Data[14] = Flash_Memory_Read(2);
 11774  058E  3002               	movlw	2
 11775  058F  319E  2685  3185   	fcall	_Flash_Memory_Read
 11776  0592  0020               	movlb	0	; select bank0
 11777  0593  00E2               	movwf	??_Flash_Memory_Initialization
 11778  0594  086E               	movf	_product,w
 11779  0595  3E0E               	addlw	14
 11780  0596  0086               	movwf	6
 11781  0597  3002               	movlw	2	; select bank4/5
 11782  0598  0087               	movwf	7
 11783  0599  0862               	movf	??_Flash_Memory_Initialization,w
 11784  059A  0081               	movwf	1
 11785                           
 11786                           ;MCU_B1.c: 896: i = setPercentValue(((char)(85*0.8)));
 11787  059B  3044               	movlw	68
 11788  059C  318A  2243  3185   	fcall	_setPercentValue
 11789  059F  0020               	movlb	0	; select bank0
 11790  05A0  00E2               	movwf	??_Flash_Memory_Initialization
 11791  05A1  0862               	movf	??_Flash_Memory_Initialization,w
 11792  05A2  00E3               	movwf	Flash_Memory_Initialization@i
 11793                           
 11794                           ;MCU_B1.c: 897: product->Data[21] = i;
 11795  05A3  0863               	movf	Flash_Memory_Initialization@i,w
 11796  05A4  00E2               	movwf	??_Flash_Memory_Initialization
 11797  05A5  086E               	movf	_product,w
 11798  05A6  3E15               	addlw	21
 11799  05A7  0086               	movwf	6
 11800  05A8  3002               	movlw	2	; select bank4/5
 11801  05A9  0087               	movwf	7
 11802  05AA  0862               	movf	??_Flash_Memory_Initialization,w
 11803  05AB  0081               	movwf	1
 11804                           
 11805                           ;MCU_B1.c: 898: product->Data[22] = i;
 11806  05AC  0863               	movf	Flash_Memory_Initialization@i,w
 11807  05AD  00E2               	movwf	??_Flash_Memory_Initialization
 11808  05AE  086E               	movf	_product,w
 11809  05AF  3E16               	addlw	22
 11810  05B0  0086               	movwf	6
 11811  05B1  3002               	movlw	2	; select bank4/5
 11812  05B2  0087               	movwf	7
 11813  05B3  0862               	movf	??_Flash_Memory_Initialization,w
 11814  05B4  0081               	movwf	1
 11815                           
 11816                           ;MCU_B1.c: 899: product->Data[23] = i;
 11817  05B5  0863               	movf	Flash_Memory_Initialization@i,w
 11818  05B6  00E2               	movwf	??_Flash_Memory_Initialization
 11819  05B7  086E               	movf	_product,w
 11820  05B8  3E17               	addlw	23
 11821  05B9  0086               	movwf	6
 11822  05BA  3002               	movlw	2	; select bank4/5
 11823  05BB  0087               	movwf	7
 11824  05BC  0862               	movf	??_Flash_Memory_Initialization,w
 11825  05BD  0081               	movwf	1
 11826                           
 11827                           ;MCU_B1.c: 901: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11828  05BE  086E               	movf	_product,w
 11829  05BF  3E0C               	addlw	12
 11830  05C0  0086               	movwf	6
 11831  05C1  3002               	movlw	2	; select bank4/5
 11832  05C2  0087               	movwf	7
 11833  05C3  0801               	movf	1,w
 11834  05C4  3AFF               	xorlw	255
 11835  05C5  1D03               	skipz
 11836  05C6  0008               	return
 11837  05C7  086E               	movf	_product,w
 11838  05C8  3E0D               	addlw	13
 11839  05C9  0086               	movwf	6
 11840  05CA  3002               	movlw	2	; select bank4/5
 11841  05CB  0087               	movwf	7
 11842  05CC  0801               	movf	1,w
 11843  05CD  3AFF               	xorlw	255
 11844  05CE  1D03               	skipz
 11845  05CF  0008               	return
 11846  05D0  086E               	movf	_product,w
 11847  05D1  3E0E               	addlw	14
 11848  05D2  0086               	movwf	6
 11849  05D3  3002               	movlw	2	; select bank4/5
 11850  05D4  0087               	movwf	7
 11851  05D5  0801               	movf	1,w
 11852  05D6  3AFF               	xorlw	255
 11853  05D7  1D03               	skipz
 11854  05D8  0008               	return
 11855                           
 11856                           ;MCU_B1.c: 902: myMain.FirstOpen = 1;
 11857  05D9  0021               	movlb	1	; select bank1
 11858  05DA  15A0               	bsf	_myMain^(0+128),3
 11859                           
 11860                           ;MCU_B1.c: 903: myMain.First = 1;
 11861  05DB  16A0               	bsf	_myMain^(0+128),5
 11862                           
 11863                           ;MCU_B1.c: 904: }
 11864                           ;MCU_B1.c: 905: } else {
 11865  05DC  0008               	return
 11866  05DD                     l7529:	
 11867                           
 11868                           ;MCU_B1.c: 906: i = setPercentValue(((char)(85*0.8)));
 11869  05DD  3044               	movlw	68
 11870  05DE  318A  2243  3185   	fcall	_setPercentValue
 11871  05E1  0020               	movlb	0	; select bank0
 11872  05E2  00E2               	movwf	??_Flash_Memory_Initialization
 11873  05E3  0862               	movf	??_Flash_Memory_Initialization,w
 11874  05E4  00E3               	movwf	Flash_Memory_Initialization@i
 11875                           
 11876                           ;MCU_B1.c: 907: setMemory_Data(0, 0xff);
 11877  05E5  30FF               	movlw	255
 11878  05E6  00E2               	movwf	??_Flash_Memory_Initialization
 11879  05E7  0862               	movf	??_Flash_Memory_Initialization,w
 11880  05E8  00A0               	movwf	setMemory_Data@data
 11881  05E9  3000               	movlw	0
 11882  05EA  319C  2492  3185   	fcall	_setMemory_Data
 11883                           
 11884                           ;MCU_B1.c: 908: setMemory_Data(1, 0xff);
 11885  05ED  30FF               	movlw	255
 11886  05EE  0020               	movlb	0	; select bank0
 11887  05EF  00E2               	movwf	??_Flash_Memory_Initialization
 11888  05F0  0862               	movf	??_Flash_Memory_Initialization,w
 11889  05F1  00A0               	movwf	setMemory_Data@data
 11890  05F2  3001               	movlw	1
 11891  05F3  319C  2492  3185   	fcall	_setMemory_Data
 11892                           
 11893                           ;MCU_B1.c: 909: setMemory_Data(2, 0xff);
 11894  05F6  30FF               	movlw	255
 11895  05F7  0020               	movlb	0	; select bank0
 11896  05F8  00E2               	movwf	??_Flash_Memory_Initialization
 11897  05F9  0862               	movf	??_Flash_Memory_Initialization,w
 11898  05FA  00A0               	movwf	setMemory_Data@data
 11899  05FB  3002               	movlw	2
 11900  05FC  319C  2492  3185   	fcall	_setMemory_Data
 11901                           
 11902                           ;MCU_B1.c: 910: setMemory_Data(3, 0xff);
 11903  05FF  30FF               	movlw	255
 11904  0600  0020               	movlb	0	; select bank0
 11905  0601  00E2               	movwf	??_Flash_Memory_Initialization
 11906  0602  0862               	movf	??_Flash_Memory_Initialization,w
 11907  0603  00A0               	movwf	setMemory_Data@data
 11908  0604  3003               	movlw	3
 11909  0605  319C  2492  3185   	fcall	_setMemory_Data
 11910                           
 11911                           ;MCU_B1.c: 911: setMemory_Data(4, 0xff);
 11912  0608  30FF               	movlw	255
 11913  0609  0020               	movlb	0	; select bank0
 11914  060A  00E2               	movwf	??_Flash_Memory_Initialization
 11915  060B  0862               	movf	??_Flash_Memory_Initialization,w
 11916  060C  00A0               	movwf	setMemory_Data@data
 11917  060D  3004               	movlw	4
 11918  060E  319C  2492  3185   	fcall	_setMemory_Data
 11919                           
 11920                           ;MCU_B1.c: 912: setMemory_Data(5, 0xff);
 11921  0611  30FF               	movlw	255
 11922  0612  0020               	movlb	0	; select bank0
 11923  0613  00E2               	movwf	??_Flash_Memory_Initialization
 11924  0614  0862               	movf	??_Flash_Memory_Initialization,w
 11925  0615  00A0               	movwf	setMemory_Data@data
 11926  0616  3005               	movlw	5
 11927  0617  319C  2492  3185   	fcall	_setMemory_Data
 11928                           
 11929                           ;MCU_B1.c: 913: setMemory_Data(31, 0xaa);
 11930  061A  30AA               	movlw	170
 11931  061B  0020               	movlb	0	; select bank0
 11932  061C  00E2               	movwf	??_Flash_Memory_Initialization
 11933  061D  0862               	movf	??_Flash_Memory_Initialization,w
 11934  061E  00A0               	movwf	setMemory_Data@data
 11935  061F  301F               	movlw	31
 11936  0620  319C  2492  3185   	fcall	_setMemory_Data
 11937                           
 11938                           ;MCU_B1.c: 914: product->Data[21] = i;
 11939  0623  0020               	movlb	0	; select bank0
 11940  0624  0863               	movf	Flash_Memory_Initialization@i,w
 11941  0625  00E2               	movwf	??_Flash_Memory_Initialization
 11942  0626  086E               	movf	_product,w
 11943  0627  3E15               	addlw	21
 11944  0628  0086               	movwf	6
 11945  0629  3002               	movlw	2	; select bank4/5
 11946  062A  0087               	movwf	7
 11947  062B  0862               	movf	??_Flash_Memory_Initialization,w
 11948  062C  0081               	movwf	1
 11949                           
 11950                           ;MCU_B1.c: 915: product->Data[22] = i;
 11951  062D  0863               	movf	Flash_Memory_Initialization@i,w
 11952  062E  00E2               	movwf	??_Flash_Memory_Initialization
 11953  062F  086E               	movf	_product,w
 11954  0630  3E16               	addlw	22
 11955  0631  0086               	movwf	6
 11956  0632  3002               	movlw	2	; select bank4/5
 11957  0633  0087               	movwf	7
 11958  0634  0862               	movf	??_Flash_Memory_Initialization,w
 11959  0635  0081               	movwf	1
 11960                           
 11961                           ;MCU_B1.c: 916: product->Data[23] = i;
 11962  0636  0863               	movf	Flash_Memory_Initialization@i,w
 11963  0637  00E2               	movwf	??_Flash_Memory_Initialization
 11964  0638  086E               	movf	_product,w
 11965  0639  3E17               	addlw	23
 11966  063A  0086               	movwf	6
 11967  063B  3002               	movlw	2	; select bank4/5
 11968  063C  0087               	movwf	7
 11969  063D  0862               	movf	??_Flash_Memory_Initialization,w
 11970  063E  0081               	movwf	1
 11971                           
 11972                           ;MCU_B1.c: 917: GIE = 0;
 11973  063F  138B               	bcf	11,7	;volatile
 11974                           
 11975                           ;MCU_B1.c: 918: Flash_Memory_Write();
 11976  0640  3191  213F         	fcall	_Flash_Memory_Write
 11977                           
 11978                           ;MCU_B1.c: 919: GIE = 1;
 11979  0642  178B               	bsf	11,7	;volatile
 11980                           
 11981                           ;MCU_B1.c: 920: myMain.FirstOpen = 1;
 11982  0643  0021               	movlb	1	; select bank1
 11983  0644  15A0               	bsf	_myMain^(0+128),3
 11984                           
 11985                           ;MCU_B1.c: 921: myMain.First = 1;
 11986  0645  16A0               	bsf	_myMain^(0+128),5
 11987  0646  0008               	return
 11988  0647                     __end_of_Flash_Memory_Initialization:	
 11989                           
 11990                           	psect	text69
 11991  1C92                     __ptext69:	
 11992 ;; *************** function _setMemory_Data *****************
 11993 ;; Defined at:
 11994 ;;		line 1036 in file "../src/MCU_B1.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;  address         1    wreg     unsigned char 
 11997 ;;  data            1    0[BANK0 ] unsigned char 
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;  address         1    2[BANK0 ] unsigned char 
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        3 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    5
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_Flash_Memory_Initialization
 12020 ;;		_Flash_Memory_Modify
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _setMemory_Data
 12026  1C92                     _setMemory_Data:	
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12030                           ;setMemory_Data@address stored from wreg
 12031  1C92  0020               	movlb	0	; select bank0
 12032  1C93  00A2               	movwf	setMemory_Data@address
 12033                           
 12034                           ;MCU_B1.c: 1037: Memory.Data[address] = data;
 12035  1C94  0820               	movf	setMemory_Data@data,w
 12036  1C95  00A1               	movwf	??_setMemory_Data
 12037  1C96  0822               	movf	setMemory_Data@address,w
 12038  1C97  3EBE               	addlw	_Memory& (0+255)
 12039  1C98  0086               	movwf	6
 12040  1C99  3001               	movlw	1	; select bank3/4
 12041  1C9A  0087               	movwf	7
 12042  1C9B  0821               	movf	??_setMemory_Data,w
 12043  1C9C  0081               	movwf	1
 12044  1C9D  0008               	return
 12045  1C9E                     __end_of_setMemory_Data:	
 12046                           
 12047                           	psect	text70
 12048  113F                     __ptext70:	
 12049 ;; *************** function _Flash_Memory_Write *****************
 12050 ;; Defined at:
 12051 ;;		line 969 in file "../src/MCU_B1.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  i               1    1[BANK0 ] unsigned char 
 12056 ;; Return value:  Size  Location     Type
 12057 ;;		None               void
 12058 ;; Registers used:
 12059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;Total ram usage:        2 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:    6
 12072 ;; This function calls:
 12073 ;;		_Flash_Memory_Unlock
 12074 ;; This function is called by:
 12075 ;;		_Flash_Memory_Initialization
 12076 ;;		_Flash_Memory_Modify
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           
 12081                           ;psect for function _Flash_Memory_Write
 12082  113F                     _Flash_Memory_Write:	
 12083                           
 12084                           ;MCU_B1.c: 970: char i = 0;
 12085                           
 12086                           ;incstack = 0
 12087                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12088  113F  0020               	movlb	0	; select bank0
 12089  1140  01A1               	clrf	Flash_Memory_Write@i
 12090                           
 12091                           ;MCU_B1.c: 971: CFGS = 0;
 12092  1141  0023               	movlb	3	; select bank3
 12093  1142  1315               	bcf	21,6	;volatile
 12094                           
 12095                           ;MCU_B1.c: 972: PMADRH = 0x30;
 12096  1143  3030               	movlw	48
 12097  1144  0092               	movwf	18	;volatile
 12098                           
 12099                           ;MCU_B1.c: 973: PMDATH = 0;
 12100  1145  0194               	clrf	20	;volatile
 12101                           
 12102                           ;MCU_B1.c: 974: FREE = 0;
 12103  1146  1215               	bcf	21,4	;volatile
 12104                           
 12105                           ;MCU_B1.c: 975: LWLO = 1;
 12106  1147  1695               	bsf	21,5	;volatile
 12107                           
 12108                           ;MCU_B1.c: 976: WREN = 1;
 12109  1148  1515               	bsf	21,2	;volatile
 12110                           
 12111                           ;MCU_B1.c: 977: for (i = 0; i < 32; i++) {
 12112  1149  0020               	movlb	0	; select bank0
 12113  114A  01A1               	clrf	Flash_Memory_Write@i
 12114  114B  3020               	movlw	32
 12115  114C  0221               	subwf	Flash_Memory_Write@i,w
 12116  114D  1803               	btfsc	3,0
 12117  114E  2967               	goto	l1197
 12118  114F                     l6603:	
 12119                           
 12120                           ;MCU_B1.c: 978: PMADRL = i;
 12121  114F  0821               	movf	Flash_Memory_Write@i,w
 12122  1150  0023               	movlb	3	; select bank3
 12123  1151  0091               	movwf	17	;volatile
 12124                           
 12125                           ;MCU_B1.c: 979: PMDATL = Memory.Data[i];
 12126  1152  0020               	movlb	0	; select bank0
 12127  1153  0821               	movf	Flash_Memory_Write@i,w
 12128  1154  3EBE               	addlw	_Memory& (0+255)
 12129  1155  0086               	movwf	6
 12130  1156  3001               	movlw	1	; select bank3/4
 12131  1157  0087               	movwf	7
 12132  1158  0801               	movf	1,w
 12133  1159  0023               	movlb	3	; select bank3
 12134  115A  0093               	movwf	19	;volatile
 12135                           
 12136                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 12137  115B  319C  2407  3191   	fcall	_Flash_Memory_Unlock
 12138  115E  3001               	movlw	1
 12139  115F  0020               	movlb	0	; select bank0
 12140  1160  00A0               	movwf	??_Flash_Memory_Write
 12141  1161  0820               	movf	??_Flash_Memory_Write,w
 12142  1162  07A1               	addwf	Flash_Memory_Write@i,f
 12143  1163  3020               	movlw	32
 12144  1164  0221               	subwf	Flash_Memory_Write@i,w
 12145  1165  1C03               	skipc
 12146  1166  294F               	goto	l6603
 12147  1167                     l1197:	
 12148                           
 12149                           ;MCU_B1.c: 981: }
 12150                           ;MCU_B1.c: 982: LWLO = 0;
 12151  1167  0023               	movlb	3	; select bank3
 12152  1168  1295               	bcf	21,5	;volatile
 12153                           
 12154                           ;MCU_B1.c: 983: Flash_Memory_Unlock();
 12155  1169  319C  2407         	fcall	_Flash_Memory_Unlock
 12156                           
 12157                           ;MCU_B1.c: 984: WREN = 0;
 12158  116B  0023               	movlb	3	; select bank3
 12159  116C  1115               	bcf	21,2	;volatile
 12160  116D  0008               	return
 12161  116E                     __end_of_Flash_Memory_Write:	
 12162                           
 12163                           	psect	text71
 12164  1C07                     __ptext71:	
 12165 ;; *************** function _Flash_Memory_Unlock *****************
 12166 ;; Defined at:
 12167 ;;		line 948 in file "../src/MCU_B1.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;		None
 12172 ;; Return value:  Size  Location     Type
 12173 ;;		None               void
 12174 ;; Registers used:
 12175 ;;		wreg
 12176 ;; Tracked objects:
 12177 ;;		On entry : 0/0
 12178 ;;		On exit  : 0/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;Total ram usage:        0 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; Hardware stack levels required when called:    5
 12188 ;; This function calls:
 12189 ;;		Nothing
 12190 ;; This function is called by:
 12191 ;;		_Flash_Memory_Write
 12192 ;;		_Flash_Memory_Erasing
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           
 12197                           ;psect for function _Flash_Memory_Unlock
 12198  1C07                     _Flash_Memory_Unlock:	
 12199                           
 12200                           ;MCU_B1.c: 949: PMCON2 = 0x55;
 12201                           
 12202                           ;incstack = 0
 12203                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12204  1C07  3055               	movlw	85
 12205  1C08  0023               	movlb	3	; select bank3
 12206  1C09  0096               	movwf	22	;volatile
 12207                           
 12208                           ;MCU_B1.c: 950: PMCON2 = 0xaa;
 12209  1C0A  30AA               	movlw	170
 12210  1C0B  0096               	movwf	22	;volatile
 12211                           
 12212                           ;MCU_B1.c: 951: WR = 1;
 12213  1C0C  1495               	bsf	21,1	;volatile
 12214                           
 12215                           ;MCU_B1.c: 952: __nop();
 12216  1C0D  0000               	nop
 12217                           
 12218                           ;MCU_B1.c: 953: __nop();
 12219  1C0E  0000               	nop
 12220  1C0F  0008               	return
 12221  1C10                     __end_of_Flash_Memory_Unlock:	
 12222                           
 12223                           	psect	text72
 12224  1E85                     __ptext72:	
 12225 ;; *************** function _Flash_Memory_Read *****************
 12226 ;; Defined at:
 12227 ;;		line 957 in file "../src/MCU_B1.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;  address         1    wreg     unsigned char 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  address         1    2[BANK0 ] unsigned char 
 12232 ;;  ret             1    3[BANK0 ] unsigned char 
 12233 ;;  i               1    1[BANK0 ] unsigned char 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  1    wreg      unsigned char 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;Total ram usage:        4 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    5
 12250 ;; This function calls:
 12251 ;;		Nothing
 12252 ;; This function is called by:
 12253 ;;		_Flash_Memory_Initialization
 12254 ;;		_Flash_Memory_Modify
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           
 12259                           ;psect for function _Flash_Memory_Read
 12260  1E85                     _Flash_Memory_Read:	
 12261                           
 12262                           ;incstack = 0
 12263                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12264                           ;Flash_Memory_Read@address stored from wreg
 12265  1E85  0020               	movlb	0	; select bank0
 12266  1E86  00A2               	movwf	Flash_Memory_Read@address
 12267                           
 12268                           ;MCU_B1.c: 958: char i = 0, ret = 0;
 12269  1E87  01A1               	clrf	Flash_Memory_Read@i
 12270  1E88  01A3               	clrf	Flash_Memory_Read@ret
 12271                           
 12272                           ;MCU_B1.c: 959: PMADRH = 0x30;
 12273  1E89  3030               	movlw	48
 12274  1E8A  0023               	movlb	3	; select bank3
 12275  1E8B  0092               	movwf	18	;volatile
 12276                           
 12277                           ;MCU_B1.c: 960: PMADRL = address;
 12278  1E8C  0020               	movlb	0	; select bank0
 12279  1E8D  0822               	movf	Flash_Memory_Read@address,w
 12280  1E8E  0023               	movlb	3	; select bank3
 12281  1E8F  0091               	movwf	17	;volatile
 12282                           
 12283                           ;MCU_B1.c: 961: CFGS = 0;
 12284  1E90  1315               	bcf	21,6	;volatile
 12285                           
 12286                           ;MCU_B1.c: 962: RD = 1;
 12287  1E91  1415               	bsf	21,0	;volatile
 12288                           
 12289                           ;MCU_B1.c: 963: i = PMDATH;
 12290  1E92  0814               	movf	20,w	;volatile
 12291  1E93  0020               	movlb	0	; select bank0
 12292  1E94  00A0               	movwf	??_Flash_Memory_Read
 12293  1E95  0820               	movf	??_Flash_Memory_Read,w
 12294  1E96  00A1               	movwf	Flash_Memory_Read@i
 12295                           
 12296                           ;MCU_B1.c: 964: ret = PMDATL;
 12297  1E97  0023               	movlb	3	; select bank3
 12298  1E98  0813               	movf	19,w	;volatile
 12299  1E99  0020               	movlb	0	; select bank0
 12300  1E9A  00A0               	movwf	??_Flash_Memory_Read
 12301  1E9B  0820               	movf	??_Flash_Memory_Read,w
 12302  1E9C  00A3               	movwf	Flash_Memory_Read@ret
 12303                           
 12304                           ;MCU_B1.c: 965: return ret;
 12305  1E9D  0823               	movf	Flash_Memory_Read@ret,w
 12306  1E9E  0008               	return
 12307  1E9F                     __end_of_Flash_Memory_Read:	
 12308                           
 12309                           	psect	text73
 12310  116E                     __ptext73:	
 12311 ;; *************** function _DimmerLights_Main *****************
 12312 ;; Defined at:
 12313 ;;		line 390 in file "../src/Dimmer_B1.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;		None
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;		None               void
 12320 ;; Registers used:
 12321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;Total ram usage:        4 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:   10
 12334 ;; This function calls:
 12335 ;;		_getLoad_OK
 12336 ;;		_getMain_All_Error_Status
 12337 ;;		_getMain_LightsStatus
 12338 ;;		_setDimmerLights_Main
 12339 ;; This function is called by:
 12340 ;;		_main
 12341 ;; This function uses a non-reentrant model
 12342 ;;
 12343                           
 12344                           
 12345                           ;psect for function _DimmerLights_Main
 12346  116E                     _DimmerLights_Main:	
 12347                           
 12348                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12349                           
 12350                           ;incstack = 0
 12351                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12352  116E  3000               	movlw	0
 12353  116F  3191  21D0  3191   	fcall	_getMain_All_Error_Status
 12354  1172  3800               	iorlw	0
 12355  1173  1D03               	skipz
 12356  1174  2998               	goto	l709
 12357                           
 12358                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12359  1175  0022               	movlb	2	; select bank2
 12360  1176  1CA0               	btfss	_Dimmer^(0+256),1
 12361  1177  299A               	goto	l7471
 12362                           
 12363                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12364  1178  319B  23EE  3191   	fcall	_getLoad_OK
 12365  117B  3A01               	xorlw	1
 12366  117C  1903               	skipnz
 12367  117D  298F               	goto	l7467
 12368  117E  3187  27D4  3191   	fcall	_getMain_LightsStatus
 12369  1181  3A00               	xorlw	0
 12370  1182  1903               	skipnz
 12371  1183  298F               	goto	l7467
 12372  1184  0022               	movlb	2	; select bank2
 12373  1185  0C20               	rrf	_Dimmer^(0+256),w
 12374  1186  3901               	andlw	1
 12375  1187  0020               	movlb	0	; select bank0
 12376  1188  00E7               	movwf	??_DimmerLights_Main
 12377  1189  01E8               	clrf	??_DimmerLights_Main+1
 12378  118A  0867               	movf	??_DimmerLights_Main,w
 12379  118B  00E9               	movwf	_DimmerLights_Main$2351
 12380  118C  0868               	movf	??_DimmerLights_Main+1,w
 12381  118D  00EA               	movwf	_DimmerLights_Main$2351+1
 12382  118E  2992               	goto	l7469
 12383  118F                     l7467:	
 12384  118F  0020               	movlb	0	; select bank0
 12385  1190  01E9               	clrf	_DimmerLights_Main$2351
 12386  1191  01EA               	clrf	_DimmerLights_Main$2351+1
 12387  1192                     l7469:	
 12388  1192  0869               	movf	_DimmerLights_Main$2351,w
 12389  1193  0022               	movlb	2	; select bank2
 12390  1194  10A0               	bcf	_Dimmer^(0+256),1
 12391  1195  1D03               	skipz
 12392  1196  14A0               	bsf	_Dimmer^(0+256),1
 12393                           
 12394                           ;Dimmer_B1.c: 395: }
 12395                           ;Dimmer_B1.c: 396: } else {
 12396  1197  299A               	goto	l7471
 12397  1198                     l709:	
 12398                           
 12399                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12400  1198  0022               	movlb	2	; select bank2
 12401  1199  10A0               	bcf	_Dimmer^(0+256),1
 12402  119A                     l7471:	
 12403                           
 12404                           ;Dimmer_B1.c: 398: }
 12405                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12406  119A  3001               	movlw	1
 12407  119B  3197  274B         	fcall	_setDimmerLights_Main
 12408  119D  0008               	return
 12409  119E                     __end_of_DimmerLights_Main:	
 12410                           
 12411                           	psect	text74
 12412  174B                     __ptext74:	
 12413 ;; *************** function _setDimmerLights_Main *****************
 12414 ;; Defined at:
 12415 ;;		line 416 in file "../src/Dimmer_B1.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;  lights          1    wreg     unsigned char 
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;  lights          1   70[BANK0 ] unsigned char 
 12420 ;; Return value:  Size  Location     Type
 12421 ;;		None               void
 12422 ;; Registers used:
 12423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;Total ram usage:        1 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    9
 12436 ;; This function calls:
 12437 ;;		_DimmerLightsPointSelect
 12438 ;;		_setBuz
 12439 ;;		_setDimmerLights
 12440 ;;		_setDimmerLights_Adj
 12441 ;; This function is called by:
 12442 ;;		_DimmerLights_Main
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           
 12447                           ;psect for function _setDimmerLights_Main
 12448  174B                     _setDimmerLights_Main:	
 12449                           
 12450                           ;incstack = 0
 12451                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12452                           ;setDimmerLights_Main@lights stored from wreg
 12453  174B  0020               	movlb	0	; select bank0
 12454  174C  00E6               	movwf	setDimmerLights_Main@lights
 12455                           
 12456                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12457  174D  0866               	movf	setDimmerLights_Main@lights,w
 12458  174E  319C  2443  3197   	fcall	_DimmerLightsPointSelect
 12459                           
 12460                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12461  1751  0020               	movlb	0	; select bank0
 12462  1752  086F               	movf	_DimmerLights,w
 12463  1753  3E08               	addlw	8
 12464  1754  0086               	movwf	6
 12465  1755  3001               	movlw	1	; select bank2/3
 12466  1756  0087               	movwf	7
 12467  1757  1D01               	btfss	1,2
 12468  1758  2F76               	goto	l6935
 12469                           
 12470                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12471  1759  0022               	movlb	2	; select bank2
 12472  175A  18A0               	btfsc	_Dimmer^(0+256),1
 12473  175B  0008               	return
 12474                           
 12475                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12476  175C  0020               	movlb	0	; select bank0
 12477  175D  086F               	movf	_DimmerLights,w
 12478  175E  3E08               	addlw	8
 12479  175F  0086               	movwf	6
 12480  1760  3001               	movlw	1	; select bank2/3
 12481  1761  0087               	movwf	7
 12482  1762  1101               	bcf	1,2
 12483                           
 12484                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12485  1763  086F               	movf	_DimmerLights,w
 12486  1764  3E08               	addlw	8
 12487  1765  0086               	movwf	6
 12488  1766  3001               	movlw	1	; select bank2/3
 12489  1767  0087               	movwf	7
 12490  1768  1C81               	btfss	1,1
 12491  1769  2F70               	goto	l6933
 12492                           
 12493                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12494  176A  01E2               	clrf	setDimmerLights@status
 12495  176B  0AE2               	incf	setDimmerLights@status,f
 12496  176C  0866               	movf	setDimmerLights_Main@lights,w
 12497  176D  318C  24E5         	fcall	_setDimmerLights
 12498                           
 12499                           ;Dimmer_B1.c: 425: } else {
 12500  176F  0008               	return
 12501  1770                     l6933:	
 12502                           
 12503                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12504  1770  0020               	movlb	0	; select bank0
 12505  1771  01E2               	clrf	setDimmerLights@status
 12506  1772  0866               	movf	setDimmerLights_Main@lights,w
 12507  1773  318C  24E5         	fcall	_setDimmerLights
 12508                           
 12509                           ;Dimmer_B1.c: 427: }
 12510                           ;Dimmer_B1.c: 428: }
 12511                           ;Dimmer_B1.c: 429: } else {
 12512  1775  0008               	return
 12513  1776                     l6935:	
 12514                           
 12515                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12516  1776  0020               	movlb	0	; select bank0
 12517  1777  086F               	movf	_DimmerLights,w
 12518  1778  3E08               	addlw	8
 12519  1779  0086               	movwf	6
 12520  177A  3001               	movlw	1	; select bank2/3
 12521  177B  0087               	movwf	7
 12522  177C  1E01               	btfss	1,4
 12523  177D  0008               	return
 12524                           
 12525                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12526  177E  0022               	movlb	2	; select bank2
 12527  177F  18A0               	btfsc	_Dimmer^(0+256),1
 12528  1780  0008               	return
 12529                           
 12530                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12531  1781  0020               	movlb	0	; select bank0
 12532  1782  086F               	movf	_DimmerLights,w
 12533  1783  3E08               	addlw	8
 12534  1784  0086               	movwf	6
 12535  1785  3001               	movlw	1	; select bank2/3
 12536  1786  0087               	movwf	7
 12537  1787  1201               	bcf	1,4
 12538                           
 12539                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12540  1788  086F               	movf	_DimmerLights,w
 12541  1789  3E08               	addlw	8
 12542  178A  0086               	movwf	6
 12543  178B  3001               	movlw	1	; select bank2/3
 12544  178C  0087               	movwf	7
 12545  178D  1D81               	btfss	1,3
 12546  178E  2F9E               	goto	l6945
 12547                           
 12548                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12549  178F  01E2               	clrf	setDimmerLights_Adj@status
 12550  1790  0AE2               	incf	setDimmerLights_Adj@status,f
 12551  1791  0866               	movf	setDimmerLights_Main@lights,w
 12552  1792  318B  230D  3197   	fcall	_setDimmerLights_Adj
 12553                           
 12554                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12555  1795  3064               	movlw	100
 12556  1796  0020               	movlb	0	; select bank0
 12557  1797  00A9               	movwf	setBuz@time
 12558  1798  3000               	movlw	0
 12559  1799  00AA               	movwf	setBuz@time+1
 12560  179A  3001               	movlw	1
 12561  179B  3196  26F2         	fcall	_setBuz
 12562                           
 12563                           ;Dimmer_B1.c: 436: } else {
 12564  179D  0008               	return
 12565  179E                     l6945:	
 12566                           
 12567                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12568  179E  0020               	movlb	0	; select bank0
 12569  179F  01E2               	clrf	setDimmerLights_Adj@status
 12570  17A0  0866               	movf	setDimmerLights_Main@lights,w
 12571  17A1  318B  230D         	fcall	_setDimmerLights_Adj
 12572  17A3  0008               	return
 12573  17A4                     __end_of_setDimmerLights_Main:	
 12574                           
 12575                           	psect	text75
 12576  0B0D                     __ptext75:	
 12577 ;; *************** function _setDimmerLights_Adj *****************
 12578 ;; Defined at:
 12579 ;;		line 716 in file "../src/Dimmer_B1.c"
 12580 ;; Parameters:    Size  Location     Type
 12581 ;;  lights          1    wreg     unsigned char 
 12582 ;;  status          1   66[BANK0 ] unsigned char 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  lights          1   69[BANK0 ] unsigned char 
 12585 ;; Return value:  Size  Location     Type
 12586 ;;		None               void
 12587 ;; Registers used:
 12588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12594 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;Total ram usage:        4 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    8
 12601 ;; This function calls:
 12602 ;;		_DimmerLightsPointSelect
 12603 ;;		_getMain_All_Error_Status
 12604 ;;		_setPercentValue
 12605 ;;		_setRF_DimmerLights
 12606 ;;		_setTxData
 12607 ;; This function is called by:
 12608 ;;		_setDimmerLights_Main
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           
 12613                           ;psect for function _setDimmerLights_Adj
 12614  0B0D                     _setDimmerLights_Adj:	
 12615                           
 12616                           ;incstack = 0
 12617                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12618                           ;setDimmerLights_Adj@lights stored from wreg
 12619  0B0D  0020               	movlb	0	; select bank0
 12620  0B0E  00E5               	movwf	setDimmerLights_Adj@lights
 12621                           
 12622                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12623  0B0F  0865               	movf	setDimmerLights_Adj@lights,w
 12624  0B10  319C  2443  318B   	fcall	_DimmerLightsPointSelect
 12625                           
 12626                           ;Dimmer_B1.c: 718: if (status == 1) {
 12627  0B13  0020               	movlb	0	; select bank0
 12628  0B14  0862               	movf	setDimmerLights_Adj@status,w
 12629  0B15  3A01               	xorlw	1
 12630  0B16  1D03               	skipz
 12631  0B17  2B23               	goto	l6513
 12632                           
 12633                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12634  0B18  086F               	movf	_DimmerLights,w
 12635  0B19  0086               	movwf	6
 12636  0B1A  3001               	movlw	1	; select bank2/3
 12637  0B1B  0087               	movwf	7
 12638  0B1C  1581               	bsf	1,3
 12639                           
 12640                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12641  0B1D  086F               	movf	_DimmerLights,w
 12642  0B1E  0086               	movwf	6
 12643  0B1F  3001               	movlw	1	; select bank2/3
 12644  0B20  0087               	movwf	7
 12645  0B21  1481               	bsf	1,1
 12646                           
 12647                           ;Dimmer_B1.c: 721: } else {
 12648  0B22  0008               	return
 12649  0B23                     l6513:	
 12650                           
 12651                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12652  0B23  086F               	movf	_DimmerLights,w
 12653  0B24  0086               	movwf	6
 12654  0B25  3001               	movlw	1	; select bank2/3
 12655  0B26  0087               	movwf	7
 12656  0B27  1D81               	btfss	1,3
 12657  0B28  0008               	return
 12658                           
 12659                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12660  0B29  086F               	movf	_DimmerLights,w
 12661  0B2A  0086               	movwf	6
 12662  0B2B  3001               	movlw	1	; select bank2/3
 12663  0B2C  0087               	movwf	7
 12664  0B2D  1081               	bcf	1,1
 12665                           
 12666                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12667  0B2E  086F               	movf	_DimmerLights,w
 12668  0B2F  0086               	movwf	6
 12669  0B30  3001               	movlw	1	; select bank2/3
 12670  0B31  0087               	movwf	7
 12671  0B32  1181               	bcf	1,3
 12672                           
 12673                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12674  0B33  086F               	movf	_DimmerLights,w
 12675  0B34  3E04               	addlw	4
 12676  0B35  0086               	movwf	6
 12677  0B36  3001               	movlw	1	; select bank2/3
 12678  0B37  0087               	movwf	7
 12679  0B38  0801               	movf	1,w
 12680  0B39  00E3               	movwf	??_setDimmerLights_Adj
 12681  0B3A  086F               	movf	_DimmerLights,w
 12682  0B3B  3E05               	addlw	5
 12683  0B3C  0086               	movwf	6
 12684  0B3D  3001               	movlw	1	; select bank2/3
 12685  0B3E  0087               	movwf	7
 12686  0B3F  0863               	movf	??_setDimmerLights_Adj,w
 12687  0B40  0081               	movwf	1
 12688                           
 12689                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12690  0B41  086F               	movf	_DimmerLights,w
 12691  0B42  3E04               	addlw	4
 12692  0B43  0086               	movwf	6
 12693  0B44  3001               	movlw	1	; select bank2/3
 12694  0B45  0087               	movwf	7
 12695  0B46  0801               	movf	1,w
 12696  0B47  318A  2243  318B   	fcall	_setPercentValue
 12697  0B4A  0020               	movlb	0	; select bank0
 12698  0B4B  00E3               	movwf	??_setDimmerLights_Adj
 12699  0B4C  0865               	movf	setDimmerLights_Adj@lights,w
 12700  0B4D  3E14               	addlw	20
 12701  0B4E  076E               	addwf	_product,w
 12702  0B4F  00E4               	movwf	??_setDimmerLights_Adj+1
 12703  0B50  0864               	movf	??_setDimmerLights_Adj+1,w
 12704  0B51  0086               	movwf	6
 12705  0B52  3002               	movlw	2	; select bank4/5
 12706  0B53  0087               	movwf	7
 12707  0B54  0863               	movf	??_setDimmerLights_Adj,w
 12708  0B55  0081               	movwf	1
 12709                           
 12710                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12711  0B56  3000               	movlw	0
 12712  0B57  3191  21D0  318B   	fcall	_getMain_All_Error_Status
 12713  0B5A  3A00               	xorlw	0
 12714  0B5B  3000               	movlw	0
 12715  0B5C  1903               	skipnz
 12716  0B5D  3001               	movlw	1
 12717  0B5E  0020               	movlb	0	; select bank0
 12718  0B5F  00E3               	movwf	??_setDimmerLights_Adj
 12719  0B60  0DE3               	rlf	??_setDimmerLights_Adj,f
 12720  0B61  0022               	movlb	2	; select bank2
 12721  0B62  0820               	movf	_Dimmer^(0+256),w
 12722  0B63  0020               	movlb	0	; select bank0
 12723  0B64  0663               	xorwf	??_setDimmerLights_Adj,w
 12724  0B65  39FD               	andlw	-3
 12725  0B66  0663               	xorwf	??_setDimmerLights_Adj,w
 12726  0B67  0022               	movlb	2	; select bank2
 12727  0B68  00A0               	movwf	_Dimmer^(0+256)
 12728                           
 12729                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12730  0B69  0020               	movlb	0	; select bank0
 12731  0B6A  01A0               	clrf	setRF_DimmerLights@on
 12732  0B6B  0AA0               	incf	setRF_DimmerLights@on,f
 12733  0B6C  0865               	movf	setDimmerLights_Adj@lights,w
 12734  0B6D  3197  27A4  318B   	fcall	_setRF_DimmerLights
 12735                           
 12736                           ;Dimmer_B1.c: 740: setTxData();
 12737  0B70  3187  2715         	fcall	_setTxData
 12738  0B72  0008               	return
 12739  0B73                     __end_of_setDimmerLights_Adj:	
 12740                           
 12741                           	psect	text76
 12742  0CE5                     __ptext76:	
 12743 ;; *************** function _setDimmerLights *****************
 12744 ;; Defined at:
 12745 ;;		line 611 in file "../src/Dimmer_B1.c"
 12746 ;; Parameters:    Size  Location     Type
 12747 ;;  lights          1    wreg     unsigned char 
 12748 ;;  status          1   66[BANK0 ] unsigned char 
 12749 ;; Auto vars:     Size  Location     Type
 12750 ;;  lights          1   69[BANK0 ] unsigned char 
 12751 ;; Return value:  Size  Location     Type
 12752 ;;		None               void
 12753 ;; Registers used:
 12754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12760 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;Total ram usage:        4 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    8
 12767 ;; This function calls:
 12768 ;;		_DimmerLightsPointSelect
 12769 ;;		_getMain_All_Error_Status
 12770 ;;		_setDimmerLights_Line
 12771 ;;		_setLED
 12772 ;;		_setPercentValue
 12773 ;;		_setRF_DimmerLights
 12774 ;;		_setTxData
 12775 ;; This function is called by:
 12776 ;;		_setDimmerLights_Main
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function _setDimmerLights
 12782  0CE5                     _setDimmerLights:	
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12786                           ;setDimmerLights@lights stored from wreg
 12787  0CE5  0020               	movlb	0	; select bank0
 12788  0CE6  00E5               	movwf	setDimmerLights@lights
 12789                           
 12790                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12791  0CE7  0865               	movf	setDimmerLights@lights,w
 12792  0CE8  319C  2443  318C   	fcall	_DimmerLightsPointSelect
 12793                           
 12794                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12795  0CEB  3000               	movlw	0
 12796  0CEC  3191  21D0  318C   	fcall	_getMain_All_Error_Status
 12797  0CEF  3A00               	xorlw	0
 12798  0CF0  3000               	movlw	0
 12799  0CF1  1903               	skipnz
 12800  0CF2  3001               	movlw	1
 12801  0CF3  0020               	movlb	0	; select bank0
 12802  0CF4  00E3               	movwf	??_setDimmerLights
 12803  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12804  0CF6  0022               	movlb	2	; select bank2
 12805  0CF7  0820               	movf	_Dimmer^(0+256),w
 12806  0CF8  0020               	movlb	0	; select bank0
 12807  0CF9  0663               	xorwf	??_setDimmerLights,w
 12808  0CFA  39FD               	andlw	-3
 12809  0CFB  0663               	xorwf	??_setDimmerLights,w
 12810  0CFC  0022               	movlb	2	; select bank2
 12811  0CFD  00A0               	movwf	_Dimmer^(0+256)
 12812                           
 12813                           ;Dimmer_B1.c: 619: if (status == 1) {
 12814  0CFE  0020               	movlb	0	; select bank0
 12815  0CFF  0862               	movf	setDimmerLights@status,w
 12816  0D00  3A01               	xorlw	1
 12817  0D01  1D03               	skipz
 12818  0D02  2D33               	goto	l6493
 12819                           
 12820                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12821  0D03  086F               	movf	_DimmerLights,w
 12822  0D04  3E09               	addlw	9
 12823  0D05  0086               	movwf	6
 12824  0D06  3001               	movlw	1	; select bank2/3
 12825  0D07  0087               	movwf	7
 12826  0D08  1481               	bsf	1,1
 12827                           
 12828                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12829  0D09  01A2               	clrf	setLED@command
 12830  0D0A  0865               	movf	setDimmerLights@lights,w
 12831  0D0B  3192  226B  318C   	fcall	_setLED
 12832                           
 12833                           ;Dimmer_B1.c: 622: ;;
 12834                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12835  0D0E  0020               	movlb	0	; select bank0
 12836  0D0F  0865               	movf	setDimmerLights@lights,w
 12837  0D10  319C  2486  318C   	fcall	_setDimmerLights_Line
 12838                           
 12839                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12840  0D13  0020               	movlb	0	; select bank0
 12841  0D14  086F               	movf	_DimmerLights,w
 12842  0D15  0086               	movwf	6
 12843  0D16  3001               	movlw	1	; select bank2/3
 12844  0D17  0087               	movwf	7
 12845  0D18  1701               	bsf	1,6
 12846                           
 12847                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(85*0.8));
 12848  0D19  3044               	movlw	68
 12849  0D1A  00E3               	movwf	??_setDimmerLights
 12850  0D1B  086F               	movf	_DimmerLights,w
 12851  0D1C  3E04               	addlw	4
 12852  0D1D  0086               	movwf	6
 12853  0D1E  3001               	movlw	1	; select bank2/3
 12854  0D1F  0087               	movwf	7
 12855  0D20  0863               	movf	??_setDimmerLights,w
 12856  0D21  0081               	movwf	1
 12857                           
 12858                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(85*0.8)));
 12859  0D22  3044               	movlw	68
 12860  0D23  318A  2243  318C   	fcall	_setPercentValue
 12861  0D26  0020               	movlb	0	; select bank0
 12862  0D27  00E3               	movwf	??_setDimmerLights
 12863  0D28  0865               	movf	setDimmerLights@lights,w
 12864  0D29  3E14               	addlw	20
 12865  0D2A  076E               	addwf	_product,w
 12866  0D2B  00E4               	movwf	??_setDimmerLights+1
 12867  0D2C  0864               	movf	??_setDimmerLights+1,w
 12868  0D2D  0086               	movwf	6
 12869  0D2E  3002               	movlw	2	; select bank4/5
 12870  0D2F  0087               	movwf	7
 12871  0D30  0863               	movf	??_setDimmerLights,w
 12872  0D31  0081               	movwf	1
 12873  0D32  2D5A               	goto	l6505
 12874  0D33                     l6493:	
 12875                           ;Dimmer_B1.c: 642: } else {
 12876                           
 12877                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12878                           
 12879                           
 12880                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12881  0D33  086F               	movf	_DimmerLights,w
 12882  0D34  0086               	movwf	6
 12883  0D35  3001               	movlw	1	; select bank2/3
 12884  0D36  0087               	movwf	7
 12885  0D37  1301               	bcf	1,6
 12886                           
 12887                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12888  0D38  086F               	movf	_DimmerLights,w
 12889  0D39  3E09               	addlw	9
 12890  0D3A  0086               	movwf	6
 12891  0D3B  3001               	movlw	1	; select bank2/3
 12892  0D3C  0087               	movwf	7
 12893  0D3D  1081               	bcf	1,1
 12894                           
 12895                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12896  0D3E  01A2               	clrf	setLED@command
 12897  0D3F  0AA2               	incf	setLED@command,f
 12898  0D40  0865               	movf	setDimmerLights@lights,w
 12899  0D41  3192  226B  318C   	fcall	_setLED
 12900                           
 12901                           ;Dimmer_B1.c: 646: ;;
 12902                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12903  0D44  0020               	movlb	0	; select bank0
 12904  0D45  086F               	movf	_DimmerLights,w
 12905  0D46  3E08               	addlw	8
 12906  0D47  0086               	movwf	6
 12907  0D48  3001               	movlw	1	; select bank2/3
 12908  0D49  0087               	movwf	7
 12909  0D4A  1781               	bsf	1,7
 12910                           
 12911                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12912  0D4B  086F               	movf	_DimmerLights,w
 12913  0D4C  0086               	movwf	6
 12914  0D4D  3001               	movlw	1	; select bank2/3
 12915  0D4E  0087               	movwf	7
 12916  0D4F  1181               	bcf	1,3
 12917                           
 12918                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12919  0D50  086F               	movf	_DimmerLights,w
 12920  0D51  0086               	movwf	6
 12921  0D52  3001               	movlw	1	; select bank2/3
 12922  0D53  0087               	movwf	7
 12923  0D54  1201               	bcf	1,4
 12924                           
 12925                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12926  0D55  086F               	movf	_DimmerLights,w
 12927  0D56  0086               	movwf	6
 12928  0D57  3001               	movlw	1	; select bank2/3
 12929  0D58  0087               	movwf	7
 12930  0D59  1101               	bcf	1,2
 12931  0D5A                     l6505:	
 12932                           
 12933                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12934  0D5A  3007               	movlw	7
 12935  0D5B  00E3               	movwf	??_setDimmerLights
 12936  0D5C  086F               	movf	_DimmerLights,w
 12937  0D5D  3E02               	addlw	2
 12938  0D5E  0086               	movwf	6
 12939  0D5F  3001               	movlw	1	; select bank2/3
 12940  0D60  0087               	movwf	7
 12941  0D61  0863               	movf	??_setDimmerLights,w
 12942  0D62  0081               	movwf	1
 12943                           
 12944                           ;Dimmer_B1.c: 661: }
 12945                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12946  0D63  0862               	movf	setDimmerLights@status,w
 12947  0D64  00E3               	movwf	??_setDimmerLights
 12948  0D65  0863               	movf	??_setDimmerLights,w
 12949  0D66  00A0               	movwf	setRF_DimmerLights@on
 12950  0D67  0865               	movf	setDimmerLights@lights,w
 12951  0D68  3197  27A4  318C   	fcall	_setRF_DimmerLights
 12952                           
 12953                           ;Dimmer_B1.c: 663: setTxData();
 12954  0D6B  3187  2715         	fcall	_setTxData
 12955  0D6D  0008               	return
 12956  0D6E                     __end_of_setDimmerLights:	
 12957                           
 12958                           	psect	text77
 12959  0715                     __ptext77:	
 12960 ;; *************** function _setTxData *****************
 12961 ;; Defined at:
 12962 ;;		line 210 in file "../src/RF_Control_B1.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;		None
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  i               1    0        unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;		None               void
 12969 ;; Registers used:
 12970 ;;		wreg, fsr1l, fsr1h
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;Total ram usage:        1 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    5
 12983 ;; This function calls:
 12984 ;;		Nothing
 12985 ;; This function is called by:
 12986 ;;		_setDimmerLights
 12987 ;;		_setDimmerLights_Adj
 12988 ;;		_getRxData
 12989 ;;		_setControl_Lights_Table
 12990 ;;		_setRFSW_Control
 12991 ;;		_setRFSW_AdjControl
 12992 ;; This function uses a non-reentrant model
 12993 ;;
 12994                           
 12995                           
 12996                           ;psect for function _setTxData
 12997  0715                     _setTxData:	
 12998                           
 12999                           ;RF_Control_B1.c: 211: char i;
 13000                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13001                           
 13002                           ;incstack = 0
 13003                           ; Regs used in _setTxData: [wregfsr1]
 13004  0715  0021               	movlb	1	; select bank1
 13005  0716  1C3B               	btfss	_RF1^(0+128),0
 13006  0717  0008               	return
 13007                           
 13008                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13009  0718  193B               	btfsc	_RF1^(0+128),2
 13010  0719  0008               	return
 13011                           
 13012                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13013  071A  153B               	bsf	_RF1^(0+128),2
 13014                           
 13015                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13016  071B  3014               	movlw	20
 13017  071C  00C2               	movwf	(_RF1^(0+128)+7)
 13018  071D  3000               	movlw	0
 13019  071E  00C3               	movwf	(_RF1^(0+128)+8)
 13020                           
 13021                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 13022  071F  3063               	movlw	99
 13023  0720  0020               	movlb	0	; select bank0
 13024  0721  00A0               	movwf	??_setTxData
 13025  0722  0820               	movf	??_setTxData,w
 13026  0723  0023               	movlb	3	; select bank3
 13027  0724  00A0               	movwf	_RF_Data^(0+384)
 13028                           
 13029                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 13030  0725  3002               	movlw	2
 13031  0726  0020               	movlb	0	; select bank0
 13032  0727  00A0               	movwf	??_setTxData
 13033  0728  0820               	movf	??_setTxData,w
 13034  0729  0023               	movlb	3	; select bank3
 13035  072A  00A1               	movwf	(_RF_Data^(0+384)+1)
 13036                           
 13037                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 13038  072B  0020               	movlb	0	; select bank0
 13039  072C  086E               	movf	_product,w
 13040  072D  0086               	movwf	6
 13041  072E  3002               	movlw	2	; select bank4/5
 13042  072F  0087               	movwf	7
 13043  0730  3002               	movlw	2	; select bank4/5
 13044  0731  3F42               	moviw [2]fsr1
 13045  0732  0023               	movlb	3	; select bank3
 13046  0733  00A2               	movwf	(_RF_Data^(0+384)+2)
 13047                           
 13048                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 13049  0734  0020               	movlb	0	; select bank0
 13050  0735  086E               	movf	_product,w
 13051  0736  0086               	movwf	6
 13052  0737  3002               	movlw	2	; select bank4/5
 13053  0738  0087               	movwf	7
 13054  0739  3002               	movlw	2	; select bank4/5
 13055  073A  3F43               	moviw [3]fsr1
 13056  073B  0023               	movlb	3	; select bank3
 13057  073C  00A3               	movwf	(_RF_Data^(0+384)+3)
 13058                           
 13059                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 13060  073D  0020               	movlb	0	; select bank0
 13061  073E  086E               	movf	_product,w
 13062  073F  0086               	movwf	6
 13063  0740  3002               	movlw	2	; select bank4/5
 13064  0741  0087               	movwf	7
 13065  0742  3002               	movlw	2	; select bank4/5
 13066  0743  3F44               	moviw [4]fsr1
 13067  0744  0023               	movlb	3	; select bank3
 13068  0745  00A4               	movwf	(_RF_Data^(0+384)+4)
 13069                           
 13070                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 13071  0746  0020               	movlb	0	; select bank0
 13072  0747  086E               	movf	_product,w
 13073  0748  0086               	movwf	6
 13074  0749  3002               	movlw	2	; select bank4/5
 13075  074A  0087               	movwf	7
 13076  074B  3002               	movlw	2	; select bank4/5
 13077  074C  3F45               	moviw [5]fsr1
 13078  074D  0023               	movlb	3	; select bank3
 13079  074E  00A5               	movwf	(_RF_Data^(0+384)+5)
 13080                           
 13081                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 13082  074F  0020               	movlb	0	; select bank0
 13083  0750  086E               	movf	_product,w
 13084  0751  0086               	movwf	6
 13085  0752  3002               	movlw	2	; select bank4/5
 13086  0753  0087               	movwf	7
 13087  0754  3002               	movlw	2	; select bank4/5
 13088  0755  3F46               	moviw [6]fsr1
 13089  0756  0023               	movlb	3	; select bank3
 13090  0757  00A6               	movwf	(_RF_Data^(0+384)+6)
 13091                           
 13092                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13093  0758  0020               	movlb	0	; select bank0
 13094  0759  086E               	movf	_product,w
 13095  075A  0086               	movwf	6
 13096  075B  3002               	movlw	2	; select bank4/5
 13097  075C  0087               	movwf	7
 13098  075D  3002               	movlw	2	; select bank4/5
 13099  075E  3F47               	moviw [7]fsr1
 13100  075F  0023               	movlb	3	; select bank3
 13101  0760  00A7               	movwf	(_RF_Data^(0+384)+7)
 13102                           
 13103                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13104  0761  0020               	movlb	0	; select bank0
 13105  0762  086E               	movf	_product,w
 13106  0763  0086               	movwf	6
 13107  0764  3002               	movlw	2	; select bank4/5
 13108  0765  0087               	movwf	7
 13109  0766  3002               	movlw	2	; select bank4/5
 13110  0767  3F48               	moviw [8]fsr1
 13111  0768  0023               	movlb	3	; select bank3
 13112  0769  00A8               	movwf	(_RF_Data^(0+384)+8)
 13113                           
 13114                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13115  076A  0020               	movlb	0	; select bank0
 13116  076B  086E               	movf	_product,w
 13117  076C  0086               	movwf	6
 13118  076D  3002               	movlw	2	; select bank4/5
 13119  076E  0087               	movwf	7
 13120  076F  3002               	movlw	2	; select bank4/5
 13121  0770  3F49               	moviw [9]fsr1
 13122  0771  0023               	movlb	3	; select bank3
 13123  0772  00A9               	movwf	(_RF_Data^(0+384)+9)
 13124                           
 13125                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13126  0773  0020               	movlb	0	; select bank0
 13127  0774  086E               	movf	_product,w
 13128  0775  0086               	movwf	6
 13129  0776  3002               	movlw	2	; select bank4/5
 13130  0777  0087               	movwf	7
 13131  0778  3002               	movlw	2	; select bank4/5
 13132  0779  3F4A               	moviw [10]fsr1
 13133  077A  0023               	movlb	3	; select bank3
 13134  077B  00AA               	movwf	(_RF_Data^(0+384)+10)
 13135                           
 13136                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13137  077C  0020               	movlb	0	; select bank0
 13138  077D  086E               	movf	_product,w
 13139  077E  0086               	movwf	6
 13140  077F  3002               	movlw	2	; select bank4/5
 13141  0780  0087               	movwf	7
 13142  0781  3002               	movlw	2	; select bank4/5
 13143  0782  3F4B               	moviw [11]fsr1
 13144  0783  0023               	movlb	3	; select bank3
 13145  0784  00AB               	movwf	(_RF_Data^(0+384)+11)
 13146                           
 13147                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13148  0785  0020               	movlb	0	; select bank0
 13149  0786  086E               	movf	_product,w
 13150  0787  0086               	movwf	6
 13151  0788  3002               	movlw	2	; select bank4/5
 13152  0789  0087               	movwf	7
 13153  078A  3002               	movlw	2	; select bank4/5
 13154  078B  3F4C               	moviw [12]fsr1
 13155  078C  0023               	movlb	3	; select bank3
 13156  078D  00AC               	movwf	(_RF_Data^(0+384)+12)
 13157                           
 13158                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13159  078E  0020               	movlb	0	; select bank0
 13160  078F  086E               	movf	_product,w
 13161  0790  0086               	movwf	6
 13162  0791  3002               	movlw	2	; select bank4/5
 13163  0792  0087               	movwf	7
 13164  0793  3002               	movlw	2	; select bank4/5
 13165  0794  3F4D               	moviw [13]fsr1
 13166  0795  0023               	movlb	3	; select bank3
 13167  0796  00AD               	movwf	(_RF_Data^(0+384)+13)
 13168                           
 13169                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13170  0797  0020               	movlb	0	; select bank0
 13171  0798  086E               	movf	_product,w
 13172  0799  0086               	movwf	6
 13173  079A  3002               	movlw	2	; select bank4/5
 13174  079B  0087               	movwf	7
 13175  079C  3002               	movlw	2	; select bank4/5
 13176  079D  3F4E               	moviw [14]fsr1
 13177  079E  0023               	movlb	3	; select bank3
 13178  079F  00AE               	movwf	(_RF_Data^(0+384)+14)
 13179                           
 13180                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13181  07A0  0020               	movlb	0	; select bank0
 13182  07A1  086E               	movf	_product,w
 13183  07A2  0086               	movwf	6
 13184  07A3  3002               	movlw	2	; select bank4/5
 13185  07A4  0087               	movwf	7
 13186  07A5  3002               	movlw	2	; select bank4/5
 13187  07A6  3F4F               	moviw [15]fsr1
 13188  07A7  0023               	movlb	3	; select bank3
 13189  07A8  00AF               	movwf	(_RF_Data^(0+384)+15)
 13190                           
 13191                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13192  07A9  0020               	movlb	0	; select bank0
 13193  07AA  086E               	movf	_product,w
 13194  07AB  0086               	movwf	6
 13195  07AC  3002               	movlw	2	; select bank4/5
 13196  07AD  0087               	movwf	7
 13197  07AE  3002               	movlw	2	; select bank4/5
 13198  07AF  3F50               	moviw [16]fsr1
 13199  07B0  0023               	movlb	3	; select bank3
 13200  07B1  00B0               	movwf	(_RF_Data^(0+384)+16)
 13201                           
 13202                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13203  07B2  0020               	movlb	0	; select bank0
 13204  07B3  086E               	movf	_product,w
 13205  07B4  0086               	movwf	6
 13206  07B5  3002               	movlw	2	; select bank4/5
 13207  07B6  0087               	movwf	7
 13208  07B7  3002               	movlw	2	; select bank4/5
 13209  07B8  3F51               	moviw [17]fsr1
 13210  07B9  0023               	movlb	3	; select bank3
 13211  07BA  00B1               	movwf	(_RF_Data^(0+384)+17)
 13212                           
 13213                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13214  07BB  0020               	movlb	0	; select bank0
 13215  07BC  086E               	movf	_product,w
 13216  07BD  0086               	movwf	6
 13217  07BE  3002               	movlw	2	; select bank4/5
 13218  07BF  0087               	movwf	7
 13219  07C0  3002               	movlw	2	; select bank4/5
 13220  07C1  3F52               	moviw [18]fsr1
 13221  07C2  0023               	movlb	3	; select bank3
 13222  07C3  00B2               	movwf	(_RF_Data^(0+384)+18)
 13223                           
 13224                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13225  07C4  0020               	movlb	0	; select bank0
 13226  07C5  086E               	movf	_product,w
 13227  07C6  0086               	movwf	6
 13228  07C7  3002               	movlw	2	; select bank4/5
 13229  07C8  0087               	movwf	7
 13230  07C9  3002               	movlw	2	; select bank4/5
 13231  07CA  3F53               	moviw [19]fsr1
 13232  07CB  0023               	movlb	3	; select bank3
 13233  07CC  00B3               	movwf	(_RF_Data^(0+384)+19)
 13234                           
 13235                           ;RF_Control_B1.c: 249: RF_Data[20] = 209;
 13236  07CD  30D1               	movlw	209
 13237  07CE  0020               	movlb	0	; select bank0
 13238  07CF  00A0               	movwf	??_setTxData
 13239  07D0  0820               	movf	??_setTxData,w
 13240  07D1  0023               	movlb	3	; select bank3
 13241  07D2  00B4               	movwf	(_RF_Data^(0+384)+20)
 13242  07D3  0008               	return
 13243  07D4                     __end_of_setTxData:	
 13244                           
 13245                           	psect	text78
 13246  17A4                     __ptext78:	
 13247 ;; *************** function _setRF_DimmerLights *****************
 13248 ;; Defined at:
 13249 ;;		line 487 in file "../src/RF_Control_B1.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  lights          1    wreg     unsigned char 
 13252 ;;  on              1    0[BANK0 ] unsigned char 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  lights          1    4[BANK0 ] unsigned char 
 13255 ;;  status          1    3[BANK0 ] unsigned char 
 13256 ;; Return value:  Size  Location     Type
 13257 ;;		None               void
 13258 ;; Registers used:
 13259 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13265 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;Total ram usage:        5 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    5
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		_setDimmerLights
 13276 ;;		_setDimmerLights_Adj
 13277 ;;		_setRFSW_Control
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _setRF_DimmerLights
 13283  17A4                     _setRF_DimmerLights:	
 13284                           
 13285                           ;incstack = 0
 13286                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13287                           ;setRF_DimmerLights@lights stored from wreg
 13288  17A4  0020               	movlb	0	; select bank0
 13289  17A5  00A4               	movwf	setRF_DimmerLights@lights
 13290                           
 13291                           ;RF_Control_B1.c: 488: char status = 1;
 13292  17A6  01A3               	clrf	setRF_DimmerLights@status
 13293  17A7  0AA3               	incf	setRF_DimmerLights@status,f
 13294                           
 13295                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13296  17A8  0824               	movf	setRF_DimmerLights@lights,w
 13297  17A9  3EFF               	addlw	-1
 13298  17AA  0A89               	incf	9,f
 13299  17AB  2FAE               	goto	u4970
 13300  17AC                     u4975:	
 13301  17AC  1003               	clrc
 13302  17AD  0DA3               	rlf	setRF_DimmerLights@status,f
 13303  17AE                     u4970:	
 13304  17AE  3EFF               	addlw	-1
 13305  17AF  1D03               	skipz
 13306  17B0  2FAC               	goto	u4975
 13307                           
 13308                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13309  17B1  0824               	movf	setRF_DimmerLights@lights,w
 13310  17B2  00A1               	movwf	??_setRF_DimmerLights
 13311  17B3  086E               	movf	_product,w
 13312  17B4  3E0B               	addlw	11
 13313  17B5  0086               	movwf	6
 13314  17B6  3002               	movlw	2	; select bank4/5
 13315  17B7  0087               	movwf	7
 13316  17B8  0821               	movf	??_setRF_DimmerLights,w
 13317  17B9  0081               	movwf	1
 13318                           
 13319                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13320  17BA  0824               	movf	setRF_DimmerLights@lights,w
 13321  17BB  3E14               	addlw	20
 13322  17BC  076E               	addwf	_product,w
 13323  17BD  00A1               	movwf	??_setRF_DimmerLights
 13324  17BE  0821               	movf	??_setRF_DimmerLights,w
 13325  17BF  0086               	movwf	6
 13326  17C0  3002               	movlw	2	; select bank4/5
 13327  17C1  0087               	movwf	7
 13328  17C2  0801               	movf	1,w
 13329  17C3  00A2               	movwf	??_setRF_DimmerLights+1
 13330  17C4  086E               	movf	_product,w
 13331  17C5  3E09               	addlw	9
 13332  17C6  0086               	movwf	6
 13333  17C7  3002               	movlw	2	; select bank4/5
 13334  17C8  0087               	movwf	7
 13335  17C9  0822               	movf	??_setRF_DimmerLights+1,w
 13336  17CA  0081               	movwf	1
 13337                           
 13338                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13339  17CB  0824               	movf	setRF_DimmerLights@lights,w
 13340  17CC  3E1A               	addlw	26
 13341  17CD  076E               	addwf	_product,w
 13342  17CE  00A1               	movwf	??_setRF_DimmerLights
 13343  17CF  0821               	movf	??_setRF_DimmerLights,w
 13344  17D0  0086               	movwf	6
 13345  17D1  3002               	movlw	2	; select bank4/5
 13346  17D2  0087               	movwf	7
 13347  17D3  0801               	movf	1,w
 13348  17D4  00A2               	movwf	??_setRF_DimmerLights+1
 13349  17D5  086E               	movf	_product,w
 13350  17D6  3E11               	addlw	17
 13351  17D7  0086               	movwf	6
 13352  17D8  3002               	movlw	2	; select bank4/5
 13353  17D9  0087               	movwf	7
 13354  17DA  0822               	movf	??_setRF_DimmerLights+1,w
 13355  17DB  0081               	movwf	1
 13356                           
 13357                           ;RF_Control_B1.c: 500: if (on == 1) {
 13358  17DC  0820               	movf	setRF_DimmerLights@on,w
 13359  17DD  3A01               	xorlw	1
 13360  17DE  1D03               	skipz
 13361  17DF  2FF0               	goto	l5971
 13362                           
 13363                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13364  17E0  086E               	movf	_product,w
 13365  17E1  3E0F               	addlw	15
 13366  17E2  0086               	movwf	6
 13367  17E3  3002               	movlw	2	; select bank4/5
 13368  17E4  0087               	movwf	7
 13369  17E5  0801               	movf	1,w
 13370  17E6  0423               	iorwf	setRF_DimmerLights@status,w
 13371  17E7  00A1               	movwf	??_setRF_DimmerLights
 13372  17E8  086E               	movf	_product,w
 13373  17E9  3E0F               	addlw	15
 13374  17EA  0086               	movwf	6
 13375  17EB  3002               	movlw	2	; select bank4/5
 13376  17EC  0087               	movwf	7
 13377  17ED  0821               	movf	??_setRF_DimmerLights,w
 13378  17EE  0081               	movwf	1
 13379                           
 13380                           ;RF_Control_B1.c: 502: } else {
 13381  17EF  0008               	return
 13382  17F0                     l5971:	
 13383                           
 13384                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13385  17F0  086E               	movf	_product,w
 13386  17F1  3E0F               	addlw	15
 13387  17F2  0086               	movwf	6
 13388  17F3  3002               	movlw	2	; select bank4/5
 13389  17F4  0087               	movwf	7
 13390  17F5  0923               	comf	setRF_DimmerLights@status,w
 13391  17F6  0501               	andwf	1,w
 13392  17F7  00A1               	movwf	??_setRF_DimmerLights
 13393  17F8  086E               	movf	_product,w
 13394  17F9  3E0F               	addlw	15
 13395  17FA  0086               	movwf	6
 13396  17FB  3002               	movlw	2	; select bank4/5
 13397  17FC  0087               	movwf	7
 13398  17FD  0821               	movf	??_setRF_DimmerLights,w
 13399  17FE  0081               	movwf	1
 13400  17FF  0008               	return
 13401  1800                     __end_of_setRF_DimmerLights:	
 13402                           
 13403                           	psect	text79
 13404  0A43                     __ptext79:	
 13405 ;; *************** function _setPercentValue *****************
 13406 ;; Defined at:
 13407 ;;		line 874 in file "../src/Dimmer_B1.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  value           1    wreg     unsigned char 
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;  value           1   62[BANK0 ] unsigned char 
 13412 ;;  i               3   63[BANK0 ] float 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  1    wreg      unsigned char 
 13415 ;; Registers used:
 13416 ;;		wreg, status,2, status,0, pclath, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;Total ram usage:        6 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    7
 13429 ;; This function calls:
 13430 ;;		___awtoft
 13431 ;;		___ftadd
 13432 ;;		___ftdiv
 13433 ;;		___ftneg
 13434 ;;		___fttol
 13435 ;; This function is called by:
 13436 ;;		_setDimmerLights
 13437 ;;		_setDimmerLights_Adj
 13438 ;;		_Flash_Memory_Initialization
 13439 ;; This function uses a non-reentrant model
 13440 ;;
 13441                           
 13442                           
 13443                           ;psect for function _setPercentValue
 13444  0A43                     _setPercentValue:	
 13445                           
 13446                           ;incstack = 0
 13447                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13448                           ;setPercentValue@value stored from wreg
 13449  0A43  0020               	movlb	0	; select bank0
 13450  0A44  00DE               	movwf	setPercentValue@value
 13451                           
 13452                           ;Dimmer_B1.c: 882: float i = ((char)(85*0.8)) - ((char)(15*0.8));
 13453  0A45  3000               	movlw	0
 13454  0A46  00DF               	movwf	setPercentValue@i
 13455  0A47  3060               	movlw	96
 13456  0A48  00E0               	movwf	setPercentValue@i+1
 13457  0A49  3042               	movlw	66
 13458  0A4A  00E1               	movwf	setPercentValue@i+2
 13459                           
 13460                           ;Dimmer_B1.c: 883: i /= 100;
 13461  0A4B  3000               	movlw	0
 13462  0A4C  00AE               	movwf	___ftdiv@f2
 13463  0A4D  30C8               	movlw	200
 13464  0A4E  00AF               	movwf	___ftdiv@f2+1
 13465  0A4F  3042               	movlw	66
 13466  0A50  00B0               	movwf	___ftdiv@f2+2
 13467  0A51  085F               	movf	setPercentValue@i,w
 13468  0A52  00B1               	movwf	___ftdiv@f1
 13469  0A53  0860               	movf	setPercentValue@i+1,w
 13470  0A54  00B2               	movwf	___ftdiv@f1+1
 13471  0A55  0861               	movf	setPercentValue@i+2,w
 13472  0A56  00B3               	movwf	___ftdiv@f1+2
 13473  0A57  318E  26A3  318A   	fcall	___ftdiv
 13474  0A5A  0020               	movlb	0	; select bank0
 13475  0A5B  082E               	movf	?___ftdiv,w
 13476  0A5C  00DF               	movwf	setPercentValue@i
 13477  0A5D  082F               	movf	?___ftdiv+1,w
 13478  0A5E  00E0               	movwf	setPercentValue@i+1
 13479  0A5F  0830               	movf	?___ftdiv+2,w
 13480  0A60  00E1               	movwf	setPercentValue@i+2
 13481                           
 13482                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(85*0.8)) - value) / i));
 13483  0A61  085E               	movf	setPercentValue@value,w
 13484  0A62  00DC               	movwf	??_setPercentValue
 13485  0A63  01DD               	clrf	??_setPercentValue+1
 13486  0A64  09DC               	comf	??_setPercentValue,f
 13487  0A65  09DD               	comf	??_setPercentValue+1,f
 13488  0A66  0ADC               	incf	??_setPercentValue,f
 13489  0A67  1903               	skipnz
 13490  0A68  0ADD               	incf	??_setPercentValue+1,f
 13491  0A69  085C               	movf	??_setPercentValue,w
 13492  0A6A  3E44               	addlw	68
 13493  0A6B  00A8               	movwf	___awtoft@c
 13494  0A6C  3000               	movlw	0
 13495  0A6D  3D5D               	addwfc	??_setPercentValue+1,w
 13496  0A6E  00A9               	movwf	___awtoft@c+1
 13497  0A6F  319F  2799  318A   	fcall	___awtoft
 13498  0A72  0020               	movlb	0	; select bank0
 13499  0A73  0828               	movf	?___awtoft,w
 13500  0A74  00B1               	movwf	___ftdiv@f1
 13501  0A75  0829               	movf	?___awtoft+1,w
 13502  0A76  00B2               	movwf	___ftdiv@f1+1
 13503  0A77  082A               	movf	?___awtoft+2,w
 13504  0A78  00B3               	movwf	___ftdiv@f1+2
 13505  0A79  085F               	movf	setPercentValue@i,w
 13506  0A7A  00AE               	movwf	___ftdiv@f2
 13507  0A7B  0860               	movf	setPercentValue@i+1,w
 13508  0A7C  00AF               	movwf	___ftdiv@f2+1
 13509  0A7D  0861               	movf	setPercentValue@i+2,w
 13510  0A7E  00B0               	movwf	___ftdiv@f2+2
 13511  0A7F  318E  26A3  318A   	fcall	___ftdiv
 13512  0A82  0020               	movlb	0	; select bank0
 13513  0A83  082E               	movf	?___ftdiv,w
 13514  0A84  00BE               	movwf	___ftneg@f1
 13515  0A85  082F               	movf	?___ftdiv+1,w
 13516  0A86  00BF               	movwf	___ftneg@f1+1
 13517  0A87  0830               	movf	?___ftdiv+2,w
 13518  0A88  00C0               	movwf	___ftneg@f1+2
 13519  0A89  319B  23FE  318A   	fcall	___ftneg
 13520  0A8C  0020               	movlb	0	; select bank0
 13521  0A8D  083E               	movf	?___ftneg,w
 13522  0A8E  00C4               	movwf	___ftadd@f2
 13523  0A8F  083F               	movf	?___ftneg+1,w
 13524  0A90  00C5               	movwf	___ftadd@f2+1
 13525  0A91  0840               	movf	?___ftneg+2,w
 13526  0A92  00C6               	movwf	___ftadd@f2+2
 13527  0A93  3000               	movlw	0
 13528  0A94  00C1               	movwf	___ftadd@f1
 13529  0A95  30C8               	movlw	200
 13530  0A96  00C2               	movwf	___ftadd@f1+1
 13531  0A97  3042               	movlw	66
 13532  0A98  00C3               	movwf	___ftadd@f1+2
 13533  0A99  3184  2475  318A   	fcall	___ftadd
 13534  0A9C  0020               	movlb	0	; select bank0
 13535  0A9D  0841               	movf	?___ftadd,w
 13536  0A9E  00CE               	movwf	___fttol@f1
 13537  0A9F  0842               	movf	?___ftadd+1,w
 13538  0AA0  00CF               	movwf	___fttol@f1+1
 13539  0AA1  0843               	movf	?___ftadd+2,w
 13540  0AA2  00D0               	movwf	___fttol@f1+2
 13541  0AA3  318C  245E         	fcall	___fttol
 13542  0AA5  0020               	movlb	0	; select bank0
 13543  0AA6  084E               	movf	?___fttol,w
 13544  0AA7  0008               	return
 13545  0AA8                     __end_of_setPercentValue:	
 13546                           
 13547                           	psect	text80
 13548  0C5E                     __ptext80:	
 13549 ;; *************** function ___fttol *****************
 13550 ;; Defined at:
 13551 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13552 ;; Parameters:    Size  Location     Type
 13553 ;;  f1              3   46[BANK0 ] float 
 13554 ;; Auto vars:     Size  Location     Type
 13555 ;;  lval            4   55[BANK0 ] unsigned long 
 13556 ;;  exp1            1   59[BANK0 ] unsigned char 
 13557 ;;  sign1           1   54[BANK0 ] unsigned char 
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  4   46[BANK0 ] long 
 13560 ;; Registers used:
 13561 ;;		wreg, status,2, status,0
 13562 ;; Tracked objects:
 13563 ;;		On entry : 0/0
 13564 ;;		On exit  : 0/0
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;Total ram usage:       14 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    5
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_getPercentValue
 13578 ;;		_setPercentValue
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function ___fttol
 13584  0C5E                     ___fttol:	
 13585                           
 13586                           ;incstack = 0
 13587                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13588  0C5E  0020               	movlb	0	; select bank0
 13589  0C5F  084E               	movf	___fttol@f1,w
 13590  0C60  00D2               	movwf	??___fttol
 13591  0C61  084F               	movf	___fttol@f1+1,w
 13592  0C62  00D3               	movwf	??___fttol+1
 13593  0C63  0850               	movf	___fttol@f1+2,w
 13594  0C64  00D4               	movwf	??___fttol+2
 13595  0C65  1003               	clrc
 13596  0C66  0D53               	rlf	??___fttol+1,w
 13597  0C67  0D54               	rlf	??___fttol+2,w
 13598  0C68  00D5               	movwf	??___fttol+3
 13599  0C69  0855               	movf	??___fttol+3,w
 13600  0C6A  00DB               	movwf	___fttol@exp1
 13601  0C6B  08DB               	movf	___fttol@exp1,f
 13602  0C6C  1D03               	skipz
 13603  0C6D  2C77               	goto	l5713
 13604  0C6E  3000               	movlw	0
 13605  0C6F  00D1               	movwf	?___fttol+3
 13606  0C70  3000               	movlw	0
 13607  0C71  00D0               	movwf	?___fttol+2
 13608  0C72  3000               	movlw	0
 13609  0C73  00CF               	movwf	?___fttol+1
 13610  0C74  3000               	movlw	0
 13611  0C75  00CE               	movwf	?___fttol
 13612  0C76  0008               	return
 13613  0C77                     l5713:	
 13614  0C77  084E               	movf	___fttol@f1,w
 13615  0C78  00D2               	movwf	??___fttol
 13616  0C79  084F               	movf	___fttol@f1+1,w
 13617  0C7A  00D3               	movwf	??___fttol+1
 13618  0C7B  0850               	movf	___fttol@f1+2,w
 13619  0C7C  00D4               	movwf	??___fttol+2
 13620  0C7D  3017               	movlw	23
 13621  0C7E                     u4605:	
 13622  0C7E  36D4               	lsrf	??___fttol+2,f
 13623  0C7F  0CD3               	rrf	??___fttol+1,f
 13624  0C80  0CD2               	rrf	??___fttol,f
 13625  0C81  0B89               	decfsz	9,f
 13626  0C82  2C7E               	goto	u4605
 13627  0C83  0852               	movf	??___fttol,w
 13628  0C84  00D5               	movwf	??___fttol+3
 13629  0C85  0855               	movf	??___fttol+3,w
 13630  0C86  00D6               	movwf	___fttol@sign1
 13631  0C87  17CF               	bsf	___fttol@f1+1,7
 13632  0C88  30FF               	movlw	255
 13633  0C89  05CE               	andwf	___fttol@f1,f
 13634  0C8A  30FF               	movlw	255
 13635  0C8B  05CF               	andwf	___fttol@f1+1,f
 13636  0C8C  3000               	movlw	0
 13637  0C8D  05D0               	andwf	___fttol@f1+2,f
 13638  0C8E  084E               	movf	___fttol@f1,w
 13639  0C8F  00D7               	movwf	___fttol@lval
 13640  0C90  084F               	movf	___fttol@f1+1,w
 13641  0C91  00D8               	movwf	___fttol@lval+1
 13642  0C92  0850               	movf	___fttol@f1+2,w
 13643  0C93  00D9               	movwf	___fttol@lval+2
 13644  0C94  01DA               	clrf	___fttol@lval+3
 13645  0C95  308E               	movlw	142
 13646  0C96  02DB               	subwf	___fttol@exp1,f
 13647  0C97  1FDB               	btfss	___fttol@exp1,7
 13648  0C98  2CB5               	goto	l5733
 13649  0C99  085B               	movf	___fttol@exp1,w
 13650  0C9A  3A80               	xorlw	128
 13651  0C9B  3E8F               	addlw	143
 13652  0C9C  1803               	skipnc
 13653  0C9D  2CA7               	goto	l5731
 13654  0C9E  3000               	movlw	0
 13655  0C9F  00D1               	movwf	?___fttol+3
 13656  0CA0  3000               	movlw	0
 13657  0CA1  00D0               	movwf	?___fttol+2
 13658  0CA2  3000               	movlw	0
 13659  0CA3  00CF               	movwf	?___fttol+1
 13660  0CA4  3000               	movlw	0
 13661  0CA5  00CE               	movwf	?___fttol
 13662  0CA6  0008               	return
 13663  0CA7                     l5731:	
 13664  0CA7  3001               	movlw	1
 13665  0CA8                     u4635:	
 13666  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13667  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13668  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13669  0CAB  0CD7               	rrf	___fttol@lval,f
 13670  0CAC  0B89               	decfsz	9,f
 13671  0CAD  2CA8               	goto	u4635
 13672  0CAE  3001               	movlw	1
 13673  0CAF  00D2               	movwf	??___fttol
 13674  0CB0  0852               	movf	??___fttol,w
 13675  0CB1  07DB               	addwf	___fttol@exp1,f
 13676  0CB2  1903               	btfsc	3,2
 13677  0CB3  2CCE               	goto	l5743
 13678  0CB4  2CA7               	goto	l5731
 13679  0CB5                     l5733:	
 13680  0CB5  3018               	movlw	24
 13681  0CB6  025B               	subwf	___fttol@exp1,w
 13682  0CB7  1C03               	skipc
 13683  0CB8  2CCB               	goto	l5741
 13684  0CB9  3000               	movlw	0
 13685  0CBA  00D1               	movwf	?___fttol+3
 13686  0CBB  3000               	movlw	0
 13687  0CBC  00D0               	movwf	?___fttol+2
 13688  0CBD  3000               	movlw	0
 13689  0CBE  00CF               	movwf	?___fttol+1
 13690  0CBF  3000               	movlw	0
 13691  0CC0  00CE               	movwf	?___fttol
 13692  0CC1  0008               	return
 13693  0CC2                     l5739:	
 13694  0CC2  3001               	movlw	1
 13695  0CC3                     u4665:	
 13696  0CC3  35D7               	lslf	___fttol@lval,f
 13697  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13698  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13699  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13700  0CC7  0B89               	decfsz	9,f
 13701  0CC8  2CC3               	goto	u4665
 13702  0CC9  3001               	movlw	1
 13703  0CCA  02DB               	subwf	___fttol@exp1,f
 13704  0CCB                     l5741:	
 13705  0CCB  08DB               	movf	___fttol@exp1,f
 13706  0CCC  1D03               	skipz
 13707  0CCD  2CC2               	goto	l5739
 13708  0CCE                     l5743:	
 13709  0CCE  0856               	movf	___fttol@sign1,w
 13710  0CCF  1903               	btfsc	3,2
 13711  0CD0  2CDC               	goto	l5747
 13712  0CD1  09D7               	comf	___fttol@lval,f
 13713  0CD2  09D8               	comf	___fttol@lval+1,f
 13714  0CD3  09D9               	comf	___fttol@lval+2,f
 13715  0CD4  09DA               	comf	___fttol@lval+3,f
 13716  0CD5  0AD7               	incf	___fttol@lval,f
 13717  0CD6  1903               	skipnz
 13718  0CD7  0AD8               	incf	___fttol@lval+1,f
 13719  0CD8  1903               	skipnz
 13720  0CD9  0AD9               	incf	___fttol@lval+2,f
 13721  0CDA  1903               	skipnz
 13722  0CDB  0ADA               	incf	___fttol@lval+3,f
 13723  0CDC                     l5747:	
 13724  0CDC  085A               	movf	___fttol@lval+3,w
 13725  0CDD  00D1               	movwf	?___fttol+3
 13726  0CDE  0859               	movf	___fttol@lval+2,w
 13727  0CDF  00D0               	movwf	?___fttol+2
 13728  0CE0  0858               	movf	___fttol@lval+1,w
 13729  0CE1  00CF               	movwf	?___fttol+1
 13730  0CE2  0857               	movf	___fttol@lval,w
 13731  0CE3  00CE               	movwf	?___fttol
 13732  0CE4  0008               	return
 13733  0CE5                     __end_of___fttol:	
 13734                           
 13735                           	psect	text81
 13736  1BFE                     __ptext81:	
 13737 ;; *************** function ___ftneg *****************
 13738 ;; Defined at:
 13739 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;  f1              3   30[BANK0 ] float 
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;		None
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  3   30[BANK0 ] float 
 13746 ;; Registers used:
 13747 ;;		wreg
 13748 ;; Tracked objects:
 13749 ;;		On entry : 0/0
 13750 ;;		On exit  : 0/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13753 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;Total ram usage:        3 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; Hardware stack levels required when called:    5
 13760 ;; This function calls:
 13761 ;;		Nothing
 13762 ;; This function is called by:
 13763 ;;		_getPercentValue
 13764 ;;		_setPercentValue
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           
 13769                           ;psect for function ___ftneg
 13770  1BFE                     ___ftneg:	
 13771                           
 13772                           ;incstack = 0
 13773                           ; Regs used in ___ftneg: [wreg]
 13774  1BFE  0020               	movlb	0	; select bank0
 13775  1BFF  0840               	movf	___ftneg@f1+2,w
 13776  1C00  043F               	iorwf	___ftneg@f1+1,w
 13777  1C01  043E               	iorwf	___ftneg@f1,w
 13778  1C02  1903               	skipnz
 13779  1C03  0008               	return
 13780  1C04  3080               	movlw	128
 13781  1C05  06C0               	xorwf	___ftneg@f1+2,f
 13782  1C06  0008               	return
 13783  1C07                     __end_of___ftneg:	
 13784                           
 13785                           	psect	text82
 13786  0EA3                     __ptext82:	
 13787 ;; *************** function ___ftdiv *****************
 13788 ;; Defined at:
 13789 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;  f2              3   14[BANK0 ] float 
 13792 ;;  f1              3   17[BANK0 ] float 
 13793 ;; Auto vars:     Size  Location     Type
 13794 ;;  f3              3   25[BANK0 ] float 
 13795 ;;  sign            1   29[BANK0 ] unsigned char 
 13796 ;;  exp             1   28[BANK0 ] unsigned char 
 13797 ;;  cntr            1   24[BANK0 ] unsigned char 
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  3   14[BANK0 ] float 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0, pclath, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13807 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;Total ram usage:       16 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    6
 13814 ;; This function calls:
 13815 ;;		___ftpack
 13816 ;; This function is called by:
 13817 ;;		_getPercentValue
 13818 ;;		_setPercentValue
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           
 13823                           ;psect for function ___ftdiv
 13824  0EA3                     ___ftdiv:	
 13825                           
 13826                           ;incstack = 0
 13827                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13828  0EA3  0020               	movlb	0	; select bank0
 13829  0EA4  0831               	movf	___ftdiv@f1,w
 13830  0EA5  00B4               	movwf	??___ftdiv
 13831  0EA6  0832               	movf	___ftdiv@f1+1,w
 13832  0EA7  00B5               	movwf	??___ftdiv+1
 13833  0EA8  0833               	movf	___ftdiv@f1+2,w
 13834  0EA9  00B6               	movwf	??___ftdiv+2
 13835  0EAA  1003               	clrc
 13836  0EAB  0D35               	rlf	??___ftdiv+1,w
 13837  0EAC  0D36               	rlf	??___ftdiv+2,w
 13838  0EAD  00B7               	movwf	??___ftdiv+3
 13839  0EAE  0837               	movf	??___ftdiv+3,w
 13840  0EAF  00BC               	movwf	___ftdiv@exp
 13841  0EB0  08BC               	movf	___ftdiv@exp,f
 13842  0EB1  1D03               	skipz
 13843  0EB2  2EBA               	goto	l5613
 13844  0EB3  3000               	movlw	0
 13845  0EB4  00AE               	movwf	?___ftdiv
 13846  0EB5  3000               	movlw	0
 13847  0EB6  00AF               	movwf	?___ftdiv+1
 13848  0EB7  3000               	movlw	0
 13849  0EB8  00B0               	movwf	?___ftdiv+2
 13850  0EB9  0008               	return
 13851  0EBA                     l5613:	
 13852  0EBA  082E               	movf	___ftdiv@f2,w
 13853  0EBB  00B4               	movwf	??___ftdiv
 13854  0EBC  082F               	movf	___ftdiv@f2+1,w
 13855  0EBD  00B5               	movwf	??___ftdiv+1
 13856  0EBE  0830               	movf	___ftdiv@f2+2,w
 13857  0EBF  00B6               	movwf	??___ftdiv+2
 13858  0EC0  1003               	clrc
 13859  0EC1  0D35               	rlf	??___ftdiv+1,w
 13860  0EC2  0D36               	rlf	??___ftdiv+2,w
 13861  0EC3  00B7               	movwf	??___ftdiv+3
 13862  0EC4  0837               	movf	??___ftdiv+3,w
 13863  0EC5  00BD               	movwf	___ftdiv@sign
 13864  0EC6  08BD               	movf	___ftdiv@sign,f
 13865  0EC7  1D03               	skipz
 13866  0EC8  2ED0               	goto	l5619
 13867  0EC9  3000               	movlw	0
 13868  0ECA  00AE               	movwf	?___ftdiv
 13869  0ECB  3000               	movlw	0
 13870  0ECC  00AF               	movwf	?___ftdiv+1
 13871  0ECD  3000               	movlw	0
 13872  0ECE  00B0               	movwf	?___ftdiv+2
 13873  0ECF  0008               	return
 13874  0ED0                     l5619:	
 13875  0ED0  3000               	movlw	0
 13876  0ED1  00B9               	movwf	___ftdiv@f3
 13877  0ED2  3000               	movlw	0
 13878  0ED3  00BA               	movwf	___ftdiv@f3+1
 13879  0ED4  3000               	movlw	0
 13880  0ED5  00BB               	movwf	___ftdiv@f3+2
 13881  0ED6  3089               	movlw	137
 13882  0ED7  073D               	addwf	___ftdiv@sign,w
 13883  0ED8  00B4               	movwf	??___ftdiv
 13884  0ED9  0834               	movf	??___ftdiv,w
 13885  0EDA  02BC               	subwf	___ftdiv@exp,f
 13886  0EDB  0831               	movf	___ftdiv@f1,w
 13887  0EDC  00B4               	movwf	??___ftdiv
 13888  0EDD  0832               	movf	___ftdiv@f1+1,w
 13889  0EDE  00B5               	movwf	??___ftdiv+1
 13890  0EDF  0833               	movf	___ftdiv@f1+2,w
 13891  0EE0  00B6               	movwf	??___ftdiv+2
 13892  0EE1  3010               	movlw	16
 13893  0EE2                     u4405:	
 13894  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13895  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13896  0EE4  0CB4               	rrf	??___ftdiv,f
 13897  0EE5  0B89               	decfsz	9,f
 13898  0EE6  2EE2               	goto	u4405
 13899  0EE7  0834               	movf	??___ftdiv,w
 13900  0EE8  00B7               	movwf	??___ftdiv+3
 13901  0EE9  0837               	movf	??___ftdiv+3,w
 13902  0EEA  00BD               	movwf	___ftdiv@sign
 13903  0EEB  082E               	movf	___ftdiv@f2,w
 13904  0EEC  00B4               	movwf	??___ftdiv
 13905  0EED  082F               	movf	___ftdiv@f2+1,w
 13906  0EEE  00B5               	movwf	??___ftdiv+1
 13907  0EEF  0830               	movf	___ftdiv@f2+2,w
 13908  0EF0  00B6               	movwf	??___ftdiv+2
 13909  0EF1  3010               	movlw	16
 13910  0EF2                     u4415:	
 13911  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13912  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13913  0EF4  0CB4               	rrf	??___ftdiv,f
 13914  0EF5  0B89               	decfsz	9,f
 13915  0EF6  2EF2               	goto	u4415
 13916  0EF7  0834               	movf	??___ftdiv,w
 13917  0EF8  00B7               	movwf	??___ftdiv+3
 13918  0EF9  0837               	movf	??___ftdiv+3,w
 13919  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13920  0EFB  3080               	movlw	128
 13921  0EFC  00B4               	movwf	??___ftdiv
 13922  0EFD  0834               	movf	??___ftdiv,w
 13923  0EFE  05BD               	andwf	___ftdiv@sign,f
 13924  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13925  0F00  30FF               	movlw	255
 13926  0F01  05B1               	andwf	___ftdiv@f1,f
 13927  0F02  30FF               	movlw	255
 13928  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13929  0F04  3000               	movlw	0
 13930  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13931  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13932  0F07  30FF               	movlw	255
 13933  0F08  05AE               	andwf	___ftdiv@f2,f
 13934  0F09  30FF               	movlw	255
 13935  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13936  0F0B  3000               	movlw	0
 13937  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13938  0F0D  3018               	movlw	24
 13939  0F0E  00B4               	movwf	??___ftdiv
 13940  0F0F  0834               	movf	??___ftdiv,w
 13941  0F10  00B8               	movwf	___ftdiv@cntr
 13942  0F11                     l5633:	
 13943  0F11  3001               	movlw	1
 13944  0F12                     u4425:	
 13945  0F12  35B9               	lslf	___ftdiv@f3,f
 13946  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13947  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13948  0F15  0B89               	decfsz	9,f
 13949  0F16  2F12               	goto	u4425
 13950  0F17  0830               	movf	___ftdiv@f2+2,w
 13951  0F18  0233               	subwf	___ftdiv@f1+2,w
 13952  0F19  1D03               	skipz
 13953  0F1A  2F21               	goto	u4435
 13954  0F1B  082F               	movf	___ftdiv@f2+1,w
 13955  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13956  0F1D  1D03               	skipz
 13957  0F1E  2F21               	goto	u4435
 13958  0F1F  082E               	movf	___ftdiv@f2,w
 13959  0F20  0231               	subwf	___ftdiv@f1,w
 13960  0F21                     u4435:	
 13961  0F21  1C03               	skipc
 13962  0F22  2F2A               	goto	l5641
 13963  0F23  082E               	movf	___ftdiv@f2,w
 13964  0F24  02B1               	subwf	___ftdiv@f1,f
 13965  0F25  082F               	movf	___ftdiv@f2+1,w
 13966  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13967  0F27  0830               	movf	___ftdiv@f2+2,w
 13968  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13969  0F29  1439               	bsf	___ftdiv@f3,0
 13970  0F2A                     l5641:	
 13971  0F2A  3001               	movlw	1
 13972  0F2B                     u4445:	
 13973  0F2B  35B1               	lslf	___ftdiv@f1,f
 13974  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13975  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13976  0F2E  0B89               	decfsz	9,f
 13977  0F2F  2F2B               	goto	u4445
 13978  0F30  3001               	movlw	1
 13979  0F31  02B8               	subwf	___ftdiv@cntr,f
 13980  0F32  1D03               	btfss	3,2
 13981  0F33  2F11               	goto	l5633
 13982  0F34  0839               	movf	___ftdiv@f3,w
 13983  0F35  00A0               	movwf	___ftpack@arg
 13984  0F36  083A               	movf	___ftdiv@f3+1,w
 13985  0F37  00A1               	movwf	___ftpack@arg+1
 13986  0F38  083B               	movf	___ftdiv@f3+2,w
 13987  0F39  00A2               	movwf	___ftpack@arg+2
 13988  0F3A  083C               	movf	___ftdiv@exp,w
 13989  0F3B  00B4               	movwf	??___ftdiv
 13990  0F3C  0834               	movf	??___ftdiv,w
 13991  0F3D  00A3               	movwf	___ftpack@exp
 13992  0F3E  083D               	movf	___ftdiv@sign,w
 13993  0F3F  00B5               	movwf	??___ftdiv+1
 13994  0F40  0835               	movf	??___ftdiv+1,w
 13995  0F41  00A4               	movwf	___ftpack@sign
 13996  0F42  3189  2181         	fcall	___ftpack
 13997  0F44  0020               	movlb	0	; select bank0
 13998  0F45  0820               	movf	?___ftpack,w
 13999  0F46  00AE               	movwf	?___ftdiv
 14000  0F47  0821               	movf	?___ftpack+1,w
 14001  0F48  00AF               	movwf	?___ftdiv+1
 14002  0F49  0822               	movf	?___ftpack+2,w
 14003  0F4A  00B0               	movwf	?___ftdiv+2
 14004  0F4B  0008               	return
 14005  0F4C                     __end_of___ftdiv:	
 14006                           
 14007                           	psect	text83
 14008  0475                     __ptext83:	
 14009 ;; *************** function ___ftadd *****************
 14010 ;; Defined at:
 14011 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  f1              3   33[BANK0 ] float 
 14014 ;;  f2              3   36[BANK0 ] float 
 14015 ;; Auto vars:     Size  Location     Type
 14016 ;;  exp1            1   45[BANK0 ] unsigned char 
 14017 ;;  exp2            1   44[BANK0 ] unsigned char 
 14018 ;;  sign            1   43[BANK0 ] unsigned char 
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  3   33[BANK0 ] float 
 14021 ;; Registers used:
 14022 ;;		wreg, status,2, status,0, pclath, cstack
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14028 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;Total ram usage:       13 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    6
 14035 ;; This function calls:
 14036 ;;		___ftpack
 14037 ;; This function is called by:
 14038 ;;		_getPercentValue
 14039 ;;		_setPercentValue
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           
 14044                           ;psect for function ___ftadd
 14045  0475                     ___ftadd:	
 14046                           
 14047                           ;incstack = 0
 14048                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14049  0475  0020               	movlb	0	; select bank0
 14050  0476  0841               	movf	___ftadd@f1,w
 14051  0477  00C7               	movwf	??___ftadd
 14052  0478  0842               	movf	___ftadd@f1+1,w
 14053  0479  00C8               	movwf	??___ftadd+1
 14054  047A  0843               	movf	___ftadd@f1+2,w
 14055  047B  00C9               	movwf	??___ftadd+2
 14056  047C  1003               	clrc
 14057  047D  0D48               	rlf	??___ftadd+1,w
 14058  047E  0D49               	rlf	??___ftadd+2,w
 14059  047F  00CA               	movwf	??___ftadd+3
 14060  0480  084A               	movf	??___ftadd+3,w
 14061  0481  00CD               	movwf	___ftadd@exp1
 14062  0482  0844               	movf	___ftadd@f2,w
 14063  0483  00C7               	movwf	??___ftadd
 14064  0484  0845               	movf	___ftadd@f2+1,w
 14065  0485  00C8               	movwf	??___ftadd+1
 14066  0486  0846               	movf	___ftadd@f2+2,w
 14067  0487  00C9               	movwf	??___ftadd+2
 14068  0488  1003               	clrc
 14069  0489  0D48               	rlf	??___ftadd+1,w
 14070  048A  0D49               	rlf	??___ftadd+2,w
 14071  048B  00CA               	movwf	??___ftadd+3
 14072  048C  084A               	movf	??___ftadd+3,w
 14073  048D  00CC               	movwf	___ftadd@exp2
 14074  048E  084D               	movf	___ftadd@exp1,w
 14075  048F  1903               	btfsc	3,2
 14076  0490  2C9D               	goto	l5543
 14077  0491  084C               	movf	___ftadd@exp2,w
 14078  0492  024D               	subwf	___ftadd@exp1,w
 14079  0493  1803               	skipnc
 14080  0494  2CA4               	goto	l5547
 14081  0495  034D               	decf	___ftadd@exp1,w
 14082  0496  3AFF               	xorlw	255
 14083  0497  074C               	addwf	___ftadd@exp2,w
 14084  0498  00C7               	movwf	??___ftadd
 14085  0499  3019               	movlw	25
 14086  049A  0247               	subwf	??___ftadd,w
 14087  049B  1C03               	skipc
 14088  049C  2CA4               	goto	l5547
 14089  049D                     l5543:	
 14090  049D  0844               	movf	___ftadd@f2,w
 14091  049E  00C1               	movwf	?___ftadd
 14092  049F  0845               	movf	___ftadd@f2+1,w
 14093  04A0  00C2               	movwf	?___ftadd+1
 14094  04A1  0846               	movf	___ftadd@f2+2,w
 14095  04A2  00C3               	movwf	?___ftadd+2
 14096  04A3  0008               	return
 14097  04A4                     l5547:	
 14098  04A4  084C               	movf	___ftadd@exp2,w
 14099  04A5  1903               	btfsc	3,2
 14100  04A6  0008               	return
 14101  04A7  084D               	movf	___ftadd@exp1,w
 14102  04A8  024C               	subwf	___ftadd@exp2,w
 14103  04A9  1803               	skipnc
 14104  04AA  2CB3               	goto	l5553
 14105  04AB  034C               	decf	___ftadd@exp2,w
 14106  04AC  3AFF               	xorlw	255
 14107  04AD  074D               	addwf	___ftadd@exp1,w
 14108  04AE  00C7               	movwf	??___ftadd
 14109  04AF  3019               	movlw	25
 14110  04B0  0247               	subwf	??___ftadd,w
 14111  04B1  1803               	btfsc	3,0
 14112  04B2  0008               	return
 14113  04B3                     l5553:	
 14114  04B3  3006               	movlw	6
 14115  04B4  00C7               	movwf	??___ftadd
 14116  04B5  0847               	movf	??___ftadd,w
 14117  04B6  00CB               	movwf	___ftadd@sign
 14118  04B7  1BC3               	btfsc	___ftadd@f1+2,7
 14119  04B8  17CB               	bsf	___ftadd@sign,7
 14120  04B9  1BC6               	btfsc	___ftadd@f2+2,7
 14121  04BA  174B               	bsf	___ftadd@sign,6
 14122  04BB  17C2               	bsf	___ftadd@f1+1,7
 14123  04BC  30FF               	movlw	255
 14124  04BD  05C1               	andwf	___ftadd@f1,f
 14125  04BE  30FF               	movlw	255
 14126  04BF  05C2               	andwf	___ftadd@f1+1,f
 14127  04C0  3000               	movlw	0
 14128  04C1  05C3               	andwf	___ftadd@f1+2,f
 14129  04C2  17C5               	bsf	___ftadd@f2+1,7
 14130  04C3  30FF               	movlw	255
 14131  04C4  05C4               	andwf	___ftadd@f2,f
 14132  04C5  30FF               	movlw	255
 14133  04C6  05C5               	andwf	___ftadd@f2+1,f
 14134  04C7  3000               	movlw	0
 14135  04C8  05C6               	andwf	___ftadd@f2+2,f
 14136  04C9  084C               	movf	___ftadd@exp2,w
 14137  04CA  024D               	subwf	___ftadd@exp1,w
 14138  04CB  1803               	skipnc
 14139  04CC  2CEF               	goto	l5575
 14140  04CD                     l5565:	
 14141  04CD  3001               	movlw	1
 14142  04CE                     u4245:	
 14143  04CE  35C4               	lslf	___ftadd@f2,f
 14144  04CF  0DC5               	rlf	___ftadd@f2+1,f
 14145  04D0  0DC6               	rlf	___ftadd@f2+2,f
 14146  04D1  0B89               	decfsz	9,f
 14147  04D2  2CCE               	goto	u4245
 14148  04D3  3001               	movlw	1
 14149  04D4  02CC               	subwf	___ftadd@exp2,f
 14150  04D5  084C               	movf	___ftadd@exp2,w
 14151  04D6  064D               	xorwf	___ftadd@exp1,w
 14152  04D7  1903               	skipnz
 14153  04D8  2CEA               	goto	l5573
 14154  04D9  3001               	movlw	1
 14155  04DA  02CB               	subwf	___ftadd@sign,f
 14156  04DB  084B               	movf	___ftadd@sign,w
 14157  04DC  3907               	andlw	7
 14158  04DD  1903               	btfsc	3,2
 14159  04DE  2CEA               	goto	l5573
 14160  04DF  2CCD               	goto	l5565
 14161  04E0                     l5571:	
 14162  04E0  3001               	movlw	1
 14163  04E1                     u4275:	
 14164  04E1  36C3               	lsrf	___ftadd@f1+2,f
 14165  04E2  0CC2               	rrf	___ftadd@f1+1,f
 14166  04E3  0CC1               	rrf	___ftadd@f1,f
 14167  04E4  0B89               	decfsz	9,f
 14168  04E5  2CE1               	goto	u4275
 14169  04E6  3001               	movlw	1
 14170  04E7  00C7               	movwf	??___ftadd
 14171  04E8  0847               	movf	??___ftadd,w
 14172  04E9  07CD               	addwf	___ftadd@exp1,f
 14173  04EA                     l5573:	
 14174  04EA  084D               	movf	___ftadd@exp1,w
 14175  04EB  064C               	xorwf	___ftadd@exp2,w
 14176  04EC  1903               	btfsc	3,2
 14177  04ED  2D14               	goto	l2756
 14178  04EE  2CE0               	goto	l5571
 14179  04EF                     l5575:	
 14180  04EF  084D               	movf	___ftadd@exp1,w
 14181  04F0  024C               	subwf	___ftadd@exp2,w
 14182  04F1  1803               	skipnc
 14183  04F2  2D14               	goto	l2756
 14184  04F3                     l5577:	
 14185  04F3  3001               	movlw	1
 14186  04F4                     u4305:	
 14187  04F4  35C1               	lslf	___ftadd@f1,f
 14188  04F5  0DC2               	rlf	___ftadd@f1+1,f
 14189  04F6  0DC3               	rlf	___ftadd@f1+2,f
 14190  04F7  0B89               	decfsz	9,f
 14191  04F8  2CF4               	goto	u4305
 14192  04F9  3001               	movlw	1
 14193  04FA  02CD               	subwf	___ftadd@exp1,f
 14194  04FB  084C               	movf	___ftadd@exp2,w
 14195  04FC  064D               	xorwf	___ftadd@exp1,w
 14196  04FD  1903               	skipnz
 14197  04FE  2D10               	goto	l5585
 14198  04FF  3001               	movlw	1
 14199  0500  02CB               	subwf	___ftadd@sign,f
 14200  0501  084B               	movf	___ftadd@sign,w
 14201  0502  3907               	andlw	7
 14202  0503  1903               	btfsc	3,2
 14203  0504  2D10               	goto	l5585
 14204  0505  2CF3               	goto	l5577
 14205  0506                     l5583:	
 14206  0506  3001               	movlw	1
 14207  0507                     u4335:	
 14208  0507  36C6               	lsrf	___ftadd@f2+2,f
 14209  0508  0CC5               	rrf	___ftadd@f2+1,f
 14210  0509  0CC4               	rrf	___ftadd@f2,f
 14211  050A  0B89               	decfsz	9,f
 14212  050B  2D07               	goto	u4335
 14213  050C  3001               	movlw	1
 14214  050D  00C7               	movwf	??___ftadd
 14215  050E  0847               	movf	??___ftadd,w
 14216  050F  07CC               	addwf	___ftadd@exp2,f
 14217  0510                     l5585:	
 14218  0510  084D               	movf	___ftadd@exp1,w
 14219  0511  064C               	xorwf	___ftadd@exp2,w
 14220  0512  1D03               	skipz
 14221  0513  2D06               	goto	l5583
 14222  0514                     l2756:	
 14223  0514  1FCB               	btfss	___ftadd@sign,7
 14224  0515  2D26               	goto	l5589
 14225  0516  30FF               	movlw	255
 14226  0517  06C1               	xorwf	___ftadd@f1,f
 14227  0518  30FF               	movlw	255
 14228  0519  06C2               	xorwf	___ftadd@f1+1,f
 14229  051A  30FF               	movlw	255
 14230  051B  06C3               	xorwf	___ftadd@f1+2,f
 14231  051C  3001               	movlw	1
 14232  051D  07C1               	addwf	___ftadd@f1,f
 14233  051E  3000               	movlw	0
 14234  051F  1803               	skipnc
 14235  0520  3001               	movlw	1
 14236  0521  07C2               	addwf	___ftadd@f1+1,f
 14237  0522  3000               	movlw	0
 14238  0523  1803               	skipnc
 14239  0524  3001               	movlw	1
 14240  0525  07C3               	addwf	___ftadd@f1+2,f
 14241  0526                     l5589:	
 14242  0526  1F4B               	btfss	___ftadd@sign,6
 14243  0527  2D38               	goto	l5593
 14244  0528  30FF               	movlw	255
 14245  0529  06C4               	xorwf	___ftadd@f2,f
 14246  052A  30FF               	movlw	255
 14247  052B  06C5               	xorwf	___ftadd@f2+1,f
 14248  052C  30FF               	movlw	255
 14249  052D  06C6               	xorwf	___ftadd@f2+2,f
 14250  052E  3001               	movlw	1
 14251  052F  07C4               	addwf	___ftadd@f2,f
 14252  0530  3000               	movlw	0
 14253  0531  1803               	skipnc
 14254  0532  3001               	movlw	1
 14255  0533  07C5               	addwf	___ftadd@f2+1,f
 14256  0534  3000               	movlw	0
 14257  0535  1803               	skipnc
 14258  0536  3001               	movlw	1
 14259  0537  07C6               	addwf	___ftadd@f2+2,f
 14260  0538                     l5593:	
 14261  0538  01CB               	clrf	___ftadd@sign
 14262  0539  0841               	movf	___ftadd@f1,w
 14263  053A  07C4               	addwf	___ftadd@f2,f
 14264  053B  0842               	movf	___ftadd@f1+1,w
 14265  053C  3DC5               	addwfc	___ftadd@f2+1,f
 14266  053D  0843               	movf	___ftadd@f1+2,w
 14267  053E  3DC6               	addwfc	___ftadd@f2+2,f
 14268  053F  1FC6               	btfss	___ftadd@f2+2,7
 14269  0540  2D53               	goto	l5603
 14270  0541  30FF               	movlw	255
 14271  0542  06C4               	xorwf	___ftadd@f2,f
 14272  0543  30FF               	movlw	255
 14273  0544  06C5               	xorwf	___ftadd@f2+1,f
 14274  0545  30FF               	movlw	255
 14275  0546  06C6               	xorwf	___ftadd@f2+2,f
 14276  0547  3001               	movlw	1
 14277  0548  07C4               	addwf	___ftadd@f2,f
 14278  0549  3000               	movlw	0
 14279  054A  1803               	skipnc
 14280  054B  3001               	movlw	1
 14281  054C  07C5               	addwf	___ftadd@f2+1,f
 14282  054D  3000               	movlw	0
 14283  054E  1803               	skipnc
 14284  054F  3001               	movlw	1
 14285  0550  07C6               	addwf	___ftadd@f2+2,f
 14286  0551  01CB               	clrf	___ftadd@sign
 14287  0552  0ACB               	incf	___ftadd@sign,f
 14288  0553                     l5603:	
 14289  0553  0844               	movf	___ftadd@f2,w
 14290  0554  00A0               	movwf	___ftpack@arg
 14291  0555  0845               	movf	___ftadd@f2+1,w
 14292  0556  00A1               	movwf	___ftpack@arg+1
 14293  0557  0846               	movf	___ftadd@f2+2,w
 14294  0558  00A2               	movwf	___ftpack@arg+2
 14295  0559  084D               	movf	___ftadd@exp1,w
 14296  055A  00C7               	movwf	??___ftadd
 14297  055B  0847               	movf	??___ftadd,w
 14298  055C  00A3               	movwf	___ftpack@exp
 14299  055D  084B               	movf	___ftadd@sign,w
 14300  055E  00C8               	movwf	??___ftadd+1
 14301  055F  0848               	movf	??___ftadd+1,w
 14302  0560  00A4               	movwf	___ftpack@sign
 14303  0561  3189  2181         	fcall	___ftpack
 14304  0563  0020               	movlb	0	; select bank0
 14305  0564  0820               	movf	?___ftpack,w
 14306  0565  00C1               	movwf	?___ftadd
 14307  0566  0821               	movf	?___ftpack+1,w
 14308  0567  00C2               	movwf	?___ftadd+1
 14309  0568  0822               	movf	?___ftpack+2,w
 14310  0569  00C3               	movwf	?___ftadd+2
 14311  056A  0008               	return
 14312  056B                     __end_of___ftadd:	
 14313                           
 14314                           	psect	text84
 14315  1F99                     __ptext84:	
 14316 ;; *************** function ___awtoft *****************
 14317 ;; Defined at:
 14318 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14319 ;; Parameters:    Size  Location     Type
 14320 ;;  c               2    8[BANK0 ] int 
 14321 ;; Auto vars:     Size  Location     Type
 14322 ;;  sign            1   13[BANK0 ] unsigned char 
 14323 ;; Return value:  Size  Location     Type
 14324 ;;                  3    8[BANK0 ] float 
 14325 ;; Registers used:
 14326 ;;		wreg, status,2, status,0, pclath, cstack
 14327 ;; Tracked objects:
 14328 ;;		On entry : 0/0
 14329 ;;		On exit  : 0/0
 14330 ;;		Unchanged: 0/0
 14331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14332 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;Total ram usage:        6 bytes
 14337 ;; Hardware stack levels used:    1
 14338 ;; Hardware stack levels required when called:    6
 14339 ;; This function calls:
 14340 ;;		___ftpack
 14341 ;; This function is called by:
 14342 ;;		_getPercentValue
 14343 ;;		_setPercentValue
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function ___awtoft
 14349  1F99                     ___awtoft:	
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14353  1F99  0020               	movlb	0	; select bank0
 14354  1F9A  01AD               	clrf	___awtoft@sign
 14355  1F9B  1FA9               	btfss	___awtoft@c+1,7
 14356  1F9C  2FA4               	goto	l5531
 14357  1F9D  09A8               	comf	___awtoft@c,f
 14358  1F9E  09A9               	comf	___awtoft@c+1,f
 14359  1F9F  0AA8               	incf	___awtoft@c,f
 14360  1FA0  1903               	skipnz
 14361  1FA1  0AA9               	incf	___awtoft@c+1,f
 14362  1FA2  01AD               	clrf	___awtoft@sign
 14363  1FA3  0AAD               	incf	___awtoft@sign,f
 14364  1FA4                     l5531:	
 14365  1FA4  0828               	movf	___awtoft@c,w
 14366  1FA5  00A0               	movwf	___ftpack@arg
 14367  1FA6  0829               	movf	___awtoft@c+1,w
 14368  1FA7  00A1               	movwf	___ftpack@arg+1
 14369  1FA8  01A2               	clrf	___ftpack@arg+2
 14370  1FA9  308E               	movlw	142
 14371  1FAA  00AB               	movwf	??___awtoft
 14372  1FAB  082B               	movf	??___awtoft,w
 14373  1FAC  00A3               	movwf	___ftpack@exp
 14374  1FAD  082D               	movf	___awtoft@sign,w
 14375  1FAE  00AC               	movwf	??___awtoft+1
 14376  1FAF  082C               	movf	??___awtoft+1,w
 14377  1FB0  00A4               	movwf	___ftpack@sign
 14378  1FB1  3189  2181         	fcall	___ftpack
 14379  1FB3  0020               	movlb	0	; select bank0
 14380  1FB4  0820               	movf	?___ftpack,w
 14381  1FB5  00A8               	movwf	?___awtoft
 14382  1FB6  0821               	movf	?___ftpack+1,w
 14383  1FB7  00A9               	movwf	?___awtoft+1
 14384  1FB8  0822               	movf	?___ftpack+2,w
 14385  1FB9  00AA               	movwf	?___awtoft+2
 14386  1FBA  0008               	return
 14387  1FBB                     __end_of___awtoft:	
 14388                           
 14389                           	psect	text85
 14390  0981                     __ptext85:	
 14391 ;; *************** function ___ftpack *****************
 14392 ;; Defined at:
 14393 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;  arg             3    0[BANK0 ] unsigned um
 14396 ;;  exp             1    3[BANK0 ] unsigned char 
 14397 ;;  sign            1    4[BANK0 ] unsigned char 
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;		None
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  3    0[BANK0 ] float 
 14402 ;; Registers used:
 14403 ;;		wreg, status,2, status,0
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14409 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;Total ram usage:        8 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    5
 14416 ;; This function calls:
 14417 ;;		Nothing
 14418 ;; This function is called by:
 14419 ;;		___awtoft
 14420 ;;		___ftadd
 14421 ;;		___ftdiv
 14422 ;;		___ftmul
 14423 ;; This function uses a non-reentrant model
 14424 ;;
 14425                           
 14426                           
 14427                           ;psect for function ___ftpack
 14428  0981                     ___ftpack:	
 14429                           
 14430                           ;incstack = 0
 14431                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14432  0981  0020               	movlb	0	; select bank0
 14433  0982  0823               	movf	___ftpack@exp,w
 14434  0983  1903               	btfsc	3,2
 14435  0984  298A               	goto	l5481
 14436  0985  0822               	movf	___ftpack@arg+2,w
 14437  0986  0421               	iorwf	___ftpack@arg+1,w
 14438  0987  0420               	iorwf	___ftpack@arg,w
 14439  0988  1D03               	skipz
 14440  0989  299B               	goto	l5487
 14441  098A                     l5481:	
 14442  098A  3000               	movlw	0
 14443  098B  00A0               	movwf	?___ftpack
 14444  098C  3000               	movlw	0
 14445  098D  00A1               	movwf	?___ftpack+1
 14446  098E  3000               	movlw	0
 14447  098F  00A2               	movwf	?___ftpack+2
 14448  0990  0008               	return
 14449  0991                     l5485:	
 14450  0991  3001               	movlw	1
 14451  0992  00A5               	movwf	??___ftpack
 14452  0993  0825               	movf	??___ftpack,w
 14453  0994  07A3               	addwf	___ftpack@exp,f
 14454  0995  3001               	movlw	1
 14455  0996                     u4035:	
 14456  0996  36A2               	lsrf	___ftpack@arg+2,f
 14457  0997  0CA1               	rrf	___ftpack@arg+1,f
 14458  0998  0CA0               	rrf	___ftpack@arg,f
 14459  0999  0B89               	decfsz	9,f
 14460  099A  2996               	goto	u4035
 14461  099B                     l5487:	
 14462  099B  30FE               	movlw	254
 14463  099C  0522               	andwf	___ftpack@arg+2,w
 14464  099D  1903               	btfsc	3,2
 14465  099E  29B4               	goto	l2727
 14466  099F  2991               	goto	l5485
 14467  09A0                     l5489:	
 14468  09A0  3001               	movlw	1
 14469  09A1  00A5               	movwf	??___ftpack
 14470  09A2  0825               	movf	??___ftpack,w
 14471  09A3  07A3               	addwf	___ftpack@exp,f
 14472  09A4  3001               	movlw	1
 14473  09A5  07A0               	addwf	___ftpack@arg,f
 14474  09A6  3000               	movlw	0
 14475  09A7  1803               	skipnc
 14476  09A8  3001               	movlw	1
 14477  09A9  07A1               	addwf	___ftpack@arg+1,f
 14478  09AA  3000               	movlw	0
 14479  09AB  1803               	skipnc
 14480  09AC  3001               	movlw	1
 14481  09AD  07A2               	addwf	___ftpack@arg+2,f
 14482  09AE  3001               	movlw	1
 14483  09AF                     u4055:	
 14484  09AF  36A2               	lsrf	___ftpack@arg+2,f
 14485  09B0  0CA1               	rrf	___ftpack@arg+1,f
 14486  09B1  0CA0               	rrf	___ftpack@arg,f
 14487  09B2  0B89               	decfsz	9,f
 14488  09B3  29AF               	goto	u4055
 14489  09B4                     l2727:	
 14490  09B4  30FF               	movlw	255
 14491  09B5  0522               	andwf	___ftpack@arg+2,w
 14492  09B6  1903               	btfsc	3,2
 14493  09B7  29C1               	goto	l5497
 14494  09B8  29A0               	goto	l5489
 14495  09B9                     l5495:	
 14496  09B9  3001               	movlw	1
 14497  09BA  02A3               	subwf	___ftpack@exp,f
 14498  09BB  3001               	movlw	1
 14499  09BC                     u4075:	
 14500  09BC  35A0               	lslf	___ftpack@arg,f
 14501  09BD  0DA1               	rlf	___ftpack@arg+1,f
 14502  09BE  0DA2               	rlf	___ftpack@arg+2,f
 14503  09BF  0B89               	decfsz	9,f
 14504  09C0  29BC               	goto	u4075
 14505  09C1                     l5497:	
 14506  09C1  1FA1               	btfss	___ftpack@arg+1,7
 14507  09C2  29B9               	goto	l5495
 14508  09C3  1823               	btfsc	___ftpack@exp,0
 14509  09C4  29CB               	goto	l2733
 14510  09C5  30FF               	movlw	255
 14511  09C6  05A0               	andwf	___ftpack@arg,f
 14512  09C7  307F               	movlw	127
 14513  09C8  05A1               	andwf	___ftpack@arg+1,f
 14514  09C9  30FF               	movlw	255
 14515  09CA  05A2               	andwf	___ftpack@arg+2,f
 14516  09CB                     l2733:	
 14517  09CB  1003               	clrc
 14518  09CC  0CA3               	rrf	___ftpack@exp,f
 14519  09CD  0823               	movf	___ftpack@exp,w
 14520  09CE  00A5               	movwf	??___ftpack
 14521  09CF  01A6               	clrf	??___ftpack+1
 14522  09D0  01A7               	clrf	??___ftpack+2
 14523  09D1  3010               	movlw	16
 14524  09D2                     u4105:	
 14525  09D2  35A5               	lslf	??___ftpack,f
 14526  09D3  0DA6               	rlf	??___ftpack+1,f
 14527  09D4  0DA7               	rlf	??___ftpack+2,f
 14528  09D5  0B89               	decfsz	9,f
 14529  09D6  29D2               	goto	u4105
 14530  09D7  0825               	movf	??___ftpack,w
 14531  09D8  04A0               	iorwf	___ftpack@arg,f
 14532  09D9  0826               	movf	??___ftpack+1,w
 14533  09DA  04A1               	iorwf	___ftpack@arg+1,f
 14534  09DB  0827               	movf	??___ftpack+2,w
 14535  09DC  04A2               	iorwf	___ftpack@arg+2,f
 14536  09DD  0824               	movf	___ftpack@sign,w
 14537  09DE  1903               	btfsc	3,2
 14538  09DF  0008               	return
 14539  09E0  17A2               	bsf	___ftpack@arg+2,7
 14540  09E1  0008               	return
 14541  09E2                     __end_of___ftpack:	
 14542                           
 14543                           	psect	text86
 14544  126B                     __ptext86:	
 14545 ;; *************** function _setLED *****************
 14546 ;; Defined at:
 14547 ;;		line 76 in file "../src/LED_B1.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;  led             1    wreg     unsigned char 
 14550 ;;  command         1    2[BANK0 ] unsigned char 
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;  led             1    3[BANK0 ] unsigned char 
 14553 ;; Return value:  Size  Location     Type
 14554 ;;		None               void
 14555 ;; Registers used:
 14556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14562 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;Total ram usage:        2 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:    6
 14569 ;; This function calls:
 14570 ;;		_LedPointSelect
 14571 ;; This function is called by:
 14572 ;;		_setDimmerLights
 14573 ;;		_setLED_Initialization
 14574 ;;		_setMain_Exception
 14575 ;;		_setSw_Initialization
 14576 ;; This function uses a non-reentrant model
 14577 ;;
 14578                           
 14579                           
 14580                           ;psect for function _setLED
 14581  126B                     _setLED:	
 14582                           
 14583                           ;incstack = 0
 14584                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14585                           ;setLED@led stored from wreg
 14586  126B  0020               	movlb	0	; select bank0
 14587  126C  00A3               	movwf	setLED@led
 14588                           
 14589                           ;LED_B1.c: 77: LedPointSelect(led);
 14590  126D  0823               	movf	setLED@led,w
 14591  126E  319C  244E  3192   	fcall	_LedPointSelect
 14592                           
 14593                           ;LED_B1.c: 78: if (command == 0) {
 14594  1271  0020               	movlb	0	; select bank0
 14595  1272  08A2               	movf	setLED@command,f
 14596  1273  1D03               	skipz
 14597  1274  2A7A               	goto	l6219
 14598                           
 14599                           ;LED_B1.c: 107: if (led == 99) {
 14600  1275  0823               	movf	setLED@led,w
 14601  1276  3A63               	xorlw	99
 14602  1277  1D03               	skipz
 14603  1278  2A7A               	goto	l6219
 14604                           
 14605                           ;LED_B1.c: 111: RB5 = 1;
 14606  1279  168D               	bsf	13,5	;volatile
 14607  127A                     l6219:	
 14608                           
 14609                           ;LED_B1.c: 113: }
 14610                           ;LED_B1.c: 115: }
 14611                           ;LED_B1.c: 116: if (command == 1) {
 14612  127A  0822               	movf	setLED@command,w
 14613  127B  3A01               	xorlw	1
 14614  127C  1D03               	skipz
 14615  127D  2A83               	goto	l6225
 14616                           
 14617                           ;LED_B1.c: 145: if (led == 99) {
 14618  127E  0823               	movf	setLED@led,w
 14619  127F  3A63               	xorlw	99
 14620  1280  1D03               	skipz
 14621  1281  2A83               	goto	l6225
 14622                           
 14623                           ;LED_B1.c: 149: RB5 = 0;
 14624  1282  128D               	bcf	13,5	;volatile
 14625  1283                     l6225:	
 14626                           
 14627                           ;LED_B1.c: 151: }
 14628                           ;LED_B1.c: 153: }
 14629                           ;LED_B1.c: 154: if (command == 10) {
 14630  1283  0822               	movf	setLED@command,w
 14631  1284  3A0A               	xorlw	10
 14632  1285  1D03               	skipz
 14633  1286  2A97               	goto	l6233
 14634                           
 14635                           ;LED_B1.c: 155: LED->GO = 0;
 14636  1287  087A               	movf	_LED,w
 14637  1288  0086               	movwf	6
 14638  1289  3001               	movlw	1	; select bank2/3
 14639  128A  0087               	movwf	7
 14640  128B  1081               	bcf	1,1
 14641                           
 14642                           ;LED_B1.c: 156: LED->Time = 0;
 14643  128C  0A7A               	incf	_LED,w
 14644  128D  0086               	movwf	6
 14645  128E  3001               	movlw	1	; select bank2/3
 14646  128F  0087               	movwf	7
 14647  1290  3000               	movlw	0
 14648  1291  3FC0               	movwi [0]fsr1
 14649  1292  3FC1               	movwi [1]fsr1
 14650                           
 14651                           ;LED_B1.c: 185: if (led == 99) {
 14652  1293  0823               	movf	setLED@led,w
 14653  1294  3A63               	xorlw	99
 14654  1295  1903               	btfsc	3,2
 14655                           
 14656                           ;LED_B1.c: 189: RB5 = 1;
 14657  1296  168D               	bsf	13,5	;volatile
 14658  1297                     l6233:	
 14659                           
 14660                           ;LED_B1.c: 191: }
 14661                           ;LED_B1.c: 193: }
 14662                           ;LED_B1.c: 194: if (command == 11) {
 14663  1297  0822               	movf	setLED@command,w
 14664  1298  3A0B               	xorlw	11
 14665  1299  1D03               	skipz
 14666  129A  0008               	return
 14667                           
 14668                           ;LED_B1.c: 195: LED->GO = 1;
 14669  129B  087A               	movf	_LED,w
 14670  129C  0086               	movwf	6
 14671  129D  3001               	movlw	1	; select bank2/3
 14672  129E  0087               	movwf	7
 14673  129F  1481               	bsf	1,1
 14674  12A0  0008               	return
 14675  12A1                     __end_of_setLED:	
 14676                           
 14677                           	psect	text87
 14678  1C4E                     __ptext87:	
 14679 ;; *************** function _LedPointSelect *****************
 14680 ;; Defined at:
 14681 ;;		line 7 in file "../src/LED_B1.c"
 14682 ;; Parameters:    Size  Location     Type
 14683 ;;  led             1    wreg     unsigned char 
 14684 ;; Auto vars:     Size  Location     Type
 14685 ;;  led             1    1[BANK0 ] unsigned char 
 14686 ;; Return value:  Size  Location     Type
 14687 ;;		None               void
 14688 ;; Registers used:
 14689 ;;		wreg
 14690 ;; Tracked objects:
 14691 ;;		On entry : 0/0
 14692 ;;		On exit  : 0/0
 14693 ;;		Unchanged: 0/0
 14694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;Total ram usage:        2 bytes
 14700 ;; Hardware stack levels used:    1
 14701 ;; Hardware stack levels required when called:    5
 14702 ;; This function calls:
 14703 ;;		Nothing
 14704 ;; This function is called by:
 14705 ;;		_setLED_Initialization
 14706 ;;		_setLED
 14707 ;;		_setLED_Main
 14708 ;; This function uses a non-reentrant model
 14709 ;;
 14710                           
 14711                           
 14712                           ;psect for function _LedPointSelect
 14713  1C4E                     _LedPointSelect:	
 14714                           
 14715                           ;incstack = 0
 14716                           ; Regs used in _LedPointSelect: [wreg]
 14717                           ;LedPointSelect@led stored from wreg
 14718  1C4E  0020               	movlb	0	; select bank0
 14719  1C4F  00A1               	movwf	LedPointSelect@led
 14720                           
 14721                           ;LED_B1.c: 24: if (led == 99) {
 14722  1C50  0821               	movf	LedPointSelect@led,w
 14723  1C51  3A63               	xorlw	99
 14724  1C52  1D03               	skipz
 14725  1C53  0008               	return
 14726                           
 14727                           ;LED_B1.c: 25: LED = &VarErrLED;
 14728  1C54  3067               	movlw	_VarErrLED& (0+255)
 14729  1C55  00A0               	movwf	??_LedPointSelect
 14730  1C56  0820               	movf	??_LedPointSelect,w
 14731  1C57  00FA               	movwf	_LED
 14732  1C58  0008               	return
 14733  1C59                     __end_of_LedPointSelect:	
 14734                           
 14735                           	psect	text88
 14736  1C86                     __ptext88:	
 14737 ;; *************** function _setDimmerLights_Line *****************
 14738 ;; Defined at:
 14739 ;;		line 667 in file "../src/Dimmer_B1.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;  lights          1    wreg     unsigned char 
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  lights          1    0[BANK0 ] unsigned char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;		None               void
 14746 ;; Registers used:
 14747 ;;		wreg
 14748 ;; Tracked objects:
 14749 ;;		On entry : 0/0
 14750 ;;		On exit  : 0/0
 14751 ;;		Unchanged: 0/0
 14752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;Total ram usage:        1 bytes
 14758 ;; Hardware stack levels used:    1
 14759 ;; Hardware stack levels required when called:    5
 14760 ;; This function calls:
 14761 ;;		Nothing
 14762 ;; This function is called by:
 14763 ;;		_setDimmerLights
 14764 ;; This function uses a non-reentrant model
 14765 ;;
 14766                           
 14767                           
 14768                           ;psect for function _setDimmerLights_Line
 14769  1C86                     _setDimmerLights_Line:	
 14770                           
 14771                           ;incstack = 0
 14772                           ; Regs used in _setDimmerLights_Line: [wreg]
 14773                           ;setDimmerLights_Line@lights stored from wreg
 14774  1C86  0020               	movlb	0	; select bank0
 14775  1C87  00A0               	movwf	setDimmerLights_Line@lights
 14776                           
 14777                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14778  1C88  0022               	movlb	2	; select bank2
 14779  1C89  105C               	bcf	(_DimmerLights1^(0+256)+9),0
 14780                           
 14781                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14782  1C8A  0020               	movlb	0	; select bank0
 14783  1C8B  0820               	movf	setDimmerLights_Line@lights,w
 14784  1C8C  3A01               	xorlw	1
 14785  1C8D  1D03               	skipz
 14786  1C8E  0008               	return
 14787                           
 14788                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14789  1C8F  0022               	movlb	2	; select bank2
 14790  1C90  145C               	bsf	(_DimmerLights1^(0+256)+9),0
 14791  1C91  0008               	return
 14792  1C92                     __end_of_setDimmerLights_Line:	
 14793                           
 14794                           	psect	text89
 14795  11D0                     __ptext89:	
 14796 ;; *************** function _getMain_All_Error_Status *****************
 14797 ;; Defined at:
 14798 ;;		line 369 in file "../src/Main_B1.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  command         1    wreg     unsigned char 
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;  command         1    5[BANK0 ] unsigned char 
 14803 ;;  status          1    6[BANK0 ] unsigned char 
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      unsigned char 
 14806 ;; Registers used:
 14807 ;;		wreg, status,2, status,0
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;Total ram usage:        7 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    5
 14820 ;; This function calls:
 14821 ;;		Nothing
 14822 ;; This function is called by:
 14823 ;;		_DimmerLights_Main
 14824 ;;		_setDimmerLights
 14825 ;;		_setDimmerLights_Adj
 14826 ;;		_Load_Main
 14827 ;;		_setTemp_Main
 14828 ;;		_setRF_Main
 14829 ;;		_getRxData
 14830 ;;		_Switch_Main
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _getMain_All_Error_Status
 14836  11D0                     _getMain_All_Error_Status:	
 14837                           
 14838                           ;incstack = 0
 14839                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14840                           ;getMain_All_Error_Status@command stored from wreg
 14841  11D0  0020               	movlb	0	; select bank0
 14842  11D1  00A5               	movwf	getMain_All_Error_Status@command
 14843                           
 14844                           ;Main_B1.c: 370: char status = 0;
 14845  11D2  01A6               	clrf	getMain_All_Error_Status@status
 14846                           
 14847                           ;Main_B1.c: 381: if (status == 0 && command != 2) {
 14848  11D3  08A6               	movf	getMain_All_Error_Status@status,f
 14849  11D4  1D03               	skipz
 14850  11D5  29EA               	goto	l6199
 14851  11D6  0825               	movf	getMain_All_Error_Status@command,w
 14852  11D7  3A02               	xorlw	2
 14853  11D8  1903               	skipnz
 14854  11D9  29EA               	goto	l6199
 14855                           
 14856                           ;Main_B1.c: 382: status = Temp.ERROR == 1 ? 2 : 0;
 14857  11DA  0021               	movlb	1	; select bank1
 14858  11DB  18D6               	btfsc	_Temp^(0+128),1
 14859  11DC  29E1               	goto	l6197
 14860  11DD  0020               	movlb	0	; select bank0
 14861  11DE  01A1               	clrf	_getMain_All_Error_Status$3757
 14862  11DF  01A2               	clrf	_getMain_All_Error_Status$3757+1
 14863  11E0  29E6               	goto	l1426
 14864  11E1                     l6197:	
 14865  11E1  3002               	movlw	2
 14866  11E2  0020               	movlb	0	; select bank0
 14867  11E3  00A1               	movwf	_getMain_All_Error_Status$3757
 14868  11E4  3000               	movlw	0
 14869  11E5  00A2               	movwf	_getMain_All_Error_Status$3757+1
 14870  11E6                     l1426:	
 14871  11E6  0821               	movf	_getMain_All_Error_Status$3757,w
 14872  11E7  00A0               	movwf	??_getMain_All_Error_Status
 14873  11E8  0820               	movf	??_getMain_All_Error_Status,w
 14874  11E9  00A6               	movwf	getMain_All_Error_Status@status
 14875  11EA                     l6199:	
 14876                           
 14877                           ;Main_B1.c: 383: }
 14878                           ;Main_B1.c: 388: if (status == 0 && command != 3) {
 14879  11EA  08A6               	movf	getMain_All_Error_Status@status,f
 14880  11EB  1D03               	skipz
 14881  11EC  2A01               	goto	l1427
 14882  11ED  0825               	movf	getMain_All_Error_Status@command,w
 14883  11EE  3A03               	xorlw	3
 14884  11EF  1903               	skipnz
 14885  11F0  2A01               	goto	l1427
 14886                           
 14887                           ;Main_B1.c: 389: status = Load.ERROR == 1 ? 3 : 0;
 14888  11F1  0022               	movlb	2	; select bank2
 14889  11F2  1AA5               	btfsc	_Load^(0+256),5
 14890  11F3  29F8               	goto	l6207
 14891  11F4  0020               	movlb	0	; select bank0
 14892  11F5  01A3               	clrf	_getMain_All_Error_Status$3766
 14893  11F6  01A4               	clrf	_getMain_All_Error_Status$3766+1
 14894  11F7  29FD               	goto	l1431
 14895  11F8                     l6207:	
 14896  11F8  3003               	movlw	3
 14897  11F9  0020               	movlb	0	; select bank0
 14898  11FA  00A3               	movwf	_getMain_All_Error_Status$3766
 14899  11FB  3000               	movlw	0
 14900  11FC  00A4               	movwf	_getMain_All_Error_Status$3766+1
 14901  11FD                     l1431:	
 14902  11FD  0823               	movf	_getMain_All_Error_Status$3766,w
 14903  11FE  00A0               	movwf	??_getMain_All_Error_Status
 14904  11FF  0820               	movf	??_getMain_All_Error_Status,w
 14905  1200  00A6               	movwf	getMain_All_Error_Status@status
 14906  1201                     l1427:	
 14907                           
 14908                           ;Main_B1.c: 390: }
 14909                           ;Main_B1.c: 406: return status;
 14910  1201  0826               	movf	getMain_All_Error_Status@status,w
 14911  1202  0008               	return
 14912  1203                     __end_of_getMain_All_Error_Status:	
 14913                           
 14914                           	psect	text90
 14915  07D4                     __ptext90:	
 14916 ;; *************** function _getMain_LightsStatus *****************
 14917 ;; Defined at:
 14918 ;;		line 342 in file "../src/Main_B1.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  i               2    6[BANK0 ] int 
 14923 ;;  status          1    8[BANK0 ] unsigned char 
 14924 ;;  count           1    5[BANK0 ] unsigned char 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      unsigned char 
 14927 ;; Registers used:
 14928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;Total ram usage:        5 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    7
 14941 ;; This function calls:
 14942 ;;		_getDimmerLights_Status
 14943 ;; This function is called by:
 14944 ;;		_DimmerLights_Main
 14945 ;;		_Flash_Memory_Main
 14946 ;;		_setMain_Exception
 14947 ;;		_Load_Main
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           
 14952                           ;psect for function _getMain_LightsStatus
 14953  07D4                     _getMain_LightsStatus:	
 14954                           
 14955                           ;Main_B1.c: 343: char status = 0, count = 0;
 14956                           
 14957                           ;incstack = 0
 14958                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14959  07D4  0020               	movlb	0	; select bank0
 14960  07D5  01A8               	clrf	getMain_LightsStatus@status
 14961  07D6  01A5               	clrf	getMain_LightsStatus@count
 14962                           
 14963                           ;Main_B1.c: 346: count = 1;
 14964  07D7  01A5               	clrf	getMain_LightsStatus@count
 14965  07D8  0AA5               	incf	getMain_LightsStatus@count,f
 14966                           
 14967                           ;Main_B1.c: 355: for (int i = 0; i < count; i++) {
 14968  07D9  01A6               	clrf	getMain_LightsStatus@i
 14969  07DA  01A7               	clrf	getMain_LightsStatus@i+1
 14970  07DB                     l6469:	
 14971  07DB  0827               	movf	getMain_LightsStatus@i+1,w
 14972  07DC  3A80               	xorlw	128
 14973  07DD  00A4               	movwf	??_getMain_LightsStatus
 14974  07DE  3080               	movlw	128
 14975  07DF  0224               	subwf	??_getMain_LightsStatus,w
 14976  07E0  1D03               	skipz
 14977  07E1  2FE4               	goto	u5665
 14978  07E2  0825               	movf	getMain_LightsStatus@count,w
 14979  07E3  0226               	subwf	getMain_LightsStatus@i,w
 14980  07E4                     u5665:	
 14981  07E4  1803               	btfsc	3,0
 14982  07E5  2FFC               	goto	l6471
 14983                           
 14984                           ;Main_B1.c: 356: if (status == 0) {
 14985  07E6  0020               	movlb	0	; select bank0
 14986  07E7  08A8               	movf	getMain_LightsStatus@status,f
 14987  07E8  1D03               	skipz
 14988  07E9  2FF7               	goto	l6467
 14989                           
 14990                           ;Main_B1.c: 361: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14991  07EA  0826               	movf	getMain_LightsStatus@i,w
 14992  07EB  3E01               	addlw	1
 14993  07EC  319D  250A  3187   	fcall	_getDimmerLights_Status
 14994  07EF  3A01               	xorlw	1
 14995  07F0  3000               	movlw	0
 14996  07F1  1903               	skipnz
 14997  07F2  3001               	movlw	1
 14998  07F3  0020               	movlb	0	; select bank0
 14999  07F4  00A4               	movwf	??_getMain_LightsStatus
 15000  07F5  0824               	movf	??_getMain_LightsStatus,w
 15001  07F6  00A8               	movwf	getMain_LightsStatus@status
 15002  07F7                     l6467:	
 15003  07F7  3001               	movlw	1
 15004  07F8  07A6               	addwf	getMain_LightsStatus@i,f
 15005  07F9  3000               	movlw	0
 15006  07FA  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15007  07FB  2FDB               	goto	l6469
 15008  07FC                     l6471:	
 15009                           
 15010                           ;Main_B1.c: 363: }
 15011                           ;Main_B1.c: 364: }
 15012                           ;Main_B1.c: 365: return status;
 15013  07FC  0020               	movlb	0	; select bank0
 15014  07FD  0828               	movf	getMain_LightsStatus@status,w
 15015  07FE  0008               	return
 15016  07FF                     __end_of_getMain_LightsStatus:	
 15017                           
 15018                           	psect	text91
 15019  1BEE                     __ptext91:	
 15020 ;; *************** function _getLoad_OK *****************
 15021 ;; Defined at:
 15022 ;;		line 219 in file "../src/OverLoad_B1.c"
 15023 ;; Parameters:    Size  Location     Type
 15024 ;;		None
 15025 ;; Auto vars:     Size  Location     Type
 15026 ;;  ok              1    0[BANK0 ] unsigned char 
 15027 ;; Return value:  Size  Location     Type
 15028 ;;                  1    wreg      unsigned char 
 15029 ;; Registers used:
 15030 ;;		wreg, status,2
 15031 ;; Tracked objects:
 15032 ;;		On entry : 0/0
 15033 ;;		On exit  : 0/0
 15034 ;;		Unchanged: 0/0
 15035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;Total ram usage:        1 bytes
 15041 ;; Hardware stack levels used:    1
 15042 ;; Hardware stack levels required when called:    5
 15043 ;; This function calls:
 15044 ;;		Nothing
 15045 ;; This function is called by:
 15046 ;;		_DimmerLights_Main
 15047 ;; This function uses a non-reentrant model
 15048 ;;
 15049                           
 15050                           
 15051                           ;psect for function _getLoad_OK
 15052  1BEE                     _getLoad_OK:	
 15053                           
 15054                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15055                           
 15056                           ;incstack = 0
 15057                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15058  1BEE  3000               	movlw	0
 15059  1BEF  0022               	movlb	2	; select bank2
 15060  1BF0  1BA5               	btfsc	_Load^(0+256),7
 15061  1BF1  3001               	movlw	1
 15062  1BF2  0020               	movlb	0	; select bank0
 15063  1BF3  00A0               	movwf	getLoad_OK@ok
 15064                           
 15065                           ;OverLoad_B1.c: 221: return ok;
 15066  1BF4  0820               	movf	getLoad_OK@ok,w
 15067  1BF5  0008               	return
 15068  1BF6                     __end_of_getLoad_OK:	
 15069                           
 15070                           	psect	text92
 15071  1CC2                     __ptext92:	
 15072 ;; *************** function _DimmerLights_Initialization *****************
 15073 ;; Defined at:
 15074 ;;		line 329 in file "../src/Dimmer_B1.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;		None
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;		None
 15079 ;; Return value:  Size  Location     Type
 15080 ;;		None               void
 15081 ;; Registers used:
 15082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15083 ;; Tracked objects:
 15084 ;;		On entry : 0/0
 15085 ;;		On exit  : 0/0
 15086 ;;		Unchanged: 0/0
 15087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;Total ram usage:        1 bytes
 15093 ;; Hardware stack levels used:    1
 15094 ;; Hardware stack levels required when called:    7
 15095 ;; This function calls:
 15096 ;;		_Dimmer_Initialization
 15097 ;;		_setDimmerLights_Initialization
 15098 ;; This function is called by:
 15099 ;;		_main
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           
 15104                           ;psect for function _DimmerLights_Initialization
 15105  1CC2                     _DimmerLights_Initialization:	
 15106                           
 15107                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15108                           
 15109                           ;incstack = 0
 15110                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15111  1CC2  3053               	movlw	_DimmerLights1& (0+255)
 15112  1CC3  0020               	movlb	0	; select bank0
 15113  1CC4  00A4               	movwf	??_DimmerLights_Initialization
 15114  1CC5  0824               	movf	??_DimmerLights_Initialization,w
 15115  1CC6  0021               	movlb	1	; select bank1
 15116  1CC7  00CD               	movwf	_DimmerLights11^(0+128)
 15117                           
 15118                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15119  1CC8  3001               	movlw	1
 15120  1CC9  3190  20C4  319C   	fcall	_setDimmerLights_Initialization
 15121                           
 15122                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15123  1CCC  319B  2397         	fcall	_Dimmer_Initialization
 15124  1CCE  0008               	return
 15125  1CCF                     __end_of_DimmerLights_Initialization:	
 15126                           
 15127                           	psect	text93
 15128  10C4                     __ptext93:	
 15129 ;; *************** function _setDimmerLights_Initialization *****************
 15130 ;; Defined at:
 15131 ;;		line 352 in file "../src/Dimmer_B1.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;  lights          1    wreg     unsigned char 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  lights          1    3[BANK0 ] unsigned char 
 15136 ;; Return value:  Size  Location     Type
 15137 ;;		None               void
 15138 ;; Registers used:
 15139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;Total ram usage:        2 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    6
 15152 ;; This function calls:
 15153 ;;		_DimmerLightsPointSelect
 15154 ;; This function is called by:
 15155 ;;		_DimmerLights_Initialization
 15156 ;; This function uses a non-reentrant model
 15157 ;;
 15158                           
 15159                           
 15160                           ;psect for function _setDimmerLights_Initialization
 15161  10C4                     _setDimmerLights_Initialization:	
 15162                           
 15163                           ;incstack = 0
 15164                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15165                           ;setDimmerLights_Initialization@lights stored from wreg
 15166  10C4  0020               	movlb	0	; select bank0
 15167  10C5  00A3               	movwf	setDimmerLights_Initialization@lights
 15168                           
 15169                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15170  10C6  0823               	movf	setDimmerLights_Initialization@lights,w
 15171  10C7  319C  2443         	fcall	_DimmerLightsPointSelect
 15172                           
 15173                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(85*0.8));
 15174  10C9  3044               	movlw	68
 15175  10CA  0020               	movlb	0	; select bank0
 15176  10CB  00A2               	movwf	??_setDimmerLights_Initialization
 15177  10CC  086F               	movf	_DimmerLights,w
 15178  10CD  3E05               	addlw	5
 15179  10CE  0086               	movwf	6
 15180  10CF  3001               	movlw	1	; select bank2/3
 15181  10D0  0087               	movwf	7
 15182  10D1  0822               	movf	??_setDimmerLights_Initialization,w
 15183  10D2  0081               	movwf	1
 15184                           
 15185                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15186  10D3  300C               	movlw	12
 15187  10D4  00A2               	movwf	??_setDimmerLights_Initialization
 15188  10D5  086F               	movf	_DimmerLights,w
 15189  10D6  3E06               	addlw	6
 15190  10D7  0086               	movwf	6
 15191  10D8  3001               	movlw	1	; select bank2/3
 15192  10D9  0087               	movwf	7
 15193  10DA  0822               	movf	??_setDimmerLights_Initialization,w
 15194  10DB  0081               	movwf	1
 15195                           
 15196                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15197  10DC  086F               	movf	_DimmerLights,w
 15198  10DD  3E05               	addlw	5
 15199  10DE  0086               	movwf	6
 15200  10DF  3001               	movlw	1	; select bank2/3
 15201  10E0  0087               	movwf	7
 15202  10E1  0801               	movf	1,w
 15203  10E2  00A2               	movwf	??_setDimmerLights_Initialization
 15204  10E3  086F               	movf	_DimmerLights,w
 15205  10E4  3E04               	addlw	4
 15206  10E5  0086               	movwf	6
 15207  10E6  3001               	movlw	1	; select bank2/3
 15208  10E7  0087               	movwf	7
 15209  10E8  0822               	movf	??_setDimmerLights_Initialization,w
 15210  10E9  0081               	movwf	1
 15211  10EA  0008               	return
 15212  10EB                     __end_of_setDimmerLights_Initialization:	
 15213                           
 15214                           	psect	text94
 15215  1B97                     __ptext94:	
 15216 ;; *************** function _Dimmer_Initialization *****************
 15217 ;; Defined at:
 15218 ;;		line 892 in file "../src/Dimmer_B1.c"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;		None
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;		None
 15223 ;; Return value:  Size  Location     Type
 15224 ;;		None               void
 15225 ;; Registers used:
 15226 ;;		None
 15227 ;; Tracked objects:
 15228 ;;		On entry : 0/0
 15229 ;;		On exit  : 0/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;Total ram usage:        0 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; Hardware stack levels required when called:    5
 15239 ;; This function calls:
 15240 ;;		Nothing
 15241 ;; This function is called by:
 15242 ;;		_DimmerLights_Initialization
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           
 15247                           ;psect for function _Dimmer_Initialization
 15248  1B97                     _Dimmer_Initialization:	
 15249                           
 15250                           ;incstack = 0
 15251                           ; Regs used in _Dimmer_Initialization: []
 15252  1B97  0008               	return
 15253  1B98                     __end_of_Dimmer_Initialization:	
 15254                           
 15255                           	psect	text95
 15256  1BBB                     __ptext95:	
 15257 ;; *************** function _DelayOff_Main *****************
 15258 ;; Defined at:
 15259 ;;		line 41 in file "../src/DelayOff_B1.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;		None
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;		None
 15264 ;; Return value:  Size  Location     Type
 15265 ;;		None               void
 15266 ;; Registers used:
 15267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;Total ram usage:        0 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:   11
 15280 ;; This function calls:
 15281 ;;		_DlyOff_Main
 15282 ;; This function is called by:
 15283 ;;		_main
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           
 15288                           ;psect for function _DelayOff_Main
 15289  1BBB                     _DelayOff_Main:	
 15290                           
 15291                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15292                           
 15293                           ;incstack = 0
 15294                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15295  1BBB  3001               	movlw	1
 15296  1BBC  3188  20C4         	fcall	_DlyOff_Main
 15297  1BBE  0008               	return
 15298  1BBF                     __end_of_DelayOff_Main:	
 15299                           
 15300                           	psect	text96
 15301  08C4                     __ptext96:	
 15302 ;; *************** function _DlyOff_Main *****************
 15303 ;; Defined at:
 15304 ;;		line 61 in file "../src/DelayOff_B1.c"
 15305 ;; Parameters:    Size  Location     Type
 15306 ;;  sw              1    wreg     unsigned char 
 15307 ;; Auto vars:     Size  Location     Type
 15308 ;;  sw              1   24[BANK0 ] unsigned char 
 15309 ;; Return value:  Size  Location     Type
 15310 ;;		None               void
 15311 ;; Registers used:
 15312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15313 ;; Tracked objects:
 15314 ;;		On entry : 0/0
 15315 ;;		On exit  : 0/0
 15316 ;;		Unchanged: 0/0
 15317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;Total ram usage:        3 bytes
 15323 ;; Hardware stack levels used:    1
 15324 ;; Hardware stack levels required when called:   10
 15325 ;; This function calls:
 15326 ;;		_DelayOffPointSelect
 15327 ;;		_setBuz
 15328 ;;		_setDimmerLights_ErrorClose
 15329 ;; This function is called by:
 15330 ;;		_DelayOff_Main
 15331 ;; This function uses a non-reentrant model
 15332 ;;
 15333                           
 15334                           
 15335                           ;psect for function _DlyOff_Main
 15336  08C4                     _DlyOff_Main:	
 15337                           
 15338                           ;incstack = 0
 15339                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15340                           ;DlyOff_Main@sw stored from wreg
 15341  08C4  0020               	movlb	0	; select bank0
 15342  08C5  00B8               	movwf	DlyOff_Main@sw
 15343                           
 15344                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15345  08C6  0838               	movf	DlyOff_Main@sw,w
 15346  08C7  319C  2438  3188   	fcall	_DelayOffPointSelect
 15347                           
 15348                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15349  08CA  0878               	movf	_DelayOff,w
 15350  08CB  0086               	movwf	6
 15351  08CC  3001               	movlw	1	; select bank2/3
 15352  08CD  0087               	movwf	7
 15353  08CE  1C81               	btfss	1,1
 15354  08CF  0008               	return
 15355                           
 15356                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15357  08D0  0878               	movf	_DelayOff,w
 15358  08D1  3E02               	addlw	2
 15359  08D2  0086               	movwf	6
 15360  08D3  3001               	movlw	1	; select bank2/3
 15361  08D4  0087               	movwf	7
 15362  08D5  3001               	movlw	1
 15363  08D6  0781               	addwf	1,f
 15364  08D7  3141               	addfsr 1,1
 15365  08D8  1803               	skipnc
 15366  08D9  0A81               	incf	1,f
 15367                           
 15368                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15369  08DA  0878               	movf	_DelayOff,w
 15370  08DB  3E02               	addlw	2
 15371  08DC  0086               	movwf	6
 15372  08DD  3001               	movlw	1	; select bank2/3
 15373  08DE  0087               	movwf	7
 15374  08DF  3F40               	moviw [0]fsr1
 15375  08E0  0020               	movlb	0	; select bank0
 15376  08E1  00B6               	movwf	??_DlyOff_Main
 15377  08E2  3F41               	moviw [1]fsr1
 15378  08E3  00B7               	movwf	??_DlyOff_Main+1
 15379  08E4  3017               	movlw	23
 15380  08E5  0237               	subwf	??_DlyOff_Main+1,w
 15381  08E6  3070               	movlw	112
 15382  08E7  1903               	skipnz
 15383  08E8  0236               	subwf	??_DlyOff_Main,w
 15384  08E9  1C03               	skipc
 15385  08EA  0008               	return
 15386                           
 15387                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15388  08EB  0878               	movf	_DelayOff,w
 15389  08EC  3E02               	addlw	2
 15390  08ED  0086               	movwf	6
 15391  08EE  3001               	movlw	1	; select bank2/3
 15392  08EF  0087               	movwf	7
 15393  08F0  3000               	movlw	0
 15394  08F1  3FC0               	movwi [0]fsr1
 15395  08F2  3FC1               	movwi [1]fsr1
 15396                           
 15397                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15398  08F3  3001               	movlw	1
 15399  08F4  00B6               	movwf	??_DlyOff_Main
 15400  08F5  0878               	movf	_DelayOff,w
 15401  08F6  3E04               	addlw	4
 15402  08F7  0086               	movwf	6
 15403  08F8  3001               	movlw	1	; select bank2/3
 15404  08F9  0087               	movwf	7
 15405  08FA  0836               	movf	??_DlyOff_Main,w
 15406  08FB  0781               	addwf	1,f
 15407                           
 15408                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15409  08FC  0878               	movf	_DelayOff,w
 15410  08FD  3E04               	addlw	4
 15411  08FE  0086               	movwf	6
 15412  08FF  3001               	movlw	1	; select bank2/3
 15413  0900  0087               	movwf	7
 15414  0901  0A78               	incf	_DelayOff,w
 15415  0902  0084               	movwf	4
 15416  0903  3001               	movlw	1	; select bank2/3
 15417  0904  0085               	movwf	5
 15418  0905  0800               	movf	0,w
 15419  0906  0201               	subwf	1,w
 15420  0907  1C03               	skipc
 15421  0908  0008               	return
 15422                           
 15423                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15424  0909  0878               	movf	_DelayOff,w
 15425  090A  3E04               	addlw	4
 15426  090B  0086               	movwf	6
 15427  090C  3001               	movlw	1	; select bank2/3
 15428  090D  0087               	movwf	7
 15429  090E  0181               	clrf	1
 15430                           
 15431                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15432  090F  0878               	movf	_DelayOff,w
 15433  0910  0086               	movwf	6
 15434  0911  3001               	movlw	1	; select bank2/3
 15435  0912  0087               	movwf	7
 15436  0913  1081               	bcf	1,1
 15437                           
 15438                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15439  0914  3064               	movlw	100
 15440  0915  00A9               	movwf	setBuz@time
 15441  0916  3000               	movlw	0
 15442  0917  00AA               	movwf	setBuz@time+1
 15443  0918  3001               	movlw	1
 15444  0919  3196  26F2  3188   	fcall	_setBuz
 15445                           
 15446                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15447  091C  0020               	movlb	0	; select bank0
 15448  091D  0838               	movf	DlyOff_Main@sw,w
 15449  091E  3196  2642         	fcall	_setDimmerLights_ErrorClose
 15450  0920  0008               	return
 15451  0921                     __end_of_DlyOff_Main:	
 15452                           
 15453                           	psect	text97
 15454  1642                     __ptext97:	
 15455 ;; *************** function _setDimmerLights_ErrorClose *****************
 15456 ;; Defined at:
 15457 ;;		line 562 in file "../src/Dimmer_B1.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;  lights          1    wreg     unsigned char 
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;  lights          1   19[BANK0 ] unsigned char 
 15462 ;;  i               2   20[BANK0 ] int 
 15463 ;;  count           1   18[BANK0 ] unsigned char 
 15464 ;; Return value:  Size  Location     Type
 15465 ;;		None               void
 15466 ;; Registers used:
 15467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15468 ;; Tracked objects:
 15469 ;;		On entry : 0/0
 15470 ;;		On exit  : 0/0
 15471 ;;		Unchanged: 0/0
 15472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;Total ram usage:        5 bytes
 15478 ;; Hardware stack levels used:    1
 15479 ;; Hardware stack levels required when called:    9
 15480 ;; This function calls:
 15481 ;;		_DimmerLightsPointSelect
 15482 ;;		_getDimmerLights_Status
 15483 ;;		_setDimmerLights_SwOff
 15484 ;; This function is called by:
 15485 ;;		_DlyOff_Main
 15486 ;;		_setMain_Exception
 15487 ;;		_setControl_Lights_Table
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491                           
 15492                           ;psect for function _setDimmerLights_ErrorClose
 15493  1642                     _setDimmerLights_ErrorClose:	
 15494                           
 15495                           ;incstack = 0
 15496                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15497                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15498  1642  0020               	movlb	0	; select bank0
 15499  1643  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15500                           
 15501                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15502  1644  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15503  1645  3AFF               	xorlw	255
 15504  1646  1D03               	skipz
 15505  1647  2E7D               	goto	l6097
 15506                           
 15507                           ;Dimmer_B1.c: 565: char count = 1;
 15508  1648  01B2               	clrf	setDimmerLights_ErrorClose@count
 15509  1649  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15510                           
 15511                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15512  164A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15513  164B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15514  164C                     l6095:	
 15515  164C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15516  164D  3A80               	xorlw	128
 15517  164E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15518  164F  3080               	movlw	128
 15519  1650  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15520  1651  1D03               	skipz
 15521  1652  2E55               	goto	u5115
 15522  1653  0832               	movf	setDimmerLights_ErrorClose@count,w
 15523  1654  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15524  1655                     u5115:	
 15525  1655  1803               	btfsc	3,0
 15526  1656  0008               	return
 15527                           
 15528                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15529  1657  0020               	movlb	0	; select bank0
 15530  1658  0834               	movf	setDimmerLights_ErrorClose@i,w
 15531  1659  3E01               	addlw	1
 15532  165A  319C  2443  3196   	fcall	_DimmerLightsPointSelect
 15533                           
 15534                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15535  165D  0020               	movlb	0	; select bank0
 15536  165E  0834               	movf	setDimmerLights_ErrorClose@i,w
 15537  165F  3E01               	addlw	1
 15538  1660  319D  250A  3196   	fcall	_getDimmerLights_Status
 15539  1663  3A01               	xorlw	1
 15540  1664  1D03               	skipz
 15541  1665  2E77               	goto	l6093
 15542                           
 15543                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15544  1666  0020               	movlb	0	; select bank0
 15545  1667  086F               	movf	_DimmerLights,w
 15546  1668  3E09               	addlw	9
 15547  1669  0086               	movwf	6
 15548  166A  3001               	movlw	1	; select bank2/3
 15549  166B  0087               	movwf	7
 15550  166C  1701               	bsf	1,6
 15551                           
 15552                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15553  166D  086F               	movf	_DimmerLights,w
 15554  166E  0086               	movwf	6
 15555  166F  3001               	movlw	1	; select bank2/3
 15556  1670  0087               	movwf	7
 15557  1671  1281               	bcf	1,5
 15558                           
 15559                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15560  1672  0834               	movf	setDimmerLights_ErrorClose@i,w
 15561  1673  3E01               	addlw	1
 15562  1674  3194  2473  3196   	fcall	_setDimmerLights_SwOff
 15563  1677                     l6093:	
 15564  1677  3001               	movlw	1
 15565  1678  0020               	movlb	0	; select bank0
 15566  1679  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15567  167A  3000               	movlw	0
 15568  167B  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15569  167C  2E4C               	goto	l6095
 15570  167D                     l6097:	
 15571                           ;Dimmer_B1.c: 579: }
 15572                           ;Dimmer_B1.c: 580: }
 15573                           ;Dimmer_B1.c: 581: } else {
 15574                           
 15575                           
 15576                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15577  167D  0020               	movlb	0	; select bank0
 15578  167E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15579  167F  319C  2443  3196   	fcall	_DimmerLightsPointSelect
 15580                           
 15581                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15582  1682  0020               	movlb	0	; select bank0
 15583  1683  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15584  1684  319D  250A  3196   	fcall	_getDimmerLights_Status
 15585  1687  3A01               	xorlw	1
 15586  1688  1D03               	skipz
 15587  1689  0008               	return
 15588                           
 15589                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15590  168A  0020               	movlb	0	; select bank0
 15591  168B  086F               	movf	_DimmerLights,w
 15592  168C  3E09               	addlw	9
 15593  168D  0086               	movwf	6
 15594  168E  3001               	movlw	1	; select bank2/3
 15595  168F  0087               	movwf	7
 15596  1690  1701               	bsf	1,6
 15597                           
 15598                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15599  1691  086F               	movf	_DimmerLights,w
 15600  1692  0086               	movwf	6
 15601  1693  3001               	movlw	1	; select bank2/3
 15602  1694  0087               	movwf	7
 15603  1695  1281               	bcf	1,5
 15604                           
 15605                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15606  1696  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15607  1697  3194  2473         	fcall	_setDimmerLights_SwOff
 15608  1699  0008               	return
 15609  169A                     __end_of_setDimmerLights_ErrorClose:	
 15610                           
 15611                           	psect	text98
 15612  1473                     __ptext98:	
 15613 ;; *************** function _setDimmerLights_SwOff *****************
 15614 ;; Defined at:
 15615 ;;		line 524 in file "../src/Dimmer_B1.c"
 15616 ;; Parameters:    Size  Location     Type
 15617 ;;  sw              1    wreg     unsigned char 
 15618 ;; Auto vars:     Size  Location     Type
 15619 ;;  sw              1   16[BANK0 ] unsigned char 
 15620 ;;  command         1   15[BANK0 ] unsigned char 
 15621 ;; Return value:  Size  Location     Type
 15622 ;;		None               void
 15623 ;; Registers used:
 15624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;Total ram usage:        2 bytes
 15635 ;; Hardware stack levels used:    1
 15636 ;; Hardware stack levels required when called:    8
 15637 ;; This function calls:
 15638 ;;		_DimmerLightsPointSelect
 15639 ;;		_getDelayOff_GO
 15640 ;;		_setDelayOff_GO
 15641 ;;		_setDimmerLights_Trigger
 15642 ;;		_setDimmerLights_TriggerAdj
 15643 ;; This function is called by:
 15644 ;;		_setDimmerLights_ErrorClose
 15645 ;;		_setRFSW_Control
 15646 ;;		_setSw_Main
 15647 ;; This function uses a non-reentrant model
 15648 ;;
 15649                           
 15650                           
 15651                           ;psect for function _setDimmerLights_SwOff
 15652  1473                     _setDimmerLights_SwOff:	
 15653                           
 15654                           ;incstack = 0
 15655                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15656                           ;setDimmerLights_SwOff@sw stored from wreg
 15657  1473  0020               	movlb	0	; select bank0
 15658  1474  00B0               	movwf	setDimmerLights_SwOff@sw
 15659                           
 15660                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15661  1475  0830               	movf	setDimmerLights_SwOff@sw,w
 15662  1476  319C  2443  3194   	fcall	_DimmerLightsPointSelect
 15663                           
 15664                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15665  1479  0020               	movlb	0	; select bank0
 15666  147A  086F               	movf	_DimmerLights,w
 15667  147B  0086               	movwf	6
 15668  147C  3001               	movlw	1	; select bank2/3
 15669  147D  0087               	movwf	7
 15670  147E  3000               	movlw	0
 15671  147F  1A81               	btfsc	1,5
 15672  1480  3001               	movlw	1
 15673  1481  00AF               	movwf	setDimmerLights_SwOff@command
 15674                           
 15675                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15676  1482  086F               	movf	_DimmerLights,w
 15677  1483  3E09               	addlw	9
 15678  1484  0086               	movwf	6
 15679  1485  3001               	movlw	1	; select bank2/3
 15680  1486  0087               	movwf	7
 15681  1487  1F01               	btfss	1,6
 15682  1488  0008               	return
 15683                           
 15684                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15685  1489  086F               	movf	_DimmerLights,w
 15686  148A  3E09               	addlw	9
 15687  148B  0086               	movwf	6
 15688  148C  3001               	movlw	1	; select bank2/3
 15689  148D  0087               	movwf	7
 15690  148E  1301               	bcf	1,6
 15691                           
 15692                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15693  148F  086F               	movf	_DimmerLights,w
 15694  1490  0086               	movwf	6
 15695  1491  3001               	movlw	1	; select bank2/3
 15696  1492  0087               	movwf	7
 15697  1493  1E81               	btfss	1,5
 15698  1494  2CA7               	goto	l5953
 15699                           
 15700                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15701  1495  086F               	movf	_DimmerLights,w
 15702  1496  3E09               	addlw	9
 15703  1497  0086               	movwf	6
 15704  1498  3001               	movlw	1	; select bank2/3
 15705  1499  0087               	movwf	7
 15706  149A  1F81               	btfss	1,7
 15707  149B  0008               	return
 15708                           
 15709                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15710  149C  086F               	movf	_DimmerLights,w
 15711  149D  3E09               	addlw	9
 15712  149E  0086               	movwf	6
 15713  149F  3001               	movlw	1	; select bank2/3
 15714  14A0  0087               	movwf	7
 15715  14A1  1381               	bcf	1,7
 15716                           
 15717                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15718  14A2  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15719  14A3  0830               	movf	setDimmerLights_SwOff@sw,w
 15720  14A4  319E  26F8         	fcall	_setDimmerLights_TriggerAdj
 15721                           
 15722                           ;Dimmer_B1.c: 533: }
 15723                           ;Dimmer_B1.c: 534: } else {
 15724  14A6  0008               	return
 15725  14A7                     l5953:	
 15726                           
 15727                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15728  14A7  0020               	movlb	0	; select bank0
 15729  14A8  01A2               	clrf	setDimmerLights_Trigger@command
 15730  14A9  0830               	movf	setDimmerLights_SwOff@sw,w
 15731  14AA  319E  26BB  3194   	fcall	_setDimmerLights_Trigger
 15732                           
 15733                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15734  14AD  0020               	movlb	0	; select bank0
 15735  14AE  0830               	movf	setDimmerLights_SwOff@sw,w
 15736  14AF  319D  251A  3194   	fcall	_getDelayOff_GO
 15737  14B2  3A01               	xorlw	1
 15738  14B3  1D03               	skipz
 15739  14B4  0008               	return
 15740                           
 15741                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15742  14B5  0020               	movlb	0	; select bank0
 15743  14B6  01AA               	clrf	setDelayOff_GO@command
 15744  14B7  01AB               	clrf	setDelayOff_GO@value
 15745  14B8  0830               	movf	setDimmerLights_SwOff@sw,w
 15746  14B9  3188  2067         	fcall	_setDelayOff_GO
 15747  14BB  0008               	return
 15748  14BC                     __end_of_setDimmerLights_SwOff:	
 15749                           
 15750                           	psect	text99
 15751  1EF8                     __ptext99:	
 15752 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15753 ;; Defined at:
 15754 ;;		line 773 in file "../src/Dimmer_B1.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;  lights          1    wreg     unsigned char 
 15757 ;;  command         1    2[BANK0 ] unsigned char 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  lights          1    4[BANK0 ] unsigned char 
 15760 ;; Return value:  Size  Location     Type
 15761 ;;		None               void
 15762 ;; Registers used:
 15763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15764 ;; Tracked objects:
 15765 ;;		On entry : 0/0
 15766 ;;		On exit  : 0/0
 15767 ;;		Unchanged: 0/0
 15768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15769 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;Total ram usage:        3 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    6
 15776 ;; This function calls:
 15777 ;;		_DimmerLightsPointSelect
 15778 ;; This function is called by:
 15779 ;;		_setDimmerLights_SwOff
 15780 ;;		_setDimmerLights_AdjControl
 15781 ;; This function uses a non-reentrant model
 15782 ;;
 15783                           
 15784                           
 15785                           ;psect for function _setDimmerLights_TriggerAdj
 15786  1EF8                     _setDimmerLights_TriggerAdj:	
 15787                           
 15788                           ;incstack = 0
 15789                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15790                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15791  1EF8  0020               	movlb	0	; select bank0
 15792  1EF9  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15793                           
 15794                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15795  1EFA  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15796  1EFB  319C  2443         	fcall	_DimmerLightsPointSelect
 15797                           
 15798                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15799  1EFD  0020               	movlb	0	; select bank0
 15800  1EFE  086F               	movf	_DimmerLights,w
 15801  1EFF  3E08               	addlw	8
 15802  1F00  0086               	movwf	6
 15803  1F01  3001               	movlw	1	; select bank2/3
 15804  1F02  0087               	movwf	7
 15805  1F03  1601               	bsf	1,4
 15806                           
 15807                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15808  1F04  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15809  1F05  3A01               	xorlw	1
 15810  1F06  3000               	movlw	0
 15811  1F07  1903               	skipnz
 15812  1F08  3001               	movlw	1
 15813  1F09  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15814  1F0A  086F               	movf	_DimmerLights,w
 15815  1F0B  3E08               	addlw	8
 15816  1F0C  0086               	movwf	6
 15817  1F0D  3001               	movlw	1	; select bank2/3
 15818  1F0E  0087               	movwf	7
 15819  1F0F  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15820  1F10  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15821  1F11  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15822  1F12  0801               	movf	1,w
 15823  1F13  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15824  1F14  39F7               	andlw	-9
 15825  1F15  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15826  1F16  0081               	movwf	1
 15827  1F17  0008               	return
 15828  1F18                     __end_of_setDimmerLights_TriggerAdj:	
 15829                           
 15830                           	psect	text100
 15831  1EBB                     __ptext100:	
 15832 ;; *************** function _setDimmerLights_Trigger *****************
 15833 ;; Defined at:
 15834 ;;		line 767 in file "../src/Dimmer_B1.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;  lights          1    wreg     unsigned char 
 15837 ;;  command         1    2[BANK0 ] unsigned char 
 15838 ;; Auto vars:     Size  Location     Type
 15839 ;;  lights          1    4[BANK0 ] unsigned char 
 15840 ;; Return value:  Size  Location     Type
 15841 ;;		None               void
 15842 ;; Registers used:
 15843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15844 ;; Tracked objects:
 15845 ;;		On entry : 0/0
 15846 ;;		On exit  : 0/0
 15847 ;;		Unchanged: 0/0
 15848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15849 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;Total ram usage:        3 bytes
 15854 ;; Hardware stack levels used:    1
 15855 ;; Hardware stack levels required when called:    6
 15856 ;; This function calls:
 15857 ;;		_DimmerLightsPointSelect
 15858 ;; This function is called by:
 15859 ;;		_setDimmerLights_SwOn
 15860 ;;		_setDimmerLights_SwOff
 15861 ;; This function uses a non-reentrant model
 15862 ;;
 15863                           
 15864                           
 15865                           ;psect for function _setDimmerLights_Trigger
 15866  1EBB                     _setDimmerLights_Trigger:	
 15867                           
 15868                           ;incstack = 0
 15869                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15870                           ;setDimmerLights_Trigger@lights stored from wreg
 15871  1EBB  0020               	movlb	0	; select bank0
 15872  1EBC  00A4               	movwf	setDimmerLights_Trigger@lights
 15873                           
 15874                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15875  1EBD  0824               	movf	setDimmerLights_Trigger@lights,w
 15876  1EBE  319C  2443         	fcall	_DimmerLightsPointSelect
 15877                           
 15878                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15879  1EC0  0020               	movlb	0	; select bank0
 15880  1EC1  086F               	movf	_DimmerLights,w
 15881  1EC2  3E08               	addlw	8
 15882  1EC3  0086               	movwf	6
 15883  1EC4  3001               	movlw	1	; select bank2/3
 15884  1EC5  0087               	movwf	7
 15885  1EC6  1501               	bsf	1,2
 15886                           
 15887                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15888  1EC7  0822               	movf	setDimmerLights_Trigger@command,w
 15889  1EC8  3A01               	xorlw	1
 15890  1EC9  3000               	movlw	0
 15891  1ECA  1903               	skipnz
 15892  1ECB  3001               	movlw	1
 15893  1ECC  00A3               	movwf	??_setDimmerLights_Trigger
 15894  1ECD  086F               	movf	_DimmerLights,w
 15895  1ECE  3E08               	addlw	8
 15896  1ECF  0086               	movwf	6
 15897  1ED0  3001               	movlw	1	; select bank2/3
 15898  1ED1  0087               	movwf	7
 15899  1ED2  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15900  1ED3  0801               	movf	1,w
 15901  1ED4  0623               	xorwf	??_setDimmerLights_Trigger,w
 15902  1ED5  39FD               	andlw	-3
 15903  1ED6  0623               	xorwf	??_setDimmerLights_Trigger,w
 15904  1ED7  0081               	movwf	1
 15905  1ED8  0008               	return
 15906  1ED9                     __end_of_setDimmerLights_Trigger:	
 15907                           
 15908                           	psect	text101
 15909  0867                     __ptext101:	
 15910 ;; *************** function _setDelayOff_GO *****************
 15911 ;; Defined at:
 15912 ;;		line 83 in file "../src/DelayOff_B1.c"
 15913 ;; Parameters:    Size  Location     Type
 15914 ;;  sw              1    wreg     unsigned char 
 15915 ;;  command         1   10[BANK0 ] unsigned char 
 15916 ;;  value           1   11[BANK0 ] unsigned char 
 15917 ;; Auto vars:     Size  Location     Type
 15918 ;;  sw              1   14[BANK0 ] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;		None               void
 15921 ;; Registers used:
 15922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15928 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;Total ram usage:        5 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    7
 15935 ;; This function calls:
 15936 ;;		_DelayOffPointSelect
 15937 ;;		_DelayTimejudge
 15938 ;; This function is called by:
 15939 ;;		_setDimmerLights_SwOff
 15940 ;;		_setRFSW_Control
 15941 ;; This function uses a non-reentrant model
 15942 ;;
 15943                           
 15944                           
 15945                           ;psect for function _setDelayOff_GO
 15946  0867                     _setDelayOff_GO:	
 15947                           
 15948                           ;incstack = 0
 15949                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15950                           ;setDelayOff_GO@sw stored from wreg
 15951  0867  0020               	movlb	0	; select bank0
 15952  0868  00AE               	movwf	setDelayOff_GO@sw
 15953                           
 15954                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15955  0869  082E               	movf	setDelayOff_GO@sw,w
 15956  086A  319C  2438  3188   	fcall	_DelayOffPointSelect
 15957                           
 15958                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15959  086D  0020               	movlb	0	; select bank0
 15960  086E  082A               	movf	setDelayOff_GO@command,w
 15961  086F  3A01               	xorlw	1
 15962  0870  3000               	movlw	0
 15963  0871  1903               	skipnz
 15964  0872  3001               	movlw	1
 15965  0873  00AC               	movwf	??_setDelayOff_GO
 15966  0874  0878               	movf	_DelayOff,w
 15967  0875  0086               	movwf	6
 15968  0876  3001               	movlw	1	; select bank2/3
 15969  0877  0087               	movwf	7
 15970  0878  0DAC               	rlf	??_setDelayOff_GO,f
 15971  0879  0801               	movf	1,w
 15972  087A  062C               	xorwf	??_setDelayOff_GO,w
 15973  087B  39FD               	andlw	-3
 15974  087C  062C               	xorwf	??_setDelayOff_GO,w
 15975  087D  0081               	movwf	1
 15976                           
 15977                           ;DelayOff_B1.c: 89: if (command == 1) {
 15978  087E  082A               	movf	setDelayOff_GO@command,w
 15979  087F  3A01               	xorlw	1
 15980  0880  1D03               	skipz
 15981  0881  28AC               	goto	l5873
 15982                           
 15983                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15984  0882  082B               	movf	setDelayOff_GO@value,w
 15985  0883  3191  2115  3188   	fcall	_DelayTimejudge
 15986  0886  0020               	movlb	0	; select bank0
 15987  0887  00AC               	movwf	??_setDelayOff_GO
 15988  0888  0A78               	incf	_DelayOff,w
 15989  0889  0086               	movwf	6
 15990  088A  3001               	movlw	1	; select bank2/3
 15991  088B  0087               	movwf	7
 15992  088C  082C               	movf	??_setDelayOff_GO,w
 15993  088D  0081               	movwf	1
 15994                           
 15995                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15996  088E  300F               	movlw	15
 15997  088F  052B               	andwf	setDelayOff_GO@value,w
 15998  0890  00AC               	movwf	??_setDelayOff_GO
 15999  0891  082C               	movf	??_setDelayOff_GO,w
 16000  0892  3A05               	xorlw	5
 16001  0893  1903               	skipnz
 16002  0894  2899               	goto	l5867
 16003  0895  082B               	movf	setDelayOff_GO@value,w
 16004  0896  390F               	andlw	15
 16005  0897  1D03               	btfss	3,2
 16006  0898  289F               	goto	l5871
 16007  0899                     l5867:	
 16008  0899  3026               	movlw	38
 16009  089A  022B               	subwf	setDelayOff_GO@value,w
 16010  089B  1803               	skipnc
 16011  089C  289F               	goto	l5871
 16012                           
 16013                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16014  089D  082B               	movf	setDelayOff_GO@value,w
 16015  089E  28A0               	goto	L8
 16016  089F                     l5871:	
 16017                           ;DelayOff_B1.c: 93: } else {
 16018                           
 16019                           
 16020                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16021  089F  3005               	movlw	5
 16022  08A0                     L8:	
 16023  08A0  00AC               	movwf	??_setDelayOff_GO
 16024  08A1  082E               	movf	setDelayOff_GO@sw,w
 16025  08A2  3E1A               	addlw	26
 16026  08A3  076E               	addwf	_product,w
 16027  08A4  00AD               	movwf	??_setDelayOff_GO+1
 16028  08A5  082D               	movf	??_setDelayOff_GO+1,w
 16029  08A6  0086               	movwf	6
 16030  08A7  3002               	movlw	2	; select bank4/5
 16031  08A8  0087               	movwf	7
 16032  08A9  082C               	movf	??_setDelayOff_GO,w
 16033  08AA  0081               	movwf	1
 16034                           
 16035                           ;DelayOff_B1.c: 95: }
 16036                           ;DelayOff_B1.c: 96: } else {
 16037  08AB  28B5               	goto	l5875
 16038  08AC                     l5873:	
 16039                           
 16040                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16041  08AC  082E               	movf	setDelayOff_GO@sw,w
 16042  08AD  3E1A               	addlw	26
 16043  08AE  076E               	addwf	_product,w
 16044  08AF  00AC               	movwf	??_setDelayOff_GO
 16045  08B0  082C               	movf	??_setDelayOff_GO,w
 16046  08B1  0086               	movwf	6
 16047  08B2  3002               	movlw	2	; select bank4/5
 16048  08B3  0087               	movwf	7
 16049  08B4  0181               	clrf	1
 16050  08B5                     l5875:	
 16051                           
 16052                           ;DelayOff_B1.c: 98: }
 16053                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16054  08B5  0878               	movf	_DelayOff,w
 16055  08B6  3E02               	addlw	2
 16056  08B7  0086               	movwf	6
 16057  08B8  3001               	movlw	1	; select bank2/3
 16058  08B9  0087               	movwf	7
 16059  08BA  3000               	movlw	0
 16060  08BB  3FC0               	movwi [0]fsr1
 16061  08BC  3FC1               	movwi [1]fsr1
 16062                           
 16063                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16064  08BD  0878               	movf	_DelayOff,w
 16065  08BE  3E04               	addlw	4
 16066  08BF  0086               	movwf	6
 16067  08C0  3001               	movlw	1	; select bank2/3
 16068  08C1  0087               	movwf	7
 16069  08C2  0181               	clrf	1
 16070  08C3  0008               	return
 16071  08C4                     __end_of_setDelayOff_GO:	
 16072                           
 16073                           	psect	text102
 16074  1115                     __ptext102:	
 16075 ;; *************** function _DelayTimejudge *****************
 16076 ;; Defined at:
 16077 ;;		line 112 in file "../src/DelayOff_B1.c"
 16078 ;; Parameters:    Size  Location     Type
 16079 ;;  value           1    wreg     unsigned char 
 16080 ;; Auto vars:     Size  Location     Type
 16081 ;;  value           1    9[BANK0 ] unsigned char 
 16082 ;;  k               1    8[BANK0 ] unsigned char 
 16083 ;;  j               1    7[BANK0 ] unsigned char 
 16084 ;;  i               1    6[BANK0 ] unsigned char 
 16085 ;; Return value:  Size  Location     Type
 16086 ;;                  1    wreg      unsigned char 
 16087 ;; Registers used:
 16088 ;;		wreg, status,2, status,0, pclath, cstack
 16089 ;; Tracked objects:
 16090 ;;		On entry : 0/0
 16091 ;;		On exit  : 0/0
 16092 ;;		Unchanged: 0/0
 16093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;Total ram usage:        6 bytes
 16099 ;; Hardware stack levels used:    1
 16100 ;; Hardware stack levels required when called:    6
 16101 ;; This function calls:
 16102 ;;		___bmul
 16103 ;; This function is called by:
 16104 ;;		_setDelayOff_GO
 16105 ;; This function uses a non-reentrant model
 16106 ;;
 16107                           
 16108                           
 16109                           ;psect for function _DelayTimejudge
 16110  1115                     _DelayTimejudge:	
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16114                           ;DelayTimejudge@value stored from wreg
 16115  1115  0020               	movlb	0	; select bank0
 16116  1116  00A9               	movwf	DelayTimejudge@value
 16117                           
 16118                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16119  1117  3005               	movlw	5
 16120  1118  00A4               	movwf	??_DelayTimejudge
 16121  1119  0824               	movf	??_DelayTimejudge,w
 16122  111A  00A6               	movwf	DelayTimejudge@i
 16123  111B  01A7               	clrf	DelayTimejudge@j
 16124  111C  01A8               	clrf	DelayTimejudge@k
 16125                           
 16126                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16127  111D  3031               	movlw	49
 16128  111E  0229               	subwf	DelayTimejudge@value,w
 16129  111F  1803               	skipnc
 16130  1120  293D               	goto	l5767
 16131                           
 16132                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16133  1121  0829               	movf	DelayTimejudge@value,w
 16134  1122  390F               	andlw	15
 16135  1123  00A4               	movwf	??_DelayTimejudge
 16136  1124  0824               	movf	??_DelayTimejudge,w
 16137  1125  00A7               	movwf	DelayTimejudge@j
 16138                           
 16139                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16140  1126  0829               	movf	DelayTimejudge@value,w
 16141  1127  00A4               	movwf	??_DelayTimejudge
 16142  1128  3004               	movlw	4
 16143  1129                     u4715:	
 16144  1129  36A4               	lsrf	??_DelayTimejudge,f
 16145  112A  0B89               	decfsz	9,f
 16146  112B  2929               	goto	u4715
 16147  112C  0824               	movf	??_DelayTimejudge,w
 16148  112D  390F               	andlw	15
 16149  112E  00A5               	movwf	??_DelayTimejudge+1
 16150  112F  0825               	movf	??_DelayTimejudge+1,w
 16151  1130  00A8               	movwf	DelayTimejudge@k
 16152                           
 16153                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16154  1131  300A               	movlw	10
 16155  1132  00A4               	movwf	??_DelayTimejudge
 16156  1133  0824               	movf	??_DelayTimejudge,w
 16157  1134  00A0               	movwf	___bmul@multiplicand
 16158  1135  0828               	movf	DelayTimejudge@k,w
 16159  1136  319D  258E         	fcall	___bmul
 16160  1138  0020               	movlb	0	; select bank0
 16161  1139  0727               	addwf	DelayTimejudge@j,w
 16162  113A  00A5               	movwf	??_DelayTimejudge+1
 16163  113B  0825               	movf	??_DelayTimejudge+1,w
 16164  113C  00A6               	movwf	DelayTimejudge@i
 16165  113D                     l5767:	
 16166                           
 16167                           ;DelayOff_B1.c: 118: }
 16168                           ;DelayOff_B1.c: 139: return i;
 16169  113D  0826               	movf	DelayTimejudge@i,w
 16170  113E  0008               	return
 16171  113F                     __end_of_DelayTimejudge:	
 16172                           
 16173                           	psect	text103
 16174  1D8E                     __ptext103:	
 16175 ;; *************** function ___bmul *****************
 16176 ;; Defined at:
 16177 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16178 ;; Parameters:    Size  Location     Type
 16179 ;;  multiplier      1    wreg     unsigned char 
 16180 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16181 ;; Auto vars:     Size  Location     Type
 16182 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16183 ;;  product         1    2[BANK0 ] unsigned char 
 16184 ;; Return value:  Size  Location     Type
 16185 ;;                  1    wreg      unsigned char 
 16186 ;; Registers used:
 16187 ;;		wreg, status,2, status,0
 16188 ;; Tracked objects:
 16189 ;;		On entry : 0/0
 16190 ;;		On exit  : 0/0
 16191 ;;		Unchanged: 0/0
 16192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16193 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16196 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16197 ;;Total ram usage:        4 bytes
 16198 ;; Hardware stack levels used:    1
 16199 ;; Hardware stack levels required when called:    5
 16200 ;; This function calls:
 16201 ;;		Nothing
 16202 ;; This function is called by:
 16203 ;;		_DelayTimejudge
 16204 ;; This function uses a non-reentrant model
 16205 ;;
 16206                           
 16207                           
 16208                           ;psect for function ___bmul
 16209  1D8E                     ___bmul:	
 16210                           
 16211                           ;incstack = 0
 16212                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16213                           ;___bmul@multiplier stored from wreg
 16214  1D8E  0020               	movlb	0	; select bank0
 16215  1D8F  00A3               	movwf	___bmul@multiplier
 16216  1D90  01A2               	clrf	___bmul@product
 16217  1D91                     l5509:	
 16218  1D91  1C23               	btfss	___bmul@multiplier,0
 16219  1D92  2D97               	goto	l5513
 16220  1D93  0820               	movf	___bmul@multiplicand,w
 16221  1D94  00A1               	movwf	??___bmul
 16222  1D95  0821               	movf	??___bmul,w
 16223  1D96  07A2               	addwf	___bmul@product,f
 16224  1D97                     l5513:	
 16225  1D97  1003               	clrc
 16226  1D98  0DA0               	rlf	___bmul@multiplicand,f
 16227  1D99  1003               	clrc
 16228  1D9A  0CA3               	rrf	___bmul@multiplier,f
 16229  1D9B  08A3               	movf	___bmul@multiplier,f
 16230  1D9C  1D03               	skipz
 16231  1D9D  2D91               	goto	l5509
 16232  1D9E  0822               	movf	___bmul@product,w
 16233  1D9F  0008               	return
 16234  1DA0                     __end_of___bmul:	
 16235                           
 16236                           	psect	text104
 16237  1D1A                     __ptext104:	
 16238 ;; *************** function _getDelayOff_GO *****************
 16239 ;; Defined at:
 16240 ;;		line 105 in file "../src/DelayOff_B1.c"
 16241 ;; Parameters:    Size  Location     Type
 16242 ;;  sw              1    wreg     unsigned char 
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  sw              1    2[BANK0 ] unsigned char 
 16245 ;;  go              1    3[BANK0 ] unsigned char 
 16246 ;; Return value:  Size  Location     Type
 16247 ;;                  1    wreg      unsigned char 
 16248 ;; Registers used:
 16249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16250 ;; Tracked objects:
 16251 ;;		On entry : 0/0
 16252 ;;		On exit  : 0/0
 16253 ;;		Unchanged: 0/0
 16254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16259 ;;Total ram usage:        2 bytes
 16260 ;; Hardware stack levels used:    1
 16261 ;; Hardware stack levels required when called:    6
 16262 ;; This function calls:
 16263 ;;		_DelayOffPointSelect
 16264 ;; This function is called by:
 16265 ;;		_setDimmerLights_SwOff
 16266 ;;		_setRFSW_Control
 16267 ;; This function uses a non-reentrant model
 16268 ;;
 16269                           
 16270                           
 16271                           ;psect for function _getDelayOff_GO
 16272  1D1A                     _getDelayOff_GO:	
 16273                           
 16274                           ;incstack = 0
 16275                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16276                           ;getDelayOff_GO@sw stored from wreg
 16277  1D1A  0020               	movlb	0	; select bank0
 16278  1D1B  00A2               	movwf	getDelayOff_GO@sw
 16279                           
 16280                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16281  1D1C  0822               	movf	getDelayOff_GO@sw,w
 16282  1D1D  319C  2438         	fcall	_DelayOffPointSelect
 16283                           
 16284                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16285  1D1F  0878               	movf	_DelayOff,w
 16286  1D20  0086               	movwf	6
 16287  1D21  3001               	movlw	1	; select bank2/3
 16288  1D22  0087               	movwf	7
 16289  1D23  3000               	movlw	0
 16290  1D24  1881               	btfsc	1,1
 16291  1D25  3001               	movlw	1
 16292  1D26  0020               	movlb	0	; select bank0
 16293  1D27  00A3               	movwf	getDelayOff_GO@go
 16294                           
 16295                           ;DelayOff_B1.c: 108: return go;
 16296  1D28  0823               	movf	getDelayOff_GO@go,w
 16297  1D29  0008               	return
 16298  1D2A                     __end_of_getDelayOff_GO:	
 16299                           
 16300                           	psect	text105
 16301  1D0A                     __ptext105:	
 16302 ;; *************** function _getDimmerLights_Status *****************
 16303 ;; Defined at:
 16304 ;;		line 445 in file "../src/Dimmer_B1.c"
 16305 ;; Parameters:    Size  Location     Type
 16306 ;;  lights          1    wreg     unsigned char 
 16307 ;; Auto vars:     Size  Location     Type
 16308 ;;  lights          1    2[BANK0 ] unsigned char 
 16309 ;;  status          1    3[BANK0 ] unsigned char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      unsigned char 
 16312 ;; Registers used:
 16313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;Total ram usage:        2 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    6
 16326 ;; This function calls:
 16327 ;;		_DimmerLightsPointSelect
 16328 ;; This function is called by:
 16329 ;;		_setDimmerLights_ErrorClose
 16330 ;;		_getMain_LightsStatus
 16331 ;;		_setRFSW_Control
 16332 ;;		_setRFSW_AdjControl
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _getDimmerLights_Status
 16338  1D0A                     _getDimmerLights_Status:	
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16342                           ;getDimmerLights_Status@lights stored from wreg
 16343  1D0A  0020               	movlb	0	; select bank0
 16344  1D0B  00A2               	movwf	getDimmerLights_Status@lights
 16345                           
 16346                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16347  1D0C  0822               	movf	getDimmerLights_Status@lights,w
 16348  1D0D  319C  2443         	fcall	_DimmerLightsPointSelect
 16349                           
 16350                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16351  1D0F  0020               	movlb	0	; select bank0
 16352  1D10  086F               	movf	_DimmerLights,w
 16353  1D11  0086               	movwf	6
 16354  1D12  3001               	movlw	1	; select bank2/3
 16355  1D13  0087               	movwf	7
 16356  1D14  3000               	movlw	0
 16357  1D15  1A81               	btfsc	1,5
 16358  1D16  3001               	movlw	1
 16359  1D17  00A3               	movwf	getDimmerLights_Status@status
 16360                           
 16361                           ;Dimmer_B1.c: 448: return status;
 16362  1D18  0823               	movf	getDimmerLights_Status@status,w
 16363  1D19  0008               	return
 16364  1D1A                     __end_of_getDimmerLights_Status:	
 16365                           
 16366                           	psect	text106
 16367  1C43                     __ptext106:	
 16368 ;; *************** function _DimmerLightsPointSelect *****************
 16369 ;; Defined at:
 16370 ;;		line 310 in file "../src/Dimmer_B1.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  lights          1    wreg     unsigned char 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  lights          1    1[BANK0 ] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;		None               void
 16377 ;; Registers used:
 16378 ;;		wreg
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;Total ram usage:        2 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    5
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_setDimmerLights_Initialization
 16395 ;;		_setDimmerLights_Main
 16396 ;;		_getDimmerLights_Status
 16397 ;;		_setDimmerLights_SwOn
 16398 ;;		_setDimmerLights_SwOff
 16399 ;;		_setDimmerLights_AdjControl
 16400 ;;		_setDimmerLights_ErrorClose
 16401 ;;		_setDimmerLights
 16402 ;;		_setDimmerLights_Adj
 16403 ;;		_setDimmerLights_AdjRF
 16404 ;;		_setDimmerLights_Trigger
 16405 ;;		_setDimmerLights_TriggerAdj
 16406 ;;		_setDimmerLights_Status
 16407 ;;		_setDimmerLights_GO
 16408 ;;		_setDimmerLights_MaxmumValue
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function _DimmerLightsPointSelect
 16414  1C43                     _DimmerLightsPointSelect:	
 16415                           
 16416                           ;incstack = 0
 16417                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16418                           ;DimmerLightsPointSelect@lights stored from wreg
 16419  1C43  0020               	movlb	0	; select bank0
 16420  1C44  00A1               	movwf	DimmerLightsPointSelect@lights
 16421                           
 16422                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16423  1C45  0821               	movf	DimmerLightsPointSelect@lights,w
 16424  1C46  3A01               	xorlw	1
 16425  1C47  1D03               	skipz
 16426  1C48  0008               	return
 16427                           
 16428                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16429  1C49  3053               	movlw	_DimmerLights1& (0+255)
 16430  1C4A  00A0               	movwf	??_DimmerLightsPointSelect
 16431  1C4B  0820               	movf	??_DimmerLightsPointSelect,w
 16432  1C4C  00EF               	movwf	_DimmerLights
 16433  1C4D  0008               	return
 16434  1C4E                     __end_of_DimmerLightsPointSelect:	
 16435                           
 16436                           	psect	text107
 16437  16F2                     __ptext107:	
 16438 ;; *************** function _setBuz *****************
 16439 ;; Defined at:
 16440 ;;		line 22 in file "../src/Buzzer_B1.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  count           1    wreg     unsigned char 
 16443 ;;  time            2    9[BANK0 ] int 
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;  count           1   12[BANK0 ] unsigned char 
 16446 ;; Return value:  Size  Location     Type
 16447 ;;		None               void
 16448 ;; Registers used:
 16449 ;;		wreg, status,2, status,0, pclath, cstack
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16455 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;Total ram usage:        4 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:    6
 16462 ;; This function calls:
 16463 ;;		___awdiv
 16464 ;; This function is called by:
 16465 ;;		_DlyOff_Main
 16466 ;;		_setDimmerLights_Main
 16467 ;;		_setDimmerLights_SwOn
 16468 ;;		_my_MainTimer
 16469 ;;		_setMain_Exception
 16470 ;;		_setTemp_Main
 16471 ;;		_setLog_Code
 16472 ;;		_setControl_Lights_Table
 16473 ;;		_setRFSW_Control
 16474 ;;		_setSw_Main
 16475 ;; This function uses a non-reentrant model
 16476 ;;
 16477                           
 16478                           
 16479                           ;psect for function _setBuz
 16480  16F2                     _setBuz:	
 16481                           
 16482                           ;incstack = 0
 16483                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16484                           ;setBuz@count stored from wreg
 16485  16F2  0020               	movlb	0	; select bank0
 16486  16F3  00AC               	movwf	setBuz@count
 16487                           
 16488                           ;Buzzer_B1.c: 23: time /= 10;
 16489  16F4  300A               	movlw	10
 16490  16F5  00A0               	movwf	___awdiv@divisor
 16491  16F6  3000               	movlw	0
 16492  16F7  00A1               	movwf	___awdiv@divisor+1
 16493  16F8  082A               	movf	setBuz@time+1,w
 16494  16F9  01A3               	clrf	___awdiv@dividend+1
 16495  16FA  07A3               	addwf	___awdiv@dividend+1,f
 16496  16FB  0829               	movf	setBuz@time,w
 16497  16FC  01A2               	clrf	___awdiv@dividend
 16498  16FD  07A2               	addwf	___awdiv@dividend,f
 16499  16FE  3195  25EE  3196   	fcall	___awdiv
 16500  1701  0020               	movlb	0	; select bank0
 16501  1702  0821               	movf	?___awdiv+1,w
 16502  1703  01AA               	clrf	setBuz@time+1
 16503  1704  07AA               	addwf	setBuz@time+1,f
 16504  1705  0820               	movf	?___awdiv,w
 16505  1706  01A9               	clrf	setBuz@time
 16506  1707  07A9               	addwf	setBuz@time,f
 16507                           
 16508                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16509  1708  0021               	movlb	1	; select bank1
 16510  1709  1C2F               	btfss	_Buz1^(0+128),0
 16511  170A  0008               	return
 16512                           
 16513                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16514  170B  18AF               	btfsc	_Buz1^(0+128),1
 16515  170C  2F23               	goto	l84
 16516                           
 16517                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16518  170D  14AF               	bsf	_Buz1^(0+128),1
 16519                           
 16520                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16521  170E  01B0               	clrf	(_Buz1^(0+128)+1)
 16522  170F  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16523                           
 16524                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16525  1710  0020               	movlb	0	; select bank0
 16526  1711  082C               	movf	setBuz@count,w
 16527  1712  00AB               	movwf	??_setBuz
 16528  1713  082B               	movf	??_setBuz,w
 16529  1714  0021               	movlb	1	; select bank1
 16530  1715  00B2               	movwf	(_Buz1^(0+128)+3)
 16531                           
 16532                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16533  1716  0020               	movlb	0	; select bank0
 16534  1717  082A               	movf	setBuz@time+1,w
 16535  1718  0021               	movlb	1	; select bank1
 16536  1719  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16537  171A  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16538  171B  0020               	movlb	0	; select bank0
 16539  171C  0829               	movf	setBuz@time,w
 16540  171D  0021               	movlb	1	; select bank1
 16541  171E  01B5               	clrf	(_Buz1^(0+128)+6)
 16542  171F  07B5               	addwf	(_Buz1^(0+128)+6),f
 16543                           
 16544                           ;Buzzer_B1.c: 30: RB3 = 1;
 16545  1720  0020               	movlb	0	; select bank0
 16546  1721  158D               	bsf	13,3	;volatile
 16547                           
 16548                           ;Buzzer_B1.c: 31: } else {
 16549  1722  0008               	return
 16550  1723                     l84:	
 16551                           
 16552                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16553  1723  19AF               	btfsc	_Buz1^(0+128),3
 16554  1724  2F37               	goto	l86
 16555                           
 16556                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16557  1725  15AF               	bsf	_Buz1^(0+128),3
 16558                           
 16559                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16560  1726  0020               	movlb	0	; select bank0
 16561  1727  082C               	movf	setBuz@count,w
 16562  1728  00AB               	movwf	??_setBuz
 16563  1729  082B               	movf	??_setBuz,w
 16564  172A  0021               	movlb	1	; select bank1
 16565  172B  00B3               	movwf	(_Buz1^(0+128)+4)
 16566                           
 16567                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16568  172C  0020               	movlb	0	; select bank0
 16569  172D  082A               	movf	setBuz@time+1,w
 16570  172E  0021               	movlb	1	; select bank1
 16571  172F  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16572  1730  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16573  1731  0020               	movlb	0	; select bank0
 16574  1732  0829               	movf	setBuz@time,w
 16575  1733  0021               	movlb	1	; select bank1
 16576  1734  01B7               	clrf	(_Buz1^(0+128)+8)
 16577  1735  07B7               	addwf	(_Buz1^(0+128)+8),f
 16578                           
 16579                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16580  1736  0008               	return
 16581  1737                     l86:	
 16582  1737  1A2F               	btfsc	_Buz1^(0+128),4
 16583  1738  0008               	return
 16584                           
 16585                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16586  1739  162F               	bsf	_Buz1^(0+128),4
 16587                           
 16588                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16589  173A  0020               	movlb	0	; select bank0
 16590  173B  082C               	movf	setBuz@count,w
 16591  173C  00AB               	movwf	??_setBuz
 16592  173D  082B               	movf	??_setBuz,w
 16593  173E  0021               	movlb	1	; select bank1
 16594  173F  00B4               	movwf	(_Buz1^(0+128)+5)
 16595                           
 16596                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16597  1740  0020               	movlb	0	; select bank0
 16598  1741  082A               	movf	setBuz@time+1,w
 16599  1742  0021               	movlb	1	; select bank1
 16600  1743  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16601  1744  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16602  1745  0020               	movlb	0	; select bank0
 16603  1746  0829               	movf	setBuz@time,w
 16604  1747  0021               	movlb	1	; select bank1
 16605  1748  01B9               	clrf	(_Buz1^(0+128)+10)
 16606  1749  07B9               	addwf	(_Buz1^(0+128)+10),f
 16607  174A  0008               	return
 16608  174B                     __end_of_setBuz:	
 16609                           
 16610                           	psect	text108
 16611  15EE                     __ptext108:	
 16612 ;; *************** function ___awdiv *****************
 16613 ;; Defined at:
 16614 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16615 ;; Parameters:    Size  Location     Type
 16616 ;;  divisor         2    0[BANK0 ] int 
 16617 ;;  dividend        2    2[BANK0 ] int 
 16618 ;; Auto vars:     Size  Location     Type
 16619 ;;  quotient        2    7[BANK0 ] int 
 16620 ;;  sign            1    6[BANK0 ] unsigned char 
 16621 ;;  counter         1    5[BANK0 ] unsigned char 
 16622 ;; Return value:  Size  Location     Type
 16623 ;;                  2    0[BANK0 ] int 
 16624 ;; Registers used:
 16625 ;;		wreg, status,2, status,0
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16632 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;Total ram usage:        9 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    5
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;;		_setBuz
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function ___awdiv
 16647  15EE                     ___awdiv:	
 16648                           
 16649                           ;incstack = 0
 16650                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16651  15EE  0020               	movlb	0	; select bank0
 16652  15EF  01A6               	clrf	___awdiv@sign
 16653  15F0  1FA1               	btfss	___awdiv@divisor+1,7
 16654  15F1  2DF9               	goto	l5791
 16655  15F2  09A0               	comf	___awdiv@divisor,f
 16656  15F3  09A1               	comf	___awdiv@divisor+1,f
 16657  15F4  0AA0               	incf	___awdiv@divisor,f
 16658  15F5  1903               	skipnz
 16659  15F6  0AA1               	incf	___awdiv@divisor+1,f
 16660  15F7  01A6               	clrf	___awdiv@sign
 16661  15F8  0AA6               	incf	___awdiv@sign,f
 16662  15F9                     l5791:	
 16663  15F9  1FA3               	btfss	___awdiv@dividend+1,7
 16664  15FA  2E04               	goto	l5797
 16665  15FB  09A2               	comf	___awdiv@dividend,f
 16666  15FC  09A3               	comf	___awdiv@dividend+1,f
 16667  15FD  0AA2               	incf	___awdiv@dividend,f
 16668  15FE  1903               	skipnz
 16669  15FF  0AA3               	incf	___awdiv@dividend+1,f
 16670  1600  3001               	movlw	1
 16671  1601  00A4               	movwf	??___awdiv
 16672  1602  0824               	movf	??___awdiv,w
 16673  1603  06A6               	xorwf	___awdiv@sign,f
 16674  1604                     l5797:	
 16675  1604  01A7               	clrf	___awdiv@quotient
 16676  1605  01A8               	clrf	___awdiv@quotient+1
 16677  1606  0821               	movf	___awdiv@divisor+1,w
 16678  1607  0420               	iorwf	___awdiv@divisor,w
 16679  1608  1903               	skipnz
 16680  1609  2E33               	goto	l5819
 16681  160A  01A5               	clrf	___awdiv@counter
 16682  160B  0AA5               	incf	___awdiv@counter,f
 16683  160C                     l5807:	
 16684  160C  1BA1               	btfsc	___awdiv@divisor+1,7
 16685  160D  2E18               	goto	l5809
 16686  160E  3001               	movlw	1
 16687  160F                     u4765:	
 16688  160F  35A0               	lslf	___awdiv@divisor,f
 16689  1610  0DA1               	rlf	___awdiv@divisor+1,f
 16690  1611  0B89               	decfsz	9,f
 16691  1612  2E0F               	goto	u4765
 16692  1613  3001               	movlw	1
 16693  1614  00A4               	movwf	??___awdiv
 16694  1615  0824               	movf	??___awdiv,w
 16695  1616  07A5               	addwf	___awdiv@counter,f
 16696  1617  2E0C               	goto	l5807
 16697  1618                     l5809:	
 16698  1618  3001               	movlw	1
 16699  1619                     u4785:	
 16700  1619  35A7               	lslf	___awdiv@quotient,f
 16701  161A  0DA8               	rlf	___awdiv@quotient+1,f
 16702  161B  0B89               	decfsz	9,f
 16703  161C  2E19               	goto	u4785
 16704  161D  0821               	movf	___awdiv@divisor+1,w
 16705  161E  0223               	subwf	___awdiv@dividend+1,w
 16706  161F  1D03               	skipz
 16707  1620  2E23               	goto	u4795
 16708  1621  0820               	movf	___awdiv@divisor,w
 16709  1622  0222               	subwf	___awdiv@dividend,w
 16710  1623                     u4795:	
 16711  1623  1C03               	skipc
 16712  1624  2E2A               	goto	l5815
 16713  1625  0820               	movf	___awdiv@divisor,w
 16714  1626  02A2               	subwf	___awdiv@dividend,f
 16715  1627  0821               	movf	___awdiv@divisor+1,w
 16716  1628  3BA3               	subwfb	___awdiv@dividend+1,f
 16717  1629  1427               	bsf	___awdiv@quotient,0
 16718  162A                     l5815:	
 16719  162A  3001               	movlw	1
 16720  162B                     u4805:	
 16721  162B  36A1               	lsrf	___awdiv@divisor+1,f
 16722  162C  0CA0               	rrf	___awdiv@divisor,f
 16723  162D  0B89               	decfsz	9,f
 16724  162E  2E2B               	goto	u4805
 16725  162F  3001               	movlw	1
 16726  1630  02A5               	subwf	___awdiv@counter,f
 16727  1631  1D03               	btfss	3,2
 16728  1632  2E18               	goto	l5809
 16729  1633                     l5819:	
 16730  1633  0826               	movf	___awdiv@sign,w
 16731  1634  1903               	btfsc	3,2
 16732  1635  2E3B               	goto	l5823
 16733  1636  09A7               	comf	___awdiv@quotient,f
 16734  1637  09A8               	comf	___awdiv@quotient+1,f
 16735  1638  0AA7               	incf	___awdiv@quotient,f
 16736  1639  1903               	skipnz
 16737  163A  0AA8               	incf	___awdiv@quotient+1,f
 16738  163B                     l5823:	
 16739  163B  0828               	movf	___awdiv@quotient+1,w
 16740  163C  01A1               	clrf	?___awdiv+1
 16741  163D  07A1               	addwf	?___awdiv+1,f
 16742  163E  0827               	movf	___awdiv@quotient,w
 16743  163F  01A0               	clrf	?___awdiv
 16744  1640  07A0               	addwf	?___awdiv,f
 16745  1641  0008               	return
 16746  1642                     __end_of___awdiv:	
 16747                           
 16748                           	psect	text109
 16749  1BB7                     __ptext109:	
 16750 ;; *************** function _DelayOff_Initialization *****************
 16751 ;; Defined at:
 16752 ;;		line 26 in file "../src/DelayOff_B1.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;		None
 16755 ;; Auto vars:     Size  Location     Type
 16756 ;;		None
 16757 ;; Return value:  Size  Location     Type
 16758 ;;		None               void
 16759 ;; Registers used:
 16760 ;;		wreg, status,2, status,0, pclath, cstack
 16761 ;; Tracked objects:
 16762 ;;		On entry : 0/0
 16763 ;;		On exit  : 0/0
 16764 ;;		Unchanged: 0/0
 16765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;Total ram usage:        0 bytes
 16771 ;; Hardware stack levels used:    1
 16772 ;; Hardware stack levels required when called:    7
 16773 ;; This function calls:
 16774 ;;		_DlyOff_Initialization
 16775 ;; This function is called by:
 16776 ;;		_main
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780                           
 16781                           ;psect for function _DelayOff_Initialization
 16782  1BB7                     _DelayOff_Initialization:	
 16783                           
 16784                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16785                           
 16786                           ;incstack = 0
 16787                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16788  1BB7  3001               	movlw	1
 16789  1BB8  319B  23D5         	fcall	_DlyOff_Initialization
 16790  1BBA  0008               	return
 16791  1BBB                     __end_of_DelayOff_Initialization:	
 16792                           
 16793                           	psect	text110
 16794  1BD5                     __ptext110:	
 16795 ;; *************** function _DlyOff_Initialization *****************
 16796 ;; Defined at:
 16797 ;;		line 56 in file "../src/DelayOff_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  sw              1    wreg     unsigned char 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  sw              1    2[BANK0 ] unsigned char 
 16802 ;; Return value:  Size  Location     Type
 16803 ;;		None               void
 16804 ;; Registers used:
 16805 ;;		wreg, status,2, status,0, pclath, cstack
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        1 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    6
 16818 ;; This function calls:
 16819 ;;		_DelayOffPointSelect
 16820 ;; This function is called by:
 16821 ;;		_DelayOff_Initialization
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           
 16826                           ;psect for function _DlyOff_Initialization
 16827  1BD5                     _DlyOff_Initialization:	
 16828                           
 16829                           ;incstack = 0
 16830                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16831                           ;DlyOff_Initialization@sw stored from wreg
 16832  1BD5  0020               	movlb	0	; select bank0
 16833  1BD6  00A2               	movwf	DlyOff_Initialization@sw
 16834                           
 16835                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16836  1BD7  0822               	movf	DlyOff_Initialization@sw,w
 16837  1BD8  319C  2438         	fcall	_DelayOffPointSelect
 16838  1BDA  0008               	return
 16839  1BDB                     __end_of_DlyOff_Initialization:	
 16840                           
 16841                           	psect	text111
 16842  1C38                     __ptext111:	
 16843 ;; *************** function _DelayOffPointSelect *****************
 16844 ;; Defined at:
 16845 ;;		line 7 in file "../src/DelayOff_B1.c"
 16846 ;; Parameters:    Size  Location     Type
 16847 ;;  sw              1    wreg     unsigned char 
 16848 ;; Auto vars:     Size  Location     Type
 16849 ;;  sw              1    1[BANK0 ] unsigned char 
 16850 ;; Return value:  Size  Location     Type
 16851 ;;		None               void
 16852 ;; Registers used:
 16853 ;;		wreg
 16854 ;; Tracked objects:
 16855 ;;		On entry : 0/0
 16856 ;;		On exit  : 0/0
 16857 ;;		Unchanged: 0/0
 16858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;Total ram usage:        2 bytes
 16864 ;; Hardware stack levels used:    1
 16865 ;; Hardware stack levels required when called:    5
 16866 ;; This function calls:
 16867 ;;		Nothing
 16868 ;; This function is called by:
 16869 ;;		_DlyOff_Initialization
 16870 ;;		_DlyOff_Main
 16871 ;;		_setDelayOff_GO
 16872 ;;		_getDelayOff_GO
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           
 16877                           ;psect for function _DelayOffPointSelect
 16878  1C38                     _DelayOffPointSelect:	
 16879                           
 16880                           ;incstack = 0
 16881                           ; Regs used in _DelayOffPointSelect: [wreg]
 16882                           ;DelayOffPointSelect@sw stored from wreg
 16883  1C38  0020               	movlb	0	; select bank0
 16884  1C39  00A1               	movwf	DelayOffPointSelect@sw
 16885                           
 16886                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16887  1C3A  0821               	movf	DelayOffPointSelect@sw,w
 16888  1C3B  3A01               	xorlw	1
 16889  1C3C  1D03               	skipz
 16890  1C3D  0008               	return
 16891                           
 16892                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16893  1C3E  3062               	movlw	_DlySw1& (0+255)
 16894  1C3F  00A0               	movwf	??_DelayOffPointSelect
 16895  1C40  0820               	movf	??_DelayOffPointSelect,w
 16896  1C41  00F8               	movwf	_DelayOff
 16897  1C42  0008               	return
 16898  1C43                     __end_of_DelayOffPointSelect:	
 16899                           
 16900                           	psect	text112
 16901  1E13                     __ptext112:	
 16902 ;; *************** function _CC2500_PowerOnInitial *****************
 16903 ;; Defined at:
 16904 ;;		line 119 in file "../src/CC2500_B1.c"
 16905 ;; Parameters:    Size  Location     Type
 16906 ;;		None
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;		None
 16909 ;; Return value:  Size  Location     Type
 16910 ;;		None               void
 16911 ;; Registers used:
 16912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16913 ;; Tracked objects:
 16914 ;;		On entry : 0/0
 16915 ;;		On exit  : 0/0
 16916 ;;		Unchanged: 0/0
 16917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;Total ram usage:        0 bytes
 16923 ;; Hardware stack levels used:    1
 16924 ;; Hardware stack levels required when called:    8
 16925 ;; This function calls:
 16926 ;;		_CC2500_ClearRXFIFO
 16927 ;;		_CC2500_ClearTXFIFO
 16928 ;;		_CC2500_FrequencyCabr
 16929 ;;		_CC2500_InitPATable
 16930 ;;		_CC2500_InitSetREG
 16931 ;;		_CC2500_PowerRST
 16932 ;;		_CC2500_SIDLEMode
 16933 ;; This function is called by:
 16934 ;;		_main
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           
 16939                           ;psect for function _CC2500_PowerOnInitial
 16940  1E13                     _CC2500_PowerOnInitial:	
 16941                           
 16942                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16943                           
 16944                           ;incstack = 0
 16945                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16946  1E13  3194  2430  319E   	fcall	_CC2500_PowerRST
 16947                           
 16948                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16949  1E16  3190  20EB  319E   	fcall	_CC2500_InitSetREG
 16950                           
 16951                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16952  1E19  319E  26D9  319E   	fcall	_CC2500_InitPATable
 16953                           
 16954                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16955  1E1C  319B  23AF  319E   	fcall	_CC2500_ClearTXFIFO
 16956                           
 16957                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16958  1E1F  319B  23AB  319E   	fcall	_CC2500_ClearRXFIFO
 16959                           
 16960                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16961  1E22  319C  247A  319E   	fcall	_CC2500_FrequencyCabr
 16962                           
 16963                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16964  1E25  319B  23B3         	fcall	_CC2500_SIDLEMode
 16965  1E27  0008               	return
 16966  1E28                     __end_of_CC2500_PowerOnInitial:	
 16967                           
 16968                           	psect	text113
 16969  1BB3                     __ptext113:	
 16970 ;; *************** function _CC2500_SIDLEMode *****************
 16971 ;; Defined at:
 16972 ;;		line 209 in file "../src/CC2500_B1.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;		None
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;		None
 16977 ;; Return value:  Size  Location     Type
 16978 ;;		None               void
 16979 ;; Registers used:
 16980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;Total ram usage:        0 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    7
 16993 ;; This function calls:
 16994 ;;		_CC2500_WriteCommand
 16995 ;; This function is called by:
 16996 ;;		_CC2500_PowerOnInitial
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           
 17001                           ;psect for function _CC2500_SIDLEMode
 17002  1BB3                     _CC2500_SIDLEMode:	
 17003                           
 17004                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17005                           
 17006                           ;incstack = 0
 17007                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17008  1BB3  3036               	movlw	54
 17009  1BB4  319E  266C         	fcall	_CC2500_WriteCommand
 17010  1BB6  0008               	return
 17011  1BB7                     __end_of_CC2500_SIDLEMode:	
 17012                           
 17013                           	psect	text114
 17014  1430                     __ptext114:	
 17015 ;; *************** function _CC2500_PowerRST *****************
 17016 ;; Defined at:
 17017 ;;		line 132 in file "../src/CC2500_B1.c"
 17018 ;; Parameters:    Size  Location     Type
 17019 ;;		None
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;		None
 17022 ;; Return value:  Size  Location     Type
 17023 ;;		None               void
 17024 ;; Registers used:
 17025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17026 ;; Tracked objects:
 17027 ;;		On entry : 0/0
 17028 ;;		On exit  : 0/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;Total ram usage:        1 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    6
 17038 ;; This function calls:
 17039 ;;		_CC2500_WriteByte
 17040 ;;		_DelayTime_1us
 17041 ;;		_Timeout_Counter
 17042 ;;		_set_TimeoutCleared
 17043 ;; This function is called by:
 17044 ;;		_CC2500_PowerOnInitial
 17045 ;; This function uses a non-reentrant model
 17046 ;;
 17047                           
 17048                           
 17049                           ;psect for function _CC2500_PowerRST
 17050  1430                     _CC2500_PowerRST:	
 17051                           
 17052                           ;CC2500_B1.c: 133: RC3 = 0;
 17053                           
 17054                           ;incstack = 0
 17055                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17056  1430  0020               	movlb	0	; select bank0
 17057  1431  118E               	bcf	14,3	;volatile
 17058                           
 17059                           ;CC2500_B1.c: 134: RC4 = 0;
 17060  1432  120E               	bcf	14,4	;volatile
 17061                           
 17062                           ;CC2500_B1.c: 135: RC0 = 1;
 17063  1433  140E               	bsf	14,0	;volatile
 17064                           
 17065                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17066  1434  300A               	movlw	10
 17067  1435  00A0               	movwf	DelayTime_1us@count
 17068  1436  3000               	movlw	0
 17069  1437  00A1               	movwf	DelayTime_1us@count+1
 17070  1438  3190  209E  3194   	fcall	_DelayTime_1us
 17071                           
 17072                           ;CC2500_B1.c: 137: RC0 = 0;
 17073  143B  0020               	movlb	0	; select bank0
 17074  143C  100E               	bcf	14,0	;volatile
 17075                           
 17076                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17077  143D  300A               	movlw	10
 17078  143E  00A0               	movwf	DelayTime_1us@count
 17079  143F  3000               	movlw	0
 17080  1440  00A1               	movwf	DelayTime_1us@count+1
 17081  1441  3190  209E  3194   	fcall	_DelayTime_1us
 17082                           
 17083                           ;CC2500_B1.c: 139: RC0 = 1;
 17084  1444  0020               	movlb	0	; select bank0
 17085  1445  140E               	bsf	14,0	;volatile
 17086                           
 17087                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17088  1446  3028               	movlw	40
 17089  1447  00A0               	movwf	DelayTime_1us@count
 17090  1448  3000               	movlw	0
 17091  1449  00A1               	movwf	DelayTime_1us@count+1
 17092  144A  3190  209E  3194   	fcall	_DelayTime_1us
 17093                           
 17094                           ;CC2500_B1.c: 141: RC0 = 0;
 17095  144D  0020               	movlb	0	; select bank0
 17096  144E  100E               	bcf	14,0	;volatile
 17097                           
 17098                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17099  144F  3030               	movlw	48
 17100  1450  00A6               	movwf	??_CC2500_PowerRST
 17101  1451  0826               	movf	??_CC2500_PowerRST,w
 17102  1452  00FB               	movwf	_SPI0Buffer
 17103                           
 17104                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17105  1453  2C57               	goto	l6755
 17106  1454                     l6753:	
 17107                           
 17108                           ;CC2500_B1.c: 144: Timeout_Counter();
 17109  1454  319D  25FE  3194   	fcall	_Timeout_Counter
 17110  1457                     l6755:	
 17111  1457  0020               	movlb	0	; select bank0
 17112  1458  1E8E               	btfss	14,5	;volatile
 17113  1459  2C5D               	goto	l6759
 17114  145A  0021               	movlb	1	; select bank1
 17115  145B  1D2C               	btfss	(_myMain^(0+128)+12),2
 17116  145C  2C54               	goto	l6753
 17117  145D                     l6759:	
 17118                           
 17119                           ;CC2500_B1.c: 145: };
 17120                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17121  145D  319B  23CB  3194   	fcall	_set_TimeoutCleared
 17122                           
 17123                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17124  1460  319D  25EA  3194   	fcall	_CC2500_WriteByte
 17125                           
 17126                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17127  1463  2C67               	goto	l6765
 17128  1464                     l6763:	
 17129                           
 17130                           ;CC2500_B1.c: 149: Timeout_Counter();
 17131  1464  319D  25FE  3194   	fcall	_Timeout_Counter
 17132  1467                     l6765:	
 17133  1467  0020               	movlb	0	; select bank0
 17134  1468  1E8E               	btfss	14,5	;volatile
 17135  1469  2C6D               	goto	l6769
 17136  146A  0021               	movlb	1	; select bank1
 17137  146B  1D2C               	btfss	(_myMain^(0+128)+12),2
 17138  146C  2C64               	goto	l6763
 17139  146D                     l6769:	
 17140                           
 17141                           ;CC2500_B1.c: 150: };
 17142                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17143  146D  319B  23CB         	fcall	_set_TimeoutCleared
 17144                           
 17145                           ;CC2500_B1.c: 152: RC4 = 0;
 17146  146F  0020               	movlb	0	; select bank0
 17147  1470  120E               	bcf	14,4	;volatile
 17148                           
 17149                           ;CC2500_B1.c: 153: RC0 = 1;
 17150  1471  140E               	bsf	14,0	;volatile
 17151  1472  0008               	return
 17152  1473                     __end_of_CC2500_PowerRST:	
 17153                           
 17154                           	psect	text115
 17155  10EB                     __ptext115:	
 17156 ;; *************** function _CC2500_InitSetREG *****************
 17157 ;; Defined at:
 17158 ;;		line 159 in file "../src/CC2500_B1.c"
 17159 ;; Parameters:    Size  Location     Type
 17160 ;;		None
 17161 ;; Auto vars:     Size  Location     Type
 17162 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17163 ;;  temp2           1    7[BANK0 ] unsigned char 
 17164 ;;  temp1           1    6[BANK0 ] unsigned char 
 17165 ;; Return value:  Size  Location     Type
 17166 ;;		None               void
 17167 ;; Registers used:
 17168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17169 ;; Tracked objects:
 17170 ;;		On entry : 0/0
 17171 ;;		On exit  : 0/0
 17172 ;;		Unchanged: 0/0
 17173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17175 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17178 ;;Total ram usage:        4 bytes
 17179 ;; Hardware stack levels used:    1
 17180 ;; Hardware stack levels required when called:    7
 17181 ;; This function calls:
 17182 ;;		_CC2500_WriteREG
 17183 ;; This function is called by:
 17184 ;;		_CC2500_PowerOnInitial
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           
 17189                           ;psect for function _CC2500_InitSetREG
 17190  10EB                     _CC2500_InitSetREG:	
 17191                           
 17192                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17193                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17194                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17195                           
 17196                           ;incstack = 0
 17197                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17198  10EB  0020               	movlb	0	; select bank0
 17199  10EC  01A8               	clrf	CC2500_InitSetREG@loop_c
 17200  10ED                     L9:	
 17201  10ED  302F               	movlw	47
 17202  10EE  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17203  10EF  1803               	btfsc	3,0
 17204  10F0  0008               	return
 17205                           
 17206                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17207  10F1  0828               	movf	CC2500_InitSetREG@loop_c,w
 17208  10F2  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17209  10F3  0084               	movwf	4
 17210  10F4  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17211  10F5  1803               	skipnc
 17212  10F6  3E01               	addlw	1
 17213  10F7  0085               	movwf	5
 17214  10F8  0800               	movf	0,w	;code access
 17215  10F9  00A5               	movwf	??_CC2500_InitSetREG
 17216  10FA  0825               	movf	??_CC2500_InitSetREG,w
 17217  10FB  00A6               	movwf	CC2500_InitSetREG@temp1
 17218                           
 17219                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17220  10FC  0828               	movf	CC2500_InitSetREG@loop_c,w
 17221  10FD  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17222  10FE  0084               	movwf	4
 17223  10FF  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17224  1100  1803               	skipnc
 17225  1101  3E01               	addlw	1
 17226  1102  0085               	movwf	5
 17227  1103  0800               	movf	0,w	;code access
 17228  1104  00A5               	movwf	??_CC2500_InitSetREG
 17229  1105  0825               	movf	??_CC2500_InitSetREG,w
 17230  1106  00A7               	movwf	CC2500_InitSetREG@temp2
 17231                           
 17232                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17233  1107  0827               	movf	CC2500_InitSetREG@temp2,w
 17234  1108  00A5               	movwf	??_CC2500_InitSetREG
 17235  1109  0825               	movf	??_CC2500_InitSetREG,w
 17236  110A  00A2               	movwf	CC2500_WriteREG@value
 17237  110B  0826               	movf	CC2500_InitSetREG@temp1,w
 17238  110C  319F  2778  3190   	fcall	_CC2500_WriteREG
 17239  110F  3001               	movlw	1
 17240  1110  0020               	movlb	0	; select bank0
 17241  1111  00A5               	movwf	??_CC2500_InitSetREG
 17242  1112  0825               	movf	??_CC2500_InitSetREG,w
 17243  1113  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17244  1114  28ED               	goto	L9
 17245  1115                     __end_of_CC2500_InitSetREG:	
 17246                           
 17247                           	psect	text116
 17248  1ED9                     __ptext116:	
 17249 ;; *************** function _CC2500_InitPATable *****************
 17250 ;; Defined at:
 17251 ;;		line 174 in file "../src/CC2500_B1.c"
 17252 ;; Parameters:    Size  Location     Type
 17253 ;;		None
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17256 ;;  temp            1    6[BANK0 ] unsigned char 
 17257 ;; Return value:  Size  Location     Type
 17258 ;;		None               void
 17259 ;; Registers used:
 17260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17261 ;; Tracked objects:
 17262 ;;		On entry : 0/0
 17263 ;;		On exit  : 0/0
 17264 ;;		Unchanged: 0/0
 17265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;Total ram usage:        3 bytes
 17271 ;; Hardware stack levels used:    1
 17272 ;; Hardware stack levels required when called:    7
 17273 ;; This function calls:
 17274 ;;		_CC2500_WriteREG
 17275 ;; This function is called by:
 17276 ;;		_CC2500_PowerOnInitial
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           
 17281                           ;psect for function _CC2500_InitPATable
 17282  1ED9                     _CC2500_InitPATable:	
 17283                           
 17284                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17285                           ;CC2500_B1.c: 176: unsigned char temp;
 17286                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17287                           
 17288                           ;incstack = 0
 17289                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17290  1ED9  0020               	movlb	0	; select bank0
 17291  1EDA  01A7               	clrf	CC2500_InitPATable@loop_d
 17292  1EDB                     L10:	
 17293  1EDB  3008               	movlw	8
 17294  1EDC  0227               	subwf	CC2500_InitPATable@loop_d,w
 17295  1EDD  1803               	btfsc	3,0
 17296  1EDE  0008               	return
 17297                           
 17298                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17299  1EDF  0827               	movf	CC2500_InitPATable@loop_d,w
 17300  1EE0  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17301  1EE1  0084               	movwf	4
 17302  1EE2  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17303  1EE3  1803               	skipnc
 17304  1EE4  3E01               	addlw	1
 17305  1EE5  0085               	movwf	5
 17306  1EE6  0800               	movf	0,w	;code access
 17307  1EE7  00A5               	movwf	??_CC2500_InitPATable
 17308  1EE8  0825               	movf	??_CC2500_InitPATable,w
 17309  1EE9  00A6               	movwf	CC2500_InitPATable@temp
 17310                           
 17311                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17312  1EEA  0826               	movf	CC2500_InitPATable@temp,w
 17313  1EEB  00A5               	movwf	??_CC2500_InitPATable
 17314  1EEC  0825               	movf	??_CC2500_InitPATable,w
 17315  1EED  00A2               	movwf	CC2500_WriteREG@value
 17316  1EEE  303E               	movlw	62
 17317  1EEF  319F  2778  319E   	fcall	_CC2500_WriteREG
 17318  1EF2  3001               	movlw	1
 17319  1EF3  0020               	movlb	0	; select bank0
 17320  1EF4  00A5               	movwf	??_CC2500_InitPATable
 17321  1EF5  0825               	movf	??_CC2500_InitPATable,w
 17322  1EF6  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17323  1EF7  2EDB               	goto	L10
 17324  1EF8                     __end_of_CC2500_InitPATable:	
 17325                           
 17326                           	psect	text117
 17327  1F78                     __ptext117:	
 17328 ;; *************** function _CC2500_WriteREG *****************
 17329 ;; Defined at:
 17330 ;;		line 251 in file "../src/CC2500_B1.c"
 17331 ;; Parameters:    Size  Location     Type
 17332 ;;  w_addr          1    wreg     unsigned char 
 17333 ;;  value           1    2[BANK0 ] unsigned char 
 17334 ;; Auto vars:     Size  Location     Type
 17335 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17336 ;; Return value:  Size  Location     Type
 17337 ;;		None               void
 17338 ;; Registers used:
 17339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17340 ;; Tracked objects:
 17341 ;;		On entry : 0/0
 17342 ;;		On exit  : 0/0
 17343 ;;		Unchanged: 0/0
 17344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17345 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17348 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;Total ram usage:        3 bytes
 17350 ;; Hardware stack levels used:    1
 17351 ;; Hardware stack levels required when called:    6
 17352 ;; This function calls:
 17353 ;;		_CC2500_WriteByte
 17354 ;;		_Timeout_Counter
 17355 ;;		_set_TimeoutCleared
 17356 ;; This function is called by:
 17357 ;;		_CC2500_InitSetREG
 17358 ;;		_CC2500_InitPATable
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           
 17363                           ;psect for function _CC2500_WriteREG
 17364  1F78                     _CC2500_WriteREG:	
 17365                           
 17366                           ;incstack = 0
 17367                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17368                           ;CC2500_WriteREG@w_addr stored from wreg
 17369  1F78  0020               	movlb	0	; select bank0
 17370  1F79  00A4               	movwf	CC2500_WriteREG@w_addr
 17371                           
 17372                           ;CC2500_B1.c: 252: RC0 = 0;
 17373  1F7A  100E               	bcf	14,0	;volatile
 17374                           
 17375                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17376  1F7B  0824               	movf	CC2500_WriteREG@w_addr,w
 17377  1F7C  00A3               	movwf	??_CC2500_WriteREG
 17378  1F7D  0823               	movf	??_CC2500_WriteREG,w
 17379  1F7E  00FB               	movwf	_SPI0Buffer
 17380                           
 17381                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17382  1F7F  2F83               	goto	l6423
 17383  1F80                     l6421:	
 17384                           
 17385                           ;CC2500_B1.c: 255: Timeout_Counter();
 17386  1F80  319D  25FE  319F   	fcall	_Timeout_Counter
 17387  1F83                     l6423:	
 17388  1F83  0020               	movlb	0	; select bank0
 17389  1F84  1E8E               	btfss	14,5	;volatile
 17390  1F85  2F89               	goto	l6427
 17391  1F86  0021               	movlb	1	; select bank1
 17392  1F87  1D2C               	btfss	(_myMain^(0+128)+12),2
 17393  1F88  2F80               	goto	l6421
 17394  1F89                     l6427:	
 17395                           
 17396                           ;CC2500_B1.c: 256: };
 17397                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17398  1F89  319B  23CB  319F   	fcall	_set_TimeoutCleared
 17399                           
 17400                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17401  1F8C  319D  25EA  319F   	fcall	_CC2500_WriteByte
 17402                           
 17403                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17404  1F8F  0020               	movlb	0	; select bank0
 17405  1F90  0822               	movf	CC2500_WriteREG@value,w
 17406  1F91  00A3               	movwf	??_CC2500_WriteREG
 17407  1F92  0823               	movf	??_CC2500_WriteREG,w
 17408  1F93  00FB               	movwf	_SPI0Buffer
 17409                           
 17410                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17411  1F94  319D  25EA         	fcall	_CC2500_WriteByte
 17412                           
 17413                           ;CC2500_B1.c: 262: RC0 = 1;
 17414  1F96  0020               	movlb	0	; select bank0
 17415  1F97  140E               	bsf	14,0	;volatile
 17416  1F98  0008               	return
 17417  1F99                     __end_of_CC2500_WriteREG:	
 17418                           
 17419                           	psect	text118
 17420  1C7A                     __ptext118:	
 17421 ;; *************** function _CC2500_FrequencyCabr *****************
 17422 ;; Defined at:
 17423 ;;		line 201 in file "../src/CC2500_B1.c"
 17424 ;; Parameters:    Size  Location     Type
 17425 ;;		None
 17426 ;; Auto vars:     Size  Location     Type
 17427 ;;		None
 17428 ;; Return value:  Size  Location     Type
 17429 ;;		None               void
 17430 ;; Registers used:
 17431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17432 ;; Tracked objects:
 17433 ;;		On entry : 0/0
 17434 ;;		On exit  : 0/0
 17435 ;;		Unchanged: 0/0
 17436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;Total ram usage:        0 bytes
 17442 ;; Hardware stack levels used:    1
 17443 ;; Hardware stack levels required when called:    7
 17444 ;; This function calls:
 17445 ;;		_CC2500_WriteCommand
 17446 ;;		_DelayTime_1us
 17447 ;; This function is called by:
 17448 ;;		_CC2500_PowerOnInitial
 17449 ;; This function uses a non-reentrant model
 17450 ;;
 17451                           
 17452                           
 17453                           ;psect for function _CC2500_FrequencyCabr
 17454  1C7A                     _CC2500_FrequencyCabr:	
 17455                           
 17456                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17457                           
 17458                           ;incstack = 0
 17459                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17460  1C7A  3033               	movlw	51
 17461  1C7B  319E  266C  319C   	fcall	_CC2500_WriteCommand
 17462                           
 17463                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17464  1C7E  30E8               	movlw	232
 17465  1C7F  0020               	movlb	0	; select bank0
 17466  1C80  00A0               	movwf	DelayTime_1us@count
 17467  1C81  3003               	movlw	3
 17468  1C82  00A1               	movwf	DelayTime_1us@count+1
 17469  1C83  3190  209E         	fcall	_DelayTime_1us
 17470  1C85  0008               	return
 17471  1C86                     __end_of_CC2500_FrequencyCabr:	
 17472                           
 17473                           	psect	text119
 17474  109E                     __ptext119:	
 17475 ;; *************** function _DelayTime_1us *****************
 17476 ;; Defined at:
 17477 ;;		line 320 in file "../src/CC2500_B1.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;  count           2    0[BANK0 ] int 
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;  j               2    4[BANK0 ] unsigned int 
 17482 ;;  i               2    2[BANK0 ] unsigned int 
 17483 ;; Return value:  Size  Location     Type
 17484 ;;		None               void
 17485 ;; Registers used:
 17486 ;;		wreg, status,2
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;Total ram usage:        6 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    5
 17499 ;; This function calls:
 17500 ;;		Nothing
 17501 ;; This function is called by:
 17502 ;;		_CC2500_PowerRST
 17503 ;;		_CC2500_FrequencyCabr
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           
 17508                           ;psect for function _DelayTime_1us
 17509  109E                     _DelayTime_1us:	
 17510                           
 17511                           ;CC2500_B1.c: 321: unsigned int i, j;
 17512                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17513                           
 17514                           ;incstack = 0
 17515                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17516  109E  3001               	movlw	1
 17517  109F  0020               	movlb	0	; select bank0
 17518  10A0  00A2               	movwf	DelayTime_1us@i
 17519  10A1  3000               	movlw	0
 17520  10A2  00A3               	movwf	DelayTime_1us@i+1
 17521  10A3                     l348:	
 17522  10A3  0821               	movf	DelayTime_1us@count+1,w
 17523  10A4  0223               	subwf	DelayTime_1us@i+1,w
 17524  10A5  1D03               	skipz
 17525  10A6  28A9               	goto	u5565
 17526  10A7  0820               	movf	DelayTime_1us@count,w
 17527  10A8  0222               	subwf	DelayTime_1us@i,w
 17528  10A9                     u5565:	
 17529  10A9  1803               	btfsc	3,0
 17530  10AA  0008               	return
 17531                           
 17532                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17533  10AB  01A4               	clrf	DelayTime_1us@j
 17534  10AC  01A5               	clrf	DelayTime_1us@j+1
 17535  10AD  3000               	movlw	0
 17536  10AE  0225               	subwf	DelayTime_1us@j+1,w
 17537  10AF  3002               	movlw	2
 17538  10B0  1903               	skipnz
 17539  10B1  0224               	subwf	DelayTime_1us@j,w
 17540  10B2  1803               	btfsc	3,0
 17541  10B3  28BF               	goto	l6415
 17542  10B4                     l6413:	
 17543  10B4  3001               	movlw	1
 17544  10B5  07A4               	addwf	DelayTime_1us@j,f
 17545  10B6  3000               	movlw	0
 17546  10B7  3DA5               	addwfc	DelayTime_1us@j+1,f
 17547  10B8  3000               	movlw	0
 17548  10B9  0225               	subwf	DelayTime_1us@j+1,w
 17549  10BA  3002               	movlw	2
 17550  10BB  1903               	skipnz
 17551  10BC  0224               	subwf	DelayTime_1us@j,w
 17552  10BD  1C03               	skipc
 17553  10BE  28B4               	goto	l6413
 17554  10BF                     l6415:	
 17555  10BF  3001               	movlw	1
 17556  10C0  07A2               	addwf	DelayTime_1us@i,f
 17557  10C1  3000               	movlw	0
 17558  10C2  3DA3               	addwfc	DelayTime_1us@i+1,f
 17559  10C3  28A3               	goto	l348
 17560  10C4                     __end_of_DelayTime_1us:	
 17561                           
 17562                           	psect	text120
 17563  1BAF                     __ptext120:	
 17564 ;; *************** function _CC2500_ClearTXFIFO *****************
 17565 ;; Defined at:
 17566 ;;		line 187 in file "../src/CC2500_B1.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;		None
 17569 ;; Auto vars:     Size  Location     Type
 17570 ;;		None
 17571 ;; Return value:  Size  Location     Type
 17572 ;;		None               void
 17573 ;; Registers used:
 17574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17575 ;; Tracked objects:
 17576 ;;		On entry : 0/0
 17577 ;;		On exit  : 0/0
 17578 ;;		Unchanged: 0/0
 17579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;Total ram usage:        0 bytes
 17585 ;; Hardware stack levels used:    1
 17586 ;; Hardware stack levels required when called:    7
 17587 ;; This function calls:
 17588 ;;		_CC2500_WriteCommand
 17589 ;; This function is called by:
 17590 ;;		_CC2500_PowerOnInitial
 17591 ;; This function uses a non-reentrant model
 17592 ;;
 17593                           
 17594                           
 17595                           ;psect for function _CC2500_ClearTXFIFO
 17596  1BAF                     _CC2500_ClearTXFIFO:	
 17597                           
 17598                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17599                           
 17600                           ;incstack = 0
 17601                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17602  1BAF  303B               	movlw	59
 17603  1BB0  319E  266C         	fcall	_CC2500_WriteCommand
 17604  1BB2  0008               	return
 17605  1BB3                     __end_of_CC2500_ClearTXFIFO:	
 17606                           
 17607                           	psect	text121
 17608  1BAB                     __ptext121:	
 17609 ;; *************** function _CC2500_ClearRXFIFO *****************
 17610 ;; Defined at:
 17611 ;;		line 194 in file "../src/CC2500_B1.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;		None
 17614 ;; Auto vars:     Size  Location     Type
 17615 ;;		None
 17616 ;; Return value:  Size  Location     Type
 17617 ;;		None               void
 17618 ;; Registers used:
 17619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;Total ram usage:        0 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    7
 17632 ;; This function calls:
 17633 ;;		_CC2500_WriteCommand
 17634 ;; This function is called by:
 17635 ;;		_CC2500_PowerOnInitial
 17636 ;; This function uses a non-reentrant model
 17637 ;;
 17638                           
 17639                           
 17640                           ;psect for function _CC2500_ClearRXFIFO
 17641  1BAB                     _CC2500_ClearRXFIFO:	
 17642                           
 17643                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17644                           
 17645                           ;incstack = 0
 17646                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17647  1BAB  303A               	movlw	58
 17648  1BAC  319E  266C         	fcall	_CC2500_WriteCommand
 17649  1BAE  0008               	return
 17650  1BAF                     __end_of_CC2500_ClearRXFIFO:	
 17651                           
 17652                           	psect	text122
 17653  1E6C                     __ptext122:	
 17654 ;; *************** function _CC2500_WriteCommand *****************
 17655 ;; Defined at:
 17656 ;;		line 285 in file "../src/CC2500_B1.c"
 17657 ;; Parameters:    Size  Location     Type
 17658 ;;  command         1    wreg     unsigned char 
 17659 ;; Auto vars:     Size  Location     Type
 17660 ;;  command         1    3[BANK0 ] unsigned char 
 17661 ;; Return value:  Size  Location     Type
 17662 ;;		None               void
 17663 ;; Registers used:
 17664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17665 ;; Tracked objects:
 17666 ;;		On entry : 0/0
 17667 ;;		On exit  : 0/0
 17668 ;;		Unchanged: 0/0
 17669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;Total ram usage:        2 bytes
 17675 ;; Hardware stack levels used:    1
 17676 ;; Hardware stack levels required when called:    6
 17677 ;; This function calls:
 17678 ;;		_CC2500_WriteByte
 17679 ;;		_Timeout_Counter
 17680 ;;		_set_TimeoutCleared
 17681 ;; This function is called by:
 17682 ;;		_CC2500_TxData
 17683 ;;		_CC2500_ClearTXFIFO
 17684 ;;		_CC2500_ClearRXFIFO
 17685 ;;		_CC2500_FrequencyCabr
 17686 ;;		_CC2500_SIDLEMode
 17687 ;;		_setRF_Main
 17688 ;;		_RF_RxDisable
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           
 17693                           ;psect for function _CC2500_WriteCommand
 17694  1E6C                     _CC2500_WriteCommand:	
 17695                           
 17696                           ;incstack = 0
 17697                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17698                           ;CC2500_WriteCommand@command stored from wreg
 17699  1E6C  0020               	movlb	0	; select bank0
 17700  1E6D  00A3               	movwf	CC2500_WriteCommand@command
 17701                           
 17702                           ;CC2500_B1.c: 286: RC0 = 0;
 17703  1E6E  100E               	bcf	14,0	;volatile
 17704                           
 17705                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17706  1E6F  0823               	movf	CC2500_WriteCommand@command,w
 17707  1E70  00A2               	movwf	??_CC2500_WriteCommand
 17708  1E71  0822               	movf	??_CC2500_WriteCommand,w
 17709  1E72  00FB               	movwf	_SPI0Buffer
 17710                           
 17711                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17712  1E73  2E77               	goto	l6153
 17713  1E74                     l6151:	
 17714                           
 17715                           ;CC2500_B1.c: 290: Timeout_Counter();
 17716  1E74  319D  25FE  319E   	fcall	_Timeout_Counter
 17717  1E77                     l6153:	
 17718  1E77  0020               	movlb	0	; select bank0
 17719  1E78  1E8E               	btfss	14,5	;volatile
 17720  1E79  2E7D               	goto	l6157
 17721  1E7A  0021               	movlb	1	; select bank1
 17722  1E7B  1D2C               	btfss	(_myMain^(0+128)+12),2
 17723  1E7C  2E74               	goto	l6151
 17724  1E7D                     l6157:	
 17725                           
 17726                           ;CC2500_B1.c: 291: };
 17727                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17728  1E7D  319B  23CB  319E   	fcall	_set_TimeoutCleared
 17729                           
 17730                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17731  1E80  319D  25EA         	fcall	_CC2500_WriteByte
 17732                           
 17733                           ;CC2500_B1.c: 295: RC0 = 1;
 17734  1E82  0020               	movlb	0	; select bank0
 17735  1E83  140E               	bsf	14,0	;volatile
 17736  1E84  0008               	return
 17737  1E85                     __end_of_CC2500_WriteCommand:	
 17738                           
 17739                           	psect	text123
 17740  1BCB                     __ptext123:	
 17741 ;; *************** function _set_TimeoutCleared *****************
 17742 ;; Defined at:
 17743 ;;		line 276 in file "../src/Main_B1.c"
 17744 ;; Parameters:    Size  Location     Type
 17745 ;;		None
 17746 ;; Auto vars:     Size  Location     Type
 17747 ;;		None
 17748 ;; Return value:  Size  Location     Type
 17749 ;;		None               void
 17750 ;; Registers used:
 17751 ;;		status,2
 17752 ;; Tracked objects:
 17753 ;;		On entry : 0/0
 17754 ;;		On exit  : 0/0
 17755 ;;		Unchanged: 0/0
 17756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17761 ;;Total ram usage:        0 bytes
 17762 ;; Hardware stack levels used:    1
 17763 ;; Hardware stack levels required when called:    5
 17764 ;; This function calls:
 17765 ;;		Nothing
 17766 ;; This function is called by:
 17767 ;;		_CC2500_TxData
 17768 ;;		_CC2500_RxData
 17769 ;;		_CC2500_PowerRST
 17770 ;;		_CC2500_WriteREG
 17771 ;;		_CC2500_WriteCommand
 17772 ;;		_CC2500_ReadStatus
 17773 ;;		_getAD
 17774 ;;		_TouchPower
 17775 ;;		_CC2500_ReadREG
 17776 ;; This function uses a non-reentrant model
 17777 ;;
 17778                           
 17779                           
 17780                           ;psect for function _set_TimeoutCleared
 17781  1BCB                     _set_TimeoutCleared:	
 17782                           
 17783                           ;Main_B1.c: 277: myMain.Timeout = 0;
 17784                           
 17785                           ;incstack = 0
 17786                           ; Regs used in _set_TimeoutCleared: [status,2]
 17787  1BCB  0021               	movlb	1	; select bank1
 17788  1BCC  112C               	bcf	(_myMain^(0+128)+12),2
 17789                           
 17790                           ;Main_B1.c: 278: myMain.Timeout_Counter = 0;
 17791  1BCD  01AD               	clrf	(_myMain^(0+128)+13)
 17792  1BCE  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17793  1BCF  0008               	return
 17794  1BD0                     __end_of_set_TimeoutCleared:	
 17795                           
 17796                           	psect	text124
 17797  1DFE                     __ptext124:	
 17798 ;; *************** function _Timeout_Counter *****************
 17799 ;; Defined at:
 17800 ;;		line 267 in file "../src/Main_B1.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;		None
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;		None
 17805 ;; Return value:  Size  Location     Type
 17806 ;;		None               void
 17807 ;; Registers used:
 17808 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;Total ram usage:        0 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; Hardware stack levels required when called:    5
 17821 ;; This function calls:
 17822 ;;		Nothing
 17823 ;; This function is called by:
 17824 ;;		_CC2500_TxData
 17825 ;;		_CC2500_RxData
 17826 ;;		_CC2500_PowerRST
 17827 ;;		_CC2500_WriteREG
 17828 ;;		_CC2500_WriteCommand
 17829 ;;		_CC2500_ReadStatus
 17830 ;;		_getAD
 17831 ;;		_TouchPower
 17832 ;;		_CC2500_ReadREG
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           
 17837                           ;psect for function _Timeout_Counter
 17838  1DFE                     _Timeout_Counter:	
 17839                           
 17840                           ;Main_B1.c: 268: myMain.Timeout_Counter++;
 17841                           
 17842                           ;incstack = 0
 17843                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17844  1DFE  3001               	movlw	1
 17845  1DFF  0021               	movlb	1	; select bank1
 17846  1E00  07AD               	addwf	(_myMain^(0+128)+13),f
 17847  1E01  3000               	movlw	0
 17848  1E02  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17849                           
 17850                           ;Main_B1.c: 269: if (myMain.Timeout_Counter == 10000) {
 17851  1E03  300D               	movlw	13
 17852  1E04  3EA0               	addlw	_myMain& (0+255)
 17853  1E05  0086               	movwf	6
 17854  1E06  0187               	clrf	7
 17855  1E07  3F40               	moviw [0]fsr1
 17856  1E08  3A10               	xorlw	16
 17857  1E09  1D03               	skipz
 17858  1E0A  2E0D               	goto	u5025
 17859  1E0B  3F41               	moviw [1]fsr1
 17860  1E0C  3A27               	xorlw	39
 17861  1E0D                     u5025:	
 17862  1E0D  1D03               	skipz
 17863  1E0E  0008               	return
 17864                           
 17865                           ;Main_B1.c: 270: myMain.Timeout_Counter = 0;
 17866  1E0F  01AD               	clrf	(_myMain^(0+128)+13)
 17867  1E10  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17868                           
 17869                           ;Main_B1.c: 271: myMain.Timeout = 1;
 17870  1E11  152C               	bsf	(_myMain^(0+128)+12),2
 17871  1E12  0008               	return
 17872  1E13                     __end_of_Timeout_Counter:	
 17873                           
 17874                           	psect	text125
 17875  1DEA                     __ptext125:	
 17876 ;; *************** function _CC2500_WriteByte *****************
 17877 ;; Defined at:
 17878 ;;		line 219 in file "../src/CC2500_B1.c"
 17879 ;; Parameters:    Size  Location     Type
 17880 ;;		None
 17881 ;; Auto vars:     Size  Location     Type
 17882 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17883 ;; Return value:  Size  Location     Type
 17884 ;;		None               void
 17885 ;; Registers used:
 17886 ;;		wreg, status,2, status,0
 17887 ;; Tracked objects:
 17888 ;;		On entry : 0/0
 17889 ;;		On exit  : 0/0
 17890 ;;		Unchanged: 0/0
 17891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17896 ;;Total ram usage:        2 bytes
 17897 ;; Hardware stack levels used:    1
 17898 ;; Hardware stack levels required when called:    5
 17899 ;; This function calls:
 17900 ;;		Nothing
 17901 ;; This function is called by:
 17902 ;;		_CC2500_TxData
 17903 ;;		_CC2500_RxData
 17904 ;;		_CC2500_PowerRST
 17905 ;;		_CC2500_WriteREG
 17906 ;;		_CC2500_WriteCommand
 17907 ;;		_CC2500_ReadStatus
 17908 ;;		_CC2500_ReadREG
 17909 ;; This function uses a non-reentrant model
 17910 ;;
 17911                           
 17912                           
 17913                           ;psect for function _CC2500_WriteByte
 17914  1DEA                     _CC2500_WriteByte:	
 17915                           
 17916                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17917                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17918                           
 17919                           ;incstack = 0
 17920                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17921  1DEA  0020               	movlb	0	; select bank0
 17922  1DEB  01A1               	clrf	CC2500_WriteByte@loop_a
 17923  1DEC                     L11:	
 17924  1DEC  3008               	movlw	8
 17925  1DED  0221               	subwf	CC2500_WriteByte@loop_a,w
 17926  1DEE  1803               	btfsc	3,0
 17927  1DEF  0008               	return
 17928                           
 17929                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17930  1DF0  1FFB               	btfss	_SPI0Buffer,7
 17931  1DF1  2DF4               	goto	l304
 17932                           
 17933                           ;CC2500_B1.c: 223: RC4 = 1;
 17934  1DF2  160E               	bsf	14,4	;volatile
 17935  1DF3  2DF5               	goto	l305
 17936  1DF4                     l304:	
 17937                           
 17938                           ;CC2500_B1.c: 224: else
 17939                           ;CC2500_B1.c: 225: RC4 = 0;
 17940  1DF4  120E               	bcf	14,4	;volatile
 17941  1DF5                     l305:	
 17942                           
 17943                           ;CC2500_B1.c: 226: RC3 = 1;
 17944  1DF5  158E               	bsf	14,3	;volatile
 17945                           
 17946                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17947  1DF6  1003               	clrc
 17948  1DF7  0DFB               	rlf	_SPI0Buffer,f
 17949                           
 17950                           ;CC2500_B1.c: 228: RC3 = 0;
 17951  1DF8  118E               	bcf	14,3	;volatile
 17952  1DF9  3001               	movlw	1
 17953  1DFA  00A0               	movwf	??_CC2500_WriteByte
 17954  1DFB  0820               	movf	??_CC2500_WriteByte,w
 17955  1DFC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17956  1DFD  2DEC               	goto	L11
 17957  1DFE                     __end_of_CC2500_WriteByte:	
 17958                           
 17959                           	psect	text126
 17960  14BC                     __ptext126:	
 17961 ;; *************** function _Buzzer_Main *****************
 17962 ;; Defined at:
 17963 ;;		line 46 in file "../src/Buzzer_B1.c"
 17964 ;; Parameters:    Size  Location     Type
 17965 ;;		None
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;		None
 17968 ;; Return value:  Size  Location     Type
 17969 ;;		None               void
 17970 ;; Registers used:
 17971 ;;		wreg, status,2, status,0
 17972 ;; Tracked objects:
 17973 ;;		On entry : 0/0
 17974 ;;		On exit  : 0/0
 17975 ;;		Unchanged: 0/0
 17976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17981 ;;Total ram usage:        1 bytes
 17982 ;; Hardware stack levels used:    1
 17983 ;; Hardware stack levels required when called:    5
 17984 ;; This function calls:
 17985 ;;		Nothing
 17986 ;; This function is called by:
 17987 ;;		_main
 17988 ;; This function uses a non-reentrant model
 17989 ;;
 17990                           
 17991                           
 17992                           ;psect for function _Buzzer_Main
 17993  14BC                     _Buzzer_Main:	
 17994                           
 17995                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17996                           
 17997                           ;incstack = 0
 17998                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17999  14BC  0021               	movlb	1	; select bank1
 18000  14BD  1CAF               	btfss	_Buz1^(0+128),1
 18001  14BE  0008               	return
 18002                           
 18003                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18004  14BF  3001               	movlw	1
 18005  14C0  07B0               	addwf	(_Buz1^(0+128)+1),f
 18006  14C1  3000               	movlw	0
 18007  14C2  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 18008                           
 18009                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18010  14C3  0836               	movf	((_Buz1+1)^(0+128)+6),w
 18011  14C4  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 18012  14C5  1D03               	skipz
 18013  14C6  2CC9               	goto	u7205
 18014  14C7  0835               	movf	(_Buz1^(0+128)+6),w
 18015  14C8  0230               	subwf	(_Buz1^(0+128)+1),w
 18016  14C9                     u7205:	
 18017  14C9  1C03               	skipc
 18018  14CA  0008               	return
 18019                           
 18020                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18021  14CB  01B0               	clrf	(_Buz1^(0+128)+1)
 18022  14CC  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 18023                           
 18024                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18025  14CD  12AF               	bcf	_Buz1^(0+128),5
 18026  14CE  0020               	movlb	0	; select bank0
 18027  14CF  1D8D               	btfss	13,3	;volatile
 18028  14D0  2CD3               	goto	l7421
 18029  14D1  0021               	movlb	1	; select bank1
 18030  14D2  16AF               	bsf	_Buz1^(0+128),5
 18031  14D3                     l7421:	
 18032                           
 18033                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18034  14D3  0021               	movlb	1	; select bank1
 18035  14D4  1AAF               	btfsc	_Buz1^(0+128),5
 18036  14D5  2CFF               	goto	l94
 18037                           
 18038                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18039  14D6  08B2               	movf	(_Buz1^(0+128)+3),f
 18040  14D7  1D03               	skipz
 18041  14D8  2CFB               	goto	l95
 18042                           
 18043                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18044  14D9  1DAF               	btfss	_Buz1^(0+128),3
 18045  14DA  2CE9               	goto	l96
 18046                           
 18047                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18048  14DB  11AF               	bcf	_Buz1^(0+128),3
 18049                           
 18050                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18051  14DC  0833               	movf	(_Buz1^(0+128)+4),w
 18052  14DD  0020               	movlb	0	; select bank0
 18053  14DE  00A0               	movwf	??_Buzzer_Main
 18054  14DF  0820               	movf	??_Buzzer_Main,w
 18055  14E0  0021               	movlb	1	; select bank1
 18056  14E1  00B2               	movwf	(_Buz1^(0+128)+3)
 18057                           
 18058                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18059  14E2  0838               	movf	((_Buz1+1)^(0+128)+8),w
 18060  14E3  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18061  14E4  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18062  14E5  0837               	movf	(_Buz1^(0+128)+8),w
 18063  14E6  01B5               	clrf	(_Buz1^(0+128)+6)
 18064  14E7  07B5               	addwf	(_Buz1^(0+128)+6),f
 18065                           
 18066                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18067  14E8  0008               	return
 18068  14E9                     l96:	
 18069  14E9  1E2F               	btfss	_Buz1^(0+128),4
 18070  14EA  2CF9               	goto	l98
 18071                           
 18072                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18073  14EB  122F               	bcf	_Buz1^(0+128),4
 18074                           
 18075                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18076  14EC  0834               	movf	(_Buz1^(0+128)+5),w
 18077  14ED  0020               	movlb	0	; select bank0
 18078  14EE  00A0               	movwf	??_Buzzer_Main
 18079  14EF  0820               	movf	??_Buzzer_Main,w
 18080  14F0  0021               	movlb	1	; select bank1
 18081  14F1  00B2               	movwf	(_Buz1^(0+128)+3)
 18082                           
 18083                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18084  14F2  083A               	movf	((_Buz1+1)^(0+128)+10),w
 18085  14F3  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18086  14F4  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18087  14F5  0839               	movf	(_Buz1^(0+128)+10),w
 18088  14F6  01B5               	clrf	(_Buz1^(0+128)+6)
 18089  14F7  07B5               	addwf	(_Buz1^(0+128)+6),f
 18090                           
 18091                           ;Buzzer_B1.c: 62: } else {
 18092  14F8  0008               	return
 18093  14F9                     l98:	
 18094                           
 18095                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18096  14F9  10AF               	bcf	_Buz1^(0+128),1
 18097                           
 18098                           ;Buzzer_B1.c: 64: }
 18099                           ;Buzzer_B1.c: 65: } else {
 18100  14FA  0008               	return
 18101  14FB                     l95:	
 18102                           
 18103                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18104  14FB  16AF               	bsf	_Buz1^(0+128),5
 18105                           
 18106                           ;Buzzer_B1.c: 68: RB3 = 1;
 18107  14FC  0020               	movlb	0	; select bank0
 18108  14FD  158D               	bsf	13,3	;volatile
 18109                           
 18110                           ;Buzzer_B1.c: 69: }
 18111                           ;Buzzer_B1.c: 70: } else {
 18112  14FE  0008               	return
 18113  14FF                     l94:	
 18114                           
 18115                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18116  14FF  12AF               	bcf	_Buz1^(0+128),5
 18117                           
 18118                           ;Buzzer_B1.c: 73: RB3 = 0;
 18119  1500  0020               	movlb	0	; select bank0
 18120  1501  118D               	bcf	13,3	;volatile
 18121                           
 18122                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18123  1502  3001               	movlw	1
 18124  1503  0021               	movlb	1	; select bank1
 18125  1504  02B2               	subwf	(_Buz1^(0+128)+3),f
 18126  1505  0008               	return
 18127  1506                     __end_of_Buzzer_Main:	
 18128                           
 18129                           	psect	text127
 18130  1B98                     __ptext127:	
 18131 ;; *************** function _Buzzer_Initialization *****************
 18132 ;; Defined at:
 18133 ;;		line 11 in file "../src/Buzzer_B1.c"
 18134 ;; Parameters:    Size  Location     Type
 18135 ;;		None
 18136 ;; Auto vars:     Size  Location     Type
 18137 ;;		None
 18138 ;; Return value:  Size  Location     Type
 18139 ;;		None               void
 18140 ;; Registers used:
 18141 ;;		None
 18142 ;; Tracked objects:
 18143 ;;		On entry : 0/0
 18144 ;;		On exit  : 0/0
 18145 ;;		Unchanged: 0/0
 18146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18151 ;;Total ram usage:        0 bytes
 18152 ;; Hardware stack levels used:    1
 18153 ;; Hardware stack levels required when called:    5
 18154 ;; This function calls:
 18155 ;;		Nothing
 18156 ;; This function is called by:
 18157 ;;		_main
 18158 ;; This function uses a non-reentrant model
 18159 ;;
 18160                           
 18161                           
 18162                           ;psect for function _Buzzer_Initialization
 18163  1B98                     _Buzzer_Initialization:	
 18164                           
 18165                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18166                           
 18167                           ;incstack = 0
 18168                           ; Regs used in _Buzzer_Initialization: []
 18169  1B98  0021               	movlb	1	; select bank1
 18170  1B99  142F               	bsf	_Buz1^(0+128),0
 18171  1B9A  0008               	return
 18172  1B9B                     __end_of_Buzzer_Initialization:	
 18173                           
 18174                           	psect	intentry
 18175  0004                     __pintentry:	
 18176 ;; *************** function _ISR *****************
 18177 ;; Defined at:
 18178 ;;		line 107 in file "../src/MCU_B1.c"
 18179 ;; Parameters:    Size  Location     Type
 18180 ;;		None
 18181 ;; Auto vars:     Size  Location     Type
 18182 ;;		None
 18183 ;; Return value:  Size  Location     Type
 18184 ;;		None               void
 18185 ;; Registers used:
 18186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18187 ;; Tracked objects:
 18188 ;;		On entry : 0/0
 18189 ;;		On exit  : 0/0
 18190 ;;		Unchanged: 0/0
 18191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18196 ;;Total ram usage:        1 bytes
 18197 ;; Hardware stack levels used:    1
 18198 ;; Hardware stack levels required when called:    4
 18199 ;; This function calls:
 18200 ;;		_IOC_ISR
 18201 ;;		_TMR1_ISR
 18202 ;; This function is called by:
 18203 ;;		Interrupt level 1
 18204 ;; This function uses a non-reentrant model
 18205 ;;
 18206                           
 18207  0004                     _ISR:	
 18208                           
 18209                           ;incstack = 0
 18210                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18211  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18212  0005  3180               	pagesel	$
 18213  0006  0020               	movlb	0	; select bank0
 18214  0007  087F               	movf	127,w
 18215  0008  00F7               	movwf	??_ISR
 18216                           
 18217                           ;MCU_B1.c: 109: IOC_ISR();
 18218  0009  319C  24DD  3180   	fcall	_IOC_ISR
 18219                           
 18220                           ;MCU_B1.c: 111: ;;
 18221                           ;MCU_B1.c: 113: TMR1_ISR();
 18222  000C  3190  207A         	fcall	_TMR1_ISR
 18223  000E  0877               	movf	??_ISR,w
 18224  000F  0020               	movlb	0	; select bank0
 18225  0010  00FF               	movwf	127
 18226  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18227  0012  0009               	retfie
 18228  0013                     __end_of_ISR:	
 18229                           
 18230                           	psect	text129
 18231  107A                     __ptext129:	
 18232 ;; *************** function _TMR1_ISR *****************
 18233 ;; Defined at:
 18234 ;;		line 209 in file "../src/MCU_B1.c"
 18235 ;; Parameters:    Size  Location     Type
 18236 ;;		None
 18237 ;; Auto vars:     Size  Location     Type
 18238 ;;		None
 18239 ;; Return value:  Size  Location     Type
 18240 ;;		None               void
 18241 ;; Registers used:
 18242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18243 ;; Tracked objects:
 18244 ;;		On entry : 0/0
 18245 ;;		On exit  : 0/0
 18246 ;;		Unchanged: 0/0
 18247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18252 ;;Total ram usage:        0 bytes
 18253 ;; Hardware stack levels used:    1
 18254 ;; Hardware stack levels required when called:    2
 18255 ;; This function calls:
 18256 ;;		_setDimmerLights_IntrControl
 18257 ;; This function is called by:
 18258 ;;		_ISR
 18259 ;; This function uses a non-reentrant model
 18260 ;;
 18261                           
 18262                           
 18263                           ;psect for function _TMR1_ISR
 18264  107A                     _TMR1_ISR:	
 18265                           
 18266                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18267                           
 18268                           ;incstack = 0
 18269                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18270  107A  0021               	movlb	1	; select bank1
 18271  107B  1C11               	btfss	17,0	;volatile
 18272  107C  0008               	return
 18273  107D  0020               	movlb	0	; select bank0
 18274  107E  1C11               	btfss	17,0	;volatile
 18275  107F  0008               	return
 18276                           
 18277                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18278  1080  30FA               	movlw	250
 18279  1081  0097               	movwf	23	;volatile
 18280                           
 18281                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18282  1082  3038               	movlw	56
 18283  1083  0096               	movwf	22	;volatile
 18284                           
 18285                           ;MCU_B1.c: 214: TMR1IF = 0;
 18286  1084  1011               	bcf	17,0	;volatile
 18287                           
 18288                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18289  1085  3001               	movlw	1
 18290  1086  3183  232F  3190   	fcall	_setDimmerLights_IntrControl
 18291                           
 18292                           ;MCU_B1.c: 234: Timer1.Count++;
 18293  1089  3001               	movlw	1
 18294  108A  0021               	movlb	1	; select bank1
 18295  108B  07C8               	addwf	(_Timer1^(0+128)+1),f
 18296  108C  3000               	movlw	0
 18297  108D  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18298                           
 18299                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18300  108E  3001               	movlw	1
 18301  108F  3EC7               	addlw	_Timer1& (0+255)
 18302  1090  0086               	movwf	6
 18303  1091  0187               	clrf	7
 18304  1092  3F40               	moviw [0]fsr1
 18305  1093  3A64               	xorlw	100
 18306  1094  1D03               	skipz
 18307  1095  2898               	goto	u736_25
 18308  1096  3F41               	moviw [1]fsr1
 18309  1097  3A00               	xorlw	0
 18310  1098                     u736_25:	
 18311  1098  1D03               	skipz
 18312  1099  0008               	return
 18313                           
 18314                           ;MCU_B1.c: 236: {
 18315                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18316  109A  01C8               	clrf	(_Timer1^(0+128)+1)
 18317  109B  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18318                           
 18319                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18320  109C  1447               	bsf	_Timer1^(0+128),0
 18321  109D  0008               	return
 18322  109E                     __end_of_TMR1_ISR:	
 18323                           
 18324                           	psect	text130
 18325  032F                     __ptext130:	
 18326 ;; *************** function _setDimmerLights_IntrControl *****************
 18327 ;; Defined at:
 18328 ;;		line 94 in file "../src/Dimmer_B1.c"
 18329 ;; Parameters:    Size  Location     Type
 18330 ;;  lights          1    wreg     unsigned char 
 18331 ;; Auto vars:     Size  Location     Type
 18332 ;;  lights          1    6[COMMON] unsigned char 
 18333 ;; Return value:  Size  Location     Type
 18334 ;;		None               void
 18335 ;; Registers used:
 18336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18337 ;; Tracked objects:
 18338 ;;		On entry : 0/0
 18339 ;;		On exit  : 0/0
 18340 ;;		Unchanged: 0/0
 18341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18344 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18346 ;;Total ram usage:        5 bytes
 18347 ;; Hardware stack levels used:    1
 18348 ;; Hardware stack levels required when called:    1
 18349 ;; This function calls:
 18350 ;;		_DimmerIntrPointSelect
 18351 ;; This function is called by:
 18352 ;;		_TMR1_ISR
 18353 ;; This function uses a non-reentrant model
 18354 ;;
 18355                           
 18356                           
 18357                           ;psect for function _setDimmerLights_IntrControl
 18358  032F                     _setDimmerLights_IntrControl:	
 18359                           
 18360                           ;incstack = 0
 18361                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18362                           ;setDimmerLights_IntrControl@lights stored from wreg
 18363  032F  00F6               	movwf	setDimmerLights_IntrControl@lights
 18364                           
 18365                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18366  0330  0876               	movf	setDimmerLights_IntrControl@lights,w
 18367  0331  319C  2419  3183   	fcall	_DimmerIntrPointSelect
 18368                           
 18369                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18370  0334  0879               	movf	_DimmerLightsIntr,w
 18371  0335  0086               	movwf	6
 18372  0336  3001               	movlw	1	; select bank2/3
 18373  0337  0087               	movwf	7
 18374  0338  1C01               	btfss	1,0
 18375  0339  2B8B               	goto	i1l6857
 18376                           
 18377                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18378  033A  3001               	movlw	1
 18379  033B  00F2               	movwf	??_setDimmerLights_IntrControl
 18380  033C  0879               	movf	_DimmerLightsIntr,w
 18381  033D  3E03               	addlw	3
 18382  033E  0086               	movwf	6
 18383  033F  3001               	movlw	1	; select bank2/3
 18384  0340  0087               	movwf	7
 18385  0341  0872               	movf	??_setDimmerLights_IntrControl,w
 18386  0342  0781               	addwf	1,f
 18387                           
 18388                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18389                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18390  0343  0022               	movlb	2	; select bank2
 18391  0344  0822               	movf	(_Dimmer^(0+256)+2),w
 18392  0345  00F2               	movwf	??_setDimmerLights_IntrControl
 18393  0346  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18394  0347  09F2               	comf	??_setDimmerLights_IntrControl,f
 18395  0348  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18396  0349  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18397  034A  1903               	skipnz
 18398  034B  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18399  034C  0879               	movf	_DimmerLightsIntr,w
 18400  034D  3E04               	addlw	4
 18401  034E  0086               	movwf	6
 18402  034F  3001               	movlw	1	; select bank2/3
 18403  0350  0087               	movwf	7
 18404  0351  0801               	movf	1,w
 18405  0352  0772               	addwf	??_setDimmerLights_IntrControl,w
 18406  0353  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18407  0354  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18408  0355  1803               	skipnc
 18409  0356  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18410  0357  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18411  0358  0879               	movf	_DimmerLightsIntr,w
 18412  0359  3E03               	addlw	3
 18413  035A  0086               	movwf	6
 18414  035B  3001               	movlw	1	; select bank2/3
 18415  035C  0087               	movwf	7
 18416  035D  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18417  035E  3A80               	xorlw	128
 18418  035F  3C80               	sublw	128
 18419  0360  1D03               	skipz
 18420  0361  2B64               	goto	u618_25
 18421  0362  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18422  0363  0201               	subwf	1,w
 18423  0364                     u618_25:	
 18424  0364  1C03               	skipc
 18425  0365  0008               	return
 18426                           
 18427                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18428  0366  0879               	movf	_DimmerLightsIntr,w
 18429  0367  3E03               	addlw	3
 18430  0368  0086               	movwf	6
 18431  0369  3001               	movlw	1	; select bank2/3
 18432  036A  0087               	movwf	7
 18433  036B  0181               	clrf	1
 18434                           
 18435                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18436  036C  0879               	movf	_DimmerLightsIntr,w
 18437  036D  0086               	movwf	6
 18438  036E  3001               	movlw	1	; select bank2/3
 18439  036F  0087               	movwf	7
 18440  0370  1001               	bcf	1,0
 18441                           
 18442                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18443  0371  0879               	movf	_DimmerLightsIntr,w
 18444  0372  3E08               	addlw	8
 18445  0373  0086               	movwf	6
 18446  0374  3001               	movlw	1	; select bank2/3
 18447  0375  0087               	movwf	7
 18448  0376  1401               	bsf	1,0
 18449                           
 18450                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18451  0377  0879               	movf	_DimmerLightsIntr,w
 18452  0378  3E09               	addlw	9
 18453  0379  0086               	movwf	6
 18454  037A  3001               	movlw	1	; select bank2/3
 18455  037B  0087               	movwf	7
 18456  037C  1E01               	btfss	1,4
 18457  037D  0008               	return
 18458                           
 18459                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18460  037E  0879               	movf	_DimmerLightsIntr,w
 18461  037F  3E09               	addlw	9
 18462  0380  0086               	movwf	6
 18463  0381  3001               	movlw	1	; select bank2/3
 18464  0382  0087               	movwf	7
 18465  0383  1201               	bcf	1,4
 18466                           
 18467                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18468  0384  0876               	movf	setDimmerLights_IntrControl@lights,w
 18469  0385  3A01               	xorlw	1
 18470  0386  1D03               	skipz
 18471  0387  0008               	return
 18472                           
 18473                           ;Dimmer_B1.c: 244: RB1 = 0;
 18474  0388  0020               	movlb	0	; select bank0
 18475  0389  108D               	bcf	13,1	;volatile
 18476                           
 18477                           ;Dimmer_B1.c: 246: }
 18478                           ;Dimmer_B1.c: 253: }
 18479                           ;Dimmer_B1.c: 254: }
 18480                           ;Dimmer_B1.c: 255: } else {
 18481  038A  0008               	return
 18482  038B                     i1l6857:	
 18483                           
 18484                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18485  038B  0879               	movf	_DimmerLightsIntr,w
 18486  038C  3E08               	addlw	8
 18487  038D  0086               	movwf	6
 18488  038E  3001               	movlw	1	; select bank2/3
 18489  038F  0087               	movwf	7
 18490  0390  1C01               	btfss	1,0
 18491  0391  2C4F               	goto	i1l678
 18492                           
 18493                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18494  0392  0879               	movf	_DimmerLightsIntr,w
 18495  0393  3E08               	addlw	8
 18496  0394  0086               	movwf	6
 18497  0395  3001               	movlw	1	; select bank2/3
 18498  0396  0087               	movwf	7
 18499  0397  1001               	bcf	1,0
 18500                           
 18501                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18502  0398  0879               	movf	_DimmerLightsIntr,w
 18503  0399  0086               	movwf	6
 18504  039A  3001               	movlw	1	; select bank2/3
 18505  039B  0087               	movwf	7
 18506  039C  1C81               	btfss	1,1
 18507  039D  2C4F               	goto	i1l678
 18508                           
 18509                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18510  039E  3001               	movlw	1
 18511  039F  00F2               	movwf	??_setDimmerLights_IntrControl
 18512  03A0  0A79               	incf	_DimmerLightsIntr,w
 18513  03A1  0086               	movwf	6
 18514  03A2  3001               	movlw	1	; select bank2/3
 18515  03A3  0087               	movwf	7
 18516  03A4  0872               	movf	??_setDimmerLights_IntrControl,w
 18517  03A5  0781               	addwf	1,f
 18518                           
 18519                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18520  03A6  0A79               	incf	_DimmerLightsIntr,w
 18521  03A7  0086               	movwf	6
 18522  03A8  3001               	movlw	1	; select bank2/3
 18523  03A9  0087               	movwf	7
 18524  03AA  0879               	movf	_DimmerLightsIntr,w
 18525  03AB  3E02               	addlw	2
 18526  03AC  0084               	movwf	4
 18527  03AD  3001               	movlw	1	; select bank2/3
 18528  03AE  0085               	movwf	5
 18529  03AF  0800               	movf	0,w
 18530  03B0  0201               	subwf	1,w
 18531  03B1  1C03               	skipc
 18532  03B2  2C4F               	goto	i1l678
 18533                           
 18534                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18535  03B3  0A79               	incf	_DimmerLightsIntr,w
 18536  03B4  0086               	movwf	6
 18537  03B5  3001               	movlw	1	; select bank2/3
 18538  03B6  0087               	movwf	7
 18539  03B7  0181               	clrf	1
 18540                           
 18541                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18542  03B8  0879               	movf	_DimmerLightsIntr,w
 18543  03B9  0086               	movwf	6
 18544  03BA  3001               	movlw	1	; select bank2/3
 18545  03BB  0087               	movwf	7
 18546  03BC  1D81               	btfss	1,3
 18547  03BD  2C04               	goto	i1l6887
 18548                           
 18549                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18550  03BE  0879               	movf	_DimmerLightsIntr,w
 18551  03BF  0086               	movwf	6
 18552  03C0  3001               	movlw	1	; select bank2/3
 18553  03C1  0087               	movwf	7
 18554  03C2  1A01               	btfsc	1,4
 18555  03C3  2BE5               	goto	i1l6879
 18556                           
 18557                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(85*0.8))) {
 18558  03C4  0879               	movf	_DimmerLightsIntr,w
 18559  03C5  3E04               	addlw	4
 18560  03C6  0086               	movwf	6
 18561  03C7  3001               	movlw	1	; select bank2/3
 18562  03C8  0087               	movwf	7
 18563  03C9  3044               	movlw	68
 18564  03CA  0201               	subwf	1,w
 18565  03CB  1803               	skipnc
 18566  03CC  2BD6               	goto	i1l6875
 18567                           
 18568                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18569  03CD  3001               	movlw	1
 18570  03CE  00F2               	movwf	??_setDimmerLights_IntrControl
 18571  03CF  0879               	movf	_DimmerLightsIntr,w
 18572  03D0  3E04               	addlw	4
 18573  03D1  0086               	movwf	6
 18574  03D2  3001               	movlw	1	; select bank2/3
 18575  03D3  0087               	movwf	7
 18576  03D4  0872               	movf	??_setDimmerLights_IntrControl,w
 18577  03D5  0781               	addwf	1,f
 18578  03D6                     i1l6875:	
 18579                           
 18580                           ;Dimmer_B1.c: 266: }
 18581                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(85*0.8))) {
 18582  03D6  0879               	movf	_DimmerLightsIntr,w
 18583  03D7  3E04               	addlw	4
 18584  03D8  0086               	movwf	6
 18585  03D9  3001               	movlw	1	; select bank2/3
 18586  03DA  0087               	movwf	7
 18587  03DB  0801               	movf	1,w
 18588  03DC  3A44               	xorlw	68
 18589  03DD  1D03               	skipz
 18590  03DE  2C4F               	goto	i1l678
 18591                           
 18592                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18593  03DF  0879               	movf	_DimmerLightsIntr,w
 18594  03E0  0086               	movwf	6
 18595  03E1  3001               	movlw	1	; select bank2/3
 18596  03E2  0087               	movwf	7
 18597  03E3  1601               	bsf	1,4
 18598                           
 18599                           ;Dimmer_B1.c: 269: }
 18600                           ;Dimmer_B1.c: 270: } else {
 18601  03E4  2C4F               	goto	i1l678
 18602  03E5                     i1l6879:	
 18603                           
 18604                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18605  03E5  0879               	movf	_DimmerLightsIntr,w
 18606  03E6  3E04               	addlw	4
 18607  03E7  0086               	movwf	6
 18608  03E8  3001               	movlw	1	; select bank2/3
 18609  03E9  0087               	movwf	7
 18610  03EA  300D               	movlw	13
 18611  03EB  0201               	subwf	1,w
 18612  03EC  1C03               	skipc
 18613  03ED  2BF5               	goto	i1l6883
 18614                           
 18615                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18616  03EE  0879               	movf	_DimmerLightsIntr,w
 18617  03EF  3E04               	addlw	4
 18618  03F0  0086               	movwf	6
 18619  03F1  3001               	movlw	1	; select bank2/3
 18620  03F2  0087               	movwf	7
 18621  03F3  3001               	movlw	1
 18622  03F4  0281               	subwf	1,f
 18623  03F5                     i1l6883:	
 18624                           
 18625                           ;Dimmer_B1.c: 273: }
 18626                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18627  03F5  0879               	movf	_DimmerLightsIntr,w
 18628  03F6  3E04               	addlw	4
 18629  03F7  0086               	movwf	6
 18630  03F8  3001               	movlw	1	; select bank2/3
 18631  03F9  0087               	movwf	7
 18632  03FA  0801               	movf	1,w
 18633  03FB  3A0C               	xorlw	12
 18634  03FC  1D03               	skipz
 18635  03FD  2C4F               	goto	i1l678
 18636                           
 18637                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18638  03FE  0879               	movf	_DimmerLightsIntr,w
 18639  03FF  0086               	movwf	6
 18640  0400  3001               	movlw	1	; select bank2/3
 18641  0401  0087               	movwf	7
 18642  0402  1201               	bcf	1,4
 18643                           
 18644                           ;Dimmer_B1.c: 276: }
 18645                           ;Dimmer_B1.c: 277: }
 18646                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18647  0403  2C4F               	goto	i1l678
 18648  0404                     i1l6887:	
 18649  0404  0879               	movf	_DimmerLightsIntr,w
 18650  0405  0086               	movwf	6
 18651  0406  3001               	movlw	1	; select bank2/3
 18652  0407  0087               	movwf	7
 18653  0408  1D01               	btfss	1,2
 18654  0409  2C4F               	goto	i1l678
 18655                           
 18656                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18657  040A  0879               	movf	_DimmerLightsIntr,w
 18658  040B  3E04               	addlw	4
 18659  040C  0086               	movwf	6
 18660  040D  3001               	movlw	1	; select bank2/3
 18661  040E  0087               	movwf	7
 18662  040F  0879               	movf	_DimmerLightsIntr,w
 18663  0410  3E05               	addlw	5
 18664  0411  0084               	movwf	4
 18665  0412  3001               	movlw	1	; select bank2/3
 18666  0413  0085               	movwf	5
 18667  0414  0800               	movf	0,w
 18668  0415  0201               	subwf	1,w
 18669  0416  1803               	skipnc
 18670  0417  2C22               	goto	i1l6893
 18671                           
 18672                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18673  0418  3001               	movlw	1
 18674  0419  00F2               	movwf	??_setDimmerLights_IntrControl
 18675  041A  0879               	movf	_DimmerLightsIntr,w
 18676  041B  3E04               	addlw	4
 18677  041C  0086               	movwf	6
 18678  041D  3001               	movlw	1	; select bank2/3
 18679  041E  0087               	movwf	7
 18680  041F  0872               	movf	??_setDimmerLights_IntrControl,w
 18681  0420  0781               	addwf	1,f
 18682                           
 18683                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18684  0421  2C37               	goto	i1l6897
 18685  0422                     i1l6893:	
 18686  0422  0879               	movf	_DimmerLightsIntr,w
 18687  0423  3E05               	addlw	5
 18688  0424  0086               	movwf	6
 18689  0425  3001               	movlw	1	; select bank2/3
 18690  0426  0087               	movwf	7
 18691  0427  0879               	movf	_DimmerLightsIntr,w
 18692  0428  3E04               	addlw	4
 18693  0429  0084               	movwf	4
 18694  042A  3001               	movlw	1	; select bank2/3
 18695  042B  0085               	movwf	5
 18696  042C  0800               	movf	0,w
 18697  042D  0201               	subwf	1,w
 18698  042E  1803               	skipnc
 18699  042F  2C37               	goto	i1l6897
 18700                           
 18701                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18702  0430  0879               	movf	_DimmerLightsIntr,w
 18703  0431  3E04               	addlw	4
 18704  0432  0086               	movwf	6
 18705  0433  3001               	movlw	1	; select bank2/3
 18706  0434  0087               	movwf	7
 18707  0435  3001               	movlw	1
 18708  0436  0281               	subwf	1,f
 18709  0437                     i1l6897:	
 18710                           
 18711                           ;Dimmer_B1.c: 283: }
 18712                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18713  0437  0879               	movf	_DimmerLightsIntr,w
 18714  0438  3E05               	addlw	5
 18715  0439  0086               	movwf	6
 18716  043A  3001               	movlw	1	; select bank2/3
 18717  043B  0087               	movwf	7
 18718  043C  0879               	movf	_DimmerLightsIntr,w
 18719  043D  3E04               	addlw	4
 18720  043E  0084               	movwf	4
 18721  043F  3001               	movlw	1	; select bank2/3
 18722  0440  0085               	movwf	5
 18723  0441  0800               	movf	0,w
 18724  0442  0601               	xorwf	1,w
 18725  0443  1D03               	skipz
 18726  0444  2C4F               	goto	i1l678
 18727                           
 18728                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18729  0445  0879               	movf	_DimmerLightsIntr,w
 18730  0446  0086               	movwf	6
 18731  0447  3001               	movlw	1	; select bank2/3
 18732  0448  0087               	movwf	7
 18733  0449  1101               	bcf	1,2
 18734                           
 18735                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18736  044A  0879               	movf	_DimmerLightsIntr,w
 18737  044B  0086               	movwf	6
 18738  044C  3001               	movlw	1	; select bank2/3
 18739  044D  0087               	movwf	7
 18740  044E  1081               	bcf	1,1
 18741  044F                     i1l678:	
 18742                           
 18743                           ;Dimmer_B1.c: 287: }
 18744                           ;Dimmer_B1.c: 288: }
 18745                           ;Dimmer_B1.c: 289: }
 18746                           ;Dimmer_B1.c: 290: }
 18747                           ;Dimmer_B1.c: 291: }
 18748                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18749  044F  0879               	movf	_DimmerLightsIntr,w
 18750  0450  3E09               	addlw	9
 18751  0451  0086               	movwf	6
 18752  0452  3001               	movlw	1	; select bank2/3
 18753  0453  0087               	movwf	7
 18754  0454  1D81               	btfss	1,3
 18755  0455  0008               	return
 18756                           
 18757                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18758  0456  3001               	movlw	1
 18759  0457  00F2               	movwf	??_setDimmerLights_IntrControl
 18760  0458  0879               	movf	_DimmerLightsIntr,w
 18761  0459  3E0C               	addlw	12
 18762  045A  0086               	movwf	6
 18763  045B  3001               	movlw	1	; select bank2/3
 18764  045C  0087               	movwf	7
 18765  045D  0872               	movf	??_setDimmerLights_IntrControl,w
 18766  045E  0781               	addwf	1,f
 18767                           
 18768                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18769  045F  0879               	movf	_DimmerLightsIntr,w
 18770  0460  3E0C               	addlw	12
 18771  0461  0086               	movwf	6
 18772  0462  3001               	movlw	1	; select bank2/3
 18773  0463  0087               	movwf	7
 18774  0464  0801               	movf	1,w
 18775  0465  3A05               	xorlw	5
 18776  0466  1D03               	skipz
 18777  0467  0008               	return
 18778                           
 18779                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18780  0468  0879               	movf	_DimmerLightsIntr,w
 18781  0469  3E0C               	addlw	12
 18782  046A  0086               	movwf	6
 18783  046B  3001               	movlw	1	; select bank2/3
 18784  046C  0087               	movwf	7
 18785  046D  0181               	clrf	1
 18786                           
 18787                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18788  046E  0879               	movf	_DimmerLightsIntr,w
 18789  046F  3E09               	addlw	9
 18790  0470  0086               	movwf	6
 18791  0471  3001               	movlw	1	; select bank2/3
 18792  0472  0087               	movwf	7
 18793  0473  1181               	bcf	1,3
 18794  0474  0008               	return
 18795  0475                     __end_of_setDimmerLights_IntrControl:	
 18796                           
 18797                           	psect	text131
 18798  1C19                     __ptext131:	
 18799 ;; *************** function _DimmerIntrPointSelect *****************
 18800 ;; Defined at:
 18801 ;;		line 72 in file "../src/Dimmer_B1.c"
 18802 ;; Parameters:    Size  Location     Type
 18803 ;;  lights          1    wreg     unsigned char 
 18804 ;; Auto vars:     Size  Location     Type
 18805 ;;  lights          1    1[COMMON] unsigned char 
 18806 ;; Return value:  Size  Location     Type
 18807 ;;		None               void
 18808 ;; Registers used:
 18809 ;;		wreg
 18810 ;; Tracked objects:
 18811 ;;		On entry : 0/0
 18812 ;;		On exit  : 0/0
 18813 ;;		Unchanged: 0/0
 18814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;Total ram usage:        2 bytes
 18820 ;; Hardware stack levels used:    1
 18821 ;; This function calls:
 18822 ;;		Nothing
 18823 ;; This function is called by:
 18824 ;;		_setDimmerLights_IntrControl
 18825 ;; This function uses a non-reentrant model
 18826 ;;
 18827                           
 18828                           
 18829                           ;psect for function _DimmerIntrPointSelect
 18830  1C19                     _DimmerIntrPointSelect:	
 18831                           
 18832                           ;incstack = 0
 18833                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18834                           ;DimmerIntrPointSelect@lights stored from wreg
 18835  1C19  00F1               	movwf	DimmerIntrPointSelect@lights
 18836                           
 18837                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18838  1C1A  0871               	movf	DimmerIntrPointSelect@lights,w
 18839  1C1B  3A01               	xorlw	1
 18840  1C1C  1D03               	skipz
 18841  1C1D  0008               	return
 18842                           
 18843                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18844  1C1E  3053               	movlw	_DimmerLights1& (0+255)
 18845  1C1F  00F0               	movwf	??_DimmerIntrPointSelect
 18846  1C20  0870               	movf	??_DimmerIntrPointSelect,w
 18847  1C21  00F9               	movwf	_DimmerLightsIntr
 18848  1C22  0008               	return
 18849  1C23                     __end_of_DimmerIntrPointSelect:	
 18850                           
 18851                           	psect	text132
 18852  1CDD                     __ptext132:	
 18853 ;; *************** function _IOC_ISR *****************
 18854 ;; Defined at:
 18855 ;;		line 401 in file "../src/MCU_B1.c"
 18856 ;; Parameters:    Size  Location     Type
 18857 ;;		None
 18858 ;; Auto vars:     Size  Location     Type
 18859 ;;		None
 18860 ;; Return value:  Size  Location     Type
 18861 ;;		None               void
 18862 ;; Registers used:
 18863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18864 ;; Tracked objects:
 18865 ;;		On entry : 0/0
 18866 ;;		On exit  : 0/0
 18867 ;;		Unchanged: 0/0
 18868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18873 ;;Total ram usage:        0 bytes
 18874 ;; Hardware stack levels used:    1
 18875 ;; Hardware stack levels required when called:    3
 18876 ;; This function calls:
 18877 ;;		_setDimmerReClock
 18878 ;; This function is called by:
 18879 ;;		_ISR
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _IOC_ISR
 18885  1CDD                     _IOC_ISR:	
 18886                           
 18887                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18888                           
 18889                           ;incstack = 0
 18890                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18891  1CDD  1D8B               	btfss	11,3	;volatile
 18892  1CDE  0008               	return
 18893  1CDF  1C0B               	btfss	11,0	;volatile
 18894  1CE0  0008               	return
 18895  1CE1  0027               	movlb	7	; select bank7
 18896  1CE2  1D16               	btfss	22,2	;volatile
 18897  1CE3  0008               	return
 18898                           
 18899                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18900  1CE4  1116               	bcf	22,2	;volatile
 18901                           
 18902                           ;MCU_B1.c: 404: IOCIF = 0;
 18903  1CE5  100B               	bcf	11,0	;volatile
 18904                           
 18905                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18906  1CE6  0021               	movlb	1	; select bank1
 18907  1CE7  1C20               	btfss	_myMain^(0+128),0
 18908  1CE8  0008               	return
 18909                           
 18910                           ;MCU_B1.c: 408: setDimmerReClock();
 18911  1CE9  319B  23A7         	fcall	_setDimmerReClock
 18912  1CEB  0008               	return
 18913  1CEC                     __end_of_IOC_ISR:	
 18914                           
 18915                           	psect	text133
 18916  1BA7                     __ptext133:	
 18917 ;; *************** function _setDimmerReClock *****************
 18918 ;; Defined at:
 18919 ;;		line 244 in file "../src/MCU_B1.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;		None
 18922 ;; Auto vars:     Size  Location     Type
 18923 ;;		None
 18924 ;; Return value:  Size  Location     Type
 18925 ;;		None               void
 18926 ;; Registers used:
 18927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18937 ;;Total ram usage:        0 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    2
 18940 ;; This function calls:
 18941 ;;		_setDimmerLights_IntrIOC_GO
 18942 ;; This function is called by:
 18943 ;;		_IOC_ISR
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           
 18948                           ;psect for function _setDimmerReClock
 18949  1BA7                     _setDimmerReClock:	
 18950                           
 18951                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18952                           
 18953                           ;incstack = 0
 18954                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18955  1BA7  3001               	movlw	1
 18956  1BA8  3193  237B         	fcall	_setDimmerLights_IntrIOC_GO
 18957  1BAA  0008               	return
 18958  1BAB                     __end_of_setDimmerReClock:	
 18959                           
 18960                           	psect	text134
 18961  137B                     __ptext134:	
 18962 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18963 ;; Defined at:
 18964 ;;		line 28 in file "../src/Dimmer_B1.c"
 18965 ;; Parameters:    Size  Location     Type
 18966 ;;  lights          1    wreg     unsigned char 
 18967 ;; Auto vars:     Size  Location     Type
 18968 ;;  lights          1    2[COMMON] unsigned char 
 18969 ;; Return value:  Size  Location     Type
 18970 ;;		None               void
 18971 ;; Registers used:
 18972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18973 ;; Tracked objects:
 18974 ;;		On entry : 0/0
 18975 ;;		On exit  : 0/0
 18976 ;;		Unchanged: 0/0
 18977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18982 ;;Total ram usage:        1 bytes
 18983 ;; Hardware stack levels used:    1
 18984 ;; Hardware stack levels required when called:    1
 18985 ;; This function calls:
 18986 ;;		_DimmerIntrIOCPointSelect
 18987 ;; This function is called by:
 18988 ;;		_setDimmerReClock
 18989 ;; This function uses a non-reentrant model
 18990 ;;
 18991                           
 18992                           
 18993                           ;psect for function _setDimmerLights_IntrIOC_GO
 18994  137B                     _setDimmerLights_IntrIOC_GO:	
 18995                           
 18996                           ;incstack = 0
 18997                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18998                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18999  137B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19000                           
 19001                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19002  137C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19003  137D  319C  242D  3193   	fcall	_DimmerIntrIOCPointSelect
 19004                           
 19005                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19006  1380  0021               	movlb	1	; select bank1
 19007  1381  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19008  1382  0086               	movwf	6
 19009  1383  3001               	movlw	1	; select bank2/3
 19010  1384  0087               	movwf	7
 19011  1385  1801               	btfsc	1,0
 19012  1386  0008               	return
 19013  1387  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19014  1388  3E09               	addlw	9
 19015  1389  0086               	movwf	6
 19016  138A  3001               	movlw	1	; select bank2/3
 19017  138B  0087               	movwf	7
 19018  138C  1981               	btfsc	1,3
 19019  138D  0008               	return
 19020  138E  0020               	movlb	0	; select bank0
 19021  138F  190D               	btfsc	13,2	;volatile
 19022  1390  0008               	return
 19023                           
 19024                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19025  1391  0021               	movlb	1	; select bank1
 19026  1392  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19027  1393  0086               	movwf	6
 19028  1394  3001               	movlw	1	; select bank2/3
 19029  1395  0087               	movwf	7
 19030  1396  1401               	bsf	1,0
 19031                           
 19032                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19033  1397  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19034  1398  3E09               	addlw	9
 19035  1399  0086               	movwf	6
 19036  139A  3001               	movlw	1	; select bank2/3
 19037  139B  0087               	movwf	7
 19038  139C  1581               	bsf	1,3
 19039                           
 19040                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19041  139D  0022               	movlb	2	; select bank2
 19042  139E  01A2               	clrf	(_Dimmer^(0+256)+2)
 19043                           
 19044                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19045  139F  0021               	movlb	1	; select bank1
 19046  13A0  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19047  13A1  0086               	movwf	6
 19048  13A2  3001               	movlw	1	; select bank2/3
 19049  13A3  0087               	movwf	7
 19050  13A4  1F01               	btfss	1,6
 19051  13A5  0008               	return
 19052                           
 19053                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19054  13A6  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19055  13A7  3E09               	addlw	9
 19056  13A8  0086               	movwf	6
 19057  13A9  3001               	movlw	1	; select bank2/3
 19058  13AA  0087               	movwf	7
 19059  13AB  1601               	bsf	1,4
 19060                           
 19061                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19062  13AC  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19063  13AD  3A01               	xorlw	1
 19064  13AE  1D03               	skipz
 19065  13AF  0008               	return
 19066                           
 19067                           ;Dimmer_B1.c: 54: RB1 = 1;
 19068  13B0  0020               	movlb	0	; select bank0
 19069  13B1  148D               	bsf	13,1	;volatile
 19070  13B2  0008               	return
 19071  13B3                     __end_of_setDimmerLights_IntrIOC_GO:	
 19072                           
 19073                           	psect	text135
 19074  1C2D                     __ptext135:	
 19075 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19076 ;; Defined at:
 19077 ;;		line 8 in file "../src/Dimmer_B1.c"
 19078 ;; Parameters:    Size  Location     Type
 19079 ;;  lights          1    wreg     unsigned char 
 19080 ;; Auto vars:     Size  Location     Type
 19081 ;;  lights          1    1[COMMON] unsigned char 
 19082 ;; Return value:  Size  Location     Type
 19083 ;;		None               void
 19084 ;; Registers used:
 19085 ;;		wreg
 19086 ;; Tracked objects:
 19087 ;;		On entry : 0/0
 19088 ;;		On exit  : 0/0
 19089 ;;		Unchanged: 0/0
 19090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19095 ;;Total ram usage:        2 bytes
 19096 ;; Hardware stack levels used:    1
 19097 ;; This function calls:
 19098 ;;		Nothing
 19099 ;; This function is called by:
 19100 ;;		_setDimmerLights_IntrIOC_GO
 19101 ;; This function uses a non-reentrant model
 19102 ;;
 19103                           
 19104                           
 19105                           ;psect for function _DimmerIntrIOCPointSelect
 19106  1C2D                     _DimmerIntrIOCPointSelect:	
 19107                           
 19108                           ;incstack = 0
 19109                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19110                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19111  1C2D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19112                           
 19113                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19114  1C2E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19115  1C2F  3A01               	xorlw	1
 19116  1C30  1D03               	skipz
 19117  1C31  0008               	return
 19118                           
 19119                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19120  1C32  3053               	movlw	_DimmerLights1& (0+255)
 19121  1C33  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19122  1C34  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19123  1C35  0021               	movlb	1	; select bank1
 19124  1C36  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19125  1C37  0008               	return
 19126  1C38                     __end_of_DimmerIntrIOCPointSelect:	
 19127  007E                     btemp	set	126	;btemp
 19128  007E                     pic14e$flags	set	126
 19129  007E                     wtemp	set	126
 19130  007E                     wtemp0	set	126
 19131  0080                     wtemp1	set	128
 19132  0082                     wtemp2	set	130
 19133  0084                     wtemp3	set	132
 19134  0086                     wtemp4	set	134
 19135  0088                     wtemp5	set	136
 19136  007F                     wtemp6	set	127
 19137  007E                     ttemp	set	126
 19138  007E                     ttemp0	set	126
 19139  0081                     ttemp1	set	129
 19140  0084                     ttemp2	set	132
 19141  0087                     ttemp3	set	135
 19142  007F                     ttemp4	set	127
 19143  007E                     ltemp	set	126
 19144  007E                     ltemp0	set	126
 19145  0082                     ltemp1	set	130
 19146  0086                     ltemp2	set	134
 19147  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         229
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      75
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95927
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11071
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4872
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29028
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29028
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1280
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     518
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1347
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28352
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 05 14:56:53 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 1723                                       l94 14FF  
                                     l86 1737                                       l95 14FB  
                                     l96 14E9                                       l98 14F9  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F99  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1C6F  
                 __end_of_setDelayOff_GO 08C4                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 174B  
                   _setDimmerLights_Line 1C86                             ___ftadd@sign 004B  
                                    l231 0A1B                                      l304 1DF4  
                                    l305 1DF5                     _setDimmerLights_SwOn 13B3  
                                    l348 10A3                                      l709 1198  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BB                                      _ISR 0004  
                                    _WDT 00CA             getDimmerLights_Status@lights 0022  
                                    _Sw1 01E3                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1DFE                    _Buzzer_Initialization 1B98  
                        __end_of_ADC_Set 1BEE                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CE5  
                 _setMain_Exception$3741 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FDD                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1CEC                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2003 0711                                     l2012 06A5  
                                   l2005 0670                                     l1206 1597  
                                   l2014 06DE                                     l2006 0672  
                                   l2007 067A                                     l2046 1CF1  
                                   l2070 1309                                     l2054 0DA5  
                                   l1431 11FD                                     l1183 12D1  
                                   l2064 0DFB                                     l1426 11E6  
               ?_DimmerLightsPointSelect 0070                                     l1427 1201  
                         _Load_Main$4117 002D                                     l2084 0980  
                                   l1197 1167                                     l1541 01BA  
                                   l1383 154F                                     l1544 007A  
                                   l2096 141B                                     l1545 018A  
                                   l1546 0188                                     l2380 1F28  
                        __end_of_IOC_Set 1CB6                                     l2366 1E2F  
                                   l2390 0326                                     l2392 01FF  
                                   l2733 09CB                                     l1686 0E9F  
                                   l2727 09B4                                     l6025 11AB  
                                   l2756 0514                                     l6125 15D2  
                                   l7021 1F43                                     l6151 1E74  
                                   l6207 11F8                                     l6303 09E9  
                                   l6143 1409                                     l7023 1F46  
                                   l6153 1E77                                     l5513 1D97  
                                   l6233 1297                                     l6225 1283  
                                   l6073 1E4A                                     l6305 09EC  
                                   l6129 15E1                                     l6219 127A  
                                   l5531 1FA4                                     l5603 0553  
                                   l6075 1E4E                                     l6323 0A03  
                                   l7131 0E12                                     l7027 1F4B  
                                   l6157 1E7D                                     l6413 10B4  
                                   l6421 1F80                                     l5509 1D91  
                                   l6093 1677                                     l5613 0EBA  
                                   l7045 156D                                     l6173 1FCD  
                                   l6341 0A37                                     l6333 0A2A  
                                   l6309 09F2                                     l7213 0691  
                                   l6415 10BF                                     l6423 1F83  
                                   l6095 164C                                     l5543 049D  
                                   l7039 1558                                     l6167 1FC4  
                                   l6335 0A2E                                     l6327 0A21  
                                   l6271 0922                                     l6097 167D  
                                   l5481 098A                                     l5553 04B3  
                                   l5641 0F2A                                     l5633 0F11  
                                   l5713 0C77                                     l6505 0D5A  
                                   l6513 0B23                                     l6169 1FC7  
                                   l6353 0B77                                     l6361 0B83  
                                   l6337 0A31                                     l6329 0A24  
                                   l7073 082A                                     l7065 0817  
                                   l7321 022D                                     l7305 01EA  
                                   l7161 0E6B                                     l6427 1F89  
                                   l5571 04E0                                     l5547 04A4  
                                   l5619 0ED0                                     l5731 0CA7  
                                   l6603 114F                                     l7403 1334  
                                   l6371 0B95                                     l6355 0B7A  
                                   l6283 0947                                     l7083 0848  
                                   l7091 0861                                     l7331 025F  
                                   l7163 0E6D                    _setDimmerLights_SwOff 1473  
                                   l7421 14D3                                     l6197 11E1  
                                   l5485 0991                                     l5573 04EA  
                                   l5565 04CD                                     l5741 0CCB  
                                   l5733 0CB5                                     l5661 0F79  
                                   l6293 0965                                     l7173 0E82  
                                   l5823 163B                                     l5815 162A  
                                   l5807 160C                                     l6471 07FC  
                                   l6199 11EA                                     l5495 09B9  
                                   l5487 099B                                     l5583 0506  
                                   l5575 04EF                                     l5743 0CCE  
                                   l7407 133D                                     l6391 0BAC  
                                   l6375 0B9B                                     l6359 0B80  
                                   l5655 0F63                                     l6287 095D  
                                   l6711 0DF1                                     l7247 06C3  
                                   l7079 0838                                     l7175 0E83  
                                   l5809 1618                                     l5497 09C1  
                                   l5489 09A0                                     l5593 0538  
                                   l5585 0510                                     l5577 04F3  
                                   l6393 0BC4                                     l6369 0B92  
                                   l5673 0FB4                                     l6289 0961  
                                   l6705 0DE6                                     l7249 06C5  
                                   l7265 06EF                                     l7089 0858  
                                   l6537 124B                                     l7345 029D  
                                   l5819 1633                                     l6467 07F7  
                                   l5747 0CDC                                     l5739 0CC2  
                                   l7291 1E3A                                     l7355 02CF  
                                   l6469 07DB                                     l5589 0526  
                                   l6493 0D33                                     l5685 0FD0  
                                   l5677 0FBC                                     l7381 0322  
                                   l7621 0BFE                                     l5791 15F9  
                                   l5767 113D                                     l5871 089F  
                                   l7471 119A                                     l6647 1D77  
                                   l6671 0D91                                     l7287 1E34  
                                   l6559 1C77                                     l6735 1D88  
                                   l6753 1454                                     l5873 08AC  
                                   l5953 14A7                                     l7529 05DD  
                                   l5689 0FD8                                     l5937 13E9  
                                   l7633 0C2B                                     l6763 1464  
                                   l6755 1457                                     l5875 08B5  
                                   l5867 0899                                     l5971 17F0  
                                   l7467 118F                                     l7395 1316  
                                   l6683 0DA8                                     l6765 1467  
                                   l5797 1604                                     l6933 1770  
                                   l7469 1192                                     l7397 1322  
                                   l7741 0095                                     l7629 0C23  
                                   l6759 145D                                     l6935 1776  
                                   l7719 0069                                     l6695 0DC0  
                                   l7663 136C                                     l6769 146D  
                                   l6945 179E                                     l7649 0C58  
                                   l7681 1527                                     l7771 0140  
                                   l7747 00BF                    _myMain_Initialization 1CFB  
                                   l7839 01A8                                     l7863 1F31  
                                   l7687 1539                                     l7943 16C9  
                                   l7777 014D                                     l7779 0153  
                                   l7939 16BE                                     l7789 0168  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4105 09D2                                     u4035 0996  
                                   u4055 09AF                                     u5025 1E0D  
                                   u4305 04F4                                     u5115 1655  
                                   u4075 09BC                                     u4245 04CE  
                                   u4405 0EE2                                     u4335 0507  
                                   u4415 0EF2                                     u4425 0F12  
                                   u4275 04E1                                     u4435 0F21  
                                   u4515 0FBD                                     _PEIE 005E  
                                   u4445 0F2B                                     u4605 0C7E  
                                   u4525 0FC3                                     u4715 1129  
                                   u4635 0CA8                                     u4555 0FD9  
                                   u7205 14C9                                     u4805 162B  
                                   u4565 0FDF                                     u4485 0F85  
                                   u7135 1319                                     u4495 0F95  
                                   u4665 0CC3                                     u7155 1323  
                                   u5565 10A9                                     u4765 160F  
                                   u7165 132D                                     u7175 1335  
                                   u4785 1619                                     u5665 07E4  
                                   u4970 17AE                                     u4795 1623  
                                   u7435 12C8                                     u6645 0E53  
                                   u4975 17AC                                     u7615 1517  
                                   u6665 0E73                                     u7545 0C45  
                                   u7625 1535                                     u7635 1547  
                                   u6765 068B                                     u7495 0C11  
                                   u7825 0159                                     u7585 1363  
                                   u7595 1372                                     u7765 0100  
                                   u6885 0700                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0125  
                                   _Temp 00D6                                     _main 169A  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0921  
                        __end_of_RF_Main 1BA1                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1C64                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1BA7  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1430                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1D0A  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1BC7         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C23                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EB                          __end_of___awdiv 1642  
                        __end_of___ftadd 056B                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1C07                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1344                                    i1l678 044F  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1E13  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 13B3  
             _setDimmerLights_IntrIOC_GO 137B                         __end_of_TMR1_ISR 109E  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 169A  
             _setDimmerLights_ErrorClose 1642                         __end_of_TMR1_Set 1CC2  
                                  _getAD 1F38                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1DC4              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D3A  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 07FF  
          __end_of_setLED_Initialization 1D5B                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 17A4  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0AA8                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 16F2  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1BCB  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D6E  
                   _setSw_Initialization 1D3A                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0921                           _setMemory_Data 1C92  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C4E  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08C4                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1FBB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09E2  
               _getMain_All_Error_Status 11D0                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EBB                                   i1l6857 038B  
                                 i1l6883 03F5                                   i1l6875 03D6  
                                 i1l6893 0422                                   i1l6879 03E5  
                                 i1l6887 0404                                   i1l6897 0437  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u618_25 0364  
                     __size_of_Load_Main 017D                                   u736_25 1098  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E54                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B97  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E28  
                                 _Dimmer 0120                                   _DlySw1 0162  
             __end_of_Mcu_Initialization 1DB2                      __end_of_Buzzer_Main 1506  
                                 _Memory 01BE                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1F18               _setDimmerLights_TriggerAdj 1EF8  
                                 ___bmul 1D8E                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 126B                                   _myMain 00A0  
                 __end_of_setMemory_Data 1C9E                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 16F2  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1BD5  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 0475              _setDimmerLights_IntrControl 032F  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1DEA              getMain_Lights_Count@status1 0023  
            getMain_Lights_Count@status2 0021              getMain_Lights_Count@status3 0022  
                  __end_of_SwPointSelect 080B             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 000B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1E28               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0B0D         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 003F                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5506 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F58                            __end_of_getAD 1F58  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1BBF  
                        _getSw_KeyStatus 1D7D                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1D2A  
                              ?_WDT_Main 0070                        __end_of_Load_Main 01C0  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 07D4  
             __end_of_set_TimeoutCleared 1BD0                 __end_of_setDimmerReClock 1BAB  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                     __size_of_setLED_Main 0033  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1BA1                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 14BC  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1BA7  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1BB7  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 169A  
                         _getDelayOff_GO 1D1A                      _CC2500_WriteCommand 1E6C  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1BEE  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1BE7                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1344                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1C6F  
                     _setRFSW_AdjControl 13F0                                  _IOC_ISR 1CDD  
                                _IOC_Set 1CAA                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 12A1  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E85  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1B9E                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C59  
        __end_of_setControl_Lights_Table 0981                          setRF_Main@error 00EA  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0A43                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1C86  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1D6C  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1D2A           __end_of_getDimmerLights_Status 1D1A  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1D8E  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C38  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1ED9  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 15EE  
                                ___ftadd 0475                                  ___ftdiv 0EA3  
                                ___ftneg 1BFE                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1F38  
                                ___lwdiv 130D                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1D6C                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 1506                                  __ptext2 1CFB  
                                __ptext3 1344                                  __ptext4 0BDD  
                                __ptext5 1F38                                  __ptext6 1DB2  
                                __ptext7 0002                                  __ptext8 1BA4  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C19  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 12D7                __end_of_Flash_Memory_Read 1E9F  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0647  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1BBB  
                      _DimmerLights_Main 116E           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1BDB               __end_of_CC2500_ClearRXFIFO 1BAF  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1BB3  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1C4E                      _DelayOffPointSelect 1C38  
                         _getMain_LoadOK 1CCF                                  clrloop0 1BE2  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1C19  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 10EB                            _DelayTime_1us 109E  
                      __end_of_setTxData 07D4               __end_of_Flash_Memory_Write 116E  
                                init_ram 1BDB                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1BDC                               _setSw_Main 01C0  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1FBB                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1D4A                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B73  
                          _CC2500_TxData 09E2                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1551  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C07                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 119E                       _Mcu_Initialization 1DA0  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 1551  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C59                  __end_of_setPercentValue 0AA8  
                 __end_of_getMain_LoadOK 1CDD                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1115                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0B0D  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1FDD  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E6C                     _setRF_Initialization 1C64  
                     _setMemory_LoopSave 1DD7                              _Switch_Main 1F18  
                      __size_of_LED_Main 0004                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C43                  __end_of_getRF_KeyStatus 1D7D  
                      _setMain_Exception 080B                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E13  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1DA0                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1C2D  
        _setDimmerLights_AdjControl$2415 0027                        getSw_KeyStatus@sw 0070  
                      __size_of_TMR1_ISR 0024            __size_of_getDimmerLights_Line 000B  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 12A1  
          __size_of_setDimmerLights_Line 000C            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 174B                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1C7A               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 159F                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 119E                          ?_LedPointSelect 0070  
                              _Load_Main 0043                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1BF6  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EF8          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1BCB                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0167  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0867                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1BA4                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D2                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1C23                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1203                         _CC2500_SIDLEMode 1BB3  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 11D0  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1DC4  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0153  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1EBB  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00CE  
                         Load_Main@adjgo 002C                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 07FF                                _getBuz_GO 1D5B  
    __end_of_Flash_Memory_Initialization 0647              _Flash_Memory_Initialization 056B  
                               ?___awdiv 0020                                __ptext100 1EBB  
                              __ptext101 0867                                __ptext110 1BD5  
                              __ptext102 1115                                __ptext111 1C38  
                              __ptext103 1D8E                                __ptext120 1BAF  
                              __ptext112 1E13                                __ptext104 1D1A  
                              __ptext121 1BAB                                __ptext113 1BB3  
                              __ptext105 1D0A                                __ptext130 032F  
                              __ptext122 1E6C                                __ptext114 1430  
                              __ptext106 1C43                                __ptext131 1C19  
                              __ptext123 1BCB                                __ptext115 10EB  
                              __ptext107 16F2                                __ptext132 1CDD  
                              __ptext124 1DFE                                __ptext116 1ED9  
                              __ptext108 15EE                                __ptext133 1BA7  
                              __ptext125 1DEA                                __ptext117 1F78  
                              __ptext109 1BB7                                 ?___ftadd 0041  
                              __ptext134 137B                                __ptext126 14BC  
                              __ptext118 1C7A                                __ptext135 1C2D  
                              __ptext127 1B98                                __ptext119 109E  
                              __ptext129 107A                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 15EE            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1B9B                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0020                       __end_of_TouchPower 1E3D  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 2000  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2351 0069  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 14BC  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D0A  
                         __size_of_getAD 0020                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 0800  
                    __end_of_setLED_Main 1236                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CE                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1BA4             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BC3  
                        SwPointSelect@sw 0021                                clear_ram0 1BE1  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 1506                                _setTxData 0715  
    __end_of_DimmerLights_Initialization 1CCF              _DimmerLights_Initialization 1CC2  
                     _CC2500_ClearRXFIFO 1BAB                       _CC2500_ClearTXFIFO 1BAF  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 107A  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 113F  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 107A                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1CB6                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0123                     __end_of_RF_RxDisable 1CFB  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E85  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1DB2  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E8  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1CAA  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 130D  
                  _DlyOff_Initialization 1BD5                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1BC7  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1BF6                    _Switch_Initialization 1C10  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 137B  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1DEA  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$3757 0021  
          _getMain_All_Error_Status$3766 0023                 __end_of_getDimmer_LoadOK 1BFE  
                    _Load_Initialization 1BD0                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1F99                         ??_LedPointSelect 0020  
                               ___ftpack 0981            __size_of_getMain_Lights_Count 0010  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002B  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1203  
             __end_of_setRF_DimmerLights 1800                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
     __size_of_getAll_DimmerLights_AdjGO 000A                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1BA1  
                               __ptext11 07FF                                 __ptext20 1C10  
                               __ptext12 1F18                                 __ptext21 1D3A  
                               __ptext13 01C0                                 __ptext30 13B3  
                               __ptext22 1E28                                 __ptext14 1066  
                               __ptext31 13F0                                 __ptext23 1B9E  
                               __ptext15 1236                                 __ptext40 09E2  
                               __ptext32 119E                                 __ptext24 0647  
                               __ptext16 1D7D                                 __ptext41 0B73  
                               __ptext33 1FDD                                 __ptext25 0D6E  
                               __ptext17 0800                                 __ptext50 1CAA  
                               __ptext42 1FBB                                 __ptext34 0AA8  
                               __ptext26 12D7                                 __ptext18 080B  
                               __ptext51 1BC7                                 __ptext43 1E3D  
                               __ptext35 0F4C                                 __ptext27 1DD7  
                               __ptext19 1C6F                                 __ptext60 1E9F  
                               __ptext52 1BE7                                 __ptext44 1B9B  
                               __ptext36 1DC4                                 __ptext28 0921  
                               __ptext61 1BC3                                 __ptext53 0043  
                               __ptext45 1C64                                 __ptext37 1D6C  
                               __ptext29 159F                                 __ptext70 113F  
                               __ptext62 1203                                 __ptext54 1CCF  
                               __ptext46 1DA0                                 __ptext38 1D5B  
                               __ptext71 1C07                                 __ptext63 1BBF  
                               __ptext55 1BF6                                 __ptext47 1C59  
                               __ptext39 1CEC                                 __ptext80 0C5E  
                               __ptext72 1E85                                 __ptext64 1D4A  
                               __ptext56 1D2A                                 __ptext48 1CB6  
                               __ptext81 1BFE                                 __ptext73 116E  
                               __ptext65 12A1                                 __ptext57 1C23  
                               __ptext49 1E54                                 __ptext90 07D4  
                               __ptext82 0EA3                                 __ptext74 174B  
                               __ptext66 1551                                 __ptext58 130D  
                               __ptext91 1BEE                                 __ptext83 0475  
                               __ptext75 0B0D                                 __ptext67 1C9E  
                               __ptext59 1BD0                                 __ptext92 1CC2  
                               __ptext84 1F99                                 __ptext76 0CE5  
                               __ptext68 056B                                 __ptext93 10C4  
                               __ptext85 0981                                 __ptext77 0715  
                               __ptext69 1C92                                 __ptext94 1B97  
                               __ptext86 126B                                 __ptext78 17A4  
                               __ptext95 1BBB                                 __ptext87 1C4E  
                               __ptext79 0A43                                 __ptext96 08C4  
                               __ptext88 1C86                                 __ptext97 1642  
                               __ptext89 11D0                                 __ptext98 1473  
                               __ptext99 1EF8                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1C7A            __end_of_Dimmer_Initialization 1B98  
           __end_of_setDimmerLights_Main 17A4             __end_of_setDimmerLights_Line 1C92  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 13F0  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1066                 __end_of_CC2500_SIDLEMode 1BB7  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1C43  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00E9  
              __size_of_setDimmerReClock 0004           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E3D                       _CC2500_InitPATable 1ED9  
               __end_of_setMemory_Modify 1DD7            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0715                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EB                                 main@argv 00ED  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6565 0022  
                        _CC2500_PowerRST 1430                 __size_of_getSw_KeyStatus 0011  
            __end_of_Flash_Memory_Modify 159F                        ??_getPercentValue 005C  
                            _setLog_Code 12D7              __end_of_Flash_Memory_Unlock 1C10  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F78  
                     __end_of_setSw_Main 032F                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1115                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C2D              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10EB  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 10C4              __end_of_setDimmerLights_Adj 0B73  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1B9B     __size_of_setDimmerLights_IntrControl 0146  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1C9E  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1BBB      __size_of_setDimmerLights_IntrIOC_GO 0038  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1BBF       __end_of_setDimmerLights_AdjControl 126B  
             _setDimmerLights_AdjControl 1236                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0867  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 113F  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10C4                  __end_of_CC2500_ReadByte 1E54  
           __end_of_setSw_Initialization 1D4A                          _Timeout_Counter 1DFE  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1CEC               __end_of_LED_Initialization 1BC3  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0800  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B9E  
                  __end_of_CC2500_RxData 0BDD                    __end_of_CC2500_TxData 0A43  
                  _setLoad_AH_AL_Restore 1E9F                  __end_of_CC2500_PowerRST 1473  
         getAll_DimmerLights_AdjGO@adjgo 0020  
