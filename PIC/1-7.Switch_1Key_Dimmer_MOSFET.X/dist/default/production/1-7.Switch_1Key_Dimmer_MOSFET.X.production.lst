

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 01 17:27:27 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043  0000                     	;# 
  2044  0001                     	;# 
  2045  0002                     	;# 
  2046  0003                     	;# 
  2047  0004                     	;# 
  2048  0005                     	;# 
  2049  0006                     	;# 
  2050  0007                     	;# 
  2051  0008                     	;# 
  2052  0009                     	;# 
  2053  000A                     	;# 
  2054  000B                     	;# 
  2055  000C                     	;# 
  2056  000D                     	;# 
  2057  000E                     	;# 
  2058  0010                     	;# 
  2059  0011                     	;# 
  2060  0012                     	;# 
  2061  0015                     	;# 
  2062  0016                     	;# 
  2063  0016                     	;# 
  2064  0017                     	;# 
  2065  0018                     	;# 
  2066  0019                     	;# 
  2067  001A                     	;# 
  2068  001B                     	;# 
  2069  001C                     	;# 
  2070  008C                     	;# 
  2071  008D                     	;# 
  2072  008E                     	;# 
  2073  0090                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0095                     	;# 
  2077  0096                     	;# 
  2078  0097                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  010C                     	;# 
  2087  010D                     	;# 
  2088  010E                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  011D                     	;# 
  2092  018C                     	;# 
  2093  018D                     	;# 
  2094  018E                     	;# 
  2095  0191                     	;# 
  2096  0191                     	;# 
  2097  0192                     	;# 
  2098  0193                     	;# 
  2099  0193                     	;# 
  2100  0194                     	;# 
  2101  0195                     	;# 
  2102  0196                     	;# 
  2103  0197                     	;# 
  2104  0199                     	;# 
  2105  019A                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019C                     	;# 
  2111  019C                     	;# 
  2112  019D                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  020D                     	;# 
  2116  0210                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0291                     	;# 
  2133  0291                     	;# 
  2134  0292                     	;# 
  2135  0293                     	;# 
  2136  0298                     	;# 
  2137  0298                     	;# 
  2138  0299                     	;# 
  2139  029A                     	;# 
  2140  0394                     	;# 
  2141  0395                     	;# 
  2142  0396                     	;# 
  2143  0FE4                     	;# 
  2144  0FE5                     	;# 
  2145  0FE6                     	;# 
  2146  0FE7                     	;# 
  2147  0FE8                     	;# 
  2148  0FE9                     	;# 
  2149  0FEA                     	;# 
  2150  0FEB                     	;# 
  2151  0FED                     	;# 
  2152  0FEE                     	;# 
  2153  0FEF                     	;# 
  2154                           
  2155                           	psect	idataBANK4
  2156  1FBF                     __pidataBANK4:	
  2157                           
  2158                           ;initializer for __product
  2159  1FBF  3463               	retlw	99
  2160  1FC0  3402               	retlw	2
  2161  1FC1  3400               	retlw	0
  2162  1FC2  3400               	retlw	0
  2163  1FC3  3400               	retlw	0
  2164  1FC4  3400               	retlw	0
  2165  1FC5  3400               	retlw	0
  2166  1FC6  3400               	retlw	0
  2167  1FC7  3400               	retlw	0
  2168  1FC8  3400               	retlw	0
  2169  1FC9  3400               	retlw	0
  2170  1FCA  3400               	retlw	0
  2171  1FCB  34FF               	retlw	255
  2172  1FCC  34FF               	retlw	255
  2173  1FCD  34FF               	retlw	255
  2174  1FCE  3400               	retlw	0
  2175  1FCF  3400               	retlw	0
  2176  1FD0  3400               	retlw	0
  2177  1FD1  3400               	retlw	0
  2178  1FD2  3400               	retlw	0
  2179  1FD3  3400               	retlw	0
  2180  1FD4  3400               	retlw	0
  2181  1FD5  3400               	retlw	0
  2182  1FD6  3400               	retlw	0
  2183  1FD7  3400               	retlw	0
  2184  1FD8  3400               	retlw	0
  2185  1FD9  3400               	retlw	0
  2186  1FDA  3400               	retlw	0
  2187  1FDB  3400               	retlw	0
  2188  1FDC  3400               	retlw	0
  2189  1FDD  3400               	retlw	0
  2190  1FDE  3400               	retlw	0
  2191                           
  2192                           	psect	stringtext
  2193  1000                     __pstringtext:	
  2194  1000                     _CC2500_registers_address:	
  2195  1000  3403               	retlw	3
  2196  1001  3416               	retlw	22
  2197  1002  3417               	retlw	23
  2198  1003  341E               	retlw	30
  2199  1004  341F               	retlw	31
  2200  1005  3420               	retlw	32
  2201  1006  342A               	retlw	42
  2202  1007  342B               	retlw	43
  2203  1008  340B               	retlw	11
  2204  1009  340C               	retlw	12
  2205  100A  340D               	retlw	13
  2206  100B  340E               	retlw	14
  2207  100C  340F               	retlw	15
  2208  100D  3410               	retlw	16
  2209  100E  3411               	retlw	17
  2210  100F  3412               	retlw	18
  2211  1010  3413               	retlw	19
  2212  1011  3414               	retlw	20
  2213  1012  340A               	retlw	10
  2214  1013  3415               	retlw	21
  2215  1014  3421               	retlw	33
  2216  1015  3422               	retlw	34
  2217  1016  3418               	retlw	24
  2218  1017  3419               	retlw	25
  2219  1018  341A               	retlw	26
  2220  1019  341B               	retlw	27
  2221  101A  341C               	retlw	28
  2222  101B  341D               	retlw	29
  2223  101C  3423               	retlw	35
  2224  101D  3424               	retlw	36
  2225  101E  3425               	retlw	37
  2226  101F  3426               	retlw	38
  2227  1020  3429               	retlw	41
  2228  1021  342C               	retlw	44
  2229  1022  342D               	retlw	45
  2230  1023  342E               	retlw	46
  2231  1024  3400               	retlw	0
  2232  1025  3401               	retlw	1
  2233  1026  3402               	retlw	2
  2234  1027  3407               	retlw	7
  2235  1028  3408               	retlw	8
  2236  1029  3409               	retlw	9
  2237  102A  3406               	retlw	6
  2238  102B  3404               	retlw	4
  2239  102C  3405               	retlw	5
  2240  102D  3427               	retlw	39
  2241  102E  3428               	retlw	40
  2242  102F                     __end_of_CC2500_registers_address:	
  2243  102F                     _CC2500_rfSettings:	
  2244  102F  3407               	retlw	7
  2245  1030  3407               	retlw	7
  2246  1031  3430               	retlw	48
  2247  1032  3487               	retlw	135
  2248  1033  346B               	retlw	107
  2249  1034  34F8               	retlw	248
  2250  1035  347F               	retlw	127
  2251  1036  343F               	retlw	63
  2252  1037  3409               	retlw	9
  2253  1038  3400               	retlw	0
  2254  1039  345C               	retlw	92
  2255  103A  34A7               	retlw	167
  2256  103B  3462               	retlw	98
  2257  103C  3486               	retlw	134
  2258  103D  3483               	retlw	131
  2259  103E  3403               	retlw	3
  2260  103F  3422               	retlw	34
  2261  1040  34F8               	retlw	248
  2262  1041  3400               	retlw	0
  2263  1042  3444               	retlw	68
  2264  1043  34B6               	retlw	182
  2265  1044  3410               	retlw	16
  2266  1045  3418               	retlw	24
  2267  1046  341D               	retlw	29
  2268  1047  341C               	retlw	28
  2269  1048  34C7               	retlw	199
  2270  1049  3400               	retlw	0
  2271  104A  34B2               	retlw	178
  2272  104B  34EA               	retlw	234
  2273  104C  340A               	retlw	10
  2274  104D  3400               	retlw	0
  2275  104E  3411               	retlw	17
  2276  104F  3459               	retlw	89
  2277  1050  3488               	retlw	136
  2278  1051  3431               	retlw	49
  2279  1052  340B               	retlw	11
  2280  1053  342F               	retlw	47
  2281  1054  342E               	retlw	46
  2282  1055  3406               	retlw	6
  2283  1056  3404               	retlw	4
  2284  1057  3405               	retlw	5
  2285  1058  3400               	retlw	0
  2286  1059  3430               	retlw	48
  2287  105A  34D3               	retlw	211
  2288  105B  3491               	retlw	145
  2289  105C  3441               	retlw	65
  2290  105D  3400               	retlw	0
  2291  105E                     __end_of_CC2500_rfSettings:	
  2292  105E                     _CC2500_patable_vaule:	
  2293  105E  34FE               	retlw	254
  2294  105F  34FE               	retlw	254
  2295  1060  34FE               	retlw	254
  2296  1061  34FE               	retlw	254
  2297  1062  34FE               	retlw	254
  2298  1063  34FE               	retlw	254
  2299  1064  34FE               	retlw	254
  2300  1065  34FE               	retlw	254
  2301  1066                     __end_of_CC2500_patable_vaule:	
  2302                           
  2303                           	psect	nvBANK0
  2304  006E                     __pnvBANK0:	
  2305  006E                     _product:	
  2306  006E                     	ds	1
  2307  000C                     _PORTA	set	12
  2308  000D                     _PORTB	set	13
  2309  000E                     _PORTC	set	14
  2310  0018                     _T1CON	set	24
  2311  0017                     _TMR1H	set	23
  2312  0016                     _TMR1L	set	22
  2313  005F                     _GIE	set	95
  2314  005B                     _IOCIE	set	91
  2315  0058                     _IOCIF	set	88
  2316  005E                     _PEIE	set	94
  2317  0060                     _RA0	set	96
  2318  0064                     _RA4	set	100
  2319  0066                     _RA6	set	102
  2320  0067                     _RA7	set	103
  2321  0068                     _RB0	set	104
  2322  006B                     _RB3	set	107
  2323  006C                     _RB4	set	108
  2324  006D                     _RB5	set	109
  2325  0070                     _RC0	set	112
  2326  0071                     _RC1	set	113
  2327  0073                     _RC3	set	115
  2328  0074                     _RC4	set	116
  2329  0075                     _RC5	set	117
  2330  0088                     _TMR1IF	set	136
  2331  009D                     _ADCON0	set	157
  2332  009E                     _ADCON1	set	158
  2333  009C                     _ADRESH	set	156
  2334  009B                     _ADRESL	set	155
  2335  0099                     _OSCCON	set	153
  2336  008C                     _TRISA	set	140
  2337  008D                     _TRISB	set	141
  2338  008E                     _TRISC	set	142
  2339  0097                     _WDTCON	set	151
  2340  04E9                     _GO_nDONE	set	1257
  2341  0488                     _TMR1IE	set	1160
  2342  0117                     _FVRCON	set	279
  2343  010C                     _LATA	set	268
  2344  010D                     _LATB	set	269
  2345  010E                     _LATC	set	270
  2346  018C                     _ANSELA	set	396
  2347  018D                     _ANSELB	set	397
  2348  018E                     _ANSELC	set	398
  2349  0192                     _PMADRH	set	402
  2350  0191                     _PMADRL	set	401
  2351  0196                     _PMCON2	set	406
  2352  0194                     _PMDATH	set	404
  2353  0193                     _PMDATL	set	403
  2354  0CAE                     _CFGS	set	3246
  2355  0CAC                     _FREE	set	3244
  2356  0CAD                     _LWLO	set	3245
  2357  0CA8                     _RD	set	3240
  2358  0CA9                     _WR	set	3241
  2359  0CAA                     _WREN	set	3242
  2360  1069                     _WPUB1	set	4201
  2361  106A                     _WPUB2	set	4202
  2362  0396                     _IOCBF	set	918
  2363  0395                     _IOCBN	set	917
  2364  0394                     _IOCBP	set	916
  2365  1CB2                     _IOCBF2	set	7346
  2366                           
  2367                           ; #config settings
  2368  0000                     
  2369                           	psect	cinit
  2370  0015                     start_initialization:	
  2371  0015                     __initialization:	
  2372                           
  2373                           ; Clear objects allocated to BITCOMMON
  2374  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2375                           
  2376                           ; Clear objects allocated to COMMON
  2377  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2378  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2379  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2380  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2381  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2382                           
  2383                           ; Clear objects allocated to BANK0
  2384  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK1
  2387  001C  30A0               	movlw	low __pbssBANK1
  2388  001D  0084               	movwf	4
  2389  001E  3000               	movlw	high __pbssBANK1
  2390  001F  0085               	movwf	5
  2391  0020  3048               	movlw	72
  2392  0021  319C  2432  3180   	fcall	clear_ram0
  2393                           
  2394                           ; Clear objects allocated to BANK2
  2395  0024  3020               	movlw	low __pbssBANK2
  2396  0025  0084               	movwf	4
  2397  0026  3001               	movlw	high __pbssBANK2
  2398  0027  0085               	movwf	5
  2399  0028  3050               	movlw	80
  2400  0029  319C  2432  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK3
  2403  002C  30A0               	movlw	low __pbssBANK3
  2404  002D  0084               	movwf	4
  2405  002E  3001               	movlw	high __pbssBANK3
  2406  002F  0085               	movwf	5
  2407  0030  3046               	movlw	70
  2408  0031  319C  2432  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Initialize objects allocated to BANK4
  2411  0034  30BF               	movlw	low __pidataBANK4
  2412  0035  0084               	movwf	4
  2413  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2414  0037  0085               	movwf	5
  2415  0038  3020               	movlw	low __pdataBANK4
  2416  0039  0086               	movwf	6
  2417  003A  3002               	movlw	high __pdataBANK4
  2418  003B  0087               	movwf	7
  2419  003C  3020               	movlw	32
  2420  003D  319C  242C         	fcall	init_ram
  2421  003F                     end_of_initialization:	
  2422                           ;End of C runtime variable initialization code
  2423                           
  2424  003F                     __end_of__initialization:	
  2425  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2426  0040  0020               	movlb	0
  2427  0041  3196  2E3E         	ljmp	_main	;jump to C main() function
  2428                           
  2429                           	psect	bitbssCOMMON
  2430  03E8                     __pbitbssCOMMON:	
  2431  03E8                     _Receive_OK:	
  2432  03E8                     	ds	1
  2433  03E9                     _Transceive_OK:	
  2434  03E9                     	ds	1
  2435                           
  2436                           	psect	bssCOMMON
  2437  0078                     __pbssCOMMON:	
  2438  0078                     _DelayOff:	
  2439  0078                     	ds	1
  2440  0079                     _DimmerLightsIntr:	
  2441  0079                     	ds	1
  2442  007A                     _LED:	
  2443  007A                     	ds	1
  2444  007B                     _SPI0Buffer:	
  2445  007B                     	ds	1
  2446  007C                     _Sw:	
  2447  007C                     	ds	1
  2448                           
  2449                           	psect	bssBANK0
  2450  006F                     __pbssBANK0:	
  2451  006F                     _DimmerLights:	
  2452  006F                     	ds	1
  2453                           
  2454                           	psect	bssBANK1
  2455  00A0                     __pbssBANK1:	
  2456  00A0                     _myMain:	
  2457  00A0                     	ds	15
  2458  00AF                     _Buz1:	
  2459  00AF                     	ds	12
  2460  00BB                     _RF1:	
  2461  00BB                     	ds	12
  2462  00C7                     _Timer1:	
  2463  00C7                     	ds	3
  2464  00CA                     _WDT:	
  2465  00CA                     	ds	2
  2466  00CC                     _CRC:	
  2467  00CC                     	ds	1
  2468  00CD                     _DimmerLights11:	
  2469  00CD                     	ds	1
  2470  00CE                     _DimmerLightsIntrIOC:	
  2471  00CE                     	ds	1
  2472  00CF                     _RSSI:	
  2473  00CF                     	ds	1
  2474  00D0                     _Rx_Length:	
  2475  00D0                     	ds	1
  2476  00D1                     _SwDetect:	
  2477  00D1                     	ds	1
  2478  00D2                     _Tx_Length:	
  2479  00D2                     	ds	1
  2480  00D3                     _r_address:	
  2481  00D3                     	ds	1
  2482  00D4                     _r_data:	
  2483  00D4                     	ds	1
  2484  00D5                     _s_data:	
  2485  00D5                     	ds	1
  2486  00D6                     _Temp:	
  2487  00D6                     	ds	18
  2488                           
  2489                           	psect	bssBANK2
  2490  0120                     __pbssBANK2:	
  2491  0120                     _RF_Data:	
  2492  0120                     	ds	30
  2493  013E                     _Dimmer:	
  2494  013E                     	ds	3
  2495  0141                     _RF_Count:	
  2496  0141                     	ds	2
  2497  0143                     _Load:	
  2498  0143                     	ds	45
  2499                           
  2500                           	psect	bssBANK3
  2501  01A0                     __pbssBANK3:	
  2502  01A0                     _Memory:	
  2503  01A0                     	ds	37
  2504  01C5                     _DimmerLights1:	
  2505  01C5                     	ds	15
  2506  01D4                     _Sw1:	
  2507  01D4                     	ds	9
  2508  01DD                     _DlySw1:	
  2509  01DD                     	ds	5
  2510  01E2                     _VarErrLED:	
  2511  01E2                     	ds	4
  2512                           
  2513                           	psect	dataBANK4
  2514  0220                     __pdataBANK4:	
  2515  0220                     __product:	
  2516  0220                     	ds	32
  2517                           
  2518                           	psect	clrtext
  2519  1C32                     clear_ram0:	
  2520                           ;	Called with FSR0 containing the base address, and
  2521                           ;	WREG with the size to clear
  2522                           
  2523  1C32  0064               	clrwdt	;clear the watchdog before getting into this loop
  2524  1C33                     clrloop0:	
  2525  1C33  0180               	clrf	0	;clear RAM location pointed to by FSR
  2526  1C34  3101               	addfsr 0,1
  2527  1C35  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2528  1C36  2C33               	goto	clrloop0	;have we reached the end yet?
  2529  1C37  3400               	retlw	0	;all done for this memory range, return
  2530                           
  2531                           	psect	inittext
  2532  1C2C                     init_ram:	
  2533  1C2C  00FE               	movwf	126
  2534  1C2D                     initloop:	
  2535  1C2D  0012               	moviw fsr0++
  2536  1C2E  001E               	movwi fsr1++
  2537  1C2F  0BFE               	decfsz	126,f
  2538  1C30  2C2D               	goto	initloop
  2539  1C31  3400               	retlw	0
  2540                           
  2541                           	psect	cstackBANK1
  2542  00E8                     __pcstackBANK1:	
  2543  00E8                     setRF_Main@loop_f:	
  2544                           
  2545                           ; 1 bytes @ 0x0
  2546  00E8                     	ds	1
  2547  00E9                     setRF_Main@Receive_OK:	
  2548                           
  2549                           ; 1 bytes @ 0x1
  2550  00E9                     	ds	1
  2551  00EA                     setRF_Main@error:	
  2552                           
  2553                           ; 1 bytes @ 0x2
  2554  00EA                     	ds	1
  2555  00EB                     ?_main:	
  2556  00EB                     main@argc:	
  2557                           ; 2 bytes @ 0x3
  2558                           
  2559                           
  2560                           ; 2 bytes @ 0x3
  2561  00EB                     	ds	2
  2562  00ED                     main@argv:	
  2563                           
  2564                           ; 2 bytes @ 0x5
  2565  00ED                     	ds	2
  2566                           
  2567                           	psect	cstackCOMMON
  2568  0070                     __pcstackCOMMON:	
  2569  0070                     ?_Timeout_Counter:	
  2570  0070                     ?_set_TimeoutCleared:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_CC2500_WriteByte:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_CC2500_WriteCommand:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_CC2500_ReadStatus:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_CC2500_ReadByte:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_PowerRST:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_InitSetREG:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_InitPATable:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_ClearTXFIFO:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ClearRXFIFO:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_FrequencyCabr:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_SIDLEMode:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_DlyOff_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DlyOff_Main:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setDimmerLights_ErrorClose:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setDimmerLights_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_Dimmer_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setDimmerLights_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_Line:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setTxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setLED_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setLED_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_Fosc_Set:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_IO_Set:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_TMR1_Set:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_ADC_Set:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_IOC_Set:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_WDT_Set:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_IOC_ISR:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_TMR1_ISR:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_Flash_Memory_Write:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Flash_Memory_Modify:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_WDT_Clearing:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_myMain_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Temp_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Load_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Switch_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_RF_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_getLoad_AD:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_getTemp_AD:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_my_MainTimer:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Temp_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Load_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Switch_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_RF_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setLoad_AH_AL_Restore:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setTemp_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setTemp_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_setRF_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setRF_Main:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_RF_RxDisable:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_getRxData:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setLog_Code:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setControl_Lights_Table:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setRFSW_Control:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setRFSW_AdjControl:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setRF_DimmerValue:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setSw_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setSw_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Buzzer_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Buzzer_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_CC2500_TxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_CC2500_RxData:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_CC2500_PowerOnInitial:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DelayOffPointSelect:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_DelayOff_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DelayOff_Main:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DimmerIntrIOCPointSelect:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ??_DimmerIntrIOCPointSelect:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_DimmerIntrPointSelect:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ??_DimmerIntrPointSelect:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setDimmerLights_IntrControl:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DimmerLightsPointSelect:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DimmerLights_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DimmerLights_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setDimmerLights_SwOn:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setDimmerLights_SwOff:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setDimmerLights_AdjControl:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setDimmerLights_AdjRF:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_LedPointSelect:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_LED_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_LED_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_Mcu_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_ISR:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_setDimmerReClock:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Flash_Memory_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_Flash_Memory_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Unlock:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Flash_Memory_Erasing:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_setMemory_Modify:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_setMemory_LoopSave:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_WDT_Main:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setMain_Exception:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_setRF_Learn:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_TouchPower:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_SwPointSelect:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_DelayTimejudge:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_getMain_All_Error_Status:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ?_getLoad_OK:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_getMain_LightsStatus:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_setPercentValue:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getPercentValue:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_Flash_Memory_Read:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getRF_KeyStatus:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getSw_KeyStatus:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getDelayOff_GO:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getDimmerLights_Status:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getAll_DimmerLights_AdjGO:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmer_LoadOK:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getDimmerLights_Line:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getMain_Lights_Count:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getMain_LoadOK:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     getSw_KeyStatus@sw:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912                           
  2913                           ; 1 bytes @ 0x0
  2914  0070                     	ds	1
  2915  0071                     DimmerIntrIOCPointSelect@lights:	
  2916  0071                     DimmerIntrPointSelect@lights:	
  2917                           ; 1 bytes @ 0x1
  2918                           
  2919                           
  2920                           ; 1 bytes @ 0x1
  2921  0071                     	ds	1
  2922  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2923  0072                     ??_setDimmerLights_IntrControl:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929                           
  2930                           ; 1 bytes @ 0x2
  2931  0072                     	ds	1
  2932  0073                     ??_IOC_ISR:	
  2933  0073                     ??_setDimmerReClock:	
  2934                           ; 0 bytes @ 0x3
  2935                           
  2936                           
  2937                           ; 0 bytes @ 0x3
  2938  0073                     	ds	3
  2939  0076                     setDimmerLights_IntrControl@lights:	
  2940                           
  2941                           ; 1 bytes @ 0x6
  2942  0076                     	ds	1
  2943  0077                     ??_TMR1_ISR:	
  2944  0077                     ??_ISR:	
  2945                           ; 0 bytes @ 0x7
  2946                           
  2947                           
  2948                           ; 0 bytes @ 0x7
  2949  0077                     	ds	1
  2950                           
  2951                           	psect	cstackBANK0
  2952  0020                     __pcstackBANK0:	
  2953  0020                     ??_Timeout_Counter:	
  2954  0020                     ??_set_TimeoutCleared:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_CC2500_WriteByte:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_CC2500_ReadByte:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ?_DelayTime_1us:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_Dimmer_Initialization:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_getMain_All_Error_Status:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_getLoad_OK:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_setDimmerLights_Line:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ?_setRF_DimmerLights:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_setTxData:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ??_Fosc_Set:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_IO_Set:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_TMR1_Set:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ??_ADC_Set:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_IOC_Set:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_WDT_Set:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_Flash_Memory_Read:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ?_setMemory_Data:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_Flash_Memory_Write:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ??_WDT_Clearing:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_myMain_Initialization:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_Temp_Initialization:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_setLoad_AH_AL_Restore:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_setTemp_Initialization:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_setRF_Initialization:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getRF_KeyStatus:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getSw_KeyStatus:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_Buzzer_Initialization:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_Buzzer_Main:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_DelayOffPointSelect:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_DimmerLightsPointSelect:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_getAll_DimmerLights_AdjGO:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_getDimmer_LoadOK:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_getDimmerLights_Line:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_LedPointSelect:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_Flash_Memory_Unlock:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Flash_Memory_Erasing:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_setMemory_Modify:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_setMemory_LoopSave:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_WDT_Main:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_getMain_Lights_Count:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_setRF_Learn:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_TouchPower:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_SwPointSelect:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ?___bmul:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ?_getBuz_GO:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0020                     ?_getAD:	
  3093                           ; 2 bytes @ 0x0
  3094                           
  3095  0020                     ?___awdiv:	
  3096                           ; 2 bytes @ 0x0
  3097                           
  3098  0020                     ?___ftpack:	
  3099                           ; 2 bytes @ 0x0
  3100                           
  3101  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3102                           ; 3 bytes @ 0x0
  3103                           
  3104  0020                     getDimmer_LoadOK@status:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0020                     setDimmerLights_Line@lights:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0020                     getDimmerLights_Line@line:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0020                     getAD@adcon1:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0020                     setMemory_Data@data:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0020                     getMain_Lights_Count@count:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0020                     getLoad_OK@ok:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0020                     setRF_DimmerLights@on:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0020                     ___bmul@multiplicand:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     DelayTime_1us@count:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0020                     ___awdiv@divisor:	
  3135                           ; 2 bytes @ 0x0
  3136                           
  3137  0020                     ___ftpack@arg:	
  3138                           ; 2 bytes @ 0x0
  3139                           
  3140                           
  3141                           ; 3 bytes @ 0x0
  3142  0020                     	ds	1
  3143  0021                     ??_setRF_DimmerLights:	
  3144  0021                     ??_setMemory_Data:	
  3145                           ; 0 bytes @ 0x1
  3146                           
  3147  0021                     ??_RF_Initialization:	
  3148                           ; 0 bytes @ 0x1
  3149                           
  3150  0021                     ??_Mcu_Initialization:	
  3151                           ; 0 bytes @ 0x1
  3152                           
  3153  0021                     ??_getMain_LoadOK:	
  3154                           ; 0 bytes @ 0x1
  3155                           
  3156  0021                     ??___bmul:	
  3157                           ; 0 bytes @ 0x1
  3158                           
  3159  0021                     CC2500_WriteByte@loop_a:	
  3160                           ; 0 bytes @ 0x1
  3161                           
  3162  0021                     CC2500_ReadByte@loop_b:	
  3163                           ; 1 bytes @ 0x1
  3164                           
  3165  0021                     DelayOffPointSelect@sw:	
  3166                           ; 1 bytes @ 0x1
  3167                           
  3168  0021                     DimmerLightsPointSelect@lights:	
  3169                           ; 1 bytes @ 0x1
  3170                           
  3171  0021                     LedPointSelect@led:	
  3172                           ; 1 bytes @ 0x1
  3173                           
  3174  0021                     Flash_Memory_Read@i:	
  3175                           ; 1 bytes @ 0x1
  3176                           
  3177  0021                     Flash_Memory_Write@i:	
  3178                           ; 1 bytes @ 0x1
  3179                           
  3180  0021                     setMemory_Modify@command:	
  3181                           ; 1 bytes @ 0x1
  3182                           
  3183  0021                     setMemory_LoopSave@command:	
  3184                           ; 1 bytes @ 0x1
  3185                           
  3186  0021                     getMain_Lights_Count@status2:	
  3187                           ; 1 bytes @ 0x1
  3188                           
  3189  0021                     setLoad_AH_AL_Restore@i:	
  3190                           ; 1 bytes @ 0x1
  3191                           
  3192  0021                     setRF_Learn@command:	
  3193                           ; 1 bytes @ 0x1
  3194                           
  3195  0021                     getRF_KeyStatus@key:	
  3196                           ; 1 bytes @ 0x1
  3197                           
  3198  0021                     SwPointSelect@sw:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0021                     getSw_KeyStatus@status:	
  3202                           ; 1 bytes @ 0x1
  3203                           
  3204  0021                     _getMain_All_Error_Status$3747:	
  3205                           ; 1 bytes @ 0x1
  3206                           
  3207                           
  3208                           ; 2 bytes @ 0x1
  3209  0021                     	ds	1
  3210  0022                     ??_CC2500_WriteCommand:	
  3211  0022                     ??_CC2500_ReadStatus:	
  3212                           ; 0 bytes @ 0x2
  3213                           
  3214  0022                     ??_DelayTime_1us:	
  3215                           ; 0 bytes @ 0x2
  3216                           
  3217  0022                     ?_CC2500_WriteREG:	
  3218                           ; 0 bytes @ 0x2
  3219                           
  3220  0022                     ??_DlyOff_Initialization:	
  3221                           ; 0 bytes @ 0x2
  3222                           
  3223  0022                     ??_setDimmerLights_Initialization:	
  3224                           ; 0 bytes @ 0x2
  3225                           
  3226  0022                     ?_setDimmerLights_Trigger:	
  3227                           ; 0 bytes @ 0x2
  3228                           
  3229  0022                     ?_setDimmerLights_TriggerAdj:	
  3230                           ; 0 bytes @ 0x2
  3231                           
  3232  0022                     ?_setLED:	
  3233                           ; 0 bytes @ 0x2
  3234                           
  3235  0022                     ??_setLED_Main:	
  3236                           ; 0 bytes @ 0x2
  3237                           
  3238  0022                     ??_Load_Initialization:	
  3239                           ; 0 bytes @ 0x2
  3240                           
  3241  0022                     ??_getBuz_GO:	
  3242                           ; 0 bytes @ 0x2
  3243                           
  3244  0022                     ??_getDelayOff_GO:	
  3245                           ; 0 bytes @ 0x2
  3246                           
  3247  0022                     ??_getDimmerLights_Status:	
  3248                           ; 0 bytes @ 0x2
  3249                           
  3250  0022                     CC2500_WriteREG@value:	
  3251                           ; 0 bytes @ 0x2
  3252                           
  3253  0022                     DlyOff_Initialization@sw:	
  3254                           ; 1 bytes @ 0x2
  3255                           
  3256  0022                     getDelayOff_GO@sw:	
  3257                           ; 1 bytes @ 0x2
  3258                           
  3259  0022                     getDimmerLights_Status@lights:	
  3260                           ; 1 bytes @ 0x2
  3261                           
  3262  0022                     setDimmerLights_Trigger@command:	
  3263                           ; 1 bytes @ 0x2
  3264                           
  3265  0022                     setDimmerLights_TriggerAdj@command:	
  3266                           ; 1 bytes @ 0x2
  3267                           
  3268  0022                     setLED@command:	
  3269                           ; 1 bytes @ 0x2
  3270                           
  3271  0022                     Flash_Memory_Read@address:	
  3272                           ; 1 bytes @ 0x2
  3273                           
  3274  0022                     setMemory_Data@address:	
  3275                           ; 1 bytes @ 0x2
  3276                           
  3277  0022                     getMain_Lights_Count@status3:	
  3278                           ; 1 bytes @ 0x2
  3279                           
  3280  0022                     getMain_LoadOK@ok:	
  3281                           ; 1 bytes @ 0x2
  3282                           
  3283  0022                     _getRF_KeyStatus$5491:	
  3284                           ; 1 bytes @ 0x2
  3285                           
  3286  0022                     _getSw_KeyStatus$6547:	
  3287                           ; 1 bytes @ 0x2
  3288                           
  3289  0022                     ___bmul@product:	
  3290                           ; 1 bytes @ 0x2
  3291                           
  3292  0022                     DelayTime_1us@i:	
  3293                           ; 1 bytes @ 0x2
  3294                           
  3295  0022                     ___awdiv@dividend:	
  3296                           ; 2 bytes @ 0x2
  3297                           
  3298                           
  3299                           ; 2 bytes @ 0x2
  3300  0022                     	ds	1
  3301  0023                     ??_CC2500_WriteREG:	
  3302  0023                     ??_setDimmerLights_Trigger:	
  3303                           ; 0 bytes @ 0x3
  3304                           
  3305  0023                     ??_setDimmerLights_TriggerAdj:	
  3306                           ; 0 bytes @ 0x3
  3307                           
  3308  0023                     ??_setLED:	
  3309                           ; 0 bytes @ 0x3
  3310                           
  3311  0023                     ??_DelayOff_Initialization:	
  3312                           ; 0 bytes @ 0x3
  3313                           
  3314  0023                     ??_getAD:	
  3315                           ; 0 bytes @ 0x3
  3316                           
  3317  0023                     CC2500_WriteCommand@command:	
  3318                           ; 0 bytes @ 0x3
  3319                           
  3320  0023                     CC2500_ReadStatus@status_addr:	
  3321                           ; 1 bytes @ 0x3
  3322                           
  3323  0023                     getDelayOff_GO@go:	
  3324                           ; 1 bytes @ 0x3
  3325                           
  3326  0023                     setDimmerLights_Initialization@lights:	
  3327                           ; 1 bytes @ 0x3
  3328                           
  3329  0023                     getDimmerLights_Status@status:	
  3330                           ; 1 bytes @ 0x3
  3331                           
  3332  0023                     setLED@led:	
  3333                           ; 1 bytes @ 0x3
  3334                           
  3335  0023                     getAD@adcon0:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338  0023                     Flash_Memory_Read@ret:	
  3339                           ; 1 bytes @ 0x3
  3340                           
  3341  0023                     getMain_Lights_Count@status1:	
  3342                           ; 1 bytes @ 0x3
  3343                           
  3344  0023                     setRF_DimmerLights@status:	
  3345                           ; 1 bytes @ 0x3
  3346                           
  3347  0023                     ___bmul@multiplier:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0023                     ___ftpack@exp:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0023                     _getMain_All_Error_Status$3756:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356                           
  3357                           ; 2 bytes @ 0x3
  3358  0023                     	ds	1
  3359  0024                     ??_CC2500_ClearTXFIFO:	
  3360  0024                     ??_CC2500_ClearRXFIFO:	
  3361                           ; 0 bytes @ 0x4
  3362                           
  3363  0024                     ??_CC2500_SIDLEMode:	
  3364                           ; 0 bytes @ 0x4
  3365                           
  3366  0024                     ??_DelayTimejudge:	
  3367                           ; 0 bytes @ 0x4
  3368                           
  3369  0024                     ??_getMain_LightsStatus:	
  3370                           ; 0 bytes @ 0x4
  3371                           
  3372  0024                     ??_setLED_Initialization:	
  3373                           ; 0 bytes @ 0x4
  3374                           
  3375  0024                     ??_Flash_Memory_Modify:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0024                     ??_getLoad_AD:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0024                     ??_getTemp_AD:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0024                     ??_RF_RxDisable:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0024                     ??_setSw_Initialization:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0024                     ??_CC2500_TxData:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0024                     ??_CC2500_RxData:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0024                     ??_DimmerLights_Initialization:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??___awdiv:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     CC2500_WriteREG@w_addr:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     setDimmerLights_Trigger@lights:	
  3406                           ; 1 bytes @ 0x4
  3407                           
  3408  0024                     setDimmerLights_TriggerAdj@lights:	
  3409                           ; 1 bytes @ 0x4
  3410                           
  3411  0024                     setLED_Initialization@led:	
  3412                           ; 1 bytes @ 0x4
  3413                           
  3414  0024                     setLED_Main@led:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  0024                     setRF_DimmerLights@lights:	
  3418                           ; 1 bytes @ 0x4
  3419                           
  3420  0024                     setSw_Initialization@sw:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  0024                     ___ftpack@sign:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0024                     getBuz_GO@i:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429  0024                     DelayTime_1us@j:	
  3430                           ; 2 bytes @ 0x4
  3431                           
  3432                           
  3433                           ; 2 bytes @ 0x4
  3434  0024                     	ds	1
  3435  0025                     ??_CC2500_InitSetREG:	
  3436  0025                     ??_CC2500_InitPATable:	
  3437                           ; 0 bytes @ 0x5
  3438                           
  3439  0025                     ??_Switch_Initialization:	
  3440                           ; 0 bytes @ 0x5
  3441                           
  3442  0025                     ??___ftpack:	
  3443                           ; 0 bytes @ 0x5
  3444                           
  3445  0025                     ??_setDimmerLights_AdjControl:	
  3446                           ; 0 bytes @ 0x5
  3447                           
  3448  0025                     ??_LED_Initialization:	
  3449                           ; 0 bytes @ 0x5
  3450                           
  3451  0025                     ??_LED_Main:	
  3452                           ; 0 bytes @ 0x5
  3453                           
  3454  0025                     CC2500_TxData@loop_e:	
  3455                           ; 0 bytes @ 0x5
  3456                           
  3457  0025                     CC2500_RxData@loop_f:	
  3458                           ; 1 bytes @ 0x5
  3459                           
  3460  0025                     Flash_Memory_Modify@i:	
  3461                           ; 1 bytes @ 0x5
  3462                           
  3463  0025                     getMain_LightsStatus@count:	
  3464                           ; 1 bytes @ 0x5
  3465                           
  3466  0025                     getMain_All_Error_Status@command:	
  3467                           ; 1 bytes @ 0x5
  3468                           
  3469  0025                     getTemp_AD@channel:	
  3470                           ; 1 bytes @ 0x5
  3471                           
  3472  0025                     ___awdiv@counter:	
  3473                           ; 1 bytes @ 0x5
  3474                           
  3475                           
  3476                           ; 1 bytes @ 0x5
  3477  0025                     	ds	1
  3478  0026                     ??_CC2500_PowerRST:	
  3479  0026                     ??_CC2500_FrequencyCabr:	
  3480                           ; 0 bytes @ 0x6
  3481                           
  3482  0026                     CC2500_InitSetREG@temp1:	
  3483                           ; 0 bytes @ 0x6
  3484                           
  3485  0026                     CC2500_InitPATable@temp:	
  3486                           ; 1 bytes @ 0x6
  3487                           
  3488  0026                     DelayTimejudge@i:	
  3489                           ; 1 bytes @ 0x6
  3490                           
  3491  0026                     setDimmerLights_AdjControl@idle:	
  3492                           ; 1 bytes @ 0x6
  3493                           
  3494  0026                     getMain_All_Error_Status@status:	
  3495                           ; 1 bytes @ 0x6
  3496                           
  3497  0026                     getLoad_AD@channel:	
  3498                           ; 1 bytes @ 0x6
  3499                           
  3500  0026                     ___awdiv@sign:	
  3501                           ; 1 bytes @ 0x6
  3502                           
  3503  0026                     getMain_LightsStatus@i:	
  3504                           ; 1 bytes @ 0x6
  3505                           
  3506                           
  3507                           ; 2 bytes @ 0x6
  3508  0026                     	ds	1
  3509  0027                     CC2500_InitSetREG@temp2:	
  3510  0027                     CC2500_InitPATable@loop_d:	
  3511                           ; 1 bytes @ 0x7
  3512                           
  3513  0027                     DelayTimejudge@j:	
  3514                           ; 1 bytes @ 0x7
  3515                           
  3516  0027                     _setDimmerLights_AdjControl$2408:	
  3517                           ; 1 bytes @ 0x7
  3518                           
  3519  0027                     getLoad_AD@k:	
  3520                           ; 1 bytes @ 0x7
  3521                           
  3522  0027                     ___awdiv@quotient:	
  3523                           ; 1 bytes @ 0x7
  3524                           
  3525                           
  3526                           ; 2 bytes @ 0x7
  3527  0027                     	ds	1
  3528  0028                     ?___awtoft:	
  3529  0028                     CC2500_InitSetREG@loop_c:	
  3530                           ; 3 bytes @ 0x8
  3531                           
  3532  0028                     DelayTimejudge@k:	
  3533                           ; 1 bytes @ 0x8
  3534                           
  3535  0028                     setDimmerLights_AdjControl@sw:	
  3536                           ; 1 bytes @ 0x8
  3537                           
  3538  0028                     getMain_LightsStatus@status:	
  3539                           ; 1 bytes @ 0x8
  3540                           
  3541  0028                     getLoad_AD@j:	
  3542                           ; 1 bytes @ 0x8
  3543                           
  3544  0028                     ___awtoft@c:	
  3545                           ; 1 bytes @ 0x8
  3546                           
  3547                           
  3548                           ; 2 bytes @ 0x8
  3549  0028                     	ds	1
  3550  0029                     ??_Load_Main:	
  3551  0029                     ?_setBuz:	
  3552                           ; 0 bytes @ 0x9
  3553                           
  3554  0029                     ??_CC2500_PowerOnInitial:	
  3555                           ; 0 bytes @ 0x9
  3556                           
  3557  0029                     ??_Flash_Memory_Main:	
  3558                           ; 0 bytes @ 0x9
  3559                           
  3560  0029                     DelayTimejudge@value:	
  3561                           ; 0 bytes @ 0x9
  3562                           
  3563  0029                     getLoad_AD@i:	
  3564                           ; 1 bytes @ 0x9
  3565                           
  3566  0029                     setBuz@time:	
  3567                           ; 1 bytes @ 0x9
  3568                           
  3569                           
  3570                           ; 2 bytes @ 0x9
  3571  0029                     	ds	1
  3572  002A                     ?_setDelayOff_GO:	
  3573  002A                     setDelayOff_GO@command:	
  3574                           ; 0 bytes @ 0xA
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0xA
  3578  002A                     	ds	1
  3579  002B                     ??_setBuz:	
  3580  002B                     ??___awtoft:	
  3581                           ; 0 bytes @ 0xB
  3582                           
  3583  002B                     setDelayOff_GO@value:	
  3584                           ; 0 bytes @ 0xB
  3585                           
  3586  002B                     Load_Main@j:	
  3587                           ; 1 bytes @ 0xB
  3588                           
  3589                           
  3590                           ; 1 bytes @ 0xB
  3591  002B                     	ds	1
  3592  002C                     ??_setDelayOff_GO:	
  3593  002C                     setBuz@count:	
  3594                           ; 0 bytes @ 0xC
  3595                           
  3596  002C                     Load_Main@adjgo:	
  3597                           ; 1 bytes @ 0xC
  3598                           
  3599                           
  3600                           ; 1 bytes @ 0xC
  3601  002C                     	ds	1
  3602  002D                     ??_my_MainTimer:	
  3603  002D                     ??_setTemp_Main:	
  3604                           ; 0 bytes @ 0xD
  3605                           
  3606  002D                     ??_setLog_Code:	
  3607                           ; 0 bytes @ 0xD
  3608                           
  3609  002D                     ??_setDimmerLights_SwOn:	
  3610                           ; 0 bytes @ 0xD
  3611                           
  3612  002D                     _Load_Main$4106:	
  3613                           ; 0 bytes @ 0xD
  3614                           
  3615  002D                     ___awtoft@sign:	
  3616                           ; 1 bytes @ 0xD
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0xD
  3620  002D                     	ds	1
  3621  002E                     ?___ftdiv:	
  3622  002E                     ?___ftmul:	
  3623                           ; 3 bytes @ 0xE
  3624                           
  3625  002E                     setDelayOff_GO@sw:	
  3626                           ; 3 bytes @ 0xE
  3627                           
  3628  002E                     setDimmerLights_SwOn@idle:	
  3629                           ; 1 bytes @ 0xE
  3630                           
  3631  002E                     Load_Main@error:	
  3632                           ; 1 bytes @ 0xE
  3633                           
  3634  002E                     ___ftdiv@f2:	
  3635                           ; 1 bytes @ 0xE
  3636                           
  3637  002E                     ___ftmul@f1:	
  3638                           ; 3 bytes @ 0xE
  3639                           
  3640                           
  3641                           ; 3 bytes @ 0xE
  3642  002E                     	ds	1
  3643  002F                     ??_Temp_Main:	
  3644  002F                     ??_setDimmerLights_SwOff:	
  3645                           ; 0 bytes @ 0xF
  3646                           
  3647  002F                     setDimmerLights_SwOn@sw:	
  3648                           ; 0 bytes @ 0xF
  3649                           
  3650  002F                     setDimmerLights_SwOff@command:	
  3651                           ; 1 bytes @ 0xF
  3652                           
  3653  002F                     Load_Main@i:	
  3654                           ; 1 bytes @ 0xF
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0xF
  3658  002F                     	ds	1
  3659  0030                     setDimmerLights_SwOff@sw:	
  3660                           
  3661                           ; 1 bytes @ 0x10
  3662  0030                     	ds	1
  3663  0031                     ??_setDimmerLights_ErrorClose:	
  3664  0031                     ??_setRFSW_Control:	
  3665                           ; 0 bytes @ 0x11
  3666                           
  3667  0031                     ??_setSw_Main:	
  3668                           ; 0 bytes @ 0x11
  3669                           
  3670  0031                     ___ftdiv@f1:	
  3671                           ; 0 bytes @ 0x11
  3672                           
  3673  0031                     ___ftmul@f2:	
  3674                           ; 3 bytes @ 0x11
  3675                           
  3676                           
  3677                           ; 3 bytes @ 0x11
  3678  0031                     	ds	1
  3679  0032                     setDimmerLights_ErrorClose@count:	
  3680  0032                     setRFSW_Control@status:	
  3681                           ; 1 bytes @ 0x12
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x12
  3685  0032                     	ds	1
  3686  0033                     setDimmerLights_ErrorClose@lights:	
  3687  0033                     setRFSW_Control@sw:	
  3688                           ; 1 bytes @ 0x13
  3689                           
  3690  0033                     setSw_Main@sw:	
  3691                           ; 1 bytes @ 0x13
  3692                           
  3693                           
  3694                           ; 1 bytes @ 0x13
  3695  0033                     	ds	1
  3696  0034                     ??___ftdiv:	
  3697  0034                     ??___ftmul:	
  3698                           ; 0 bytes @ 0x14
  3699                           
  3700  0034                     setDimmerLights_ErrorClose@i:	
  3701                           ; 0 bytes @ 0x14
  3702                           
  3703                           
  3704                           ; 2 bytes @ 0x14
  3705  0034                     	ds	2
  3706  0036                     ??_DlyOff_Main:	
  3707  0036                     ??_setMain_Exception:	
  3708                           ; 0 bytes @ 0x16
  3709                           
  3710                           
  3711                           ; 0 bytes @ 0x16
  3712  0036                     	ds	2
  3713  0038                     DlyOff_Main@sw:	
  3714  0038                     setMain_Exception@buz:	
  3715                           ; 1 bytes @ 0x18
  3716                           
  3717  0038                     ___ftdiv@cntr:	
  3718                           ; 1 bytes @ 0x18
  3719                           
  3720  0038                     ___ftmul@exp:	
  3721                           ; 1 bytes @ 0x18
  3722                           
  3723                           
  3724                           ; 1 bytes @ 0x18
  3725  0038                     	ds	1
  3726  0039                     ??_DelayOff_Main:	
  3727  0039                     _setMain_Exception$3731:	
  3728                           ; 0 bytes @ 0x19
  3729                           
  3730  0039                     ___ftdiv@f3:	
  3731                           ; 2 bytes @ 0x19
  3732                           
  3733  0039                     ___ftmul@f3_as_product:	
  3734                           ; 3 bytes @ 0x19
  3735                           
  3736                           
  3737                           ; 3 bytes @ 0x19
  3738  0039                     	ds	2
  3739  003B                     setMain_Exception@status:	
  3740                           
  3741                           ; 1 bytes @ 0x1B
  3742  003B                     	ds	1
  3743  003C                     setMain_Exception@command:	
  3744  003C                     ___ftdiv@exp:	
  3745                           ; 1 bytes @ 0x1C
  3746                           
  3747  003C                     ___ftmul@cntr:	
  3748                           ; 1 bytes @ 0x1C
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x1C
  3752  003C                     	ds	1
  3753  003D                     ??_Switch_Main:	
  3754  003D                     ___ftdiv@sign:	
  3755                           ; 0 bytes @ 0x1D
  3756                           
  3757  003D                     ___ftmul@sign:	
  3758                           ; 1 bytes @ 0x1D
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x1D
  3762  003D                     	ds	1
  3763  003E                     ?___ftneg:	
  3764  003E                     Switch_Main@error:	
  3765                           ; 3 bytes @ 0x1E
  3766                           
  3767  003E                     ___ftneg@f1:	
  3768                           ; 1 bytes @ 0x1E
  3769                           
  3770                           
  3771                           ; 3 bytes @ 0x1E
  3772  003E                     	ds	3
  3773  0041                     ??___ftneg:	
  3774  0041                     ?___ftadd:	
  3775                           ; 0 bytes @ 0x21
  3776                           
  3777  0041                     ___ftadd@f1:	
  3778                           ; 3 bytes @ 0x21
  3779                           
  3780                           
  3781                           ; 3 bytes @ 0x21
  3782  0041                     	ds	3
  3783  0044                     ___ftadd@f2:	
  3784                           
  3785                           ; 3 bytes @ 0x24
  3786  0044                     	ds	3
  3787  0047                     ??___ftadd:	
  3788                           
  3789                           ; 0 bytes @ 0x27
  3790  0047                     	ds	4
  3791  004B                     ___ftadd@sign:	
  3792                           
  3793                           ; 1 bytes @ 0x2B
  3794  004B                     	ds	1
  3795  004C                     ___ftadd@exp2:	
  3796                           
  3797                           ; 1 bytes @ 0x2C
  3798  004C                     	ds	1
  3799  004D                     ___ftadd@exp1:	
  3800                           
  3801                           ; 1 bytes @ 0x2D
  3802  004D                     	ds	1
  3803  004E                     ?___fttol:	
  3804  004E                     ___fttol@f1:	
  3805                           ; 4 bytes @ 0x2E
  3806                           
  3807                           
  3808                           ; 3 bytes @ 0x2E
  3809  004E                     	ds	4
  3810  0052                     ??___fttol:	
  3811                           
  3812                           ; 0 bytes @ 0x32
  3813  0052                     	ds	4
  3814  0056                     ___fttol@sign1:	
  3815                           
  3816                           ; 1 bytes @ 0x36
  3817  0056                     	ds	1
  3818  0057                     ___fttol@lval:	
  3819                           
  3820                           ; 4 bytes @ 0x37
  3821  0057                     	ds	4
  3822  005B                     ___fttol@exp1:	
  3823                           
  3824                           ; 1 bytes @ 0x3B
  3825  005B                     	ds	1
  3826  005C                     ??_setPercentValue:	
  3827  005C                     ??_getPercentValue:	
  3828                           ; 0 bytes @ 0x3C
  3829                           
  3830                           
  3831                           ; 0 bytes @ 0x3C
  3832  005C                     	ds	2
  3833  005E                     getPercentValue@value:	
  3834  005E                     setPercentValue@value:	
  3835                           ; 1 bytes @ 0x3E
  3836                           
  3837                           
  3838                           ; 1 bytes @ 0x3E
  3839  005E                     	ds	1
  3840  005F                     getPercentValue@i:	
  3841  005F                     setPercentValue@i:	
  3842                           ; 3 bytes @ 0x3F
  3843                           
  3844                           
  3845                           ; 3 bytes @ 0x3F
  3846  005F                     	ds	3
  3847  0062                     ?_setDimmerLights:	
  3848  0062                     ?_setDimmerLights_Adj:	
  3849                           ; 0 bytes @ 0x42
  3850                           
  3851  0062                     ??_setDimmerLights_AdjRF:	
  3852                           ; 0 bytes @ 0x42
  3853                           
  3854  0062                     ??_Flash_Memory_Initialization:	
  3855                           ; 0 bytes @ 0x42
  3856                           
  3857  0062                     setDimmerLights@status:	
  3858                           ; 0 bytes @ 0x42
  3859                           
  3860  0062                     setDimmerLights_Adj@status:	
  3861                           ; 1 bytes @ 0x42
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x42
  3865  0062                     	ds	1
  3866  0063                     ??_setDimmerLights:	
  3867  0063                     ??_setDimmerLights_Adj:	
  3868                           ; 0 bytes @ 0x43
  3869                           
  3870  0063                     setDimmerLights_AdjRF@lights:	
  3871                           ; 0 bytes @ 0x43
  3872                           
  3873  0063                     Flash_Memory_Initialization@i:	
  3874                           ; 1 bytes @ 0x43
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0x43
  3878  0063                     	ds	1
  3879  0064                     ??_setRF_DimmerValue:	
  3880                           
  3881                           ; 0 bytes @ 0x44
  3882  0064                     	ds	1
  3883  0065                     setDimmerLights@lights:	
  3884  0065                     setDimmerLights_Adj@lights:	
  3885                           ; 1 bytes @ 0x45
  3886                           
  3887                           
  3888                           ; 1 bytes @ 0x45
  3889  0065                     	ds	1
  3890  0066                     ??_setDimmerLights_Main:	
  3891  0066                     setDimmerLights_Main@lights:	
  3892                           ; 0 bytes @ 0x46
  3893                           
  3894  0066                     setRF_DimmerValue@lights:	
  3895                           ; 1 bytes @ 0x46
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x46
  3899  0066                     	ds	1
  3900  0067                     ??_setRFSW_AdjControl:	
  3901  0067                     ??_DimmerLights_Main:	
  3902                           ; 0 bytes @ 0x47
  3903                           
  3904                           
  3905                           ; 0 bytes @ 0x47
  3906  0067                     	ds	2
  3907  0069                     setRFSW_AdjControl@status:	
  3908  0069                     _DimmerLights_Main$2344:	
  3909                           ; 1 bytes @ 0x49
  3910                           
  3911                           
  3912                           ; 2 bytes @ 0x49
  3913  0069                     	ds	1
  3914  006A                     setRFSW_AdjControl@sw:	
  3915                           
  3916                           ; 1 bytes @ 0x4A
  3917  006A                     	ds	1
  3918  006B                     ??_getRxData:	
  3919  006B                     ??_setControl_Lights_Table:	
  3920                           ; 0 bytes @ 0x4B
  3921                           
  3922                           
  3923                           ; 0 bytes @ 0x4B
  3924  006B                     	ds	1
  3925  006C                     getRxData@error:	
  3926                           
  3927                           ; 1 bytes @ 0x4C
  3928  006C                     	ds	1
  3929  006D                     ??_setRF_Main:	
  3930                           
  3931                           ; 0 bytes @ 0x4D
  3932  006D                     	ds	1
  3933  006E                     ??_RF_Main:	
  3934  006E                     ??_main:	
  3935                           ; 0 bytes @ 0x4E
  3936                           
  3937                           
  3938                           	psect	maintext
  3939  163E                     __pmaintext:	
  3940                           ; 0 bytes @ 0x4E
  3941 ;;
  3942 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3943 ;;
  3944 ;; *************** function _main *****************
  3945 ;; Defined at:
  3946 ;;		line 7 in file "../src/Main_B1.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  argc            2    3[BANK1 ] int 
  3949 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2    3[BANK1 ] int 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 17F/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3961 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;Total ram usage:        4 bytes
  3966 ;; Hardware stack levels required when called:   15
  3967 ;; This function calls:
  3968 ;;		_Buzzer_Initialization
  3969 ;;		_Buzzer_Main
  3970 ;;		_CC2500_PowerOnInitial
  3971 ;;		_DelayOff_Initialization
  3972 ;;		_DelayOff_Main
  3973 ;;		_DimmerLights_Initialization
  3974 ;;		_DimmerLights_Main
  3975 ;;		_Flash_Memory_Initialization
  3976 ;;		_Flash_Memory_Main
  3977 ;;		_LED_Initialization
  3978 ;;		_LED_Main
  3979 ;;		_Load_Initialization
  3980 ;;		_Load_Main
  3981 ;;		_Mcu_Initialization
  3982 ;;		_RF_Initialization
  3983 ;;		_RF_Main
  3984 ;;		_Switch_Initialization
  3985 ;;		_Switch_Main
  3986 ;;		_Temp_Initialization
  3987 ;;		_Temp_Main
  3988 ;;		_WDT_Main
  3989 ;;		_getLoad_AD
  3990 ;;		_getTemp_AD
  3991 ;;		_myMain_Initialization
  3992 ;;		_my_MainTimer
  3993 ;; This function is called by:
  3994 ;;		Startup code after reset
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _main
  4000  163E                     _main:	
  4001                           
  4002                           ;Main_B1.c: 8: myMain_Initialization();
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4006  163E  319D  254E  3196   	fcall	_myMain_Initialization
  4007                           
  4008                           ;Main_B1.c: 9: Mcu_Initialization();
  4009  1641  319D  25F3  3196   	fcall	_Mcu_Initialization
  4010                           
  4011                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4012  1644  3186  2611  3196   	fcall	_Flash_Memory_Initialization
  4013                           
  4014                           ;Main_B1.c: 11: LED_Initialization();
  4015  1647  319C  2410  3196   	fcall	_LED_Initialization
  4016                           
  4017                           ;Main_B1.c: 12: Buzzer_Initialization();
  4018  164A  319B  23E9  3196   	fcall	_Buzzer_Initialization
  4019                           
  4020                           ;Main_B1.c: 14: ;;
  4021                           ;Main_B1.c: 15: Temp_Initialization();
  4022  164D  319B  23F2  3196   	fcall	_Temp_Initialization
  4023                           
  4024                           ;Main_B1.c: 16: Load_Initialization();
  4025  1650  319C  2421  3196   	fcall	_Load_Initialization
  4026                           
  4027                           ;Main_B1.c: 17: ;;
  4028                           ;Main_B1.c: 18: DelayOff_Initialization();
  4029  1653  319C  2408  3196   	fcall	_DelayOff_Initialization
  4030                           
  4031                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4032  1656  319D  2515  3196   	fcall	_DimmerLights_Initialization
  4033                           
  4034                           ;Main_B1.c: 21: ;;
  4035                           ;Main_B1.c: 22: ;;
  4036                           ;Main_B1.c: 23: ;;
  4037                           ;Main_B1.c: 24: Switch_Initialization();
  4038  1659  3188  2000  3196   	fcall	_Switch_Initialization
  4039                           
  4040                           ;Main_B1.c: 25: RF_Initialization();
  4041  165C  319B  23EC  3196   	fcall	_RF_Initialization
  4042                           
  4043                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4044  165F  319E  267A  3196   	fcall	_CC2500_PowerOnInitial
  4045  1662                     l7908:	
  4046                           ;Main_B1.c: 27: ;;
  4047                           ;Main_B1.c: 28: ;;
  4048                           ;Main_B1.c: 30: while (1) {
  4049                           
  4050                           
  4051                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4052  1662  0021               	movlb	1	; select bank1
  4053  1663  1C20               	btfss	_myMain^(0+128),0
  4054  1664  2E6D               	goto	l7912
  4055                           
  4056                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4057  1665  3005               	movlw	5
  4058  1666  318B  23DD  3196   	fcall	_getLoad_AD
  4059                           
  4060                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4061  1669  3009               	movlw	9
  4062  166A  3193  23BF  3196   	fcall	_getTemp_AD
  4063  166D                     l7912:	
  4064                           
  4065                           ;Main_B1.c: 57: }
  4066                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4067  166D  0021               	movlb	1	; select bank1
  4068  166E  1C47               	btfss	_Timer1^(0+128),0
  4069  166F  2E62               	goto	l7908
  4070                           
  4071                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4072  1670  1047               	bcf	_Timer1^(0+128),0
  4073                           
  4074                           ;Main_B1.c: 95: my_MainTimer();
  4075  1671  3188  20C3  3196   	fcall	_my_MainTimer
  4076                           
  4077                           ;Main_B1.c: 96: WDT_Main();
  4078  1674  319E  2605  3196   	fcall	_WDT_Main
  4079                           
  4080                           ;Main_B1.c: 97: ;;
  4081                           ;Main_B1.c: 98: ;;
  4082                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4083  1677  0021               	movlb	1	; select bank1
  4084  1678  1C20               	btfss	_myMain^(0+128),0
  4085  1679  2E62               	goto	l7908
  4086                           
  4087                           ;Main_B1.c: 100: Flash_Memory_Main();
  4088  167A  3193  2353  3196   	fcall	_Flash_Memory_Main
  4089                           
  4090                           ;Main_B1.c: 102: LED_Main();
  4091  167D  319C  2414  3196   	fcall	_LED_Main
  4092                           
  4093                           ;Main_B1.c: 103: Buzzer_Main();
  4094  1680  3194  24FF  3196   	fcall	_Buzzer_Main
  4095                           
  4096                           ;Main_B1.c: 105: ;;
  4097                           ;Main_B1.c: 106: Temp_Main();
  4098  1683  319B  23F5  3196   	fcall	_Temp_Main
  4099                           
  4100                           ;Main_B1.c: 107: Load_Main();
  4101  1686  3182  22F8  3196   	fcall	_Load_Main
  4102                           
  4103                           ;Main_B1.c: 108: ;;
  4104                           ;Main_B1.c: 110: ;;
  4105                           ;Main_B1.c: 111: DimmerLights_Main();
  4106  1689  3191  21EC  3196   	fcall	_DimmerLights_Main
  4107                           
  4108                           ;Main_B1.c: 112: Switch_Main();
  4109  168C  319F  277F  3196   	fcall	_Switch_Main
  4110                           
  4111                           ;Main_B1.c: 113: ;;
  4112                           ;Main_B1.c: 114: ;;
  4113                           ;Main_B1.c: 116: RF_Main();
  4114  168F  319B  23EF  3196   	fcall	_RF_Main
  4115                           
  4116                           ;Main_B1.c: 117: DelayOff_Main();
  4117  1692  319C  240C  3196   	fcall	_DelayOff_Main
  4118                           
  4119                           ;Main_B1.c: 118: ;;
  4120                           ;Main_B1.c: 119: ;;
  4121  1695  2E62               	goto	l7908
  4122  1696                     __end_of_main:	
  4123                           ;Main_B1.c: 126: }
  4124                           ;Main_B1.c: 127: }
  4125                           ;Main_B1.c: 161: }
  4126                           ;Main_B1.c: 162: return (0);
  4127                           ;	Return value of _main is never used
  4128                           
  4129                           
  4130                           	psect	text1
  4131  08C3                     __ptext1:	
  4132 ;; *************** function _my_MainTimer *****************
  4133 ;; Defined at:
  4134 ;;		line 181 in file "../src/Main_B1.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;Total ram usage:        0 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    7
  4155 ;; This function calls:
  4156 ;;		_setBuz
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _my_MainTimer
  4164  08C3                     _my_MainTimer:	
  4165                           
  4166                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4170  08C3  0021               	movlb	1	; select bank1
  4171  08C4  1820               	btfsc	_myMain^(0+128),0
  4172  08C5  28E5               	goto	l7648
  4173                           
  4174                           ;Main_B1.c: 184: myMain.PowerCount++;
  4175  08C6  3001               	movlw	1
  4176  08C7  07A1               	addwf	(_myMain^(0+128)+1),f
  4177  08C8  3000               	movlw	0
  4178  08C9  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4179                           
  4180                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  4181  08CA  3001               	movlw	1
  4182  08CB  3EA0               	addlw	_myMain& (0+255)
  4183  08CC  0086               	movwf	6
  4184  08CD  0187               	clrf	7
  4185  08CE  3F40               	moviw [0]fsr1
  4186  08CF  3A96               	xorlw	150
  4187  08D0  1D03               	skipz
  4188  08D1  28D4               	goto	u7525
  4189  08D2  3F41               	moviw [1]fsr1
  4190  08D3  3A00               	xorlw	0
  4191  08D4                     u7525:	
  4192  08D4  1D03               	skipz
  4193  08D5  290E               	goto	l7664
  4194                           
  4195                           ;Main_B1.c: 186: {
  4196                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  4197  08D6  01A1               	clrf	(_myMain^(0+128)+1)
  4198  08D7  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4199                           
  4200                           ;Main_B1.c: 188: myMain.PowerON = 1;
  4201  08D8  1420               	bsf	_myMain^(0+128),0
  4202                           
  4203                           ;Main_B1.c: 193: setBuz(3, 50);
  4204  08D9  3032               	movlw	50
  4205  08DA  0020               	movlb	0	; select bank0
  4206  08DB  00A9               	movwf	setBuz@time
  4207  08DC  3000               	movlw	0
  4208  08DD  00AA               	movwf	setBuz@time+1
  4209  08DE  3003               	movlw	3
  4210  08DF  3196  2696  3188   	fcall	_setBuz
  4211                           
  4212                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4213  08E2  0021               	movlb	1	; select bank1
  4214  08E3  1620               	bsf	_myMain^(0+128),4
  4215                           
  4216                           ;Main_B1.c: 203: }
  4217                           ;Main_B1.c: 204: } else {
  4218  08E4  290E               	goto	l7664
  4219  08E5                     l7648:	
  4220                           
  4221                           ;Main_B1.c: 205: myMain.PowerCount++;
  4222  08E5  3001               	movlw	1
  4223  08E6  07A1               	addwf	(_myMain^(0+128)+1),f
  4224  08E7  3000               	movlw	0
  4225  08E8  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4226                           
  4227                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  4228  08E9  3001               	movlw	1
  4229  08EA  3EA0               	addlw	_myMain& (0+255)
  4230  08EB  0086               	movwf	6
  4231  08EC  0187               	clrf	7
  4232  08ED  3F40               	moviw [0]fsr1
  4233  08EE  3A64               	xorlw	100
  4234  08EF  1D03               	skipz
  4235  08F0  28F3               	goto	u7535
  4236  08F1  3F41               	moviw [1]fsr1
  4237  08F2  3A00               	xorlw	0
  4238  08F3                     u7535:	
  4239  08F3  1D03               	skipz
  4240  08F4  28F7               	goto	l7654
  4241                           
  4242                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  4243  08F5  01A1               	clrf	(_myMain^(0+128)+1)
  4244  08F6  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4245  08F7                     l7654:	
  4246                           
  4247                           ;Main_B1.c: 215: }
  4248                           ;Main_B1.c: 223: myMain.Count1++;
  4249  08F7  3001               	movlw	1
  4250  08F8  07A5               	addwf	(_myMain^(0+128)+5),f
  4251  08F9  3000               	movlw	0
  4252  08FA  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4253                           
  4254                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  4255  08FB  3005               	movlw	5
  4256  08FC  3EA0               	addlw	_myMain& (0+255)
  4257  08FD  0086               	movwf	6
  4258  08FE  0187               	clrf	7
  4259  08FF  3F40               	moviw [0]fsr1
  4260  0900  3A64               	xorlw	100
  4261  0901  1D03               	skipz
  4262  0902  2905               	goto	u7545
  4263  0903  3F41               	moviw [1]fsr1
  4264  0904  3A00               	xorlw	0
  4265  0905                     u7545:	
  4266  0905  1D03               	skipz
  4267  0906  290E               	goto	l7664
  4268                           
  4269                           ;Main_B1.c: 225: {
  4270                           ;Main_B1.c: 226: myMain.Count1 = 0;
  4271  0907  01A5               	clrf	(_myMain^(0+128)+5)
  4272  0908  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4273                           
  4274                           ;Main_B1.c: 238: if (myMain.Flag) {
  4275  0909  1CA0               	btfss	_myMain^(0+128),1
  4276  090A  290D               	goto	l1381
  4277                           
  4278                           ;Main_B1.c: 239: myMain.Flag = 0;
  4279  090B  10A0               	bcf	_myMain^(0+128),1
  4280                           
  4281                           ;Main_B1.c: 248: } else {
  4282  090C  290E               	goto	l7664
  4283  090D                     l1381:	
  4284                           
  4285                           ;Main_B1.c: 249: myMain.Flag = 1;
  4286  090D  14A0               	bsf	_myMain^(0+128),1
  4287  090E                     l7664:	
  4288                           
  4289                           ;Main_B1.c: 258: }
  4290                           ;Main_B1.c: 259: }
  4291                           ;Main_B1.c: 261: }
  4292                           ;Main_B1.c: 263: myMain.Count2++;
  4293  090E  3001               	movlw	1
  4294  090F  07A7               	addwf	(_myMain^(0+128)+7),f
  4295  0910  3000               	movlw	0
  4296  0911  3DA8               	addwfc	((_myMain+1)^(0+128)+7),f
  4297                           
  4298                           ;Main_B1.c: 264: if (myMain.Count2 == 100) {
  4299  0912  3007               	movlw	7
  4300  0913  3EA0               	addlw	_myMain& (0+255)
  4301  0914  0086               	movwf	6
  4302  0915  0187               	clrf	7
  4303  0916  3F40               	moviw [0]fsr1
  4304  0917  3A64               	xorlw	100
  4305  0918  1D03               	skipz
  4306  0919  291C               	goto	u7565
  4307  091A  3F41               	moviw [1]fsr1
  4308  091B  3A00               	xorlw	0
  4309  091C                     u7565:	
  4310  091C  1D03               	skipz
  4311  091D  0008               	return
  4312                           
  4313                           ;Main_B1.c: 265: myMain.Count2 = 0;
  4314  091E  01A7               	clrf	(_myMain^(0+128)+7)
  4315  091F  01A8               	clrf	((_myMain+1)^(0+128)+7)
  4316  0920  0008               	return
  4317  0921                     __end_of_my_MainTimer:	
  4318                           
  4319                           	psect	text2
  4320  1D4E                     __ptext2:	
  4321 ;; *************** function _myMain_Initialization *****************
  4322 ;; Defined at:
  4323 ;;		line 168 in file "../src/Main_B1.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;		None               void
  4330 ;; Registers used:
  4331 ;;		wreg, fsr1l, fsr1h
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:        1 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    5
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_main
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _myMain_Initialization
  4353  1D4E                     _myMain_Initialization:	
  4354                           
  4355                           ;Main_B1.c: 170: product = &_product;
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4359  1D4E  3020               	movlw	__product& (0+255)
  4360  1D4F  0020               	movlb	0	; select bank0
  4361  1D50  00A0               	movwf	??_myMain_Initialization
  4362  1D51  0820               	movf	??_myMain_Initialization,w
  4363  1D52  00EE               	movwf	_product
  4364                           
  4365                           ;Main_B1.c: 171: product->Data[20] = 209;
  4366  1D53  30D1               	movlw	209
  4367  1D54  00A0               	movwf	??_myMain_Initialization
  4368  1D55  086E               	movf	_product,w
  4369  1D56  3E14               	addlw	20
  4370  1D57  0086               	movwf	6
  4371  1D58  3002               	movlw	2	; select bank4/5
  4372  1D59  0087               	movwf	7
  4373  1D5A  0820               	movf	??_myMain_Initialization,w
  4374  1D5B  0081               	movwf	1
  4375  1D5C  0008               	return
  4376  1D5D                     __end_of_myMain_Initialization:	
  4377                           
  4378                           	psect	text3
  4379  13BF                     __ptext3:	
  4380 ;; *************** function _getTemp_AD *****************
  4381 ;; Defined at:
  4382 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  channel         1    wreg     unsigned char 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  channel         1    5[BANK0 ] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;		None               void
  4389 ;; Registers used:
  4390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;Total ram usage:        2 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    7
  4403 ;; This function calls:
  4404 ;;		_getAD
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function _getTemp_AD
  4412  13BF                     _getTemp_AD:	
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4416                           ;getTemp_AD@channel stored from wreg
  4417  13BF  0020               	movlb	0	; select bank0
  4418  13C0  00A5               	movwf	getTemp_AD@channel
  4419                           
  4420                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4421  13C1  0021               	movlb	1	; select bank1
  4422  13C2  1D56               	btfss	_Temp^(0+128),2
  4423  13C3  0008               	return
  4424                           
  4425                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4426  13C4  1656               	bsf	_Temp^(0+128),4
  4427                           
  4428                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4429  13C5  30F0               	movlw	240
  4430  13C6  0020               	movlb	0	; select bank0
  4431  13C7  00A4               	movwf	??_getTemp_AD
  4432  13C8  0824               	movf	??_getTemp_AD,w
  4433  13C9  00A0               	movwf	getAD@adcon1
  4434  13CA  0825               	movf	getTemp_AD@channel,w
  4435  13CB  319F  279F  3193   	fcall	_getAD
  4436  13CE  0020               	movlb	0	; select bank0
  4437  13CF  0821               	movf	?_getAD+1,w
  4438  13D0  0021               	movlb	1	; select bank1
  4439  13D1  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4440  13D2  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4441  13D3  0020               	movlb	0	; select bank0
  4442  13D4  0820               	movf	?_getAD,w
  4443  13D5  0021               	movlb	1	; select bank1
  4444  13D6  01E2               	clrf	(_Temp^(0+128)+12)
  4445  13D7  07E2               	addwf	(_Temp^(0+128)+12),f
  4446                           
  4447                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4448  13D8  0863               	movf	((_Temp+1)^(0+128)+12),w
  4449  13D9  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4450  13DA  1D03               	skipz
  4451  13DB  2BDE               	goto	u7495
  4452  13DC  0862               	movf	(_Temp^(0+128)+12),w
  4453  13DD  025E               	subwf	(_Temp^(0+128)+8),w
  4454  13DE                     u7495:	
  4455  13DE  1803               	skipnc
  4456  13DF  2BE7               	goto	l7630
  4457                           
  4458                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4459  13E0  0863               	movf	((_Temp+1)^(0+128)+12),w
  4460  13E1  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4461  13E2  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4462  13E3  0862               	movf	(_Temp^(0+128)+12),w
  4463  13E4  01DE               	clrf	(_Temp^(0+128)+8)
  4464  13E5  07DE               	addwf	(_Temp^(0+128)+8),f
  4465                           
  4466                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4467  13E6  0008               	return
  4468  13E7                     l7630:	
  4469  13E7  0863               	movf	((_Temp+1)^(0+128)+12),w
  4470  13E8  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4471  13E9  1D03               	skipz
  4472  13EA  2BED               	goto	u7505
  4473  13EB  0862               	movf	(_Temp^(0+128)+12),w
  4474  13EC  0260               	subwf	(_Temp^(0+128)+10),w
  4475  13ED                     u7505:	
  4476  13ED  1803               	skipnc
  4477  13EE  0008               	return
  4478                           
  4479                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4480  13EF  0863               	movf	((_Temp+1)^(0+128)+12),w
  4481  13F0  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4482  13F1  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4483  13F2  0862               	movf	(_Temp^(0+128)+12),w
  4484  13F3  01E0               	clrf	(_Temp^(0+128)+10)
  4485  13F4  07E0               	addwf	(_Temp^(0+128)+10),f
  4486  13F5  0008               	return
  4487  13F6                     __end_of_getTemp_AD:	
  4488                           
  4489                           	psect	text4
  4490  0BDD                     __ptext4:	
  4491 ;; *************** function _getLoad_AD *****************
  4492 ;; Defined at:
  4493 ;;		line 15 in file "../src/OverLoad_B1.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  channel         1    wreg     unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  channel         1    6[BANK0 ] unsigned char 
  4498 ;;  i               1    9[BANK0 ] unsigned char 
  4499 ;;  j               1    8[BANK0 ] unsigned char 
  4500 ;;  k               1    7[BANK0 ] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;		None               void
  4503 ;; Registers used:
  4504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;Total ram usage:        6 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    7
  4517 ;; This function calls:
  4518 ;;		_getAD
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function _getLoad_AD
  4526  0BDD                     _getLoad_AD:	
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4530                           ;getLoad_AD@channel stored from wreg
  4531  0BDD  0020               	movlb	0	; select bank0
  4532  0BDE  00A6               	movwf	getLoad_AD@channel
  4533                           
  4534                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4535  0BDF  01A9               	clrf	getLoad_AD@i
  4536  0BE0  01A8               	clrf	getLoad_AD@j
  4537  0BE1  01A7               	clrf	getLoad_AD@k
  4538                           
  4539                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4540  0BE2  0022               	movlb	2	; select bank2
  4541  0BE3  1E43               	btfss	_Load^(0+256),4
  4542  0BE4  0008               	return
  4543                           
  4544                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4545  0BE5  30F3               	movlw	243
  4546  0BE6  0020               	movlb	0	; select bank0
  4547  0BE7  00A4               	movwf	??_getLoad_AD
  4548  0BE8  0824               	movf	??_getLoad_AD,w
  4549  0BE9  00A0               	movwf	getAD@adcon1
  4550  0BEA  0826               	movf	getLoad_AD@channel,w
  4551  0BEB  319F  279F  318B   	fcall	_getAD
  4552  0BEE  0020               	movlb	0	; select bank0
  4553  0BEF  0821               	movf	?_getAD+1,w
  4554  0BF0  0022               	movlb	2	; select bank2
  4555  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4556  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4557  0BF3  0020               	movlb	0	; select bank0
  4558  0BF4  0820               	movf	?_getAD,w
  4559  0BF5  0022               	movlb	2	; select bank2
  4560  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4561  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4562                           
  4563                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4564  0BF8  0020               	movlb	0	; select bank0
  4565  0BF9  01A9               	clrf	getLoad_AD@i
  4566  0BFA  3004               	movlw	4
  4567  0BFB  0229               	subwf	getLoad_AD@i,w
  4568  0BFC  1803               	btfsc	3,0
  4569  0BFD  2C2B               	goto	l7600
  4570  0BFE                     l7588:	
  4571                           
  4572                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4573  0BFE  3529               	lslf	getLoad_AD@i,w
  4574  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4575  0C00  0086               	movwf	6
  4576  0C01  3001               	movlw	1	; select bank2/3
  4577  0C02  0087               	movwf	7
  4578  0C03  3F40               	moviw [0]fsr1
  4579  0C04  00A4               	movwf	??_getLoad_AD
  4580  0C05  3F41               	moviw [1]fsr1
  4581  0C06  00A5               	movwf	??_getLoad_AD+1
  4582  0C07  0022               	movlb	2	; select bank2
  4583  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4584  0C09  0020               	movlb	0	; select bank0
  4585  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4586  0C0B  1D03               	skipz
  4587  0C0C  2C11               	goto	u7405
  4588  0C0D  0022               	movlb	2	; select bank2
  4589  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4590  0C0F  0020               	movlb	0	; select bank0
  4591  0C10  0224               	subwf	??_getLoad_AD,w
  4592  0C11                     u7405:	
  4593  0C11  1803               	skipnc
  4594  0C12  2C23               	goto	l7596
  4595  0C13  08A8               	movf	getLoad_AD@j,f
  4596  0C14  1D03               	skipz
  4597  0C15  2C23               	goto	l7596
  4598                           
  4599                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4600  0C16  3529               	lslf	getLoad_AD@i,w
  4601  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4602  0C18  0086               	movwf	6
  4603  0C19  3001               	movlw	1	; select bank2/3
  4604  0C1A  0087               	movwf	7
  4605  0C1B  0022               	movlb	2	; select bank2
  4606  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4607  0C1D  3FC0               	movwi [0]fsr1
  4608  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4609  0C1F  3FC1               	movwi [1]fsr1
  4610                           
  4611                           ;OverLoad_B1.c: 24: j = 1;
  4612  0C20  0020               	movlb	0	; select bank0
  4613  0C21  01A8               	clrf	getLoad_AD@j
  4614  0C22  0AA8               	incf	getLoad_AD@j,f
  4615  0C23                     l7596:	
  4616  0C23  3001               	movlw	1
  4617  0C24  00A4               	movwf	??_getLoad_AD
  4618  0C25  0824               	movf	??_getLoad_AD,w
  4619  0C26  07A9               	addwf	getLoad_AD@i,f
  4620  0C27  3004               	movlw	4
  4621  0C28  0229               	subwf	getLoad_AD@i,w
  4622  0C29  1C03               	skipc
  4623  0C2A  2BFE               	goto	l7588
  4624  0C2B                     l7600:	
  4625                           
  4626                           ;OverLoad_B1.c: 25: }
  4627                           ;OverLoad_B1.c: 26: }
  4628                           ;OverLoad_B1.c: 27: if (j == 0) {
  4629  0C2B  08A8               	movf	getLoad_AD@j,f
  4630  0C2C  1D03               	skipz
  4631  0C2D  0008               	return
  4632                           
  4633                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4634  0C2E  01A9               	clrf	getLoad_AD@i
  4635  0C2F                     L1:	
  4636  0C2F  3004               	movlw	4
  4637  0C30  0229               	subwf	getLoad_AD@i,w
  4638  0C31  1803               	btfsc	3,0
  4639  0C32  0008               	return
  4640                           
  4641                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4642  0C33  3529               	lslf	getLoad_AD@i,w
  4643  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4644  0C35  0086               	movwf	6
  4645  0C36  3001               	movlw	1	; select bank2/3
  4646  0C37  0087               	movwf	7
  4647  0C38  3F40               	moviw [0]fsr1
  4648  0C39  00A4               	movwf	??_getLoad_AD
  4649  0C3A  3F41               	moviw [1]fsr1
  4650  0C3B  00A5               	movwf	??_getLoad_AD+1
  4651  0C3C  0825               	movf	??_getLoad_AD+1,w
  4652  0C3D  0022               	movlb	2	; select bank2
  4653  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4654  0C3F  1D03               	skipz
  4655  0C40  2C45               	goto	u7455
  4656  0C41  0020               	movlb	0	; select bank0
  4657  0C42  0824               	movf	??_getLoad_AD,w
  4658  0C43  0022               	movlb	2	; select bank2
  4659  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4660  0C45                     u7455:	
  4661  0C45  1803               	skipnc
  4662  0C46  2C58               	goto	l7616
  4663  0C47  0020               	movlb	0	; select bank0
  4664  0C48  08A7               	movf	getLoad_AD@k,f
  4665  0C49  1D03               	skipz
  4666  0C4A  2C58               	goto	l7616
  4667                           
  4668                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4669  0C4B  3529               	lslf	getLoad_AD@i,w
  4670  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4671  0C4D  0086               	movwf	6
  4672  0C4E  3001               	movlw	1	; select bank2/3
  4673  0C4F  0087               	movwf	7
  4674  0C50  0022               	movlb	2	; select bank2
  4675  0C51  0864               	movf	(_Load^(0+256)+33),w
  4676  0C52  3FC0               	movwi [0]fsr1
  4677  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4678  0C54  3FC1               	movwi [1]fsr1
  4679                           
  4680                           ;OverLoad_B1.c: 31: k = 1;
  4681  0C55  0020               	movlb	0	; select bank0
  4682  0C56  01A7               	clrf	getLoad_AD@k
  4683  0C57  0AA7               	incf	getLoad_AD@k,f
  4684  0C58                     l7616:	
  4685  0C58  3001               	movlw	1
  4686  0C59  0020               	movlb	0	; select bank0
  4687  0C5A  00A4               	movwf	??_getLoad_AD
  4688  0C5B  0824               	movf	??_getLoad_AD,w
  4689  0C5C  07A9               	addwf	getLoad_AD@i,f
  4690  0C5D  2C2F               	goto	L1
  4691  0C5E                     __end_of_getLoad_AD:	
  4692                           
  4693                           	psect	text5
  4694  1F9F                     __ptext5:	
  4695 ;; *************** function _getAD *****************
  4696 ;; Defined at:
  4697 ;;		line 454 in file "../src/MCU_B1.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  adcon0          1    wreg     unsigned char 
  4700 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  2    0[BANK0 ] int 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        4 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    6
  4719 ;; This function calls:
  4720 ;;		_Timeout_Counter
  4721 ;;		_set_TimeoutCleared
  4722 ;; This function is called by:
  4723 ;;		_getLoad_AD
  4724 ;;		_getTemp_AD
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           
  4729                           ;psect for function _getAD
  4730  1F9F                     _getAD:	
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4734                           ;getAD@adcon0 stored from wreg
  4735  1F9F  0020               	movlb	0	; select bank0
  4736  1FA0  00A3               	movwf	getAD@adcon0
  4737                           
  4738                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4739  1FA1  0823               	movf	getAD@adcon0,w
  4740  1FA2  0021               	movlb	1	; select bank1
  4741  1FA3  009D               	movwf	29	;volatile
  4742                           
  4743                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4744  1FA4  0020               	movlb	0	; select bank0
  4745  1FA5  0820               	movf	getAD@adcon1,w
  4746  1FA6  0021               	movlb	1	; select bank1
  4747  1FA7  009E               	movwf	30	;volatile
  4748                           
  4749                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4750  1FA8  149D               	bsf	29,1	;volatile
  4751                           
  4752                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4753  1FA9  2FAD               	goto	l7006
  4754  1FAA                     l7004:	
  4755                           
  4756                           ;MCU_B1.c: 459: Timeout_Counter();
  4757  1FAA  319E  2665  319F   	fcall	_Timeout_Counter
  4758  1FAD                     l7006:	
  4759  1FAD  0021               	movlb	1	; select bank1
  4760  1FAE  1C9D               	btfss	29,1	;volatile
  4761  1FAF  2FB2               	goto	l7010
  4762  1FB0  1D2C               	btfss	(_myMain^(0+128)+12),2
  4763  1FB1  2FAA               	goto	l7004
  4764  1FB2                     l7010:	
  4765                           
  4766                           ;MCU_B1.c: 460: };
  4767                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4768  1FB2  319C  241C         	fcall	_set_TimeoutCleared
  4769                           
  4770                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4771  1FB4  0021               	movlb	1	; select bank1
  4772  1FB5  081C               	movf	28,w	;volatile
  4773  1FB6  0020               	movlb	0	; select bank0
  4774  1FB7  01A1               	clrf	?_getAD+1
  4775  1FB8  07A1               	addwf	?_getAD+1,f
  4776  1FB9  0021               	movlb	1	; select bank1
  4777  1FBA  081B               	movf	27,w	;volatile
  4778  1FBB  0020               	movlb	0	; select bank0
  4779  1FBC  01A0               	clrf	?_getAD
  4780  1FBD  07A0               	addwf	?_getAD,f
  4781  1FBE  0008               	return
  4782  1FBF                     __end_of_getAD:	
  4783                           
  4784                           	psect	text6
  4785  1E05                     __ptext6:	
  4786 ;; *************** function _WDT_Main *****************
  4787 ;; Defined at:
  4788 ;;		line 1044 in file "../src/MCU_B1.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;Total ram usage:        1 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    6
  4809 ;; This function calls:
  4810 ;;		_WDT_Clearing
  4811 ;; This function is called by:
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _WDT_Main
  4818  1E05                     _WDT_Main:	
  4819                           
  4820                           ;MCU_B1.c: 1045: if (WDT.Enable == 1) {
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4824  1E05  0021               	movlb	1	; select bank1
  4825  1E06  1C4A               	btfss	_WDT^(0+128),0
  4826  1E07  0008               	return
  4827                           
  4828                           ;MCU_B1.c: 1046: if (WDT.Timer-- > 0) {
  4829  1E08  3001               	movlw	1
  4830  1E09  02CB               	subwf	(_WDT^(0+128)+1),f
  4831  1E0A  084B               	movf	(_WDT^(0+128)+1),w
  4832  1E0B  3AFF               	xorlw	255
  4833  1E0C  1903               	skipnz
  4834  1E0D  0008               	return
  4835                           
  4836                           ;MCU_B1.c: 1047: WDT.Timer = 100;
  4837  1E0E  3064               	movlw	100
  4838  1E0F  0020               	movlb	0	; select bank0
  4839  1E10  00A0               	movwf	??_WDT_Main
  4840  1E11  0820               	movf	??_WDT_Main,w
  4841  1E12  0021               	movlb	1	; select bank1
  4842  1E13  00CB               	movwf	(_WDT^(0+128)+1)
  4843                           
  4844                           ;MCU_B1.c: 1048: WDT_Clearing();
  4845  1E14  3180  2002         	fcall	_WDT_Clearing
  4846  1E16  0008               	return
  4847  1E17                     __end_of_WDT_Main:	
  4848                           
  4849                           	psect	text7
  4850  0002                     __ptext7:	
  4851 ;; *************** function _WDT_Clearing *****************
  4852 ;; Defined at:
  4853 ;;		line 1054 in file "../src/MCU_B1.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;		None               void
  4860 ;; Registers used:
  4861 ;;		None
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    5
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_WDT_Main
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           
  4882                           ;psect for function _WDT_Clearing
  4883  0002                     _WDT_Clearing:	
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in _WDT_Clearing: []
  4887  0002  0064               	clrwdt	;# 
  4888  0003  0008               	return
  4889  0004                     __end_of_WDT_Clearing:	
  4890                           
  4891                           	psect	text8
  4892  1BF5                     __ptext8:	
  4893 ;; *************** function _Temp_Main *****************
  4894 ;; Defined at:
  4895 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;Total ram usage:        0 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    8
  4916 ;; This function calls:
  4917 ;;		_setTemp_Main
  4918 ;; This function is called by:
  4919 ;;		_main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _Temp_Main
  4925  1BF5                     _Temp_Main:	
  4926                           
  4927                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4931  1BF5  318D  25FE         	fcall	_setTemp_Main
  4932  1BF7  0008               	return
  4933  1BF8                     __end_of_Temp_Main:	
  4934                           
  4935                           	psect	text9
  4936  0DFE                     __ptext9:	
  4937 ;; *************** function _setTemp_Main *****************
  4938 ;; Defined at:
  4939 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;Total ram usage:        2 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    7
  4960 ;; This function calls:
  4961 ;;		_getMain_All_Error_Status
  4962 ;;		_setBuz
  4963 ;; This function is called by:
  4964 ;;		_Temp_Main
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _setTemp_Main
  4970  0DFE                     _setTemp_Main:	
  4971                           
  4972                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4973                           
  4974                           ;incstack = 0
  4975                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4976  0DFE  0021               	movlb	1	; select bank1
  4977  0DFF  1C56               	btfss	_Temp^(0+128),0
  4978  0E00  2E9F               	goto	l1685
  4979                           
  4980                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4981  0E01  1956               	btfsc	_Temp^(0+128),2
  4982  0E02  2E12               	goto	l7114
  4983                           
  4984                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4985  0E03  3001               	movlw	1
  4986  0E04  07D7               	addwf	(_Temp^(0+128)+1),f
  4987  0E05  3000               	movlw	0
  4988  0E06  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4989                           
  4990                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4991  0E07  3001               	movlw	1
  4992  0E08  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4993  0E09  30F4               	movlw	244
  4994  0E0A  1903               	skipnz
  4995  0E0B  0257               	subwf	(_Temp^(0+128)+1),w
  4996  0E0C  1C03               	skipc
  4997  0E0D  0008               	return
  4998                           
  4999                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5000  0E0E  01D7               	clrf	(_Temp^(0+128)+1)
  5001  0E0F  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5002                           
  5003                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5004  0E10  1556               	bsf	_Temp^(0+128),2
  5005                           
  5006                           ;OverTemperature_B1.c: 64: }
  5007                           ;OverTemperature_B1.c: 65: } else {
  5008  0E11  0008               	return
  5009  0E12                     l7114:	
  5010                           
  5011                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5012  0E12  3002               	movlw	2
  5013  0E13  3192  224E  318D   	fcall	_getMain_All_Error_Status
  5014  0E16  3800               	iorlw	0
  5015  0E17  1D03               	skipz
  5016  0E18  0008               	return
  5017                           
  5018                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5019  0E19  3001               	movlw	1
  5020  0E1A  0021               	movlb	1	; select bank1
  5021  0E1B  07D7               	addwf	(_Temp^(0+128)+1),f
  5022  0E1C  3000               	movlw	0
  5023  0E1D  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5024                           
  5025                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5026  0E1E  3000               	movlw	0
  5027  0E1F  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5028  0E20  3005               	movlw	5
  5029  0E21  1903               	skipnz
  5030  0E22  0257               	subwf	(_Temp^(0+128)+1),w
  5031  0E23  1C03               	skipc
  5032  0E24  0008               	return
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5035  0E25  01D7               	clrf	(_Temp^(0+128)+1)
  5036  0E26  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5037                           
  5038                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5039  0E27  1E56               	btfss	_Temp^(0+128),4
  5040  0E28  0008               	return
  5041                           
  5042                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5043  0E29  1156               	bcf	_Temp^(0+128),2
  5044                           
  5045                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5046  0E2A  300A               	movlw	10
  5047  0E2B  3ED6               	addlw	_Temp& (0+255)
  5048  0E2C  0086               	movwf	6
  5049  0E2D  0187               	clrf	7
  5050  0E2E  3008               	movlw	8
  5051  0E2F  3ED6               	addlw	_Temp& (0+255)
  5052  0E30  0084               	movwf	4
  5053  0E31  0185               	clrf	5
  5054  0E32  3F40               	moviw [0]fsr1
  5055  0E33  0700               	addwf	0,w
  5056  0E34  0020               	movlb	0	; select bank0
  5057  0E35  00AD               	movwf	??_setTemp_Main
  5058  0E36  3101               	addfsr 0,1
  5059  0E37  3F41               	moviw [1]fsr1
  5060  0E38  3D00               	addwfc	0,w
  5061  0E39  00AE               	movwf	??_setTemp_Main+1
  5062  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5063  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5064  0E3C  082D               	movf	??_setTemp_Main,w
  5065  0E3D  0021               	movlb	1	; select bank1
  5066  0E3E  00DC               	movwf	(_Temp^(0+128)+6)
  5067  0E3F  0020               	movlb	0	; select bank0
  5068  0E40  082E               	movf	??_setTemp_Main+1,w
  5069  0E41  0021               	movlb	1	; select bank1
  5070  0E42  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5071                           
  5072                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5073  0E43  30C7               	movlw	199
  5074  0E44  00E4               	movwf	(_Temp^(0+128)+14)
  5075  0E45  3001               	movlw	1
  5076  0E46  00E5               	movwf	(_Temp^(0+128)+15)
  5077                           
  5078                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5079  0E47  309F               	movlw	159
  5080  0E48  00E6               	movwf	(_Temp^(0+128)+16)
  5081  0E49  3001               	movlw	1
  5082  0E4A  00E7               	movwf	(_Temp^(0+128)+17)
  5083                           
  5084                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5085  0E4B  1CD6               	btfss	_Temp^(0+128),1
  5086  0E4C  2E6D               	goto	l7146
  5087                           
  5088                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5089  0E4D  0865               	movf	((_Temp+1)^(0+128)+14),w
  5090  0E4E  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5091  0E4F  1D03               	skipz
  5092  0E50  2E53               	goto	u6605
  5093  0E51  0864               	movf	(_Temp^(0+128)+14),w
  5094  0E52  025C               	subwf	(_Temp^(0+128)+6),w
  5095  0E53                     u6605:	
  5096  0E53  1C03               	skipc
  5097  0E54  2E6B               	goto	l7144
  5098                           
  5099                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5100  0E55  3001               	movlw	1
  5101  0E56  0020               	movlb	0	; select bank0
  5102  0E57  00AD               	movwf	??_setTemp_Main
  5103  0E58  082D               	movf	??_setTemp_Main,w
  5104  0E59  0021               	movlb	1	; select bank1
  5105  0E5A  07D9               	addwf	(_Temp^(0+128)+3),f
  5106                           
  5107                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5108  0E5B  3003               	movlw	3
  5109  0E5C  0259               	subwf	(_Temp^(0+128)+3),w
  5110  0E5D  1C03               	skipc
  5111  0E5E  2E83               	goto	l7158
  5112                           
  5113                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5114  0E5F  01D9               	clrf	(_Temp^(0+128)+3)
  5115                           
  5116                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5117  0E60  10D6               	bcf	_Temp^(0+128),1
  5118                           
  5119                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5120  0E61  3064               	movlw	100
  5121  0E62  0020               	movlb	0	; select bank0
  5122  0E63  00A9               	movwf	setBuz@time
  5123  0E64  3000               	movlw	0
  5124  0E65  00AA               	movwf	setBuz@time+1
  5125  0E66  3002               	movlw	2
  5126  0E67  3196  2696  318D   	fcall	_setBuz
  5127                           
  5128                           ;OverTemperature_B1.c: 96: }
  5129                           ;OverTemperature_B1.c: 97: } else {
  5130  0E6A  2E83               	goto	l7158
  5131  0E6B                     l7144:	
  5132                           
  5133                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5134  0E6B  0021               	movlb	1	; select bank1
  5135  0E6C  2E82               	goto	l7156
  5136  0E6D                     l7146:	
  5137                           ;OverTemperature_B1.c: 99: }
  5138                           ;OverTemperature_B1.c: 100: } else {
  5139                           
  5140                           
  5141                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5142  0E6D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5143  0E6E  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5144  0E6F  1D03               	skipz
  5145  0E70  2E73               	goto	u6625
  5146  0E71  085C               	movf	(_Temp^(0+128)+6),w
  5147  0E72  0266               	subwf	(_Temp^(0+128)+16),w
  5148  0E73                     u6625:	
  5149  0E73  1C03               	skipc
  5150  0E74  2E82               	goto	l7156
  5151                           
  5152                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5153  0E75  3001               	movlw	1
  5154  0E76  0020               	movlb	0	; select bank0
  5155  0E77  00AD               	movwf	??_setTemp_Main
  5156  0E78  082D               	movf	??_setTemp_Main,w
  5157  0E79  0021               	movlb	1	; select bank1
  5158  0E7A  07D9               	addwf	(_Temp^(0+128)+3),f
  5159                           
  5160                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5161  0E7B  3003               	movlw	3
  5162  0E7C  0259               	subwf	(_Temp^(0+128)+3),w
  5163  0E7D  1C03               	skipc
  5164  0E7E  2E83               	goto	l7158
  5165                           
  5166                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5167  0E7F  01D9               	clrf	(_Temp^(0+128)+3)
  5168                           
  5169                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5170  0E80  14D6               	bsf	_Temp^(0+128),1
  5171                           
  5172                           ;OverTemperature_B1.c: 106: }
  5173                           ;OverTemperature_B1.c: 107: } else {
  5174  0E81  2E83               	goto	l7158
  5175  0E82                     l7156:	
  5176                           
  5177                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5178  0E82  01D9               	clrf	(_Temp^(0+128)+3)
  5179  0E83                     l7158:	
  5180                           
  5181                           ;OverTemperature_B1.c: 109: }
  5182                           ;OverTemperature_B1.c: 110: }
  5183                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5184  0E83  0021               	movlb	1	; select bank1
  5185  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5186  0E85  0020               	movlb	0	; select bank0
  5187  0E86  00AD               	movwf	??_setTemp_Main
  5188  0E87  086E               	movf	_product,w
  5189  0E88  3E18               	addlw	24
  5190  0E89  0086               	movwf	6
  5191  0E8A  3002               	movlw	2	; select bank4/5
  5192  0E8B  0087               	movwf	7
  5193  0E8C  082D               	movf	??_setTemp_Main,w
  5194  0E8D  0081               	movwf	1
  5195                           
  5196                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5197  0E8E  0021               	movlb	1	; select bank1
  5198  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5199  0E90  0020               	movlb	0	; select bank0
  5200  0E91  00AD               	movwf	??_setTemp_Main
  5201  0E92  086E               	movf	_product,w
  5202  0E93  3E19               	addlw	25
  5203  0E94  0086               	movwf	6
  5204  0E95  3002               	movlw	2	; select bank4/5
  5205  0E96  0087               	movwf	7
  5206  0E97  082D               	movf	??_setTemp_Main,w
  5207  0E98  0081               	movwf	1
  5208                           
  5209                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5210  0E99  0021               	movlb	1	; select bank1
  5211  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5212  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5213                           
  5214                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5215  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5216  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5217                           
  5218                           ;OverTemperature_B1.c: 120: }
  5219                           ;OverTemperature_B1.c: 121: }
  5220                           ;OverTemperature_B1.c: 122: }
  5221                           ;OverTemperature_B1.c: 123: }
  5222                           ;OverTemperature_B1.c: 124: } else {
  5223  0E9E  0008               	return
  5224  0E9F                     l1685:	
  5225                           
  5226                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5227  0E9F  1C20               	btfss	_myMain^(0+128),0
  5228  0EA0  0008               	return
  5229                           
  5230                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5231  0EA1  1456               	bsf	_Temp^(0+128),0
  5232  0EA2  0008               	return
  5233  0EA3                     __end_of_setTemp_Main:	
  5234                           
  5235                           	psect	text10
  5236  1BF2                     __ptext10:	
  5237 ;; *************** function _Temp_Initialization *****************
  5238 ;; Defined at:
  5239 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;		None
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;Total ram usage:        0 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    6
  5260 ;; This function calls:
  5261 ;;		_setTemp_Initialization
  5262 ;; This function is called by:
  5263 ;;		_main
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _Temp_Initialization
  5269  1BF2                     _Temp_Initialization:	
  5270                           
  5271                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5275  1BF2  319B  23E8         	fcall	_setTemp_Initialization
  5276  1BF4  0008               	return
  5277  1BF5                     __end_of_Temp_Initialization:	
  5278                           
  5279                           	psect	text11
  5280  1BE8                     __ptext11:	
  5281 ;; *************** function _setTemp_Initialization *****************
  5282 ;; Defined at:
  5283 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;		None
  5288 ;; Return value:  Size  Location     Type
  5289 ;;		None               void
  5290 ;; Registers used:
  5291 ;;		None
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;Total ram usage:        0 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    5
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_Temp_Initialization
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _setTemp_Initialization
  5313  1BE8                     _setTemp_Initialization:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _setTemp_Initialization: []
  5317  1BE8  0008               	return
  5318  1BE9                     __end_of_setTemp_Initialization:	
  5319                           
  5320                           	psect	text12
  5321  1F7F                     __ptext12:	
  5322 ;; *************** function _Switch_Main *****************
  5323 ;; Defined at:
  5324 ;;		line 72 in file "../src/Switch_B1.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  error           1   30[BANK0 ] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;		None               void
  5331 ;; Registers used:
  5332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;Total ram usage:        2 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:   11
  5345 ;; This function calls:
  5346 ;;		_TouchPower
  5347 ;;		_getMain_All_Error_Status
  5348 ;;		_setMain_Exception
  5349 ;;		_setSw_Main
  5350 ;; This function is called by:
  5351 ;;		_main
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _Switch_Main
  5357  1F7F                     _Switch_Main:	
  5358                           
  5359                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5363  1F7F  3000               	movlw	0
  5364  1F80  3192  224E  319F   	fcall	_getMain_All_Error_Status
  5365  1F83  0020               	movlb	0	; select bank0
  5366  1F84  00BD               	movwf	??_Switch_Main
  5367  1F85  083D               	movf	??_Switch_Main,w
  5368  1F86  00BE               	movwf	Switch_Main@error
  5369                           
  5370                           ;Switch_B1.c: 74: if (error != 0) {
  5371  1F87  083E               	movf	Switch_Main@error,w
  5372  1F88  1903               	btfsc	3,2
  5373  1F89  2F8F               	goto	l2381
  5374                           
  5375                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5376  1F8A  0021               	movlb	1	; select bank1
  5377  1F8B  1851               	btfsc	_SwDetect^(0+128),0
  5378  1F8C  2F98               	goto	l7832
  5379                           
  5380                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5381  1F8D  1451               	bsf	_SwDetect^(0+128),0
  5382  1F8E  2F93               	goto	L2
  5383  1F8F                     l2381:	
  5384                           ;Switch_B1.c: 80: }
  5385                           ;Switch_B1.c: 81: } else {
  5386                           
  5387                           ;Switch_B1.c: 78: setMain_Exception(error);
  5388                           
  5389                           
  5390                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5391  1F8F  0021               	movlb	1	; select bank1
  5392  1F90  1C51               	btfss	_SwDetect^(0+128),0
  5393  1F91  2F98               	goto	l7832
  5394                           
  5395                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5396  1F92  1051               	bcf	_SwDetect^(0+128),0
  5397  1F93                     L2:	
  5398                           
  5399                           ;Switch_B1.c: 85: setMain_Exception(error);
  5400  1F93  0020               	movlb	0	; select bank0
  5401  1F94  083E               	movf	Switch_Main@error,w
  5402  1F95  3197  27A4  319F   	fcall	_setMain_Exception
  5403  1F98                     l7832:	
  5404                           
  5405                           ;Switch_B1.c: 87: }
  5406                           ;Switch_B1.c: 88: }
  5407                           ;Switch_B1.c: 91: setSw_Main(1);
  5408  1F98  3001               	movlw	1
  5409  1F99  3180  2043  319F   	fcall	_setSw_Main
  5410                           
  5411                           ;Switch_B1.c: 103: TouchPower();
  5412  1F9C  319E  268F         	fcall	_TouchPower
  5413  1F9E  0008               	return
  5414  1F9F                     __end_of_Switch_Main:	
  5415                           
  5416                           	psect	text13
  5417  0043                     __ptext13:	
  5418 ;; *************** function _setSw_Main *****************
  5419 ;; Defined at:
  5420 ;;		line 137 in file "../src/Switch_B1.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  sw              1    wreg     unsigned char 
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;  sw              1   19[BANK0 ] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;		None               void
  5427 ;; Registers used:
  5428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        3 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    9
  5441 ;; This function calls:
  5442 ;;		_SwPointSelect
  5443 ;;		_getSw_KeyStatus
  5444 ;;		_setBuz
  5445 ;;		_setDimmerLights_AdjControl
  5446 ;;		_setDimmerLights_SwOff
  5447 ;;		_setDimmerLights_SwOn
  5448 ;;		_setRF_Learn
  5449 ;; This function is called by:
  5450 ;;		_Switch_Main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _setSw_Main
  5456  0043                     _setSw_Main:	
  5457                           
  5458                           ;incstack = 0
  5459                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5460                           ;setSw_Main@sw stored from wreg
  5461  0043  0020               	movlb	0	; select bank0
  5462  0044  00B3               	movwf	setSw_Main@sw
  5463                           
  5464                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5465  0045  0833               	movf	setSw_Main@sw,w
  5466  0046  319C  24C2  3180   	fcall	_SwPointSelect
  5467                           
  5468                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5469  0049  087C               	movf	_Sw,w
  5470  004A  0086               	movwf	6
  5471  004B  3001               	movlw	1	; select bank2/3
  5472  004C  0087               	movwf	7
  5473  004D  1C01               	btfss	1,0
  5474  004E  29A9               	goto	l2391
  5475                           
  5476                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5477  004F  0021               	movlb	1	; select bank1
  5478  0050  1851               	btfsc	_SwDetect^(0+128),0
  5479  0051  286D               	goto	l7298
  5480                           
  5481                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5482  0052  0A7C               	incf	_Sw,w
  5483  0053  0086               	movwf	6
  5484  0054  3001               	movlw	1	; select bank2/3
  5485  0055  0087               	movwf	7
  5486  0056  1081               	bcf	1,1
  5487                           
  5488                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5489  0057  0020               	movlb	0	; select bank0
  5490  0058  0833               	movf	setSw_Main@sw,w
  5491  0059  319D  25D0  3180   	fcall	_getSw_KeyStatus
  5492  005C  3A01               	xorlw	1
  5493  005D  3000               	movlw	0
  5494  005E  1903               	skipnz
  5495  005F  3001               	movlw	1
  5496  0060  0020               	movlb	0	; select bank0
  5497  0061  00B1               	movwf	??_setSw_Main
  5498  0062  087C               	movf	_Sw,w
  5499  0063  0086               	movwf	6
  5500  0064  3001               	movlw	1	; select bank2/3
  5501  0065  0087               	movwf	7
  5502  0066  0DB1               	rlf	??_setSw_Main,f
  5503  0067  0801               	movf	1,w
  5504  0068  0631               	xorwf	??_setSw_Main,w
  5505  0069  39FD               	andlw	-3
  5506  006A  0631               	xorwf	??_setSw_Main,w
  5507  006B  0081               	movwf	1
  5508                           
  5509                           ;Switch_B1.c: 143: } else {
  5510  006C  2882               	goto	l2393
  5511  006D                     l7298:	
  5512                           
  5513                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5514  006D  0A7C               	incf	_Sw,w
  5515  006E  0086               	movwf	6
  5516  006F  3001               	movlw	1	; select bank2/3
  5517  0070  0087               	movwf	7
  5518  0071  1881               	btfsc	1,1
  5519  0072  2882               	goto	l2393
  5520                           
  5521                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5522  0073  0A7C               	incf	_Sw,w
  5523  0074  0086               	movwf	6
  5524  0075  3001               	movlw	1	; select bank2/3
  5525  0076  0087               	movwf	7
  5526  0077  1481               	bsf	1,1
  5527                           
  5528                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5529  0078  087C               	movf	_Sw,w
  5530  0079  0086               	movwf	6
  5531  007A  3001               	movlw	1	; select bank2/3
  5532  007B  0087               	movwf	7
  5533  007C  1081               	bcf	1,1
  5534                           
  5535                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5536  007D  087C               	movf	_Sw,w
  5537  007E  0086               	movwf	6
  5538  007F  3001               	movlw	1	; select bank2/3
  5539  0080  0087               	movwf	7
  5540  0081  1501               	bsf	1,2
  5541  0082                     l2393:	
  5542                           
  5543                           ;Switch_B1.c: 148: }
  5544                           ;Switch_B1.c: 149: }
  5545                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5546  0082  087C               	movf	_Sw,w
  5547  0083  0086               	movwf	6
  5548  0084  3001               	movlw	1	; select bank2/3
  5549  0085  0087               	movwf	7
  5550  0086  1C81               	btfss	1,1
  5551  0087  2952               	goto	l7348
  5552                           
  5553                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5554  0088  087C               	movf	_Sw,w
  5555  0089  0086               	movwf	6
  5556  008A  3001               	movlw	1	; select bank2/3
  5557  008B  0087               	movwf	7
  5558  008C  1901               	btfsc	1,2
  5559  008D  28B0               	goto	l7314
  5560                           
  5561                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5562  008E  3001               	movlw	1
  5563  008F  0020               	movlb	0	; select bank0
  5564  0090  00B1               	movwf	??_setSw_Main
  5565  0091  087C               	movf	_Sw,w
  5566  0092  3E02               	addlw	2
  5567  0093  0086               	movwf	6
  5568  0094  3001               	movlw	1	; select bank2/3
  5569  0095  0087               	movwf	7
  5570  0096  0831               	movf	??_setSw_Main,w
  5571  0097  0781               	addwf	1,f
  5572                           
  5573                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5574  0098  087C               	movf	_Sw,w
  5575  0099  3E02               	addlw	2
  5576  009A  0086               	movwf	6
  5577  009B  3001               	movlw	1	; select bank2/3
  5578  009C  0087               	movwf	7
  5579  009D  3005               	movlw	5
  5580  009E  0201               	subwf	1,w
  5581  009F  1C03               	skipc
  5582  00A0  0008               	return
  5583                           
  5584                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5585  00A1  087C               	movf	_Sw,w
  5586  00A2  3E02               	addlw	2
  5587  00A3  0086               	movwf	6
  5588  00A4  3001               	movlw	1	; select bank2/3
  5589  00A5  0087               	movwf	7
  5590  00A6  0181               	clrf	1
  5591                           
  5592                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5593  00A7  087C               	movf	_Sw,w
  5594  00A8  0086               	movwf	6
  5595  00A9  3001               	movlw	1	; select bank2/3
  5596  00AA  0087               	movwf	7
  5597  00AB  1501               	bsf	1,2
  5598                           
  5599                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5600  00AC  0833               	movf	setSw_Main@sw,w
  5601  00AD  3193  23F6         	fcall	_setDimmerLights_SwOn
  5602                           
  5603                           ;Switch_B1.c: 162: }
  5604                           ;Switch_B1.c: 163: } else {
  5605  00AF  0008               	return
  5606  00B0                     l7314:	
  5607                           
  5608                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5609  00B0  087C               	movf	_Sw,w
  5610  00B1  0086               	movwf	6
  5611  00B2  3001               	movlw	1	; select bank2/3
  5612  00B3  0087               	movwf	7
  5613  00B4  1981               	btfsc	1,3
  5614  00B5  28E2               	goto	l7324
  5615                           
  5616                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5617  00B6  087C               	movf	_Sw,w
  5618  00B7  3E03               	addlw	3
  5619  00B8  0086               	movwf	6
  5620  00B9  3001               	movlw	1	; select bank2/3
  5621  00BA  0087               	movwf	7
  5622  00BB  3001               	movlw	1
  5623  00BC  0781               	addwf	1,f
  5624  00BD  3141               	addfsr 1,1
  5625  00BE  1803               	skipnc
  5626  00BF  0A81               	incf	1,f
  5627                           
  5628                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5629  00C0  087C               	movf	_Sw,w
  5630  00C1  3E03               	addlw	3
  5631  00C2  0086               	movwf	6
  5632  00C3  3001               	movlw	1	; select bank2/3
  5633  00C4  0087               	movwf	7
  5634  00C5  3F40               	moviw [0]fsr1
  5635  00C6  0020               	movlb	0	; select bank0
  5636  00C7  00B1               	movwf	??_setSw_Main
  5637  00C8  3F41               	moviw [1]fsr1
  5638  00C9  00B2               	movwf	??_setSw_Main+1
  5639  00CA  3000               	movlw	0
  5640  00CB  0232               	subwf	??_setSw_Main+1,w
  5641  00CC  3096               	movlw	150
  5642  00CD  1903               	skipnz
  5643  00CE  0231               	subwf	??_setSw_Main,w
  5644  00CF  1C03               	skipc
  5645  00D0  0008               	return
  5646                           
  5647                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5648  00D1  087C               	movf	_Sw,w
  5649  00D2  3E03               	addlw	3
  5650  00D3  0086               	movwf	6
  5651  00D4  3001               	movlw	1	; select bank2/3
  5652  00D5  0087               	movwf	7
  5653  00D6  3000               	movlw	0
  5654  00D7  3FC0               	movwi [0]fsr1
  5655  00D8  3FC1               	movwi [1]fsr1
  5656                           
  5657                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5658  00D9  087C               	movf	_Sw,w
  5659  00DA  0086               	movwf	6
  5660  00DB  3001               	movlw	1	; select bank2/3
  5661  00DC  0087               	movwf	7
  5662  00DD  1581               	bsf	1,3
  5663                           
  5664                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5665  00DE  0833               	movf	setSw_Main@sw,w
  5666  00DF  3192  22E8         	fcall	_setDimmerLights_AdjControl
  5667                           
  5668                           ;Switch_B1.c: 174: }
  5669                           ;Switch_B1.c: 175: } else {
  5670  00E1  0008               	return
  5671  00E2                     l7324:	
  5672                           
  5673                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5674  00E2  087C               	movf	_Sw,w
  5675  00E3  0086               	movwf	6
  5676  00E4  3001               	movlw	1	; select bank2/3
  5677  00E5  0087               	movwf	7
  5678  00E6  1A01               	btfsc	1,4
  5679  00E7  2920               	goto	l7338
  5680                           
  5681                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5682  00E8  087C               	movf	_Sw,w
  5683  00E9  3E05               	addlw	5
  5684  00EA  0086               	movwf	6
  5685  00EB  3001               	movlw	1	; select bank2/3
  5686  00EC  0087               	movwf	7
  5687  00ED  3001               	movlw	1
  5688  00EE  0781               	addwf	1,f
  5689  00EF  3141               	addfsr 1,1
  5690  00F0  1803               	skipnc
  5691  00F1  0A81               	incf	1,f
  5692                           
  5693                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5694  00F2  087C               	movf	_Sw,w
  5695  00F3  3E05               	addlw	5
  5696  00F4  0086               	movwf	6
  5697  00F5  3001               	movlw	1	; select bank2/3
  5698  00F6  0087               	movwf	7
  5699  00F7  3F40               	moviw [0]fsr1
  5700  00F8  0020               	movlb	0	; select bank0
  5701  00F9  00B1               	movwf	??_setSw_Main
  5702  00FA  3F41               	moviw [1]fsr1
  5703  00FB  00B2               	movwf	??_setSw_Main+1
  5704  00FC  3000               	movlw	0
  5705  00FD  0232               	subwf	??_setSw_Main+1,w
  5706  00FE  3096               	movlw	150
  5707  00FF  1903               	skipnz
  5708  0100  0231               	subwf	??_setSw_Main,w
  5709  0101  1C03               	skipc
  5710  0102  0008               	return
  5711                           
  5712                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5713  0103  087C               	movf	_Sw,w
  5714  0104  3E05               	addlw	5
  5715  0105  0086               	movwf	6
  5716  0106  3001               	movlw	1	; select bank2/3
  5717  0107  0087               	movwf	7
  5718  0108  3000               	movlw	0
  5719  0109  3FC0               	movwi [0]fsr1
  5720  010A  3FC1               	movwi [1]fsr1
  5721                           
  5722                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5723  010B  087C               	movf	_Sw,w
  5724  010C  0086               	movwf	6
  5725  010D  3001               	movlw	1	; select bank2/3
  5726  010E  0087               	movwf	7
  5727  010F  1601               	bsf	1,4
  5728                           
  5729                           ;Switch_B1.c: 183: setRF_Learn(1);
  5730  0110  3001               	movlw	1
  5731  0111  319E  2651  3180   	fcall	_setRF_Learn
  5732                           
  5733                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5734  0114  0021               	movlb	1	; select bank1
  5735  0115  1EA0               	btfss	_myMain^(0+128),5
  5736  0116  0008               	return
  5737                           
  5738                           ;Switch_B1.c: 186: setBuz(2, 100);
  5739  0117  3064               	movlw	100
  5740  0118  0020               	movlb	0	; select bank0
  5741  0119  00A9               	movwf	setBuz@time
  5742  011A  3000               	movlw	0
  5743  011B  00AA               	movwf	setBuz@time+1
  5744  011C  3002               	movlw	2
  5745  011D  3196  2696         	fcall	_setBuz
  5746                           
  5747                           ;Switch_B1.c: 187: }
  5748                           ;Switch_B1.c: 189: }
  5749                           ;Switch_B1.c: 190: } else {
  5750  011F  0008               	return
  5751  0120                     l7338:	
  5752                           
  5753                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5754  0120  087C               	movf	_Sw,w
  5755  0121  0086               	movwf	6
  5756  0122  3001               	movlw	1	; select bank2/3
  5757  0123  0087               	movwf	7
  5758  0124  1A81               	btfsc	1,5
  5759  0125  0008               	return
  5760                           
  5761                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5762  0126  087C               	movf	_Sw,w
  5763  0127  3E07               	addlw	7
  5764  0128  0086               	movwf	6
  5765  0129  3001               	movlw	1	; select bank2/3
  5766  012A  0087               	movwf	7
  5767  012B  3001               	movlw	1
  5768  012C  0781               	addwf	1,f
  5769  012D  3141               	addfsr 1,1
  5770  012E  1803               	skipnc
  5771  012F  0A81               	incf	1,f
  5772                           
  5773                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5774  0130  087C               	movf	_Sw,w
  5775  0131  3E07               	addlw	7
  5776  0132  0086               	movwf	6
  5777  0133  3001               	movlw	1	; select bank2/3
  5778  0134  0087               	movwf	7
  5779  0135  3F40               	moviw [0]fsr1
  5780  0136  0020               	movlb	0	; select bank0
  5781  0137  00B1               	movwf	??_setSw_Main
  5782  0138  3F41               	moviw [1]fsr1
  5783  0139  00B2               	movwf	??_setSw_Main+1
  5784  013A  3001               	movlw	1
  5785  013B  0232               	subwf	??_setSw_Main+1,w
  5786  013C  302C               	movlw	44
  5787  013D  1903               	skipnz
  5788  013E  0231               	subwf	??_setSw_Main,w
  5789  013F  1C03               	skipc
  5790  0140  0008               	return
  5791                           
  5792                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5793  0141  087C               	movf	_Sw,w
  5794  0142  3E07               	addlw	7
  5795  0143  0086               	movwf	6
  5796  0144  3001               	movlw	1	; select bank2/3
  5797  0145  0087               	movwf	7
  5798  0146  3000               	movlw	0
  5799  0147  3FC0               	movwi [0]fsr1
  5800  0148  3FC1               	movwi [1]fsr1
  5801                           
  5802                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5803  0149  087C               	movf	_Sw,w
  5804  014A  0086               	movwf	6
  5805  014B  3001               	movlw	1	; select bank2/3
  5806  014C  0087               	movwf	7
  5807  014D  1681               	bsf	1,5
  5808                           
  5809                           ;Switch_B1.c: 198: setRF_Learn(0);
  5810  014E  3000               	movlw	0
  5811  014F  319E  2651         	fcall	_setRF_Learn
  5812                           
  5813                           ;Switch_B1.c: 201: }
  5814                           ;Switch_B1.c: 202: }
  5815                           ;Switch_B1.c: 203: }
  5816                           ;Switch_B1.c: 204: }
  5817                           ;Switch_B1.c: 205: }
  5818                           ;Switch_B1.c: 206: } else {
  5819  0151  0008               	return
  5820  0152                     l7348:	
  5821                           
  5822                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5823  0152  087C               	movf	_Sw,w
  5824  0153  0086               	movwf	6
  5825  0154  3001               	movlw	1	; select bank2/3
  5826  0155  0087               	movwf	7
  5827  0156  1D01               	btfss	1,2
  5828  0157  0008               	return
  5829                           
  5830                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5831  0158  3001               	movlw	1
  5832  0159  0020               	movlb	0	; select bank0
  5833  015A  00B1               	movwf	??_setSw_Main
  5834  015B  087C               	movf	_Sw,w
  5835  015C  3E02               	addlw	2
  5836  015D  0086               	movwf	6
  5837  015E  3001               	movlw	1	; select bank2/3
  5838  015F  0087               	movwf	7
  5839  0160  0831               	movf	??_setSw_Main,w
  5840  0161  0781               	addwf	1,f
  5841                           
  5842                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5843  0162  087C               	movf	_Sw,w
  5844  0163  3E02               	addlw	2
  5845  0164  0086               	movwf	6
  5846  0165  3001               	movlw	1	; select bank2/3
  5847  0166  0087               	movwf	7
  5848  0167  3005               	movlw	5
  5849  0168  0201               	subwf	1,w
  5850  0169  1C03               	skipc
  5851  016A  0008               	return
  5852                           
  5853                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5854  016B  087C               	movf	_Sw,w
  5855  016C  3E02               	addlw	2
  5856  016D  0086               	movwf	6
  5857  016E  3001               	movlw	1	; select bank2/3
  5858  016F  0087               	movwf	7
  5859  0170  0181               	clrf	1
  5860                           
  5861                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5862  0171  087C               	movf	_Sw,w
  5863  0172  0086               	movwf	6
  5864  0173  3001               	movlw	1	; select bank2/3
  5865  0174  0087               	movwf	7
  5866  0175  1101               	bcf	1,2
  5867                           
  5868                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5869  0176  087C               	movf	_Sw,w
  5870  0177  3E03               	addlw	3
  5871  0178  0086               	movwf	6
  5872  0179  3001               	movlw	1	; select bank2/3
  5873  017A  0087               	movwf	7
  5874  017B  3000               	movlw	0
  5875  017C  3FC0               	movwi [0]fsr1
  5876  017D  3FC1               	movwi [1]fsr1
  5877                           
  5878                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5879  017E  087C               	movf	_Sw,w
  5880  017F  0086               	movwf	6
  5881  0180  3001               	movlw	1	; select bank2/3
  5882  0181  0087               	movwf	7
  5883  0182  1181               	bcf	1,3
  5884                           
  5885                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5886  0183  087C               	movf	_Sw,w
  5887  0184  3E05               	addlw	5
  5888  0185  0086               	movwf	6
  5889  0186  3001               	movlw	1	; select bank2/3
  5890  0187  0087               	movwf	7
  5891  0188  3000               	movlw	0
  5892  0189  3FC0               	movwi [0]fsr1
  5893  018A  3FC1               	movwi [1]fsr1
  5894                           
  5895                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5896  018B  087C               	movf	_Sw,w
  5897  018C  0086               	movwf	6
  5898  018D  3001               	movlw	1	; select bank2/3
  5899  018E  0087               	movwf	7
  5900  018F  1201               	bcf	1,4
  5901                           
  5902                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5903  0190  087C               	movf	_Sw,w
  5904  0191  3E07               	addlw	7
  5905  0192  0086               	movwf	6
  5906  0193  3001               	movlw	1	; select bank2/3
  5907  0194  0087               	movwf	7
  5908  0195  3000               	movlw	0
  5909  0196  3FC0               	movwi [0]fsr1
  5910  0197  3FC1               	movwi [1]fsr1
  5911                           
  5912                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5913  0198  087C               	movf	_Sw,w
  5914  0199  0086               	movwf	6
  5915  019A  3001               	movlw	1	; select bank2/3
  5916  019B  0087               	movwf	7
  5917  019C  1281               	bcf	1,5
  5918                           
  5919                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5920  019D  0021               	movlb	1	; select bank1
  5921  019E  1851               	btfsc	_SwDetect^(0+128),0
  5922  019F  29A5               	goto	l7374
  5923                           
  5924                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5925  01A0  0020               	movlb	0	; select bank0
  5926  01A1  0833               	movf	setSw_Main@sw,w
  5927  01A2  3194  24B6  3180   	fcall	_setDimmerLights_SwOff
  5928  01A5                     l7374:	
  5929                           
  5930                           ;Switch_B1.c: 221: }
  5931                           ;Switch_B1.c: 224: setRF_Learn(0);
  5932  01A5  3000               	movlw	0
  5933  01A6  319E  2651         	fcall	_setRF_Learn
  5934                           
  5935                           ;Switch_B1.c: 226: }
  5936                           ;Switch_B1.c: 227: }
  5937                           ;Switch_B1.c: 228: }
  5938                           ;Switch_B1.c: 229: } else {
  5939  01A8  0008               	return
  5940  01A9                     l2391:	
  5941                           
  5942                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5943  01A9  0021               	movlb	1	; select bank1
  5944  01AA  1C20               	btfss	_myMain^(0+128),0
  5945  01AB  0008               	return
  5946                           
  5947                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5948  01AC  087C               	movf	_Sw,w
  5949  01AD  0086               	movwf	6
  5950  01AE  3001               	movlw	1	; select bank2/3
  5951  01AF  0087               	movwf	7
  5952  01B0  1401               	bsf	1,0
  5953  01B1  0008               	return
  5954  01B2                     __end_of_setSw_Main:	
  5955                           
  5956                           	psect	text14
  5957  1E51                     __ptext14:	
  5958 ;; *************** function _setRF_Learn *****************
  5959 ;; Defined at:
  5960 ;;		line 23 in file "../src/RF_Control_B1.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  command         1    wreg     unsigned char 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  command         1    1[BANK0 ] unsigned char 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;		None               void
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;Total ram usage:        2 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    5
  5981 ;; This function calls:
  5982 ;;		Nothing
  5983 ;; This function is called by:
  5984 ;;		_setSw_Main
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           
  5989                           ;psect for function _setRF_Learn
  5990  1E51                     _setRF_Learn:	
  5991                           
  5992                           ;incstack = 0
  5993                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5994                           ;setRF_Learn@command stored from wreg
  5995  1E51  0020               	movlb	0	; select bank0
  5996  1E52  00A1               	movwf	setRF_Learn@command
  5997                           
  5998                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5999  1E53  0821               	movf	setRF_Learn@command,w
  6000  1E54  3A01               	xorlw	1
  6001  1E55  3000               	movlw	0
  6002  1E56  1903               	skipnz
  6003  1E57  3001               	movlw	1
  6004  1E58  00A0               	movwf	??_setRF_Learn
  6005  1E59  0EA0               	swapf	??_setRF_Learn,f
  6006  1E5A  0DA0               	rlf	??_setRF_Learn,f
  6007  1E5B  0DA0               	rlf	??_setRF_Learn,f
  6008  1E5C  0021               	movlb	1	; select bank1
  6009  1E5D  083B               	movf	_RF1^(0+128),w
  6010  1E5E  0020               	movlb	0	; select bank0
  6011  1E5F  0620               	xorwf	??_setRF_Learn,w
  6012  1E60  39BF               	andlw	-65
  6013  1E61  0620               	xorwf	??_setRF_Learn,w
  6014  1E62  0021               	movlb	1	; select bank1
  6015  1E63  00BB               	movwf	_RF1^(0+128)
  6016  1E64  0008               	return
  6017  1E65                     __end_of_setRF_Learn:	
  6018                           
  6019                           	psect	text15
  6020  12E8                     __ptext15:	
  6021 ;; *************** function _setDimmerLights_AdjControl *****************
  6022 ;; Defined at:
  6023 ;;		line 562 in file "../src/Dimmer_B1.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  sw              1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  sw              1    8[BANK0 ] unsigned char 
  6028 ;;  idle            1    6[BANK0 ] unsigned char 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;		None               void
  6031 ;; Registers used:
  6032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;Total ram usage:        4 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    7
  6045 ;; This function calls:
  6046 ;;		_DimmerLightsPointSelect
  6047 ;;		_getAll_DimmerLights_AdjGO
  6048 ;;		_setDimmerLights_TriggerAdj
  6049 ;; This function is called by:
  6050 ;;		_setSw_Main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _setDimmerLights_AdjControl
  6056  12E8                     _setDimmerLights_AdjControl:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6060                           ;setDimmerLights_AdjControl@sw stored from wreg
  6061  12E8  0020               	movlb	0	; select bank0
  6062  12E9  00A8               	movwf	setDimmerLights_AdjControl@sw
  6063                           
  6064                           ;Dimmer_B1.c: 563: DimmerLightsPointSelect(sw);
  6065  12EA  0828               	movf	setDimmerLights_AdjControl@sw,w
  6066  12EB  319C  248B  3192   	fcall	_DimmerLightsPointSelect
  6067                           
  6068                           ;Dimmer_B1.c: 564: char idle = 0;
  6069  12EE  0020               	movlb	0	; select bank0
  6070  12EF  01A6               	clrf	setDimmerLights_AdjControl@idle
  6071                           
  6072                           ;Dimmer_B1.c: 566: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6073  12F0  01A7               	clrf	_setDimmerLights_AdjControl$2408
  6074  12F1  319C  246B  3192   	fcall	_getAll_DimmerLights_AdjGO
  6075  12F4  3A01               	xorlw	1
  6076  12F5  1D03               	skipz
  6077  12F6  2AFD               	goto	l6520
  6078  12F7  0022               	movlb	2	; select bank2
  6079  12F8  1CBE               	btfss	_Dimmer^(0+256),1
  6080  12F9  2AFD               	goto	l6520
  6081  12FA  0020               	movlb	0	; select bank0
  6082  12FB  01A7               	clrf	_setDimmerLights_AdjControl$2408
  6083  12FC  0AA7               	incf	_setDimmerLights_AdjControl$2408,f
  6084  12FD                     l6520:	
  6085  12FD  0020               	movlb	0	; select bank0
  6086  12FE  0827               	movf	_setDimmerLights_AdjControl$2408,w
  6087  12FF  00A5               	movwf	??_setDimmerLights_AdjControl
  6088  1300  0825               	movf	??_setDimmerLights_AdjControl,w
  6089  1301  00A6               	movwf	setDimmerLights_AdjControl@idle
  6090                           
  6091                           ;Dimmer_B1.c: 568: if (idle == 0) {
  6092  1302  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6093  1303  1D03               	skipz
  6094  1304  0008               	return
  6095                           
  6096                           ;Dimmer_B1.c: 569: if (DimmerLights->SwFlag == 1) {
  6097  1305  086F               	movf	_DimmerLights,w
  6098  1306  3E09               	addlw	9
  6099  1307  0086               	movwf	6
  6100  1308  3001               	movlw	1	; select bank2/3
  6101  1309  0087               	movwf	7
  6102  130A  1F01               	btfss	1,6
  6103  130B  0008               	return
  6104                           
  6105                           ;Dimmer_B1.c: 570: DimmerLights->SwAdj = 1;
  6106  130C  086F               	movf	_DimmerLights,w
  6107  130D  3E09               	addlw	9
  6108  130E  0086               	movwf	6
  6109  130F  3001               	movlw	1	; select bank2/3
  6110  1310  0087               	movwf	7
  6111  1311  1781               	bsf	1,7
  6112                           
  6113                           ;Dimmer_B1.c: 571: DimmerLights->Status = 1;
  6114  1312  086F               	movf	_DimmerLights,w
  6115  1313  0086               	movwf	6
  6116  1314  3001               	movlw	1	; select bank2/3
  6117  1315  0087               	movwf	7
  6118  1316  1681               	bsf	1,5
  6119                           
  6120                           ;Dimmer_B1.c: 572: setDimmerLights_TriggerAdj(sw, 1);
  6121  1317  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6122  1318  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6123  1319  0828               	movf	setDimmerLights_AdjControl@sw,w
  6124  131A  319F  275F         	fcall	_setDimmerLights_TriggerAdj
  6125  131C  0008               	return
  6126  131D                     __end_of_setDimmerLights_AdjControl:	
  6127                           
  6128                           	psect	text16
  6129  1DD0                     __ptext16:	
  6130 ;; *************** function _getSw_KeyStatus *****************
  6131 ;; Defined at:
  6132 ;;		line 237 in file "../src/Switch_B1.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  sw              1    wreg     unsigned char 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  sw              1    0[COMMON] unsigned char 
  6137 ;;  status          1    1[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      unsigned char 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;Total ram usage:        3 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_setSw_Main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _getSw_KeyStatus
  6163  1DD0                     _getSw_KeyStatus:	
  6164                           
  6165                           ;Switch_B1.c: 238: char status = 0;
  6166                           
  6167                           ;incstack = 0
  6168                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6169  1DD0  0020               	movlb	0	; select bank0
  6170  1DD1  01A1               	clrf	getSw_KeyStatus@status
  6171                           
  6172                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6173  1DD2  01A2               	clrf	_getSw_KeyStatus$6547
  6174  1DD3  0AA2               	incf	_getSw_KeyStatus$6547,f
  6175  1DD4  1F0C               	btfss	12,6	;volatile
  6176  1DD5  1A0C               	btfsc	12,4	;volatile
  6177  1DD6  2DDB               	goto	l6718
  6178  1DD7  1C0C               	btfss	12,0	;volatile
  6179  1DD8  1B8C               	btfsc	12,7	;volatile
  6180  1DD9  2DDB               	goto	l6718
  6181  1DDA  01A2               	clrf	_getSw_KeyStatus$6547
  6182  1DDB                     l6718:	
  6183  1DDB  0822               	movf	_getSw_KeyStatus$6547,w
  6184  1DDC  00A0               	movwf	??_getSw_KeyStatus
  6185  1DDD  0820               	movf	??_getSw_KeyStatus,w
  6186  1DDE  00A1               	movwf	getSw_KeyStatus@status
  6187                           
  6188                           ;Switch_B1.c: 261: return status;
  6189  1DDF  0821               	movf	getSw_KeyStatus@status,w
  6190  1DE0  0008               	return
  6191  1DE1                     __end_of_getSw_KeyStatus:	
  6192                           
  6193                           	psect	text17
  6194  1CC2                     __ptext17:	
  6195 ;; *************** function _SwPointSelect *****************
  6196 ;; Defined at:
  6197 ;;		line 25 in file "../src/Switch_B1.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  sw              1    wreg     unsigned char 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;  sw              1    1[BANK0 ] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    5
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_setSw_Main
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _SwPointSelect
  6227  1CC2                     _SwPointSelect:	
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _SwPointSelect: [wreg]
  6231                           ;SwPointSelect@sw stored from wreg
  6232  1CC2  0020               	movlb	0	; select bank0
  6233  1CC3  00A1               	movwf	SwPointSelect@sw
  6234                           
  6235                           ;Switch_B1.c: 28: if (sw == 1) {
  6236  1CC4  0821               	movf	SwPointSelect@sw,w
  6237  1CC5  3A01               	xorlw	1
  6238  1CC6  1D03               	skipz
  6239  1CC7  0008               	return
  6240                           
  6241                           ;Switch_B1.c: 29: Sw = &Sw1;
  6242  1CC8  30D4               	movlw	_Sw1& (0+255)
  6243  1CC9  00A0               	movwf	??_SwPointSelect
  6244  1CCA  0820               	movf	??_SwPointSelect,w
  6245  1CCB  00FC               	movwf	_Sw
  6246  1CCC  0008               	return
  6247  1CCD                     __end_of_SwPointSelect:	
  6248                           
  6249                           	psect	text18
  6250  17A4                     __ptext18:	
  6251 ;; *************** function _setMain_Exception *****************
  6252 ;; Defined at:
  6253 ;;		line 289 in file "../src/Main_B1.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  command         1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  command         1   28[BANK0 ] unsigned char 
  6258 ;;  status          1   27[BANK0 ] unsigned char 
  6259 ;;  buz             1   24[BANK0 ] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;		None               void
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;Total ram usage:        7 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:   10
  6276 ;; This function calls:
  6277 ;;		_getDimmerLights_Line
  6278 ;;		_getMain_LightsStatus
  6279 ;;		_setBuz
  6280 ;;		_setDimmerLights_ErrorClose
  6281 ;;		_setLED
  6282 ;; This function is called by:
  6283 ;;		_Switch_Main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _setMain_Exception
  6289  17A4                     _setMain_Exception:	
  6290                           
  6291                           ;incstack = 0
  6292                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6293                           ;setMain_Exception@command stored from wreg
  6294  17A4  0020               	movlb	0	; select bank0
  6295  17A5  00BC               	movwf	setMain_Exception@command
  6296                           
  6297                           ;Main_B1.c: 290: char status = 0, buz = 0;
  6298  17A6  01BB               	clrf	setMain_Exception@status
  6299  17A7  01B8               	clrf	setMain_Exception@buz
  6300                           
  6301                           ;Main_B1.c: 307: status = command == 3 ? getDimmerLights_Line() : 255;
  6302  17A8  083C               	movf	setMain_Exception@command,w
  6303  17A9  3A03               	xorlw	3
  6304  17AA  1903               	skipnz
  6305  17AB  2FB0               	goto	l7048
  6306  17AC  30FF               	movlw	255
  6307  17AD  00B9               	movwf	_setMain_Exception$3731
  6308  17AE  3000               	movlw	0
  6309  17AF  2FB9               	goto	L3
  6310  17B0                     l7048:	
  6311  17B0  319C  24B7  3197   	fcall	_getDimmerLights_Line
  6312  17B3  0020               	movlb	0	; select bank0
  6313  17B4  00B6               	movwf	??_setMain_Exception
  6314  17B5  01B7               	clrf	??_setMain_Exception+1
  6315  17B6  0836               	movf	??_setMain_Exception,w
  6316  17B7  00B9               	movwf	_setMain_Exception$3731
  6317  17B8  0837               	movf	??_setMain_Exception+1,w
  6318  17B9                     L3:	
  6319  17B9  00BA               	movwf	_setMain_Exception$3731+1
  6320  17BA  0839               	movf	_setMain_Exception$3731,w
  6321  17BB  00B6               	movwf	??_setMain_Exception
  6322  17BC  0836               	movf	??_setMain_Exception,w
  6323  17BD  00BB               	movwf	setMain_Exception@status
  6324                           
  6325                           ;Main_B1.c: 309: if (command == 0) {
  6326  17BE  08BC               	movf	setMain_Exception@command,f
  6327  17BF  1D03               	skipz
  6328  17C0  2FC3               	goto	l7056
  6329                           
  6330                           ;Main_B1.c: 310: setLED(99, 10);
  6331  17C1  300A               	movlw	10
  6332  17C2  2FC5               	goto	L4
  6333  17C3                     l7056:	
  6334                           ;Main_B1.c: 311: } else {
  6335                           
  6336                           
  6337                           ;Main_B1.c: 312: setLED(99, 11);
  6338  17C3  300B               	movlw	11
  6339  17C4  0020               	movlb	0	; select bank0
  6340  17C5                     L4:	
  6341  17C5  00B6               	movwf	??_setMain_Exception
  6342  17C6  0836               	movf	??_setMain_Exception,w
  6343  17C7  00A2               	movwf	setLED@command
  6344  17C8  3063               	movlw	99
  6345  17C9  3193  231D  3197   	fcall	_setLED
  6346                           
  6347                           ;Main_B1.c: 313: }
  6348                           ;Main_B1.c: 315: if (command != 0) {
  6349  17CC  0020               	movlb	0	; select bank0
  6350  17CD  083C               	movf	setMain_Exception@command,w
  6351  17CE  1903               	btfsc	3,2
  6352  17CF  0008               	return
  6353                           
  6354                           ;Main_B1.c: 316: switch (command) {
  6355  17D0  2FF1               	goto	l7072
  6356  17D1                     l7062:	
  6357                           ;Main_B1.c: 317: case 2:
  6358                           
  6359                           
  6360                           ;Main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6361  17D1  3191  2192  3197   	fcall	_getMain_LightsStatus
  6362  17D4  3A01               	xorlw	1
  6363  17D5  1D03               	skipz
  6364  17D6  2FFA               	goto	l7074
  6365                           
  6366                           ;Main_B1.c: 319: setBuz(10, 300);
  6367  17D7  302C               	movlw	44
  6368  17D8  0020               	movlb	0	; select bank0
  6369  17D9  00A9               	movwf	setBuz@time
  6370  17DA  3001               	movlw	1
  6371  17DB  00AA               	movwf	setBuz@time+1
  6372  17DC  300A               	movlw	10
  6373  17DD  3196  2696  3197   	fcall	_setBuz
  6374                           
  6375                           ;Main_B1.c: 320: }
  6376                           ;Main_B1.c: 321: break;
  6377  17E0  2FFA               	goto	l7074
  6378  17E1                     l7066:	
  6379                           ;Main_B1.c: 322: case 3:
  6380                           
  6381                           
  6382                           ;Main_B1.c: 323: if (getMain_LightsStatus() == 1) {
  6383  17E1  3191  2192  3197   	fcall	_getMain_LightsStatus
  6384  17E4  3A01               	xorlw	1
  6385  17E5  1D03               	skipz
  6386  17E6  2FFA               	goto	l7074
  6387                           
  6388                           ;Main_B1.c: 324: setBuz(5, 300);
  6389  17E7  302C               	movlw	44
  6390  17E8  0020               	movlb	0	; select bank0
  6391  17E9  00A9               	movwf	setBuz@time
  6392  17EA  3001               	movlw	1
  6393  17EB  00AA               	movwf	setBuz@time+1
  6394  17EC  3005               	movlw	5
  6395  17ED  3196  2696  3197   	fcall	_setBuz
  6396                           
  6397                           ;Main_B1.c: 327: }
  6398                           
  6399                           ;Main_B1.c: 325: }
  6400                           ;Main_B1.c: 326: break;
  6401  17F0  2FFA               	goto	l7074
  6402  17F1                     l7072:	
  6403  17F1  0020               	movlb	0	; select bank0
  6404  17F2  083C               	movf	setMain_Exception@command,w
  6405                           
  6406                           ; Switch size 1, requested type "space"
  6407                           ; Number of cases is 2, Range of values is 2 to 3
  6408                           ; switch strategies available:
  6409                           ; Name         Instructions Cycles
  6410                           ; simple_byte            7     4 (average)
  6411                           ; direct_byte           13     9 (fixed)
  6412                           ; jumptable            263     9 (fixed)
  6413                           ;	Chosen strategy is simple_byte
  6414  17F3  3A02               	xorlw	2	; case 2
  6415  17F4  1903               	skipnz
  6416  17F5  2FD1               	goto	l7062
  6417  17F6  3A01               	xorlw	1	; case 3
  6418  17F7  1903               	skipnz
  6419  17F8  2FE1               	goto	l7066
  6420  17F9  2FFA               	goto	l7074
  6421  17FA                     l7074:	
  6422                           
  6423                           ;Main_B1.c: 328: setDimmerLights_ErrorClose(status);
  6424  17FA  0020               	movlb	0	; select bank0
  6425  17FB  083B               	movf	setMain_Exception@status,w
  6426  17FC  3195  25E6         	fcall	_setDimmerLights_ErrorClose
  6427  17FE  0020               	movlb	0	; select bank0
  6428  17FF  0008               	return
  6429  1800                     __end_of_setMain_Exception:	
  6430                           
  6431                           	psect	text19
  6432  1CB7                     __ptext19:	
  6433 ;; *************** function _getDimmerLights_Line *****************
  6434 ;; Defined at:
  6435 ;;		line 711 in file "../src/Dimmer_B1.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  line            1    0[BANK0 ] unsigned char 
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      unsigned char 
  6442 ;; Registers used:
  6443 ;;		wreg, status,2
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;Total ram usage:        1 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    5
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_setMain_Exception
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _getDimmerLights_Line
  6465  1CB7                     _getDimmerLights_Line:	
  6466                           
  6467                           ;Dimmer_B1.c: 712: char line = 0;
  6468                           
  6469                           ;incstack = 0
  6470                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6471  1CB7  0020               	movlb	0	; select bank0
  6472  1CB8  01A0               	clrf	getDimmerLights_Line@line
  6473                           
  6474                           ;Dimmer_B1.c: 714: if (DimmerLights1.Line == 1) {
  6475  1CB9  0023               	movlb	3	; select bank3
  6476  1CBA  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6477  1CBB  2CBF               	goto	l6542
  6478                           
  6479                           ;Dimmer_B1.c: 715: line = 1;
  6480  1CBC  0020               	movlb	0	; select bank0
  6481  1CBD  01A0               	clrf	getDimmerLights_Line@line
  6482  1CBE  0AA0               	incf	getDimmerLights_Line@line,f
  6483  1CBF                     l6542:	
  6484                           
  6485                           ;Dimmer_B1.c: 716: }
  6486                           ;Dimmer_B1.c: 728: return line;
  6487  1CBF  0020               	movlb	0	; select bank0
  6488  1CC0  0820               	movf	getDimmerLights_Line@line,w
  6489  1CC1  0008               	return
  6490  1CC2                     __end_of_getDimmerLights_Line:	
  6491                           
  6492                           	psect	text20
  6493  0800                     __ptext20:	
  6494 ;; *************** function _Switch_Initialization *****************
  6495 ;; Defined at:
  6496 ;;		line 46 in file "../src/Switch_B1.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    8
  6517 ;; This function calls:
  6518 ;;		_TouchPower
  6519 ;;		_setSw_Initialization
  6520 ;; This function is called by:
  6521 ;;		_main
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           
  6526                           ;psect for function _Switch_Initialization
  6527  0800                     _Switch_Initialization:	
  6528                           
  6529                           ;Switch_B1.c: 47: TouchPower();
  6530                           
  6531                           ;incstack = 0
  6532                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6533  0800  319E  268F  3188   	fcall	_TouchPower
  6534                           
  6535                           ;Switch_B1.c: 49: WPUB1 = 0;
  6536  0803  0024               	movlb	4	; select bank4
  6537  0804  108D               	bcf	13,1	;volatile
  6538                           
  6539                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6540  0805  3001               	movlw	1
  6541  0806  319D  258D         	fcall	_setSw_Initialization
  6542  0808  0008               	return
  6543  0809                     __end_of_Switch_Initialization:	
  6544                           
  6545                           	psect	text21
  6546  1D8D                     __ptext21:	
  6547 ;; *************** function _setSw_Initialization *****************
  6548 ;; Defined at:
  6549 ;;		line 109 in file "../src/Switch_B1.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  sw              1    wreg     unsigned char 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  sw              1    4[BANK0 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        1 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    7
  6570 ;; This function calls:
  6571 ;;		_setLED
  6572 ;; This function is called by:
  6573 ;;		_Switch_Initialization
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _setSw_Initialization
  6579  1D8D                     _setSw_Initialization:	
  6580                           
  6581                           ;incstack = 0
  6582                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6583                           ;setSw_Initialization@sw stored from wreg
  6584  1D8D  0020               	movlb	0	; select bank0
  6585  1D8E  00A4               	movwf	setSw_Initialization@sw
  6586                           
  6587                           ;Switch_B1.c: 110: setLED(sw, 1);
  6588  1D8F  01A2               	clrf	setLED@command
  6589  1D90  0AA2               	incf	setLED@command,f
  6590  1D91  0824               	movf	setSw_Initialization@sw,w
  6591  1D92  3193  231D  319D   	fcall	_setLED
  6592                           
  6593                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6594  1D95  0020               	movlb	0	; select bank0
  6595  1D96  01A2               	clrf	setLED@command
  6596  1D97  0AA2               	incf	setLED@command,f
  6597  1D98  0824               	movf	setSw_Initialization@sw,w
  6598  1D99  3E01               	addlw	1
  6599  1D9A  3193  231D         	fcall	_setLED
  6600  1D9C  0008               	return
  6601  1D9D                     __end_of_setSw_Initialization:	
  6602                           
  6603                           	psect	text22
  6604  1E8F                     __ptext22:	
  6605 ;; *************** function _TouchPower *****************
  6606 ;; Defined at:
  6607 ;;		line 10 in file "../src/Switch_B1.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;		None               void
  6614 ;; Registers used:
  6615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    6
  6628 ;; This function calls:
  6629 ;;		_Timeout_Counter
  6630 ;;		_set_TimeoutCleared
  6631 ;; This function is called by:
  6632 ;;		_Switch_Initialization
  6633 ;;		_Switch_Main
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _TouchPower
  6639  1E8F                     _TouchPower:	
  6640                           
  6641                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6645  1E8F  0020               	movlb	0	; select bank0
  6646  1E90  180D               	btfsc	13,0	;volatile
  6647  1E91  0008               	return
  6648                           
  6649                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6650  1E92  0021               	movlb	1	; select bank1
  6651  1E93  1C20               	btfss	_myMain^(0+128),0
  6652  1E94  0008               	return
  6653  1E95  2E9B               	goto	l7280
  6654  1E96                     l2367:	
  6655                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6656                           
  6657                           
  6658                           ;Switch_B1.c: 14: RB0 = 1;
  6659  1E96  0020               	movlb	0	; select bank0
  6660  1E97  140D               	bsf	13,0	;volatile
  6661                           
  6662                           ;Switch_B1.c: 15: Timeout_Counter();
  6663  1E98  319E  2665  319E   	fcall	_Timeout_Counter
  6664  1E9B                     l7280:	
  6665  1E9B  0020               	movlb	0	; select bank0
  6666  1E9C  180D               	btfsc	13,0	;volatile
  6667  1E9D  2EA1               	goto	l7284
  6668  1E9E  0021               	movlb	1	; select bank1
  6669  1E9F  1D2C               	btfss	(_myMain^(0+128)+12),2
  6670  1EA0  2E96               	goto	l2367
  6671  1EA1                     l7284:	
  6672                           
  6673                           ;Switch_B1.c: 16: }
  6674                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6675  1EA1  319C  241C         	fcall	_set_TimeoutCleared
  6676  1EA3  0008               	return
  6677  1EA4                     __end_of_TouchPower:	
  6678                           
  6679                           	psect	text23
  6680  1BEF                     __ptext23:	
  6681 ;; *************** function _RF_Main *****************
  6682 ;; Defined at:
  6683 ;;		line 16 in file "../src/RF_Control_B1.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        0 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:   14
  6704 ;; This function calls:
  6705 ;;		_setRF_Main
  6706 ;; This function is called by:
  6707 ;;		_main
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _RF_Main
  6713  1BEF                     _RF_Main:	
  6714                           
  6715                           ;RF_Control_B1.c: 18: setRF_Main();
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6719  1BEF  3185  2532         	fcall	_setRF_Main
  6720  1BF1  0008               	return
  6721  1BF2                     __end_of_RF_Main:	
  6722                           
  6723                           	psect	text24
  6724  0532                     __ptext24:	
  6725 ;; *************** function _setRF_Main *****************
  6726 ;; Defined at:
  6727 ;;		line 52 in file "../src/RF_Control_B1.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  error           1    2[BANK1 ] unsigned char 
  6732 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6733 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;		None               void
  6736 ;; Registers used:
  6737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;Total ram usage:        4 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:   13
  6750 ;; This function calls:
  6751 ;;		_CC2500_RxData
  6752 ;;		_CC2500_TxData
  6753 ;;		_CC2500_WriteCommand
  6754 ;;		_RF_RxDisable
  6755 ;;		_getBuz_GO
  6756 ;;		_getMain_All_Error_Status
  6757 ;;		_getRF_KeyStatus
  6758 ;;		_getRxData
  6759 ;; This function is called by:
  6760 ;;		_RF_Main
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function _setRF_Main
  6766  0532                     _setRF_Main:	
  6767                           
  6768                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6769                           
  6770                           ;incstack = 0
  6771                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6772  0532  0021               	movlb	1	; select bank1
  6773  0533  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6774  0534  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6775  0535  01EA               	clrf	setRF_Main@error^(0+128)
  6776                           
  6777                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6778  0536  1C3B               	btfss	_RF1^(0+128),0
  6779  0537  2E0D               	goto	l2002
  6780                           
  6781                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6782  0538  319D  25AE  3185   	fcall	_getBuz_GO
  6783  053B  0020               	movlb	0	; select bank0
  6784  053C  0821               	movf	?_getBuz_GO+1,w
  6785  053D  0420               	iorwf	?_getBuz_GO,w
  6786  053E  1D03               	skipz
  6787  053F  0008               	return
  6788                           
  6789                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6790  0540  3000               	movlw	0
  6791  0541  3192  224E  3185   	fcall	_getMain_All_Error_Status
  6792  0544  3800               	iorlw	0
  6793  0545  1D03               	skipz
  6794  0546  2D5B               	goto	l2004
  6795                           
  6796                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6797  0547  319D  25BF  3185   	fcall	_getRF_KeyStatus
  6798  054A  3A01               	xorlw	1
  6799  054B  3000               	movlw	0
  6800  054C  1903               	skipnz
  6801  054D  3001               	movlw	1
  6802  054E  0020               	movlb	0	; select bank0
  6803  054F  00ED               	movwf	??_setRF_Main
  6804  0550  0CED               	rrf	??_setRF_Main,f
  6805  0551  0CED               	rrf	??_setRF_Main,f
  6806  0552  0021               	movlb	1	; select bank1
  6807  0553  083B               	movf	_RF1^(0+128),w
  6808  0554  0020               	movlb	0	; select bank0
  6809  0555  066D               	xorwf	??_setRF_Main,w
  6810  0556  397F               	andlw	-129
  6811  0557  066D               	xorwf	??_setRF_Main,w
  6812  0558  0021               	movlb	1	; select bank1
  6813  0559  00BB               	movwf	_RF1^(0+128)
  6814                           
  6815                           ;RF_Control_B1.c: 65: } else {
  6816  055A  2D5D               	goto	l2005
  6817  055B                     l2004:	
  6818                           
  6819                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6820  055B  0021               	movlb	1	; select bank1
  6821  055C  13BB               	bcf	_RF1^(0+128),7
  6822  055D                     l2005:	
  6823                           
  6824                           ;RF_Control_B1.c: 70: }
  6825                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6826  055D  1BBB               	btfsc	_RF1^(0+128),7
  6827  055E  1B3B               	btfsc	_RF1^(0+128),6
  6828  055F  2D65               	goto	l2006
  6829                           
  6830                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6831  0560  01BD               	clrf	(_RF1^(0+128)+2)
  6832  0561  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6833                           
  6834                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6835  0562  14BC               	bsf	(_RF1^(0+128)+1),1
  6836                           
  6837                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6838  0563  11BB               	bcf	_RF1^(0+128),3
  6839                           
  6840                           ;RF_Control_B1.c: 76: } else {
  6841  0564  0008               	return
  6842  0565                     l2006:	
  6843                           
  6844                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6845  0565  18BC               	btfsc	(_RF1^(0+128)+1),1
  6846  0566  1B3B               	btfsc	_RF1^(0+128),6
  6847  0567  2D7C               	goto	l7196
  6848                           
  6849                           ;RF_Control_B1.c: 78: RF1.Count++;
  6850  0568  3001               	movlw	1
  6851  0569  07BD               	addwf	(_RF1^(0+128)+2),f
  6852  056A  3000               	movlw	0
  6853  056B  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6854                           
  6855                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6856  056C  3002               	movlw	2
  6857  056D  3EBB               	addlw	_RF1& (0+255)
  6858  056E  0086               	movwf	6
  6859  056F  0187               	clrf	7
  6860  0570  3F40               	moviw [0]fsr1
  6861  0571  0642               	xorwf	(_RF1^(0+128)+7),w
  6862  0572  1D03               	skipz
  6863  0573  2D76               	goto	u6725
  6864  0574  3F41               	moviw [1]fsr1
  6865  0575  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6866  0576                     u6725:	
  6867  0576  1D03               	skipz
  6868  0577  2DDA               	goto	l7248
  6869                           
  6870                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6871  0578  01BD               	clrf	(_RF1^(0+128)+2)
  6872  0579  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6873                           
  6874                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6875  057A  10BC               	bcf	(_RF1^(0+128)+1),1
  6876                           
  6877                           ;RF_Control_B1.c: 82: }
  6878                           ;RF_Control_B1.c: 83: } else {
  6879  057B  2DDA               	goto	l7248
  6880  057C                     l7196:	
  6881                           
  6882                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6883  057C  01BD               	clrf	(_RF1^(0+128)+2)
  6884  057D  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6885                           
  6886                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6887  057E  10BC               	bcf	(_RF1^(0+128)+1),1
  6888                           
  6889                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6890  057F  193B               	btfsc	_RF1^(0+128),2
  6891  0580  1B3B               	btfsc	_RF1^(0+128),6
  6892  0581  2D90               	goto	l2011
  6893                           
  6894                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6895  0582  113B               	bcf	_RF1^(0+128),2
  6896                           
  6897                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6898  0583  11BB               	bcf	_RF1^(0+128),3
  6899                           
  6900                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6901  0584  10BB               	bcf	_RF1^(0+128),1
  6902                           
  6903                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6904  0585  300A               	movlw	10
  6905  0586  00C2               	movwf	(_RF1^(0+128)+7)
  6906  0587  3000               	movlw	0
  6907  0588  00C3               	movwf	(_RF1^(0+128)+8)
  6908                           
  6909                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6910  0589  319D  253F  3185   	fcall	_RF_RxDisable
  6911                           
  6912                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6913  058C  3189  21E2  3185   	fcall	_CC2500_TxData
  6914                           
  6915                           ;RF_Control_B1.c: 106: } else {
  6916  058F  2DDA               	goto	l7248
  6917  0590                     l2011:	
  6918                           
  6919                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6920  0590  1DBB               	btfss	_RF1^(0+128),3
  6921  0591  2DC9               	goto	l2013
  6922                           
  6923                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6924  0592  318B  2373  3185   	fcall	_CC2500_RxData
  6925                           
  6926                           ;RF_Control_B1.c: 111: if (RF1.ReceiveGO == 1) {
  6927  0595  0021               	movlb	1	; select bank1
  6928  0596  1CBB               	btfss	_RF1^(0+128),1
  6929  0597  2DDA               	goto	l7248
  6930                           
  6931                           ;RF_Control_B1.c: 112: RF1.ReceiveGO = 0;
  6932  0598  10BB               	bcf	_RF1^(0+128),1
  6933                           
  6934                           ;RF_Control_B1.c: 113: RF1.Correction = 0;
  6935  0599  12BC               	bcf	(_RF1^(0+128)+1),5
  6936                           
  6937                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6938  059A  01C5               	clrf	(_RF1^(0+128)+10)
  6939  059B  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6940                           
  6941                           ;RF_Control_B1.c: 125: getRxData();
  6942  059C  318D  256E  3185   	fcall	_getRxData
  6943                           
  6944                           ;RF_Control_B1.c: 126: RF1.Run = 1;
  6945  059F  0021               	movlb	1	; select bank1
  6946  05A0  14BC               	bsf	(_RF1^(0+128)+1),1
  6947                           
  6948                           ;RF_Control_B1.c: 128: if (RF1.Checked == 1) {
  6949  05A1  1DBC               	btfss	(_RF1^(0+128)+1),3
  6950  05A2  2DB0               	goto	l7232
  6951                           
  6952                           ;RF_Control_B1.c: 129: if (RF1.RunTime > 10) {
  6953  05A3  3000               	movlw	0
  6954  05A4  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6955  05A5  300B               	movlw	11
  6956  05A6  1903               	skipnz
  6957  05A7  0242               	subwf	(_RF1^(0+128)+7),w
  6958  05A8  1C03               	skipc
  6959  05A9  2DAE               	goto	l7230
  6960                           
  6961                           ;RF_Control_B1.c: 130: RF1.RunTime = 10;
  6962  05AA  300A               	movlw	10
  6963  05AB  00C2               	movwf	(_RF1^(0+128)+7)
  6964  05AC  3000               	movlw	0
  6965  05AD  00C3               	movwf	(_RF1^(0+128)+8)
  6966  05AE                     l7230:	
  6967                           
  6968                           ;RF_Control_B1.c: 131: }
  6969                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6970  05AE  01BF               	clrf	(_RF1^(0+128)+4)
  6971                           
  6972                           ;RF_Control_B1.c: 133: } else {
  6973  05AF  2DDA               	goto	l7248
  6974  05B0                     l7232:	
  6975                           
  6976                           ;RF_Control_B1.c: 134: RF1.CheckCount++;
  6977  05B0  3001               	movlw	1
  6978  05B1  0020               	movlb	0	; select bank0
  6979  05B2  00ED               	movwf	??_setRF_Main
  6980  05B3  086D               	movf	??_setRF_Main,w
  6981  05B4  0021               	movlb	1	; select bank1
  6982  05B5  07BF               	addwf	(_RF1^(0+128)+4),f
  6983                           
  6984                           ;RF_Control_B1.c: 135: if (RF1.CheckCount == 2) {
  6985  05B6  083F               	movf	(_RF1^(0+128)+4),w
  6986  05B7  3A02               	xorlw	2
  6987  05B8  1D03               	skipz
  6988  05B9  2DDA               	goto	l7248
  6989                           
  6990                           ;RF_Control_B1.c: 136: RF1.CheckCount = 0;
  6991  05BA  01BF               	clrf	(_RF1^(0+128)+4)
  6992                           
  6993                           ;RF_Control_B1.c: 137: RF1.CheckedCounter = 0;
  6994  05BB  01C0               	clrf	(_RF1^(0+128)+5)
  6995  05BC  01C1               	clrf	((_RF1+1)^(0+128)+5)
  6996                           
  6997                           ;RF_Control_B1.c: 138: if (RF1.RunTime < 200) {
  6998  05BD  3000               	movlw	0
  6999  05BE  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7000  05BF  30C8               	movlw	200
  7001  05C0  1903               	skipnz
  7002  05C1  0242               	subwf	(_RF1^(0+128)+7),w
  7003  05C2  1803               	skipnc
  7004  05C3  2DDA               	goto	l7248
  7005                           
  7006                           ;RF_Control_B1.c: 139: RF1.RunTime += 10;
  7007  05C4  300A               	movlw	10
  7008  05C5  07C2               	addwf	(_RF1^(0+128)+7),f
  7009  05C6  3000               	movlw	0
  7010  05C7  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7011                           
  7012                           ;RF_Control_B1.c: 140: }
  7013                           ;RF_Control_B1.c: 141: }
  7014                           ;RF_Control_B1.c: 142: }
  7015                           ;RF_Control_B1.c: 143: }
  7016                           ;RF_Control_B1.c: 144: } else {
  7017  05C8  2DDA               	goto	l7248
  7018  05C9                     l2013:	
  7019                           
  7020                           ;RF_Control_B1.c: 146: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7021  05C9  1DBB               	btfss	_RF1^(0+128),3
  7022  05CA  18BB               	btfsc	_RF1^(0+128),1
  7023  05CB  2DDA               	goto	l7248
  7024                           
  7025                           ;RF_Control_B1.c: 147: RF1.RxStatus = 1;
  7026  05CC  15BB               	bsf	_RF1^(0+128),3
  7027                           
  7028                           ;RF_Control_B1.c: 148: RF1.Correction = 1;
  7029  05CD  16BC               	bsf	(_RF1^(0+128)+1),5
  7030                           
  7031                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x36);
  7032  05CE  3036               	movlw	54
  7033  05CF  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7034                           
  7035                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x3A);
  7036  05D2  303A               	movlw	58
  7037  05D3  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7038                           
  7039                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x34);
  7040  05D6  3034               	movlw	52
  7041  05D7  319E  26D3  3185   	fcall	_CC2500_WriteCommand
  7042  05DA                     l7248:	
  7043                           
  7044                           ;RF_Control_B1.c: 154: }
  7045                           ;RF_Control_B1.c: 156: }
  7046                           ;RF_Control_B1.c: 157: }
  7047                           ;RF_Control_B1.c: 158: }
  7048                           ;RF_Control_B1.c: 159: if (RF1.RxStatus == 1) {
  7049  05DA  0021               	movlb	1	; select bank1
  7050  05DB  1DBB               	btfss	_RF1^(0+128),3
  7051  05DC  2DFB               	goto	l7260
  7052                           
  7053                           ;RF_Control_B1.c: 160: RF1.CheckedCounter++;
  7054  05DD  3001               	movlw	1
  7055  05DE  07C0               	addwf	(_RF1^(0+128)+5),f
  7056  05DF  3000               	movlw	0
  7057  05E0  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7058                           
  7059                           ;RF_Control_B1.c: 161: if (RF1.CheckedCounter == 100) {
  7060  05E1  3005               	movlw	5
  7061  05E2  3EBB               	addlw	_RF1& (0+255)
  7062  05E3  0086               	movwf	6
  7063  05E4  0187               	clrf	7
  7064  05E5  3F40               	moviw [0]fsr1
  7065  05E6  3A64               	xorlw	100
  7066  05E7  1D03               	skipz
  7067  05E8  2DEB               	goto	u6845
  7068  05E9  3F41               	moviw [1]fsr1
  7069  05EA  3A00               	xorlw	0
  7070  05EB                     u6845:	
  7071  05EB  1D03               	skipz
  7072  05EC  2DFB               	goto	l7260
  7073                           
  7074                           ;RF_Control_B1.c: 162: RF1.CheckedCounter = 0;
  7075  05ED  01C0               	clrf	(_RF1^(0+128)+5)
  7076  05EE  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7077                           
  7078                           ;RF_Control_B1.c: 163: RF1.CheckCount = 0;
  7079  05EF  01BF               	clrf	(_RF1^(0+128)+4)
  7080                           
  7081                           ;RF_Control_B1.c: 164: if (RF1.RunTime > 10) {
  7082  05F0  3000               	movlw	0
  7083  05F1  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7084  05F2  300B               	movlw	11
  7085  05F3  1903               	skipnz
  7086  05F4  0242               	subwf	(_RF1^(0+128)+7),w
  7087  05F5  1C03               	skipc
  7088  05F6  2DFB               	goto	l7260
  7089                           
  7090                           ;RF_Control_B1.c: 165: RF1.RunTime -= 10;
  7091  05F7  300A               	movlw	10
  7092  05F8  02C2               	subwf	(_RF1^(0+128)+7),f
  7093  05F9  3000               	movlw	0
  7094  05FA  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7095  05FB                     l7260:	
  7096                           
  7097                           ;RF_Control_B1.c: 166: }
  7098                           ;RF_Control_B1.c: 167: }
  7099                           ;RF_Control_B1.c: 168: }
  7100                           ;RF_Control_B1.c: 169: if (RF1.Correction == 1) {
  7101  05FB  1EBC               	btfss	(_RF1^(0+128)+1),5
  7102  05FC  0008               	return
  7103                           
  7104                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter++;
  7105  05FD  3001               	movlw	1
  7106  05FE  07C5               	addwf	(_RF1^(0+128)+10),f
  7107  05FF  3000               	movlw	0
  7108  0600  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7109                           
  7110                           ;RF_Control_B1.c: 171: if (RF1.CorrectionCounter >= 30000) {
  7111  0601  3075               	movlw	117
  7112  0602  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7113  0603  3030               	movlw	48
  7114  0604  1903               	skipnz
  7115  0605  0245               	subwf	(_RF1^(0+128)+10),w
  7116  0606  1C03               	skipc
  7117  0607  0008               	return
  7118                           
  7119                           ;RF_Control_B1.c: 172: RF1.CorrectionCounter = 0;
  7120  0608  01C5               	clrf	(_RF1^(0+128)+10)
  7121  0609  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7122                           
  7123                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  7124  060A  11BB               	bcf	_RF1^(0+128),3
  7125                           
  7126                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  7127  060B  10BB               	bcf	_RF1^(0+128),1
  7128                           
  7129                           ;RF_Control_B1.c: 175: }
  7130                           ;RF_Control_B1.c: 176: }
  7131                           ;RF_Control_B1.c: 177: }
  7132                           ;RF_Control_B1.c: 178: }
  7133                           ;RF_Control_B1.c: 185: } else {
  7134  060C  0008               	return
  7135  060D                     l2002:	
  7136                           
  7137                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7138  060D  1C20               	btfss	_myMain^(0+128),0
  7139  060E  0008               	return
  7140                           
  7141                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7142  060F  143B               	bsf	_RF1^(0+128),0
  7143  0610  0008               	return
  7144  0611                     __end_of_setRF_Main:	
  7145                           
  7146                           	psect	text25
  7147  0D6E                     __ptext25:	
  7148 ;; *************** function _getRxData *****************
  7149 ;; Defined at:
  7150 ;;		line 277 in file "../src/RF_Control_B1.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;		None
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  error           1   76[BANK0 ] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;		None               void
  7157 ;; Registers used:
  7158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:   12
  7171 ;; This function calls:
  7172 ;;		_getMain_All_Error_Status
  7173 ;;		_setControl_Lights_Table
  7174 ;;		_setLog_Code
  7175 ;;		_setTxData
  7176 ;; This function is called by:
  7177 ;;		_setRF_Main
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           
  7182                           ;psect for function _getRxData
  7183  0D6E                     _getRxData:	
  7184                           
  7185                           ;RF_Control_B1.c: 278: char error = getMain_All_Error_Status(0);
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7189  0D6E  3000               	movlw	0
  7190  0D6F  3192  224E  318D   	fcall	_getMain_All_Error_Status
  7191  0D72  0020               	movlb	0	; select bank0
  7192  0D73  00EB               	movwf	??_getRxData
  7193  0D74  086B               	movf	??_getRxData,w
  7194  0D75  00EC               	movwf	getRxData@error
  7195                           
  7196                           ;RF_Control_B1.c: 279: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7197  0D76  0022               	movlb	2	; select bank2
  7198  0D77  0820               	movf	_RF_Data^(0+256),w
  7199  0D78  3AAA               	xorlw	170
  7200  0D79  1D03               	skipz
  7201  0D7A  2D91               	goto	l6654
  7202  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7203  0D7C  3A01               	xorlw	1
  7204  0D7D  1D03               	skipz
  7205  0D7E  2D91               	goto	l6654
  7206                           
  7207                           ;RF_Control_B1.c: 281: product->Data[2] = 0x55;
  7208  0D7F  3055               	movlw	85
  7209  0D80  0020               	movlb	0	; select bank0
  7210  0D81  00EB               	movwf	??_getRxData
  7211  0D82  086E               	movf	_product,w
  7212  0D83  3E02               	addlw	2
  7213  0D84  0086               	movwf	6
  7214  0D85  3002               	movlw	2	; select bank4/5
  7215  0D86  0087               	movwf	7
  7216  0D87  086B               	movf	??_getRxData,w
  7217  0D88  0081               	movwf	1
  7218                           
  7219                           ;RF_Control_B1.c: 282: setTxData();
  7220  0D89  3186  26ED         	fcall	_setTxData
  7221                           
  7222                           ;RF_Control_B1.c: 283: RF1.RunTime = 10;
  7223  0D8B  300A               	movlw	10
  7224  0D8C  0021               	movlb	1	; select bank1
  7225  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7226  0D8E  3000               	movlw	0
  7227  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7228                           
  7229                           ;RF_Control_B1.c: 289: } else {
  7230  0D90  0008               	return
  7231  0D91                     l6654:	
  7232                           
  7233                           ;RF_Control_B1.c: 291: if (error == 0) {
  7234  0D91  0020               	movlb	0	; select bank0
  7235  0D92  08EC               	movf	getRxData@error,f
  7236  0D93  1D03               	skipz
  7237  0D94  0008               	return
  7238                           
  7239                           ;RF_Control_B1.c: 292: if (RF1.Learn == 1) {
  7240  0D95  0021               	movlb	1	; select bank1
  7241  0D96  1F3B               	btfss	_RF1^(0+128),6
  7242  0D97  2DA8               	goto	l6666
  7243                           
  7244                           ;RF_Control_B1.c: 293: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7245  0D98  0022               	movlb	2	; select bank2
  7246  0D99  08A0               	movf	_RF_Data^(0+256),f
  7247  0D9A  1D03               	skipz
  7248  0D9B  2DA5               	goto	l2055
  7249  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7250  0D9D  3A64               	xorlw	100
  7251  0D9E  1D03               	skipz
  7252  0D9F  2DA5               	goto	l2055
  7253                           
  7254                           ;RF_Control_B1.c: 294: setLog_Code();
  7255  0DA0  3193  2389         	fcall	_setLog_Code
  7256                           
  7257                           ;RF_Control_B1.c: 295: RF1.Checked = 1;
  7258  0DA2  0021               	movlb	1	; select bank1
  7259  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7260                           
  7261                           ;RF_Control_B1.c: 296: } else {
  7262  0DA4  0008               	return
  7263  0DA5                     l2055:	
  7264                           
  7265                           ;RF_Control_B1.c: 297: RF1.Checked = 0;
  7266  0DA5  0021               	movlb	1	; select bank1
  7267  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7268                           
  7269                           ;RF_Control_B1.c: 298: }
  7270                           ;RF_Control_B1.c: 299: } else {
  7271  0DA7  0008               	return
  7272  0DA8                     l6666:	
  7273                           
  7274                           ;RF_Control_B1.c: 300: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7275  0DA8  0022               	movlb	2	; select bank2
  7276  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7277  0DAA  1D03               	skipz
  7278  0DAB  2DE6               	goto	l6688
  7279  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7280  0DAD  3A02               	xorlw	2
  7281  0DAE  1D03               	skipz
  7282  0DAF  2DE6               	goto	l6688
  7283                           
  7284                           ;RF_Control_B1.c: 302: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7285  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7286  0DB1  3AFF               	xorlw	255
  7287  0DB2  1D03               	skipz
  7288  0DB3  2DC0               	goto	l6678
  7289  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7290  0DB5  3AFF               	xorlw	255
  7291  0DB6  1D03               	skipz
  7292  0DB7  2DC0               	goto	l6678
  7293  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7294  0DB9  3AFF               	xorlw	255
  7295  0DBA  1D03               	skipz
  7296  0DBB  2DC0               	goto	l6678
  7297                           
  7298                           ;RF_Control_B1.c: 303: __nop();
  7299  0DBC  0000               	nop
  7300                           
  7301                           ;RF_Control_B1.c: 304: RF1.Checked = 0;
  7302  0DBD  0021               	movlb	1	; select bank1
  7303  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7304                           
  7305                           ;RF_Control_B1.c: 305: } else {
  7306  0DBF  0008               	return
  7307  0DC0                     l6678:	
  7308                           
  7309                           ;RF_Control_B1.c: 306: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7310  0DC0  0020               	movlb	0	; select bank0
  7311  0DC1  086E               	movf	_product,w
  7312  0DC2  3E0C               	addlw	12
  7313  0DC3  0086               	movwf	6
  7314  0DC4  3002               	movlw	2	; select bank4/5
  7315  0DC5  0087               	movwf	7
  7316  0DC6  0022               	movlb	2	; select bank2
  7317  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7318  0DC8  0601               	xorwf	1,w
  7319  0DC9  1D03               	skipz
  7320  0DCA  0008               	return
  7321  0DCB  0020               	movlb	0	; select bank0
  7322  0DCC  086E               	movf	_product,w
  7323  0DCD  3E0D               	addlw	13
  7324  0DCE  0086               	movwf	6
  7325  0DCF  3002               	movlw	2	; select bank4/5
  7326  0DD0  0087               	movwf	7
  7327  0DD1  0022               	movlb	2	; select bank2
  7328  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7329  0DD3  0601               	xorwf	1,w
  7330  0DD4  1D03               	skipz
  7331  0DD5  0008               	return
  7332  0DD6  0020               	movlb	0	; select bank0
  7333  0DD7  086E               	movf	_product,w
  7334  0DD8  3E0E               	addlw	14
  7335  0DD9  0086               	movwf	6
  7336  0DDA  3002               	movlw	2	; select bank4/5
  7337  0DDB  0087               	movwf	7
  7338  0DDC  0022               	movlb	2	; select bank2
  7339  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7340  0DDE  0601               	xorwf	1,w
  7341  0DDF  1D03               	skipz
  7342  0DE0  0008               	return
  7343                           
  7344                           ;RF_Control_B1.c: 307: setControl_Lights_Table();
  7345  0DE1  3189  2121         	fcall	_setControl_Lights_Table
  7346                           
  7347                           ;RF_Control_B1.c: 308: RF1.Checked = 1;
  7348  0DE3  0021               	movlb	1	; select bank1
  7349  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7350                           
  7351                           ;RF_Control_B1.c: 309: }
  7352                           ;RF_Control_B1.c: 310: }
  7353                           ;RF_Control_B1.c: 311: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7354  0DE5  0008               	return
  7355  0DE6                     l6688:	
  7356  0DE6  0022               	movlb	2	; select bank2
  7357  0DE7  0820               	movf	_RF_Data^(0+256),w
  7358  0DE8  3AFF               	xorlw	255
  7359  0DE9  1D03               	skipz
  7360  0DEA  2DF1               	goto	l6694
  7361  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7362  0DEC  3A02               	xorlw	2
  7363  0DED  1D03               	skipz
  7364  0DEE  2DF1               	goto	l6694
  7365                           
  7366                           ;RF_Control_B1.c: 312: __nop();
  7367  0DEF  0000               	nop
  7368                           
  7369                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7370  0DF0  0008               	return
  7371  0DF1                     l6694:	
  7372  0DF1  0022               	movlb	2	; select bank2
  7373  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7374  0DF3  1D03               	skipz
  7375  0DF4  2DFB               	goto	l2065
  7376  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7377  0DF6  3A65               	xorlw	101
  7378  0DF7  1D03               	skipz
  7379  0DF8  2DFB               	goto	l2065
  7380                           
  7381                           ;RF_Control_B1.c: 314: __nop();
  7382  0DF9  0000               	nop
  7383                           
  7384                           ;RF_Control_B1.c: 315: } else {
  7385  0DFA  0008               	return
  7386  0DFB                     l2065:	
  7387                           
  7388                           ;RF_Control_B1.c: 316: RF1.Checked = 0;
  7389  0DFB  0021               	movlb	1	; select bank1
  7390  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7391                           
  7392                           ;RF_Control_B1.c: 324: ;
  7393                           
  7394                           ;RF_Control_B1.c: 317: }
  7395                           ;RF_Control_B1.c: 322: }
  7396                           ;RF_Control_B1.c: 323: } else {
  7397  0DFD  0008               	return
  7398  0DFE                     __end_of_getRxData:	
  7399                           
  7400                           	psect	text26
  7401  1389                     __ptext26:	
  7402 ;; *************** function _setLog_Code *****************
  7403 ;; Defined at:
  7404 ;;		line 330 in file "../src/RF_Control_B1.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;		None
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;		None
  7409 ;; Return value:  Size  Location     Type
  7410 ;;		None               void
  7411 ;; Registers used:
  7412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;Total ram usage:        1 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    7
  7425 ;; This function calls:
  7426 ;;		_setBuz
  7427 ;;		_setMemory_LoopSave
  7428 ;;		_setMemory_Modify
  7429 ;; This function is called by:
  7430 ;;		_getRxData
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _setLog_Code
  7436  1389                     _setLog_Code:	
  7437                           
  7438                           ;RF_Control_B1.c: 331: RF1.Learn = 0;
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7442  1389  0021               	movlb	1	; select bank1
  7443  138A  133B               	bcf	_RF1^(0+128),6
  7444                           
  7445                           ;RF_Control_B1.c: 332: product->Data[12]=RF_Data[12];
  7446  138B  0022               	movlb	2	; select bank2
  7447  138C  082C               	movf	(_RF_Data^(0+256)+12),w
  7448  138D  0020               	movlb	0	; select bank0
  7449  138E  00AD               	movwf	??_setLog_Code
  7450  138F  086E               	movf	_product,w
  7451  1390  3E0C               	addlw	12
  7452  1391  0086               	movwf	6
  7453  1392  3002               	movlw	2	; select bank4/5
  7454  1393  0087               	movwf	7
  7455  1394  082D               	movf	??_setLog_Code,w
  7456  1395  0081               	movwf	1
  7457                           
  7458                           ;RF_Control_B1.c: 333: product->Data[13]=RF_Data[13];
  7459  1396  0022               	movlb	2	; select bank2
  7460  1397  082D               	movf	(_RF_Data^(0+256)+13),w
  7461  1398  0020               	movlb	0	; select bank0
  7462  1399  00AD               	movwf	??_setLog_Code
  7463  139A  086E               	movf	_product,w
  7464  139B  3E0D               	addlw	13
  7465  139C  0086               	movwf	6
  7466  139D  3002               	movlw	2	; select bank4/5
  7467  139E  0087               	movwf	7
  7468  139F  082D               	movf	??_setLog_Code,w
  7469  13A0  0081               	movwf	1
  7470                           
  7471                           ;RF_Control_B1.c: 334: product->Data[14]=RF_Data[14];
  7472  13A1  0022               	movlb	2	; select bank2
  7473  13A2  082E               	movf	(_RF_Data^(0+256)+14),w
  7474  13A3  0020               	movlb	0	; select bank0
  7475  13A4  00AD               	movwf	??_setLog_Code
  7476  13A5  086E               	movf	_product,w
  7477  13A6  3E0E               	addlw	14
  7478  13A7  0086               	movwf	6
  7479  13A8  3002               	movlw	2	; select bank4/5
  7480  13A9  0087               	movwf	7
  7481  13AA  082D               	movf	??_setLog_Code,w
  7482  13AB  0081               	movwf	1
  7483                           
  7484                           ;RF_Control_B1.c: 335: setBuz(1, 100);
  7485  13AC  3064               	movlw	100
  7486  13AD  00A9               	movwf	setBuz@time
  7487  13AE  3000               	movlw	0
  7488  13AF  00AA               	movwf	setBuz@time+1
  7489  13B0  3001               	movlw	1
  7490  13B1  3196  2696  3193   	fcall	_setBuz
  7491                           
  7492                           ;RF_Control_B1.c: 336: if (myMain.First == 1) {
  7493  13B4  0021               	movlb	1	; select bank1
  7494  13B5  1EA0               	btfss	_myMain^(0+128),5
  7495  13B6  2BBB               	goto	l2071
  7496                           
  7497                           ;RF_Control_B1.c: 337: setMemory_LoopSave(1);
  7498  13B7  3001               	movlw	1
  7499  13B8  319E  262A  3193   	fcall	_setMemory_LoopSave
  7500  13BB                     l2071:	
  7501                           
  7502                           ;RF_Control_B1.c: 338: }
  7503                           ;RF_Control_B1.c: 339: setMemory_Modify(1);
  7504  13BB  3001               	movlw	1
  7505  13BC  319E  2617         	fcall	_setMemory_Modify
  7506  13BE  0008               	return
  7507  13BF                     __end_of_setLog_Code:	
  7508                           
  7509                           	psect	text27
  7510  1E2A                     __ptext27:	
  7511 ;; *************** function _setMemory_LoopSave *****************
  7512 ;; Defined at:
  7513 ;;		line 1017 in file "../src/MCU_B1.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  command         1    wreg     unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  command         1    1[BANK0 ] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;		None               void
  7520 ;; Registers used:
  7521 ;;		wreg, status,2, status,0
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    5
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_setLog_Code
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _setMemory_LoopSave
  7543  1E2A                     _setMemory_LoopSave:	
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7547                           ;setMemory_LoopSave@command stored from wreg
  7548  1E2A  0020               	movlb	0	; select bank0
  7549  1E2B  00A1               	movwf	setMemory_LoopSave@command
  7550                           
  7551                           ;MCU_B1.c: 1018: Memory.LoopSave = command == 1 ? 1 : 0;
  7552  1E2C  0821               	movf	setMemory_LoopSave@command,w
  7553  1E2D  3A01               	xorlw	1
  7554  1E2E  3000               	movlw	0
  7555  1E2F  1903               	skipnz
  7556  1E30  3001               	movlw	1
  7557  1E31  00A0               	movwf	??_setMemory_LoopSave
  7558  1E32  0DA0               	rlf	??_setMemory_LoopSave,f
  7559  1E33  0DA0               	rlf	??_setMemory_LoopSave,f
  7560  1E34  0023               	movlb	3	; select bank3
  7561  1E35  0844               	movf	(_Memory^(0+384)+36),w
  7562  1E36  0020               	movlb	0	; select bank0
  7563  1E37  0620               	xorwf	??_setMemory_LoopSave,w
  7564  1E38  39FB               	andlw	-5
  7565  1E39  0620               	xorwf	??_setMemory_LoopSave,w
  7566  1E3A  0023               	movlb	3	; select bank3
  7567  1E3B  00C4               	movwf	(_Memory^(0+384)+36)
  7568  1E3C  0008               	return
  7569  1E3D                     __end_of_setMemory_LoopSave:	
  7570                           
  7571                           	psect	text28
  7572  0921                     __ptext28:	
  7573 ;; *************** function _setControl_Lights_Table *****************
  7574 ;; Defined at:
  7575 ;;		line 343 in file "../src/RF_Control_B1.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;		None               void
  7582 ;; Registers used:
  7583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;Total ram usage:        0 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:   11
  7596 ;; This function calls:
  7597 ;;		_setBuz
  7598 ;;		_setDimmerLights_ErrorClose
  7599 ;;		_setRFSW_AdjControl
  7600 ;;		_setRFSW_Control
  7601 ;;		_setTxData
  7602 ;; This function is called by:
  7603 ;;		_getRxData
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           
  7608                           ;psect for function _setControl_Lights_Table
  7609  0921                     _setControl_Lights_Table:	
  7610                           
  7611                           ;RF_Control_B1.c: 344: switch (RF_Data[15]) {
  7612                           
  7613                           ;incstack = 0
  7614                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7615  0921  2965               	goto	l6278
  7616  0922                     l6256:	
  7617                           ;RF_Control_B1.c: 345: case 0x00:
  7618                           
  7619                           
  7620                           ;RF_Control_B1.c: 347: setDimmerLights_ErrorClose(255);
  7621  0922  30FF               	movlw	255
  7622  0923  3195  25E6  3189   	fcall	_setDimmerLights_ErrorClose
  7623                           
  7624                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7625  0926  0020               	movlb	0	; select bank0
  7626  0927  086E               	movf	_product,w
  7627  0928  3E09               	addlw	9
  7628  0929  0086               	movwf	6
  7629  092A  3002               	movlw	2	; select bank4/5
  7630  092B  0087               	movwf	7
  7631  092C  0181               	clrf	1
  7632                           
  7633                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7634  092D  086E               	movf	_product,w
  7635  092E  3E0B               	addlw	11
  7636  092F  0086               	movwf	6
  7637  0930  3002               	movlw	2	; select bank4/5
  7638  0931  0087               	movwf	7
  7639  0932  0181               	clrf	1
  7640                           
  7641                           ;RF_Control_B1.c: 351: product->Data[15]=0;
  7642  0933  086E               	movf	_product,w
  7643  0934  3E0F               	addlw	15
  7644  0935  0086               	movwf	6
  7645  0936  3002               	movlw	2	; select bank4/5
  7646  0937  0087               	movwf	7
  7647  0938  0181               	clrf	1
  7648                           
  7649                           ;RF_Control_B1.c: 352: product->Data[17]=0;
  7650  0939  086E               	movf	_product,w
  7651  093A  3E11               	addlw	17
  7652  093B  0086               	movwf	6
  7653  093C  3002               	movlw	2	; select bank4/5
  7654  093D  0087               	movwf	7
  7655  093E  0181               	clrf	1
  7656                           
  7657                           ;RF_Control_B1.c: 353: setBuz(1, 100);
  7658  093F  3064               	movlw	100
  7659  0940  00A9               	movwf	setBuz@time
  7660  0941  3000               	movlw	0
  7661  0942  00AA               	movwf	setBuz@time+1
  7662  0943  3001               	movlw	1
  7663  0944  3196  2696         	fcall	_setBuz
  7664                           
  7665                           ;RF_Control_B1.c: 355: break;
  7666  0946  0008               	return
  7667  0947                     l6268:	
  7668                           ;RF_Control_B1.c: 356: case 0x20:
  7669                           
  7670                           
  7671                           ;RF_Control_B1.c: 357: product->Data[9]=0;
  7672  0947  0020               	movlb	0	; select bank0
  7673  0948  086E               	movf	_product,w
  7674  0949  3E09               	addlw	9
  7675  094A  0086               	movwf	6
  7676  094B  3002               	movlw	2	; select bank4/5
  7677  094C  0087               	movwf	7
  7678  094D  0181               	clrf	1
  7679                           
  7680                           ;RF_Control_B1.c: 358: product->Data[11]=0;
  7681  094E  086E               	movf	_product,w
  7682  094F  3E0B               	addlw	11
  7683  0950  0086               	movwf	6
  7684  0951  3002               	movlw	2	; select bank4/5
  7685  0952  0087               	movwf	7
  7686  0953  0181               	clrf	1
  7687                           
  7688                           ;RF_Control_B1.c: 359: product->Data[17]=0;
  7689  0954  086E               	movf	_product,w
  7690  0955  3E11               	addlw	17
  7691  0956  0086               	movwf	6
  7692  0957  3002               	movlw	2	; select bank4/5
  7693  0958  0087               	movwf	7
  7694  0959  0181               	clrf	1
  7695                           
  7696                           ;RF_Control_B1.c: 360: setTxData();
  7697  095A  3186  26ED         	fcall	_setTxData
  7698                           
  7699                           ;RF_Control_B1.c: 361: break;
  7700  095C  0008               	return
  7701  095D                     l6272:	
  7702                           ;RF_Control_B1.c: 362: case 0x01:
  7703                           
  7704                           
  7705                           ;RF_Control_B1.c: 364: setRFSW_Control(1);
  7706  095D  3001               	movlw	1
  7707  095E  3195  2597         	fcall	_setRFSW_Control
  7708                           
  7709                           ;RF_Control_B1.c: 376: break;
  7710                           
  7711                           ;RF_Control_B1.c: 372: case 0x03:
  7712                           
  7713                           ;RF_Control_B1.c: 371: break;
  7714                           
  7715                           ;RF_Control_B1.c: 367: case 0x02:
  7716                           
  7717                           ;RF_Control_B1.c: 366: break;
  7718  0960  0008               	return
  7719  0961                     l6274:	
  7720                           ;RF_Control_B1.c: 377: case 0x11:
  7721                           
  7722                           
  7723                           ;RF_Control_B1.c: 380: setRFSW_AdjControl(1);
  7724  0961  3001               	movlw	1
  7725  0962  3194  2433         	fcall	_setRFSW_AdjControl
  7726                           
  7727                           ;RF_Control_B1.c: 398: }
  7728                           
  7729                           ;RF_Control_B1.c: 397: break;
  7730                           
  7731                           ;RF_Control_B1.c: 391: case 0x31:
  7732                           
  7733                           ;RF_Control_B1.c: 390: break;
  7734                           
  7735                           ;RF_Control_B1.c: 384: case 0x21:
  7736                           
  7737                           ;RF_Control_B1.c: 383: break;
  7738  0964  0008               	return
  7739  0965                     l6278:	
  7740  0965  0022               	movlb	2	; select bank2
  7741  0966  082F               	movf	(_RF_Data^(0+256)+15),w
  7742                           
  7743                           ; Switch size 1, requested type "space"
  7744                           ; Number of cases is 8, Range of values is 0 to 49
  7745                           ; switch strategies available:
  7746                           ; Name         Instructions Cycles
  7747                           ; simple_byte           25    13 (average)
  7748                           ; direct_byte          106     6 (fixed)
  7749                           ; jumptable            260     6 (fixed)
  7750                           ;	Chosen strategy is simple_byte
  7751  0967  3A00               	xorlw	0	; case 0
  7752  0968  1903               	skipnz
  7753  0969  2922               	goto	l6256
  7754  096A  3A01               	xorlw	1	; case 1
  7755  096B  1903               	skipnz
  7756  096C  295D               	goto	l6272
  7757  096D  3A03               	xorlw	3	; case 2
  7758  096E  1903               	skipnz
  7759  096F  2980               	goto	l2085
  7760  0970  3A01               	xorlw	1	; case 3
  7761  0971  1903               	skipnz
  7762  0972  2980               	goto	l2085
  7763  0973  3A12               	xorlw	18	; case 17
  7764  0974  1903               	skipnz
  7765  0975  2961               	goto	l6274
  7766  0976  3A31               	xorlw	49	; case 32
  7767  0977  1903               	skipnz
  7768  0978  2947               	goto	l6268
  7769  0979  3A01               	xorlw	1	; case 33
  7770  097A  1903               	skipnz
  7771  097B  2980               	goto	l2085
  7772  097C  3A10               	xorlw	16	; case 49
  7773  097D  1903               	skipnz
  7774  097E  2980               	goto	l2085
  7775  097F  2980               	goto	l2085
  7776  0980                     l2085:	
  7777  0980  0008               	return
  7778  0981                     __end_of_setControl_Lights_Table:	
  7779                           
  7780                           	psect	text29
  7781  1597                     __ptext29:	
  7782 ;; *************** function _setRFSW_Control *****************
  7783 ;; Defined at:
  7784 ;;		line 425 in file "../src/RF_Control_B1.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  sw              1    wreg     unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  sw              1   19[BANK0 ] unsigned char 
  7789 ;;  status          1   18[BANK0 ] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;		None               void
  7792 ;; Registers used:
  7793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;Total ram usage:        3 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    9
  7806 ;; This function calls:
  7807 ;;		_getDelayOff_GO
  7808 ;;		_getDimmerLights_Status
  7809 ;;		_setBuz
  7810 ;;		_setDelayOff_GO
  7811 ;;		_setDimmerLights_SwOff
  7812 ;;		_setDimmerLights_SwOn
  7813 ;;		_setRF_DimmerLights
  7814 ;;		_setTxData
  7815 ;; This function is called by:
  7816 ;;		_setControl_Lights_Table
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           
  7821                           ;psect for function _setRFSW_Control
  7822  1597                     _setRFSW_Control:	
  7823                           
  7824                           ;incstack = 0
  7825                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7826                           ;setRFSW_Control@sw stored from wreg
  7827  1597  0020               	movlb	0	; select bank0
  7828  1598  00B3               	movwf	setRFSW_Control@sw
  7829                           
  7830                           ;RF_Control_B1.c: 426: char status = 0;
  7831  1599  01B2               	clrf	setRFSW_Control@status
  7832                           
  7833                           ;RF_Control_B1.c: 429: if (RF_Data[16] == 0x80) {
  7834  159A  0022               	movlb	2	; select bank2
  7835  159B  0830               	movf	(_RF_Data^(0+256)+16),w
  7836  159C  3A80               	xorlw	128
  7837  159D  1D03               	skipz
  7838  159E  2DCA               	goto	l6110
  7839                           
  7840                           ;RF_Control_B1.c: 430: setDelayOff_GO(sw, 1, RF_Data[17]);
  7841  159F  0020               	movlb	0	; select bank0
  7842  15A0  01AA               	clrf	setDelayOff_GO@command
  7843  15A1  0AAA               	incf	setDelayOff_GO@command,f
  7844  15A2  0022               	movlb	2	; select bank2
  7845  15A3  0831               	movf	(_RF_Data^(0+256)+17),w
  7846  15A4  0020               	movlb	0	; select bank0
  7847  15A5  00B1               	movwf	??_setRFSW_Control
  7848  15A6  0831               	movf	??_setRFSW_Control,w
  7849  15A7  00AB               	movwf	setDelayOff_GO@value
  7850  15A8  0833               	movf	setRFSW_Control@sw,w
  7851  15A9  3188  2009  3195   	fcall	_setDelayOff_GO
  7852                           
  7853                           ;RF_Control_B1.c: 431: if (getDimmerLights_Status(sw) == 1) {
  7854  15AC  0020               	movlb	0	; select bank0
  7855  15AD  0833               	movf	setRFSW_Control@sw,w
  7856  15AE  319D  255D  3195   	fcall	_getDimmerLights_Status
  7857  15B1  3A01               	xorlw	1
  7858  15B2  1D03               	skipz
  7859  15B3  2DD9               	goto	l6114
  7860                           
  7861                           ;RF_Control_B1.c: 432: setBuz(1, 100);
  7862  15B4  3064               	movlw	100
  7863  15B5  0020               	movlb	0	; select bank0
  7864  15B6  00A9               	movwf	setBuz@time
  7865  15B7  3000               	movlw	0
  7866  15B8  00AA               	movwf	setBuz@time+1
  7867  15B9  3001               	movlw	1
  7868  15BA  3196  2696  3195   	fcall	_setBuz
  7869                           
  7870                           ;RF_Control_B1.c: 433: status = 1;
  7871  15BD  0020               	movlb	0	; select bank0
  7872  15BE  01B2               	clrf	setRFSW_Control@status
  7873  15BF  0AB2               	incf	setRFSW_Control@status,f
  7874                           
  7875                           ;RF_Control_B1.c: 434: setRF_DimmerLights(sw, 1);
  7876  15C0  01A0               	clrf	setRF_DimmerLights@on
  7877  15C1  0AA0               	incf	setRF_DimmerLights@on,f
  7878  15C2  0833               	movf	setRFSW_Control@sw,w
  7879  15C3  3197  2748  3195   	fcall	_setRF_DimmerLights
  7880                           
  7881                           ;RF_Control_B1.c: 435: setTxData();
  7882  15C6  3186  26ED  3195   	fcall	_setTxData
  7883                           
  7884                           ;RF_Control_B1.c: 437: }
  7885                           ;RF_Control_B1.c: 438: } else {
  7886  15C9  2DD9               	goto	l6114
  7887  15CA                     l6110:	
  7888                           
  7889                           ;RF_Control_B1.c: 440: if (getDelayOff_GO(sw) == 1) {
  7890  15CA  0020               	movlb	0	; select bank0
  7891  15CB  0833               	movf	setRFSW_Control@sw,w
  7892  15CC  319D  256D  3195   	fcall	_getDelayOff_GO
  7893  15CF  3A01               	xorlw	1
  7894  15D0  1D03               	skipz
  7895  15D1  2DD9               	goto	l6114
  7896                           
  7897                           ;RF_Control_B1.c: 441: setDelayOff_GO(sw, 0, 0);
  7898  15D2  0020               	movlb	0	; select bank0
  7899  15D3  01AA               	clrf	setDelayOff_GO@command
  7900  15D4  01AB               	clrf	setDelayOff_GO@value
  7901  15D5  0833               	movf	setRFSW_Control@sw,w
  7902  15D6  3188  2009  3195   	fcall	_setDelayOff_GO
  7903  15D9                     l6114:	
  7904                           
  7905                           ;RF_Control_B1.c: 442: }
  7906                           ;RF_Control_B1.c: 444: }
  7907                           ;RF_Control_B1.c: 445: if (status == 0) {
  7908  15D9  0020               	movlb	0	; select bank0
  7909  15DA  08B2               	movf	setRFSW_Control@status,f
  7910  15DB  1D03               	skipz
  7911  15DC  0008               	return
  7912                           
  7913                           ;RF_Control_B1.c: 447: setDimmerLights_SwOn(sw);
  7914  15DD  0833               	movf	setRFSW_Control@sw,w
  7915  15DE  3193  23F6  3195   	fcall	_setDimmerLights_SwOn
  7916                           
  7917                           ;RF_Control_B1.c: 448: setDimmerLights_SwOff(sw);
  7918  15E1  0020               	movlb	0	; select bank0
  7919  15E2  0833               	movf	setRFSW_Control@sw,w
  7920  15E3  3194  24B6         	fcall	_setDimmerLights_SwOff
  7921  15E5  0008               	return
  7922  15E6                     __end_of_setRFSW_Control:	
  7923                           
  7924                           	psect	text30
  7925  13F6                     __ptext30:	
  7926 ;; *************** function _setDimmerLights_SwOn *****************
  7927 ;; Defined at:
  7928 ;;		line 521 in file "../src/Dimmer_B1.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  sw              1    wreg     unsigned char 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  sw              1   15[BANK0 ] unsigned char 
  7933 ;;  idle            1   14[BANK0 ] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;		None               void
  7936 ;; Registers used:
  7937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;Total ram usage:        3 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    7
  7950 ;; This function calls:
  7951 ;;		_DimmerLightsPointSelect
  7952 ;;		_getAll_DimmerLights_AdjGO
  7953 ;;		_setBuz
  7954 ;;		_setDimmerLights_Trigger
  7955 ;; This function is called by:
  7956 ;;		_setRFSW_Control
  7957 ;;		_setSw_Main
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           
  7962                           ;psect for function _setDimmerLights_SwOn
  7963  13F6                     _setDimmerLights_SwOn:	
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7967                           ;setDimmerLights_SwOn@sw stored from wreg
  7968  13F6  0020               	movlb	0	; select bank0
  7969  13F7  00AF               	movwf	setDimmerLights_SwOn@sw
  7970                           
  7971                           ;Dimmer_B1.c: 522: DimmerLightsPointSelect(sw);
  7972  13F8  082F               	movf	setDimmerLights_SwOn@sw,w
  7973  13F9  319C  248B  3193   	fcall	_DimmerLightsPointSelect
  7974                           
  7975                           ;Dimmer_B1.c: 523: char idle = 0;
  7976  13FC  0020               	movlb	0	; select bank0
  7977  13FD  01AE               	clrf	setDimmerLights_SwOn@idle
  7978                           
  7979                           ;Dimmer_B1.c: 525: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7980  13FE  319C  246B  3193   	fcall	_getAll_DimmerLights_AdjGO
  7981  1401  3A01               	xorlw	1
  7982  1402  3000               	movlw	0
  7983  1403  1903               	skipnz
  7984  1404  3001               	movlw	1
  7985  1405  0020               	movlb	0	; select bank0
  7986  1406  00AD               	movwf	??_setDimmerLights_SwOn
  7987  1407  082D               	movf	??_setDimmerLights_SwOn,w
  7988  1408  00AE               	movwf	setDimmerLights_SwOn@idle
  7989                           
  7990                           ;Dimmer_B1.c: 527: if (idle == 0) {
  7991  1409  08AE               	movf	setDimmerLights_SwOn@idle,f
  7992  140A  1D03               	skipz
  7993  140B  0008               	return
  7994                           
  7995                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 1;
  7996  140C  086F               	movf	_DimmerLights,w
  7997  140D  3E09               	addlw	9
  7998  140E  0086               	movwf	6
  7999  140F  3001               	movlw	1	; select bank2/3
  8000  1410  0087               	movwf	7
  8001  1411  1701               	bsf	1,6
  8002                           
  8003                           ;Dimmer_B1.c: 529: setBuz(1, 100);
  8004  1412  3064               	movlw	100
  8005  1413  00A9               	movwf	setBuz@time
  8006  1414  3000               	movlw	0
  8007  1415  00AA               	movwf	setBuz@time+1
  8008  1416  3001               	movlw	1
  8009  1417  3196  2696  3193   	fcall	_setBuz
  8010                           
  8011                           ;Dimmer_B1.c: 530: if (DimmerLights->Status == 0) {
  8012  141A  0020               	movlb	0	; select bank0
  8013  141B  086F               	movf	_DimmerLights,w
  8014  141C  0086               	movwf	6
  8015  141D  3001               	movlw	1	; select bank2/3
  8016  141E  0087               	movwf	7
  8017  141F  1A81               	btfsc	1,5
  8018  1420  2C2C               	goto	l5922
  8019                           
  8020                           ;Dimmer_B1.c: 531: DimmerLights->Status = 1;
  8021  1421  086F               	movf	_DimmerLights,w
  8022  1422  0086               	movwf	6
  8023  1423  3001               	movlw	1	; select bank2/3
  8024  1424  0087               	movwf	7
  8025  1425  1681               	bsf	1,5
  8026                           
  8027                           ;Dimmer_B1.c: 532: setDimmerLights_Trigger(sw, 1);
  8028  1426  01A2               	clrf	setDimmerLights_Trigger@command
  8029  1427  0AA2               	incf	setDimmerLights_Trigger@command,f
  8030  1428  082F               	movf	setDimmerLights_SwOn@sw,w
  8031  1429  319F  2722         	fcall	_setDimmerLights_Trigger
  8032                           
  8033                           ;Dimmer_B1.c: 533: } else {
  8034  142B  0008               	return
  8035  142C                     l5922:	
  8036                           
  8037                           ;Dimmer_B1.c: 534: DimmerLights->Status = 0;
  8038  142C  0020               	movlb	0	; select bank0
  8039  142D  086F               	movf	_DimmerLights,w
  8040  142E  0086               	movwf	6
  8041  142F  3001               	movlw	1	; select bank2/3
  8042  1430  0087               	movwf	7
  8043  1431  1281               	bcf	1,5
  8044  1432  0008               	return
  8045  1433                     __end_of_setDimmerLights_SwOn:	
  8046                           
  8047                           	psect	text31
  8048  1433                     __ptext31:	
  8049 ;; *************** function _setRFSW_AdjControl *****************
  8050 ;; Defined at:
  8051 ;;		line 454 in file "../src/RF_Control_B1.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  sw              1    wreg     unsigned char 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  sw              1   74[BANK0 ] unsigned char 
  8056 ;;  status          1   73[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;Total ram usage:        4 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:   10
  8073 ;; This function calls:
  8074 ;;		_getDimmerLights_Status
  8075 ;;		_setMemory_Modify
  8076 ;;		_setRF_DimmerValue
  8077 ;;		_setTxData
  8078 ;; This function is called by:
  8079 ;;		_setControl_Lights_Table
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           
  8084                           ;psect for function _setRFSW_AdjControl
  8085  1433                     _setRFSW_AdjControl:	
  8086                           
  8087                           ;incstack = 0
  8088                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8089                           ;setRFSW_AdjControl@sw stored from wreg
  8090  1433  0020               	movlb	0	; select bank0
  8091  1434  00EA               	movwf	setRFSW_AdjControl@sw
  8092                           
  8093                           ;RF_Control_B1.c: 455: char status = 0;
  8094  1435  01E9               	clrf	setRFSW_AdjControl@status
  8095                           
  8096                           ;RF_Control_B1.c: 457: status = getDimmerLights_Status(sw);
  8097  1436  086A               	movf	setRFSW_AdjControl@sw,w
  8098  1437  319D  255D  3194   	fcall	_getDimmerLights_Status
  8099  143A  0020               	movlb	0	; select bank0
  8100  143B  00E7               	movwf	??_setRFSW_AdjControl
  8101  143C  0867               	movf	??_setRFSW_AdjControl,w
  8102  143D  00E9               	movwf	setRFSW_AdjControl@status
  8103                           
  8104                           ;RF_Control_B1.c: 460: if (status == 1) {
  8105  143E  0869               	movf	setRFSW_AdjControl@status,w
  8106  143F  3A01               	xorlw	1
  8107  1440  1D03               	skipz
  8108  1441  2C4C               	goto	l6128
  8109                           
  8110                           ;RF_Control_B1.c: 461: setMemory_Modify(1);
  8111  1442  3001               	movlw	1
  8112  1443  319E  2617  3194   	fcall	_setMemory_Modify
  8113                           
  8114                           ;RF_Control_B1.c: 462: setRF_DimmerValue(sw);
  8115  1446  0020               	movlb	0	; select bank0
  8116  1447  086A               	movf	setRFSW_AdjControl@sw,w
  8117  1448  3192  221C  3194   	fcall	_setRF_DimmerValue
  8118                           
  8119                           ;RF_Control_B1.c: 463: } else {
  8120  144B  2C5E               	goto	l2097
  8121  144C                     l6128:	
  8122                           
  8123                           ;RF_Control_B1.c: 464: product->Data[9]=product->Data[20 + sw];
  8124  144C  0020               	movlb	0	; select bank0
  8125  144D  086A               	movf	setRFSW_AdjControl@sw,w
  8126  144E  3E14               	addlw	20
  8127  144F  076E               	addwf	_product,w
  8128  1450  00E7               	movwf	??_setRFSW_AdjControl
  8129  1451  0867               	movf	??_setRFSW_AdjControl,w
  8130  1452  0086               	movwf	6
  8131  1453  3002               	movlw	2	; select bank4/5
  8132  1454  0087               	movwf	7
  8133  1455  0801               	movf	1,w
  8134  1456  00E8               	movwf	??_setRFSW_AdjControl+1
  8135  1457  086E               	movf	_product,w
  8136  1458  3E09               	addlw	9
  8137  1459  0086               	movwf	6
  8138  145A  3002               	movlw	2	; select bank4/5
  8139  145B  0087               	movwf	7
  8140  145C  0868               	movf	??_setRFSW_AdjControl+1,w
  8141  145D  0081               	movwf	1
  8142  145E                     l2097:	
  8143                           
  8144                           ;RF_Control_B1.c: 465: }
  8145                           ;RF_Control_B1.c: 466: product->Data[17]=product->Data[26 + sw];
  8146  145E  0020               	movlb	0	; select bank0
  8147  145F  086A               	movf	setRFSW_AdjControl@sw,w
  8148  1460  3E1A               	addlw	26
  8149  1461  076E               	addwf	_product,w
  8150  1462  00E7               	movwf	??_setRFSW_AdjControl
  8151  1463  0867               	movf	??_setRFSW_AdjControl,w
  8152  1464  0086               	movwf	6
  8153  1465  3002               	movlw	2	; select bank4/5
  8154  1466  0087               	movwf	7
  8155  1467  0801               	movf	1,w
  8156  1468  00E8               	movwf	??_setRFSW_AdjControl+1
  8157  1469  086E               	movf	_product,w
  8158  146A  3E11               	addlw	17
  8159  146B  0086               	movwf	6
  8160  146C  3002               	movlw	2	; select bank4/5
  8161  146D  0087               	movwf	7
  8162  146E  0868               	movf	??_setRFSW_AdjControl+1,w
  8163  146F  0081               	movwf	1
  8164                           
  8165                           ;RF_Control_B1.c: 467: setTxData();
  8166  1470  3186  26ED         	fcall	_setTxData
  8167  1472  0008               	return
  8168  1473                     __end_of_setRFSW_AdjControl:	
  8169                           
  8170                           	psect	text32
  8171  121C                     __ptext32:	
  8172 ;; *************** function _setRF_DimmerValue *****************
  8173 ;; Defined at:
  8174 ;;		line 472 in file "../src/RF_Control_B1.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  lights          1    wreg     unsigned char 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  lights          1   70[BANK0 ] unsigned char 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;		None               void
  8181 ;; Registers used:
  8182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;Total ram usage:        3 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    9
  8195 ;; This function calls:
  8196 ;;		_setDimmerLights_AdjRF
  8197 ;; This function is called by:
  8198 ;;		_setRFSW_AdjControl
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _setRF_DimmerValue
  8204  121C                     _setRF_DimmerValue:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8208                           ;setRF_DimmerValue@lights stored from wreg
  8209  121C  0020               	movlb	0	; select bank0
  8210  121D  00E6               	movwf	setRF_DimmerValue@lights
  8211                           
  8212                           ;RF_Control_B1.c: 473: if (RF_Data[9] > 0x64) {
  8213  121E  3065               	movlw	101
  8214  121F  0022               	movlb	2	; select bank2
  8215  1220  0229               	subwf	(_RF_Data^(0+256)+9),w
  8216  1221  1C03               	skipc
  8217  1222  2A29               	goto	l6010
  8218                           
  8219                           ;RF_Control_B1.c: 474: RF_Data[9] = 0x64;
  8220  1223  3064               	movlw	100
  8221  1224  0020               	movlb	0	; select bank0
  8222  1225  00E4               	movwf	??_setRF_DimmerValue
  8223  1226  0864               	movf	??_setRF_DimmerValue,w
  8224  1227  0022               	movlb	2	; select bank2
  8225  1228  00A9               	movwf	(_RF_Data^(0+256)+9)
  8226  1229                     l6010:	
  8227                           
  8228                           ;RF_Control_B1.c: 475: }
  8229                           ;RF_Control_B1.c: 476: product->Data[9]=RF_Data[9];
  8230  1229  0829               	movf	(_RF_Data^(0+256)+9),w
  8231  122A  0020               	movlb	0	; select bank0
  8232  122B  00E4               	movwf	??_setRF_DimmerValue
  8233  122C  086E               	movf	_product,w
  8234  122D  3E09               	addlw	9
  8235  122E  0086               	movwf	6
  8236  122F  3002               	movlw	2	; select bank4/5
  8237  1230  0087               	movwf	7
  8238  1231  0864               	movf	??_setRF_DimmerValue,w
  8239  1232  0081               	movwf	1
  8240                           
  8241                           ;RF_Control_B1.c: 477: product->Data[11]=lights;
  8242  1233  0866               	movf	setRF_DimmerValue@lights,w
  8243  1234  00E4               	movwf	??_setRF_DimmerValue
  8244  1235  086E               	movf	_product,w
  8245  1236  3E0B               	addlw	11
  8246  1237  0086               	movwf	6
  8247  1238  3002               	movlw	2	; select bank4/5
  8248  1239  0087               	movwf	7
  8249  123A  0864               	movf	??_setRF_DimmerValue,w
  8250  123B  0081               	movwf	1
  8251                           
  8252                           ;RF_Control_B1.c: 478: product->Data[(20 + lights)]=RF_Data[9];
  8253  123C  0022               	movlb	2	; select bank2
  8254  123D  0829               	movf	(_RF_Data^(0+256)+9),w
  8255  123E  0020               	movlb	0	; select bank0
  8256  123F  00E4               	movwf	??_setRF_DimmerValue
  8257  1240  0866               	movf	setRF_DimmerValue@lights,w
  8258  1241  3E14               	addlw	20
  8259  1242  076E               	addwf	_product,w
  8260  1243  00E5               	movwf	??_setRF_DimmerValue+1
  8261  1244  0865               	movf	??_setRF_DimmerValue+1,w
  8262  1245  0086               	movwf	6
  8263  1246  3002               	movlw	2	; select bank4/5
  8264  1247  0087               	movwf	7
  8265  1248  0864               	movf	??_setRF_DimmerValue,w
  8266  1249  0081               	movwf	1
  8267                           
  8268                           ;RF_Control_B1.c: 479: setDimmerLights_AdjRF(lights);
  8269  124A  0866               	movf	setRF_DimmerValue@lights,w
  8270  124B  3190  20AA         	fcall	_setDimmerLights_AdjRF
  8271  124D  0008               	return
  8272  124E                     __end_of_setRF_DimmerValue:	
  8273                           
  8274                           	psect	text33
  8275  10AA                     __ptext33:	
  8276 ;; *************** function _setDimmerLights_AdjRF *****************
  8277 ;; Defined at:
  8278 ;;		line 762 in file "../src/Dimmer_B1.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  lights          1    wreg     unsigned char 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  lights          1   67[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;Total ram usage:        2 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    8
  8299 ;; This function calls:
  8300 ;;		_DimmerLightsPointSelect
  8301 ;;		_getPercentValue
  8302 ;; This function is called by:
  8303 ;;		_setRF_DimmerValue
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           
  8308                           ;psect for function _setDimmerLights_AdjRF
  8309  10AA                     _setDimmerLights_AdjRF:	
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8313                           ;setDimmerLights_AdjRF@lights stored from wreg
  8314  10AA  0020               	movlb	0	; select bank0
  8315  10AB  00E3               	movwf	setDimmerLights_AdjRF@lights
  8316                           
  8317                           ;Dimmer_B1.c: 763: DimmerLightsPointSelect(lights);
  8318  10AC  0863               	movf	setDimmerLights_AdjRF@lights,w
  8319  10AD  319C  248B  3190   	fcall	_DimmerLightsPointSelect
  8320                           
  8321                           ;Dimmer_B1.c: 764: DimmerLights->AdjRF = 1;
  8322  10B0  0020               	movlb	0	; select bank0
  8323  10B1  086F               	movf	_DimmerLights,w
  8324  10B2  0086               	movwf	6
  8325  10B3  3001               	movlw	1	; select bank2/3
  8326  10B4  0087               	movwf	7
  8327  10B5  1501               	bsf	1,2
  8328                           
  8329                           ;Dimmer_B1.c: 765: DimmerLights->Signal = 1;
  8330  10B6  086F               	movf	_DimmerLights,w
  8331  10B7  0086               	movwf	6
  8332  10B8  3001               	movlw	1	; select bank2/3
  8333  10B9  0087               	movwf	7
  8334  10BA  1481               	bsf	1,1
  8335                           
  8336                           ;Dimmer_B1.c: 766: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8337  10BB  086E               	movf	_product,w
  8338  10BC  3E09               	addlw	9
  8339  10BD  0086               	movwf	6
  8340  10BE  3002               	movlw	2	; select bank4/5
  8341  10BF  0087               	movwf	7
  8342  10C0  0801               	movf	1,w
  8343  10C1  318A  22A8         	fcall	_getPercentValue
  8344  10C3  0020               	movlb	0	; select bank0
  8345  10C4  00E2               	movwf	??_setDimmerLights_AdjRF
  8346  10C5  086F               	movf	_DimmerLights,w
  8347  10C6  3E05               	addlw	5
  8348  10C7  0086               	movwf	6
  8349  10C8  3001               	movlw	1	; select bank2/3
  8350  10C9  0087               	movwf	7
  8351  10CA  0862               	movf	??_setDimmerLights_AdjRF,w
  8352  10CB  0081               	movwf	1
  8353  10CC  0008               	return
  8354  10CD                     __end_of_setDimmerLights_AdjRF:	
  8355                           
  8356                           	psect	text34
  8357  0AA8                     __ptext34:	
  8358 ;; *************** function _getPercentValue *****************
  8359 ;; Defined at:
  8360 ;;		line 874 in file "../src/Dimmer_B1.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;  value           1    wreg     unsigned char 
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  value           1   62[BANK0 ] unsigned char 
  8365 ;;  i               3   63[BANK0 ] float 
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      unsigned char 
  8368 ;; Registers used:
  8369 ;;		wreg, status,2, status,0, pclath, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;Total ram usage:        6 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    7
  8382 ;; This function calls:
  8383 ;;		___awtoft
  8384 ;;		___ftadd
  8385 ;;		___ftdiv
  8386 ;;		___ftmul
  8387 ;;		___ftneg
  8388 ;;		___fttol
  8389 ;; This function is called by:
  8390 ;;		_setDimmerLights_AdjRF
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           
  8395                           ;psect for function _getPercentValue
  8396  0AA8                     _getPercentValue:	
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8400                           ;getPercentValue@value stored from wreg
  8401  0AA8  0020               	movlb	0	; select bank0
  8402  0AA9  00DE               	movwf	getPercentValue@value
  8403                           
  8404                           ;Dimmer_B1.c: 882: float i = ((char)(90*0.8)) - ((char)(15*0.8));
  8405  0AAA  3000               	movlw	0
  8406  0AAB  00DF               	movwf	getPercentValue@i
  8407  0AAC  3070               	movlw	112
  8408  0AAD  00E0               	movwf	getPercentValue@i+1
  8409  0AAE  3042               	movlw	66
  8410  0AAF  00E1               	movwf	getPercentValue@i+2
  8411                           
  8412                           ;Dimmer_B1.c: 883: i /= 100;
  8413  0AB0  3000               	movlw	0
  8414  0AB1  00AE               	movwf	___ftdiv@f2
  8415  0AB2  30C8               	movlw	200
  8416  0AB3  00AF               	movwf	___ftdiv@f2+1
  8417  0AB4  3042               	movlw	66
  8418  0AB5  00B0               	movwf	___ftdiv@f2+2
  8419  0AB6  085F               	movf	getPercentValue@i,w
  8420  0AB7  00B1               	movwf	___ftdiv@f1
  8421  0AB8  0860               	movf	getPercentValue@i+1,w
  8422  0AB9  00B2               	movwf	___ftdiv@f1+1
  8423  0ABA  0861               	movf	getPercentValue@i+2,w
  8424  0ABB  00B3               	movwf	___ftdiv@f1+2
  8425  0ABC  318E  26A3  318A   	fcall	___ftdiv
  8426  0ABF  0020               	movlb	0	; select bank0
  8427  0AC0  082E               	movf	?___ftdiv,w
  8428  0AC1  00DF               	movwf	getPercentValue@i
  8429  0AC2  082F               	movf	?___ftdiv+1,w
  8430  0AC3  00E0               	movwf	getPercentValue@i+1
  8431  0AC4  0830               	movf	?___ftdiv+2,w
  8432  0AC5  00E1               	movwf	getPercentValue@i+2
  8433                           
  8434                           ;Dimmer_B1.c: 885: return (char) (((char)(90*0.8)) - ((100 - value) * i));
  8435  0AC6  085E               	movf	getPercentValue@value,w
  8436  0AC7  00DC               	movwf	??_getPercentValue
  8437  0AC8  01DD               	clrf	??_getPercentValue+1
  8438  0AC9  09DC               	comf	??_getPercentValue,f
  8439  0ACA  09DD               	comf	??_getPercentValue+1,f
  8440  0ACB  0ADC               	incf	??_getPercentValue,f
  8441  0ACC  1903               	skipnz
  8442  0ACD  0ADD               	incf	??_getPercentValue+1,f
  8443  0ACE  085C               	movf	??_getPercentValue,w
  8444  0ACF  3E64               	addlw	100
  8445  0AD0  00A8               	movwf	___awtoft@c
  8446  0AD1  3000               	movlw	0
  8447  0AD2  3D5D               	addwfc	??_getPercentValue+1,w
  8448  0AD3  00A9               	movwf	___awtoft@c+1
  8449  0AD4  3190  2066  318A   	fcall	___awtoft
  8450  0AD7  0020               	movlb	0	; select bank0
  8451  0AD8  0828               	movf	?___awtoft,w
  8452  0AD9  00B1               	movwf	___ftmul@f2
  8453  0ADA  0829               	movf	?___awtoft+1,w
  8454  0ADB  00B2               	movwf	___ftmul@f2+1
  8455  0ADC  082A               	movf	?___awtoft+2,w
  8456  0ADD  00B3               	movwf	___ftmul@f2+2
  8457  0ADE  085F               	movf	getPercentValue@i,w
  8458  0ADF  00AE               	movwf	___ftmul@f1
  8459  0AE0  0860               	movf	getPercentValue@i+1,w
  8460  0AE1  00AF               	movwf	___ftmul@f1+1
  8461  0AE2  0861               	movf	getPercentValue@i+2,w
  8462  0AE3  00B0               	movwf	___ftmul@f1+2
  8463  0AE4  318F  274C  318A   	fcall	___ftmul
  8464  0AE7  0020               	movlb	0	; select bank0
  8465  0AE8  082E               	movf	?___ftmul,w
  8466  0AE9  00BE               	movwf	___ftneg@f1
  8467  0AEA  082F               	movf	?___ftmul+1,w
  8468  0AEB  00BF               	movwf	___ftneg@f1+1
  8469  0AEC  0830               	movf	?___ftmul+2,w
  8470  0AED  00C0               	movwf	___ftneg@f1+2
  8471  0AEE  319C  244F  318A   	fcall	___ftneg
  8472  0AF1  0020               	movlb	0	; select bank0
  8473  0AF2  083E               	movf	?___ftneg,w
  8474  0AF3  00C4               	movwf	___ftadd@f2
  8475  0AF4  083F               	movf	?___ftneg+1,w
  8476  0AF5  00C5               	movwf	___ftadd@f2+1
  8477  0AF6  0840               	movf	?___ftneg+2,w
  8478  0AF7  00C6               	movwf	___ftadd@f2+2
  8479  0AF8  3000               	movlw	0
  8480  0AF9  00C1               	movwf	___ftadd@f1
  8481  0AFA  3090               	movlw	144
  8482  0AFB  00C2               	movwf	___ftadd@f1+1
  8483  0AFC  3042               	movlw	66
  8484  0AFD  00C3               	movwf	___ftadd@f1+2
  8485  0AFE  3184  243C  318A   	fcall	___ftadd
  8486  0B01  0020               	movlb	0	; select bank0
  8487  0B02  0841               	movf	?___ftadd,w
  8488  0B03  00CE               	movwf	___fttol@f1
  8489  0B04  0842               	movf	?___ftadd+1,w
  8490  0B05  00CF               	movwf	___fttol@f1+1
  8491  0B06  0843               	movf	?___ftadd+2,w
  8492  0B07  00D0               	movwf	___fttol@f1+2
  8493  0B08  318C  245E         	fcall	___fttol
  8494  0B0A  0020               	movlb	0	; select bank0
  8495  0B0B  084E               	movf	?___fttol,w
  8496  0B0C  0008               	return
  8497  0B0D                     __end_of_getPercentValue:	
  8498                           
  8499                           	psect	text35
  8500  0F4C                     __ptext35:	
  8501 ;; *************** function ___ftmul *****************
  8502 ;; Defined at:
  8503 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  f1              3   14[BANK0 ] float 
  8506 ;;  f2              3   17[BANK0 ] float 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8509 ;;  sign            1   29[BANK0 ] unsigned char 
  8510 ;;  cntr            1   28[BANK0 ] unsigned char 
  8511 ;;  exp             1   24[BANK0 ] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  3   14[BANK0 ] float 
  8514 ;; Registers used:
  8515 ;;		wreg, status,2, status,0, pclath, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8521 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;Total ram usage:       16 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    6
  8528 ;; This function calls:
  8529 ;;		___ftpack
  8530 ;; This function is called by:
  8531 ;;		_getPercentValue
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function ___ftmul
  8537  0F4C                     ___ftmul:	
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8541  0F4C  0020               	movlb	0	; select bank0
  8542  0F4D  082E               	movf	___ftmul@f1,w
  8543  0F4E  00B4               	movwf	??___ftmul
  8544  0F4F  082F               	movf	___ftmul@f1+1,w
  8545  0F50  00B5               	movwf	??___ftmul+1
  8546  0F51  0830               	movf	___ftmul@f1+2,w
  8547  0F52  00B6               	movwf	??___ftmul+2
  8548  0F53  1003               	clrc
  8549  0F54  0D35               	rlf	??___ftmul+1,w
  8550  0F55  0D36               	rlf	??___ftmul+2,w
  8551  0F56  00B7               	movwf	??___ftmul+3
  8552  0F57  0837               	movf	??___ftmul+3,w
  8553  0F58  00B8               	movwf	___ftmul@exp
  8554  0F59  08B8               	movf	___ftmul@exp,f
  8555  0F5A  1D03               	skipz
  8556  0F5B  2F63               	goto	l5640
  8557  0F5C  3000               	movlw	0
  8558  0F5D  00AE               	movwf	?___ftmul
  8559  0F5E  3000               	movlw	0
  8560  0F5F  00AF               	movwf	?___ftmul+1
  8561  0F60  3000               	movlw	0
  8562  0F61  00B0               	movwf	?___ftmul+2
  8563  0F62  0008               	return
  8564  0F63                     l5640:	
  8565  0F63  0831               	movf	___ftmul@f2,w
  8566  0F64  00B4               	movwf	??___ftmul
  8567  0F65  0832               	movf	___ftmul@f2+1,w
  8568  0F66  00B5               	movwf	??___ftmul+1
  8569  0F67  0833               	movf	___ftmul@f2+2,w
  8570  0F68  00B6               	movwf	??___ftmul+2
  8571  0F69  1003               	clrc
  8572  0F6A  0D35               	rlf	??___ftmul+1,w
  8573  0F6B  0D36               	rlf	??___ftmul+2,w
  8574  0F6C  00B7               	movwf	??___ftmul+3
  8575  0F6D  0837               	movf	??___ftmul+3,w
  8576  0F6E  00BD               	movwf	___ftmul@sign
  8577  0F6F  08BD               	movf	___ftmul@sign,f
  8578  0F70  1D03               	skipz
  8579  0F71  2F79               	goto	l5646
  8580  0F72  3000               	movlw	0
  8581  0F73  00AE               	movwf	?___ftmul
  8582  0F74  3000               	movlw	0
  8583  0F75  00AF               	movwf	?___ftmul+1
  8584  0F76  3000               	movlw	0
  8585  0F77  00B0               	movwf	?___ftmul+2
  8586  0F78  0008               	return
  8587  0F79                     l5646:	
  8588  0F79  083D               	movf	___ftmul@sign,w
  8589  0F7A  3E7B               	addlw	123
  8590  0F7B  00B4               	movwf	??___ftmul
  8591  0F7C  0834               	movf	??___ftmul,w
  8592  0F7D  07B8               	addwf	___ftmul@exp,f
  8593  0F7E  082E               	movf	___ftmul@f1,w
  8594  0F7F  00B4               	movwf	??___ftmul
  8595  0F80  082F               	movf	___ftmul@f1+1,w
  8596  0F81  00B5               	movwf	??___ftmul+1
  8597  0F82  0830               	movf	___ftmul@f1+2,w
  8598  0F83  00B6               	movwf	??___ftmul+2
  8599  0F84  3010               	movlw	16
  8600  0F85                     u4455:	
  8601  0F85  36B6               	lsrf	??___ftmul+2,f
  8602  0F86  0CB5               	rrf	??___ftmul+1,f
  8603  0F87  0CB4               	rrf	??___ftmul,f
  8604  0F88  0B89               	decfsz	9,f
  8605  0F89  2F85               	goto	u4455
  8606  0F8A  0834               	movf	??___ftmul,w
  8607  0F8B  00B7               	movwf	??___ftmul+3
  8608  0F8C  0837               	movf	??___ftmul+3,w
  8609  0F8D  00BD               	movwf	___ftmul@sign
  8610  0F8E  0831               	movf	___ftmul@f2,w
  8611  0F8F  00B4               	movwf	??___ftmul
  8612  0F90  0832               	movf	___ftmul@f2+1,w
  8613  0F91  00B5               	movwf	??___ftmul+1
  8614  0F92  0833               	movf	___ftmul@f2+2,w
  8615  0F93  00B6               	movwf	??___ftmul+2
  8616  0F94  3010               	movlw	16
  8617  0F95                     u4465:	
  8618  0F95  36B6               	lsrf	??___ftmul+2,f
  8619  0F96  0CB5               	rrf	??___ftmul+1,f
  8620  0F97  0CB4               	rrf	??___ftmul,f
  8621  0F98  0B89               	decfsz	9,f
  8622  0F99  2F95               	goto	u4465
  8623  0F9A  0834               	movf	??___ftmul,w
  8624  0F9B  00B7               	movwf	??___ftmul+3
  8625  0F9C  0837               	movf	??___ftmul+3,w
  8626  0F9D  06BD               	xorwf	___ftmul@sign,f
  8627  0F9E  3080               	movlw	128
  8628  0F9F  00B4               	movwf	??___ftmul
  8629  0FA0  0834               	movf	??___ftmul,w
  8630  0FA1  05BD               	andwf	___ftmul@sign,f
  8631  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8632  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8633  0FA4  30FF               	movlw	255
  8634  0FA5  05B1               	andwf	___ftmul@f2,f
  8635  0FA6  30FF               	movlw	255
  8636  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8637  0FA8  3000               	movlw	0
  8638  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8639  0FAA  3000               	movlw	0
  8640  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8641  0FAC  3000               	movlw	0
  8642  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8643  0FAE  3000               	movlw	0
  8644  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8645  0FB0  3007               	movlw	7
  8646  0FB1  00B4               	movwf	??___ftmul
  8647  0FB2  0834               	movf	??___ftmul,w
  8648  0FB3  00BC               	movwf	___ftmul@cntr
  8649  0FB4                     l5658:	
  8650  0FB4  1C2E               	btfss	___ftmul@f1,0
  8651  0FB5  2FBC               	goto	l5662
  8652  0FB6  0831               	movf	___ftmul@f2,w
  8653  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8654  0FB8  0832               	movf	___ftmul@f2+1,w
  8655  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8656  0FBA  0833               	movf	___ftmul@f2+2,w
  8657  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8658  0FBC                     l5662:	
  8659  0FBC  3001               	movlw	1
  8660  0FBD                     u4485:	
  8661  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8662  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8663  0FBF  0CAE               	rrf	___ftmul@f1,f
  8664  0FC0  0B89               	decfsz	9,f
  8665  0FC1  2FBD               	goto	u4485
  8666  0FC2  3001               	movlw	1
  8667  0FC3                     u4495:	
  8668  0FC3  35B1               	lslf	___ftmul@f2,f
  8669  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8670  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8671  0FC6  0B89               	decfsz	9,f
  8672  0FC7  2FC3               	goto	u4495
  8673  0FC8  3001               	movlw	1
  8674  0FC9  02BC               	subwf	___ftmul@cntr,f
  8675  0FCA  1D03               	btfss	3,2
  8676  0FCB  2FB4               	goto	l5658
  8677  0FCC  3009               	movlw	9
  8678  0FCD  00B4               	movwf	??___ftmul
  8679  0FCE  0834               	movf	??___ftmul,w
  8680  0FCF  00BC               	movwf	___ftmul@cntr
  8681  0FD0                     l5670:	
  8682  0FD0  1C2E               	btfss	___ftmul@f1,0
  8683  0FD1  2FD8               	goto	l5674
  8684  0FD2  0831               	movf	___ftmul@f2,w
  8685  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8686  0FD4  0832               	movf	___ftmul@f2+1,w
  8687  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8688  0FD6  0833               	movf	___ftmul@f2+2,w
  8689  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8690  0FD8                     l5674:	
  8691  0FD8  3001               	movlw	1
  8692  0FD9                     u4525:	
  8693  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8694  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8695  0FDB  0CAE               	rrf	___ftmul@f1,f
  8696  0FDC  0B89               	decfsz	9,f
  8697  0FDD  2FD9               	goto	u4525
  8698  0FDE  3001               	movlw	1
  8699  0FDF                     u4535:	
  8700  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8701  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8702  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8703  0FE2  0B89               	decfsz	9,f
  8704  0FE3  2FDF               	goto	u4535
  8705  0FE4  3001               	movlw	1
  8706  0FE5  02BC               	subwf	___ftmul@cntr,f
  8707  0FE6  1D03               	btfss	3,2
  8708  0FE7  2FD0               	goto	l5670
  8709  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8710  0FE9  00A0               	movwf	___ftpack@arg
  8711  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8712  0FEB  00A1               	movwf	___ftpack@arg+1
  8713  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8714  0FED  00A2               	movwf	___ftpack@arg+2
  8715  0FEE  0838               	movf	___ftmul@exp,w
  8716  0FEF  00B4               	movwf	??___ftmul
  8717  0FF0  0834               	movf	??___ftmul,w
  8718  0FF1  00A3               	movwf	___ftpack@exp
  8719  0FF2  083D               	movf	___ftmul@sign,w
  8720  0FF3  00B5               	movwf	??___ftmul+1
  8721  0FF4  0835               	movf	??___ftmul+1,w
  8722  0FF5  00A4               	movwf	___ftpack@sign
  8723  0FF6  3189  2181         	fcall	___ftpack
  8724  0FF8  0020               	movlb	0	; select bank0
  8725  0FF9  0820               	movf	?___ftpack,w
  8726  0FFA  00AE               	movwf	?___ftmul
  8727  0FFB  0821               	movf	?___ftpack+1,w
  8728  0FFC  00AF               	movwf	?___ftmul+1
  8729  0FFD  0822               	movf	?___ftpack+2,w
  8730  0FFE  00B0               	movwf	?___ftmul+2
  8731  0FFF  0008               	return
  8732  1000                     __end_of___ftmul:	
  8733                           
  8734                           	psect	text36
  8735  1E17                     __ptext36:	
  8736 ;; *************** function _setMemory_Modify *****************
  8737 ;; Defined at:
  8738 ;;		line 1011 in file "../src/MCU_B1.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  command         1    wreg     unsigned char 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  command         1    1[BANK0 ] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;		None               void
  8745 ;; Registers used:
  8746 ;;		wreg, status,2, status,0
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;Total ram usage:        2 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    5
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_setLog_Code
  8763 ;;		_setRFSW_AdjControl
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           
  8768                           ;psect for function _setMemory_Modify
  8769  1E17                     _setMemory_Modify:	
  8770                           
  8771                           ;incstack = 0
  8772                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8773                           ;setMemory_Modify@command stored from wreg
  8774  1E17  0020               	movlb	0	; select bank0
  8775  1E18  00A1               	movwf	setMemory_Modify@command
  8776                           
  8777                           ;MCU_B1.c: 1012: Memory.Modify = command == 1 ? 1 : 0;
  8778  1E19  0821               	movf	setMemory_Modify@command,w
  8779  1E1A  3A01               	xorlw	1
  8780  1E1B  3000               	movlw	0
  8781  1E1C  1903               	skipnz
  8782  1E1D  3001               	movlw	1
  8783  1E1E  00A0               	movwf	??_setMemory_Modify
  8784  1E1F  0023               	movlb	3	; select bank3
  8785  1E20  0844               	movf	(_Memory^(0+384)+36),w
  8786  1E21  0020               	movlb	0	; select bank0
  8787  1E22  0620               	xorwf	??_setMemory_Modify,w
  8788  1E23  39FE               	andlw	-2
  8789  1E24  0620               	xorwf	??_setMemory_Modify,w
  8790  1E25  0023               	movlb	3	; select bank3
  8791  1E26  00C4               	movwf	(_Memory^(0+384)+36)
  8792                           
  8793                           ;MCU_B1.c: 1013: Memory.Time = 0;
  8794  1E27  01C2               	clrf	(_Memory^(0+384)+34)
  8795  1E28  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8796  1E29  0008               	return
  8797  1E2A                     __end_of_setMemory_Modify:	
  8798                           
  8799                           	psect	text37
  8800  1DBF                     __ptext37:	
  8801 ;; *************** function _getRF_KeyStatus *****************
  8802 ;; Defined at:
  8803 ;;		line 193 in file "../src/RF_Control_B1.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  key             1    1[BANK0 ] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      unsigned char 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;Total ram usage:        3 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    5
  8824 ;; This function calls:
  8825 ;;		Nothing
  8826 ;; This function is called by:
  8827 ;;		_setRF_Main
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           
  8832                           ;psect for function _getRF_KeyStatus
  8833  1DBF                     _getRF_KeyStatus:	
  8834                           
  8835                           ;RF_Control_B1.c: 194: char key = 0;
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8839  1DBF  0020               	movlb	0	; select bank0
  8840  1DC0  01A1               	clrf	getRF_KeyStatus@key
  8841                           
  8842                           ;RF_Control_B1.c: 204: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8843  1DC1  01A2               	clrf	_getRF_KeyStatus$5491
  8844  1DC2  0AA2               	incf	_getRF_KeyStatus$5491,f
  8845  1DC3  1F0C               	btfss	12,6	;volatile
  8846  1DC4  1A0C               	btfsc	12,4	;volatile
  8847  1DC5  2DCA               	goto	l6630
  8848  1DC6  1C0C               	btfss	12,0	;volatile
  8849  1DC7  1B8C               	btfsc	12,7	;volatile
  8850  1DC8  2DCA               	goto	l6630
  8851  1DC9  01A2               	clrf	_getRF_KeyStatus$5491
  8852  1DCA                     l6630:	
  8853  1DCA  0822               	movf	_getRF_KeyStatus$5491,w
  8854  1DCB  00A0               	movwf	??_getRF_KeyStatus
  8855  1DCC  0820               	movf	??_getRF_KeyStatus,w
  8856  1DCD  00A1               	movwf	getRF_KeyStatus@key
  8857                           
  8858                           ;RF_Control_B1.c: 206: return key;
  8859  1DCE  0821               	movf	getRF_KeyStatus@key,w
  8860  1DCF  0008               	return
  8861  1DD0                     __end_of_getRF_KeyStatus:	
  8862                           
  8863                           	psect	text38
  8864  1DAE                     __ptext38:	
  8865 ;; *************** function _getBuz_GO *****************
  8866 ;; Defined at:
  8867 ;;		line 82 in file "../src/Buzzer_B1.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;		None
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  i               2    4[BANK0 ] int 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  2    0[BANK0 ] int 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, status,0
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;Total ram usage:        6 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    5
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_setRF_Main
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function _getBuz_GO
  8897  1DAE                     _getBuz_GO:	
  8898                           
  8899                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8903  1DAE  0021               	movlb	1	; select bank1
  8904  1DAF  0C2F               	rrf	_Buz1^(0+128),w
  8905  1DB0  3901               	andlw	1
  8906  1DB1  0020               	movlb	0	; select bank0
  8907  1DB2  00A2               	movwf	??_getBuz_GO
  8908  1DB3  01A3               	clrf	??_getBuz_GO+1
  8909  1DB4  0822               	movf	??_getBuz_GO,w
  8910  1DB5  00A4               	movwf	getBuz_GO@i
  8911  1DB6  0823               	movf	??_getBuz_GO+1,w
  8912  1DB7  00A5               	movwf	getBuz_GO@i+1
  8913                           
  8914                           ;Buzzer_B1.c: 84: return i;
  8915  1DB8  0825               	movf	getBuz_GO@i+1,w
  8916  1DB9  01A1               	clrf	?_getBuz_GO+1
  8917  1DBA  07A1               	addwf	?_getBuz_GO+1,f
  8918  1DBB  0824               	movf	getBuz_GO@i,w
  8919  1DBC  01A0               	clrf	?_getBuz_GO
  8920  1DBD  07A0               	addwf	?_getBuz_GO,f
  8921  1DBE  0008               	return
  8922  1DBF                     __end_of_getBuz_GO:	
  8923                           
  8924                           	psect	text39
  8925  1D3F                     __ptext39:	
  8926 ;; *************** function _RF_RxDisable *****************
  8927 ;; Defined at:
  8928 ;;		line 264 in file "../src/RF_Control_B1.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;		None
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;		None
  8933 ;; Return value:  Size  Location     Type
  8934 ;;		None               void
  8935 ;; Registers used:
  8936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:        0 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    7
  8949 ;; This function calls:
  8950 ;;		_CC2500_WriteCommand
  8951 ;; This function is called by:
  8952 ;;		_setRF_Main
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _RF_RxDisable
  8958  1D3F                     _RF_RxDisable:	
  8959                           
  8960                           ;RF_Control_B1.c: 265: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8964  1D3F  0021               	movlb	1	; select bank1
  8965  1D40  18BB               	btfsc	_RF1^(0+128),1
  8966  1D41  2D44               	goto	l2047
  8967  1D42  1DBB               	btfss	_RF1^(0+128),3
  8968  1D43  0008               	return
  8969  1D44                     l2047:	
  8970                           
  8971                           ;RF_Control_B1.c: 266: RF1.RxStatus = 0;
  8972  1D44  11BB               	bcf	_RF1^(0+128),3
  8973                           
  8974                           ;RF_Control_B1.c: 267: RF1.ReceiveGO = 0;
  8975  1D45  10BB               	bcf	_RF1^(0+128),1
  8976                           
  8977                           ;RF_Control_B1.c: 268: CC2500_WriteCommand(0x36);
  8978  1D46  3036               	movlw	54
  8979  1D47  319E  26D3  319D   	fcall	_CC2500_WriteCommand
  8980                           
  8981                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x3A);
  8982  1D4A  303A               	movlw	58
  8983  1D4B  319E  26D3         	fcall	_CC2500_WriteCommand
  8984  1D4D  0008               	return
  8985  1D4E                     __end_of_RF_RxDisable:	
  8986                           
  8987                           	psect	text40
  8988  09E2                     __ptext40:	
  8989 ;; *************** function _CC2500_TxData *****************
  8990 ;; Defined at:
  8991 ;;		line 32 in file "../src/CC2500_B1.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;		None
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8996 ;; Return value:  Size  Location     Type
  8997 ;;		None               void
  8998 ;; Registers used:
  8999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9000 ;; Tracked objects:
  9001 ;;		On entry : 0/0
  9002 ;;		On exit  : 0/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;Total ram usage:        2 bytes
  9010 ;; Hardware stack levels used:    1
  9011 ;; Hardware stack levels required when called:    7
  9012 ;; This function calls:
  9013 ;;		_CC2500_WriteByte
  9014 ;;		_CC2500_WriteCommand
  9015 ;;		_Timeout_Counter
  9016 ;;		_set_TimeoutCleared
  9017 ;; This function is called by:
  9018 ;;		_setRF_Main
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _CC2500_TxData
  9024  09E2                     _CC2500_TxData:	
  9025                           
  9026                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9027                           ;CC2500_B1.c: 35: RC0 = 0;
  9028                           
  9029                           ;incstack = 0
  9030                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9031  09E2  0020               	movlb	0	; select bank0
  9032  09E3  100E               	bcf	14,0	;volatile
  9033                           
  9034                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9035  09E4  307F               	movlw	127
  9036  09E5  00A4               	movwf	??_CC2500_TxData
  9037  09E6  0824               	movf	??_CC2500_TxData,w
  9038  09E7  00FB               	movwf	_SPI0Buffer
  9039                           
  9040                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9041  09E8  29EC               	goto	l6290
  9042  09E9                     l6288:	
  9043                           
  9044                           ;CC2500_B1.c: 38: Timeout_Counter();
  9045  09E9  319E  2665  3189   	fcall	_Timeout_Counter
  9046  09EC                     l6290:	
  9047  09EC  0020               	movlb	0	; select bank0
  9048  09ED  1E8E               	btfss	14,5	;volatile
  9049  09EE  29F2               	goto	l6294
  9050  09EF  0021               	movlb	1	; select bank1
  9051  09F0  1D2C               	btfss	(_myMain^(0+128)+12),2
  9052  09F1  29E9               	goto	l6288
  9053  09F2                     l6294:	
  9054                           
  9055                           ;CC2500_B1.c: 39: };
  9056                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9057  09F2  319C  241C  3189   	fcall	_set_TimeoutCleared
  9058                           
  9059                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9060  09F5  319E  263D  3189   	fcall	_CC2500_WriteByte
  9061                           
  9062                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9063  09F8  0021               	movlb	1	; select bank1
  9064  09F9  0852               	movf	_Tx_Length^(0+128),w
  9065  09FA  0020               	movlb	0	; select bank0
  9066  09FB  00A4               	movwf	??_CC2500_TxData
  9067  09FC  0824               	movf	??_CC2500_TxData,w
  9068  09FD  00FB               	movwf	_SPI0Buffer
  9069                           
  9070                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9071  09FE  319E  263D  3189   	fcall	_CC2500_WriteByte
  9072                           
  9073                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9074  0A01  0020               	movlb	0	; select bank0
  9075  0A02  01A5               	clrf	CC2500_TxData@loop_e
  9076  0A03                     l6308:	
  9077  0A03  0021               	movlb	1	; select bank1
  9078  0A04  0852               	movf	_Tx_Length^(0+128),w
  9079  0A05  0020               	movlb	0	; select bank0
  9080  0A06  0225               	subwf	CC2500_TxData@loop_e,w
  9081  0A07  1803               	btfsc	3,0
  9082  0A08  2A1B               	goto	l231
  9083                           
  9084                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9085  0A09  0825               	movf	CC2500_TxData@loop_e,w
  9086  0A0A  3E20               	addlw	_RF_Data& (0+255)
  9087  0A0B  0086               	movwf	6
  9088  0A0C  3001               	movlw	1	; select bank2/3
  9089  0A0D  0087               	movwf	7
  9090  0A0E  0801               	movf	1,w
  9091  0A0F  00A4               	movwf	??_CC2500_TxData
  9092  0A10  0824               	movf	??_CC2500_TxData,w
  9093  0A11  00FB               	movwf	_SPI0Buffer
  9094                           
  9095                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9096  0A12  319E  263D  3189   	fcall	_CC2500_WriteByte
  9097  0A15  3001               	movlw	1
  9098  0A16  0020               	movlb	0	; select bank0
  9099  0A17  00A4               	movwf	??_CC2500_TxData
  9100  0A18  0824               	movf	??_CC2500_TxData,w
  9101  0A19  07A5               	addwf	CC2500_TxData@loop_e,f
  9102  0A1A  2A03               	goto	l6308
  9103  0A1B                     l231:	
  9104                           
  9105                           ;CC2500_B1.c: 48: }
  9106                           ;CC2500_B1.c: 49: RC0 = 1;
  9107  0A1B  140E               	bsf	14,0	;volatile
  9108                           
  9109                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9110  0A1C  3035               	movlw	53
  9111  0A1D  319E  26D3  3189   	fcall	_CC2500_WriteCommand
  9112                           
  9113                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9114  0A20  2A24               	goto	l6314
  9115  0A21                     l6312:	
  9116                           
  9117                           ;CC2500_B1.c: 52: Timeout_Counter();
  9118  0A21  319E  2665  3189   	fcall	_Timeout_Counter
  9119  0A24                     l6314:	
  9120  0A24  0020               	movlb	0	; select bank0
  9121  0A25  188E               	btfsc	14,1	;volatile
  9122  0A26  2A2A               	goto	l6318
  9123  0A27  0021               	movlb	1	; select bank1
  9124  0A28  1D2C               	btfss	(_myMain^(0+128)+12),2
  9125  0A29  2A21               	goto	l6312
  9126  0A2A                     l6318:	
  9127                           
  9128                           ;CC2500_B1.c: 53: };
  9129                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9130  0A2A  319C  241C  3189   	fcall	_set_TimeoutCleared
  9131                           
  9132                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9133  0A2D  2A31               	goto	l6322
  9134  0A2E                     l6320:	
  9135                           
  9136                           ;CC2500_B1.c: 57: Timeout_Counter();
  9137  0A2E  319E  2665  3189   	fcall	_Timeout_Counter
  9138  0A31                     l6322:	
  9139  0A31  0020               	movlb	0	; select bank0
  9140  0A32  1C8E               	btfss	14,1	;volatile
  9141  0A33  2A37               	goto	l6326
  9142  0A34  0021               	movlb	1	; select bank1
  9143  0A35  1D2C               	btfss	(_myMain^(0+128)+12),2
  9144  0A36  2A2E               	goto	l6320
  9145  0A37                     l6326:	
  9146                           
  9147                           ;CC2500_B1.c: 58: };
  9148                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9149  0A37  319C  241C  3189   	fcall	_set_TimeoutCleared
  9150                           
  9151                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9152  0A3A  3036               	movlw	54
  9153  0A3B  319E  26D3  3189   	fcall	_CC2500_WriteCommand
  9154                           
  9155                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9156  0A3E  303B               	movlw	59
  9157  0A3F  319E  26D3         	fcall	_CC2500_WriteCommand
  9158                           
  9159                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9160  0A41  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9161  0A42  0008               	return
  9162  0A43                     __end_of_CC2500_TxData:	
  9163                           
  9164                           	psect	text41
  9165  0B73                     __ptext41:	
  9166 ;; *************** function _CC2500_RxData *****************
  9167 ;; Defined at:
  9168 ;;		line 70 in file "../src/CC2500_B1.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;		None
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;		None               void
  9175 ;; Registers used:
  9176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;Total ram usage:        2 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    7
  9189 ;; This function calls:
  9190 ;;		_CC2500_ReadByte
  9191 ;;		_CC2500_ReadStatus
  9192 ;;		_CC2500_WriteByte
  9193 ;;		_Timeout_Counter
  9194 ;;		_set_TimeoutCleared
  9195 ;; This function is called by:
  9196 ;;		_setRF_Main
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           
  9201                           ;psect for function _CC2500_RxData
  9202  0B73                     _CC2500_RxData:	
  9203                           
  9204                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9205                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9209  0B73  0020               	movlb	0	; select bank0
  9210  0B74  188E               	btfsc	14,1	;volatile
  9211  0B75  2B7A               	goto	l6340
  9212  0B76  2B83               	goto	l6346
  9213  0B77                     l6338:	
  9214                           ;CC2500_B1.c: 76: {
  9215                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9216                           
  9217                           
  9218                           ;CC2500_B1.c: 78: Timeout_Counter();
  9219  0B77  319E  2665  318B   	fcall	_Timeout_Counter
  9220  0B7A                     l6340:	
  9221  0B7A  0020               	movlb	0	; select bank0
  9222  0B7B  1C8E               	btfss	14,1	;volatile
  9223  0B7C  2B80               	goto	l6344
  9224  0B7D  0021               	movlb	1	; select bank1
  9225  0B7E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9226  0B7F  2B77               	goto	l6338
  9227  0B80                     l6344:	
  9228                           
  9229                           ;CC2500_B1.c: 79: };
  9230                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9231  0B80  319C  241C  318B   	fcall	_set_TimeoutCleared
  9232  0B83                     l6346:	
  9233                           
  9234                           ;CC2500_B1.c: 81: }
  9235                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9236  0B83  303B               	movlw	59
  9237  0B84  3190  2088  318B   	fcall	_CC2500_ReadStatus
  9238                           
  9239                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9240  0B87  0021               	movlb	1	; select bank1
  9241  0B88  0855               	movf	_s_data^(0+128),w
  9242  0B89  1903               	btfsc	3,2
  9243  0B8A  0008               	return
  9244                           
  9245                           ;CC2500_B1.c: 86: RC0 = 0;
  9246  0B8B  0020               	movlb	0	; select bank0
  9247  0B8C  100E               	bcf	14,0	;volatile
  9248                           
  9249                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9250  0B8D  30FF               	movlw	255
  9251  0B8E  00A4               	movwf	??_CC2500_RxData
  9252  0B8F  0824               	movf	??_CC2500_RxData,w
  9253  0B90  00FB               	movwf	_SPI0Buffer
  9254                           
  9255                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9256  0B91  2B95               	goto	l6356
  9257  0B92                     l6354:	
  9258                           
  9259                           ;CC2500_B1.c: 89: Timeout_Counter();
  9260  0B92  319E  2665  318B   	fcall	_Timeout_Counter
  9261  0B95                     l6356:	
  9262  0B95  0020               	movlb	0	; select bank0
  9263  0B96  1E8E               	btfss	14,5	;volatile
  9264  0B97  2B9B               	goto	l6360
  9265  0B98  0021               	movlb	1	; select bank1
  9266  0B99  1D2C               	btfss	(_myMain^(0+128)+12),2
  9267  0B9A  2B92               	goto	l6354
  9268  0B9B                     l6360:	
  9269                           
  9270                           ;CC2500_B1.c: 90: };
  9271                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9272  0B9B  319C  241C  318B   	fcall	_set_TimeoutCleared
  9273                           
  9274                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9275  0B9E  319E  263D  318B   	fcall	_CC2500_WriteByte
  9276                           
  9277                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9278  0BA1  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9279                           
  9280                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9281  0BA4  087B               	movf	_SPI0Buffer,w
  9282  0BA5  0020               	movlb	0	; select bank0
  9283  0BA6  00A4               	movwf	??_CC2500_RxData
  9284  0BA7  0824               	movf	??_CC2500_RxData,w
  9285  0BA8  0021               	movlb	1	; select bank1
  9286  0BA9  00D0               	movwf	_Rx_Length^(0+128)
  9287                           
  9288                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9289  0BAA  0020               	movlb	0	; select bank0
  9290  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9291  0BAC                     l6376:	
  9292  0BAC  0021               	movlb	1	; select bank1
  9293  0BAD  0850               	movf	_Rx_Length^(0+128),w
  9294  0BAE  0020               	movlb	0	; select bank0
  9295  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9296  0BB0  1803               	btfsc	3,0
  9297  0BB1  2BC4               	goto	l6378
  9298                           
  9299                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9300  0BB2  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9301                           
  9302                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9303  0BB5  087B               	movf	_SPI0Buffer,w
  9304  0BB6  0020               	movlb	0	; select bank0
  9305  0BB7  00A4               	movwf	??_CC2500_RxData
  9306  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9307  0BB9  3E20               	addlw	_RF_Data& (0+255)
  9308  0BBA  0086               	movwf	6
  9309  0BBB  3001               	movlw	1	; select bank2/3
  9310  0BBC  0087               	movwf	7
  9311  0BBD  0824               	movf	??_CC2500_RxData,w
  9312  0BBE  0081               	movwf	1
  9313  0BBF  3001               	movlw	1
  9314  0BC0  00A4               	movwf	??_CC2500_RxData
  9315  0BC1  0824               	movf	??_CC2500_RxData,w
  9316  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9317  0BC3  2BAC               	goto	l6376
  9318  0BC4                     l6378:	
  9319                           
  9320                           ;CC2500_B1.c: 99: }
  9321                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9322  0BC4  319E  26A4  318B   	fcall	_CC2500_ReadByte
  9323                           
  9324                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9325  0BC7  087B               	movf	_SPI0Buffer,w
  9326  0BC8  0020               	movlb	0	; select bank0
  9327  0BC9  00A4               	movwf	??_CC2500_RxData
  9328  0BCA  0824               	movf	??_CC2500_RxData,w
  9329  0BCB  0021               	movlb	1	; select bank1
  9330  0BCC  00CF               	movwf	_RSSI^(0+128)
  9331                           
  9332                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9333  0BCD  319E  26A4         	fcall	_CC2500_ReadByte
  9334                           
  9335                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9336  0BCF  087B               	movf	_SPI0Buffer,w
  9337  0BD0  0020               	movlb	0	; select bank0
  9338  0BD1  00A4               	movwf	??_CC2500_RxData
  9339  0BD2  0824               	movf	??_CC2500_RxData,w
  9340  0BD3  0021               	movlb	1	; select bank1
  9341  0BD4  00CC               	movwf	_CRC^(0+128)
  9342                           
  9343                           ;CC2500_B1.c: 104: RC0 = 1;
  9344  0BD5  0020               	movlb	0	; select bank0
  9345  0BD6  140E               	bsf	14,0	;volatile
  9346                           
  9347                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9348  0BD7  0021               	movlb	1	; select bank1
  9349  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9350                           
  9351                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9352  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9353                           
  9354                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9355  0BDA  11BB               	bcf	_RF1^(0+128),3
  9356                           
  9357                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9358  0BDB  14BB               	bsf	_RF1^(0+128),1
  9359  0BDC  0008               	return
  9360  0BDD                     __end_of_CC2500_RxData:	
  9361                           
  9362                           	psect	text42
  9363  1088                     __ptext42:	
  9364 ;; *************** function _CC2500_ReadStatus *****************
  9365 ;; Defined at:
  9366 ;;		line 301 in file "../src/CC2500_B1.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;  status_addr     1    wreg     unsigned char 
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;		None               void
  9373 ;; Registers used:
  9374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;Total ram usage:        2 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    6
  9387 ;; This function calls:
  9388 ;;		_CC2500_ReadByte
  9389 ;;		_CC2500_WriteByte
  9390 ;;		_Timeout_Counter
  9391 ;;		_set_TimeoutCleared
  9392 ;; This function is called by:
  9393 ;;		_CC2500_RxData
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _CC2500_ReadStatus
  9399  1088                     _CC2500_ReadStatus:	
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9403                           ;CC2500_ReadStatus@status_addr stored from wreg
  9404  1088  0020               	movlb	0	; select bank0
  9405  1089  00A3               	movwf	CC2500_ReadStatus@status_addr
  9406                           
  9407                           ;CC2500_B1.c: 302: RC0 = 0;
  9408  108A  100E               	bcf	14,0	;volatile
  9409                           
  9410                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9411  108B  0823               	movf	CC2500_ReadStatus@status_addr,w
  9412  108C  3EC0               	addlw	192
  9413  108D  00A2               	movwf	??_CC2500_ReadStatus
  9414  108E  0822               	movf	??_CC2500_ReadStatus,w
  9415  108F  00FB               	movwf	_SPI0Buffer
  9416                           
  9417                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9418  1090  2894               	goto	l6154
  9419  1091                     l6152:	
  9420                           
  9421                           ;CC2500_B1.c: 306: Timeout_Counter();
  9422  1091  319E  2665  3190   	fcall	_Timeout_Counter
  9423  1094                     l6154:	
  9424  1094  0020               	movlb	0	; select bank0
  9425  1095  1E8E               	btfss	14,5	;volatile
  9426  1096  289A               	goto	l6158
  9427  1097  0021               	movlb	1	; select bank1
  9428  1098  1D2C               	btfss	(_myMain^(0+128)+12),2
  9429  1099  2891               	goto	l6152
  9430  109A                     l6158:	
  9431                           
  9432                           ;CC2500_B1.c: 307: };
  9433                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9434  109A  319C  241C  3190   	fcall	_set_TimeoutCleared
  9435                           
  9436                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9437  109D  319E  263D  3190   	fcall	_CC2500_WriteByte
  9438                           
  9439                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9440  10A0  319E  26A4         	fcall	_CC2500_ReadByte
  9441                           
  9442                           ;CC2500_B1.c: 312: RC0 = 1;
  9443  10A2  0020               	movlb	0	; select bank0
  9444  10A3  140E               	bsf	14,0	;volatile
  9445                           
  9446                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9447  10A4  087B               	movf	_SPI0Buffer,w
  9448  10A5  00A2               	movwf	??_CC2500_ReadStatus
  9449  10A6  0822               	movf	??_CC2500_ReadStatus,w
  9450  10A7  0021               	movlb	1	; select bank1
  9451  10A8  00D5               	movwf	_s_data^(0+128)
  9452  10A9  0008               	return
  9453  10AA                     __end_of_CC2500_ReadStatus:	
  9454                           
  9455                           	psect	text43
  9456  1EA4                     __ptext43:	
  9457 ;; *************** function _CC2500_ReadByte *****************
  9458 ;; Defined at:
  9459 ;;		line 235 in file "../src/CC2500_B1.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;		None
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;		None               void
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;Total ram usage:        2 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    5
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_CC2500_RxData
  9484 ;;		_CC2500_ReadStatus
  9485 ;;		_CC2500_ReadREG
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _CC2500_ReadByte
  9491  1EA4                     _CC2500_ReadByte:	
  9492                           
  9493                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9494                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9495                           
  9496                           ;incstack = 0
  9497                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9498  1EA4  0020               	movlb	0	; select bank0
  9499  1EA5  01A1               	clrf	CC2500_ReadByte@loop_b
  9500  1EA6                     L5:	
  9501  1EA6  3008               	movlw	8
  9502  1EA7  0221               	subwf	CC2500_ReadByte@loop_b,w
  9503  1EA8  1803               	btfsc	3,0
  9504  1EA9  0008               	return
  9505                           
  9506                           ;CC2500_B1.c: 238: RC3 = 1;
  9507  1EAA  158E               	bsf	14,3	;volatile
  9508                           
  9509                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9510  1EAB  1003               	clrc
  9511  1EAC  0DFB               	rlf	_SPI0Buffer,f
  9512                           
  9513                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9514  1EAD  1E8E               	btfss	14,5	;volatile
  9515  1EAE  2EB1               	goto	l6058
  9516                           
  9517                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9518  1EAF  147B               	bsf	_SPI0Buffer,0
  9519  1EB0  2EB5               	goto	l6060
  9520  1EB1                     l6058:	
  9521                           
  9522                           ;CC2500_B1.c: 242: else
  9523                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9524  1EB1  30FE               	movlw	254
  9525  1EB2  00A0               	movwf	??_CC2500_ReadByte
  9526  1EB3  0820               	movf	??_CC2500_ReadByte,w
  9527  1EB4  05FB               	andwf	_SPI0Buffer,f
  9528  1EB5                     l6060:	
  9529                           
  9530                           ;CC2500_B1.c: 244: RC3 = 0;
  9531  1EB5  118E               	bcf	14,3	;volatile
  9532  1EB6  3001               	movlw	1
  9533  1EB7  00A0               	movwf	??_CC2500_ReadByte
  9534  1EB8  0820               	movf	??_CC2500_ReadByte,w
  9535  1EB9  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9536  1EBA  2EA6               	goto	L5
  9537  1EBB                     __end_of_CC2500_ReadByte:	
  9538                           
  9539                           	psect	text44
  9540  1BEC                     __ptext44:	
  9541 ;; *************** function _RF_Initialization *****************
  9542 ;; Defined at:
  9543 ;;		line 9 in file "../src/RF_Control_B1.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;		None
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;		None
  9548 ;; Return value:  Size  Location     Type
  9549 ;;		None               void
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0, pclath, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;Total ram usage:        0 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    6
  9564 ;; This function calls:
  9565 ;;		_setRF_Initialization
  9566 ;; This function is called by:
  9567 ;;		_main
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           
  9572                           ;psect for function _RF_Initialization
  9573  1BEC                     _RF_Initialization:	
  9574                           
  9575                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9576                           
  9577                           ;incstack = 0
  9578                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9579  1BEC  319C  24AC         	fcall	_setRF_Initialization
  9580  1BEE  0008               	return
  9581  1BEF                     __end_of_RF_Initialization:	
  9582                           
  9583                           	psect	text45
  9584  1CAC                     __ptext45:	
  9585 ;; *************** function _setRF_Initialization *****************
  9586 ;; Defined at:
  9587 ;;		line 43 in file "../src/RF_Control_B1.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;		None               void
  9594 ;; Registers used:
  9595 ;;		wreg
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        1 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    5
  9608 ;; This function calls:
  9609 ;;		Nothing
  9610 ;; This function is called by:
  9611 ;;		_RF_Initialization
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _setRF_Initialization
  9617  1CAC                     _setRF_Initialization:	
  9618                           
  9619                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _setRF_Initialization: [wreg]
  9623  1CAC  3015               	movlw	21
  9624  1CAD  0020               	movlb	0	; select bank0
  9625  1CAE  00A0               	movwf	??_setRF_Initialization
  9626  1CAF  0820               	movf	??_setRF_Initialization,w
  9627  1CB0  0021               	movlb	1	; select bank1
  9628  1CB1  00D2               	movwf	_Tx_Length^(0+128)
  9629                           
  9630                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9631  1CB2  300A               	movlw	10
  9632  1CB3  00C2               	movwf	(_RF1^(0+128)+7)
  9633  1CB4  3000               	movlw	0
  9634  1CB5  00C3               	movwf	(_RF1^(0+128)+8)
  9635  1CB6  0008               	return
  9636  1CB7                     __end_of_setRF_Initialization:	
  9637                           
  9638                           	psect	text46
  9639  1DF3                     __ptext46:	
  9640 ;; *************** function _Mcu_Initialization *****************
  9641 ;; Defined at:
  9642 ;;		line 30 in file "../src/MCU_B1.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;		None
  9647 ;; Return value:  Size  Location     Type
  9648 ;;		None               void
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0, pclath, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;Total ram usage:        0 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    6
  9663 ;; This function calls:
  9664 ;;		_ADC_Set
  9665 ;;		_Fosc_Set
  9666 ;;		_IOC_Set
  9667 ;;		_IO_Set
  9668 ;;		_TMR1_Set
  9669 ;;		_WDT_Set
  9670 ;; This function is called by:
  9671 ;;		_main
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           
  9676                           ;psect for function _Mcu_Initialization
  9677  1DF3                     _Mcu_Initialization:	
  9678                           
  9679                           ;MCU_B1.c: 32: Fosc_Set();
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9683  1DF3  319C  2418  319D   	fcall	_Fosc_Set
  9684                           
  9685                           ;MCU_B1.c: 34: IO_Set();
  9686  1DF6  319E  26BB  319D   	fcall	_IO_Set
  9687                           
  9688                           ;MCU_B1.c: 36: ;;
  9689                           ;MCU_B1.c: 38: TMR1_Set();
  9690  1DF9  319D  2509  319D   	fcall	_TMR1_Set
  9691                           
  9692                           ;MCU_B1.c: 40: ADC_Set();
  9693  1DFC  319C  2438  319D   	fcall	_ADC_Set
  9694                           
  9695                           ;MCU_B1.c: 42: ;;
  9696                           ;MCU_B1.c: 44: ;;
  9697                           ;MCU_B1.c: 46: IOC_Set();
  9698  1DFF  319C  24FD  319D   	fcall	_IOC_Set
  9699                           
  9700                           ;MCU_B1.c: 48: ;;
  9701                           ;MCU_B1.c: 50: ;;
  9702                           ;MCU_B1.c: 52: WDT_Set();
  9703  1E02  319C  24A1         	fcall	_WDT_Set
  9704  1E04  0008               	return
  9705  1E05                     __end_of_Mcu_Initialization:	
  9706                           
  9707                           	psect	text47
  9708  1CA1                     __ptext47:	
  9709 ;; *************** function _WDT_Set *****************
  9710 ;; Defined at:
  9711 ;;		line 1030 in file "../src/MCU_B1.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;		None               void
  9718 ;; Registers used:
  9719 ;;		wreg
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        1 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		Nothing
  9734 ;; This function is called by:
  9735 ;;		_Mcu_Initialization
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _WDT_Set
  9741  1CA1                     _WDT_Set:	
  9742                           
  9743                           ;MCU_B1.c: 1037: WDTCON = 0b00010111;;
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _WDT_Set: [wreg]
  9747  1CA1  3017               	movlw	23
  9748  1CA2  0021               	movlb	1	; select bank1
  9749  1CA3  0097               	movwf	23	;volatile
  9750                           
  9751                           ;MCU_B1.c: 1039: WDT.Enable = 1;
  9752  1CA4  144A               	bsf	_WDT^(0+128),0
  9753                           
  9754                           ;MCU_B1.c: 1040: WDT.Timer = 10;
  9755  1CA5  300A               	movlw	10
  9756  1CA6  0020               	movlb	0	; select bank0
  9757  1CA7  00A0               	movwf	??_WDT_Set
  9758  1CA8  0820               	movf	??_WDT_Set,w
  9759  1CA9  0021               	movlb	1	; select bank1
  9760  1CAA  00CB               	movwf	(_WDT^(0+128)+1)
  9761  1CAB  0008               	return
  9762  1CAC                     __end_of_WDT_Set:	
  9763                           
  9764                           	psect	text48
  9765  1D09                     __ptext48:	
  9766 ;; *************** function _TMR1_Set *****************
  9767 ;; Defined at:
  9768 ;;		line 199 in file "../src/MCU_B1.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;		None               void
  9775 ;; Registers used:
  9776 ;;		wreg
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    5
  9789 ;; This function calls:
  9790 ;;		Nothing
  9791 ;; This function is called by:
  9792 ;;		_Mcu_Initialization
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _TMR1_Set
  9798  1D09                     _TMR1_Set:	
  9799                           
  9800                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _TMR1_Set: [wreg]
  9804  1D09  3041               	movlw	65
  9805  1D0A  0020               	movlb	0	; select bank0
  9806  1D0B  0098               	movwf	24	;volatile
  9807                           
  9808                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9809  1D0C  30FA               	movlw	250
  9810  1D0D  0097               	movwf	23	;volatile
  9811                           
  9812                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9813  1D0E  3038               	movlw	56
  9814  1D0F  0096               	movwf	22	;volatile
  9815                           
  9816                           ;MCU_B1.c: 203: TMR1IE = 1;
  9817  1D10  0021               	movlb	1	; select bank1
  9818  1D11  1411               	bsf	17,0	;volatile
  9819                           
  9820                           ;MCU_B1.c: 204: PEIE = 1;
  9821  1D12  170B               	bsf	11,6	;volatile
  9822                           
  9823                           ;MCU_B1.c: 205: GIE = 1;
  9824  1D13  178B               	bsf	11,7	;volatile
  9825  1D14  0008               	return
  9826  1D15                     __end_of_TMR1_Set:	
  9827                           
  9828                           	psect	text49
  9829  1EBB                     __ptext49:	
  9830 ;; *************** function _IO_Set *****************
  9831 ;; Defined at:
  9832 ;;		line 60 in file "../src/MCU_B1.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;		None               void
  9839 ;; Registers used:
  9840 ;;		wreg, status,2
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    5
  9853 ;; This function calls:
  9854 ;;		Nothing
  9855 ;; This function is called by:
  9856 ;;		_Mcu_Initialization
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _IO_Set
  9862  1EBB                     _IO_Set:	
  9863                           
  9864                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _IO_Set: [wreg+status,2]
  9868  1EBB  30F7               	movlw	247
  9869  1EBC  0021               	movlb	1	; select bank1
  9870  1EBD  008C               	movwf	12	;volatile
  9871                           
  9872                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9873  1EBE  3004               	movlw	4
  9874  1EBF  008D               	movwf	13	;volatile
  9875                           
  9876                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9877  1EC0  3026               	movlw	38
  9878  1EC1  008E               	movwf	14	;volatile
  9879                           
  9880                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9881  1EC2  0022               	movlb	2	; select bank2
  9882  1EC3  018C               	clrf	12	;volatile
  9883                           
  9884                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9885  1EC4  018D               	clrf	13	;volatile
  9886                           
  9887                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9888  1EC5  018E               	clrf	14	;volatile
  9889                           
  9890                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9891  1EC6  300E               	movlw	14
  9892  1EC7  0023               	movlb	3	; select bank3
  9893  1EC8  008C               	movwf	12	;volatile
  9894                           
  9895                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9896  1EC9  018D               	clrf	13	;volatile
  9897                           
  9898                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9899  1ECA  018E               	clrf	14	;volatile
  9900                           
  9901                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9902  1ECB  30F7               	movlw	247
  9903  1ECC  0020               	movlb	0	; select bank0
  9904  1ECD  008C               	movwf	12	;volatile
  9905                           
  9906                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9907  1ECE  3004               	movlw	4
  9908  1ECF  008D               	movwf	13	;volatile
  9909                           
  9910                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9911  1ED0  3026               	movlw	38
  9912  1ED1  008E               	movwf	14	;volatile
  9913  1ED2  0008               	return
  9914  1ED3                     __end_of_IO_Set:	
  9915                           
  9916                           	psect	text50
  9917  1CFD                     __ptext50:	
  9918 ;; *************** function _IOC_Set *****************
  9919 ;; Defined at:
  9920 ;;		line 366 in file "../src/MCU_B1.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;		None               void
  9927 ;; Registers used:
  9928 ;;		wreg, status,2
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;Total ram usage:        0 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    5
  9941 ;; This function calls:
  9942 ;;		Nothing
  9943 ;; This function is called by:
  9944 ;;		_Mcu_Initialization
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           
  9949                           ;psect for function _IOC_Set
  9950  1CFD                     _IOC_Set:	
  9951                           
  9952                           ;MCU_B1.c: 367: WPUB2 = 0;
  9953                           
  9954                           ;incstack = 0
  9955                           ; Regs used in _IOC_Set: [wreg+status,2]
  9956  1CFD  0024               	movlb	4	; select bank4
  9957  1CFE  110D               	bcf	13,2	;volatile
  9958                           
  9959                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9960  1CFF  0027               	movlb	7	; select bank7
  9961  1D00  0194               	clrf	20	;volatile
  9962                           
  9963                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9964  1D01  3004               	movlw	4
  9965  1D02  0095               	movwf	21	;volatile
  9966                           
  9967                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9968  1D03  0196               	clrf	22	;volatile
  9969                           
  9970                           ;MCU_B1.c: 394: IOCIE = 1;
  9971  1D04  158B               	bsf	11,3	;volatile
  9972                           
  9973                           ;MCU_B1.c: 395: IOCIF = 0;
  9974  1D05  100B               	bcf	11,0	;volatile
  9975                           
  9976                           ;MCU_B1.c: 396: PEIE = 1;
  9977  1D06  170B               	bsf	11,6	;volatile
  9978                           
  9979                           ;MCU_B1.c: 397: GIE = 1;
  9980  1D07  178B               	bsf	11,7	;volatile
  9981  1D08  0008               	return
  9982  1D09                     __end_of_IOC_Set:	
  9983                           
  9984                           	psect	text51
  9985  1C18                     __ptext51:	
  9986 ;; *************** function _Fosc_Set *****************
  9987 ;; Defined at:
  9988 ;;		line 56 in file "../src/MCU_B1.c"
  9989 ;; Parameters:    Size  Location     Type
  9990 ;;		None
  9991 ;; Auto vars:     Size  Location     Type
  9992 ;;		None
  9993 ;; Return value:  Size  Location     Type
  9994 ;;		None               void
  9995 ;; Registers used:
  9996 ;;		wreg
  9997 ;; Tracked objects:
  9998 ;;		On entry : 0/0
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;Total ram usage:        0 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; Hardware stack levels required when called:    5
 10009 ;; This function calls:
 10010 ;;		Nothing
 10011 ;; This function is called by:
 10012 ;;		_Mcu_Initialization
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           
 10017                           ;psect for function _Fosc_Set
 10018  1C18                     _Fosc_Set:	
 10019                           
 10020                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10021                           
 10022                           ;incstack = 0
 10023                           ; Regs used in _Fosc_Set: [wreg]
 10024  1C18  3078               	movlw	120
 10025  1C19  0021               	movlb	1	; select bank1
 10026  1C1A  0099               	movwf	25	;volatile
 10027  1C1B  0008               	return
 10028  1C1C                     __end_of_Fosc_Set:	
 10029                           
 10030                           	psect	text52
 10031  1C38                     __ptext52:	
 10032 ;; *************** function _ADC_Set *****************
 10033 ;; Defined at:
 10034 ;;		line 420 in file "../src/MCU_B1.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;		None               void
 10041 ;; Registers used:
 10042 ;;		wreg
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;Total ram usage:        0 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:    5
 10055 ;; This function calls:
 10056 ;;		Nothing
 10057 ;; This function is called by:
 10058 ;;		_Mcu_Initialization
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           
 10063                           ;psect for function _ADC_Set
 10064  1C38                     _ADC_Set:	
 10065                           
 10066                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10067                           
 10068                           ;incstack = 0
 10069                           ; Regs used in _ADC_Set: [wreg]
 10070  1C38  30F3               	movlw	243
 10071  1C39  0021               	movlb	1	; select bank1
 10072  1C3A  009E               	movwf	30	;volatile
 10073                           
 10074                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10075  1C3B  30C1               	movlw	193
 10076  1C3C  0022               	movlb	2	; select bank2
 10077  1C3D  0097               	movwf	23	;volatile
 10078  1C3E  0008               	return
 10079  1C3F                     __end_of_ADC_Set:	
 10080                           
 10081                           	psect	text53
 10082  02F8                     __ptext53:	
 10083 ;; *************** function _Load_Main *****************
 10084 ;; Defined at:
 10085 ;;		line 39 in file "../src/OverLoad_B1.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;		None
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  i               1   15[BANK0 ] unsigned char 
 10090 ;;  error           1   14[BANK0 ] unsigned char 
 10091 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10092 ;;  j               1   11[BANK0 ] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;		None               void
 10095 ;; Registers used:
 10096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        7 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    8
 10109 ;; This function calls:
 10110 ;;		_getAll_DimmerLights_AdjGO
 10111 ;;		_getMain_All_Error_Status
 10112 ;;		_getMain_LightsStatus
 10113 ;;		_getMain_Lights_Count
 10114 ;;		_getMain_LoadOK
 10115 ;;		_setLoad_AH_AL_Restore
 10116 ;; This function is called by:
 10117 ;;		_main
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _Load_Main
 10123  02F8                     _Load_Main:	
 10124                           
 10125                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10126                           
 10127                           ;incstack = 0
 10128                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10129  02F8  0020               	movlb	0	; select bank0
 10130  02F9  01AF               	clrf	Load_Main@i
 10131  02FA  01AB               	clrf	Load_Main@j
 10132  02FB  3000               	movlw	0
 10133  02FC  3192  224E  3182   	fcall	_getMain_All_Error_Status
 10134  02FF  0020               	movlb	0	; select bank0
 10135  0300  00A9               	movwf	??_Load_Main
 10136  0301  0829               	movf	??_Load_Main,w
 10137  0302  00AE               	movwf	Load_Main@error
 10138  0303  01AC               	clrf	Load_Main@adjgo
 10139                           
 10140                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10141  0304  0022               	movlb	2	; select bank2
 10142  0305  1C43               	btfss	_Load^(0+256),0
 10143  0306  2C36               	goto	l1540
 10144                           
 10145                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10146  0307  319C  246B  3182   	fcall	_getAll_DimmerLights_AdjGO
 10147  030A  0020               	movlb	0	; select bank0
 10148  030B  00A9               	movwf	??_Load_Main
 10149  030C  0829               	movf	??_Load_Main,w
 10150  030D  00AC               	movwf	Load_Main@adjgo
 10151                           
 10152                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10153  030E  01AD               	clrf	_Load_Main$4106
 10154  030F  3191  2192  3182   	fcall	_getMain_LightsStatus
 10155  0312  3A01               	xorlw	1
 10156  0313  1D03               	skipz
 10157  0314  2B1E               	goto	l7692
 10158  0315  0020               	movlb	0	; select bank0
 10159  0316  08AE               	movf	Load_Main@error,f
 10160  0317  1D03               	skipz
 10161  0318  2B1E               	goto	l7692
 10162  0319  08AC               	movf	Load_Main@adjgo,f
 10163  031A  1D03               	skipz
 10164  031B  2B1E               	goto	l7692
 10165  031C  01AD               	clrf	_Load_Main$4106
 10166  031D  0AAD               	incf	_Load_Main$4106,f
 10167  031E                     l7692:	
 10168  031E  0020               	movlb	0	; select bank0
 10169  031F  082D               	movf	_Load_Main$4106,w
 10170  0320  0022               	movlb	2	; select bank2
 10171  0321  10C3               	bcf	_Load^(0+256),1
 10172  0322  1D03               	skipz
 10173  0323  14C3               	bsf	_Load^(0+256),1
 10174                           
 10175                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10176  0324  319D  2522  3182   	fcall	_getMain_LoadOK
 10177  0327  3A01               	xorlw	1
 10178  0328  1D03               	skipz
 10179  0329  2B2F               	goto	l1543
 10180  032A  0022               	movlb	2	; select bank2
 10181  032B  19C3               	btfsc	_Load^(0+256),3
 10182  032C  2B2F               	goto	l1543
 10183                           
 10184                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10185  032D  15C3               	bsf	_Load^(0+256),3
 10186                           
 10187                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10188  032E  13C3               	bcf	_Load^(0+256),7
 10189  032F                     l1543:	
 10190                           
 10191                           ;OverLoad_B1.c: 51: }
 10192                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10193  032F  0022               	movlb	2	; select bank2
 10194  0330  1CC3               	btfss	_Load^(0+256),1
 10195  0331  2C06               	goto	l1544
 10196                           
 10197                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10198  0332  1543               	bsf	_Load^(0+256),2
 10199                           
 10200                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10201  0333  1E43               	btfss	_Load^(0+256),4
 10202  0334  2C04               	goto	l1545
 10203                           
 10204                           ;OverLoad_B1.c: 58: Load.Time++;
 10205  0335  3001               	movlw	1
 10206  0336  07C4               	addwf	(_Load^(0+256)+1),f
 10207  0337  3000               	movlw	0
 10208  0338  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10209                           
 10210                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10211  0339  3000               	movlw	0
 10212  033A  0245               	subwf	((_Load+1)^(0+256)+1),w
 10213  033B  3005               	movlw	5
 10214  033C  1903               	skipnz
 10215  033D  0244               	subwf	(_Load^(0+256)+1),w
 10216  033E  1C03               	skipc
 10217  033F  0008               	return
 10218                           
 10219                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10220  0340  01C4               	clrf	(_Load^(0+256)+1)
 10221  0341  01C5               	clrf	((_Load+1)^(0+256)+1)
 10222                           
 10223                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10224  0342  1243               	bcf	_Load^(0+256),4
 10225                           
 10226                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10227  0343  0020               	movlb	0	; select bank0
 10228  0344  01AF               	clrf	Load_Main@i
 10229  0345  3004               	movlw	4
 10230  0346  022F               	subwf	Load_Main@i,w
 10231  0347  1803               	btfsc	3,0
 10232  0348  2B73               	goto	l7718
 10233  0349                     l7712:	
 10234                           
 10235                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10236  0349  352F               	lslf	Load_Main@i,w
 10237  034A  3E4E               	addlw	(_Load+11)& (0+255)
 10238  034B  0086               	movwf	6
 10239  034C  3001               	movlw	1	; select bank2/3
 10240  034D  0087               	movwf	7
 10241  034E  3F40               	moviw [0]fsr1
 10242  034F  00A9               	movwf	??_Load_Main
 10243  0350  3F41               	moviw [1]fsr1
 10244  0351  00AA               	movwf	??_Load_Main+1
 10245  0352  0829               	movf	??_Load_Main,w
 10246  0353  0022               	movlb	2	; select bank2
 10247  0354  07C8               	addwf	(_Load^(0+256)+5),f
 10248  0355  0020               	movlb	0	; select bank0
 10249  0356  082A               	movf	??_Load_Main+1,w
 10250  0357  0022               	movlb	2	; select bank2
 10251  0358  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10252                           
 10253                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10254  0359  0020               	movlb	0	; select bank0
 10255  035A  352F               	lslf	Load_Main@i,w
 10256  035B  3E58               	addlw	(_Load+21)& (0+255)
 10257  035C  0086               	movwf	6
 10258  035D  3001               	movlw	1	; select bank2/3
 10259  035E  0087               	movwf	7
 10260  035F  3F40               	moviw [0]fsr1
 10261  0360  00A9               	movwf	??_Load_Main
 10262  0361  3F41               	moviw [1]fsr1
 10263  0362  00AA               	movwf	??_Load_Main+1
 10264  0363  0829               	movf	??_Load_Main,w
 10265  0364  0022               	movlb	2	; select bank2
 10266  0365  07CA               	addwf	(_Load^(0+256)+7),f
 10267  0366  0020               	movlb	0	; select bank0
 10268  0367  082A               	movf	??_Load_Main+1,w
 10269  0368  0022               	movlb	2	; select bank2
 10270  0369  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10271  036A  3001               	movlw	1
 10272  036B  0020               	movlb	0	; select bank0
 10273  036C  00A9               	movwf	??_Load_Main
 10274  036D  0829               	movf	??_Load_Main,w
 10275  036E  07AF               	addwf	Load_Main@i,f
 10276  036F  3004               	movlw	4
 10277  0370  022F               	subwf	Load_Main@i,w
 10278  0371  1C03               	skipc
 10279  0372  2B49               	goto	l7712
 10280  0373                     l7718:	
 10281                           
 10282                           ;OverLoad_B1.c: 66: }
 10283                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10284  0373  3002               	movlw	2
 10285  0374  0022               	movlb	2	; select bank2
 10286  0375                     u7685:	
 10287  0375  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10288  0376  0CC8               	rrf	(_Load^(0+256)+5),f
 10289  0377  0B89               	decfsz	9,f
 10290  0378  2B75               	goto	u7685
 10291                           
 10292                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10293  0379  3002               	movlw	2
 10294  037A                     u7695:	
 10295  037A  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10296  037B  0CCA               	rrf	(_Load^(0+256)+7),f
 10297  037C  0B89               	decfsz	9,f
 10298  037D  2B7A               	goto	u7695
 10299                           
 10300                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10301  037E  319F  2706  3182   	fcall	_setLoad_AH_AL_Restore
 10302                           
 10303                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10304  0381  0022               	movlb	2	; select bank2
 10305  0382  0849               	movf	((_Load+1)^(0+256)+5),w
 10306  0383  024B               	subwf	((_Load+1)^(0+256)+7),w
 10307  0384  1D03               	skipz
 10308  0385  2B88               	goto	u7705
 10309  0386  0848               	movf	(_Load^(0+256)+5),w
 10310  0387  024A               	subwf	(_Load^(0+256)+7),w
 10311  0388                     u7705:	
 10312  0388  1803               	skipnc
 10313  0389  0008               	return
 10314                           
 10315                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10316  038A  3005               	movlw	5
 10317  038B  3E43               	addlw	_Load& (0+255)
 10318  038C  0086               	movwf	6
 10319  038D  3001               	movlw	1	; select bank2/3
 10320  038E  0087               	movwf	7
 10321  038F  094A               	comf	(_Load^(0+256)+7),w
 10322  0390  0020               	movlb	0	; select bank0
 10323  0391  00A9               	movwf	??_Load_Main
 10324  0392  0022               	movlb	2	; select bank2
 10325  0393  094B               	comf	((_Load+1)^(0+256)+7),w
 10326  0394  0020               	movlb	0	; select bank0
 10327  0395  00AA               	movwf	??_Load_Main+1
 10328  0396  0AA9               	incf	??_Load_Main,f
 10329  0397  1903               	skipnz
 10330  0398  0AAA               	incf	??_Load_Main+1,f
 10331  0399  3F40               	moviw [0]fsr1
 10332  039A  0729               	addwf	??_Load_Main,w
 10333  039B  0022               	movlb	2	; select bank2
 10334  039C  00E2               	movwf	(_Load^(0+256)+31)
 10335  039D  3F41               	moviw [1]fsr1
 10336  039E  0020               	movlb	0	; select bank0
 10337  039F  3D2A               	addwfc	??_Load_Main+1,w
 10338  03A0  0022               	movlb	2	; select bank2
 10339  03A1  00E3               	movwf	(_Load^(0+256)+32)
 10340                           
 10341                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10342  03A2  01C8               	clrf	(_Load^(0+256)+5)
 10343  03A3  01C9               	clrf	((_Load+1)^(0+256)+5)
 10344                           
 10345                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10346  03A4  01CA               	clrf	(_Load^(0+256)+7)
 10347  03A5  01CB               	clrf	((_Load+1)^(0+256)+7)
 10348                           
 10349                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10350  03A6  319D  257D  3182   	fcall	_getMain_Lights_Count
 10351  03A9  0020               	movlb	0	; select bank0
 10352  03AA  00A9               	movwf	??_Load_Main
 10353  03AB  0829               	movf	??_Load_Main,w
 10354  03AC  0022               	movlb	2	; select bank2
 10355  03AD  00EE               	movwf	(_Load^(0+256)+43)
 10356                           
 10357                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10358  03AE  1DC3               	btfss	_Load^(0+256),3
 10359  03AF  2BD5               	goto	l7750
 10360                           
 10361                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10362  03B0  3002               	movlw	2
 10363  03B1  026C               	subwf	(_Load^(0+256)+41),w
 10364  03B2  1803               	skipnc
 10365  03B3  2BD5               	goto	l7750
 10366                           
 10367                           ;OverLoad_B1.c: 79: Load.Count++;
 10368  03B4  3001               	movlw	1
 10369  03B5  0020               	movlb	0	; select bank0
 10370  03B6  00A9               	movwf	??_Load_Main
 10371  03B7  0829               	movf	??_Load_Main,w
 10372  03B8  0022               	movlb	2	; select bank2
 10373  03B9  07EC               	addwf	(_Load^(0+256)+41),f
 10374                           
 10375                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10376  03BA  086C               	movf	(_Load^(0+256)+41),w
 10377  03BB  3A01               	xorlw	1
 10378  03BC  1D03               	skipz
 10379  03BD  2BC2               	goto	l7742
 10380                           
 10381                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*57);
 10382  03BE  3074               	movlw	116
 10383  03BF  00E8               	movwf	(_Load^(0+256)+37)
 10384  03C0  3004               	movlw	4
 10385  03C1  2BCD               	goto	L6
 10386  03C2                     l7742:	
 10387                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10388                           
 10389  03C2  086C               	movf	(_Load^(0+256)+41),w
 10390  03C3  3A02               	xorlw	2
 10391  03C4  1D03               	skipz
 10392  03C5  2BD5               	goto	l7750
 10393                           
 10394                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10395  03C6  086E               	movf	(_Load^(0+256)+43),w
 10396  03C7  3A01               	xorlw	1
 10397  03C8  1D03               	skipz
 10398  03C9  2BCF               	goto	l7748
 10399                           
 10400                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*57);
 10401  03CA  3066               	movlw	102
 10402  03CB  00E8               	movwf	(_Load^(0+256)+37)
 10403  03CC  3000               	movlw	0
 10404  03CD                     L6:	
 10405  03CD  00E9               	movwf	(_Load^(0+256)+38)
 10406                           
 10407                           ;OverLoad_B1.c: 85: } else {
 10408  03CE  2BD5               	goto	l7750
 10409  03CF                     l7748:	
 10410                           
 10411                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10412  03CF  084C               	movf	(_Load^(0+256)+9),w
 10413  03D0  3E66               	addlw	102
 10414  03D1  00E8               	movwf	(_Load^(0+256)+37)
 10415  03D2  3000               	movlw	0
 10416  03D3  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10417  03D4  00E9               	movwf	((_Load+1)^(0+256)+37)
 10418  03D5                     l7750:	
 10419                           
 10420                           ;OverLoad_B1.c: 87: }
 10421                           ;OverLoad_B1.c: 88: }
 10422                           ;OverLoad_B1.c: 89: }
 10423                           ;OverLoad_B1.c: 90: }
 10424                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10425  03D5  0869               	movf	((_Load+1)^(0+256)+37),w
 10426  03D6  0263               	subwf	((_Load+1)^(0+256)+31),w
 10427  03D7  1D03               	skipz
 10428  03D8  2BDB               	goto	u7765
 10429  03D9  0868               	movf	(_Load^(0+256)+37),w
 10430  03DA  0262               	subwf	(_Load^(0+256)+31),w
 10431  03DB                     u7765:	
 10432  03DB  1C03               	skipc
 10433  03DC  2BEA               	goto	l7760
 10434                           
 10435                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10436  03DD  3001               	movlw	1
 10437  03DE  0020               	movlb	0	; select bank0
 10438  03DF  00A9               	movwf	??_Load_Main
 10439  03E0  0829               	movf	??_Load_Main,w
 10440  03E1  0022               	movlb	2	; select bank2
 10441  03E2  07ED               	addwf	(_Load^(0+256)+42),f
 10442                           
 10443                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10444  03E3  3003               	movlw	3
 10445  03E4  026D               	subwf	(_Load^(0+256)+42),w
 10446  03E5  1C03               	skipc
 10447  03E6  0008               	return
 10448                           
 10449                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10450  03E7  01ED               	clrf	(_Load^(0+256)+42)
 10451                           
 10452                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10453  03E8  16C3               	bsf	_Load^(0+256),5
 10454                           
 10455                           ;OverLoad_B1.c: 109: }
 10456                           ;OverLoad_B1.c: 110: } else {
 10457  03E9  0008               	return
 10458  03EA                     l7760:	
 10459                           
 10460                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10461  03EA  01ED               	clrf	(_Load^(0+256)+42)
 10462                           
 10463                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10464  03EB  1DC3               	btfss	_Load^(0+256),3
 10465  03EC  0008               	return
 10466                           
 10467                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10468  03ED  1BC3               	btfsc	_Load^(0+256),7
 10469  03EE  0008               	return
 10470                           
 10471                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10472  03EF  3001               	movlw	1
 10473  03F0  0020               	movlb	0	; select bank0
 10474  03F1  00A9               	movwf	??_Load_Main
 10475  03F2  0829               	movf	??_Load_Main,w
 10476  03F3  0022               	movlb	2	; select bank2
 10477  03F4  07EF               	addwf	(_Load^(0+256)+44),f
 10478                           
 10479                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10480  03F5  3003               	movlw	3
 10481  03F6  026F               	subwf	(_Load^(0+256)+44),w
 10482  03F7  1C03               	skipc
 10483  03F8  0008               	return
 10484                           
 10485                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10486  03F9  01EF               	clrf	(_Load^(0+256)+44)
 10487                           
 10488                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10489  03FA  17C3               	bsf	_Load^(0+256),7
 10490                           
 10491                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10492  03FB  11C3               	bcf	_Load^(0+256),3
 10493                           
 10494                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10495  03FC  01EC               	clrf	(_Load^(0+256)+41)
 10496                           
 10497                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10498  03FD  0863               	movf	((_Load+1)^(0+256)+31),w
 10499  03FE  01CD               	clrf	((_Load+1)^(0+256)+9)
 10500  03FF  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10501  0400  0862               	movf	(_Load^(0+256)+31),w
 10502  0401  01CC               	clrf	(_Load^(0+256)+9)
 10503  0402  07CC               	addwf	(_Load^(0+256)+9),f
 10504                           
 10505                           ;OverLoad_B1.c: 130: }
 10506                           ;OverLoad_B1.c: 131: }
 10507                           ;OverLoad_B1.c: 132: }
 10508                           ;OverLoad_B1.c: 133: }
 10509                           ;OverLoad_B1.c: 134: }
 10510                           ;OverLoad_B1.c: 135: }
 10511                           ;OverLoad_B1.c: 136: } else {
 10512  0403  0008               	return
 10513  0404                     l1545:	
 10514                           
 10515                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10516  0404  1643               	bsf	_Load^(0+256),4
 10517                           
 10518                           ;OverLoad_B1.c: 138: }
 10519                           ;OverLoad_B1.c: 139: } else {
 10520  0405  0008               	return
 10521  0406                     l1544:	
 10522                           
 10523                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10524  0406  1D43               	btfss	_Load^(0+256),2
 10525  0407  2C24               	goto	l7808
 10526  0408  0020               	movlb	0	; select bank0
 10527  0409  082E               	movf	Load_Main@error,w
 10528  040A  3A03               	xorlw	3
 10529  040B  1903               	skipnz
 10530  040C  2C24               	goto	l7808
 10531                           
 10532                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10533  040D  0022               	movlb	2	; select bank2
 10534  040E  1143               	bcf	_Load^(0+256),2
 10535                           
 10536                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10537  040F  01C4               	clrf	(_Load^(0+256)+1)
 10538  0410  01C5               	clrf	((_Load+1)^(0+256)+1)
 10539                           
 10540                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10541  0411  1243               	bcf	_Load^(0+256),4
 10542                           
 10543                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10544  0412  319F  2706  3182   	fcall	_setLoad_AH_AL_Restore
 10545                           
 10546                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10547  0415  0022               	movlb	2	; select bank2
 10548  0416  01EC               	clrf	(_Load^(0+256)+41)
 10549                           
 10550                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10551  0417  01ED               	clrf	(_Load^(0+256)+42)
 10552                           
 10553                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10554  0418  01EF               	clrf	(_Load^(0+256)+44)
 10555                           
 10556                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10557  0419  01C8               	clrf	(_Load^(0+256)+5)
 10558  041A  01C9               	clrf	((_Load+1)^(0+256)+5)
 10559                           
 10560                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10561  041B  01CA               	clrf	(_Load^(0+256)+7)
 10562  041C  01CB               	clrf	((_Load+1)^(0+256)+7)
 10563                           
 10564                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10565  041D  01E2               	clrf	(_Load^(0+256)+31)
 10566  041E  01E3               	clrf	((_Load+1)^(0+256)+31)
 10567                           
 10568                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10569  041F  01E8               	clrf	(_Load^(0+256)+37)
 10570  0420  01E9               	clrf	((_Load+1)^(0+256)+37)
 10571                           
 10572                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10573  0421  01EE               	clrf	(_Load^(0+256)+43)
 10574                           
 10575                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10576  0422  11C3               	bcf	_Load^(0+256),3
 10577                           
 10578                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10579  0423  17C3               	bsf	_Load^(0+256),7
 10580  0424                     l7808:	
 10581                           
 10582                           ;OverLoad_B1.c: 164: }
 10583                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10584  0424  0022               	movlb	2	; select bank2
 10585  0425  1EC3               	btfss	_Load^(0+256),5
 10586  0426  0008               	return
 10587                           
 10588                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10589  0427  3001               	movlw	1
 10590  0428  07C6               	addwf	(_Load^(0+256)+3),f
 10591  0429  3000               	movlw	0
 10592  042A  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10593                           
 10594                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10595  042B  3003               	movlw	3
 10596  042C  0247               	subwf	((_Load+1)^(0+256)+3),w
 10597  042D  30E8               	movlw	232
 10598  042E  1903               	skipnz
 10599  042F  0246               	subwf	(_Load^(0+256)+3),w
 10600  0430  1C03               	skipc
 10601  0431  0008               	return
 10602                           
 10603                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10604  0432  01C6               	clrf	(_Load^(0+256)+3)
 10605  0433  01C7               	clrf	((_Load+1)^(0+256)+3)
 10606                           
 10607                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10608  0434  12C3               	bcf	_Load^(0+256),5
 10609                           
 10610                           ;OverLoad_B1.c: 176: }
 10611                           ;OverLoad_B1.c: 177: }
 10612                           ;OverLoad_B1.c: 178: }
 10613                           ;OverLoad_B1.c: 179: } else {
 10614  0435  0008               	return
 10615  0436                     l1540:	
 10616                           
 10617                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10618  0436  0021               	movlb	1	; select bank1
 10619  0437  1C20               	btfss	_myMain^(0+128),0
 10620  0438  0008               	return
 10621                           
 10622                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10623  0439  0022               	movlb	2	; select bank2
 10624  043A  1443               	bsf	_Load^(0+256),0
 10625  043B  0008               	return
 10626  043C                     __end_of_Load_Main:	
 10627                           
 10628                           	psect	text54
 10629  1D22                     __ptext54:	
 10630 ;; *************** function _getMain_LoadOK *****************
 10631 ;; Defined at:
 10632 ;;		line 447 in file "../src/Main_B1.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;		None
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;  ok              1    2[BANK0 ] unsigned char 
 10637 ;; Return value:  Size  Location     Type
 10638 ;;                  1    wreg      unsigned char 
 10639 ;; Registers used:
 10640 ;;		wreg, status,2, pclath, cstack
 10641 ;; Tracked objects:
 10642 ;;		On entry : 0/0
 10643 ;;		On exit  : 0/0
 10644 ;;		Unchanged: 0/0
 10645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;Total ram usage:        2 bytes
 10651 ;; Hardware stack levels used:    1
 10652 ;; Hardware stack levels required when called:    6
 10653 ;; This function calls:
 10654 ;;		_getDimmer_LoadOK
 10655 ;; This function is called by:
 10656 ;;		_Load_Main
 10657 ;; This function uses a non-reentrant model
 10658 ;;
 10659                           
 10660                           
 10661                           ;psect for function _getMain_LoadOK
 10662  1D22                     _getMain_LoadOK:	
 10663                           
 10664                           ;Main_B1.c: 448: char ok = 0;
 10665                           
 10666                           ;incstack = 0
 10667                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10668  1D22  0020               	movlb	0	; select bank0
 10669  1D23  01A2               	clrf	getMain_LoadOK@ok
 10670                           
 10671                           ;Main_B1.c: 454: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10672  1D24  319C  2447         	fcall	_getDimmer_LoadOK
 10673  1D26  3A01               	xorlw	1
 10674  1D27  3000               	movlw	0
 10675  1D28  1903               	skipnz
 10676  1D29  3001               	movlw	1
 10677  1D2A  0020               	movlb	0	; select bank0
 10678  1D2B  00A1               	movwf	??_getMain_LoadOK
 10679  1D2C  0821               	movf	??_getMain_LoadOK,w
 10680  1D2D  00A2               	movwf	getMain_LoadOK@ok
 10681                           
 10682                           ;Main_B1.c: 456: return ok;
 10683  1D2E  0822               	movf	getMain_LoadOK@ok,w
 10684  1D2F  0008               	return
 10685  1D30                     __end_of_getMain_LoadOK:	
 10686                           
 10687                           	psect	text55
 10688  1C47                     __ptext55:	
 10689 ;; *************** function _getDimmer_LoadOK *****************
 10690 ;; Defined at:
 10691 ;;		line 615 in file "../src/Dimmer_B1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  status          1    0[BANK0 ] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      unsigned char 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        1 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    5
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_getMain_LoadOK
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _getDimmer_LoadOK
 10721  1C47                     _getDimmer_LoadOK:	
 10722                           
 10723                           ;Dimmer_B1.c: 616: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10727  1C47  3000               	movlw	0
 10728  1C48  0022               	movlb	2	; select bank2
 10729  1C49  18BE               	btfsc	_Dimmer^(0+256),1
 10730  1C4A  3001               	movlw	1
 10731  1C4B  0020               	movlb	0	; select bank0
 10732  1C4C  00A0               	movwf	getDimmer_LoadOK@status
 10733                           
 10734                           ;Dimmer_B1.c: 617: return status;
 10735  1C4D  0820               	movf	getDimmer_LoadOK@status,w
 10736  1C4E  0008               	return
 10737  1C4F                     __end_of_getDimmer_LoadOK:	
 10738                           
 10739                           	psect	text56
 10740  1D7D                     __ptext56:	
 10741 ;; *************** function _getMain_Lights_Count *****************
 10742 ;; Defined at:
 10743 ;;		line 417 in file "../src/Main_B1.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;		None
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;  status1         1    3[BANK0 ] unsigned char 
 10748 ;;  status3         1    2[BANK0 ] unsigned char 
 10749 ;;  status2         1    1[BANK0 ] unsigned char 
 10750 ;;  count           1    0[BANK0 ] unsigned char 
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      unsigned char 
 10753 ;; Registers used:
 10754 ;;		wreg, status,2, status,0
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;Total ram usage:        4 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    5
 10767 ;; This function calls:
 10768 ;;		Nothing
 10769 ;; This function is called by:
 10770 ;;		_Load_Main
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function _getMain_Lights_Count
 10776  1D7D                     _getMain_Lights_Count:	
 10777                           
 10778                           ;Main_B1.c: 418: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10779                           
 10780                           ;incstack = 0
 10781                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10782  1D7D  0020               	movlb	0	; select bank0
 10783  1D7E  01A3               	clrf	getMain_Lights_Count@status1
 10784  1D7F  01A1               	clrf	getMain_Lights_Count@status2
 10785  1D80  01A2               	clrf	getMain_Lights_Count@status3
 10786  1D81  01A0               	clrf	getMain_Lights_Count@count
 10787                           
 10788                           ;Main_B1.c: 422: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10789  1D82  3000               	movlw	0
 10790  1D83  0023               	movlb	3	; select bank3
 10791  1D84  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10792  1D85  3001               	movlw	1
 10793  1D86  0020               	movlb	0	; select bank0
 10794  1D87  00A3               	movwf	getMain_Lights_Count@status1
 10795                           
 10796                           ;Main_B1.c: 443: return count = (status1 + status2 + status3);
 10797  1D88  0823               	movf	getMain_Lights_Count@status1,w
 10798  1D89  0721               	addwf	getMain_Lights_Count@status2,w
 10799  1D8A  0722               	addwf	getMain_Lights_Count@status3,w
 10800  1D8B  00A0               	movwf	getMain_Lights_Count@count
 10801  1D8C  0008               	return
 10802  1D8D                     __end_of_getMain_Lights_Count:	
 10803                           
 10804                           	psect	text57
 10805  1C6B                     __ptext57:	
 10806 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10807 ;; Defined at:
 10808 ;;		line 506 in file "../src/Dimmer_B1.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;		None
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10813 ;; Return value:  Size  Location     Type
 10814 ;;                  1    wreg      unsigned char 
 10815 ;; Registers used:
 10816 ;;		wreg, status,2
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;Total ram usage:        1 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    5
 10829 ;; This function calls:
 10830 ;;		Nothing
 10831 ;; This function is called by:
 10832 ;;		_setDimmerLights_SwOn
 10833 ;;		_setDimmerLights_AdjControl
 10834 ;;		_Load_Main
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           
 10839                           ;psect for function _getAll_DimmerLights_AdjGO
 10840  1C6B                     _getAll_DimmerLights_AdjGO:	
 10841                           
 10842                           ;Dimmer_B1.c: 507: char adjgo = 0;
 10843                           
 10844                           ;incstack = 0
 10845                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10846  1C6B  0020               	movlb	0	; select bank0
 10847  1C6C  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10848                           
 10849                           ;Dimmer_B1.c: 515: adjgo = DimmerLights1.AdjGo == 1;
 10850  1C6D  3000               	movlw	0
 10851  1C6E  0023               	movlb	3	; select bank3
 10852  1C6F  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10853  1C70  3001               	movlw	1
 10854  1C71  0020               	movlb	0	; select bank0
 10855  1C72  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10856                           
 10857                           ;Dimmer_B1.c: 517: return adjgo;
 10858  1C73  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10859  1C74  0008               	return
 10860  1C75                     __end_of_getAll_DimmerLights_AdjGO:	
 10861                           
 10862                           	psect	text58
 10863  1C21                     __ptext58:	
 10864 ;; *************** function _Load_Initialization *****************
 10865 ;; Defined at:
 10866 ;;		line 9 in file "../src/OverLoad_B1.c"
 10867 ;; Parameters:    Size  Location     Type
 10868 ;;		None
 10869 ;; Auto vars:     Size  Location     Type
 10870 ;;		None
 10871 ;; Return value:  Size  Location     Type
 10872 ;;		None               void
 10873 ;; Registers used:
 10874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;Total ram usage:        0 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    6
 10887 ;; This function calls:
 10888 ;;		_setLoad_AH_AL_Restore
 10889 ;; This function is called by:
 10890 ;;		_main
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           
 10895                           ;psect for function _Load_Initialization
 10896  1C21                     _Load_Initialization:	
 10897                           
 10898                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10899                           
 10900                           ;incstack = 0
 10901                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10902  1C21  0022               	movlb	2	; select bank2
 10903  1C22  17C3               	bsf	_Load^(0+256),7
 10904                           
 10905                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10906  1C23  319F  2706         	fcall	_setLoad_AH_AL_Restore
 10907  1C25  0008               	return
 10908  1C26                     __end_of_Load_Initialization:	
 10909                           
 10910                           	psect	text59
 10911  1F06                     __ptext59:	
 10912 ;; *************** function _setLoad_AH_AL_Restore *****************
 10913 ;; Defined at:
 10914 ;;		line 207 in file "../src/OverLoad_B1.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;		None
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;  i               1    1[BANK0 ] unsigned char 
 10919 ;; Return value:  Size  Location     Type
 10920 ;;		None               void
 10921 ;; Registers used:
 10922 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10923 ;; Tracked objects:
 10924 ;;		On entry : 0/0
 10925 ;;		On exit  : 0/0
 10926 ;;		Unchanged: 0/0
 10927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;Total ram usage:        2 bytes
 10933 ;; Hardware stack levels used:    1
 10934 ;; Hardware stack levels required when called:    5
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_Load_Initialization
 10939 ;;		_Load_Main
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _setLoad_AH_AL_Restore
 10945  1F06                     _setLoad_AH_AL_Restore:	
 10946                           
 10947                           ;OverLoad_B1.c: 208: char i;
 10948                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 10949                           
 10950                           ;incstack = 0
 10951                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10952  1F06  0020               	movlb	0	; select bank0
 10953  1F07  01A1               	clrf	setLoad_AH_AL_Restore@i
 10954  1F08                     L7:	
 10955  1F08  3005               	movlw	5
 10956  1F09  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10957  1F0A  1803               	btfsc	3,0
 10958  1F0B  0008               	return
 10959                           
 10960                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 10961  1F0C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10962  1F0D  3E4E               	addlw	(_Load+11)& (0+255)
 10963  1F0E  0086               	movwf	6
 10964  1F0F  3001               	movlw	1	; select bank2/3
 10965  1F10  0087               	movwf	7
 10966  1F11  3000               	movlw	0
 10967  1F12  3FC0               	movwi [0]fsr1
 10968  1F13  3FC1               	movwi [1]fsr1
 10969                           
 10970                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 10971  1F14  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10972  1F15  3E58               	addlw	(_Load+21)& (0+255)
 10973  1F16  0086               	movwf	6
 10974  1F17  3001               	movlw	1	; select bank2/3
 10975  1F18  0087               	movwf	7
 10976  1F19  30FF               	movlw	255
 10977  1F1A  3FC0               	movwi [0]fsr1
 10978  1F1B  30FF               	movlw	255
 10979  1F1C  3FC1               	movwi [1]fsr1
 10980  1F1D  3001               	movlw	1
 10981  1F1E  00A0               	movwf	??_setLoad_AH_AL_Restore
 10982  1F1F  0820               	movf	??_setLoad_AH_AL_Restore,w
 10983  1F20  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10984  1F21  2F08               	goto	L7
 10985  1F22                     __end_of_setLoad_AH_AL_Restore:	
 10986                           
 10987                           	psect	text60
 10988  1C14                     __ptext60:	
 10989 ;; *************** function _LED_Main *****************
 10990 ;; Defined at:
 10991 ;;		line 47 in file "../src/LED_B1.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;		None               void
 10998 ;; Registers used:
 10999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    7
 11012 ;; This function calls:
 11013 ;;		_setLED_Main
 11014 ;; This function is called by:
 11015 ;;		_main
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           
 11020                           ;psect for function _LED_Main
 11021  1C14                     _LED_Main:	
 11022                           
 11023                           ;LED_B1.c: 62: setLED_Main(99);
 11024                           
 11025                           ;incstack = 0
 11026                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11027  1C14  3063               	movlw	99
 11028  1C15  3192  2281         	fcall	_setLED_Main
 11029  1C17  0008               	return
 11030  1C18                     __end_of_LED_Main:	
 11031                           
 11032                           	psect	text61
 11033  1281                     __ptext61:	
 11034 ;; *************** function _setLED_Main *****************
 11035 ;; Defined at:
 11036 ;;		line 221 in file "../src/LED_B1.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  led             1    wreg     unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  led             1    4[BANK0 ] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;		None               void
 11043 ;; Registers used:
 11044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;Total ram usage:        3 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    6
 11057 ;; This function calls:
 11058 ;;		_LedPointSelect
 11059 ;; This function is called by:
 11060 ;;		_LED_Main
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function _setLED_Main
 11066  1281                     _setLED_Main:	
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11070                           ;setLED_Main@led stored from wreg
 11071  1281  0020               	movlb	0	; select bank0
 11072  1282  00A4               	movwf	setLED_Main@led
 11073                           
 11074                           ;LED_B1.c: 222: LedPointSelect(led);
 11075  1283  0824               	movf	setLED_Main@led,w
 11076  1284  319C  2496  3192   	fcall	_LedPointSelect
 11077                           
 11078                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11079  1287  087A               	movf	_LED,w
 11080  1288  0086               	movwf	6
 11081  1289  3001               	movlw	1	; select bank2/3
 11082  128A  0087               	movwf	7
 11083  128B  1C81               	btfss	1,1
 11084  128C  0008               	return
 11085                           
 11086                           ;LED_B1.c: 224: LED->Time++;
 11087  128D  0A7A               	incf	_LED,w
 11088  128E  0086               	movwf	6
 11089  128F  3001               	movlw	1	; select bank2/3
 11090  1290  0087               	movwf	7
 11091  1291  3001               	movlw	1
 11092  1292  0781               	addwf	1,f
 11093  1293  3141               	addfsr 1,1
 11094  1294  1803               	skipnc
 11095  1295  0A81               	incf	1,f
 11096                           
 11097                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11098  1296  0A7A               	incf	_LED,w
 11099  1297  0086               	movwf	6
 11100  1298  3001               	movlw	1	; select bank2/3
 11101  1299  0087               	movwf	7
 11102  129A  3F40               	moviw [0]fsr1
 11103  129B  0020               	movlb	0	; select bank0
 11104  129C  00A2               	movwf	??_setLED_Main
 11105  129D  3F41               	moviw [1]fsr1
 11106  129E  00A3               	movwf	??_setLED_Main+1
 11107  129F  3000               	movlw	0
 11108  12A0  0223               	subwf	??_setLED_Main+1,w
 11109  12A1  3032               	movlw	50
 11110  12A2  1903               	skipnz
 11111  12A3  0222               	subwf	??_setLED_Main,w
 11112  12A4  1C03               	skipc
 11113  12A5  0008               	return
 11114                           
 11115                           ;LED_B1.c: 226: LED->Time = 0;
 11116  12A6  0A7A               	incf	_LED,w
 11117  12A7  0086               	movwf	6
 11118  12A8  3001               	movlw	1	; select bank2/3
 11119  12A9  0087               	movwf	7
 11120  12AA  3000               	movlw	0
 11121  12AB  3FC0               	movwi [0]fsr1
 11122  12AC  3FC1               	movwi [1]fsr1
 11123                           
 11124                           ;LED_B1.c: 243: if (led == 99) {
 11125  12AD  0824               	movf	setLED_Main@led,w
 11126  12AE  3A63               	xorlw	99
 11127  12AF  1D03               	skipz
 11128  12B0  0008               	return
 11129                           
 11130                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11131  12B1  3020               	movlw	32
 11132  12B2  068D               	xorwf	13,f
 11133  12B3  0008               	return
 11134  12B4                     __end_of_setLED_Main:	
 11135                           
 11136                           	psect	text62
 11137  1C10                     __ptext62:	
 11138 ;; *************** function _LED_Initialization *****************
 11139 ;; Defined at:
 11140 ;;		line 31 in file "../src/LED_B1.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;		None
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;		None
 11145 ;; Return value:  Size  Location     Type
 11146 ;;		None               void
 11147 ;; Registers used:
 11148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;Total ram usage:        0 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    8
 11161 ;; This function calls:
 11162 ;;		_setLED_Initialization
 11163 ;; This function is called by:
 11164 ;;		_main
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _LED_Initialization
 11170  1C10                     _LED_Initialization:	
 11171                           
 11172                           ;LED_B1.c: 42: setLED_Initialization(99);
 11173                           
 11174                           ;incstack = 0
 11175                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11176  1C10  3063               	movlw	99
 11177  1C11  319D  259D         	fcall	_setLED_Initialization
 11178  1C13  0008               	return
 11179  1C14                     __end_of_LED_Initialization:	
 11180                           
 11181                           	psect	text63
 11182  1D9D                     __ptext63:	
 11183 ;; *************** function _setLED_Initialization *****************
 11184 ;; Defined at:
 11185 ;;		line 69 in file "../src/LED_B1.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;  led             1    wreg     unsigned char 
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;  led             1    4[BANK0 ] unsigned char 
 11190 ;; Return value:  Size  Location     Type
 11191 ;;		None               void
 11192 ;; Registers used:
 11193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;Total ram usage:        1 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; Hardware stack levels required when called:    7
 11206 ;; This function calls:
 11207 ;;		_LedPointSelect
 11208 ;;		_setLED
 11209 ;; This function is called by:
 11210 ;;		_LED_Initialization
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           
 11215                           ;psect for function _setLED_Initialization
 11216  1D9D                     _setLED_Initialization:	
 11217                           
 11218                           ;incstack = 0
 11219                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11220                           ;setLED_Initialization@led stored from wreg
 11221  1D9D  0020               	movlb	0	; select bank0
 11222  1D9E  00A4               	movwf	setLED_Initialization@led
 11223                           
 11224                           ;LED_B1.c: 70: LedPointSelect(led);
 11225  1D9F  0824               	movf	setLED_Initialization@led,w
 11226  1DA0  319C  2496  319D   	fcall	_LedPointSelect
 11227                           
 11228                           ;LED_B1.c: 71: LED->Enable = 1;
 11229  1DA3  087A               	movf	_LED,w
 11230  1DA4  0086               	movwf	6
 11231  1DA5  3001               	movlw	1	; select bank2/3
 11232  1DA6  0087               	movwf	7
 11233  1DA7  1401               	bsf	1,0
 11234                           
 11235                           ;LED_B1.c: 72: setLED(led, 0);
 11236  1DA8  0020               	movlb	0	; select bank0
 11237  1DA9  01A2               	clrf	setLED@command
 11238  1DAA  0824               	movf	setLED_Initialization@led,w
 11239  1DAB  3193  231D         	fcall	_setLED
 11240  1DAD  0008               	return
 11241  1DAE                     __end_of_setLED_Initialization:	
 11242                           
 11243                           	psect	text64
 11244  1353                     __ptext64:	
 11245 ;; *************** function _Flash_Memory_Main *****************
 11246 ;; Defined at:
 11247 ;;		line 912 in file "../src/MCU_B1.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;		None
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;		None
 11252 ;; Return value:  Size  Location     Type
 11253 ;;		None               void
 11254 ;; Registers used:
 11255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;Total ram usage:        1 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    8
 11268 ;; This function calls:
 11269 ;;		_Flash_Memory_Modify
 11270 ;;		_getMain_LightsStatus
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _Flash_Memory_Main
 11278  1353                     _Flash_Memory_Main:	
 11279                           
 11280                           ;MCU_B1.c: 913: if (Memory.Modify == 1) {
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11284  1353  0023               	movlb	3	; select bank3
 11285  1354  1C44               	btfss	(_Memory^(0+384)+36),0
 11286  1355  0008               	return
 11287                           
 11288                           ;MCU_B1.c: 914: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11289  1356  3191  2192  3193   	fcall	_getMain_LightsStatus
 11290  1359  3A00               	xorlw	0
 11291  135A  3000               	movlw	0
 11292  135B  1903               	skipnz
 11293  135C  3001               	movlw	1
 11294  135D  0020               	movlb	0	; select bank0
 11295  135E  00A9               	movwf	??_Flash_Memory_Main
 11296  135F  0DA9               	rlf	??_Flash_Memory_Main,f
 11297  1360  0023               	movlb	3	; select bank3
 11298  1361  0844               	movf	(_Memory^(0+384)+36),w
 11299  1362  0020               	movlb	0	; select bank0
 11300  1363  0629               	xorwf	??_Flash_Memory_Main,w
 11301  1364  39FD               	andlw	-3
 11302  1365  0629               	xorwf	??_Flash_Memory_Main,w
 11303  1366  0023               	movlb	3	; select bank3
 11304  1367  00C4               	movwf	(_Memory^(0+384)+36)
 11305                           
 11306                           ;MCU_B1.c: 915: if (Memory.GO == 1) {
 11307  1368  1CC4               	btfss	(_Memory^(0+384)+36),1
 11308  1369  2B83               	goto	l1181
 11309                           
 11310                           ;MCU_B1.c: 916: Memory.Runtime = 1;
 11311  136A  15C4               	bsf	(_Memory^(0+384)+36),3
 11312                           
 11313                           ;MCU_B1.c: 917: Memory.Time++;
 11314  136B  3001               	movlw	1
 11315  136C  07C2               	addwf	(_Memory^(0+384)+34),f
 11316  136D  3000               	movlw	0
 11317  136E  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11318                           
 11319                           ;MCU_B1.c: 918: if (Memory.Time == 25) {
 11320  136F  3022               	movlw	34
 11321  1370  3EA0               	addlw	_Memory& (0+255)
 11322  1371  0086               	movwf	6
 11323  1372  3001               	movlw	1	; select bank3/4
 11324  1373  0087               	movwf	7
 11325  1374  3F40               	moviw [0]fsr1
 11326  1375  3A19               	xorlw	25
 11327  1376  1D03               	skipz
 11328  1377  2B7A               	goto	u7345
 11329  1378  3F41               	moviw [1]fsr1
 11330  1379  3A00               	xorlw	0
 11331  137A                     u7345:	
 11332  137A  1D03               	skipz
 11333  137B  0008               	return
 11334                           
 11335                           ;MCU_B1.c: 919: Memory.Time = 0;
 11336  137C  01C2               	clrf	(_Memory^(0+384)+34)
 11337  137D  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11338                           
 11339                           ;MCU_B1.c: 920: Memory.Modify = 0;
 11340  137E  1044               	bcf	(_Memory^(0+384)+36),0
 11341                           
 11342                           ;MCU_B1.c: 921: Memory.GO = 0;
 11343  137F  10C4               	bcf	(_Memory^(0+384)+36),1
 11344                           
 11345                           ;MCU_B1.c: 922: Flash_Memory_Modify();
 11346  1380  3195  2549         	fcall	_Flash_Memory_Modify
 11347                           
 11348                           ;MCU_B1.c: 923: }
 11349                           ;MCU_B1.c: 924: } else {
 11350  1382  0008               	return
 11351  1383                     l1181:	
 11352                           
 11353                           ;MCU_B1.c: 925: if (Memory.Runtime == 1) {
 11354  1383  1DC4               	btfss	(_Memory^(0+384)+36),3
 11355  1384  0008               	return
 11356                           
 11357                           ;MCU_B1.c: 926: Memory.Runtime = 0;
 11358  1385  11C4               	bcf	(_Memory^(0+384)+36),3
 11359                           
 11360                           ;MCU_B1.c: 927: Memory.Time = 0;
 11361  1386  01C2               	clrf	(_Memory^(0+384)+34)
 11362  1387  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11363  1388  0008               	return
 11364  1389                     __end_of_Flash_Memory_Main:	
 11365                           
 11366                           	psect	text65
 11367  1549                     __ptext65:	
 11368 ;; *************** function _Flash_Memory_Modify *****************
 11369 ;; Defined at:
 11370 ;;		line 985 in file "../src/MCU_B1.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;  i               1    5[BANK0 ] unsigned char 
 11375 ;; Return value:  Size  Location     Type
 11376 ;;		None               void
 11377 ;; Registers used:
 11378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;Total ram usage:        2 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    7
 11391 ;; This function calls:
 11392 ;;		_Flash_Memory_Erasing
 11393 ;;		_Flash_Memory_Read
 11394 ;;		_Flash_Memory_Write
 11395 ;;		_setMemory_Data
 11396 ;; This function is called by:
 11397 ;;		_Flash_Memory_Main
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _Flash_Memory_Modify
 11403  1549                     _Flash_Memory_Modify:	
 11404                           
 11405                           ;MCU_B1.c: 986: char i = 0;
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11409  1549  0020               	movlb	0	; select bank0
 11410  154A  01A5               	clrf	Flash_Memory_Modify@i
 11411                           
 11412                           ;MCU_B1.c: 987: for (i = 0; i < 32; i++) {
 11413  154B  01A5               	clrf	Flash_Memory_Modify@i
 11414  154C  3020               	movlw	32
 11415  154D  0225               	subwf	Flash_Memory_Modify@i,w
 11416  154E  1803               	btfsc	3,0
 11417  154F  2D65               	goto	l7028
 11418  1550                     l7022:	
 11419                           
 11420                           ;MCU_B1.c: 988: Memory.Data[i] = Flash_Memory_Read(i);
 11421  1550  0825               	movf	Flash_Memory_Modify@i,w
 11422  1551  319E  26EC  3195   	fcall	_Flash_Memory_Read
 11423  1554  0020               	movlb	0	; select bank0
 11424  1555  00A4               	movwf	??_Flash_Memory_Modify
 11425  1556  0825               	movf	Flash_Memory_Modify@i,w
 11426  1557  3EA0               	addlw	_Memory& (0+255)
 11427  1558  0086               	movwf	6
 11428  1559  3001               	movlw	1	; select bank3/4
 11429  155A  0087               	movwf	7
 11430  155B  0824               	movf	??_Flash_Memory_Modify,w
 11431  155C  0081               	movwf	1
 11432  155D  3001               	movlw	1
 11433  155E  00A4               	movwf	??_Flash_Memory_Modify
 11434  155F  0824               	movf	??_Flash_Memory_Modify,w
 11435  1560  07A5               	addwf	Flash_Memory_Modify@i,f
 11436  1561  3020               	movlw	32
 11437  1562  0225               	subwf	Flash_Memory_Modify@i,w
 11438  1563  1C03               	skipc
 11439  1564  2D50               	goto	l7022
 11440  1565                     l7028:	
 11441                           
 11442                           ;MCU_B1.c: 989: }
 11443                           ;MCU_B1.c: 990: setMemory_Data(0, product->Data[12]);
 11444  1565  086E               	movf	_product,w
 11445  1566  0086               	movwf	6
 11446  1567  3002               	movlw	2	; select bank4/5
 11447  1568  0087               	movwf	7
 11448  1569  3002               	movlw	2	; select bank4/5
 11449  156A  3F4C               	moviw [12]fsr1
 11450  156B  00A0               	movwf	setMemory_Data@data
 11451  156C  3000               	movlw	0
 11452  156D  319C  24E5  3195   	fcall	_setMemory_Data
 11453                           
 11454                           ;MCU_B1.c: 991: setMemory_Data(1, product->Data[13]);
 11455  1570  0020               	movlb	0	; select bank0
 11456  1571  086E               	movf	_product,w
 11457  1572  0086               	movwf	6
 11458  1573  3002               	movlw	2	; select bank4/5
 11459  1574  0087               	movwf	7
 11460  1575  3002               	movlw	2	; select bank4/5
 11461  1576  3F4D               	moviw [13]fsr1
 11462  1577  00A0               	movwf	setMemory_Data@data
 11463  1578  3001               	movlw	1
 11464  1579  319C  24E5  3195   	fcall	_setMemory_Data
 11465                           
 11466                           ;MCU_B1.c: 992: setMemory_Data(2, product->Data[14]);
 11467  157C  0020               	movlb	0	; select bank0
 11468  157D  086E               	movf	_product,w
 11469  157E  0086               	movwf	6
 11470  157F  3002               	movlw	2	; select bank4/5
 11471  1580  0087               	movwf	7
 11472  1581  3002               	movlw	2	; select bank4/5
 11473  1582  3F4E               	moviw [14]fsr1
 11474  1583  00A0               	movwf	setMemory_Data@data
 11475  1584  3002               	movlw	2
 11476  1585  319C  24E5  3195   	fcall	_setMemory_Data
 11477                           
 11478                           ;MCU_B1.c: 998: if (Memory.LoopSave == 1) {
 11479  1588  0023               	movlb	3	; select bank3
 11480  1589  1D44               	btfss	(_Memory^(0+384)+36),2
 11481  158A  2D8F               	goto	l1204
 11482                           
 11483                           ;MCU_B1.c: 999: Memory.LoopSave = 0;
 11484  158B  1144               	bcf	(_Memory^(0+384)+36),2
 11485                           
 11486                           ;MCU_B1.c: 1000: myMain.FirstOpen = 0;
 11487  158C  0021               	movlb	1	; select bank1
 11488  158D  11A0               	bcf	_myMain^(0+128),3
 11489                           
 11490                           ;MCU_B1.c: 1001: myMain.First = 0;
 11491  158E  12A0               	bcf	_myMain^(0+128),5
 11492  158F                     l1204:	
 11493                           
 11494                           ;MCU_B1.c: 1003: }
 11495                           ;MCU_B1.c: 1004: GIE = 0;
 11496  158F  138B               	bcf	11,7	;volatile
 11497                           
 11498                           ;MCU_B1.c: 1005: Flash_Memory_Erasing();
 11499  1590  319C  24F1  3195   	fcall	_Flash_Memory_Erasing
 11500                           
 11501                           ;MCU_B1.c: 1006: Flash_Memory_Write();
 11502  1593  3191  21BD         	fcall	_Flash_Memory_Write
 11503                           
 11504                           ;MCU_B1.c: 1007: GIE = 1;
 11505  1595  178B               	bsf	11,7	;volatile
 11506  1596  0008               	return
 11507  1597                     __end_of_Flash_Memory_Modify:	
 11508                           
 11509                           	psect	text66
 11510  1CF1                     __ptext66:	
 11511 ;; *************** function _Flash_Memory_Erasing *****************
 11512 ;; Defined at:
 11513 ;;		line 974 in file "../src/MCU_B1.c"
 11514 ;; Parameters:    Size  Location     Type
 11515 ;;		None
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;		None
 11518 ;; Return value:  Size  Location     Type
 11519 ;;		None               void
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0, pclath, cstack
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;Total ram usage:        0 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    6
 11534 ;; This function calls:
 11535 ;;		_Flash_Memory_Unlock
 11536 ;; This function is called by:
 11537 ;;		_Flash_Memory_Modify
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           
 11542                           ;psect for function _Flash_Memory_Erasing
 11543  1CF1                     _Flash_Memory_Erasing:	
 11544                           
 11545                           ;MCU_B1.c: 975: CFGS = 0;
 11546                           
 11547                           ;incstack = 0
 11548                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11549  1CF1  0023               	movlb	3	; select bank3
 11550  1CF2  1315               	bcf	21,6	;volatile
 11551                           
 11552                           ;MCU_B1.c: 976: PMADRH = 0x30;
 11553  1CF3  3030               	movlw	48
 11554  1CF4  0092               	movwf	18	;volatile
 11555                           
 11556                           ;MCU_B1.c: 977: PMADRL = 0x00;
 11557  1CF5  0191               	clrf	17	;volatile
 11558                           
 11559                           ;MCU_B1.c: 978: FREE = 1;
 11560  1CF6  1615               	bsf	21,4	;volatile
 11561                           
 11562                           ;MCU_B1.c: 979: WREN = 1;
 11563  1CF7  1515               	bsf	21,2	;volatile
 11564                           
 11565                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 11566  1CF8  319C  2458         	fcall	_Flash_Memory_Unlock
 11567                           
 11568                           ;MCU_B1.c: 981: WREN = 0;
 11569  1CFA  0023               	movlb	3	; select bank3
 11570  1CFB  1115               	bcf	21,2	;volatile
 11571  1CFC  0008               	return
 11572  1CFD                     __end_of_Flash_Memory_Erasing:	
 11573                           
 11574                           	psect	text67
 11575  0611                     __ptext67:	
 11576 ;; *************** function _Flash_Memory_Initialization *****************
 11577 ;; Defined at:
 11578 ;;		line 871 in file "../src/MCU_B1.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;  i               1   67[BANK0 ] unsigned char 
 11583 ;; Return value:  Size  Location     Type
 11584 ;;		None               void
 11585 ;; Registers used:
 11586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;Total ram usage:        2 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    8
 11599 ;; This function calls:
 11600 ;;		_Flash_Memory_Read
 11601 ;;		_Flash_Memory_Write
 11602 ;;		_setMemory_Data
 11603 ;;		_setPercentValue
 11604 ;; This function is called by:
 11605 ;;		_main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function _Flash_Memory_Initialization
 11611  0611                     _Flash_Memory_Initialization:	
 11612                           
 11613                           ;MCU_B1.c: 872: char i = 0;
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11617  0611  0020               	movlb	0	; select bank0
 11618  0612  01E3               	clrf	Flash_Memory_Initialization@i
 11619                           
 11620                           ;MCU_B1.c: 873: if (Flash_Memory_Read(31) == 0xaa) {
 11621  0613  301F               	movlw	31
 11622  0614  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11623  0617  3AAA               	xorlw	170
 11624  0618  1D03               	skipz
 11625  0619  2E83               	goto	l7496
 11626                           
 11627                           ;MCU_B1.c: 874: product->Data[12] = Flash_Memory_Read(0);
 11628  061A  3000               	movlw	0
 11629  061B  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11630  061E  0020               	movlb	0	; select bank0
 11631  061F  00E2               	movwf	??_Flash_Memory_Initialization
 11632  0620  086E               	movf	_product,w
 11633  0621  3E0C               	addlw	12
 11634  0622  0086               	movwf	6
 11635  0623  3002               	movlw	2	; select bank4/5
 11636  0624  0087               	movwf	7
 11637  0625  0862               	movf	??_Flash_Memory_Initialization,w
 11638  0626  0081               	movwf	1
 11639                           
 11640                           ;MCU_B1.c: 875: product->Data[13] = Flash_Memory_Read(1);
 11641  0627  3001               	movlw	1
 11642  0628  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11643  062B  0020               	movlb	0	; select bank0
 11644  062C  00E2               	movwf	??_Flash_Memory_Initialization
 11645  062D  086E               	movf	_product,w
 11646  062E  3E0D               	addlw	13
 11647  062F  0086               	movwf	6
 11648  0630  3002               	movlw	2	; select bank4/5
 11649  0631  0087               	movwf	7
 11650  0632  0862               	movf	??_Flash_Memory_Initialization,w
 11651  0633  0081               	movwf	1
 11652                           
 11653                           ;MCU_B1.c: 876: product->Data[14] = Flash_Memory_Read(2);
 11654  0634  3002               	movlw	2
 11655  0635  319E  26EC  3186   	fcall	_Flash_Memory_Read
 11656  0638  0020               	movlb	0	; select bank0
 11657  0639  00E2               	movwf	??_Flash_Memory_Initialization
 11658  063A  086E               	movf	_product,w
 11659  063B  3E0E               	addlw	14
 11660  063C  0086               	movwf	6
 11661  063D  3002               	movlw	2	; select bank4/5
 11662  063E  0087               	movwf	7
 11663  063F  0862               	movf	??_Flash_Memory_Initialization,w
 11664  0640  0081               	movwf	1
 11665                           
 11666                           ;MCU_B1.c: 882: i = setPercentValue(((char)(90*0.8)));
 11667  0641  3048               	movlw	72
 11668  0642  318A  2243  3186   	fcall	_setPercentValue
 11669  0645  0020               	movlb	0	; select bank0
 11670  0646  00E2               	movwf	??_Flash_Memory_Initialization
 11671  0647  0862               	movf	??_Flash_Memory_Initialization,w
 11672  0648  00E3               	movwf	Flash_Memory_Initialization@i
 11673                           
 11674                           ;MCU_B1.c: 883: product->Data[21] = i;
 11675  0649  0863               	movf	Flash_Memory_Initialization@i,w
 11676  064A  00E2               	movwf	??_Flash_Memory_Initialization
 11677  064B  086E               	movf	_product,w
 11678  064C  3E15               	addlw	21
 11679  064D  0086               	movwf	6
 11680  064E  3002               	movlw	2	; select bank4/5
 11681  064F  0087               	movwf	7
 11682  0650  0862               	movf	??_Flash_Memory_Initialization,w
 11683  0651  0081               	movwf	1
 11684                           
 11685                           ;MCU_B1.c: 884: product->Data[22] = i;
 11686  0652  0863               	movf	Flash_Memory_Initialization@i,w
 11687  0653  00E2               	movwf	??_Flash_Memory_Initialization
 11688  0654  086E               	movf	_product,w
 11689  0655  3E16               	addlw	22
 11690  0656  0086               	movwf	6
 11691  0657  3002               	movlw	2	; select bank4/5
 11692  0658  0087               	movwf	7
 11693  0659  0862               	movf	??_Flash_Memory_Initialization,w
 11694  065A  0081               	movwf	1
 11695                           
 11696                           ;MCU_B1.c: 885: product->Data[23] = i;
 11697  065B  0863               	movf	Flash_Memory_Initialization@i,w
 11698  065C  00E2               	movwf	??_Flash_Memory_Initialization
 11699  065D  086E               	movf	_product,w
 11700  065E  3E17               	addlw	23
 11701  065F  0086               	movwf	6
 11702  0660  3002               	movlw	2	; select bank4/5
 11703  0661  0087               	movwf	7
 11704  0662  0862               	movf	??_Flash_Memory_Initialization,w
 11705  0663  0081               	movwf	1
 11706                           
 11707                           ;MCU_B1.c: 887: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11708  0664  086E               	movf	_product,w
 11709  0665  3E0C               	addlw	12
 11710  0666  0086               	movwf	6
 11711  0667  3002               	movlw	2	; select bank4/5
 11712  0668  0087               	movwf	7
 11713  0669  0801               	movf	1,w
 11714  066A  3AFF               	xorlw	255
 11715  066B  1D03               	skipz
 11716  066C  0008               	return
 11717  066D  086E               	movf	_product,w
 11718  066E  3E0D               	addlw	13
 11719  066F  0086               	movwf	6
 11720  0670  3002               	movlw	2	; select bank4/5
 11721  0671  0087               	movwf	7
 11722  0672  0801               	movf	1,w
 11723  0673  3AFF               	xorlw	255
 11724  0674  1D03               	skipz
 11725  0675  0008               	return
 11726  0676  086E               	movf	_product,w
 11727  0677  3E0E               	addlw	14
 11728  0678  0086               	movwf	6
 11729  0679  3002               	movlw	2	; select bank4/5
 11730  067A  0087               	movwf	7
 11731  067B  0801               	movf	1,w
 11732  067C  3AFF               	xorlw	255
 11733  067D  1D03               	skipz
 11734  067E  0008               	return
 11735                           
 11736                           ;MCU_B1.c: 888: myMain.FirstOpen = 1;
 11737  067F  0021               	movlb	1	; select bank1
 11738  0680  15A0               	bsf	_myMain^(0+128),3
 11739                           
 11740                           ;MCU_B1.c: 889: myMain.First = 1;
 11741  0681  16A0               	bsf	_myMain^(0+128),5
 11742                           
 11743                           ;MCU_B1.c: 890: }
 11744                           ;MCU_B1.c: 891: } else {
 11745  0682  0008               	return
 11746  0683                     l7496:	
 11747                           
 11748                           ;MCU_B1.c: 892: i = setPercentValue(((char)(90*0.8)));
 11749  0683  3048               	movlw	72
 11750  0684  318A  2243  3186   	fcall	_setPercentValue
 11751  0687  0020               	movlb	0	; select bank0
 11752  0688  00E2               	movwf	??_Flash_Memory_Initialization
 11753  0689  0862               	movf	??_Flash_Memory_Initialization,w
 11754  068A  00E3               	movwf	Flash_Memory_Initialization@i
 11755                           
 11756                           ;MCU_B1.c: 893: setMemory_Data(0, 0xff);
 11757  068B  30FF               	movlw	255
 11758  068C  00E2               	movwf	??_Flash_Memory_Initialization
 11759  068D  0862               	movf	??_Flash_Memory_Initialization,w
 11760  068E  00A0               	movwf	setMemory_Data@data
 11761  068F  3000               	movlw	0
 11762  0690  319C  24E5  3186   	fcall	_setMemory_Data
 11763                           
 11764                           ;MCU_B1.c: 894: setMemory_Data(1, 0xff);
 11765  0693  30FF               	movlw	255
 11766  0694  0020               	movlb	0	; select bank0
 11767  0695  00E2               	movwf	??_Flash_Memory_Initialization
 11768  0696  0862               	movf	??_Flash_Memory_Initialization,w
 11769  0697  00A0               	movwf	setMemory_Data@data
 11770  0698  3001               	movlw	1
 11771  0699  319C  24E5  3186   	fcall	_setMemory_Data
 11772                           
 11773                           ;MCU_B1.c: 895: setMemory_Data(2, 0xff);
 11774  069C  30FF               	movlw	255
 11775  069D  0020               	movlb	0	; select bank0
 11776  069E  00E2               	movwf	??_Flash_Memory_Initialization
 11777  069F  0862               	movf	??_Flash_Memory_Initialization,w
 11778  06A0  00A0               	movwf	setMemory_Data@data
 11779  06A1  3002               	movlw	2
 11780  06A2  319C  24E5  3186   	fcall	_setMemory_Data
 11781                           
 11782                           ;MCU_B1.c: 896: setMemory_Data(3, 0xff);
 11783  06A5  30FF               	movlw	255
 11784  06A6  0020               	movlb	0	; select bank0
 11785  06A7  00E2               	movwf	??_Flash_Memory_Initialization
 11786  06A8  0862               	movf	??_Flash_Memory_Initialization,w
 11787  06A9  00A0               	movwf	setMemory_Data@data
 11788  06AA  3003               	movlw	3
 11789  06AB  319C  24E5  3186   	fcall	_setMemory_Data
 11790                           
 11791                           ;MCU_B1.c: 897: setMemory_Data(4, 0xff);
 11792  06AE  30FF               	movlw	255
 11793  06AF  0020               	movlb	0	; select bank0
 11794  06B0  00E2               	movwf	??_Flash_Memory_Initialization
 11795  06B1  0862               	movf	??_Flash_Memory_Initialization,w
 11796  06B2  00A0               	movwf	setMemory_Data@data
 11797  06B3  3004               	movlw	4
 11798  06B4  319C  24E5  3186   	fcall	_setMemory_Data
 11799                           
 11800                           ;MCU_B1.c: 898: setMemory_Data(5, 0xff);
 11801  06B7  30FF               	movlw	255
 11802  06B8  0020               	movlb	0	; select bank0
 11803  06B9  00E2               	movwf	??_Flash_Memory_Initialization
 11804  06BA  0862               	movf	??_Flash_Memory_Initialization,w
 11805  06BB  00A0               	movwf	setMemory_Data@data
 11806  06BC  3005               	movlw	5
 11807  06BD  319C  24E5  3186   	fcall	_setMemory_Data
 11808                           
 11809                           ;MCU_B1.c: 899: setMemory_Data(31, 0xaa);
 11810  06C0  30AA               	movlw	170
 11811  06C1  0020               	movlb	0	; select bank0
 11812  06C2  00E2               	movwf	??_Flash_Memory_Initialization
 11813  06C3  0862               	movf	??_Flash_Memory_Initialization,w
 11814  06C4  00A0               	movwf	setMemory_Data@data
 11815  06C5  301F               	movlw	31
 11816  06C6  319C  24E5  3186   	fcall	_setMemory_Data
 11817                           
 11818                           ;MCU_B1.c: 900: product->Data[21] = i;
 11819  06C9  0020               	movlb	0	; select bank0
 11820  06CA  0863               	movf	Flash_Memory_Initialization@i,w
 11821  06CB  00E2               	movwf	??_Flash_Memory_Initialization
 11822  06CC  086E               	movf	_product,w
 11823  06CD  3E15               	addlw	21
 11824  06CE  0086               	movwf	6
 11825  06CF  3002               	movlw	2	; select bank4/5
 11826  06D0  0087               	movwf	7
 11827  06D1  0862               	movf	??_Flash_Memory_Initialization,w
 11828  06D2  0081               	movwf	1
 11829                           
 11830                           ;MCU_B1.c: 901: product->Data[22] = i;
 11831  06D3  0863               	movf	Flash_Memory_Initialization@i,w
 11832  06D4  00E2               	movwf	??_Flash_Memory_Initialization
 11833  06D5  086E               	movf	_product,w
 11834  06D6  3E16               	addlw	22
 11835  06D7  0086               	movwf	6
 11836  06D8  3002               	movlw	2	; select bank4/5
 11837  06D9  0087               	movwf	7
 11838  06DA  0862               	movf	??_Flash_Memory_Initialization,w
 11839  06DB  0081               	movwf	1
 11840                           
 11841                           ;MCU_B1.c: 902: product->Data[23] = i;
 11842  06DC  0863               	movf	Flash_Memory_Initialization@i,w
 11843  06DD  00E2               	movwf	??_Flash_Memory_Initialization
 11844  06DE  086E               	movf	_product,w
 11845  06DF  3E17               	addlw	23
 11846  06E0  0086               	movwf	6
 11847  06E1  3002               	movlw	2	; select bank4/5
 11848  06E2  0087               	movwf	7
 11849  06E3  0862               	movf	??_Flash_Memory_Initialization,w
 11850  06E4  0081               	movwf	1
 11851                           
 11852                           ;MCU_B1.c: 903: GIE = 0;
 11853  06E5  138B               	bcf	11,7	;volatile
 11854                           
 11855                           ;MCU_B1.c: 904: Flash_Memory_Write();
 11856  06E6  3191  21BD         	fcall	_Flash_Memory_Write
 11857                           
 11858                           ;MCU_B1.c: 905: GIE = 1;
 11859  06E8  178B               	bsf	11,7	;volatile
 11860                           
 11861                           ;MCU_B1.c: 906: myMain.FirstOpen = 1;
 11862  06E9  0021               	movlb	1	; select bank1
 11863  06EA  15A0               	bsf	_myMain^(0+128),3
 11864                           
 11865                           ;MCU_B1.c: 907: myMain.First = 1;
 11866  06EB  16A0               	bsf	_myMain^(0+128),5
 11867  06EC  0008               	return
 11868  06ED                     __end_of_Flash_Memory_Initialization:	
 11869                           
 11870                           	psect	text68
 11871  1CE5                     __ptext68:	
 11872 ;; *************** function _setMemory_Data *****************
 11873 ;; Defined at:
 11874 ;;		line 1022 in file "../src/MCU_B1.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;  address         1    wreg     unsigned char 
 11877 ;;  data            1    0[BANK0 ] unsigned char 
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;  address         1    2[BANK0 ] unsigned char 
 11880 ;; Return value:  Size  Location     Type
 11881 ;;		None               void
 11882 ;; Registers used:
 11883 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11884 ;; Tracked objects:
 11885 ;;		On entry : 0/0
 11886 ;;		On exit  : 0/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;Total ram usage:        3 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; Hardware stack levels required when called:    5
 11896 ;; This function calls:
 11897 ;;		Nothing
 11898 ;; This function is called by:
 11899 ;;		_Flash_Memory_Initialization
 11900 ;;		_Flash_Memory_Modify
 11901 ;; This function uses a non-reentrant model
 11902 ;;
 11903                           
 11904                           
 11905                           ;psect for function _setMemory_Data
 11906  1CE5                     _setMemory_Data:	
 11907                           
 11908                           ;incstack = 0
 11909                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11910                           ;setMemory_Data@address stored from wreg
 11911  1CE5  0020               	movlb	0	; select bank0
 11912  1CE6  00A2               	movwf	setMemory_Data@address
 11913                           
 11914                           ;MCU_B1.c: 1023: Memory.Data[address] = data;
 11915  1CE7  0820               	movf	setMemory_Data@data,w
 11916  1CE8  00A1               	movwf	??_setMemory_Data
 11917  1CE9  0822               	movf	setMemory_Data@address,w
 11918  1CEA  3EA0               	addlw	_Memory& (0+255)
 11919  1CEB  0086               	movwf	6
 11920  1CEC  3001               	movlw	1	; select bank3/4
 11921  1CED  0087               	movwf	7
 11922  1CEE  0821               	movf	??_setMemory_Data,w
 11923  1CEF  0081               	movwf	1
 11924  1CF0  0008               	return
 11925  1CF1                     __end_of_setMemory_Data:	
 11926                           
 11927                           	psect	text69
 11928  11BD                     __ptext69:	
 11929 ;; *************** function _Flash_Memory_Write *****************
 11930 ;; Defined at:
 11931 ;;		line 955 in file "../src/MCU_B1.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;		None
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  i               1    1[BANK0 ] unsigned char 
 11936 ;; Return value:  Size  Location     Type
 11937 ;;		None               void
 11938 ;; Registers used:
 11939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11940 ;; Tracked objects:
 11941 ;;		On entry : 0/0
 11942 ;;		On exit  : 0/0
 11943 ;;		Unchanged: 0/0
 11944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;Total ram usage:        2 bytes
 11950 ;; Hardware stack levels used:    1
 11951 ;; Hardware stack levels required when called:    6
 11952 ;; This function calls:
 11953 ;;		_Flash_Memory_Unlock
 11954 ;; This function is called by:
 11955 ;;		_Flash_Memory_Initialization
 11956 ;;		_Flash_Memory_Modify
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function _Flash_Memory_Write
 11962  11BD                     _Flash_Memory_Write:	
 11963                           
 11964                           ;MCU_B1.c: 956: char i = 0;
 11965                           
 11966                           ;incstack = 0
 11967                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11968  11BD  0020               	movlb	0	; select bank0
 11969  11BE  01A1               	clrf	Flash_Memory_Write@i
 11970                           
 11971                           ;MCU_B1.c: 957: CFGS = 0;
 11972  11BF  0023               	movlb	3	; select bank3
 11973  11C0  1315               	bcf	21,6	;volatile
 11974                           
 11975                           ;MCU_B1.c: 958: PMADRH = 0x30;
 11976  11C1  3030               	movlw	48
 11977  11C2  0092               	movwf	18	;volatile
 11978                           
 11979                           ;MCU_B1.c: 959: PMDATH = 0;
 11980  11C3  0194               	clrf	20	;volatile
 11981                           
 11982                           ;MCU_B1.c: 960: FREE = 0;
 11983  11C4  1215               	bcf	21,4	;volatile
 11984                           
 11985                           ;MCU_B1.c: 961: LWLO = 1;
 11986  11C5  1695               	bsf	21,5	;volatile
 11987                           
 11988                           ;MCU_B1.c: 962: WREN = 1;
 11989  11C6  1515               	bsf	21,2	;volatile
 11990                           
 11991                           ;MCU_B1.c: 963: for (i = 0; i < 32; i++) {
 11992  11C7  0020               	movlb	0	; select bank0
 11993  11C8  01A1               	clrf	Flash_Memory_Write@i
 11994  11C9  3020               	movlw	32
 11995  11CA  0221               	subwf	Flash_Memory_Write@i,w
 11996  11CB  1803               	btfsc	3,0
 11997  11CC  29E5               	goto	l1195
 11998  11CD                     l6586:	
 11999                           
 12000                           ;MCU_B1.c: 964: PMADRL = i;
 12001  11CD  0821               	movf	Flash_Memory_Write@i,w
 12002  11CE  0023               	movlb	3	; select bank3
 12003  11CF  0091               	movwf	17	;volatile
 12004                           
 12005                           ;MCU_B1.c: 965: PMDATL = Memory.Data[i];
 12006  11D0  0020               	movlb	0	; select bank0
 12007  11D1  0821               	movf	Flash_Memory_Write@i,w
 12008  11D2  3EA0               	addlw	_Memory& (0+255)
 12009  11D3  0086               	movwf	6
 12010  11D4  3001               	movlw	1	; select bank3/4
 12011  11D5  0087               	movwf	7
 12012  11D6  0801               	movf	1,w
 12013  11D7  0023               	movlb	3	; select bank3
 12014  11D8  0093               	movwf	19	;volatile
 12015                           
 12016                           ;MCU_B1.c: 966: Flash_Memory_Unlock();
 12017  11D9  319C  2458  3191   	fcall	_Flash_Memory_Unlock
 12018  11DC  3001               	movlw	1
 12019  11DD  0020               	movlb	0	; select bank0
 12020  11DE  00A0               	movwf	??_Flash_Memory_Write
 12021  11DF  0820               	movf	??_Flash_Memory_Write,w
 12022  11E0  07A1               	addwf	Flash_Memory_Write@i,f
 12023  11E1  3020               	movlw	32
 12024  11E2  0221               	subwf	Flash_Memory_Write@i,w
 12025  11E3  1C03               	skipc
 12026  11E4  29CD               	goto	l6586
 12027  11E5                     l1195:	
 12028                           
 12029                           ;MCU_B1.c: 967: }
 12030                           ;MCU_B1.c: 968: LWLO = 0;
 12031  11E5  0023               	movlb	3	; select bank3
 12032  11E6  1295               	bcf	21,5	;volatile
 12033                           
 12034                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 12035  11E7  319C  2458         	fcall	_Flash_Memory_Unlock
 12036                           
 12037                           ;MCU_B1.c: 970: WREN = 0;
 12038  11E9  0023               	movlb	3	; select bank3
 12039  11EA  1115               	bcf	21,2	;volatile
 12040  11EB  0008               	return
 12041  11EC                     __end_of_Flash_Memory_Write:	
 12042                           
 12043                           	psect	text70
 12044  1C58                     __ptext70:	
 12045 ;; *************** function _Flash_Memory_Unlock *****************
 12046 ;; Defined at:
 12047 ;;		line 934 in file "../src/MCU_B1.c"
 12048 ;; Parameters:    Size  Location     Type
 12049 ;;		None
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;		None
 12052 ;; Return value:  Size  Location     Type
 12053 ;;		None               void
 12054 ;; Registers used:
 12055 ;;		wreg
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;Total ram usage:        0 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    5
 12068 ;; This function calls:
 12069 ;;		Nothing
 12070 ;; This function is called by:
 12071 ;;		_Flash_Memory_Write
 12072 ;;		_Flash_Memory_Erasing
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           
 12077                           ;psect for function _Flash_Memory_Unlock
 12078  1C58                     _Flash_Memory_Unlock:	
 12079                           
 12080                           ;MCU_B1.c: 935: PMCON2 = 0x55;
 12081                           
 12082                           ;incstack = 0
 12083                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12084  1C58  3055               	movlw	85
 12085  1C59  0023               	movlb	3	; select bank3
 12086  1C5A  0096               	movwf	22	;volatile
 12087                           
 12088                           ;MCU_B1.c: 936: PMCON2 = 0xaa;
 12089  1C5B  30AA               	movlw	170
 12090  1C5C  0096               	movwf	22	;volatile
 12091                           
 12092                           ;MCU_B1.c: 937: WR = 1;
 12093  1C5D  1495               	bsf	21,1	;volatile
 12094                           
 12095                           ;MCU_B1.c: 938: __nop();
 12096  1C5E  0000               	nop
 12097                           
 12098                           ;MCU_B1.c: 939: __nop();
 12099  1C5F  0000               	nop
 12100  1C60  0008               	return
 12101  1C61                     __end_of_Flash_Memory_Unlock:	
 12102                           
 12103                           	psect	text71
 12104  1EEC                     __ptext71:	
 12105 ;; *************** function _Flash_Memory_Read *****************
 12106 ;; Defined at:
 12107 ;;		line 943 in file "../src/MCU_B1.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  address         1    wreg     unsigned char 
 12110 ;; Auto vars:     Size  Location     Type
 12111 ;;  address         1    2[BANK0 ] unsigned char 
 12112 ;;  ret             1    3[BANK0 ] unsigned char 
 12113 ;;  i               1    1[BANK0 ] unsigned char 
 12114 ;; Return value:  Size  Location     Type
 12115 ;;                  1    wreg      unsigned char 
 12116 ;; Registers used:
 12117 ;;		wreg, status,2
 12118 ;; Tracked objects:
 12119 ;;		On entry : 0/0
 12120 ;;		On exit  : 0/0
 12121 ;;		Unchanged: 0/0
 12122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12127 ;;Total ram usage:        4 bytes
 12128 ;; Hardware stack levels used:    1
 12129 ;; Hardware stack levels required when called:    5
 12130 ;; This function calls:
 12131 ;;		Nothing
 12132 ;; This function is called by:
 12133 ;;		_Flash_Memory_Initialization
 12134 ;;		_Flash_Memory_Modify
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           
 12139                           ;psect for function _Flash_Memory_Read
 12140  1EEC                     _Flash_Memory_Read:	
 12141                           
 12142                           ;incstack = 0
 12143                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12144                           ;Flash_Memory_Read@address stored from wreg
 12145  1EEC  0020               	movlb	0	; select bank0
 12146  1EED  00A2               	movwf	Flash_Memory_Read@address
 12147                           
 12148                           ;MCU_B1.c: 944: char i = 0, ret = 0;
 12149  1EEE  01A1               	clrf	Flash_Memory_Read@i
 12150  1EEF  01A3               	clrf	Flash_Memory_Read@ret
 12151                           
 12152                           ;MCU_B1.c: 945: PMADRH = 0x30;
 12153  1EF0  3030               	movlw	48
 12154  1EF1  0023               	movlb	3	; select bank3
 12155  1EF2  0092               	movwf	18	;volatile
 12156                           
 12157                           ;MCU_B1.c: 946: PMADRL = address;
 12158  1EF3  0020               	movlb	0	; select bank0
 12159  1EF4  0822               	movf	Flash_Memory_Read@address,w
 12160  1EF5  0023               	movlb	3	; select bank3
 12161  1EF6  0091               	movwf	17	;volatile
 12162                           
 12163                           ;MCU_B1.c: 947: CFGS = 0;
 12164  1EF7  1315               	bcf	21,6	;volatile
 12165                           
 12166                           ;MCU_B1.c: 948: RD = 1;
 12167  1EF8  1415               	bsf	21,0	;volatile
 12168                           
 12169                           ;MCU_B1.c: 949: i = PMDATH;
 12170  1EF9  0814               	movf	20,w	;volatile
 12171  1EFA  0020               	movlb	0	; select bank0
 12172  1EFB  00A0               	movwf	??_Flash_Memory_Read
 12173  1EFC  0820               	movf	??_Flash_Memory_Read,w
 12174  1EFD  00A1               	movwf	Flash_Memory_Read@i
 12175                           
 12176                           ;MCU_B1.c: 950: ret = PMDATL;
 12177  1EFE  0023               	movlb	3	; select bank3
 12178  1EFF  0813               	movf	19,w	;volatile
 12179  1F00  0020               	movlb	0	; select bank0
 12180  1F01  00A0               	movwf	??_Flash_Memory_Read
 12181  1F02  0820               	movf	??_Flash_Memory_Read,w
 12182  1F03  00A3               	movwf	Flash_Memory_Read@ret
 12183                           
 12184                           ;MCU_B1.c: 951: return ret;
 12185  1F04  0823               	movf	Flash_Memory_Read@ret,w
 12186  1F05  0008               	return
 12187  1F06                     __end_of_Flash_Memory_Read:	
 12188                           
 12189                           	psect	text72
 12190  11EC                     __ptext72:	
 12191 ;; *************** function _DimmerLights_Main *****************
 12192 ;; Defined at:
 12193 ;;		line 406 in file "../src/Dimmer_B1.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;		None               void
 12200 ;; Registers used:
 12201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;Total ram usage:        4 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:   10
 12214 ;; This function calls:
 12215 ;;		_getLoad_OK
 12216 ;;		_getMain_All_Error_Status
 12217 ;;		_getMain_LightsStatus
 12218 ;;		_setDimmerLights_Main
 12219 ;; This function is called by:
 12220 ;;		_main
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           
 12225                           ;psect for function _DimmerLights_Main
 12226  11EC                     _DimmerLights_Main:	
 12227                           
 12228                           ;Dimmer_B1.c: 408: if (getMain_All_Error_Status(0) == 0) {
 12229                           
 12230                           ;incstack = 0
 12231                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12232  11EC  3000               	movlw	0
 12233  11ED  3192  224E  3191   	fcall	_getMain_All_Error_Status
 12234  11F0  3800               	iorlw	0
 12235  11F1  1D03               	skipz
 12236  11F2  2A16               	goto	l707
 12237                           
 12238                           ;Dimmer_B1.c: 409: if (Dimmer.LoadOK == 1) {
 12239  11F3  0022               	movlb	2	; select bank2
 12240  11F4  1CBE               	btfss	_Dimmer^(0+256),1
 12241  11F5  2A18               	goto	l7438
 12242                           
 12243                           ;Dimmer_B1.c: 410: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12244  11F6  319C  243F  3191   	fcall	_getLoad_OK
 12245  11F9  3A01               	xorlw	1
 12246  11FA  1903               	skipnz
 12247  11FB  2A0D               	goto	l7434
 12248  11FC  3191  2192  3191   	fcall	_getMain_LightsStatus
 12249  11FF  3A00               	xorlw	0
 12250  1200  1903               	skipnz
 12251  1201  2A0D               	goto	l7434
 12252  1202  0022               	movlb	2	; select bank2
 12253  1203  0C3E               	rrf	_Dimmer^(0+256),w
 12254  1204  3901               	andlw	1
 12255  1205  0020               	movlb	0	; select bank0
 12256  1206  00E7               	movwf	??_DimmerLights_Main
 12257  1207  01E8               	clrf	??_DimmerLights_Main+1
 12258  1208  0867               	movf	??_DimmerLights_Main,w
 12259  1209  00E9               	movwf	_DimmerLights_Main$2344
 12260  120A  0868               	movf	??_DimmerLights_Main+1,w
 12261  120B  00EA               	movwf	_DimmerLights_Main$2344+1
 12262  120C  2A10               	goto	l7436
 12263  120D                     l7434:	
 12264  120D  0020               	movlb	0	; select bank0
 12265  120E  01E9               	clrf	_DimmerLights_Main$2344
 12266  120F  01EA               	clrf	_DimmerLights_Main$2344+1
 12267  1210                     l7436:	
 12268  1210  0869               	movf	_DimmerLights_Main$2344,w
 12269  1211  0022               	movlb	2	; select bank2
 12270  1212  10BE               	bcf	_Dimmer^(0+256),1
 12271  1213  1D03               	skipz
 12272  1214  14BE               	bsf	_Dimmer^(0+256),1
 12273                           
 12274                           ;Dimmer_B1.c: 411: }
 12275                           ;Dimmer_B1.c: 412: } else {
 12276  1215  2A18               	goto	l7438
 12277  1216                     l707:	
 12278                           
 12279                           ;Dimmer_B1.c: 413: Dimmer.LoadOK = 0;
 12280  1216  0022               	movlb	2	; select bank2
 12281  1217  10BE               	bcf	_Dimmer^(0+256),1
 12282  1218                     l7438:	
 12283                           
 12284                           ;Dimmer_B1.c: 414: }
 12285                           ;Dimmer_B1.c: 418: setDimmerLights_Main(1);
 12286  1218  3001               	movlw	1
 12287  1219  3196  26EF         	fcall	_setDimmerLights_Main
 12288  121B  0008               	return
 12289  121C                     __end_of_DimmerLights_Main:	
 12290                           
 12291                           	psect	text73
 12292  16EF                     __ptext73:	
 12293 ;; *************** function _setDimmerLights_Main *****************
 12294 ;; Defined at:
 12295 ;;		line 432 in file "../src/Dimmer_B1.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  lights          1    wreg     unsigned char 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  lights          1   70[BANK0 ] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;		None               void
 12302 ;; Registers used:
 12303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        1 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    9
 12316 ;; This function calls:
 12317 ;;		_DimmerLightsPointSelect
 12318 ;;		_setBuz
 12319 ;;		_setDimmerLights
 12320 ;;		_setDimmerLights_Adj
 12321 ;; This function is called by:
 12322 ;;		_DimmerLights_Main
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           
 12327                           ;psect for function _setDimmerLights_Main
 12328  16EF                     _setDimmerLights_Main:	
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12332                           ;setDimmerLights_Main@lights stored from wreg
 12333  16EF  0020               	movlb	0	; select bank0
 12334  16F0  00E6               	movwf	setDimmerLights_Main@lights
 12335                           
 12336                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
 12337  16F1  0866               	movf	setDimmerLights_Main@lights,w
 12338  16F2  319C  248B  3196   	fcall	_DimmerLightsPointSelect
 12339                           
 12340                           ;Dimmer_B1.c: 434: if (DimmerLights->Trigger == 1) {
 12341  16F5  0020               	movlb	0	; select bank0
 12342  16F6  086F               	movf	_DimmerLights,w
 12343  16F7  3E08               	addlw	8
 12344  16F8  0086               	movwf	6
 12345  16F9  3001               	movlw	1	; select bank2/3
 12346  16FA  0087               	movwf	7
 12347  16FB  1D01               	btfss	1,2
 12348  16FC  2F1A               	goto	l6918
 12349                           
 12350                           ;Dimmer_B1.c: 436: if (Dimmer.LoadOK == 0) {
 12351  16FD  0022               	movlb	2	; select bank2
 12352  16FE  18BE               	btfsc	_Dimmer^(0+256),1
 12353  16FF  0008               	return
 12354                           
 12355                           ;Dimmer_B1.c: 437: DimmerLights->Trigger = 0;
 12356  1700  0020               	movlb	0	; select bank0
 12357  1701  086F               	movf	_DimmerLights,w
 12358  1702  3E08               	addlw	8
 12359  1703  0086               	movwf	6
 12360  1704  3001               	movlw	1	; select bank2/3
 12361  1705  0087               	movwf	7
 12362  1706  1101               	bcf	1,2
 12363                           
 12364                           ;Dimmer_B1.c: 439: if (DimmerLights->Switch == 1) {
 12365  1707  086F               	movf	_DimmerLights,w
 12366  1708  3E08               	addlw	8
 12367  1709  0086               	movwf	6
 12368  170A  3001               	movlw	1	; select bank2/3
 12369  170B  0087               	movwf	7
 12370  170C  1C81               	btfss	1,1
 12371  170D  2F14               	goto	l6916
 12372                           
 12373                           ;Dimmer_B1.c: 440: setDimmerLights(lights, 1);
 12374  170E  01E2               	clrf	setDimmerLights@status
 12375  170F  0AE2               	incf	setDimmerLights@status,f
 12376  1710  0866               	movf	setDimmerLights_Main@lights,w
 12377  1711  318C  24E5         	fcall	_setDimmerLights
 12378                           
 12379                           ;Dimmer_B1.c: 441: } else {
 12380  1713  0008               	return
 12381  1714                     l6916:	
 12382                           
 12383                           ;Dimmer_B1.c: 442: setDimmerLights(lights, 0);
 12384  1714  0020               	movlb	0	; select bank0
 12385  1715  01E2               	clrf	setDimmerLights@status
 12386  1716  0866               	movf	setDimmerLights_Main@lights,w
 12387  1717  318C  24E5         	fcall	_setDimmerLights
 12388                           
 12389                           ;Dimmer_B1.c: 443: }
 12390                           ;Dimmer_B1.c: 444: }
 12391                           ;Dimmer_B1.c: 445: } else {
 12392  1719  0008               	return
 12393  171A                     l6918:	
 12394                           
 12395                           ;Dimmer_B1.c: 446: if (DimmerLights->TriggerAdj == 1) {
 12396  171A  0020               	movlb	0	; select bank0
 12397  171B  086F               	movf	_DimmerLights,w
 12398  171C  3E08               	addlw	8
 12399  171D  0086               	movwf	6
 12400  171E  3001               	movlw	1	; select bank2/3
 12401  171F  0087               	movwf	7
 12402  1720  1E01               	btfss	1,4
 12403  1721  0008               	return
 12404                           
 12405                           ;Dimmer_B1.c: 447: if (Dimmer.LoadOK == 0) {
 12406  1722  0022               	movlb	2	; select bank2
 12407  1723  18BE               	btfsc	_Dimmer^(0+256),1
 12408  1724  0008               	return
 12409                           
 12410                           ;Dimmer_B1.c: 448: DimmerLights->TriggerAdj = 0;
 12411  1725  0020               	movlb	0	; select bank0
 12412  1726  086F               	movf	_DimmerLights,w
 12413  1727  3E08               	addlw	8
 12414  1728  0086               	movwf	6
 12415  1729  3001               	movlw	1	; select bank2/3
 12416  172A  0087               	movwf	7
 12417  172B  1201               	bcf	1,4
 12418                           
 12419                           ;Dimmer_B1.c: 449: if (DimmerLights->AdjGo == 1) {
 12420  172C  086F               	movf	_DimmerLights,w
 12421  172D  3E08               	addlw	8
 12422  172E  0086               	movwf	6
 12423  172F  3001               	movlw	1	; select bank2/3
 12424  1730  0087               	movwf	7
 12425  1731  1D81               	btfss	1,3
 12426  1732  2F42               	goto	l6928
 12427                           
 12428                           ;Dimmer_B1.c: 450: setDimmerLights_Adj(lights, 1);
 12429  1733  01E2               	clrf	setDimmerLights_Adj@status
 12430  1734  0AE2               	incf	setDimmerLights_Adj@status,f
 12431  1735  0866               	movf	setDimmerLights_Main@lights,w
 12432  1736  318B  230D  3196   	fcall	_setDimmerLights_Adj
 12433                           
 12434                           ;Dimmer_B1.c: 451: setBuz(1, 100);
 12435  1739  3064               	movlw	100
 12436  173A  0020               	movlb	0	; select bank0
 12437  173B  00A9               	movwf	setBuz@time
 12438  173C  3000               	movlw	0
 12439  173D  00AA               	movwf	setBuz@time+1
 12440  173E  3001               	movlw	1
 12441  173F  3196  2696         	fcall	_setBuz
 12442                           
 12443                           ;Dimmer_B1.c: 452: } else {
 12444  1741  0008               	return
 12445  1742                     l6928:	
 12446                           
 12447                           ;Dimmer_B1.c: 453: setDimmerLights_Adj(lights, 0);
 12448  1742  0020               	movlb	0	; select bank0
 12449  1743  01E2               	clrf	setDimmerLights_Adj@status
 12450  1744  0866               	movf	setDimmerLights_Main@lights,w
 12451  1745  318B  230D         	fcall	_setDimmerLights_Adj
 12452  1747  0008               	return
 12453  1748                     __end_of_setDimmerLights_Main:	
 12454                           
 12455                           	psect	text74
 12456  0B0D                     __ptext74:	
 12457 ;; *************** function _setDimmerLights_Adj *****************
 12458 ;; Defined at:
 12459 ;;		line 732 in file "../src/Dimmer_B1.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;  lights          1    wreg     unsigned char 
 12462 ;;  status          1   66[BANK0 ] unsigned char 
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;  lights          1   69[BANK0 ] unsigned char 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;		None               void
 12467 ;; Registers used:
 12468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12474 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;Total ram usage:        4 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    8
 12481 ;; This function calls:
 12482 ;;		_DimmerLightsPointSelect
 12483 ;;		_getMain_All_Error_Status
 12484 ;;		_setPercentValue
 12485 ;;		_setRF_DimmerLights
 12486 ;;		_setTxData
 12487 ;; This function is called by:
 12488 ;;		_setDimmerLights_Main
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           
 12493                           ;psect for function _setDimmerLights_Adj
 12494  0B0D                     _setDimmerLights_Adj:	
 12495                           
 12496                           ;incstack = 0
 12497                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12498                           ;setDimmerLights_Adj@lights stored from wreg
 12499  0B0D  0020               	movlb	0	; select bank0
 12500  0B0E  00E5               	movwf	setDimmerLights_Adj@lights
 12501                           
 12502                           ;Dimmer_B1.c: 733: DimmerLightsPointSelect(lights);
 12503  0B0F  0865               	movf	setDimmerLights_Adj@lights,w
 12504  0B10  319C  248B  318B   	fcall	_DimmerLightsPointSelect
 12505                           
 12506                           ;Dimmer_B1.c: 734: if (status == 1) {
 12507  0B13  0020               	movlb	0	; select bank0
 12508  0B14  0862               	movf	setDimmerLights_Adj@status,w
 12509  0B15  3A01               	xorlw	1
 12510  0B16  1D03               	skipz
 12511  0B17  2B23               	goto	l6496
 12512                           
 12513                           ;Dimmer_B1.c: 735: DimmerLights->AdjFlag = 1;
 12514  0B18  086F               	movf	_DimmerLights,w
 12515  0B19  0086               	movwf	6
 12516  0B1A  3001               	movlw	1	; select bank2/3
 12517  0B1B  0087               	movwf	7
 12518  0B1C  1581               	bsf	1,3
 12519                           
 12520                           ;Dimmer_B1.c: 736: DimmerLights->Signal = 1;
 12521  0B1D  086F               	movf	_DimmerLights,w
 12522  0B1E  0086               	movwf	6
 12523  0B1F  3001               	movlw	1	; select bank2/3
 12524  0B20  0087               	movwf	7
 12525  0B21  1481               	bsf	1,1
 12526                           
 12527                           ;Dimmer_B1.c: 737: } else {
 12528  0B22  0008               	return
 12529  0B23                     l6496:	
 12530                           
 12531                           ;Dimmer_B1.c: 738: if (DimmerLights->AdjFlag == 1) {
 12532  0B23  086F               	movf	_DimmerLights,w
 12533  0B24  0086               	movwf	6
 12534  0B25  3001               	movlw	1	; select bank2/3
 12535  0B26  0087               	movwf	7
 12536  0B27  1D81               	btfss	1,3
 12537  0B28  0008               	return
 12538                           
 12539                           ;Dimmer_B1.c: 739: DimmerLights->Signal = 0;
 12540  0B29  086F               	movf	_DimmerLights,w
 12541  0B2A  0086               	movwf	6
 12542  0B2B  3001               	movlw	1	; select bank2/3
 12543  0B2C  0087               	movwf	7
 12544  0B2D  1081               	bcf	1,1
 12545                           
 12546                           ;Dimmer_B1.c: 740: DimmerLights->AdjFlag = 0;
 12547  0B2E  086F               	movf	_DimmerLights,w
 12548  0B2F  0086               	movwf	6
 12549  0B30  3001               	movlw	1	; select bank2/3
 12550  0B31  0087               	movwf	7
 12551  0B32  1181               	bcf	1,3
 12552                           
 12553                           ;Dimmer_B1.c: 741: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12554  0B33  086F               	movf	_DimmerLights,w
 12555  0B34  3E04               	addlw	4
 12556  0B35  0086               	movwf	6
 12557  0B36  3001               	movlw	1	; select bank2/3
 12558  0B37  0087               	movwf	7
 12559  0B38  0801               	movf	1,w
 12560  0B39  00E3               	movwf	??_setDimmerLights_Adj
 12561  0B3A  086F               	movf	_DimmerLights,w
 12562  0B3B  3E05               	addlw	5
 12563  0B3C  0086               	movwf	6
 12564  0B3D  3001               	movlw	1	; select bank2/3
 12565  0B3E  0087               	movwf	7
 12566  0B3F  0863               	movf	??_setDimmerLights_Adj,w
 12567  0B40  0081               	movwf	1
 12568                           
 12569                           ;Dimmer_B1.c: 742: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12570  0B41  086F               	movf	_DimmerLights,w
 12571  0B42  3E04               	addlw	4
 12572  0B43  0086               	movwf	6
 12573  0B44  3001               	movlw	1	; select bank2/3
 12574  0B45  0087               	movwf	7
 12575  0B46  0801               	movf	1,w
 12576  0B47  318A  2243  318B   	fcall	_setPercentValue
 12577  0B4A  0020               	movlb	0	; select bank0
 12578  0B4B  00E3               	movwf	??_setDimmerLights_Adj
 12579  0B4C  0865               	movf	setDimmerLights_Adj@lights,w
 12580  0B4D  3E14               	addlw	20
 12581  0B4E  076E               	addwf	_product,w
 12582  0B4F  00E4               	movwf	??_setDimmerLights_Adj+1
 12583  0B50  0864               	movf	??_setDimmerLights_Adj+1,w
 12584  0B51  0086               	movwf	6
 12585  0B52  3002               	movlw	2	; select bank4/5
 12586  0B53  0087               	movwf	7
 12587  0B54  0863               	movf	??_setDimmerLights_Adj,w
 12588  0B55  0081               	movwf	1
 12589                           
 12590                           ;Dimmer_B1.c: 752: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12591  0B56  3000               	movlw	0
 12592  0B57  3192  224E  318B   	fcall	_getMain_All_Error_Status
 12593  0B5A  3A00               	xorlw	0
 12594  0B5B  3000               	movlw	0
 12595  0B5C  1903               	skipnz
 12596  0B5D  3001               	movlw	1
 12597  0B5E  0020               	movlb	0	; select bank0
 12598  0B5F  00E3               	movwf	??_setDimmerLights_Adj
 12599  0B60  0DE3               	rlf	??_setDimmerLights_Adj,f
 12600  0B61  0022               	movlb	2	; select bank2
 12601  0B62  083E               	movf	_Dimmer^(0+256),w
 12602  0B63  0020               	movlb	0	; select bank0
 12603  0B64  0663               	xorwf	??_setDimmerLights_Adj,w
 12604  0B65  39FD               	andlw	-3
 12605  0B66  0663               	xorwf	??_setDimmerLights_Adj,w
 12606  0B67  0022               	movlb	2	; select bank2
 12607  0B68  00BE               	movwf	_Dimmer^(0+256)
 12608                           
 12609                           ;Dimmer_B1.c: 755: setRF_DimmerLights(lights, 1);
 12610  0B69  0020               	movlb	0	; select bank0
 12611  0B6A  01A0               	clrf	setRF_DimmerLights@on
 12612  0B6B  0AA0               	incf	setRF_DimmerLights@on,f
 12613  0B6C  0865               	movf	setDimmerLights_Adj@lights,w
 12614  0B6D  3197  2748  318B   	fcall	_setRF_DimmerLights
 12615                           
 12616                           ;Dimmer_B1.c: 756: setTxData();
 12617  0B70  3186  26ED         	fcall	_setTxData
 12618  0B72  0008               	return
 12619  0B73                     __end_of_setDimmerLights_Adj:	
 12620                           
 12621                           	psect	text75
 12622  0CE5                     __ptext75:	
 12623 ;; *************** function _setDimmerLights *****************
 12624 ;; Defined at:
 12625 ;;		line 627 in file "../src/Dimmer_B1.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;  lights          1    wreg     unsigned char 
 12628 ;;  status          1   66[BANK0 ] unsigned char 
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;  lights          1   69[BANK0 ] unsigned char 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;		None               void
 12633 ;; Registers used:
 12634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12640 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;Total ram usage:        4 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    8
 12647 ;; This function calls:
 12648 ;;		_DimmerLightsPointSelect
 12649 ;;		_getMain_All_Error_Status
 12650 ;;		_setDimmerLights_Line
 12651 ;;		_setLED
 12652 ;;		_setPercentValue
 12653 ;;		_setRF_DimmerLights
 12654 ;;		_setTxData
 12655 ;; This function is called by:
 12656 ;;		_setDimmerLights_Main
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _setDimmerLights
 12662  0CE5                     _setDimmerLights:	
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12666                           ;setDimmerLights@lights stored from wreg
 12667  0CE5  0020               	movlb	0	; select bank0
 12668  0CE6  00E5               	movwf	setDimmerLights@lights
 12669                           
 12670                           ;Dimmer_B1.c: 628: DimmerLightsPointSelect(lights);
 12671  0CE7  0865               	movf	setDimmerLights@lights,w
 12672  0CE8  319C  248B  318C   	fcall	_DimmerLightsPointSelect
 12673                           
 12674                           ;Dimmer_B1.c: 631: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12675  0CEB  3000               	movlw	0
 12676  0CEC  3192  224E  318C   	fcall	_getMain_All_Error_Status
 12677  0CEF  3A00               	xorlw	0
 12678  0CF0  3000               	movlw	0
 12679  0CF1  1903               	skipnz
 12680  0CF2  3001               	movlw	1
 12681  0CF3  0020               	movlb	0	; select bank0
 12682  0CF4  00E3               	movwf	??_setDimmerLights
 12683  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12684  0CF6  0022               	movlb	2	; select bank2
 12685  0CF7  083E               	movf	_Dimmer^(0+256),w
 12686  0CF8  0020               	movlb	0	; select bank0
 12687  0CF9  0663               	xorwf	??_setDimmerLights,w
 12688  0CFA  39FD               	andlw	-3
 12689  0CFB  0663               	xorwf	??_setDimmerLights,w
 12690  0CFC  0022               	movlb	2	; select bank2
 12691  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12692                           
 12693                           ;Dimmer_B1.c: 635: if (status == 1) {
 12694  0CFE  0020               	movlb	0	; select bank0
 12695  0CFF  0862               	movf	setDimmerLights@status,w
 12696  0D00  3A01               	xorlw	1
 12697  0D01  1D03               	skipz
 12698  0D02  2D33               	goto	l6476
 12699                           
 12700                           ;Dimmer_B1.c: 636: DimmerLights->Loop = 1;
 12701  0D03  086F               	movf	_DimmerLights,w
 12702  0D04  3E09               	addlw	9
 12703  0D05  0086               	movwf	6
 12704  0D06  3001               	movlw	1	; select bank2/3
 12705  0D07  0087               	movwf	7
 12706  0D08  1481               	bsf	1,1
 12707                           
 12708                           ;Dimmer_B1.c: 637: setLED(lights, 0);
 12709  0D09  01A2               	clrf	setLED@command
 12710  0D0A  0865               	movf	setDimmerLights@lights,w
 12711  0D0B  3193  231D  318C   	fcall	_setLED
 12712                           
 12713                           ;Dimmer_B1.c: 638: ;;
 12714                           ;Dimmer_B1.c: 639: setDimmerLights_Line(lights);
 12715  0D0E  0020               	movlb	0	; select bank0
 12716  0D0F  0865               	movf	setDimmerLights@lights,w
 12717  0D10  319C  24D9  318C   	fcall	_setDimmerLights_Line
 12718                           
 12719                           ;Dimmer_B1.c: 640: DimmerLights->StatusFlag = 1;
 12720  0D13  0020               	movlb	0	; select bank0
 12721  0D14  086F               	movf	_DimmerLights,w
 12722  0D15  0086               	movwf	6
 12723  0D16  3001               	movlw	1	; select bank2/3
 12724  0D17  0087               	movwf	7
 12725  0D18  1701               	bsf	1,6
 12726                           
 12727                           ;Dimmer_B1.c: 647: DimmerLights->DimmingValue = ((char)(90*0.8));
 12728  0D19  3048               	movlw	72
 12729  0D1A  00E3               	movwf	??_setDimmerLights
 12730  0D1B  086F               	movf	_DimmerLights,w
 12731  0D1C  3E04               	addlw	4
 12732  0D1D  0086               	movwf	6
 12733  0D1E  3001               	movlw	1	; select bank2/3
 12734  0D1F  0087               	movwf	7
 12735  0D20  0863               	movf	??_setDimmerLights,w
 12736  0D21  0081               	movwf	1
 12737                           
 12738                           ;Dimmer_B1.c: 648: product->Data[(20 + lights)]=setPercentValue(((char)(90*0.8)));
 12739  0D22  3048               	movlw	72
 12740  0D23  318A  2243  318C   	fcall	_setPercentValue
 12741  0D26  0020               	movlb	0	; select bank0
 12742  0D27  00E3               	movwf	??_setDimmerLights
 12743  0D28  0865               	movf	setDimmerLights@lights,w
 12744  0D29  3E14               	addlw	20
 12745  0D2A  076E               	addwf	_product,w
 12746  0D2B  00E4               	movwf	??_setDimmerLights+1
 12747  0D2C  0864               	movf	??_setDimmerLights+1,w
 12748  0D2D  0086               	movwf	6
 12749  0D2E  3002               	movlw	2	; select bank4/5
 12750  0D2F  0087               	movwf	7
 12751  0D30  0863               	movf	??_setDimmerLights,w
 12752  0D31  0081               	movwf	1
 12753  0D32  2D5A               	goto	l6488
 12754  0D33                     l6476:	
 12755                           ;Dimmer_B1.c: 658: } else {
 12756                           
 12757                           ;Dimmer_B1.c: 656: DimmerLights->DimmingTimeValue = 7;
 12758                           
 12759                           
 12760                           ;Dimmer_B1.c: 659: DimmerLights->StatusFlag = 0;
 12761  0D33  086F               	movf	_DimmerLights,w
 12762  0D34  0086               	movwf	6
 12763  0D35  3001               	movlw	1	; select bank2/3
 12764  0D36  0087               	movwf	7
 12765  0D37  1301               	bcf	1,6
 12766                           
 12767                           ;Dimmer_B1.c: 660: DimmerLights->Loop = 0;
 12768  0D38  086F               	movf	_DimmerLights,w
 12769  0D39  3E09               	addlw	9
 12770  0D3A  0086               	movwf	6
 12771  0D3B  3001               	movlw	1	; select bank2/3
 12772  0D3C  0087               	movwf	7
 12773  0D3D  1081               	bcf	1,1
 12774                           
 12775                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12776  0D3E  01A2               	clrf	setLED@command
 12777  0D3F  0AA2               	incf	setLED@command,f
 12778  0D40  0865               	movf	setDimmerLights@lights,w
 12779  0D41  3193  231D  318C   	fcall	_setLED
 12780                           
 12781                           ;Dimmer_B1.c: 662: ;;
 12782                           ;Dimmer_B1.c: 669: DimmerLights->MosfetClose = 1;
 12783  0D44  0020               	movlb	0	; select bank0
 12784  0D45  086F               	movf	_DimmerLights,w
 12785  0D46  3E08               	addlw	8
 12786  0D47  0086               	movwf	6
 12787  0D48  3001               	movlw	1	; select bank2/3
 12788  0D49  0087               	movwf	7
 12789  0D4A  1781               	bsf	1,7
 12790                           
 12791                           ;Dimmer_B1.c: 672: DimmerLights->AdjFlag = 0;
 12792  0D4B  086F               	movf	_DimmerLights,w
 12793  0D4C  0086               	movwf	6
 12794  0D4D  3001               	movlw	1	; select bank2/3
 12795  0D4E  0087               	movwf	7
 12796  0D4F  1181               	bcf	1,3
 12797                           
 12798                           ;Dimmer_B1.c: 673: DimmerLights->AdjStatus = 0;
 12799  0D50  086F               	movf	_DimmerLights,w
 12800  0D51  0086               	movwf	6
 12801  0D52  3001               	movlw	1	; select bank2/3
 12802  0D53  0087               	movwf	7
 12803  0D54  1201               	bcf	1,4
 12804                           
 12805                           ;Dimmer_B1.c: 674: DimmerLights->AdjRF = 0;
 12806  0D55  086F               	movf	_DimmerLights,w
 12807  0D56  0086               	movwf	6
 12808  0D57  3001               	movlw	1	; select bank2/3
 12809  0D58  0087               	movwf	7
 12810  0D59  1101               	bcf	1,2
 12811  0D5A                     l6488:	
 12812                           
 12813                           ;Dimmer_B1.c: 675: DimmerLights->DimmingTimeValue = 7;
 12814  0D5A  3007               	movlw	7
 12815  0D5B  00E3               	movwf	??_setDimmerLights
 12816  0D5C  086F               	movf	_DimmerLights,w
 12817  0D5D  3E02               	addlw	2
 12818  0D5E  0086               	movwf	6
 12819  0D5F  3001               	movlw	1	; select bank2/3
 12820  0D60  0087               	movwf	7
 12821  0D61  0863               	movf	??_setDimmerLights,w
 12822  0D62  0081               	movwf	1
 12823                           
 12824                           ;Dimmer_B1.c: 677: }
 12825                           ;Dimmer_B1.c: 678: setRF_DimmerLights(lights, status);
 12826  0D63  0862               	movf	setDimmerLights@status,w
 12827  0D64  00E3               	movwf	??_setDimmerLights
 12828  0D65  0863               	movf	??_setDimmerLights,w
 12829  0D66  00A0               	movwf	setRF_DimmerLights@on
 12830  0D67  0865               	movf	setDimmerLights@lights,w
 12831  0D68  3197  2748  318C   	fcall	_setRF_DimmerLights
 12832                           
 12833                           ;Dimmer_B1.c: 679: setTxData();
 12834  0D6B  3186  26ED         	fcall	_setTxData
 12835  0D6D  0008               	return
 12836  0D6E                     __end_of_setDimmerLights:	
 12837                           
 12838                           	psect	text76
 12839  06ED                     __ptext76:	
 12840 ;; *************** function _setTxData *****************
 12841 ;; Defined at:
 12842 ;;		line 210 in file "../src/RF_Control_B1.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;		None
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  i               1    0        unsigned char 
 12847 ;; Return value:  Size  Location     Type
 12848 ;;		None               void
 12849 ;; Registers used:
 12850 ;;		wreg, fsr1l, fsr1h
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 0/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12860 ;;Total ram usage:        1 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; Hardware stack levels required when called:    5
 12863 ;; This function calls:
 12864 ;;		Nothing
 12865 ;; This function is called by:
 12866 ;;		_setDimmerLights
 12867 ;;		_setDimmerLights_Adj
 12868 ;;		_getRxData
 12869 ;;		_setControl_Lights_Table
 12870 ;;		_setRFSW_Control
 12871 ;;		_setRFSW_AdjControl
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           
 12876                           ;psect for function _setTxData
 12877  06ED                     _setTxData:	
 12878                           
 12879                           ;RF_Control_B1.c: 211: char i;
 12880                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 12881                           
 12882                           ;incstack = 0
 12883                           ; Regs used in _setTxData: [wregfsr1]
 12884  06ED  0021               	movlb	1	; select bank1
 12885  06EE  1C3B               	btfss	_RF1^(0+128),0
 12886  06EF  0008               	return
 12887                           
 12888                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 12889  06F0  193B               	btfsc	_RF1^(0+128),2
 12890  06F1  0008               	return
 12891                           
 12892                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 12893  06F2  153B               	bsf	_RF1^(0+128),2
 12894                           
 12895                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 12896  06F3  3014               	movlw	20
 12897  06F4  00C2               	movwf	(_RF1^(0+128)+7)
 12898  06F5  3000               	movlw	0
 12899  06F6  00C3               	movwf	(_RF1^(0+128)+8)
 12900                           
 12901                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 12902  06F7  3063               	movlw	99
 12903  06F8  0020               	movlb	0	; select bank0
 12904  06F9  00A0               	movwf	??_setTxData
 12905  06FA  0820               	movf	??_setTxData,w
 12906  06FB  0022               	movlb	2	; select bank2
 12907  06FC  00A0               	movwf	_RF_Data^(0+256)
 12908                           
 12909                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 12910  06FD  3002               	movlw	2
 12911  06FE  0020               	movlb	0	; select bank0
 12912  06FF  00A0               	movwf	??_setTxData
 12913  0700  0820               	movf	??_setTxData,w
 12914  0701  0022               	movlb	2	; select bank2
 12915  0702  00A1               	movwf	(_RF_Data^(0+256)+1)
 12916                           
 12917                           ;RF_Control_B1.c: 227: RF_Data[2] = product->Data[2];
 12918  0703  0020               	movlb	0	; select bank0
 12919  0704  086E               	movf	_product,w
 12920  0705  0086               	movwf	6
 12921  0706  3002               	movlw	2	; select bank4/5
 12922  0707  0087               	movwf	7
 12923  0708  3002               	movlw	2	; select bank4/5
 12924  0709  3F42               	moviw [2]fsr1
 12925  070A  0022               	movlb	2	; select bank2
 12926  070B  00A2               	movwf	(_RF_Data^(0+256)+2)
 12927                           
 12928                           ;RF_Control_B1.c: 228: RF_Data[3] = product->Data[3];
 12929  070C  0020               	movlb	0	; select bank0
 12930  070D  086E               	movf	_product,w
 12931  070E  0086               	movwf	6
 12932  070F  3002               	movlw	2	; select bank4/5
 12933  0710  0087               	movwf	7
 12934  0711  3002               	movlw	2	; select bank4/5
 12935  0712  3F43               	moviw [3]fsr1
 12936  0713  0022               	movlb	2	; select bank2
 12937  0714  00A3               	movwf	(_RF_Data^(0+256)+3)
 12938                           
 12939                           ;RF_Control_B1.c: 229: RF_Data[4] = product->Data[4];
 12940  0715  0020               	movlb	0	; select bank0
 12941  0716  086E               	movf	_product,w
 12942  0717  0086               	movwf	6
 12943  0718  3002               	movlw	2	; select bank4/5
 12944  0719  0087               	movwf	7
 12945  071A  3002               	movlw	2	; select bank4/5
 12946  071B  3F44               	moviw [4]fsr1
 12947  071C  0022               	movlb	2	; select bank2
 12948  071D  00A4               	movwf	(_RF_Data^(0+256)+4)
 12949                           
 12950                           ;RF_Control_B1.c: 230: RF_Data[5] = product->Data[5];
 12951  071E  0020               	movlb	0	; select bank0
 12952  071F  086E               	movf	_product,w
 12953  0720  0086               	movwf	6
 12954  0721  3002               	movlw	2	; select bank4/5
 12955  0722  0087               	movwf	7
 12956  0723  3002               	movlw	2	; select bank4/5
 12957  0724  3F45               	moviw [5]fsr1
 12958  0725  0022               	movlb	2	; select bank2
 12959  0726  00A5               	movwf	(_RF_Data^(0+256)+5)
 12960                           
 12961                           ;RF_Control_B1.c: 231: RF_Data[6] = product->Data[6];
 12962  0727  0020               	movlb	0	; select bank0
 12963  0728  086E               	movf	_product,w
 12964  0729  0086               	movwf	6
 12965  072A  3002               	movlw	2	; select bank4/5
 12966  072B  0087               	movwf	7
 12967  072C  3002               	movlw	2	; select bank4/5
 12968  072D  3F46               	moviw [6]fsr1
 12969  072E  0022               	movlb	2	; select bank2
 12970  072F  00A6               	movwf	(_RF_Data^(0+256)+6)
 12971                           
 12972                           ;RF_Control_B1.c: 232: RF_Data[7] = product->Data[7];
 12973  0730  0020               	movlb	0	; select bank0
 12974  0731  086E               	movf	_product,w
 12975  0732  0086               	movwf	6
 12976  0733  3002               	movlw	2	; select bank4/5
 12977  0734  0087               	movwf	7
 12978  0735  3002               	movlw	2	; select bank4/5
 12979  0736  3F47               	moviw [7]fsr1
 12980  0737  0022               	movlb	2	; select bank2
 12981  0738  00A7               	movwf	(_RF_Data^(0+256)+7)
 12982                           
 12983                           ;RF_Control_B1.c: 233: RF_Data[8] = product->Data[8];
 12984  0739  0020               	movlb	0	; select bank0
 12985  073A  086E               	movf	_product,w
 12986  073B  0086               	movwf	6
 12987  073C  3002               	movlw	2	; select bank4/5
 12988  073D  0087               	movwf	7
 12989  073E  3002               	movlw	2	; select bank4/5
 12990  073F  3F48               	moviw [8]fsr1
 12991  0740  0022               	movlb	2	; select bank2
 12992  0741  00A8               	movwf	(_RF_Data^(0+256)+8)
 12993                           
 12994                           ;RF_Control_B1.c: 234: RF_Data[9] = product->Data[9];
 12995  0742  0020               	movlb	0	; select bank0
 12996  0743  086E               	movf	_product,w
 12997  0744  0086               	movwf	6
 12998  0745  3002               	movlw	2	; select bank4/5
 12999  0746  0087               	movwf	7
 13000  0747  3002               	movlw	2	; select bank4/5
 13001  0748  3F49               	moviw [9]fsr1
 13002  0749  0022               	movlb	2	; select bank2
 13003  074A  00A9               	movwf	(_RF_Data^(0+256)+9)
 13004                           
 13005                           ;RF_Control_B1.c: 235: RF_Data[10] = product->Data[10];
 13006  074B  0020               	movlb	0	; select bank0
 13007  074C  086E               	movf	_product,w
 13008  074D  0086               	movwf	6
 13009  074E  3002               	movlw	2	; select bank4/5
 13010  074F  0087               	movwf	7
 13011  0750  3002               	movlw	2	; select bank4/5
 13012  0751  3F4A               	moviw [10]fsr1
 13013  0752  0022               	movlb	2	; select bank2
 13014  0753  00AA               	movwf	(_RF_Data^(0+256)+10)
 13015                           
 13016                           ;RF_Control_B1.c: 236: RF_Data[11] = product->Data[11];
 13017  0754  0020               	movlb	0	; select bank0
 13018  0755  086E               	movf	_product,w
 13019  0756  0086               	movwf	6
 13020  0757  3002               	movlw	2	; select bank4/5
 13021  0758  0087               	movwf	7
 13022  0759  3002               	movlw	2	; select bank4/5
 13023  075A  3F4B               	moviw [11]fsr1
 13024  075B  0022               	movlb	2	; select bank2
 13025  075C  00AB               	movwf	(_RF_Data^(0+256)+11)
 13026                           
 13027                           ;RF_Control_B1.c: 237: RF_Data[12] = product->Data[12];
 13028  075D  0020               	movlb	0	; select bank0
 13029  075E  086E               	movf	_product,w
 13030  075F  0086               	movwf	6
 13031  0760  3002               	movlw	2	; select bank4/5
 13032  0761  0087               	movwf	7
 13033  0762  3002               	movlw	2	; select bank4/5
 13034  0763  3F4C               	moviw [12]fsr1
 13035  0764  0022               	movlb	2	; select bank2
 13036  0765  00AC               	movwf	(_RF_Data^(0+256)+12)
 13037                           
 13038                           ;RF_Control_B1.c: 238: RF_Data[13] = product->Data[13];
 13039  0766  0020               	movlb	0	; select bank0
 13040  0767  086E               	movf	_product,w
 13041  0768  0086               	movwf	6
 13042  0769  3002               	movlw	2	; select bank4/5
 13043  076A  0087               	movwf	7
 13044  076B  3002               	movlw	2	; select bank4/5
 13045  076C  3F4D               	moviw [13]fsr1
 13046  076D  0022               	movlb	2	; select bank2
 13047  076E  00AD               	movwf	(_RF_Data^(0+256)+13)
 13048                           
 13049                           ;RF_Control_B1.c: 239: RF_Data[14] = product->Data[14];
 13050  076F  0020               	movlb	0	; select bank0
 13051  0770  086E               	movf	_product,w
 13052  0771  0086               	movwf	6
 13053  0772  3002               	movlw	2	; select bank4/5
 13054  0773  0087               	movwf	7
 13055  0774  3002               	movlw	2	; select bank4/5
 13056  0775  3F4E               	moviw [14]fsr1
 13057  0776  0022               	movlb	2	; select bank2
 13058  0777  00AE               	movwf	(_RF_Data^(0+256)+14)
 13059                           
 13060                           ;RF_Control_B1.c: 240: RF_Data[15] = product->Data[15];
 13061  0778  0020               	movlb	0	; select bank0
 13062  0779  086E               	movf	_product,w
 13063  077A  0086               	movwf	6
 13064  077B  3002               	movlw	2	; select bank4/5
 13065  077C  0087               	movwf	7
 13066  077D  3002               	movlw	2	; select bank4/5
 13067  077E  3F4F               	moviw [15]fsr1
 13068  077F  0022               	movlb	2	; select bank2
 13069  0780  00AF               	movwf	(_RF_Data^(0+256)+15)
 13070                           
 13071                           ;RF_Control_B1.c: 241: RF_Data[16] = product->Data[16];
 13072  0781  0020               	movlb	0	; select bank0
 13073  0782  086E               	movf	_product,w
 13074  0783  0086               	movwf	6
 13075  0784  3002               	movlw	2	; select bank4/5
 13076  0785  0087               	movwf	7
 13077  0786  3002               	movlw	2	; select bank4/5
 13078  0787  3F50               	moviw [16]fsr1
 13079  0788  0022               	movlb	2	; select bank2
 13080  0789  00B0               	movwf	(_RF_Data^(0+256)+16)
 13081                           
 13082                           ;RF_Control_B1.c: 242: RF_Data[17] = product->Data[17];
 13083  078A  0020               	movlb	0	; select bank0
 13084  078B  086E               	movf	_product,w
 13085  078C  0086               	movwf	6
 13086  078D  3002               	movlw	2	; select bank4/5
 13087  078E  0087               	movwf	7
 13088  078F  3002               	movlw	2	; select bank4/5
 13089  0790  3F51               	moviw [17]fsr1
 13090  0791  0022               	movlb	2	; select bank2
 13091  0792  00B1               	movwf	(_RF_Data^(0+256)+17)
 13092                           
 13093                           ;RF_Control_B1.c: 243: RF_Data[18] = product->Data[18];
 13094  0793  0020               	movlb	0	; select bank0
 13095  0794  086E               	movf	_product,w
 13096  0795  0086               	movwf	6
 13097  0796  3002               	movlw	2	; select bank4/5
 13098  0797  0087               	movwf	7
 13099  0798  3002               	movlw	2	; select bank4/5
 13100  0799  3F52               	moviw [18]fsr1
 13101  079A  0022               	movlb	2	; select bank2
 13102  079B  00B2               	movwf	(_RF_Data^(0+256)+18)
 13103                           
 13104                           ;RF_Control_B1.c: 244: RF_Data[19] = product->Data[19];
 13105  079C  0020               	movlb	0	; select bank0
 13106  079D  086E               	movf	_product,w
 13107  079E  0086               	movwf	6
 13108  079F  3002               	movlw	2	; select bank4/5
 13109  07A0  0087               	movwf	7
 13110  07A1  3002               	movlw	2	; select bank4/5
 13111  07A2  3F53               	moviw [19]fsr1
 13112  07A3  0022               	movlb	2	; select bank2
 13113  07A4  00B3               	movwf	(_RF_Data^(0+256)+19)
 13114                           
 13115                           ;RF_Control_B1.c: 245: RF_Data[20] = 209;
 13116  07A5  30D1               	movlw	209
 13117  07A6  0020               	movlb	0	; select bank0
 13118  07A7  00A0               	movwf	??_setTxData
 13119  07A8  0820               	movf	??_setTxData,w
 13120  07A9  0022               	movlb	2	; select bank2
 13121  07AA  00B4               	movwf	(_RF_Data^(0+256)+20)
 13122  07AB  0008               	return
 13123  07AC                     __end_of_setTxData:	
 13124                           
 13125                           	psect	text77
 13126  1748                     __ptext77:	
 13127 ;; *************** function _setRF_DimmerLights *****************
 13128 ;; Defined at:
 13129 ;;		line 483 in file "../src/RF_Control_B1.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  lights          1    wreg     unsigned char 
 13132 ;;  on              1    0[BANK0 ] unsigned char 
 13133 ;; Auto vars:     Size  Location     Type
 13134 ;;  lights          1    4[BANK0 ] unsigned char 
 13135 ;;  status          1    3[BANK0 ] unsigned char 
 13136 ;; Return value:  Size  Location     Type
 13137 ;;		None               void
 13138 ;; Registers used:
 13139 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13145 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;Total ram usage:        5 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:    5
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		_setDimmerLights
 13156 ;;		_setDimmerLights_Adj
 13157 ;;		_setRFSW_Control
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           
 13162                           ;psect for function _setRF_DimmerLights
 13163  1748                     _setRF_DimmerLights:	
 13164                           
 13165                           ;incstack = 0
 13166                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13167                           ;setRF_DimmerLights@lights stored from wreg
 13168  1748  0020               	movlb	0	; select bank0
 13169  1749  00A4               	movwf	setRF_DimmerLights@lights
 13170                           
 13171                           ;RF_Control_B1.c: 484: char status = 1;
 13172  174A  01A3               	clrf	setRF_DimmerLights@status
 13173  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13174                           
 13175                           ;RF_Control_B1.c: 485: status <<= (lights - 1);
 13176  174C  0824               	movf	setRF_DimmerLights@lights,w
 13177  174D  3EFF               	addlw	-1
 13178  174E  0A89               	incf	9,f
 13179  174F  2F52               	goto	u4940
 13180  1750                     u4945:	
 13181  1750  1003               	clrc
 13182  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13183  1752                     u4940:	
 13184  1752  3EFF               	addlw	-1
 13185  1753  1D03               	skipz
 13186  1754  2F50               	goto	u4945
 13187                           
 13188                           ;RF_Control_B1.c: 486: product->Data[11]=lights;
 13189  1755  0824               	movf	setRF_DimmerLights@lights,w
 13190  1756  00A1               	movwf	??_setRF_DimmerLights
 13191  1757  086E               	movf	_product,w
 13192  1758  3E0B               	addlw	11
 13193  1759  0086               	movwf	6
 13194  175A  3002               	movlw	2	; select bank4/5
 13195  175B  0087               	movwf	7
 13196  175C  0821               	movf	??_setRF_DimmerLights,w
 13197  175D  0081               	movwf	1
 13198                           
 13199                           ;RF_Control_B1.c: 494: product->Data[9]=product->Data[20 + lights];
 13200  175E  0824               	movf	setRF_DimmerLights@lights,w
 13201  175F  3E14               	addlw	20
 13202  1760  076E               	addwf	_product,w
 13203  1761  00A1               	movwf	??_setRF_DimmerLights
 13204  1762  0821               	movf	??_setRF_DimmerLights,w
 13205  1763  0086               	movwf	6
 13206  1764  3002               	movlw	2	; select bank4/5
 13207  1765  0087               	movwf	7
 13208  1766  0801               	movf	1,w
 13209  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13210  1768  086E               	movf	_product,w
 13211  1769  3E09               	addlw	9
 13212  176A  0086               	movwf	6
 13213  176B  3002               	movlw	2	; select bank4/5
 13214  176C  0087               	movwf	7
 13215  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13216  176E  0081               	movwf	1
 13217                           
 13218                           ;RF_Control_B1.c: 495: product->Data[17]=product->Data[26 + lights];
 13219  176F  0824               	movf	setRF_DimmerLights@lights,w
 13220  1770  3E1A               	addlw	26
 13221  1771  076E               	addwf	_product,w
 13222  1772  00A1               	movwf	??_setRF_DimmerLights
 13223  1773  0821               	movf	??_setRF_DimmerLights,w
 13224  1774  0086               	movwf	6
 13225  1775  3002               	movlw	2	; select bank4/5
 13226  1776  0087               	movwf	7
 13227  1777  0801               	movf	1,w
 13228  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13229  1779  086E               	movf	_product,w
 13230  177A  3E11               	addlw	17
 13231  177B  0086               	movwf	6
 13232  177C  3002               	movlw	2	; select bank4/5
 13233  177D  0087               	movwf	7
 13234  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13235  177F  0081               	movwf	1
 13236                           
 13237                           ;RF_Control_B1.c: 496: if (on == 1) {
 13238  1780  0820               	movf	setRF_DimmerLights@on,w
 13239  1781  3A01               	xorlw	1
 13240  1782  1D03               	skipz
 13241  1783  2F94               	goto	l5956
 13242                           
 13243                           ;RF_Control_B1.c: 497: product->Data[15]=(product->Data[15] | status);
 13244  1784  086E               	movf	_product,w
 13245  1785  3E0F               	addlw	15
 13246  1786  0086               	movwf	6
 13247  1787  3002               	movlw	2	; select bank4/5
 13248  1788  0087               	movwf	7
 13249  1789  0801               	movf	1,w
 13250  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13251  178B  00A1               	movwf	??_setRF_DimmerLights
 13252  178C  086E               	movf	_product,w
 13253  178D  3E0F               	addlw	15
 13254  178E  0086               	movwf	6
 13255  178F  3002               	movlw	2	; select bank4/5
 13256  1790  0087               	movwf	7
 13257  1791  0821               	movf	??_setRF_DimmerLights,w
 13258  1792  0081               	movwf	1
 13259                           
 13260                           ;RF_Control_B1.c: 498: } else {
 13261  1793  0008               	return
 13262  1794                     l5956:	
 13263                           
 13264                           ;RF_Control_B1.c: 499: product->Data[15]=(product->Data[15]&(~status));
 13265  1794  086E               	movf	_product,w
 13266  1795  3E0F               	addlw	15
 13267  1796  0086               	movwf	6
 13268  1797  3002               	movlw	2	; select bank4/5
 13269  1798  0087               	movwf	7
 13270  1799  0923               	comf	setRF_DimmerLights@status,w
 13271  179A  0501               	andwf	1,w
 13272  179B  00A1               	movwf	??_setRF_DimmerLights
 13273  179C  086E               	movf	_product,w
 13274  179D  3E0F               	addlw	15
 13275  179E  0086               	movwf	6
 13276  179F  3002               	movlw	2	; select bank4/5
 13277  17A0  0087               	movwf	7
 13278  17A1  0821               	movf	??_setRF_DimmerLights,w
 13279  17A2  0081               	movwf	1
 13280  17A3  0008               	return
 13281  17A4                     __end_of_setRF_DimmerLights:	
 13282                           
 13283                           	psect	text78
 13284  0A43                     __ptext78:	
 13285 ;; *************** function _setPercentValue *****************
 13286 ;; Defined at:
 13287 ;;		line 890 in file "../src/Dimmer_B1.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  value           1    wreg     unsigned char 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  value           1   62[BANK0 ] unsigned char 
 13292 ;;  i               3   63[BANK0 ] float 
 13293 ;; Return value:  Size  Location     Type
 13294 ;;                  1    wreg      unsigned char 
 13295 ;; Registers used:
 13296 ;;		wreg, status,2, status,0, pclath, cstack
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;Total ram usage:        6 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:    7
 13309 ;; This function calls:
 13310 ;;		___awtoft
 13311 ;;		___ftadd
 13312 ;;		___ftdiv
 13313 ;;		___ftneg
 13314 ;;		___fttol
 13315 ;; This function is called by:
 13316 ;;		_setDimmerLights
 13317 ;;		_setDimmerLights_Adj
 13318 ;;		_Flash_Memory_Initialization
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           
 13323                           ;psect for function _setPercentValue
 13324  0A43                     _setPercentValue:	
 13325                           
 13326                           ;incstack = 0
 13327                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13328                           ;setPercentValue@value stored from wreg
 13329  0A43  0020               	movlb	0	; select bank0
 13330  0A44  00DE               	movwf	setPercentValue@value
 13331                           
 13332                           ;Dimmer_B1.c: 898: float i = ((char)(90*0.8)) - ((char)(15*0.8));
 13333  0A45  3000               	movlw	0
 13334  0A46  00DF               	movwf	setPercentValue@i
 13335  0A47  3070               	movlw	112
 13336  0A48  00E0               	movwf	setPercentValue@i+1
 13337  0A49  3042               	movlw	66
 13338  0A4A  00E1               	movwf	setPercentValue@i+2
 13339                           
 13340                           ;Dimmer_B1.c: 899: i /= 100;
 13341  0A4B  3000               	movlw	0
 13342  0A4C  00AE               	movwf	___ftdiv@f2
 13343  0A4D  30C8               	movlw	200
 13344  0A4E  00AF               	movwf	___ftdiv@f2+1
 13345  0A4F  3042               	movlw	66
 13346  0A50  00B0               	movwf	___ftdiv@f2+2
 13347  0A51  085F               	movf	setPercentValue@i,w
 13348  0A52  00B1               	movwf	___ftdiv@f1
 13349  0A53  0860               	movf	setPercentValue@i+1,w
 13350  0A54  00B2               	movwf	___ftdiv@f1+1
 13351  0A55  0861               	movf	setPercentValue@i+2,w
 13352  0A56  00B3               	movwf	___ftdiv@f1+2
 13353  0A57  318E  26A3  318A   	fcall	___ftdiv
 13354  0A5A  0020               	movlb	0	; select bank0
 13355  0A5B  082E               	movf	?___ftdiv,w
 13356  0A5C  00DF               	movwf	setPercentValue@i
 13357  0A5D  082F               	movf	?___ftdiv+1,w
 13358  0A5E  00E0               	movwf	setPercentValue@i+1
 13359  0A5F  0830               	movf	?___ftdiv+2,w
 13360  0A60  00E1               	movwf	setPercentValue@i+2
 13361                           
 13362                           ;Dimmer_B1.c: 901: return (char) (100 - ((((char)(90*0.8)) - value) / i));
 13363  0A61  085E               	movf	setPercentValue@value,w
 13364  0A62  00DC               	movwf	??_setPercentValue
 13365  0A63  01DD               	clrf	??_setPercentValue+1
 13366  0A64  09DC               	comf	??_setPercentValue,f
 13367  0A65  09DD               	comf	??_setPercentValue+1,f
 13368  0A66  0ADC               	incf	??_setPercentValue,f
 13369  0A67  1903               	skipnz
 13370  0A68  0ADD               	incf	??_setPercentValue+1,f
 13371  0A69  085C               	movf	??_setPercentValue,w
 13372  0A6A  3E48               	addlw	72
 13373  0A6B  00A8               	movwf	___awtoft@c
 13374  0A6C  3000               	movlw	0
 13375  0A6D  3D5D               	addwfc	??_setPercentValue+1,w
 13376  0A6E  00A9               	movwf	___awtoft@c+1
 13377  0A6F  3190  2066  318A   	fcall	___awtoft
 13378  0A72  0020               	movlb	0	; select bank0
 13379  0A73  0828               	movf	?___awtoft,w
 13380  0A74  00B1               	movwf	___ftdiv@f1
 13381  0A75  0829               	movf	?___awtoft+1,w
 13382  0A76  00B2               	movwf	___ftdiv@f1+1
 13383  0A77  082A               	movf	?___awtoft+2,w
 13384  0A78  00B3               	movwf	___ftdiv@f1+2
 13385  0A79  085F               	movf	setPercentValue@i,w
 13386  0A7A  00AE               	movwf	___ftdiv@f2
 13387  0A7B  0860               	movf	setPercentValue@i+1,w
 13388  0A7C  00AF               	movwf	___ftdiv@f2+1
 13389  0A7D  0861               	movf	setPercentValue@i+2,w
 13390  0A7E  00B0               	movwf	___ftdiv@f2+2
 13391  0A7F  318E  26A3  318A   	fcall	___ftdiv
 13392  0A82  0020               	movlb	0	; select bank0
 13393  0A83  082E               	movf	?___ftdiv,w
 13394  0A84  00BE               	movwf	___ftneg@f1
 13395  0A85  082F               	movf	?___ftdiv+1,w
 13396  0A86  00BF               	movwf	___ftneg@f1+1
 13397  0A87  0830               	movf	?___ftdiv+2,w
 13398  0A88  00C0               	movwf	___ftneg@f1+2
 13399  0A89  319C  244F  318A   	fcall	___ftneg
 13400  0A8C  0020               	movlb	0	; select bank0
 13401  0A8D  083E               	movf	?___ftneg,w
 13402  0A8E  00C4               	movwf	___ftadd@f2
 13403  0A8F  083F               	movf	?___ftneg+1,w
 13404  0A90  00C5               	movwf	___ftadd@f2+1
 13405  0A91  0840               	movf	?___ftneg+2,w
 13406  0A92  00C6               	movwf	___ftadd@f2+2
 13407  0A93  3000               	movlw	0
 13408  0A94  00C1               	movwf	___ftadd@f1
 13409  0A95  30C8               	movlw	200
 13410  0A96  00C2               	movwf	___ftadd@f1+1
 13411  0A97  3042               	movlw	66
 13412  0A98  00C3               	movwf	___ftadd@f1+2
 13413  0A99  3184  243C  318A   	fcall	___ftadd
 13414  0A9C  0020               	movlb	0	; select bank0
 13415  0A9D  0841               	movf	?___ftadd,w
 13416  0A9E  00CE               	movwf	___fttol@f1
 13417  0A9F  0842               	movf	?___ftadd+1,w
 13418  0AA0  00CF               	movwf	___fttol@f1+1
 13419  0AA1  0843               	movf	?___ftadd+2,w
 13420  0AA2  00D0               	movwf	___fttol@f1+2
 13421  0AA3  318C  245E         	fcall	___fttol
 13422  0AA5  0020               	movlb	0	; select bank0
 13423  0AA6  084E               	movf	?___fttol,w
 13424  0AA7  0008               	return
 13425  0AA8                     __end_of_setPercentValue:	
 13426                           
 13427                           	psect	text79
 13428  0C5E                     __ptext79:	
 13429 ;; *************** function ___fttol *****************
 13430 ;; Defined at:
 13431 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13432 ;; Parameters:    Size  Location     Type
 13433 ;;  f1              3   46[BANK0 ] float 
 13434 ;; Auto vars:     Size  Location     Type
 13435 ;;  lval            4   55[BANK0 ] unsigned long 
 13436 ;;  exp1            1   59[BANK0 ] unsigned char 
 13437 ;;  sign1           1   54[BANK0 ] unsigned char 
 13438 ;; Return value:  Size  Location     Type
 13439 ;;                  4   46[BANK0 ] long 
 13440 ;; Registers used:
 13441 ;;		wreg, status,2, status,0
 13442 ;; Tracked objects:
 13443 ;;		On entry : 0/0
 13444 ;;		On exit  : 0/0
 13445 ;;		Unchanged: 0/0
 13446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13447 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;Total ram usage:       14 bytes
 13452 ;; Hardware stack levels used:    1
 13453 ;; Hardware stack levels required when called:    5
 13454 ;; This function calls:
 13455 ;;		Nothing
 13456 ;; This function is called by:
 13457 ;;		_getPercentValue
 13458 ;;		_setPercentValue
 13459 ;; This function uses a non-reentrant model
 13460 ;;
 13461                           
 13462                           
 13463                           ;psect for function ___fttol
 13464  0C5E                     ___fttol:	
 13465                           
 13466                           ;incstack = 0
 13467                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13468  0C5E  0020               	movlb	0	; select bank0
 13469  0C5F  084E               	movf	___fttol@f1,w
 13470  0C60  00D2               	movwf	??___fttol
 13471  0C61  084F               	movf	___fttol@f1+1,w
 13472  0C62  00D3               	movwf	??___fttol+1
 13473  0C63  0850               	movf	___fttol@f1+2,w
 13474  0C64  00D4               	movwf	??___fttol+2
 13475  0C65  1003               	clrc
 13476  0C66  0D53               	rlf	??___fttol+1,w
 13477  0C67  0D54               	rlf	??___fttol+2,w
 13478  0C68  00D5               	movwf	??___fttol+3
 13479  0C69  0855               	movf	??___fttol+3,w
 13480  0C6A  00DB               	movwf	___fttol@exp1
 13481  0C6B  08DB               	movf	___fttol@exp1,f
 13482  0C6C  1D03               	skipz
 13483  0C6D  2C77               	goto	l5698
 13484  0C6E  3000               	movlw	0
 13485  0C6F  00D1               	movwf	?___fttol+3
 13486  0C70  3000               	movlw	0
 13487  0C71  00D0               	movwf	?___fttol+2
 13488  0C72  3000               	movlw	0
 13489  0C73  00CF               	movwf	?___fttol+1
 13490  0C74  3000               	movlw	0
 13491  0C75  00CE               	movwf	?___fttol
 13492  0C76  0008               	return
 13493  0C77                     l5698:	
 13494  0C77  084E               	movf	___fttol@f1,w
 13495  0C78  00D2               	movwf	??___fttol
 13496  0C79  084F               	movf	___fttol@f1+1,w
 13497  0C7A  00D3               	movwf	??___fttol+1
 13498  0C7B  0850               	movf	___fttol@f1+2,w
 13499  0C7C  00D4               	movwf	??___fttol+2
 13500  0C7D  3017               	movlw	23
 13501  0C7E                     u4575:	
 13502  0C7E  36D4               	lsrf	??___fttol+2,f
 13503  0C7F  0CD3               	rrf	??___fttol+1,f
 13504  0C80  0CD2               	rrf	??___fttol,f
 13505  0C81  0B89               	decfsz	9,f
 13506  0C82  2C7E               	goto	u4575
 13507  0C83  0852               	movf	??___fttol,w
 13508  0C84  00D5               	movwf	??___fttol+3
 13509  0C85  0855               	movf	??___fttol+3,w
 13510  0C86  00D6               	movwf	___fttol@sign1
 13511  0C87  17CF               	bsf	___fttol@f1+1,7
 13512  0C88  30FF               	movlw	255
 13513  0C89  05CE               	andwf	___fttol@f1,f
 13514  0C8A  30FF               	movlw	255
 13515  0C8B  05CF               	andwf	___fttol@f1+1,f
 13516  0C8C  3000               	movlw	0
 13517  0C8D  05D0               	andwf	___fttol@f1+2,f
 13518  0C8E  084E               	movf	___fttol@f1,w
 13519  0C8F  00D7               	movwf	___fttol@lval
 13520  0C90  084F               	movf	___fttol@f1+1,w
 13521  0C91  00D8               	movwf	___fttol@lval+1
 13522  0C92  0850               	movf	___fttol@f1+2,w
 13523  0C93  00D9               	movwf	___fttol@lval+2
 13524  0C94  01DA               	clrf	___fttol@lval+3
 13525  0C95  308E               	movlw	142
 13526  0C96  02DB               	subwf	___fttol@exp1,f
 13527  0C97  1FDB               	btfss	___fttol@exp1,7
 13528  0C98  2CB5               	goto	l5718
 13529  0C99  085B               	movf	___fttol@exp1,w
 13530  0C9A  3A80               	xorlw	128
 13531  0C9B  3E8F               	addlw	143
 13532  0C9C  1803               	skipnc
 13533  0C9D  2CA7               	goto	l5716
 13534  0C9E  3000               	movlw	0
 13535  0C9F  00D1               	movwf	?___fttol+3
 13536  0CA0  3000               	movlw	0
 13537  0CA1  00D0               	movwf	?___fttol+2
 13538  0CA2  3000               	movlw	0
 13539  0CA3  00CF               	movwf	?___fttol+1
 13540  0CA4  3000               	movlw	0
 13541  0CA5  00CE               	movwf	?___fttol
 13542  0CA6  0008               	return
 13543  0CA7                     l5716:	
 13544  0CA7  3001               	movlw	1
 13545  0CA8                     u4605:	
 13546  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13547  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13548  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13549  0CAB  0CD7               	rrf	___fttol@lval,f
 13550  0CAC  0B89               	decfsz	9,f
 13551  0CAD  2CA8               	goto	u4605
 13552  0CAE  3001               	movlw	1
 13553  0CAF  00D2               	movwf	??___fttol
 13554  0CB0  0852               	movf	??___fttol,w
 13555  0CB1  07DB               	addwf	___fttol@exp1,f
 13556  0CB2  1903               	btfsc	3,2
 13557  0CB3  2CCE               	goto	l5728
 13558  0CB4  2CA7               	goto	l5716
 13559  0CB5                     l5718:	
 13560  0CB5  3018               	movlw	24
 13561  0CB6  025B               	subwf	___fttol@exp1,w
 13562  0CB7  1C03               	skipc
 13563  0CB8  2CCB               	goto	l5726
 13564  0CB9  3000               	movlw	0
 13565  0CBA  00D1               	movwf	?___fttol+3
 13566  0CBB  3000               	movlw	0
 13567  0CBC  00D0               	movwf	?___fttol+2
 13568  0CBD  3000               	movlw	0
 13569  0CBE  00CF               	movwf	?___fttol+1
 13570  0CBF  3000               	movlw	0
 13571  0CC0  00CE               	movwf	?___fttol
 13572  0CC1  0008               	return
 13573  0CC2                     l5724:	
 13574  0CC2  3001               	movlw	1
 13575  0CC3                     u4635:	
 13576  0CC3  35D7               	lslf	___fttol@lval,f
 13577  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13578  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13579  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13580  0CC7  0B89               	decfsz	9,f
 13581  0CC8  2CC3               	goto	u4635
 13582  0CC9  3001               	movlw	1
 13583  0CCA  02DB               	subwf	___fttol@exp1,f
 13584  0CCB                     l5726:	
 13585  0CCB  08DB               	movf	___fttol@exp1,f
 13586  0CCC  1D03               	skipz
 13587  0CCD  2CC2               	goto	l5724
 13588  0CCE                     l5728:	
 13589  0CCE  0856               	movf	___fttol@sign1,w
 13590  0CCF  1903               	btfsc	3,2
 13591  0CD0  2CDC               	goto	l5732
 13592  0CD1  09D7               	comf	___fttol@lval,f
 13593  0CD2  09D8               	comf	___fttol@lval+1,f
 13594  0CD3  09D9               	comf	___fttol@lval+2,f
 13595  0CD4  09DA               	comf	___fttol@lval+3,f
 13596  0CD5  0AD7               	incf	___fttol@lval,f
 13597  0CD6  1903               	skipnz
 13598  0CD7  0AD8               	incf	___fttol@lval+1,f
 13599  0CD8  1903               	skipnz
 13600  0CD9  0AD9               	incf	___fttol@lval+2,f
 13601  0CDA  1903               	skipnz
 13602  0CDB  0ADA               	incf	___fttol@lval+3,f
 13603  0CDC                     l5732:	
 13604  0CDC  085A               	movf	___fttol@lval+3,w
 13605  0CDD  00D1               	movwf	?___fttol+3
 13606  0CDE  0859               	movf	___fttol@lval+2,w
 13607  0CDF  00D0               	movwf	?___fttol+2
 13608  0CE0  0858               	movf	___fttol@lval+1,w
 13609  0CE1  00CF               	movwf	?___fttol+1
 13610  0CE2  0857               	movf	___fttol@lval,w
 13611  0CE3  00CE               	movwf	?___fttol
 13612  0CE4  0008               	return
 13613  0CE5                     __end_of___fttol:	
 13614                           
 13615                           	psect	text80
 13616  1C4F                     __ptext80:	
 13617 ;; *************** function ___ftneg *****************
 13618 ;; Defined at:
 13619 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  f1              3   30[BANK0 ] float 
 13622 ;; Auto vars:     Size  Location     Type
 13623 ;;		None
 13624 ;; Return value:  Size  Location     Type
 13625 ;;                  3   30[BANK0 ] float 
 13626 ;; Registers used:
 13627 ;;		wreg
 13628 ;; Tracked objects:
 13629 ;;		On entry : 0/0
 13630 ;;		On exit  : 0/0
 13631 ;;		Unchanged: 0/0
 13632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13633 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;Total ram usage:        3 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:    5
 13640 ;; This function calls:
 13641 ;;		Nothing
 13642 ;; This function is called by:
 13643 ;;		_getPercentValue
 13644 ;;		_setPercentValue
 13645 ;; This function uses a non-reentrant model
 13646 ;;
 13647                           
 13648                           
 13649                           ;psect for function ___ftneg
 13650  1C4F                     ___ftneg:	
 13651                           
 13652                           ;incstack = 0
 13653                           ; Regs used in ___ftneg: [wreg]
 13654  1C4F  0020               	movlb	0	; select bank0
 13655  1C50  0840               	movf	___ftneg@f1+2,w
 13656  1C51  043F               	iorwf	___ftneg@f1+1,w
 13657  1C52  043E               	iorwf	___ftneg@f1,w
 13658  1C53  1903               	skipnz
 13659  1C54  0008               	return
 13660  1C55  3080               	movlw	128
 13661  1C56  06C0               	xorwf	___ftneg@f1+2,f
 13662  1C57  0008               	return
 13663  1C58                     __end_of___ftneg:	
 13664                           
 13665                           	psect	text81
 13666  0EA3                     __ptext81:	
 13667 ;; *************** function ___ftdiv *****************
 13668 ;; Defined at:
 13669 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13670 ;; Parameters:    Size  Location     Type
 13671 ;;  f2              3   14[BANK0 ] float 
 13672 ;;  f1              3   17[BANK0 ] float 
 13673 ;; Auto vars:     Size  Location     Type
 13674 ;;  f3              3   25[BANK0 ] float 
 13675 ;;  sign            1   29[BANK0 ] unsigned char 
 13676 ;;  exp             1   28[BANK0 ] unsigned char 
 13677 ;;  cntr            1   24[BANK0 ] unsigned char 
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  3   14[BANK0 ] float 
 13680 ;; Registers used:
 13681 ;;		wreg, status,2, status,0, pclath, cstack
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13687 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;Total ram usage:       16 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    6
 13694 ;; This function calls:
 13695 ;;		___ftpack
 13696 ;; This function is called by:
 13697 ;;		_getPercentValue
 13698 ;;		_setPercentValue
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           
 13703                           ;psect for function ___ftdiv
 13704  0EA3                     ___ftdiv:	
 13705                           
 13706                           ;incstack = 0
 13707                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13708  0EA3  0020               	movlb	0	; select bank0
 13709  0EA4  0831               	movf	___ftdiv@f1,w
 13710  0EA5  00B4               	movwf	??___ftdiv
 13711  0EA6  0832               	movf	___ftdiv@f1+1,w
 13712  0EA7  00B5               	movwf	??___ftdiv+1
 13713  0EA8  0833               	movf	___ftdiv@f1+2,w
 13714  0EA9  00B6               	movwf	??___ftdiv+2
 13715  0EAA  1003               	clrc
 13716  0EAB  0D35               	rlf	??___ftdiv+1,w
 13717  0EAC  0D36               	rlf	??___ftdiv+2,w
 13718  0EAD  00B7               	movwf	??___ftdiv+3
 13719  0EAE  0837               	movf	??___ftdiv+3,w
 13720  0EAF  00BC               	movwf	___ftdiv@exp
 13721  0EB0  08BC               	movf	___ftdiv@exp,f
 13722  0EB1  1D03               	skipz
 13723  0EB2  2EBA               	goto	l5598
 13724  0EB3  3000               	movlw	0
 13725  0EB4  00AE               	movwf	?___ftdiv
 13726  0EB5  3000               	movlw	0
 13727  0EB6  00AF               	movwf	?___ftdiv+1
 13728  0EB7  3000               	movlw	0
 13729  0EB8  00B0               	movwf	?___ftdiv+2
 13730  0EB9  0008               	return
 13731  0EBA                     l5598:	
 13732  0EBA  082E               	movf	___ftdiv@f2,w
 13733  0EBB  00B4               	movwf	??___ftdiv
 13734  0EBC  082F               	movf	___ftdiv@f2+1,w
 13735  0EBD  00B5               	movwf	??___ftdiv+1
 13736  0EBE  0830               	movf	___ftdiv@f2+2,w
 13737  0EBF  00B6               	movwf	??___ftdiv+2
 13738  0EC0  1003               	clrc
 13739  0EC1  0D35               	rlf	??___ftdiv+1,w
 13740  0EC2  0D36               	rlf	??___ftdiv+2,w
 13741  0EC3  00B7               	movwf	??___ftdiv+3
 13742  0EC4  0837               	movf	??___ftdiv+3,w
 13743  0EC5  00BD               	movwf	___ftdiv@sign
 13744  0EC6  08BD               	movf	___ftdiv@sign,f
 13745  0EC7  1D03               	skipz
 13746  0EC8  2ED0               	goto	l5604
 13747  0EC9  3000               	movlw	0
 13748  0ECA  00AE               	movwf	?___ftdiv
 13749  0ECB  3000               	movlw	0
 13750  0ECC  00AF               	movwf	?___ftdiv+1
 13751  0ECD  3000               	movlw	0
 13752  0ECE  00B0               	movwf	?___ftdiv+2
 13753  0ECF  0008               	return
 13754  0ED0                     l5604:	
 13755  0ED0  3000               	movlw	0
 13756  0ED1  00B9               	movwf	___ftdiv@f3
 13757  0ED2  3000               	movlw	0
 13758  0ED3  00BA               	movwf	___ftdiv@f3+1
 13759  0ED4  3000               	movlw	0
 13760  0ED5  00BB               	movwf	___ftdiv@f3+2
 13761  0ED6  3089               	movlw	137
 13762  0ED7  073D               	addwf	___ftdiv@sign,w
 13763  0ED8  00B4               	movwf	??___ftdiv
 13764  0ED9  0834               	movf	??___ftdiv,w
 13765  0EDA  02BC               	subwf	___ftdiv@exp,f
 13766  0EDB  0831               	movf	___ftdiv@f1,w
 13767  0EDC  00B4               	movwf	??___ftdiv
 13768  0EDD  0832               	movf	___ftdiv@f1+1,w
 13769  0EDE  00B5               	movwf	??___ftdiv+1
 13770  0EDF  0833               	movf	___ftdiv@f1+2,w
 13771  0EE0  00B6               	movwf	??___ftdiv+2
 13772  0EE1  3010               	movlw	16
 13773  0EE2                     u4375:	
 13774  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13775  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13776  0EE4  0CB4               	rrf	??___ftdiv,f
 13777  0EE5  0B89               	decfsz	9,f
 13778  0EE6  2EE2               	goto	u4375
 13779  0EE7  0834               	movf	??___ftdiv,w
 13780  0EE8  00B7               	movwf	??___ftdiv+3
 13781  0EE9  0837               	movf	??___ftdiv+3,w
 13782  0EEA  00BD               	movwf	___ftdiv@sign
 13783  0EEB  082E               	movf	___ftdiv@f2,w
 13784  0EEC  00B4               	movwf	??___ftdiv
 13785  0EED  082F               	movf	___ftdiv@f2+1,w
 13786  0EEE  00B5               	movwf	??___ftdiv+1
 13787  0EEF  0830               	movf	___ftdiv@f2+2,w
 13788  0EF0  00B6               	movwf	??___ftdiv+2
 13789  0EF1  3010               	movlw	16
 13790  0EF2                     u4385:	
 13791  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13792  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13793  0EF4  0CB4               	rrf	??___ftdiv,f
 13794  0EF5  0B89               	decfsz	9,f
 13795  0EF6  2EF2               	goto	u4385
 13796  0EF7  0834               	movf	??___ftdiv,w
 13797  0EF8  00B7               	movwf	??___ftdiv+3
 13798  0EF9  0837               	movf	??___ftdiv+3,w
 13799  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13800  0EFB  3080               	movlw	128
 13801  0EFC  00B4               	movwf	??___ftdiv
 13802  0EFD  0834               	movf	??___ftdiv,w
 13803  0EFE  05BD               	andwf	___ftdiv@sign,f
 13804  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13805  0F00  30FF               	movlw	255
 13806  0F01  05B1               	andwf	___ftdiv@f1,f
 13807  0F02  30FF               	movlw	255
 13808  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13809  0F04  3000               	movlw	0
 13810  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13811  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13812  0F07  30FF               	movlw	255
 13813  0F08  05AE               	andwf	___ftdiv@f2,f
 13814  0F09  30FF               	movlw	255
 13815  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13816  0F0B  3000               	movlw	0
 13817  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13818  0F0D  3018               	movlw	24
 13819  0F0E  00B4               	movwf	??___ftdiv
 13820  0F0F  0834               	movf	??___ftdiv,w
 13821  0F10  00B8               	movwf	___ftdiv@cntr
 13822  0F11                     l5618:	
 13823  0F11  3001               	movlw	1
 13824  0F12                     u4395:	
 13825  0F12  35B9               	lslf	___ftdiv@f3,f
 13826  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13827  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13828  0F15  0B89               	decfsz	9,f
 13829  0F16  2F12               	goto	u4395
 13830  0F17  0830               	movf	___ftdiv@f2+2,w
 13831  0F18  0233               	subwf	___ftdiv@f1+2,w
 13832  0F19  1D03               	skipz
 13833  0F1A  2F21               	goto	u4405
 13834  0F1B  082F               	movf	___ftdiv@f2+1,w
 13835  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13836  0F1D  1D03               	skipz
 13837  0F1E  2F21               	goto	u4405
 13838  0F1F  082E               	movf	___ftdiv@f2,w
 13839  0F20  0231               	subwf	___ftdiv@f1,w
 13840  0F21                     u4405:	
 13841  0F21  1C03               	skipc
 13842  0F22  2F2A               	goto	l5626
 13843  0F23  082E               	movf	___ftdiv@f2,w
 13844  0F24  02B1               	subwf	___ftdiv@f1,f
 13845  0F25  082F               	movf	___ftdiv@f2+1,w
 13846  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13847  0F27  0830               	movf	___ftdiv@f2+2,w
 13848  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13849  0F29  1439               	bsf	___ftdiv@f3,0
 13850  0F2A                     l5626:	
 13851  0F2A  3001               	movlw	1
 13852  0F2B                     u4415:	
 13853  0F2B  35B1               	lslf	___ftdiv@f1,f
 13854  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13855  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13856  0F2E  0B89               	decfsz	9,f
 13857  0F2F  2F2B               	goto	u4415
 13858  0F30  3001               	movlw	1
 13859  0F31  02B8               	subwf	___ftdiv@cntr,f
 13860  0F32  1D03               	btfss	3,2
 13861  0F33  2F11               	goto	l5618
 13862  0F34  0839               	movf	___ftdiv@f3,w
 13863  0F35  00A0               	movwf	___ftpack@arg
 13864  0F36  083A               	movf	___ftdiv@f3+1,w
 13865  0F37  00A1               	movwf	___ftpack@arg+1
 13866  0F38  083B               	movf	___ftdiv@f3+2,w
 13867  0F39  00A2               	movwf	___ftpack@arg+2
 13868  0F3A  083C               	movf	___ftdiv@exp,w
 13869  0F3B  00B4               	movwf	??___ftdiv
 13870  0F3C  0834               	movf	??___ftdiv,w
 13871  0F3D  00A3               	movwf	___ftpack@exp
 13872  0F3E  083D               	movf	___ftdiv@sign,w
 13873  0F3F  00B5               	movwf	??___ftdiv+1
 13874  0F40  0835               	movf	??___ftdiv+1,w
 13875  0F41  00A4               	movwf	___ftpack@sign
 13876  0F42  3189  2181         	fcall	___ftpack
 13877  0F44  0020               	movlb	0	; select bank0
 13878  0F45  0820               	movf	?___ftpack,w
 13879  0F46  00AE               	movwf	?___ftdiv
 13880  0F47  0821               	movf	?___ftpack+1,w
 13881  0F48  00AF               	movwf	?___ftdiv+1
 13882  0F49  0822               	movf	?___ftpack+2,w
 13883  0F4A  00B0               	movwf	?___ftdiv+2
 13884  0F4B  0008               	return
 13885  0F4C                     __end_of___ftdiv:	
 13886                           
 13887                           	psect	text82
 13888  043C                     __ptext82:	
 13889 ;; *************** function ___ftadd *****************
 13890 ;; Defined at:
 13891 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  f1              3   33[BANK0 ] float 
 13894 ;;  f2              3   36[BANK0 ] float 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;  exp1            1   45[BANK0 ] unsigned char 
 13897 ;;  exp2            1   44[BANK0 ] unsigned char 
 13898 ;;  sign            1   43[BANK0 ] unsigned char 
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  3   33[BANK0 ] float 
 13901 ;; Registers used:
 13902 ;;		wreg, status,2, status,0, pclath, cstack
 13903 ;; Tracked objects:
 13904 ;;		On entry : 0/0
 13905 ;;		On exit  : 0/0
 13906 ;;		Unchanged: 0/0
 13907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13908 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;Total ram usage:       13 bytes
 13913 ;; Hardware stack levels used:    1
 13914 ;; Hardware stack levels required when called:    6
 13915 ;; This function calls:
 13916 ;;		___ftpack
 13917 ;; This function is called by:
 13918 ;;		_getPercentValue
 13919 ;;		_setPercentValue
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           
 13924                           ;psect for function ___ftadd
 13925  043C                     ___ftadd:	
 13926                           
 13927                           ;incstack = 0
 13928                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13929  043C  0020               	movlb	0	; select bank0
 13930  043D  0841               	movf	___ftadd@f1,w
 13931  043E  00C7               	movwf	??___ftadd
 13932  043F  0842               	movf	___ftadd@f1+1,w
 13933  0440  00C8               	movwf	??___ftadd+1
 13934  0441  0843               	movf	___ftadd@f1+2,w
 13935  0442  00C9               	movwf	??___ftadd+2
 13936  0443  1003               	clrc
 13937  0444  0D48               	rlf	??___ftadd+1,w
 13938  0445  0D49               	rlf	??___ftadd+2,w
 13939  0446  00CA               	movwf	??___ftadd+3
 13940  0447  084A               	movf	??___ftadd+3,w
 13941  0448  00CD               	movwf	___ftadd@exp1
 13942  0449  0844               	movf	___ftadd@f2,w
 13943  044A  00C7               	movwf	??___ftadd
 13944  044B  0845               	movf	___ftadd@f2+1,w
 13945  044C  00C8               	movwf	??___ftadd+1
 13946  044D  0846               	movf	___ftadd@f2+2,w
 13947  044E  00C9               	movwf	??___ftadd+2
 13948  044F  1003               	clrc
 13949  0450  0D48               	rlf	??___ftadd+1,w
 13950  0451  0D49               	rlf	??___ftadd+2,w
 13951  0452  00CA               	movwf	??___ftadd+3
 13952  0453  084A               	movf	??___ftadd+3,w
 13953  0454  00CC               	movwf	___ftadd@exp2
 13954  0455  084D               	movf	___ftadd@exp1,w
 13955  0456  1903               	btfsc	3,2
 13956  0457  2C64               	goto	l5528
 13957  0458  084C               	movf	___ftadd@exp2,w
 13958  0459  024D               	subwf	___ftadd@exp1,w
 13959  045A  1803               	skipnc
 13960  045B  2C6B               	goto	l5532
 13961  045C  034D               	decf	___ftadd@exp1,w
 13962  045D  3AFF               	xorlw	255
 13963  045E  074C               	addwf	___ftadd@exp2,w
 13964  045F  00C7               	movwf	??___ftadd
 13965  0460  3019               	movlw	25
 13966  0461  0247               	subwf	??___ftadd,w
 13967  0462  1C03               	skipc
 13968  0463  2C6B               	goto	l5532
 13969  0464                     l5528:	
 13970  0464  0844               	movf	___ftadd@f2,w
 13971  0465  00C1               	movwf	?___ftadd
 13972  0466  0845               	movf	___ftadd@f2+1,w
 13973  0467  00C2               	movwf	?___ftadd+1
 13974  0468  0846               	movf	___ftadd@f2+2,w
 13975  0469  00C3               	movwf	?___ftadd+2
 13976  046A  0008               	return
 13977  046B                     l5532:	
 13978  046B  084C               	movf	___ftadd@exp2,w
 13979  046C  1903               	btfsc	3,2
 13980  046D  0008               	return
 13981  046E  084D               	movf	___ftadd@exp1,w
 13982  046F  024C               	subwf	___ftadd@exp2,w
 13983  0470  1803               	skipnc
 13984  0471  2C7A               	goto	l5538
 13985  0472  034C               	decf	___ftadd@exp2,w
 13986  0473  3AFF               	xorlw	255
 13987  0474  074D               	addwf	___ftadd@exp1,w
 13988  0475  00C7               	movwf	??___ftadd
 13989  0476  3019               	movlw	25
 13990  0477  0247               	subwf	??___ftadd,w
 13991  0478  1803               	btfsc	3,0
 13992  0479  0008               	return
 13993  047A                     l5538:	
 13994  047A  3006               	movlw	6
 13995  047B  00C7               	movwf	??___ftadd
 13996  047C  0847               	movf	??___ftadd,w
 13997  047D  00CB               	movwf	___ftadd@sign
 13998  047E  1BC3               	btfsc	___ftadd@f1+2,7
 13999  047F  17CB               	bsf	___ftadd@sign,7
 14000  0480  1BC6               	btfsc	___ftadd@f2+2,7
 14001  0481  174B               	bsf	___ftadd@sign,6
 14002  0482  17C2               	bsf	___ftadd@f1+1,7
 14003  0483  30FF               	movlw	255
 14004  0484  05C1               	andwf	___ftadd@f1,f
 14005  0485  30FF               	movlw	255
 14006  0486  05C2               	andwf	___ftadd@f1+1,f
 14007  0487  3000               	movlw	0
 14008  0488  05C3               	andwf	___ftadd@f1+2,f
 14009  0489  17C5               	bsf	___ftadd@f2+1,7
 14010  048A  30FF               	movlw	255
 14011  048B  05C4               	andwf	___ftadd@f2,f
 14012  048C  30FF               	movlw	255
 14013  048D  05C5               	andwf	___ftadd@f2+1,f
 14014  048E  3000               	movlw	0
 14015  048F  05C6               	andwf	___ftadd@f2+2,f
 14016  0490  084C               	movf	___ftadd@exp2,w
 14017  0491  024D               	subwf	___ftadd@exp1,w
 14018  0492  1803               	skipnc
 14019  0493  2CB6               	goto	l5560
 14020  0494                     l5550:	
 14021  0494  3001               	movlw	1
 14022  0495                     u4215:	
 14023  0495  35C4               	lslf	___ftadd@f2,f
 14024  0496  0DC5               	rlf	___ftadd@f2+1,f
 14025  0497  0DC6               	rlf	___ftadd@f2+2,f
 14026  0498  0B89               	decfsz	9,f
 14027  0499  2C95               	goto	u4215
 14028  049A  3001               	movlw	1
 14029  049B  02CC               	subwf	___ftadd@exp2,f
 14030  049C  084C               	movf	___ftadd@exp2,w
 14031  049D  064D               	xorwf	___ftadd@exp1,w
 14032  049E  1903               	skipnz
 14033  049F  2CB1               	goto	l5558
 14034  04A0  3001               	movlw	1
 14035  04A1  02CB               	subwf	___ftadd@sign,f
 14036  04A2  084B               	movf	___ftadd@sign,w
 14037  04A3  3907               	andlw	7
 14038  04A4  1903               	btfsc	3,2
 14039  04A5  2CB1               	goto	l5558
 14040  04A6  2C94               	goto	l5550
 14041  04A7                     l5556:	
 14042  04A7  3001               	movlw	1
 14043  04A8                     u4245:	
 14044  04A8  36C3               	lsrf	___ftadd@f1+2,f
 14045  04A9  0CC2               	rrf	___ftadd@f1+1,f
 14046  04AA  0CC1               	rrf	___ftadd@f1,f
 14047  04AB  0B89               	decfsz	9,f
 14048  04AC  2CA8               	goto	u4245
 14049  04AD  3001               	movlw	1
 14050  04AE  00C7               	movwf	??___ftadd
 14051  04AF  0847               	movf	??___ftadd,w
 14052  04B0  07CD               	addwf	___ftadd@exp1,f
 14053  04B1                     l5558:	
 14054  04B1  084D               	movf	___ftadd@exp1,w
 14055  04B2  064C               	xorwf	___ftadd@exp2,w
 14056  04B3  1903               	btfsc	3,2
 14057  04B4  2CDB               	goto	l2757
 14058  04B5  2CA7               	goto	l5556
 14059  04B6                     l5560:	
 14060  04B6  084D               	movf	___ftadd@exp1,w
 14061  04B7  024C               	subwf	___ftadd@exp2,w
 14062  04B8  1803               	skipnc
 14063  04B9  2CDB               	goto	l2757
 14064  04BA                     l5562:	
 14065  04BA  3001               	movlw	1
 14066  04BB                     u4275:	
 14067  04BB  35C1               	lslf	___ftadd@f1,f
 14068  04BC  0DC2               	rlf	___ftadd@f1+1,f
 14069  04BD  0DC3               	rlf	___ftadd@f1+2,f
 14070  04BE  0B89               	decfsz	9,f
 14071  04BF  2CBB               	goto	u4275
 14072  04C0  3001               	movlw	1
 14073  04C1  02CD               	subwf	___ftadd@exp1,f
 14074  04C2  084C               	movf	___ftadd@exp2,w
 14075  04C3  064D               	xorwf	___ftadd@exp1,w
 14076  04C4  1903               	skipnz
 14077  04C5  2CD7               	goto	l5570
 14078  04C6  3001               	movlw	1
 14079  04C7  02CB               	subwf	___ftadd@sign,f
 14080  04C8  084B               	movf	___ftadd@sign,w
 14081  04C9  3907               	andlw	7
 14082  04CA  1903               	btfsc	3,2
 14083  04CB  2CD7               	goto	l5570
 14084  04CC  2CBA               	goto	l5562
 14085  04CD                     l5568:	
 14086  04CD  3001               	movlw	1
 14087  04CE                     u4305:	
 14088  04CE  36C6               	lsrf	___ftadd@f2+2,f
 14089  04CF  0CC5               	rrf	___ftadd@f2+1,f
 14090  04D0  0CC4               	rrf	___ftadd@f2,f
 14091  04D1  0B89               	decfsz	9,f
 14092  04D2  2CCE               	goto	u4305
 14093  04D3  3001               	movlw	1
 14094  04D4  00C7               	movwf	??___ftadd
 14095  04D5  0847               	movf	??___ftadd,w
 14096  04D6  07CC               	addwf	___ftadd@exp2,f
 14097  04D7                     l5570:	
 14098  04D7  084D               	movf	___ftadd@exp1,w
 14099  04D8  064C               	xorwf	___ftadd@exp2,w
 14100  04D9  1D03               	skipz
 14101  04DA  2CCD               	goto	l5568
 14102  04DB                     l2757:	
 14103  04DB  1FCB               	btfss	___ftadd@sign,7
 14104  04DC  2CED               	goto	l5574
 14105  04DD  30FF               	movlw	255
 14106  04DE  06C1               	xorwf	___ftadd@f1,f
 14107  04DF  30FF               	movlw	255
 14108  04E0  06C2               	xorwf	___ftadd@f1+1,f
 14109  04E1  30FF               	movlw	255
 14110  04E2  06C3               	xorwf	___ftadd@f1+2,f
 14111  04E3  3001               	movlw	1
 14112  04E4  07C1               	addwf	___ftadd@f1,f
 14113  04E5  3000               	movlw	0
 14114  04E6  1803               	skipnc
 14115  04E7  3001               	movlw	1
 14116  04E8  07C2               	addwf	___ftadd@f1+1,f
 14117  04E9  3000               	movlw	0
 14118  04EA  1803               	skipnc
 14119  04EB  3001               	movlw	1
 14120  04EC  07C3               	addwf	___ftadd@f1+2,f
 14121  04ED                     l5574:	
 14122  04ED  1F4B               	btfss	___ftadd@sign,6
 14123  04EE  2CFF               	goto	l5578
 14124  04EF  30FF               	movlw	255
 14125  04F0  06C4               	xorwf	___ftadd@f2,f
 14126  04F1  30FF               	movlw	255
 14127  04F2  06C5               	xorwf	___ftadd@f2+1,f
 14128  04F3  30FF               	movlw	255
 14129  04F4  06C6               	xorwf	___ftadd@f2+2,f
 14130  04F5  3001               	movlw	1
 14131  04F6  07C4               	addwf	___ftadd@f2,f
 14132  04F7  3000               	movlw	0
 14133  04F8  1803               	skipnc
 14134  04F9  3001               	movlw	1
 14135  04FA  07C5               	addwf	___ftadd@f2+1,f
 14136  04FB  3000               	movlw	0
 14137  04FC  1803               	skipnc
 14138  04FD  3001               	movlw	1
 14139  04FE  07C6               	addwf	___ftadd@f2+2,f
 14140  04FF                     l5578:	
 14141  04FF  01CB               	clrf	___ftadd@sign
 14142  0500  0841               	movf	___ftadd@f1,w
 14143  0501  07C4               	addwf	___ftadd@f2,f
 14144  0502  0842               	movf	___ftadd@f1+1,w
 14145  0503  3DC5               	addwfc	___ftadd@f2+1,f
 14146  0504  0843               	movf	___ftadd@f1+2,w
 14147  0505  3DC6               	addwfc	___ftadd@f2+2,f
 14148  0506  1FC6               	btfss	___ftadd@f2+2,7
 14149  0507  2D1A               	goto	l5588
 14150  0508  30FF               	movlw	255
 14151  0509  06C4               	xorwf	___ftadd@f2,f
 14152  050A  30FF               	movlw	255
 14153  050B  06C5               	xorwf	___ftadd@f2+1,f
 14154  050C  30FF               	movlw	255
 14155  050D  06C6               	xorwf	___ftadd@f2+2,f
 14156  050E  3001               	movlw	1
 14157  050F  07C4               	addwf	___ftadd@f2,f
 14158  0510  3000               	movlw	0
 14159  0511  1803               	skipnc
 14160  0512  3001               	movlw	1
 14161  0513  07C5               	addwf	___ftadd@f2+1,f
 14162  0514  3000               	movlw	0
 14163  0515  1803               	skipnc
 14164  0516  3001               	movlw	1
 14165  0517  07C6               	addwf	___ftadd@f2+2,f
 14166  0518  01CB               	clrf	___ftadd@sign
 14167  0519  0ACB               	incf	___ftadd@sign,f
 14168  051A                     l5588:	
 14169  051A  0844               	movf	___ftadd@f2,w
 14170  051B  00A0               	movwf	___ftpack@arg
 14171  051C  0845               	movf	___ftadd@f2+1,w
 14172  051D  00A1               	movwf	___ftpack@arg+1
 14173  051E  0846               	movf	___ftadd@f2+2,w
 14174  051F  00A2               	movwf	___ftpack@arg+2
 14175  0520  084D               	movf	___ftadd@exp1,w
 14176  0521  00C7               	movwf	??___ftadd
 14177  0522  0847               	movf	??___ftadd,w
 14178  0523  00A3               	movwf	___ftpack@exp
 14179  0524  084B               	movf	___ftadd@sign,w
 14180  0525  00C8               	movwf	??___ftadd+1
 14181  0526  0848               	movf	??___ftadd+1,w
 14182  0527  00A4               	movwf	___ftpack@sign
 14183  0528  3189  2181         	fcall	___ftpack
 14184  052A  0020               	movlb	0	; select bank0
 14185  052B  0820               	movf	?___ftpack,w
 14186  052C  00C1               	movwf	?___ftadd
 14187  052D  0821               	movf	?___ftpack+1,w
 14188  052E  00C2               	movwf	?___ftadd+1
 14189  052F  0822               	movf	?___ftpack+2,w
 14190  0530  00C3               	movwf	?___ftadd+2
 14191  0531  0008               	return
 14192  0532                     __end_of___ftadd:	
 14193                           
 14194                           	psect	text83
 14195  1066                     __ptext83:	
 14196 ;; *************** function ___awtoft *****************
 14197 ;; Defined at:
 14198 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;  c               2    8[BANK0 ] int 
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;  sign            1   13[BANK0 ] unsigned char 
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  3    8[BANK0 ] float 
 14205 ;; Registers used:
 14206 ;;		wreg, status,2, status,0, pclath, cstack
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14212 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;Total ram usage:        6 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    6
 14219 ;; This function calls:
 14220 ;;		___ftpack
 14221 ;; This function is called by:
 14222 ;;		_getPercentValue
 14223 ;;		_setPercentValue
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           
 14228                           ;psect for function ___awtoft
 14229  1066                     ___awtoft:	
 14230                           
 14231                           ;incstack = 0
 14232                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14233  1066  0020               	movlb	0	; select bank0
 14234  1067  01AD               	clrf	___awtoft@sign
 14235  1068  1FA9               	btfss	___awtoft@c+1,7
 14236  1069  2871               	goto	l5516
 14237  106A  09A8               	comf	___awtoft@c,f
 14238  106B  09A9               	comf	___awtoft@c+1,f
 14239  106C  0AA8               	incf	___awtoft@c,f
 14240  106D  1903               	skipnz
 14241  106E  0AA9               	incf	___awtoft@c+1,f
 14242  106F  01AD               	clrf	___awtoft@sign
 14243  1070  0AAD               	incf	___awtoft@sign,f
 14244  1071                     l5516:	
 14245  1071  0828               	movf	___awtoft@c,w
 14246  1072  00A0               	movwf	___ftpack@arg
 14247  1073  0829               	movf	___awtoft@c+1,w
 14248  1074  00A1               	movwf	___ftpack@arg+1
 14249  1075  01A2               	clrf	___ftpack@arg+2
 14250  1076  308E               	movlw	142
 14251  1077  00AB               	movwf	??___awtoft
 14252  1078  082B               	movf	??___awtoft,w
 14253  1079  00A3               	movwf	___ftpack@exp
 14254  107A  082D               	movf	___awtoft@sign,w
 14255  107B  00AC               	movwf	??___awtoft+1
 14256  107C  082C               	movf	??___awtoft+1,w
 14257  107D  00A4               	movwf	___ftpack@sign
 14258  107E  3189  2181         	fcall	___ftpack
 14259  1080  0020               	movlb	0	; select bank0
 14260  1081  0820               	movf	?___ftpack,w
 14261  1082  00A8               	movwf	?___awtoft
 14262  1083  0821               	movf	?___ftpack+1,w
 14263  1084  00A9               	movwf	?___awtoft+1
 14264  1085  0822               	movf	?___ftpack+2,w
 14265  1086  00AA               	movwf	?___awtoft+2
 14266  1087  0008               	return
 14267  1088                     __end_of___awtoft:	
 14268                           
 14269                           	psect	text84
 14270  0981                     __ptext84:	
 14271 ;; *************** function ___ftpack *****************
 14272 ;; Defined at:
 14273 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14274 ;; Parameters:    Size  Location     Type
 14275 ;;  arg             3    0[BANK0 ] unsigned um
 14276 ;;  exp             1    3[BANK0 ] unsigned char 
 14277 ;;  sign            1    4[BANK0 ] unsigned char 
 14278 ;; Auto vars:     Size  Location     Type
 14279 ;;		None
 14280 ;; Return value:  Size  Location     Type
 14281 ;;                  3    0[BANK0 ] float 
 14282 ;; Registers used:
 14283 ;;		wreg, status,2, status,0
 14284 ;; Tracked objects:
 14285 ;;		On entry : 0/0
 14286 ;;		On exit  : 0/0
 14287 ;;		Unchanged: 0/0
 14288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14289 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14291 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;Total ram usage:        8 bytes
 14294 ;; Hardware stack levels used:    1
 14295 ;; Hardware stack levels required when called:    5
 14296 ;; This function calls:
 14297 ;;		Nothing
 14298 ;; This function is called by:
 14299 ;;		___awtoft
 14300 ;;		___ftadd
 14301 ;;		___ftdiv
 14302 ;;		___ftmul
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           
 14307                           ;psect for function ___ftpack
 14308  0981                     ___ftpack:	
 14309                           
 14310                           ;incstack = 0
 14311                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14312  0981  0020               	movlb	0	; select bank0
 14313  0982  0823               	movf	___ftpack@exp,w
 14314  0983  1903               	btfsc	3,2
 14315  0984  298A               	goto	l5466
 14316  0985  0822               	movf	___ftpack@arg+2,w
 14317  0986  0421               	iorwf	___ftpack@arg+1,w
 14318  0987  0420               	iorwf	___ftpack@arg,w
 14319  0988  1D03               	skipz
 14320  0989  299B               	goto	l5472
 14321  098A                     l5466:	
 14322  098A  3000               	movlw	0
 14323  098B  00A0               	movwf	?___ftpack
 14324  098C  3000               	movlw	0
 14325  098D  00A1               	movwf	?___ftpack+1
 14326  098E  3000               	movlw	0
 14327  098F  00A2               	movwf	?___ftpack+2
 14328  0990  0008               	return
 14329  0991                     l5470:	
 14330  0991  3001               	movlw	1
 14331  0992  00A5               	movwf	??___ftpack
 14332  0993  0825               	movf	??___ftpack,w
 14333  0994  07A3               	addwf	___ftpack@exp,f
 14334  0995  3001               	movlw	1
 14335  0996                     u4005:	
 14336  0996  36A2               	lsrf	___ftpack@arg+2,f
 14337  0997  0CA1               	rrf	___ftpack@arg+1,f
 14338  0998  0CA0               	rrf	___ftpack@arg,f
 14339  0999  0B89               	decfsz	9,f
 14340  099A  2996               	goto	u4005
 14341  099B                     l5472:	
 14342  099B  30FE               	movlw	254
 14343  099C  0522               	andwf	___ftpack@arg+2,w
 14344  099D  1903               	btfsc	3,2
 14345  099E  29B4               	goto	l2728
 14346  099F  2991               	goto	l5470
 14347  09A0                     l5474:	
 14348  09A0  3001               	movlw	1
 14349  09A1  00A5               	movwf	??___ftpack
 14350  09A2  0825               	movf	??___ftpack,w
 14351  09A3  07A3               	addwf	___ftpack@exp,f
 14352  09A4  3001               	movlw	1
 14353  09A5  07A0               	addwf	___ftpack@arg,f
 14354  09A6  3000               	movlw	0
 14355  09A7  1803               	skipnc
 14356  09A8  3001               	movlw	1
 14357  09A9  07A1               	addwf	___ftpack@arg+1,f
 14358  09AA  3000               	movlw	0
 14359  09AB  1803               	skipnc
 14360  09AC  3001               	movlw	1
 14361  09AD  07A2               	addwf	___ftpack@arg+2,f
 14362  09AE  3001               	movlw	1
 14363  09AF                     u4025:	
 14364  09AF  36A2               	lsrf	___ftpack@arg+2,f
 14365  09B0  0CA1               	rrf	___ftpack@arg+1,f
 14366  09B1  0CA0               	rrf	___ftpack@arg,f
 14367  09B2  0B89               	decfsz	9,f
 14368  09B3  29AF               	goto	u4025
 14369  09B4                     l2728:	
 14370  09B4  30FF               	movlw	255
 14371  09B5  0522               	andwf	___ftpack@arg+2,w
 14372  09B6  1903               	btfsc	3,2
 14373  09B7  29C1               	goto	l5482
 14374  09B8  29A0               	goto	l5474
 14375  09B9                     l5480:	
 14376  09B9  3001               	movlw	1
 14377  09BA  02A3               	subwf	___ftpack@exp,f
 14378  09BB  3001               	movlw	1
 14379  09BC                     u4045:	
 14380  09BC  35A0               	lslf	___ftpack@arg,f
 14381  09BD  0DA1               	rlf	___ftpack@arg+1,f
 14382  09BE  0DA2               	rlf	___ftpack@arg+2,f
 14383  09BF  0B89               	decfsz	9,f
 14384  09C0  29BC               	goto	u4045
 14385  09C1                     l5482:	
 14386  09C1  1FA1               	btfss	___ftpack@arg+1,7
 14387  09C2  29B9               	goto	l5480
 14388  09C3  1823               	btfsc	___ftpack@exp,0
 14389  09C4  29CB               	goto	l2734
 14390  09C5  30FF               	movlw	255
 14391  09C6  05A0               	andwf	___ftpack@arg,f
 14392  09C7  307F               	movlw	127
 14393  09C8  05A1               	andwf	___ftpack@arg+1,f
 14394  09C9  30FF               	movlw	255
 14395  09CA  05A2               	andwf	___ftpack@arg+2,f
 14396  09CB                     l2734:	
 14397  09CB  1003               	clrc
 14398  09CC  0CA3               	rrf	___ftpack@exp,f
 14399  09CD  0823               	movf	___ftpack@exp,w
 14400  09CE  00A5               	movwf	??___ftpack
 14401  09CF  01A6               	clrf	??___ftpack+1
 14402  09D0  01A7               	clrf	??___ftpack+2
 14403  09D1  3010               	movlw	16
 14404  09D2                     u4075:	
 14405  09D2  35A5               	lslf	??___ftpack,f
 14406  09D3  0DA6               	rlf	??___ftpack+1,f
 14407  09D4  0DA7               	rlf	??___ftpack+2,f
 14408  09D5  0B89               	decfsz	9,f
 14409  09D6  29D2               	goto	u4075
 14410  09D7  0825               	movf	??___ftpack,w
 14411  09D8  04A0               	iorwf	___ftpack@arg,f
 14412  09D9  0826               	movf	??___ftpack+1,w
 14413  09DA  04A1               	iorwf	___ftpack@arg+1,f
 14414  09DB  0827               	movf	??___ftpack+2,w
 14415  09DC  04A2               	iorwf	___ftpack@arg+2,f
 14416  09DD  0824               	movf	___ftpack@sign,w
 14417  09DE  1903               	btfsc	3,2
 14418  09DF  0008               	return
 14419  09E0  17A2               	bsf	___ftpack@arg+2,7
 14420  09E1  0008               	return
 14421  09E2                     __end_of___ftpack:	
 14422                           
 14423                           	psect	text85
 14424  131D                     __ptext85:	
 14425 ;; *************** function _setLED *****************
 14426 ;; Defined at:
 14427 ;;		line 76 in file "../src/LED_B1.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  led             1    wreg     unsigned char 
 14430 ;;  command         1    2[BANK0 ] unsigned char 
 14431 ;; Auto vars:     Size  Location     Type
 14432 ;;  led             1    3[BANK0 ] unsigned char 
 14433 ;; Return value:  Size  Location     Type
 14434 ;;		None               void
 14435 ;; Registers used:
 14436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14437 ;; Tracked objects:
 14438 ;;		On entry : 0/0
 14439 ;;		On exit  : 0/0
 14440 ;;		Unchanged: 0/0
 14441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14442 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;Total ram usage:        2 bytes
 14447 ;; Hardware stack levels used:    1
 14448 ;; Hardware stack levels required when called:    6
 14449 ;; This function calls:
 14450 ;;		_LedPointSelect
 14451 ;; This function is called by:
 14452 ;;		_setDimmerLights
 14453 ;;		_setLED_Initialization
 14454 ;;		_setMain_Exception
 14455 ;;		_setSw_Initialization
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           
 14460                           ;psect for function _setLED
 14461  131D                     _setLED:	
 14462                           
 14463                           ;incstack = 0
 14464                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14465                           ;setLED@led stored from wreg
 14466  131D  0020               	movlb	0	; select bank0
 14467  131E  00A3               	movwf	setLED@led
 14468                           
 14469                           ;LED_B1.c: 77: LedPointSelect(led);
 14470  131F  0823               	movf	setLED@led,w
 14471  1320  319C  2496  3193   	fcall	_LedPointSelect
 14472                           
 14473                           ;LED_B1.c: 78: if (command == 0) {
 14474  1323  0020               	movlb	0	; select bank0
 14475  1324  08A2               	movf	setLED@command,f
 14476  1325  1D03               	skipz
 14477  1326  2B2C               	goto	l6204
 14478                           
 14479                           ;LED_B1.c: 107: if (led == 99) {
 14480  1327  0823               	movf	setLED@led,w
 14481  1328  3A63               	xorlw	99
 14482  1329  1D03               	skipz
 14483  132A  2B2C               	goto	l6204
 14484                           
 14485                           ;LED_B1.c: 111: RB5 = 1;
 14486  132B  168D               	bsf	13,5	;volatile
 14487  132C                     l6204:	
 14488                           
 14489                           ;LED_B1.c: 113: }
 14490                           ;LED_B1.c: 115: }
 14491                           ;LED_B1.c: 116: if (command == 1) {
 14492  132C  0822               	movf	setLED@command,w
 14493  132D  3A01               	xorlw	1
 14494  132E  1D03               	skipz
 14495  132F  2B35               	goto	l6210
 14496                           
 14497                           ;LED_B1.c: 145: if (led == 99) {
 14498  1330  0823               	movf	setLED@led,w
 14499  1331  3A63               	xorlw	99
 14500  1332  1D03               	skipz
 14501  1333  2B35               	goto	l6210
 14502                           
 14503                           ;LED_B1.c: 149: RB5 = 0;
 14504  1334  128D               	bcf	13,5	;volatile
 14505  1335                     l6210:	
 14506                           
 14507                           ;LED_B1.c: 151: }
 14508                           ;LED_B1.c: 153: }
 14509                           ;LED_B1.c: 154: if (command == 10) {
 14510  1335  0822               	movf	setLED@command,w
 14511  1336  3A0A               	xorlw	10
 14512  1337  1D03               	skipz
 14513  1338  2B49               	goto	l6218
 14514                           
 14515                           ;LED_B1.c: 155: LED->GO = 0;
 14516  1339  087A               	movf	_LED,w
 14517  133A  0086               	movwf	6
 14518  133B  3001               	movlw	1	; select bank2/3
 14519  133C  0087               	movwf	7
 14520  133D  1081               	bcf	1,1
 14521                           
 14522                           ;LED_B1.c: 156: LED->Time = 0;
 14523  133E  0A7A               	incf	_LED,w
 14524  133F  0086               	movwf	6
 14525  1340  3001               	movlw	1	; select bank2/3
 14526  1341  0087               	movwf	7
 14527  1342  3000               	movlw	0
 14528  1343  3FC0               	movwi [0]fsr1
 14529  1344  3FC1               	movwi [1]fsr1
 14530                           
 14531                           ;LED_B1.c: 185: if (led == 99) {
 14532  1345  0823               	movf	setLED@led,w
 14533  1346  3A63               	xorlw	99
 14534  1347  1903               	btfsc	3,2
 14535                           
 14536                           ;LED_B1.c: 189: RB5 = 1;
 14537  1348  168D               	bsf	13,5	;volatile
 14538  1349                     l6218:	
 14539                           
 14540                           ;LED_B1.c: 191: }
 14541                           ;LED_B1.c: 193: }
 14542                           ;LED_B1.c: 194: if (command == 11) {
 14543  1349  0822               	movf	setLED@command,w
 14544  134A  3A0B               	xorlw	11
 14545  134B  1D03               	skipz
 14546  134C  0008               	return
 14547                           
 14548                           ;LED_B1.c: 195: LED->GO = 1;
 14549  134D  087A               	movf	_LED,w
 14550  134E  0086               	movwf	6
 14551  134F  3001               	movlw	1	; select bank2/3
 14552  1350  0087               	movwf	7
 14553  1351  1481               	bsf	1,1
 14554  1352  0008               	return
 14555  1353                     __end_of_setLED:	
 14556                           
 14557                           	psect	text86
 14558  1C96                     __ptext86:	
 14559 ;; *************** function _LedPointSelect *****************
 14560 ;; Defined at:
 14561 ;;		line 7 in file "../src/LED_B1.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;  led             1    wreg     unsigned char 
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  led             1    1[BANK0 ] unsigned char 
 14566 ;; Return value:  Size  Location     Type
 14567 ;;		None               void
 14568 ;; Registers used:
 14569 ;;		wreg
 14570 ;; Tracked objects:
 14571 ;;		On entry : 0/0
 14572 ;;		On exit  : 0/0
 14573 ;;		Unchanged: 0/0
 14574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;Total ram usage:        2 bytes
 14580 ;; Hardware stack levels used:    1
 14581 ;; Hardware stack levels required when called:    5
 14582 ;; This function calls:
 14583 ;;		Nothing
 14584 ;; This function is called by:
 14585 ;;		_setLED_Initialization
 14586 ;;		_setLED
 14587 ;;		_setLED_Main
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           
 14592                           ;psect for function _LedPointSelect
 14593  1C96                     _LedPointSelect:	
 14594                           
 14595                           ;incstack = 0
 14596                           ; Regs used in _LedPointSelect: [wreg]
 14597                           ;LedPointSelect@led stored from wreg
 14598  1C96  0020               	movlb	0	; select bank0
 14599  1C97  00A1               	movwf	LedPointSelect@led
 14600                           
 14601                           ;LED_B1.c: 24: if (led == 99) {
 14602  1C98  0821               	movf	LedPointSelect@led,w
 14603  1C99  3A63               	xorlw	99
 14604  1C9A  1D03               	skipz
 14605  1C9B  0008               	return
 14606                           
 14607                           ;LED_B1.c: 25: LED = &VarErrLED;
 14608  1C9C  30E2               	movlw	_VarErrLED& (0+255)
 14609  1C9D  00A0               	movwf	??_LedPointSelect
 14610  1C9E  0820               	movf	??_LedPointSelect,w
 14611  1C9F  00FA               	movwf	_LED
 14612  1CA0  0008               	return
 14613  1CA1                     __end_of_LedPointSelect:	
 14614                           
 14615                           	psect	text87
 14616  1CD9                     __ptext87:	
 14617 ;; *************** function _setDimmerLights_Line *****************
 14618 ;; Defined at:
 14619 ;;		line 683 in file "../src/Dimmer_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;  lights          1    wreg     unsigned char 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  lights          1    0[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;		None               void
 14626 ;; Registers used:
 14627 ;;		wreg
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        1 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    5
 14640 ;; This function calls:
 14641 ;;		Nothing
 14642 ;; This function is called by:
 14643 ;;		_setDimmerLights
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           
 14648                           ;psect for function _setDimmerLights_Line
 14649  1CD9                     _setDimmerLights_Line:	
 14650                           
 14651                           ;incstack = 0
 14652                           ; Regs used in _setDimmerLights_Line: [wreg]
 14653                           ;setDimmerLights_Line@lights stored from wreg
 14654  1CD9  0020               	movlb	0	; select bank0
 14655  1CDA  00A0               	movwf	setDimmerLights_Line@lights
 14656                           
 14657                           ;Dimmer_B1.c: 685: DimmerLights1.Line = 0;
 14658  1CDB  0023               	movlb	3	; select bank3
 14659  1CDC  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14660                           
 14661                           ;Dimmer_B1.c: 694: if (lights == 1) {
 14662  1CDD  0020               	movlb	0	; select bank0
 14663  1CDE  0820               	movf	setDimmerLights_Line@lights,w
 14664  1CDF  3A01               	xorlw	1
 14665  1CE0  1D03               	skipz
 14666  1CE1  0008               	return
 14667                           
 14668                           ;Dimmer_B1.c: 695: DimmerLights1.Line = 1;
 14669  1CE2  0023               	movlb	3	; select bank3
 14670  1CE3  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14671  1CE4  0008               	return
 14672  1CE5                     __end_of_setDimmerLights_Line:	
 14673                           
 14674                           	psect	text88
 14675  124E                     __ptext88:	
 14676 ;; *************** function _getMain_All_Error_Status *****************
 14677 ;; Defined at:
 14678 ;;		line 376 in file "../src/Main_B1.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;  command         1    wreg     unsigned char 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  command         1    5[BANK0 ] unsigned char 
 14683 ;;  status          1    6[BANK0 ] unsigned char 
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  1    wreg      unsigned char 
 14686 ;; Registers used:
 14687 ;;		wreg, status,2, status,0
 14688 ;; Tracked objects:
 14689 ;;		On entry : 0/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14696 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14697 ;;Total ram usage:        7 bytes
 14698 ;; Hardware stack levels used:    1
 14699 ;; Hardware stack levels required when called:    5
 14700 ;; This function calls:
 14701 ;;		Nothing
 14702 ;; This function is called by:
 14703 ;;		_DimmerLights_Main
 14704 ;;		_setDimmerLights
 14705 ;;		_setDimmerLights_Adj
 14706 ;;		_Load_Main
 14707 ;;		_setTemp_Main
 14708 ;;		_setRF_Main
 14709 ;;		_getRxData
 14710 ;;		_Switch_Main
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           
 14715                           ;psect for function _getMain_All_Error_Status
 14716  124E                     _getMain_All_Error_Status:	
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14720                           ;getMain_All_Error_Status@command stored from wreg
 14721  124E  0020               	movlb	0	; select bank0
 14722  124F  00A5               	movwf	getMain_All_Error_Status@command
 14723                           
 14724                           ;Main_B1.c: 377: char status = 0;
 14725  1250  01A6               	clrf	getMain_All_Error_Status@status
 14726                           
 14727                           ;Main_B1.c: 388: if (status == 0 && command != 2) {
 14728  1251  08A6               	movf	getMain_All_Error_Status@status,f
 14729  1252  1D03               	skipz
 14730  1253  2A68               	goto	l6184
 14731  1254  0825               	movf	getMain_All_Error_Status@command,w
 14732  1255  3A02               	xorlw	2
 14733  1256  1903               	skipnz
 14734  1257  2A68               	goto	l6184
 14735                           
 14736                           ;Main_B1.c: 389: status = Temp.ERROR == 1 ? 2 : 0;
 14737  1258  0021               	movlb	1	; select bank1
 14738  1259  18D6               	btfsc	_Temp^(0+128),1
 14739  125A  2A5F               	goto	l6182
 14740  125B  0020               	movlb	0	; select bank0
 14741  125C  01A1               	clrf	_getMain_All_Error_Status$3747
 14742  125D  01A2               	clrf	_getMain_All_Error_Status$3747+1
 14743  125E  2A64               	goto	l1425
 14744  125F                     l6182:	
 14745  125F  3002               	movlw	2
 14746  1260  0020               	movlb	0	; select bank0
 14747  1261  00A1               	movwf	_getMain_All_Error_Status$3747
 14748  1262  3000               	movlw	0
 14749  1263  00A2               	movwf	_getMain_All_Error_Status$3747+1
 14750  1264                     l1425:	
 14751  1264  0821               	movf	_getMain_All_Error_Status$3747,w
 14752  1265  00A0               	movwf	??_getMain_All_Error_Status
 14753  1266  0820               	movf	??_getMain_All_Error_Status,w
 14754  1267  00A6               	movwf	getMain_All_Error_Status@status
 14755  1268                     l6184:	
 14756                           
 14757                           ;Main_B1.c: 390: }
 14758                           ;Main_B1.c: 395: if (status == 0 && command != 3) {
 14759  1268  08A6               	movf	getMain_All_Error_Status@status,f
 14760  1269  1D03               	skipz
 14761  126A  2A7F               	goto	l1426
 14762  126B  0825               	movf	getMain_All_Error_Status@command,w
 14763  126C  3A03               	xorlw	3
 14764  126D  1903               	skipnz
 14765  126E  2A7F               	goto	l1426
 14766                           
 14767                           ;Main_B1.c: 396: status = Load.ERROR == 1 ? 3 : 0;
 14768  126F  0022               	movlb	2	; select bank2
 14769  1270  1AC3               	btfsc	_Load^(0+256),5
 14770  1271  2A76               	goto	l6192
 14771  1272  0020               	movlb	0	; select bank0
 14772  1273  01A3               	clrf	_getMain_All_Error_Status$3756
 14773  1274  01A4               	clrf	_getMain_All_Error_Status$3756+1
 14774  1275  2A7B               	goto	l1430
 14775  1276                     l6192:	
 14776  1276  3003               	movlw	3
 14777  1277  0020               	movlb	0	; select bank0
 14778  1278  00A3               	movwf	_getMain_All_Error_Status$3756
 14779  1279  3000               	movlw	0
 14780  127A  00A4               	movwf	_getMain_All_Error_Status$3756+1
 14781  127B                     l1430:	
 14782  127B  0823               	movf	_getMain_All_Error_Status$3756,w
 14783  127C  00A0               	movwf	??_getMain_All_Error_Status
 14784  127D  0820               	movf	??_getMain_All_Error_Status,w
 14785  127E  00A6               	movwf	getMain_All_Error_Status@status
 14786  127F                     l1426:	
 14787                           
 14788                           ;Main_B1.c: 397: }
 14789                           ;Main_B1.c: 413: return status;
 14790  127F  0826               	movf	getMain_All_Error_Status@status,w
 14791  1280  0008               	return
 14792  1281                     __end_of_getMain_All_Error_Status:	
 14793                           
 14794                           	psect	text89
 14795  1192                     __ptext89:	
 14796 ;; *************** function _getMain_LightsStatus *****************
 14797 ;; Defined at:
 14798 ;;		line 349 in file "../src/Main_B1.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;		None
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;  i               2    6[BANK0 ] int 
 14803 ;;  status          1    8[BANK0 ] unsigned char 
 14804 ;;  count           1    5[BANK0 ] unsigned char 
 14805 ;; Return value:  Size  Location     Type
 14806 ;;                  1    wreg      unsigned char 
 14807 ;; Registers used:
 14808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14809 ;; Tracked objects:
 14810 ;;		On entry : 0/0
 14811 ;;		On exit  : 0/0
 14812 ;;		Unchanged: 0/0
 14813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;Total ram usage:        5 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:    7
 14821 ;; This function calls:
 14822 ;;		_getDimmerLights_Status
 14823 ;; This function is called by:
 14824 ;;		_DimmerLights_Main
 14825 ;;		_Flash_Memory_Main
 14826 ;;		_setMain_Exception
 14827 ;;		_Load_Main
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           
 14832                           ;psect for function _getMain_LightsStatus
 14833  1192                     _getMain_LightsStatus:	
 14834                           
 14835                           ;Main_B1.c: 350: char status = 0, count = 0;
 14836                           
 14837                           ;incstack = 0
 14838                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14839  1192  0020               	movlb	0	; select bank0
 14840  1193  01A8               	clrf	getMain_LightsStatus@status
 14841  1194  01A5               	clrf	getMain_LightsStatus@count
 14842                           
 14843                           ;Main_B1.c: 353: count = 1;
 14844  1195  01A5               	clrf	getMain_LightsStatus@count
 14845  1196  0AA5               	incf	getMain_LightsStatus@count,f
 14846                           
 14847                           ;Main_B1.c: 362: for (int i = 0; i < count; i++) {
 14848  1197  01A6               	clrf	getMain_LightsStatus@i
 14849  1198  01A7               	clrf	getMain_LightsStatus@i+1
 14850  1199                     l6452:	
 14851  1199  0827               	movf	getMain_LightsStatus@i+1,w
 14852  119A  3A80               	xorlw	128
 14853  119B  00A4               	movwf	??_getMain_LightsStatus
 14854  119C  3080               	movlw	128
 14855  119D  0224               	subwf	??_getMain_LightsStatus,w
 14856  119E  1D03               	skipz
 14857  119F  29A2               	goto	u5625
 14858  11A0  0825               	movf	getMain_LightsStatus@count,w
 14859  11A1  0226               	subwf	getMain_LightsStatus@i,w
 14860  11A2                     u5625:	
 14861  11A2  1803               	btfsc	3,0
 14862  11A3  29BA               	goto	l6454
 14863                           
 14864                           ;Main_B1.c: 363: if (status == 0) {
 14865  11A4  0020               	movlb	0	; select bank0
 14866  11A5  08A8               	movf	getMain_LightsStatus@status,f
 14867  11A6  1D03               	skipz
 14868  11A7  29B5               	goto	l6450
 14869                           
 14870                           ;Main_B1.c: 368: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14871  11A8  0826               	movf	getMain_LightsStatus@i,w
 14872  11A9  3E01               	addlw	1
 14873  11AA  319D  255D  3191   	fcall	_getDimmerLights_Status
 14874  11AD  3A01               	xorlw	1
 14875  11AE  3000               	movlw	0
 14876  11AF  1903               	skipnz
 14877  11B0  3001               	movlw	1
 14878  11B1  0020               	movlb	0	; select bank0
 14879  11B2  00A4               	movwf	??_getMain_LightsStatus
 14880  11B3  0824               	movf	??_getMain_LightsStatus,w
 14881  11B4  00A8               	movwf	getMain_LightsStatus@status
 14882  11B5                     l6450:	
 14883  11B5  3001               	movlw	1
 14884  11B6  07A6               	addwf	getMain_LightsStatus@i,f
 14885  11B7  3000               	movlw	0
 14886  11B8  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14887  11B9  2999               	goto	l6452
 14888  11BA                     l6454:	
 14889                           
 14890                           ;Main_B1.c: 370: }
 14891                           ;Main_B1.c: 371: }
 14892                           ;Main_B1.c: 372: return status;
 14893  11BA  0020               	movlb	0	; select bank0
 14894  11BB  0828               	movf	getMain_LightsStatus@status,w
 14895  11BC  0008               	return
 14896  11BD                     __end_of_getMain_LightsStatus:	
 14897                           
 14898                           	psect	text90
 14899  1C3F                     __ptext90:	
 14900 ;; *************** function _getLoad_OK *****************
 14901 ;; Defined at:
 14902 ;;		line 188 in file "../src/OverLoad_B1.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;		None
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  ok              1    0[BANK0 ] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;                  1    wreg      unsigned char 
 14909 ;; Registers used:
 14910 ;;		wreg, status,2
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        1 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    5
 14923 ;; This function calls:
 14924 ;;		Nothing
 14925 ;; This function is called by:
 14926 ;;		_DimmerLights_Main
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           
 14931                           ;psect for function _getLoad_OK
 14932  1C3F                     _getLoad_OK:	
 14933                           
 14934                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 14935                           
 14936                           ;incstack = 0
 14937                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14938  1C3F  3000               	movlw	0
 14939  1C40  0022               	movlb	2	; select bank2
 14940  1C41  1BC3               	btfsc	_Load^(0+256),7
 14941  1C42  3001               	movlw	1
 14942  1C43  0020               	movlb	0	; select bank0
 14943  1C44  00A0               	movwf	getLoad_OK@ok
 14944                           
 14945                           ;OverLoad_B1.c: 190: return ok;
 14946  1C45  0820               	movf	getLoad_OK@ok,w
 14947  1C46  0008               	return
 14948  1C47                     __end_of_getLoad_OK:	
 14949                           
 14950                           	psect	text91
 14951  1D15                     __ptext91:	
 14952 ;; *************** function _DimmerLights_Initialization *****************
 14953 ;; Defined at:
 14954 ;;		line 345 in file "../src/Dimmer_B1.c"
 14955 ;; Parameters:    Size  Location     Type
 14956 ;;		None
 14957 ;; Auto vars:     Size  Location     Type
 14958 ;;		None
 14959 ;; Return value:  Size  Location     Type
 14960 ;;		None               void
 14961 ;; Registers used:
 14962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14963 ;; Tracked objects:
 14964 ;;		On entry : 0/0
 14965 ;;		On exit  : 0/0
 14966 ;;		Unchanged: 0/0
 14967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;Total ram usage:        1 bytes
 14973 ;; Hardware stack levels used:    1
 14974 ;; Hardware stack levels required when called:    7
 14975 ;; This function calls:
 14976 ;;		_Dimmer_Initialization
 14977 ;;		_setDimmerLights_Initialization
 14978 ;; This function is called by:
 14979 ;;		_main
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           
 14984                           ;psect for function _DimmerLights_Initialization
 14985  1D15                     _DimmerLights_Initialization:	
 14986                           
 14987                           ;Dimmer_B1.c: 347: DimmerLights11 = &DimmerLights1;
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14991  1D15  30C5               	movlw	_DimmerLights1& (0+255)
 14992  1D16  0020               	movlb	0	; select bank0
 14993  1D17  00A4               	movwf	??_DimmerLights_Initialization
 14994  1D18  0824               	movf	??_DimmerLights_Initialization,w
 14995  1D19  0021               	movlb	1	; select bank1
 14996  1D1A  00CD               	movwf	_DimmerLights11^(0+128)
 14997                           
 14998                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(1);
 14999  1D1B  3001               	movlw	1
 15000  1D1C  3191  2117  319D   	fcall	_setDimmerLights_Initialization
 15001                           
 15002                           ;Dimmer_B1.c: 362: Dimmer_Initialization();
 15003  1D1F  319B  23E7         	fcall	_Dimmer_Initialization
 15004  1D21  0008               	return
 15005  1D22                     __end_of_DimmerLights_Initialization:	
 15006                           
 15007                           	psect	text92
 15008  1117                     __ptext92:	
 15009 ;; *************** function _setDimmerLights_Initialization *****************
 15010 ;; Defined at:
 15011 ;;		line 368 in file "../src/Dimmer_B1.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;  lights          1    wreg     unsigned char 
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;  lights          1    3[BANK0 ] unsigned char 
 15016 ;; Return value:  Size  Location     Type
 15017 ;;		None               void
 15018 ;; Registers used:
 15019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;Total ram usage:        2 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    6
 15032 ;; This function calls:
 15033 ;;		_DimmerLightsPointSelect
 15034 ;; This function is called by:
 15035 ;;		_DimmerLights_Initialization
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           
 15040                           ;psect for function _setDimmerLights_Initialization
 15041  1117                     _setDimmerLights_Initialization:	
 15042                           
 15043                           ;incstack = 0
 15044                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15045                           ;setDimmerLights_Initialization@lights stored from wreg
 15046  1117  0020               	movlb	0	; select bank0
 15047  1118  00A3               	movwf	setDimmerLights_Initialization@lights
 15048                           
 15049                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 15050  1119  0823               	movf	setDimmerLights_Initialization@lights,w
 15051  111A  319C  248B         	fcall	_DimmerLightsPointSelect
 15052                           
 15053                           ;Dimmer_B1.c: 376: DimmerLights->MaxmumValue = ((char)(90*0.8));
 15054  111C  3048               	movlw	72
 15055  111D  0020               	movlb	0	; select bank0
 15056  111E  00A2               	movwf	??_setDimmerLights_Initialization
 15057  111F  086F               	movf	_DimmerLights,w
 15058  1120  3E05               	addlw	5
 15059  1121  0086               	movwf	6
 15060  1122  3001               	movlw	1	; select bank2/3
 15061  1123  0087               	movwf	7
 15062  1124  0822               	movf	??_setDimmerLights_Initialization,w
 15063  1125  0081               	movwf	1
 15064                           
 15065                           ;Dimmer_B1.c: 377: DimmerLights->MinimumValue = ((char)(15*0.8));
 15066  1126  300C               	movlw	12
 15067  1127  00A2               	movwf	??_setDimmerLights_Initialization
 15068  1128  086F               	movf	_DimmerLights,w
 15069  1129  3E06               	addlw	6
 15070  112A  0086               	movwf	6
 15071  112B  3001               	movlw	1	; select bank2/3
 15072  112C  0087               	movwf	7
 15073  112D  0822               	movf	??_setDimmerLights_Initialization,w
 15074  112E  0081               	movwf	1
 15075                           
 15076                           ;Dimmer_B1.c: 391: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15077  112F  086F               	movf	_DimmerLights,w
 15078  1130  3E05               	addlw	5
 15079  1131  0086               	movwf	6
 15080  1132  3001               	movlw	1	; select bank2/3
 15081  1133  0087               	movwf	7
 15082  1134  0801               	movf	1,w
 15083  1135  00A2               	movwf	??_setDimmerLights_Initialization
 15084  1136  086F               	movf	_DimmerLights,w
 15085  1137  3E04               	addlw	4
 15086  1138  0086               	movwf	6
 15087  1139  3001               	movlw	1	; select bank2/3
 15088  113A  0087               	movwf	7
 15089  113B  0822               	movf	??_setDimmerLights_Initialization,w
 15090  113C  0081               	movwf	1
 15091  113D  0008               	return
 15092  113E                     __end_of_setDimmerLights_Initialization:	
 15093                           
 15094                           	psect	text93
 15095  1BE7                     __ptext93:	
 15096 ;; *************** function _Dimmer_Initialization *****************
 15097 ;; Defined at:
 15098 ;;		line 908 in file "../src/Dimmer_B1.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;		None
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;		None
 15103 ;; Return value:  Size  Location     Type
 15104 ;;		None               void
 15105 ;; Registers used:
 15106 ;;		None
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;Total ram usage:        0 bytes
 15117 ;; Hardware stack levels used:    1
 15118 ;; Hardware stack levels required when called:    5
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_DimmerLights_Initialization
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           
 15127                           ;psect for function _Dimmer_Initialization
 15128  1BE7                     _Dimmer_Initialization:	
 15129                           
 15130                           ;incstack = 0
 15131                           ; Regs used in _Dimmer_Initialization: []
 15132  1BE7  0008               	return
 15133  1BE8                     __end_of_Dimmer_Initialization:	
 15134                           
 15135                           	psect	text94
 15136  1C0C                     __ptext94:	
 15137 ;; *************** function _DelayOff_Main *****************
 15138 ;; Defined at:
 15139 ;;		line 41 in file "../src/DelayOff_B1.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;		None
 15142 ;; Auto vars:     Size  Location     Type
 15143 ;;		None
 15144 ;; Return value:  Size  Location     Type
 15145 ;;		None               void
 15146 ;; Registers used:
 15147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15148 ;; Tracked objects:
 15149 ;;		On entry : 0/0
 15150 ;;		On exit  : 0/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;Total ram usage:        0 bytes
 15158 ;; Hardware stack levels used:    1
 15159 ;; Hardware stack levels required when called:   11
 15160 ;; This function calls:
 15161 ;;		_DlyOff_Main
 15162 ;; This function is called by:
 15163 ;;		_main
 15164 ;; This function uses a non-reentrant model
 15165 ;;
 15166                           
 15167                           
 15168                           ;psect for function _DelayOff_Main
 15169  1C0C                     _DelayOff_Main:	
 15170                           
 15171                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15172                           
 15173                           ;incstack = 0
 15174                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15175  1C0C  3001               	movlw	1
 15176  1C0D  3188  2066         	fcall	_DlyOff_Main
 15177  1C0F  0008               	return
 15178  1C10                     __end_of_DelayOff_Main:	
 15179                           
 15180                           	psect	text95
 15181  0866                     __ptext95:	
 15182 ;; *************** function _DlyOff_Main *****************
 15183 ;; Defined at:
 15184 ;;		line 61 in file "../src/DelayOff_B1.c"
 15185 ;; Parameters:    Size  Location     Type
 15186 ;;  sw              1    wreg     unsigned char 
 15187 ;; Auto vars:     Size  Location     Type
 15188 ;;  sw              1   24[BANK0 ] unsigned char 
 15189 ;; Return value:  Size  Location     Type
 15190 ;;		None               void
 15191 ;; Registers used:
 15192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15193 ;; Tracked objects:
 15194 ;;		On entry : 0/0
 15195 ;;		On exit  : 0/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15202 ;;Total ram usage:        3 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; Hardware stack levels required when called:   10
 15205 ;; This function calls:
 15206 ;;		_DelayOffPointSelect
 15207 ;;		_setBuz
 15208 ;;		_setDimmerLights_ErrorClose
 15209 ;; This function is called by:
 15210 ;;		_DelayOff_Main
 15211 ;; This function uses a non-reentrant model
 15212 ;;
 15213                           
 15214                           
 15215                           ;psect for function _DlyOff_Main
 15216  0866                     _DlyOff_Main:	
 15217                           
 15218                           ;incstack = 0
 15219                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15220                           ;DlyOff_Main@sw stored from wreg
 15221  0866  0020               	movlb	0	; select bank0
 15222  0867  00B8               	movwf	DlyOff_Main@sw
 15223                           
 15224                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15225  0868  0838               	movf	DlyOff_Main@sw,w
 15226  0869  319C  2480  3188   	fcall	_DelayOffPointSelect
 15227                           
 15228                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15229  086C  0878               	movf	_DelayOff,w
 15230  086D  0086               	movwf	6
 15231  086E  3001               	movlw	1	; select bank2/3
 15232  086F  0087               	movwf	7
 15233  0870  1C81               	btfss	1,1
 15234  0871  0008               	return
 15235                           
 15236                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15237  0872  0878               	movf	_DelayOff,w
 15238  0873  3E02               	addlw	2
 15239  0874  0086               	movwf	6
 15240  0875  3001               	movlw	1	; select bank2/3
 15241  0876  0087               	movwf	7
 15242  0877  3001               	movlw	1
 15243  0878  0781               	addwf	1,f
 15244  0879  3141               	addfsr 1,1
 15245  087A  1803               	skipnc
 15246  087B  0A81               	incf	1,f
 15247                           
 15248                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15249  087C  0878               	movf	_DelayOff,w
 15250  087D  3E02               	addlw	2
 15251  087E  0086               	movwf	6
 15252  087F  3001               	movlw	1	; select bank2/3
 15253  0880  0087               	movwf	7
 15254  0881  3F40               	moviw [0]fsr1
 15255  0882  0020               	movlb	0	; select bank0
 15256  0883  00B6               	movwf	??_DlyOff_Main
 15257  0884  3F41               	moviw [1]fsr1
 15258  0885  00B7               	movwf	??_DlyOff_Main+1
 15259  0886  3017               	movlw	23
 15260  0887  0237               	subwf	??_DlyOff_Main+1,w
 15261  0888  3070               	movlw	112
 15262  0889  1903               	skipnz
 15263  088A  0236               	subwf	??_DlyOff_Main,w
 15264  088B  1C03               	skipc
 15265  088C  0008               	return
 15266                           
 15267                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15268  088D  0878               	movf	_DelayOff,w
 15269  088E  3E02               	addlw	2
 15270  088F  0086               	movwf	6
 15271  0890  3001               	movlw	1	; select bank2/3
 15272  0891  0087               	movwf	7
 15273  0892  3000               	movlw	0
 15274  0893  3FC0               	movwi [0]fsr1
 15275  0894  3FC1               	movwi [1]fsr1
 15276                           
 15277                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15278  0895  3001               	movlw	1
 15279  0896  00B6               	movwf	??_DlyOff_Main
 15280  0897  0878               	movf	_DelayOff,w
 15281  0898  3E04               	addlw	4
 15282  0899  0086               	movwf	6
 15283  089A  3001               	movlw	1	; select bank2/3
 15284  089B  0087               	movwf	7
 15285  089C  0836               	movf	??_DlyOff_Main,w
 15286  089D  0781               	addwf	1,f
 15287                           
 15288                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15289  089E  0878               	movf	_DelayOff,w
 15290  089F  3E04               	addlw	4
 15291  08A0  0086               	movwf	6
 15292  08A1  3001               	movlw	1	; select bank2/3
 15293  08A2  0087               	movwf	7
 15294  08A3  0A78               	incf	_DelayOff,w
 15295  08A4  0084               	movwf	4
 15296  08A5  3001               	movlw	1	; select bank2/3
 15297  08A6  0085               	movwf	5
 15298  08A7  0800               	movf	0,w
 15299  08A8  0201               	subwf	1,w
 15300  08A9  1C03               	skipc
 15301  08AA  0008               	return
 15302                           
 15303                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15304  08AB  0878               	movf	_DelayOff,w
 15305  08AC  3E04               	addlw	4
 15306  08AD  0086               	movwf	6
 15307  08AE  3001               	movlw	1	; select bank2/3
 15308  08AF  0087               	movwf	7
 15309  08B0  0181               	clrf	1
 15310                           
 15311                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15312  08B1  0878               	movf	_DelayOff,w
 15313  08B2  0086               	movwf	6
 15314  08B3  3001               	movlw	1	; select bank2/3
 15315  08B4  0087               	movwf	7
 15316  08B5  1081               	bcf	1,1
 15317                           
 15318                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15319  08B6  3064               	movlw	100
 15320  08B7  00A9               	movwf	setBuz@time
 15321  08B8  3000               	movlw	0
 15322  08B9  00AA               	movwf	setBuz@time+1
 15323  08BA  3001               	movlw	1
 15324  08BB  3196  2696  3188   	fcall	_setBuz
 15325                           
 15326                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15327  08BE  0020               	movlb	0	; select bank0
 15328  08BF  0838               	movf	DlyOff_Main@sw,w
 15329  08C0  3195  25E6         	fcall	_setDimmerLights_ErrorClose
 15330  08C2  0008               	return
 15331  08C3                     __end_of_DlyOff_Main:	
 15332                           
 15333                           	psect	text96
 15334  15E6                     __ptext96:	
 15335 ;; *************** function _setDimmerLights_ErrorClose *****************
 15336 ;; Defined at:
 15337 ;;		line 578 in file "../src/Dimmer_B1.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;  lights          1    wreg     unsigned char 
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  lights          1   19[BANK0 ] unsigned char 
 15342 ;;  i               2   20[BANK0 ] int 
 15343 ;;  count           1   18[BANK0 ] unsigned char 
 15344 ;; Return value:  Size  Location     Type
 15345 ;;		None               void
 15346 ;; Registers used:
 15347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15348 ;; Tracked objects:
 15349 ;;		On entry : 0/0
 15350 ;;		On exit  : 0/0
 15351 ;;		Unchanged: 0/0
 15352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15354 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;Total ram usage:        5 bytes
 15358 ;; Hardware stack levels used:    1
 15359 ;; Hardware stack levels required when called:    9
 15360 ;; This function calls:
 15361 ;;		_DimmerLightsPointSelect
 15362 ;;		_getDimmerLights_Status
 15363 ;;		_setDimmerLights_SwOff
 15364 ;; This function is called by:
 15365 ;;		_DlyOff_Main
 15366 ;;		_setMain_Exception
 15367 ;;		_setControl_Lights_Table
 15368 ;; This function uses a non-reentrant model
 15369 ;;
 15370                           
 15371                           
 15372                           ;psect for function _setDimmerLights_ErrorClose
 15373  15E6                     _setDimmerLights_ErrorClose:	
 15374                           
 15375                           ;incstack = 0
 15376                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15377                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15378  15E6  0020               	movlb	0	; select bank0
 15379  15E7  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15380                           
 15381                           ;Dimmer_B1.c: 579: if (lights == 255) {
 15382  15E8  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15383  15E9  3AFF               	xorlw	255
 15384  15EA  1D03               	skipz
 15385  15EB  2E21               	goto	l6082
 15386                           
 15387                           ;Dimmer_B1.c: 581: char count = 1;
 15388  15EC  01B2               	clrf	setDimmerLights_ErrorClose@count
 15389  15ED  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15390                           
 15391                           ;Dimmer_B1.c: 589: for (int i = 0; i < count; i++) {
 15392  15EE  01B4               	clrf	setDimmerLights_ErrorClose@i
 15393  15EF  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15394  15F0                     l6080:	
 15395  15F0  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15396  15F1  3A80               	xorlw	128
 15397  15F2  00B1               	movwf	??_setDimmerLights_ErrorClose
 15398  15F3  3080               	movlw	128
 15399  15F4  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15400  15F5  1D03               	skipz
 15401  15F6  2DF9               	goto	u5085
 15402  15F7  0832               	movf	setDimmerLights_ErrorClose@count,w
 15403  15F8  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15404  15F9                     u5085:	
 15405  15F9  1803               	btfsc	3,0
 15406  15FA  0008               	return
 15407                           
 15408                           ;Dimmer_B1.c: 590: DimmerLightsPointSelect(i + 1);
 15409  15FB  0020               	movlb	0	; select bank0
 15410  15FC  0834               	movf	setDimmerLights_ErrorClose@i,w
 15411  15FD  3E01               	addlw	1
 15412  15FE  319C  248B  3195   	fcall	_DimmerLightsPointSelect
 15413                           
 15414                           ;Dimmer_B1.c: 591: if (getDimmerLights_Status(i + 1) == 1) {
 15415  1601  0020               	movlb	0	; select bank0
 15416  1602  0834               	movf	setDimmerLights_ErrorClose@i,w
 15417  1603  3E01               	addlw	1
 15418  1604  319D  255D  3195   	fcall	_getDimmerLights_Status
 15419  1607  3A01               	xorlw	1
 15420  1608  1D03               	skipz
 15421  1609  2E1B               	goto	l6078
 15422                           
 15423                           ;Dimmer_B1.c: 592: DimmerLights->SwFlag = 1;
 15424  160A  0020               	movlb	0	; select bank0
 15425  160B  086F               	movf	_DimmerLights,w
 15426  160C  3E09               	addlw	9
 15427  160D  0086               	movwf	6
 15428  160E  3001               	movlw	1	; select bank2/3
 15429  160F  0087               	movwf	7
 15430  1610  1701               	bsf	1,6
 15431                           
 15432                           ;Dimmer_B1.c: 593: DimmerLights->Status = 0;
 15433  1611  086F               	movf	_DimmerLights,w
 15434  1612  0086               	movwf	6
 15435  1613  3001               	movlw	1	; select bank2/3
 15436  1614  0087               	movwf	7
 15437  1615  1281               	bcf	1,5
 15438                           
 15439                           ;Dimmer_B1.c: 594: setDimmerLights_SwOff(i + 1);
 15440  1616  0834               	movf	setDimmerLights_ErrorClose@i,w
 15441  1617  3E01               	addlw	1
 15442  1618  3194  24B6  3195   	fcall	_setDimmerLights_SwOff
 15443  161B                     l6078:	
 15444  161B  3001               	movlw	1
 15445  161C  0020               	movlb	0	; select bank0
 15446  161D  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15447  161E  3000               	movlw	0
 15448  161F  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15449  1620  2DF0               	goto	l6080
 15450  1621                     l6082:	
 15451                           ;Dimmer_B1.c: 595: }
 15452                           ;Dimmer_B1.c: 596: }
 15453                           ;Dimmer_B1.c: 597: } else {
 15454                           
 15455                           
 15456                           ;Dimmer_B1.c: 598: DimmerLightsPointSelect(lights);
 15457  1621  0020               	movlb	0	; select bank0
 15458  1622  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15459  1623  319C  248B  3195   	fcall	_DimmerLightsPointSelect
 15460                           
 15461                           ;Dimmer_B1.c: 599: if (getDimmerLights_Status(lights) == 1) {
 15462  1626  0020               	movlb	0	; select bank0
 15463  1627  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15464  1628  319D  255D  3195   	fcall	_getDimmerLights_Status
 15465  162B  3A01               	xorlw	1
 15466  162C  1D03               	skipz
 15467  162D  0008               	return
 15468                           
 15469                           ;Dimmer_B1.c: 600: DimmerLights->SwFlag = 1;
 15470  162E  0020               	movlb	0	; select bank0
 15471  162F  086F               	movf	_DimmerLights,w
 15472  1630  3E09               	addlw	9
 15473  1631  0086               	movwf	6
 15474  1632  3001               	movlw	1	; select bank2/3
 15475  1633  0087               	movwf	7
 15476  1634  1701               	bsf	1,6
 15477                           
 15478                           ;Dimmer_B1.c: 601: DimmerLights->Status = 0;
 15479  1635  086F               	movf	_DimmerLights,w
 15480  1636  0086               	movwf	6
 15481  1637  3001               	movlw	1	; select bank2/3
 15482  1638  0087               	movwf	7
 15483  1639  1281               	bcf	1,5
 15484                           
 15485                           ;Dimmer_B1.c: 602: setDimmerLights_SwOff(lights);
 15486  163A  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15487  163B  3194  24B6         	fcall	_setDimmerLights_SwOff
 15488  163D  0008               	return
 15489  163E                     __end_of_setDimmerLights_ErrorClose:	
 15490                           
 15491                           	psect	text97
 15492  14B6                     __ptext97:	
 15493 ;; *************** function _setDimmerLights_SwOff *****************
 15494 ;; Defined at:
 15495 ;;		line 540 in file "../src/Dimmer_B1.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;  sw              1    wreg     unsigned char 
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;  sw              1   16[BANK0 ] unsigned char 
 15500 ;;  command         1   15[BANK0 ] unsigned char 
 15501 ;; Return value:  Size  Location     Type
 15502 ;;		None               void
 15503 ;; Registers used:
 15504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15505 ;; Tracked objects:
 15506 ;;		On entry : 0/0
 15507 ;;		On exit  : 0/0
 15508 ;;		Unchanged: 0/0
 15509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;Total ram usage:        2 bytes
 15515 ;; Hardware stack levels used:    1
 15516 ;; Hardware stack levels required when called:    8
 15517 ;; This function calls:
 15518 ;;		_DimmerLightsPointSelect
 15519 ;;		_getDelayOff_GO
 15520 ;;		_setDelayOff_GO
 15521 ;;		_setDimmerLights_Trigger
 15522 ;;		_setDimmerLights_TriggerAdj
 15523 ;; This function is called by:
 15524 ;;		_setDimmerLights_ErrorClose
 15525 ;;		_setRFSW_Control
 15526 ;;		_setSw_Main
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           
 15531                           ;psect for function _setDimmerLights_SwOff
 15532  14B6                     _setDimmerLights_SwOff:	
 15533                           
 15534                           ;incstack = 0
 15535                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15536                           ;setDimmerLights_SwOff@sw stored from wreg
 15537  14B6  0020               	movlb	0	; select bank0
 15538  14B7  00B0               	movwf	setDimmerLights_SwOff@sw
 15539                           
 15540                           ;Dimmer_B1.c: 541: DimmerLightsPointSelect(sw);
 15541  14B8  0830               	movf	setDimmerLights_SwOff@sw,w
 15542  14B9  319C  248B  3194   	fcall	_DimmerLightsPointSelect
 15543                           
 15544                           ;Dimmer_B1.c: 542: char command = DimmerLights->Status == 1 ? 1 : 0;
 15545  14BC  0020               	movlb	0	; select bank0
 15546  14BD  086F               	movf	_DimmerLights,w
 15547  14BE  0086               	movwf	6
 15548  14BF  3001               	movlw	1	; select bank2/3
 15549  14C0  0087               	movwf	7
 15550  14C1  3000               	movlw	0
 15551  14C2  1A81               	btfsc	1,5
 15552  14C3  3001               	movlw	1
 15553  14C4  00AF               	movwf	setDimmerLights_SwOff@command
 15554                           
 15555                           ;Dimmer_B1.c: 543: if (DimmerLights->SwFlag == 1) {
 15556  14C5  086F               	movf	_DimmerLights,w
 15557  14C6  3E09               	addlw	9
 15558  14C7  0086               	movwf	6
 15559  14C8  3001               	movlw	1	; select bank2/3
 15560  14C9  0087               	movwf	7
 15561  14CA  1F01               	btfss	1,6
 15562  14CB  0008               	return
 15563                           
 15564                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 0;
 15565  14CC  086F               	movf	_DimmerLights,w
 15566  14CD  3E09               	addlw	9
 15567  14CE  0086               	movwf	6
 15568  14CF  3001               	movlw	1	; select bank2/3
 15569  14D0  0087               	movwf	7
 15570  14D1  1301               	bcf	1,6
 15571                           
 15572                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 1) {
 15573  14D2  086F               	movf	_DimmerLights,w
 15574  14D3  0086               	movwf	6
 15575  14D4  3001               	movlw	1	; select bank2/3
 15576  14D5  0087               	movwf	7
 15577  14D6  1E81               	btfss	1,5
 15578  14D7  2CEA               	goto	l5938
 15579                           
 15580                           ;Dimmer_B1.c: 546: if (DimmerLights->SwAdj == 1) {
 15581  14D8  086F               	movf	_DimmerLights,w
 15582  14D9  3E09               	addlw	9
 15583  14DA  0086               	movwf	6
 15584  14DB  3001               	movlw	1	; select bank2/3
 15585  14DC  0087               	movwf	7
 15586  14DD  1F81               	btfss	1,7
 15587  14DE  0008               	return
 15588                           
 15589                           ;Dimmer_B1.c: 547: DimmerLights->SwAdj = 0;
 15590  14DF  086F               	movf	_DimmerLights,w
 15591  14E0  3E09               	addlw	9
 15592  14E1  0086               	movwf	6
 15593  14E2  3001               	movlw	1	; select bank2/3
 15594  14E3  0087               	movwf	7
 15595  14E4  1381               	bcf	1,7
 15596                           
 15597                           ;Dimmer_B1.c: 548: setDimmerLights_TriggerAdj(sw, 0);
 15598  14E5  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15599  14E6  0830               	movf	setDimmerLights_SwOff@sw,w
 15600  14E7  319F  275F         	fcall	_setDimmerLights_TriggerAdj
 15601                           
 15602                           ;Dimmer_B1.c: 549: }
 15603                           ;Dimmer_B1.c: 550: } else {
 15604  14E9  0008               	return
 15605  14EA                     l5938:	
 15606                           
 15607                           ;Dimmer_B1.c: 551: setDimmerLights_Trigger(sw, 0);
 15608  14EA  0020               	movlb	0	; select bank0
 15609  14EB  01A2               	clrf	setDimmerLights_Trigger@command
 15610  14EC  0830               	movf	setDimmerLights_SwOff@sw,w
 15611  14ED  319F  2722  3194   	fcall	_setDimmerLights_Trigger
 15612                           
 15613                           ;Dimmer_B1.c: 553: if (getDelayOff_GO(sw) == 1) {
 15614  14F0  0020               	movlb	0	; select bank0
 15615  14F1  0830               	movf	setDimmerLights_SwOff@sw,w
 15616  14F2  319D  256D  3194   	fcall	_getDelayOff_GO
 15617  14F5  3A01               	xorlw	1
 15618  14F6  1D03               	skipz
 15619  14F7  0008               	return
 15620                           
 15621                           ;Dimmer_B1.c: 554: setDelayOff_GO(sw, 0, 0);
 15622  14F8  0020               	movlb	0	; select bank0
 15623  14F9  01AA               	clrf	setDelayOff_GO@command
 15624  14FA  01AB               	clrf	setDelayOff_GO@value
 15625  14FB  0830               	movf	setDimmerLights_SwOff@sw,w
 15626  14FC  3188  2009         	fcall	_setDelayOff_GO
 15627  14FE  0008               	return
 15628  14FF                     __end_of_setDimmerLights_SwOff:	
 15629                           
 15630                           	psect	text98
 15631  1F5F                     __ptext98:	
 15632 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15633 ;; Defined at:
 15634 ;;		line 789 in file "../src/Dimmer_B1.c"
 15635 ;; Parameters:    Size  Location     Type
 15636 ;;  lights          1    wreg     unsigned char 
 15637 ;;  command         1    2[BANK0 ] unsigned char 
 15638 ;; Auto vars:     Size  Location     Type
 15639 ;;  lights          1    4[BANK0 ] unsigned char 
 15640 ;; Return value:  Size  Location     Type
 15641 ;;		None               void
 15642 ;; Registers used:
 15643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15644 ;; Tracked objects:
 15645 ;;		On entry : 0/0
 15646 ;;		On exit  : 0/0
 15647 ;;		Unchanged: 0/0
 15648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15649 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;Total ram usage:        3 bytes
 15654 ;; Hardware stack levels used:    1
 15655 ;; Hardware stack levels required when called:    6
 15656 ;; This function calls:
 15657 ;;		_DimmerLightsPointSelect
 15658 ;; This function is called by:
 15659 ;;		_setDimmerLights_SwOff
 15660 ;;		_setDimmerLights_AdjControl
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           
 15665                           ;psect for function _setDimmerLights_TriggerAdj
 15666  1F5F                     _setDimmerLights_TriggerAdj:	
 15667                           
 15668                           ;incstack = 0
 15669                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15670                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15671  1F5F  0020               	movlb	0	; select bank0
 15672  1F60  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15673                           
 15674                           ;Dimmer_B1.c: 790: DimmerLightsPointSelect(lights);
 15675  1F61  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15676  1F62  319C  248B         	fcall	_DimmerLightsPointSelect
 15677                           
 15678                           ;Dimmer_B1.c: 791: DimmerLights->TriggerAdj = 1;
 15679  1F64  0020               	movlb	0	; select bank0
 15680  1F65  086F               	movf	_DimmerLights,w
 15681  1F66  3E08               	addlw	8
 15682  1F67  0086               	movwf	6
 15683  1F68  3001               	movlw	1	; select bank2/3
 15684  1F69  0087               	movwf	7
 15685  1F6A  1601               	bsf	1,4
 15686                           
 15687                           ;Dimmer_B1.c: 792: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15688  1F6B  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15689  1F6C  3A01               	xorlw	1
 15690  1F6D  3000               	movlw	0
 15691  1F6E  1903               	skipnz
 15692  1F6F  3001               	movlw	1
 15693  1F70  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15694  1F71  086F               	movf	_DimmerLights,w
 15695  1F72  3E08               	addlw	8
 15696  1F73  0086               	movwf	6
 15697  1F74  3001               	movlw	1	; select bank2/3
 15698  1F75  0087               	movwf	7
 15699  1F76  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15700  1F77  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15701  1F78  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15702  1F79  0801               	movf	1,w
 15703  1F7A  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15704  1F7B  39F7               	andlw	-9
 15705  1F7C  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15706  1F7D  0081               	movwf	1
 15707  1F7E  0008               	return
 15708  1F7F                     __end_of_setDimmerLights_TriggerAdj:	
 15709                           
 15710                           	psect	text99
 15711  1F22                     __ptext99:	
 15712 ;; *************** function _setDimmerLights_Trigger *****************
 15713 ;; Defined at:
 15714 ;;		line 783 in file "../src/Dimmer_B1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  lights          1    wreg     unsigned char 
 15717 ;;  command         1    2[BANK0 ] unsigned char 
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  lights          1    4[BANK0 ] unsigned char 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;		None               void
 15722 ;; Registers used:
 15723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15729 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;Total ram usage:        3 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:    6
 15736 ;; This function calls:
 15737 ;;		_DimmerLightsPointSelect
 15738 ;; This function is called by:
 15739 ;;		_setDimmerLights_SwOn
 15740 ;;		_setDimmerLights_SwOff
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           
 15745                           ;psect for function _setDimmerLights_Trigger
 15746  1F22                     _setDimmerLights_Trigger:	
 15747                           
 15748                           ;incstack = 0
 15749                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15750                           ;setDimmerLights_Trigger@lights stored from wreg
 15751  1F22  0020               	movlb	0	; select bank0
 15752  1F23  00A4               	movwf	setDimmerLights_Trigger@lights
 15753                           
 15754                           ;Dimmer_B1.c: 784: DimmerLightsPointSelect(lights);
 15755  1F24  0824               	movf	setDimmerLights_Trigger@lights,w
 15756  1F25  319C  248B         	fcall	_DimmerLightsPointSelect
 15757                           
 15758                           ;Dimmer_B1.c: 785: DimmerLights->Trigger = 1;
 15759  1F27  0020               	movlb	0	; select bank0
 15760  1F28  086F               	movf	_DimmerLights,w
 15761  1F29  3E08               	addlw	8
 15762  1F2A  0086               	movwf	6
 15763  1F2B  3001               	movlw	1	; select bank2/3
 15764  1F2C  0087               	movwf	7
 15765  1F2D  1501               	bsf	1,2
 15766                           
 15767                           ;Dimmer_B1.c: 786: DimmerLights->Switch = command == 1 ? 1 : 0;
 15768  1F2E  0822               	movf	setDimmerLights_Trigger@command,w
 15769  1F2F  3A01               	xorlw	1
 15770  1F30  3000               	movlw	0
 15771  1F31  1903               	skipnz
 15772  1F32  3001               	movlw	1
 15773  1F33  00A3               	movwf	??_setDimmerLights_Trigger
 15774  1F34  086F               	movf	_DimmerLights,w
 15775  1F35  3E08               	addlw	8
 15776  1F36  0086               	movwf	6
 15777  1F37  3001               	movlw	1	; select bank2/3
 15778  1F38  0087               	movwf	7
 15779  1F39  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15780  1F3A  0801               	movf	1,w
 15781  1F3B  0623               	xorwf	??_setDimmerLights_Trigger,w
 15782  1F3C  39FD               	andlw	-3
 15783  1F3D  0623               	xorwf	??_setDimmerLights_Trigger,w
 15784  1F3E  0081               	movwf	1
 15785  1F3F  0008               	return
 15786  1F40                     __end_of_setDimmerLights_Trigger:	
 15787                           
 15788                           	psect	text100
 15789  0809                     __ptext100:	
 15790 ;; *************** function _setDelayOff_GO *****************
 15791 ;; Defined at:
 15792 ;;		line 83 in file "../src/DelayOff_B1.c"
 15793 ;; Parameters:    Size  Location     Type
 15794 ;;  sw              1    wreg     unsigned char 
 15795 ;;  command         1   10[BANK0 ] unsigned char 
 15796 ;;  value           1   11[BANK0 ] unsigned char 
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;  sw              1   14[BANK0 ] unsigned char 
 15799 ;; Return value:  Size  Location     Type
 15800 ;;		None               void
 15801 ;; Registers used:
 15802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15803 ;; Tracked objects:
 15804 ;;		On entry : 0/0
 15805 ;;		On exit  : 0/0
 15806 ;;		Unchanged: 0/0
 15807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15808 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;Total ram usage:        5 bytes
 15813 ;; Hardware stack levels used:    1
 15814 ;; Hardware stack levels required when called:    7
 15815 ;; This function calls:
 15816 ;;		_DelayOffPointSelect
 15817 ;;		_DelayTimejudge
 15818 ;; This function is called by:
 15819 ;;		_setDimmerLights_SwOff
 15820 ;;		_setRFSW_Control
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           
 15825                           ;psect for function _setDelayOff_GO
 15826  0809                     _setDelayOff_GO:	
 15827                           
 15828                           ;incstack = 0
 15829                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15830                           ;setDelayOff_GO@sw stored from wreg
 15831  0809  0020               	movlb	0	; select bank0
 15832  080A  00AE               	movwf	setDelayOff_GO@sw
 15833                           
 15834                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15835  080B  082E               	movf	setDelayOff_GO@sw,w
 15836  080C  319C  2480  3188   	fcall	_DelayOffPointSelect
 15837                           
 15838                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15839  080F  0020               	movlb	0	; select bank0
 15840  0810  082A               	movf	setDelayOff_GO@command,w
 15841  0811  3A01               	xorlw	1
 15842  0812  3000               	movlw	0
 15843  0813  1903               	skipnz
 15844  0814  3001               	movlw	1
 15845  0815  00AC               	movwf	??_setDelayOff_GO
 15846  0816  0878               	movf	_DelayOff,w
 15847  0817  0086               	movwf	6
 15848  0818  3001               	movlw	1	; select bank2/3
 15849  0819  0087               	movwf	7
 15850  081A  0DAC               	rlf	??_setDelayOff_GO,f
 15851  081B  0801               	movf	1,w
 15852  081C  062C               	xorwf	??_setDelayOff_GO,w
 15853  081D  39FD               	andlw	-3
 15854  081E  062C               	xorwf	??_setDelayOff_GO,w
 15855  081F  0081               	movwf	1
 15856                           
 15857                           ;DelayOff_B1.c: 89: if (command == 1) {
 15858  0820  082A               	movf	setDelayOff_GO@command,w
 15859  0821  3A01               	xorlw	1
 15860  0822  1D03               	skipz
 15861  0823  284E               	goto	l5858
 15862                           
 15863                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15864  0824  082B               	movf	setDelayOff_GO@value,w
 15865  0825  3191  2168  3188   	fcall	_DelayTimejudge
 15866  0828  0020               	movlb	0	; select bank0
 15867  0829  00AC               	movwf	??_setDelayOff_GO
 15868  082A  0A78               	incf	_DelayOff,w
 15869  082B  0086               	movwf	6
 15870  082C  3001               	movlw	1	; select bank2/3
 15871  082D  0087               	movwf	7
 15872  082E  082C               	movf	??_setDelayOff_GO,w
 15873  082F  0081               	movwf	1
 15874                           
 15875                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15876  0830  300F               	movlw	15
 15877  0831  052B               	andwf	setDelayOff_GO@value,w
 15878  0832  00AC               	movwf	??_setDelayOff_GO
 15879  0833  082C               	movf	??_setDelayOff_GO,w
 15880  0834  3A05               	xorlw	5
 15881  0835  1903               	skipnz
 15882  0836  283B               	goto	l5852
 15883  0837  082B               	movf	setDelayOff_GO@value,w
 15884  0838  390F               	andlw	15
 15885  0839  1D03               	btfss	3,2
 15886  083A  2841               	goto	l5856
 15887  083B                     l5852:	
 15888  083B  3026               	movlw	38
 15889  083C  022B               	subwf	setDelayOff_GO@value,w
 15890  083D  1803               	skipnc
 15891  083E  2841               	goto	l5856
 15892                           
 15893                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15894  083F  082B               	movf	setDelayOff_GO@value,w
 15895  0840  2842               	goto	L8
 15896  0841                     l5856:	
 15897                           ;DelayOff_B1.c: 93: } else {
 15898                           
 15899                           
 15900                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15901  0841  3005               	movlw	5
 15902  0842                     L8:	
 15903  0842  00AC               	movwf	??_setDelayOff_GO
 15904  0843  082E               	movf	setDelayOff_GO@sw,w
 15905  0844  3E1A               	addlw	26
 15906  0845  076E               	addwf	_product,w
 15907  0846  00AD               	movwf	??_setDelayOff_GO+1
 15908  0847  082D               	movf	??_setDelayOff_GO+1,w
 15909  0848  0086               	movwf	6
 15910  0849  3002               	movlw	2	; select bank4/5
 15911  084A  0087               	movwf	7
 15912  084B  082C               	movf	??_setDelayOff_GO,w
 15913  084C  0081               	movwf	1
 15914                           
 15915                           ;DelayOff_B1.c: 95: }
 15916                           ;DelayOff_B1.c: 96: } else {
 15917  084D  2857               	goto	l5860
 15918  084E                     l5858:	
 15919                           
 15920                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15921  084E  082E               	movf	setDelayOff_GO@sw,w
 15922  084F  3E1A               	addlw	26
 15923  0850  076E               	addwf	_product,w
 15924  0851  00AC               	movwf	??_setDelayOff_GO
 15925  0852  082C               	movf	??_setDelayOff_GO,w
 15926  0853  0086               	movwf	6
 15927  0854  3002               	movlw	2	; select bank4/5
 15928  0855  0087               	movwf	7
 15929  0856  0181               	clrf	1
 15930  0857                     l5860:	
 15931                           
 15932                           ;DelayOff_B1.c: 98: }
 15933                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15934  0857  0878               	movf	_DelayOff,w
 15935  0858  3E02               	addlw	2
 15936  0859  0086               	movwf	6
 15937  085A  3001               	movlw	1	; select bank2/3
 15938  085B  0087               	movwf	7
 15939  085C  3000               	movlw	0
 15940  085D  3FC0               	movwi [0]fsr1
 15941  085E  3FC1               	movwi [1]fsr1
 15942                           
 15943                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15944  085F  0878               	movf	_DelayOff,w
 15945  0860  3E04               	addlw	4
 15946  0861  0086               	movwf	6
 15947  0862  3001               	movlw	1	; select bank2/3
 15948  0863  0087               	movwf	7
 15949  0864  0181               	clrf	1
 15950  0865  0008               	return
 15951  0866                     __end_of_setDelayOff_GO:	
 15952                           
 15953                           	psect	text101
 15954  1168                     __ptext101:	
 15955 ;; *************** function _DelayTimejudge *****************
 15956 ;; Defined at:
 15957 ;;		line 112 in file "../src/DelayOff_B1.c"
 15958 ;; Parameters:    Size  Location     Type
 15959 ;;  value           1    wreg     unsigned char 
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;  value           1    9[BANK0 ] unsigned char 
 15962 ;;  k               1    8[BANK0 ] unsigned char 
 15963 ;;  j               1    7[BANK0 ] unsigned char 
 15964 ;;  i               1    6[BANK0 ] unsigned char 
 15965 ;; Return value:  Size  Location     Type
 15966 ;;                  1    wreg      unsigned char 
 15967 ;; Registers used:
 15968 ;;		wreg, status,2, status,0, pclath, cstack
 15969 ;; Tracked objects:
 15970 ;;		On entry : 0/0
 15971 ;;		On exit  : 0/0
 15972 ;;		Unchanged: 0/0
 15973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15975 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;Total ram usage:        6 bytes
 15979 ;; Hardware stack levels used:    1
 15980 ;; Hardware stack levels required when called:    6
 15981 ;; This function calls:
 15982 ;;		___bmul
 15983 ;; This function is called by:
 15984 ;;		_setDelayOff_GO
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           
 15989                           ;psect for function _DelayTimejudge
 15990  1168                     _DelayTimejudge:	
 15991                           
 15992                           ;incstack = 0
 15993                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15994                           ;DelayTimejudge@value stored from wreg
 15995  1168  0020               	movlb	0	; select bank0
 15996  1169  00A9               	movwf	DelayTimejudge@value
 15997                           
 15998                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15999  116A  3005               	movlw	5
 16000  116B  00A4               	movwf	??_DelayTimejudge
 16001  116C  0824               	movf	??_DelayTimejudge,w
 16002  116D  00A6               	movwf	DelayTimejudge@i
 16003  116E  01A7               	clrf	DelayTimejudge@j
 16004  116F  01A8               	clrf	DelayTimejudge@k
 16005                           
 16006                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16007  1170  3031               	movlw	49
 16008  1171  0229               	subwf	DelayTimejudge@value,w
 16009  1172  1803               	skipnc
 16010  1173  2990               	goto	l5752
 16011                           
 16012                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16013  1174  0829               	movf	DelayTimejudge@value,w
 16014  1175  390F               	andlw	15
 16015  1176  00A4               	movwf	??_DelayTimejudge
 16016  1177  0824               	movf	??_DelayTimejudge,w
 16017  1178  00A7               	movwf	DelayTimejudge@j
 16018                           
 16019                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16020  1179  0829               	movf	DelayTimejudge@value,w
 16021  117A  00A4               	movwf	??_DelayTimejudge
 16022  117B  3004               	movlw	4
 16023  117C                     u4685:	
 16024  117C  36A4               	lsrf	??_DelayTimejudge,f
 16025  117D  0B89               	decfsz	9,f
 16026  117E  297C               	goto	u4685
 16027  117F  0824               	movf	??_DelayTimejudge,w
 16028  1180  390F               	andlw	15
 16029  1181  00A5               	movwf	??_DelayTimejudge+1
 16030  1182  0825               	movf	??_DelayTimejudge+1,w
 16031  1183  00A8               	movwf	DelayTimejudge@k
 16032                           
 16033                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16034  1184  300A               	movlw	10
 16035  1185  00A4               	movwf	??_DelayTimejudge
 16036  1186  0824               	movf	??_DelayTimejudge,w
 16037  1187  00A0               	movwf	___bmul@multiplicand
 16038  1188  0828               	movf	DelayTimejudge@k,w
 16039  1189  319D  25E1         	fcall	___bmul
 16040  118B  0020               	movlb	0	; select bank0
 16041  118C  0727               	addwf	DelayTimejudge@j,w
 16042  118D  00A5               	movwf	??_DelayTimejudge+1
 16043  118E  0825               	movf	??_DelayTimejudge+1,w
 16044  118F  00A6               	movwf	DelayTimejudge@i
 16045  1190                     l5752:	
 16046                           
 16047                           ;DelayOff_B1.c: 118: }
 16048                           ;DelayOff_B1.c: 139: return i;
 16049  1190  0826               	movf	DelayTimejudge@i,w
 16050  1191  0008               	return
 16051  1192                     __end_of_DelayTimejudge:	
 16052                           
 16053                           	psect	text102
 16054  1DE1                     __ptext102:	
 16055 ;; *************** function ___bmul *****************
 16056 ;; Defined at:
 16057 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16058 ;; Parameters:    Size  Location     Type
 16059 ;;  multiplier      1    wreg     unsigned char 
 16060 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16061 ;; Auto vars:     Size  Location     Type
 16062 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16063 ;;  product         1    2[BANK0 ] unsigned char 
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  1    wreg      unsigned char 
 16066 ;; Registers used:
 16067 ;;		wreg, status,2, status,0
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16073 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;Total ram usage:        4 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:    5
 16080 ;; This function calls:
 16081 ;;		Nothing
 16082 ;; This function is called by:
 16083 ;;		_DelayTimejudge
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           
 16088                           ;psect for function ___bmul
 16089  1DE1                     ___bmul:	
 16090                           
 16091                           ;incstack = 0
 16092                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16093                           ;___bmul@multiplier stored from wreg
 16094  1DE1  0020               	movlb	0	; select bank0
 16095  1DE2  00A3               	movwf	___bmul@multiplier
 16096  1DE3  01A2               	clrf	___bmul@product
 16097  1DE4                     l5494:	
 16098  1DE4  1C23               	btfss	___bmul@multiplier,0
 16099  1DE5  2DEA               	goto	l5498
 16100  1DE6  0820               	movf	___bmul@multiplicand,w
 16101  1DE7  00A1               	movwf	??___bmul
 16102  1DE8  0821               	movf	??___bmul,w
 16103  1DE9  07A2               	addwf	___bmul@product,f
 16104  1DEA                     l5498:	
 16105  1DEA  1003               	clrc
 16106  1DEB  0DA0               	rlf	___bmul@multiplicand,f
 16107  1DEC  1003               	clrc
 16108  1DED  0CA3               	rrf	___bmul@multiplier,f
 16109  1DEE  08A3               	movf	___bmul@multiplier,f
 16110  1DEF  1D03               	skipz
 16111  1DF0  2DE4               	goto	l5494
 16112  1DF1  0822               	movf	___bmul@product,w
 16113  1DF2  0008               	return
 16114  1DF3                     __end_of___bmul:	
 16115                           
 16116                           	psect	text103
 16117  1D6D                     __ptext103:	
 16118 ;; *************** function _getDelayOff_GO *****************
 16119 ;; Defined at:
 16120 ;;		line 105 in file "../src/DelayOff_B1.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;  sw              1    wreg     unsigned char 
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;  sw              1    2[BANK0 ] unsigned char 
 16125 ;;  go              1    3[BANK0 ] unsigned char 
 16126 ;; Return value:  Size  Location     Type
 16127 ;;                  1    wreg      unsigned char 
 16128 ;; Registers used:
 16129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16130 ;; Tracked objects:
 16131 ;;		On entry : 0/0
 16132 ;;		On exit  : 0/0
 16133 ;;		Unchanged: 0/0
 16134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;Total ram usage:        2 bytes
 16140 ;; Hardware stack levels used:    1
 16141 ;; Hardware stack levels required when called:    6
 16142 ;; This function calls:
 16143 ;;		_DelayOffPointSelect
 16144 ;; This function is called by:
 16145 ;;		_setDimmerLights_SwOff
 16146 ;;		_setRFSW_Control
 16147 ;; This function uses a non-reentrant model
 16148 ;;
 16149                           
 16150                           
 16151                           ;psect for function _getDelayOff_GO
 16152  1D6D                     _getDelayOff_GO:	
 16153                           
 16154                           ;incstack = 0
 16155                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16156                           ;getDelayOff_GO@sw stored from wreg
 16157  1D6D  0020               	movlb	0	; select bank0
 16158  1D6E  00A2               	movwf	getDelayOff_GO@sw
 16159                           
 16160                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16161  1D6F  0822               	movf	getDelayOff_GO@sw,w
 16162  1D70  319C  2480         	fcall	_DelayOffPointSelect
 16163                           
 16164                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16165  1D72  0878               	movf	_DelayOff,w
 16166  1D73  0086               	movwf	6
 16167  1D74  3001               	movlw	1	; select bank2/3
 16168  1D75  0087               	movwf	7
 16169  1D76  3000               	movlw	0
 16170  1D77  1881               	btfsc	1,1
 16171  1D78  3001               	movlw	1
 16172  1D79  0020               	movlb	0	; select bank0
 16173  1D7A  00A3               	movwf	getDelayOff_GO@go
 16174                           
 16175                           ;DelayOff_B1.c: 108: return go;
 16176  1D7B  0823               	movf	getDelayOff_GO@go,w
 16177  1D7C  0008               	return
 16178  1D7D                     __end_of_getDelayOff_GO:	
 16179                           
 16180                           	psect	text104
 16181  1D5D                     __ptext104:	
 16182 ;; *************** function _getDimmerLights_Status *****************
 16183 ;; Defined at:
 16184 ;;		line 461 in file "../src/Dimmer_B1.c"
 16185 ;; Parameters:    Size  Location     Type
 16186 ;;  lights          1    wreg     unsigned char 
 16187 ;; Auto vars:     Size  Location     Type
 16188 ;;  lights          1    2[BANK0 ] unsigned char 
 16189 ;;  status          1    3[BANK0 ] unsigned char 
 16190 ;; Return value:  Size  Location     Type
 16191 ;;                  1    wreg      unsigned char 
 16192 ;; Registers used:
 16193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16194 ;; Tracked objects:
 16195 ;;		On entry : 0/0
 16196 ;;		On exit  : 0/0
 16197 ;;		Unchanged: 0/0
 16198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;Total ram usage:        2 bytes
 16204 ;; Hardware stack levels used:    1
 16205 ;; Hardware stack levels required when called:    6
 16206 ;; This function calls:
 16207 ;;		_DimmerLightsPointSelect
 16208 ;; This function is called by:
 16209 ;;		_setDimmerLights_ErrorClose
 16210 ;;		_getMain_LightsStatus
 16211 ;;		_setRFSW_Control
 16212 ;;		_setRFSW_AdjControl
 16213 ;; This function uses a non-reentrant model
 16214 ;;
 16215                           
 16216                           
 16217                           ;psect for function _getDimmerLights_Status
 16218  1D5D                     _getDimmerLights_Status:	
 16219                           
 16220                           ;incstack = 0
 16221                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16222                           ;getDimmerLights_Status@lights stored from wreg
 16223  1D5D  0020               	movlb	0	; select bank0
 16224  1D5E  00A2               	movwf	getDimmerLights_Status@lights
 16225                           
 16226                           ;Dimmer_B1.c: 462: DimmerLightsPointSelect(lights);
 16227  1D5F  0822               	movf	getDimmerLights_Status@lights,w
 16228  1D60  319C  248B         	fcall	_DimmerLightsPointSelect
 16229                           
 16230                           ;Dimmer_B1.c: 463: char status = DimmerLights->Status == 1 ? 1 : 0;
 16231  1D62  0020               	movlb	0	; select bank0
 16232  1D63  086F               	movf	_DimmerLights,w
 16233  1D64  0086               	movwf	6
 16234  1D65  3001               	movlw	1	; select bank2/3
 16235  1D66  0087               	movwf	7
 16236  1D67  3000               	movlw	0
 16237  1D68  1A81               	btfsc	1,5
 16238  1D69  3001               	movlw	1
 16239  1D6A  00A3               	movwf	getDimmerLights_Status@status
 16240                           
 16241                           ;Dimmer_B1.c: 464: return status;
 16242  1D6B  0823               	movf	getDimmerLights_Status@status,w
 16243  1D6C  0008               	return
 16244  1D6D                     __end_of_getDimmerLights_Status:	
 16245                           
 16246                           	psect	text105
 16247  1C8B                     __ptext105:	
 16248 ;; *************** function _DimmerLightsPointSelect *****************
 16249 ;; Defined at:
 16250 ;;		line 326 in file "../src/Dimmer_B1.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;  lights          1    wreg     unsigned char 
 16253 ;; Auto vars:     Size  Location     Type
 16254 ;;  lights          1    1[BANK0 ] unsigned char 
 16255 ;; Return value:  Size  Location     Type
 16256 ;;		None               void
 16257 ;; Registers used:
 16258 ;;		wreg
 16259 ;; Tracked objects:
 16260 ;;		On entry : 0/0
 16261 ;;		On exit  : 0/0
 16262 ;;		Unchanged: 0/0
 16263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;Total ram usage:        2 bytes
 16269 ;; Hardware stack levels used:    1
 16270 ;; Hardware stack levels required when called:    5
 16271 ;; This function calls:
 16272 ;;		Nothing
 16273 ;; This function is called by:
 16274 ;;		_setDimmerLights_Initialization
 16275 ;;		_setDimmerLights_Main
 16276 ;;		_getDimmerLights_Status
 16277 ;;		_setDimmerLights_SwOn
 16278 ;;		_setDimmerLights_SwOff
 16279 ;;		_setDimmerLights_AdjControl
 16280 ;;		_setDimmerLights_ErrorClose
 16281 ;;		_setDimmerLights
 16282 ;;		_setDimmerLights_Adj
 16283 ;;		_setDimmerLights_AdjRF
 16284 ;;		_setDimmerLights_Trigger
 16285 ;;		_setDimmerLights_TriggerAdj
 16286 ;;		_setDimmerLights_Status
 16287 ;;		_setDimmerLights_GO
 16288 ;;		_setDimmerLights_MaxmumValue
 16289 ;; This function uses a non-reentrant model
 16290 ;;
 16291                           
 16292                           
 16293                           ;psect for function _DimmerLightsPointSelect
 16294  1C8B                     _DimmerLightsPointSelect:	
 16295                           
 16296                           ;incstack = 0
 16297                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16298                           ;DimmerLightsPointSelect@lights stored from wreg
 16299  1C8B  0020               	movlb	0	; select bank0
 16300  1C8C  00A1               	movwf	DimmerLightsPointSelect@lights
 16301                           
 16302                           ;Dimmer_B1.c: 328: if (lights == 1) {
 16303  1C8D  0821               	movf	DimmerLightsPointSelect@lights,w
 16304  1C8E  3A01               	xorlw	1
 16305  1C8F  1D03               	skipz
 16306  1C90  0008               	return
 16307                           
 16308                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 16309  1C91  30C5               	movlw	_DimmerLights1& (0+255)
 16310  1C92  00A0               	movwf	??_DimmerLightsPointSelect
 16311  1C93  0820               	movf	??_DimmerLightsPointSelect,w
 16312  1C94  00EF               	movwf	_DimmerLights
 16313  1C95  0008               	return
 16314  1C96                     __end_of_DimmerLightsPointSelect:	
 16315                           
 16316                           	psect	text106
 16317  1696                     __ptext106:	
 16318 ;; *************** function _setBuz *****************
 16319 ;; Defined at:
 16320 ;;		line 22 in file "../src/Buzzer_B1.c"
 16321 ;; Parameters:    Size  Location     Type
 16322 ;;  count           1    wreg     unsigned char 
 16323 ;;  time            2    9[BANK0 ] int 
 16324 ;; Auto vars:     Size  Location     Type
 16325 ;;  count           1   12[BANK0 ] unsigned char 
 16326 ;; Return value:  Size  Location     Type
 16327 ;;		None               void
 16328 ;; Registers used:
 16329 ;;		wreg, status,2, status,0, pclath, cstack
 16330 ;; Tracked objects:
 16331 ;;		On entry : 0/0
 16332 ;;		On exit  : 0/0
 16333 ;;		Unchanged: 0/0
 16334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;Total ram usage:        4 bytes
 16340 ;; Hardware stack levels used:    1
 16341 ;; Hardware stack levels required when called:    6
 16342 ;; This function calls:
 16343 ;;		___awdiv
 16344 ;; This function is called by:
 16345 ;;		_DlyOff_Main
 16346 ;;		_setDimmerLights_Main
 16347 ;;		_setDimmerLights_SwOn
 16348 ;;		_my_MainTimer
 16349 ;;		_setMain_Exception
 16350 ;;		_setTemp_Main
 16351 ;;		_setLog_Code
 16352 ;;		_setControl_Lights_Table
 16353 ;;		_setRFSW_Control
 16354 ;;		_setSw_Main
 16355 ;; This function uses a non-reentrant model
 16356 ;;
 16357                           
 16358                           
 16359                           ;psect for function _setBuz
 16360  1696                     _setBuz:	
 16361                           
 16362                           ;incstack = 0
 16363                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16364                           ;setBuz@count stored from wreg
 16365  1696  0020               	movlb	0	; select bank0
 16366  1697  00AC               	movwf	setBuz@count
 16367                           
 16368                           ;Buzzer_B1.c: 23: time /= 10;
 16369  1698  300A               	movlw	10
 16370  1699  00A0               	movwf	___awdiv@divisor
 16371  169A  3000               	movlw	0
 16372  169B  00A1               	movwf	___awdiv@divisor+1
 16373  169C  082A               	movf	setBuz@time+1,w
 16374  169D  01A3               	clrf	___awdiv@dividend+1
 16375  169E  07A3               	addwf	___awdiv@dividend+1,f
 16376  169F  0829               	movf	setBuz@time,w
 16377  16A0  01A2               	clrf	___awdiv@dividend
 16378  16A1  07A2               	addwf	___awdiv@dividend,f
 16379  16A2  3187  27AC  3196   	fcall	___awdiv
 16380  16A5  0020               	movlb	0	; select bank0
 16381  16A6  0821               	movf	?___awdiv+1,w
 16382  16A7  01AA               	clrf	setBuz@time+1
 16383  16A8  07AA               	addwf	setBuz@time+1,f
 16384  16A9  0820               	movf	?___awdiv,w
 16385  16AA  01A9               	clrf	setBuz@time
 16386  16AB  07A9               	addwf	setBuz@time,f
 16387                           
 16388                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16389  16AC  0021               	movlb	1	; select bank1
 16390  16AD  1C2F               	btfss	_Buz1^(0+128),0
 16391  16AE  0008               	return
 16392                           
 16393                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16394  16AF  18AF               	btfsc	_Buz1^(0+128),1
 16395  16B0  2EC7               	goto	l84
 16396                           
 16397                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16398  16B1  14AF               	bsf	_Buz1^(0+128),1
 16399                           
 16400                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16401  16B2  01B0               	clrf	(_Buz1^(0+128)+1)
 16402  16B3  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16403                           
 16404                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16405  16B4  0020               	movlb	0	; select bank0
 16406  16B5  082C               	movf	setBuz@count,w
 16407  16B6  00AB               	movwf	??_setBuz
 16408  16B7  082B               	movf	??_setBuz,w
 16409  16B8  0021               	movlb	1	; select bank1
 16410  16B9  00B2               	movwf	(_Buz1^(0+128)+3)
 16411                           
 16412                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16413  16BA  0020               	movlb	0	; select bank0
 16414  16BB  082A               	movf	setBuz@time+1,w
 16415  16BC  0021               	movlb	1	; select bank1
 16416  16BD  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16417  16BE  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16418  16BF  0020               	movlb	0	; select bank0
 16419  16C0  0829               	movf	setBuz@time,w
 16420  16C1  0021               	movlb	1	; select bank1
 16421  16C2  01B5               	clrf	(_Buz1^(0+128)+6)
 16422  16C3  07B5               	addwf	(_Buz1^(0+128)+6),f
 16423                           
 16424                           ;Buzzer_B1.c: 30: RB3 = 1;
 16425  16C4  0020               	movlb	0	; select bank0
 16426  16C5  158D               	bsf	13,3	;volatile
 16427                           
 16428                           ;Buzzer_B1.c: 31: } else {
 16429  16C6  0008               	return
 16430  16C7                     l84:	
 16431                           
 16432                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16433  16C7  19AF               	btfsc	_Buz1^(0+128),3
 16434  16C8  2EDB               	goto	l86
 16435                           
 16436                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16437  16C9  15AF               	bsf	_Buz1^(0+128),3
 16438                           
 16439                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16440  16CA  0020               	movlb	0	; select bank0
 16441  16CB  082C               	movf	setBuz@count,w
 16442  16CC  00AB               	movwf	??_setBuz
 16443  16CD  082B               	movf	??_setBuz,w
 16444  16CE  0021               	movlb	1	; select bank1
 16445  16CF  00B3               	movwf	(_Buz1^(0+128)+4)
 16446                           
 16447                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16448  16D0  0020               	movlb	0	; select bank0
 16449  16D1  082A               	movf	setBuz@time+1,w
 16450  16D2  0021               	movlb	1	; select bank1
 16451  16D3  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16452  16D4  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16453  16D5  0020               	movlb	0	; select bank0
 16454  16D6  0829               	movf	setBuz@time,w
 16455  16D7  0021               	movlb	1	; select bank1
 16456  16D8  01B7               	clrf	(_Buz1^(0+128)+8)
 16457  16D9  07B7               	addwf	(_Buz1^(0+128)+8),f
 16458                           
 16459                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16460  16DA  0008               	return
 16461  16DB                     l86:	
 16462  16DB  1A2F               	btfsc	_Buz1^(0+128),4
 16463  16DC  0008               	return
 16464                           
 16465                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16466  16DD  162F               	bsf	_Buz1^(0+128),4
 16467                           
 16468                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16469  16DE  0020               	movlb	0	; select bank0
 16470  16DF  082C               	movf	setBuz@count,w
 16471  16E0  00AB               	movwf	??_setBuz
 16472  16E1  082B               	movf	??_setBuz,w
 16473  16E2  0021               	movlb	1	; select bank1
 16474  16E3  00B4               	movwf	(_Buz1^(0+128)+5)
 16475                           
 16476                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16477  16E4  0020               	movlb	0	; select bank0
 16478  16E5  082A               	movf	setBuz@time+1,w
 16479  16E6  0021               	movlb	1	; select bank1
 16480  16E7  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16481  16E8  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16482  16E9  0020               	movlb	0	; select bank0
 16483  16EA  0829               	movf	setBuz@time,w
 16484  16EB  0021               	movlb	1	; select bank1
 16485  16EC  01B9               	clrf	(_Buz1^(0+128)+10)
 16486  16ED  07B9               	addwf	(_Buz1^(0+128)+10),f
 16487  16EE  0008               	return
 16488  16EF                     __end_of_setBuz:	
 16489                           
 16490                           	psect	text107
 16491  07AC                     __ptext107:	
 16492 ;; *************** function ___awdiv *****************
 16493 ;; Defined at:
 16494 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;  divisor         2    0[BANK0 ] int 
 16497 ;;  dividend        2    2[BANK0 ] int 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;  quotient        2    7[BANK0 ] int 
 16500 ;;  sign            1    6[BANK0 ] unsigned char 
 16501 ;;  counter         1    5[BANK0 ] unsigned char 
 16502 ;; Return value:  Size  Location     Type
 16503 ;;                  2    0[BANK0 ] int 
 16504 ;; Registers used:
 16505 ;;		wreg, status,2, status,0
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;Total ram usage:        9 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    5
 16518 ;; This function calls:
 16519 ;;		Nothing
 16520 ;; This function is called by:
 16521 ;;		_setBuz
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           
 16526                           ;psect for function ___awdiv
 16527  07AC                     ___awdiv:	
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16531  07AC  0020               	movlb	0	; select bank0
 16532  07AD  01A6               	clrf	___awdiv@sign
 16533  07AE  1FA1               	btfss	___awdiv@divisor+1,7
 16534  07AF  2FB7               	goto	l5776
 16535  07B0  09A0               	comf	___awdiv@divisor,f
 16536  07B1  09A1               	comf	___awdiv@divisor+1,f
 16537  07B2  0AA0               	incf	___awdiv@divisor,f
 16538  07B3  1903               	skipnz
 16539  07B4  0AA1               	incf	___awdiv@divisor+1,f
 16540  07B5  01A6               	clrf	___awdiv@sign
 16541  07B6  0AA6               	incf	___awdiv@sign,f
 16542  07B7                     l5776:	
 16543  07B7  1FA3               	btfss	___awdiv@dividend+1,7
 16544  07B8  2FC2               	goto	l5782
 16545  07B9  09A2               	comf	___awdiv@dividend,f
 16546  07BA  09A3               	comf	___awdiv@dividend+1,f
 16547  07BB  0AA2               	incf	___awdiv@dividend,f
 16548  07BC  1903               	skipnz
 16549  07BD  0AA3               	incf	___awdiv@dividend+1,f
 16550  07BE  3001               	movlw	1
 16551  07BF  00A4               	movwf	??___awdiv
 16552  07C0  0824               	movf	??___awdiv,w
 16553  07C1  06A6               	xorwf	___awdiv@sign,f
 16554  07C2                     l5782:	
 16555  07C2  01A7               	clrf	___awdiv@quotient
 16556  07C3  01A8               	clrf	___awdiv@quotient+1
 16557  07C4  0821               	movf	___awdiv@divisor+1,w
 16558  07C5  0420               	iorwf	___awdiv@divisor,w
 16559  07C6  1903               	skipnz
 16560  07C7  2FF1               	goto	l5804
 16561  07C8  01A5               	clrf	___awdiv@counter
 16562  07C9  0AA5               	incf	___awdiv@counter,f
 16563  07CA                     l5792:	
 16564  07CA  1BA1               	btfsc	___awdiv@divisor+1,7
 16565  07CB  2FD6               	goto	l5794
 16566  07CC  3001               	movlw	1
 16567  07CD                     u4735:	
 16568  07CD  35A0               	lslf	___awdiv@divisor,f
 16569  07CE  0DA1               	rlf	___awdiv@divisor+1,f
 16570  07CF  0B89               	decfsz	9,f
 16571  07D0  2FCD               	goto	u4735
 16572  07D1  3001               	movlw	1
 16573  07D2  00A4               	movwf	??___awdiv
 16574  07D3  0824               	movf	??___awdiv,w
 16575  07D4  07A5               	addwf	___awdiv@counter,f
 16576  07D5  2FCA               	goto	l5792
 16577  07D6                     l5794:	
 16578  07D6  3001               	movlw	1
 16579  07D7                     u4755:	
 16580  07D7  35A7               	lslf	___awdiv@quotient,f
 16581  07D8  0DA8               	rlf	___awdiv@quotient+1,f
 16582  07D9  0B89               	decfsz	9,f
 16583  07DA  2FD7               	goto	u4755
 16584  07DB  0821               	movf	___awdiv@divisor+1,w
 16585  07DC  0223               	subwf	___awdiv@dividend+1,w
 16586  07DD  1D03               	skipz
 16587  07DE  2FE1               	goto	u4765
 16588  07DF  0820               	movf	___awdiv@divisor,w
 16589  07E0  0222               	subwf	___awdiv@dividend,w
 16590  07E1                     u4765:	
 16591  07E1  1C03               	skipc
 16592  07E2  2FE8               	goto	l5800
 16593  07E3  0820               	movf	___awdiv@divisor,w
 16594  07E4  02A2               	subwf	___awdiv@dividend,f
 16595  07E5  0821               	movf	___awdiv@divisor+1,w
 16596  07E6  3BA3               	subwfb	___awdiv@dividend+1,f
 16597  07E7  1427               	bsf	___awdiv@quotient,0
 16598  07E8                     l5800:	
 16599  07E8  3001               	movlw	1
 16600  07E9                     u4775:	
 16601  07E9  36A1               	lsrf	___awdiv@divisor+1,f
 16602  07EA  0CA0               	rrf	___awdiv@divisor,f
 16603  07EB  0B89               	decfsz	9,f
 16604  07EC  2FE9               	goto	u4775
 16605  07ED  3001               	movlw	1
 16606  07EE  02A5               	subwf	___awdiv@counter,f
 16607  07EF  1D03               	btfss	3,2
 16608  07F0  2FD6               	goto	l5794
 16609  07F1                     l5804:	
 16610  07F1  0826               	movf	___awdiv@sign,w
 16611  07F2  1903               	btfsc	3,2
 16612  07F3  2FF9               	goto	l5808
 16613  07F4  09A7               	comf	___awdiv@quotient,f
 16614  07F5  09A8               	comf	___awdiv@quotient+1,f
 16615  07F6  0AA7               	incf	___awdiv@quotient,f
 16616  07F7  1903               	skipnz
 16617  07F8  0AA8               	incf	___awdiv@quotient+1,f
 16618  07F9                     l5808:	
 16619  07F9  0828               	movf	___awdiv@quotient+1,w
 16620  07FA  01A1               	clrf	?___awdiv+1
 16621  07FB  07A1               	addwf	?___awdiv+1,f
 16622  07FC  0827               	movf	___awdiv@quotient,w
 16623  07FD  01A0               	clrf	?___awdiv
 16624  07FE  07A0               	addwf	?___awdiv,f
 16625  07FF  0008               	return
 16626  0800                     __end_of___awdiv:	
 16627                           
 16628                           	psect	text108
 16629  1C08                     __ptext108:	
 16630 ;; *************** function _DelayOff_Initialization *****************
 16631 ;; Defined at:
 16632 ;;		line 26 in file "../src/DelayOff_B1.c"
 16633 ;; Parameters:    Size  Location     Type
 16634 ;;		None
 16635 ;; Auto vars:     Size  Location     Type
 16636 ;;		None
 16637 ;; Return value:  Size  Location     Type
 16638 ;;		None               void
 16639 ;; Registers used:
 16640 ;;		wreg, status,2, status,0, pclath, cstack
 16641 ;; Tracked objects:
 16642 ;;		On entry : 0/0
 16643 ;;		On exit  : 0/0
 16644 ;;		Unchanged: 0/0
 16645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;Total ram usage:        0 bytes
 16651 ;; Hardware stack levels used:    1
 16652 ;; Hardware stack levels required when called:    7
 16653 ;; This function calls:
 16654 ;;		_DlyOff_Initialization
 16655 ;; This function is called by:
 16656 ;;		_main
 16657 ;; This function uses a non-reentrant model
 16658 ;;
 16659                           
 16660                           
 16661                           ;psect for function _DelayOff_Initialization
 16662  1C08                     _DelayOff_Initialization:	
 16663                           
 16664                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16665                           
 16666                           ;incstack = 0
 16667                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16668  1C08  3001               	movlw	1
 16669  1C09  319C  2426         	fcall	_DlyOff_Initialization
 16670  1C0B  0008               	return
 16671  1C0C                     __end_of_DelayOff_Initialization:	
 16672                           
 16673                           	psect	text109
 16674  1C26                     __ptext109:	
 16675 ;; *************** function _DlyOff_Initialization *****************
 16676 ;; Defined at:
 16677 ;;		line 56 in file "../src/DelayOff_B1.c"
 16678 ;; Parameters:    Size  Location     Type
 16679 ;;  sw              1    wreg     unsigned char 
 16680 ;; Auto vars:     Size  Location     Type
 16681 ;;  sw              1    2[BANK0 ] unsigned char 
 16682 ;; Return value:  Size  Location     Type
 16683 ;;		None               void
 16684 ;; Registers used:
 16685 ;;		wreg, status,2, status,0, pclath, cstack
 16686 ;; Tracked objects:
 16687 ;;		On entry : 0/0
 16688 ;;		On exit  : 0/0
 16689 ;;		Unchanged: 0/0
 16690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;Total ram usage:        1 bytes
 16696 ;; Hardware stack levels used:    1
 16697 ;; Hardware stack levels required when called:    6
 16698 ;; This function calls:
 16699 ;;		_DelayOffPointSelect
 16700 ;; This function is called by:
 16701 ;;		_DelayOff_Initialization
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           
 16706                           ;psect for function _DlyOff_Initialization
 16707  1C26                     _DlyOff_Initialization:	
 16708                           
 16709                           ;incstack = 0
 16710                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16711                           ;DlyOff_Initialization@sw stored from wreg
 16712  1C26  0020               	movlb	0	; select bank0
 16713  1C27  00A2               	movwf	DlyOff_Initialization@sw
 16714                           
 16715                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16716  1C28  0822               	movf	DlyOff_Initialization@sw,w
 16717  1C29  319C  2480         	fcall	_DelayOffPointSelect
 16718  1C2B  0008               	return
 16719  1C2C                     __end_of_DlyOff_Initialization:	
 16720                           
 16721                           	psect	text110
 16722  1C80                     __ptext110:	
 16723 ;; *************** function _DelayOffPointSelect *****************
 16724 ;; Defined at:
 16725 ;;		line 7 in file "../src/DelayOff_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  sw              1    wreg     unsigned char 
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;  sw              1    1[BANK0 ] unsigned char 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		wreg
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        2 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    5
 16746 ;; This function calls:
 16747 ;;		Nothing
 16748 ;; This function is called by:
 16749 ;;		_DlyOff_Initialization
 16750 ;;		_DlyOff_Main
 16751 ;;		_setDelayOff_GO
 16752 ;;		_getDelayOff_GO
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           
 16757                           ;psect for function _DelayOffPointSelect
 16758  1C80                     _DelayOffPointSelect:	
 16759                           
 16760                           ;incstack = 0
 16761                           ; Regs used in _DelayOffPointSelect: [wreg]
 16762                           ;DelayOffPointSelect@sw stored from wreg
 16763  1C80  0020               	movlb	0	; select bank0
 16764  1C81  00A1               	movwf	DelayOffPointSelect@sw
 16765                           
 16766                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16767  1C82  0821               	movf	DelayOffPointSelect@sw,w
 16768  1C83  3A01               	xorlw	1
 16769  1C84  1D03               	skipz
 16770  1C85  0008               	return
 16771                           
 16772                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16773  1C86  30DD               	movlw	_DlySw1& (0+255)
 16774  1C87  00A0               	movwf	??_DelayOffPointSelect
 16775  1C88  0820               	movf	??_DelayOffPointSelect,w
 16776  1C89  00F8               	movwf	_DelayOff
 16777  1C8A  0008               	return
 16778  1C8B                     __end_of_DelayOffPointSelect:	
 16779                           
 16780                           	psect	text111
 16781  1E7A                     __ptext111:	
 16782 ;; *************** function _CC2500_PowerOnInitial *****************
 16783 ;; Defined at:
 16784 ;;		line 119 in file "../src/CC2500_B1.c"
 16785 ;; Parameters:    Size  Location     Type
 16786 ;;		None
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;		None
 16789 ;; Return value:  Size  Location     Type
 16790 ;;		None               void
 16791 ;; Registers used:
 16792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16793 ;; Tracked objects:
 16794 ;;		On entry : 0/0
 16795 ;;		On exit  : 0/0
 16796 ;;		Unchanged: 0/0
 16797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;Total ram usage:        0 bytes
 16803 ;; Hardware stack levels used:    1
 16804 ;; Hardware stack levels required when called:    8
 16805 ;; This function calls:
 16806 ;;		_CC2500_ClearRXFIFO
 16807 ;;		_CC2500_ClearTXFIFO
 16808 ;;		_CC2500_FrequencyCabr
 16809 ;;		_CC2500_InitPATable
 16810 ;;		_CC2500_InitSetREG
 16811 ;;		_CC2500_PowerRST
 16812 ;;		_CC2500_SIDLEMode
 16813 ;; This function is called by:
 16814 ;;		_main
 16815 ;; This function uses a non-reentrant model
 16816 ;;
 16817                           
 16818                           
 16819                           ;psect for function _CC2500_PowerOnInitial
 16820  1E7A                     _CC2500_PowerOnInitial:	
 16821                           
 16822                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16823                           
 16824                           ;incstack = 0
 16825                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16826  1E7A  3194  2473  319E   	fcall	_CC2500_PowerRST
 16827                           
 16828                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16829  1E7D  3191  213E  319E   	fcall	_CC2500_InitSetREG
 16830                           
 16831                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16832  1E80  319F  2740  319E   	fcall	_CC2500_InitPATable
 16833                           
 16834                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16835  1E83  319C  2400  319E   	fcall	_CC2500_ClearTXFIFO
 16836                           
 16837                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16838  1E86  319B  23FC  319E   	fcall	_CC2500_ClearRXFIFO
 16839                           
 16840                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16841  1E89  319C  24CD  319E   	fcall	_CC2500_FrequencyCabr
 16842                           
 16843                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16844  1E8C  319C  2404         	fcall	_CC2500_SIDLEMode
 16845  1E8E  0008               	return
 16846  1E8F                     __end_of_CC2500_PowerOnInitial:	
 16847                           
 16848                           	psect	text112
 16849  1C04                     __ptext112:	
 16850 ;; *************** function _CC2500_SIDLEMode *****************
 16851 ;; Defined at:
 16852 ;;		line 209 in file "../src/CC2500_B1.c"
 16853 ;; Parameters:    Size  Location     Type
 16854 ;;		None
 16855 ;; Auto vars:     Size  Location     Type
 16856 ;;		None
 16857 ;; Return value:  Size  Location     Type
 16858 ;;		None               void
 16859 ;; Registers used:
 16860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16861 ;; Tracked objects:
 16862 ;;		On entry : 0/0
 16863 ;;		On exit  : 0/0
 16864 ;;		Unchanged: 0/0
 16865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;Total ram usage:        0 bytes
 16871 ;; Hardware stack levels used:    1
 16872 ;; Hardware stack levels required when called:    7
 16873 ;; This function calls:
 16874 ;;		_CC2500_WriteCommand
 16875 ;; This function is called by:
 16876 ;;		_CC2500_PowerOnInitial
 16877 ;; This function uses a non-reentrant model
 16878 ;;
 16879                           
 16880                           
 16881                           ;psect for function _CC2500_SIDLEMode
 16882  1C04                     _CC2500_SIDLEMode:	
 16883                           
 16884                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16885                           
 16886                           ;incstack = 0
 16887                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16888  1C04  3036               	movlw	54
 16889  1C05  319E  26D3         	fcall	_CC2500_WriteCommand
 16890  1C07  0008               	return
 16891  1C08                     __end_of_CC2500_SIDLEMode:	
 16892                           
 16893                           	psect	text113
 16894  1473                     __ptext113:	
 16895 ;; *************** function _CC2500_PowerRST *****************
 16896 ;; Defined at:
 16897 ;;		line 132 in file "../src/CC2500_B1.c"
 16898 ;; Parameters:    Size  Location     Type
 16899 ;;		None
 16900 ;; Auto vars:     Size  Location     Type
 16901 ;;		None
 16902 ;; Return value:  Size  Location     Type
 16903 ;;		None               void
 16904 ;; Registers used:
 16905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16906 ;; Tracked objects:
 16907 ;;		On entry : 0/0
 16908 ;;		On exit  : 0/0
 16909 ;;		Unchanged: 0/0
 16910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;Total ram usage:        1 bytes
 16916 ;; Hardware stack levels used:    1
 16917 ;; Hardware stack levels required when called:    6
 16918 ;; This function calls:
 16919 ;;		_CC2500_WriteByte
 16920 ;;		_DelayTime_1us
 16921 ;;		_Timeout_Counter
 16922 ;;		_set_TimeoutCleared
 16923 ;; This function is called by:
 16924 ;;		_CC2500_PowerOnInitial
 16925 ;; This function uses a non-reentrant model
 16926 ;;
 16927                           
 16928                           
 16929                           ;psect for function _CC2500_PowerRST
 16930  1473                     _CC2500_PowerRST:	
 16931                           
 16932                           ;CC2500_B1.c: 133: RC3 = 0;
 16933                           
 16934                           ;incstack = 0
 16935                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16936  1473  0020               	movlb	0	; select bank0
 16937  1474  118E               	bcf	14,3	;volatile
 16938                           
 16939                           ;CC2500_B1.c: 134: RC4 = 0;
 16940  1475  120E               	bcf	14,4	;volatile
 16941                           
 16942                           ;CC2500_B1.c: 135: RC0 = 1;
 16943  1476  140E               	bsf	14,0	;volatile
 16944                           
 16945                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16946  1477  300A               	movlw	10
 16947  1478  00A0               	movwf	DelayTime_1us@count
 16948  1479  3000               	movlw	0
 16949  147A  00A1               	movwf	DelayTime_1us@count+1
 16950  147B  3190  20F1  3194   	fcall	_DelayTime_1us
 16951                           
 16952                           ;CC2500_B1.c: 137: RC0 = 0;
 16953  147E  0020               	movlb	0	; select bank0
 16954  147F  100E               	bcf	14,0	;volatile
 16955                           
 16956                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16957  1480  300A               	movlw	10
 16958  1481  00A0               	movwf	DelayTime_1us@count
 16959  1482  3000               	movlw	0
 16960  1483  00A1               	movwf	DelayTime_1us@count+1
 16961  1484  3190  20F1  3194   	fcall	_DelayTime_1us
 16962                           
 16963                           ;CC2500_B1.c: 139: RC0 = 1;
 16964  1487  0020               	movlb	0	; select bank0
 16965  1488  140E               	bsf	14,0	;volatile
 16966                           
 16967                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16968  1489  3028               	movlw	40
 16969  148A  00A0               	movwf	DelayTime_1us@count
 16970  148B  3000               	movlw	0
 16971  148C  00A1               	movwf	DelayTime_1us@count+1
 16972  148D  3190  20F1  3194   	fcall	_DelayTime_1us
 16973                           
 16974                           ;CC2500_B1.c: 141: RC0 = 0;
 16975  1490  0020               	movlb	0	; select bank0
 16976  1491  100E               	bcf	14,0	;volatile
 16977                           
 16978                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16979  1492  3030               	movlw	48
 16980  1493  00A6               	movwf	??_CC2500_PowerRST
 16981  1494  0826               	movf	??_CC2500_PowerRST,w
 16982  1495  00FB               	movwf	_SPI0Buffer
 16983                           
 16984                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16985  1496  2C9A               	goto	l6738
 16986  1497                     l6736:	
 16987                           
 16988                           ;CC2500_B1.c: 144: Timeout_Counter();
 16989  1497  319E  2665  3194   	fcall	_Timeout_Counter
 16990  149A                     l6738:	
 16991  149A  0020               	movlb	0	; select bank0
 16992  149B  1E8E               	btfss	14,5	;volatile
 16993  149C  2CA0               	goto	l6742
 16994  149D  0021               	movlb	1	; select bank1
 16995  149E  1D2C               	btfss	(_myMain^(0+128)+12),2
 16996  149F  2C97               	goto	l6736
 16997  14A0                     l6742:	
 16998                           
 16999                           ;CC2500_B1.c: 145: };
 17000                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17001  14A0  319C  241C  3194   	fcall	_set_TimeoutCleared
 17002                           
 17003                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17004  14A3  319E  263D  3194   	fcall	_CC2500_WriteByte
 17005                           
 17006                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17007  14A6  2CAA               	goto	l6748
 17008  14A7                     l6746:	
 17009                           
 17010                           ;CC2500_B1.c: 149: Timeout_Counter();
 17011  14A7  319E  2665  3194   	fcall	_Timeout_Counter
 17012  14AA                     l6748:	
 17013  14AA  0020               	movlb	0	; select bank0
 17014  14AB  1E8E               	btfss	14,5	;volatile
 17015  14AC  2CB0               	goto	l6752
 17016  14AD  0021               	movlb	1	; select bank1
 17017  14AE  1D2C               	btfss	(_myMain^(0+128)+12),2
 17018  14AF  2CA7               	goto	l6746
 17019  14B0                     l6752:	
 17020                           
 17021                           ;CC2500_B1.c: 150: };
 17022                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17023  14B0  319C  241C         	fcall	_set_TimeoutCleared
 17024                           
 17025                           ;CC2500_B1.c: 152: RC4 = 0;
 17026  14B2  0020               	movlb	0	; select bank0
 17027  14B3  120E               	bcf	14,4	;volatile
 17028                           
 17029                           ;CC2500_B1.c: 153: RC0 = 1;
 17030  14B4  140E               	bsf	14,0	;volatile
 17031  14B5  0008               	return
 17032  14B6                     __end_of_CC2500_PowerRST:	
 17033                           
 17034                           	psect	text114
 17035  113E                     __ptext114:	
 17036 ;; *************** function _CC2500_InitSetREG *****************
 17037 ;; Defined at:
 17038 ;;		line 159 in file "../src/CC2500_B1.c"
 17039 ;; Parameters:    Size  Location     Type
 17040 ;;		None
 17041 ;; Auto vars:     Size  Location     Type
 17042 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17043 ;;  temp2           1    7[BANK0 ] unsigned char 
 17044 ;;  temp1           1    6[BANK0 ] unsigned char 
 17045 ;; Return value:  Size  Location     Type
 17046 ;;		None               void
 17047 ;; Registers used:
 17048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17049 ;; Tracked objects:
 17050 ;;		On entry : 0/0
 17051 ;;		On exit  : 0/0
 17052 ;;		Unchanged: 0/0
 17053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17057 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17058 ;;Total ram usage:        4 bytes
 17059 ;; Hardware stack levels used:    1
 17060 ;; Hardware stack levels required when called:    7
 17061 ;; This function calls:
 17062 ;;		_CC2500_WriteREG
 17063 ;; This function is called by:
 17064 ;;		_CC2500_PowerOnInitial
 17065 ;; This function uses a non-reentrant model
 17066 ;;
 17067                           
 17068                           
 17069                           ;psect for function _CC2500_InitSetREG
 17070  113E                     _CC2500_InitSetREG:	
 17071                           
 17072                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17073                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17074                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17075                           
 17076                           ;incstack = 0
 17077                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17078  113E  0020               	movlb	0	; select bank0
 17079  113F  01A8               	clrf	CC2500_InitSetREG@loop_c
 17080  1140                     L9:	
 17081  1140  302F               	movlw	47
 17082  1141  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17083  1142  1803               	btfsc	3,0
 17084  1143  0008               	return
 17085                           
 17086                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17087  1144  0828               	movf	CC2500_InitSetREG@loop_c,w
 17088  1145  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17089  1146  0084               	movwf	4
 17090  1147  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17091  1148  1803               	skipnc
 17092  1149  3E01               	addlw	1
 17093  114A  0085               	movwf	5
 17094  114B  0800               	movf	0,w	;code access
 17095  114C  00A5               	movwf	??_CC2500_InitSetREG
 17096  114D  0825               	movf	??_CC2500_InitSetREG,w
 17097  114E  00A6               	movwf	CC2500_InitSetREG@temp1
 17098                           
 17099                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17100  114F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17101  1150  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17102  1151  0084               	movwf	4
 17103  1152  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17104  1153  1803               	skipnc
 17105  1154  3E01               	addlw	1
 17106  1155  0085               	movwf	5
 17107  1156  0800               	movf	0,w	;code access
 17108  1157  00A5               	movwf	??_CC2500_InitSetREG
 17109  1158  0825               	movf	??_CC2500_InitSetREG,w
 17110  1159  00A7               	movwf	CC2500_InitSetREG@temp2
 17111                           
 17112                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17113  115A  0827               	movf	CC2500_InitSetREG@temp2,w
 17114  115B  00A5               	movwf	??_CC2500_InitSetREG
 17115  115C  0825               	movf	??_CC2500_InitSetREG,w
 17116  115D  00A2               	movwf	CC2500_WriteREG@value
 17117  115E  0826               	movf	CC2500_InitSetREG@temp1,w
 17118  115F  319F  27DF  3191   	fcall	_CC2500_WriteREG
 17119  1162  3001               	movlw	1
 17120  1163  0020               	movlb	0	; select bank0
 17121  1164  00A5               	movwf	??_CC2500_InitSetREG
 17122  1165  0825               	movf	??_CC2500_InitSetREG,w
 17123  1166  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17124  1167  2940               	goto	L9
 17125  1168                     __end_of_CC2500_InitSetREG:	
 17126                           
 17127                           	psect	text115
 17128  1F40                     __ptext115:	
 17129 ;; *************** function _CC2500_InitPATable *****************
 17130 ;; Defined at:
 17131 ;;		line 174 in file "../src/CC2500_B1.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;		None
 17134 ;; Auto vars:     Size  Location     Type
 17135 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17136 ;;  temp            1    6[BANK0 ] unsigned char 
 17137 ;; Return value:  Size  Location     Type
 17138 ;;		None               void
 17139 ;; Registers used:
 17140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17141 ;; Tracked objects:
 17142 ;;		On entry : 0/0
 17143 ;;		On exit  : 0/0
 17144 ;;		Unchanged: 0/0
 17145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;Total ram usage:        3 bytes
 17151 ;; Hardware stack levels used:    1
 17152 ;; Hardware stack levels required when called:    7
 17153 ;; This function calls:
 17154 ;;		_CC2500_WriteREG
 17155 ;; This function is called by:
 17156 ;;		_CC2500_PowerOnInitial
 17157 ;; This function uses a non-reentrant model
 17158 ;;
 17159                           
 17160                           
 17161                           ;psect for function _CC2500_InitPATable
 17162  1F40                     _CC2500_InitPATable:	
 17163                           
 17164                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17165                           ;CC2500_B1.c: 176: unsigned char temp;
 17166                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17167                           
 17168                           ;incstack = 0
 17169                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17170  1F40  0020               	movlb	0	; select bank0
 17171  1F41  01A7               	clrf	CC2500_InitPATable@loop_d
 17172  1F42                     L10:	
 17173  1F42  3008               	movlw	8
 17174  1F43  0227               	subwf	CC2500_InitPATable@loop_d,w
 17175  1F44  1803               	btfsc	3,0
 17176  1F45  0008               	return
 17177                           
 17178                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17179  1F46  0827               	movf	CC2500_InitPATable@loop_d,w
 17180  1F47  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17181  1F48  0084               	movwf	4
 17182  1F49  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17183  1F4A  1803               	skipnc
 17184  1F4B  3E01               	addlw	1
 17185  1F4C  0085               	movwf	5
 17186  1F4D  0800               	movf	0,w	;code access
 17187  1F4E  00A5               	movwf	??_CC2500_InitPATable
 17188  1F4F  0825               	movf	??_CC2500_InitPATable,w
 17189  1F50  00A6               	movwf	CC2500_InitPATable@temp
 17190                           
 17191                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17192  1F51  0826               	movf	CC2500_InitPATable@temp,w
 17193  1F52  00A5               	movwf	??_CC2500_InitPATable
 17194  1F53  0825               	movf	??_CC2500_InitPATable,w
 17195  1F54  00A2               	movwf	CC2500_WriteREG@value
 17196  1F55  303E               	movlw	62
 17197  1F56  319F  27DF  319F   	fcall	_CC2500_WriteREG
 17198  1F59  3001               	movlw	1
 17199  1F5A  0020               	movlb	0	; select bank0
 17200  1F5B  00A5               	movwf	??_CC2500_InitPATable
 17201  1F5C  0825               	movf	??_CC2500_InitPATable,w
 17202  1F5D  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17203  1F5E  2F42               	goto	L10
 17204  1F5F                     __end_of_CC2500_InitPATable:	
 17205                           
 17206                           	psect	text116
 17207  1FDF                     __ptext116:	
 17208 ;; *************** function _CC2500_WriteREG *****************
 17209 ;; Defined at:
 17210 ;;		line 251 in file "../src/CC2500_B1.c"
 17211 ;; Parameters:    Size  Location     Type
 17212 ;;  w_addr          1    wreg     unsigned char 
 17213 ;;  value           1    2[BANK0 ] unsigned char 
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17216 ;; Return value:  Size  Location     Type
 17217 ;;		None               void
 17218 ;; Registers used:
 17219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17220 ;; Tracked objects:
 17221 ;;		On entry : 0/0
 17222 ;;		On exit  : 0/0
 17223 ;;		Unchanged: 0/0
 17224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17225 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;Total ram usage:        3 bytes
 17230 ;; Hardware stack levels used:    1
 17231 ;; Hardware stack levels required when called:    6
 17232 ;; This function calls:
 17233 ;;		_CC2500_WriteByte
 17234 ;;		_Timeout_Counter
 17235 ;;		_set_TimeoutCleared
 17236 ;; This function is called by:
 17237 ;;		_CC2500_InitSetREG
 17238 ;;		_CC2500_InitPATable
 17239 ;; This function uses a non-reentrant model
 17240 ;;
 17241                           
 17242                           
 17243                           ;psect for function _CC2500_WriteREG
 17244  1FDF                     _CC2500_WriteREG:	
 17245                           
 17246                           ;incstack = 0
 17247                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17248                           ;CC2500_WriteREG@w_addr stored from wreg
 17249  1FDF  0020               	movlb	0	; select bank0
 17250  1FE0  00A4               	movwf	CC2500_WriteREG@w_addr
 17251                           
 17252                           ;CC2500_B1.c: 252: RC0 = 0;
 17253  1FE1  100E               	bcf	14,0	;volatile
 17254                           
 17255                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17256  1FE2  0824               	movf	CC2500_WriteREG@w_addr,w
 17257  1FE3  00A3               	movwf	??_CC2500_WriteREG
 17258  1FE4  0823               	movf	??_CC2500_WriteREG,w
 17259  1FE5  00FB               	movwf	_SPI0Buffer
 17260                           
 17261                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17262  1FE6  2FEA               	goto	l6408
 17263  1FE7                     l6406:	
 17264                           
 17265                           ;CC2500_B1.c: 255: Timeout_Counter();
 17266  1FE7  319E  2665  319F   	fcall	_Timeout_Counter
 17267  1FEA                     l6408:	
 17268  1FEA  0020               	movlb	0	; select bank0
 17269  1FEB  1E8E               	btfss	14,5	;volatile
 17270  1FEC  2FF0               	goto	l6412
 17271  1FED  0021               	movlb	1	; select bank1
 17272  1FEE  1D2C               	btfss	(_myMain^(0+128)+12),2
 17273  1FEF  2FE7               	goto	l6406
 17274  1FF0                     l6412:	
 17275                           
 17276                           ;CC2500_B1.c: 256: };
 17277                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17278  1FF0  319C  241C  319F   	fcall	_set_TimeoutCleared
 17279                           
 17280                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17281  1FF3  319E  263D  319F   	fcall	_CC2500_WriteByte
 17282                           
 17283                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17284  1FF6  0020               	movlb	0	; select bank0
 17285  1FF7  0822               	movf	CC2500_WriteREG@value,w
 17286  1FF8  00A3               	movwf	??_CC2500_WriteREG
 17287  1FF9  0823               	movf	??_CC2500_WriteREG,w
 17288  1FFA  00FB               	movwf	_SPI0Buffer
 17289                           
 17290                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17291  1FFB  319E  263D         	fcall	_CC2500_WriteByte
 17292                           
 17293                           ;CC2500_B1.c: 262: RC0 = 1;
 17294  1FFD  0020               	movlb	0	; select bank0
 17295  1FFE  140E               	bsf	14,0	;volatile
 17296  1FFF  0008               	return
 17297  2000                     __end_of_CC2500_WriteREG:	
 17298                           
 17299                           	psect	text117
 17300  1CCD                     __ptext117:	
 17301 ;; *************** function _CC2500_FrequencyCabr *****************
 17302 ;; Defined at:
 17303 ;;		line 201 in file "../src/CC2500_B1.c"
 17304 ;; Parameters:    Size  Location     Type
 17305 ;;		None
 17306 ;; Auto vars:     Size  Location     Type
 17307 ;;		None
 17308 ;; Return value:  Size  Location     Type
 17309 ;;		None               void
 17310 ;; Registers used:
 17311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17312 ;; Tracked objects:
 17313 ;;		On entry : 0/0
 17314 ;;		On exit  : 0/0
 17315 ;;		Unchanged: 0/0
 17316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;Total ram usage:        0 bytes
 17322 ;; Hardware stack levels used:    1
 17323 ;; Hardware stack levels required when called:    7
 17324 ;; This function calls:
 17325 ;;		_CC2500_WriteCommand
 17326 ;;		_DelayTime_1us
 17327 ;; This function is called by:
 17328 ;;		_CC2500_PowerOnInitial
 17329 ;; This function uses a non-reentrant model
 17330 ;;
 17331                           
 17332                           
 17333                           ;psect for function _CC2500_FrequencyCabr
 17334  1CCD                     _CC2500_FrequencyCabr:	
 17335                           
 17336                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17337                           
 17338                           ;incstack = 0
 17339                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17340  1CCD  3033               	movlw	51
 17341  1CCE  319E  26D3  319C   	fcall	_CC2500_WriteCommand
 17342                           
 17343                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17344  1CD1  30E8               	movlw	232
 17345  1CD2  0020               	movlb	0	; select bank0
 17346  1CD3  00A0               	movwf	DelayTime_1us@count
 17347  1CD4  3003               	movlw	3
 17348  1CD5  00A1               	movwf	DelayTime_1us@count+1
 17349  1CD6  3190  20F1         	fcall	_DelayTime_1us
 17350  1CD8  0008               	return
 17351  1CD9                     __end_of_CC2500_FrequencyCabr:	
 17352                           
 17353                           	psect	text118
 17354  10F1                     __ptext118:	
 17355 ;; *************** function _DelayTime_1us *****************
 17356 ;; Defined at:
 17357 ;;		line 320 in file "../src/CC2500_B1.c"
 17358 ;; Parameters:    Size  Location     Type
 17359 ;;  count           2    0[BANK0 ] int 
 17360 ;; Auto vars:     Size  Location     Type
 17361 ;;  j               2    4[BANK0 ] unsigned int 
 17362 ;;  i               2    2[BANK0 ] unsigned int 
 17363 ;; Return value:  Size  Location     Type
 17364 ;;		None               void
 17365 ;; Registers used:
 17366 ;;		wreg, status,2
 17367 ;; Tracked objects:
 17368 ;;		On entry : 0/0
 17369 ;;		On exit  : 0/0
 17370 ;;		Unchanged: 0/0
 17371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17372 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17375 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;Total ram usage:        6 bytes
 17377 ;; Hardware stack levels used:    1
 17378 ;; Hardware stack levels required when called:    5
 17379 ;; This function calls:
 17380 ;;		Nothing
 17381 ;; This function is called by:
 17382 ;;		_CC2500_PowerRST
 17383 ;;		_CC2500_FrequencyCabr
 17384 ;; This function uses a non-reentrant model
 17385 ;;
 17386                           
 17387                           
 17388                           ;psect for function _DelayTime_1us
 17389  10F1                     _DelayTime_1us:	
 17390                           
 17391                           ;CC2500_B1.c: 321: unsigned int i, j;
 17392                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17393                           
 17394                           ;incstack = 0
 17395                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17396  10F1  3001               	movlw	1
 17397  10F2  0020               	movlb	0	; select bank0
 17398  10F3  00A2               	movwf	DelayTime_1us@i
 17399  10F4  3000               	movlw	0
 17400  10F5  00A3               	movwf	DelayTime_1us@i+1
 17401  10F6                     l348:	
 17402  10F6  0821               	movf	DelayTime_1us@count+1,w
 17403  10F7  0223               	subwf	DelayTime_1us@i+1,w
 17404  10F8  1D03               	skipz
 17405  10F9  28FC               	goto	u5535
 17406  10FA  0820               	movf	DelayTime_1us@count,w
 17407  10FB  0222               	subwf	DelayTime_1us@i,w
 17408  10FC                     u5535:	
 17409  10FC  1803               	btfsc	3,0
 17410  10FD  0008               	return
 17411                           
 17412                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17413  10FE  01A4               	clrf	DelayTime_1us@j
 17414  10FF  01A5               	clrf	DelayTime_1us@j+1
 17415  1100  3000               	movlw	0
 17416  1101  0225               	subwf	DelayTime_1us@j+1,w
 17417  1102  3002               	movlw	2
 17418  1103  1903               	skipnz
 17419  1104  0224               	subwf	DelayTime_1us@j,w
 17420  1105  1803               	btfsc	3,0
 17421  1106  2912               	goto	l6400
 17422  1107                     l6398:	
 17423  1107  3001               	movlw	1
 17424  1108  07A4               	addwf	DelayTime_1us@j,f
 17425  1109  3000               	movlw	0
 17426  110A  3DA5               	addwfc	DelayTime_1us@j+1,f
 17427  110B  3000               	movlw	0
 17428  110C  0225               	subwf	DelayTime_1us@j+1,w
 17429  110D  3002               	movlw	2
 17430  110E  1903               	skipnz
 17431  110F  0224               	subwf	DelayTime_1us@j,w
 17432  1110  1C03               	skipc
 17433  1111  2907               	goto	l6398
 17434  1112                     l6400:	
 17435  1112  3001               	movlw	1
 17436  1113  07A2               	addwf	DelayTime_1us@i,f
 17437  1114  3000               	movlw	0
 17438  1115  3DA3               	addwfc	DelayTime_1us@i+1,f
 17439  1116  28F6               	goto	l348
 17440  1117                     __end_of_DelayTime_1us:	
 17441                           
 17442                           	psect	text119
 17443  1C00                     __ptext119:	
 17444 ;; *************** function _CC2500_ClearTXFIFO *****************
 17445 ;; Defined at:
 17446 ;;		line 187 in file "../src/CC2500_B1.c"
 17447 ;; Parameters:    Size  Location     Type
 17448 ;;		None
 17449 ;; Auto vars:     Size  Location     Type
 17450 ;;		None
 17451 ;; Return value:  Size  Location     Type
 17452 ;;		None               void
 17453 ;; Registers used:
 17454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17455 ;; Tracked objects:
 17456 ;;		On entry : 0/0
 17457 ;;		On exit  : 0/0
 17458 ;;		Unchanged: 0/0
 17459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;Total ram usage:        0 bytes
 17465 ;; Hardware stack levels used:    1
 17466 ;; Hardware stack levels required when called:    7
 17467 ;; This function calls:
 17468 ;;		_CC2500_WriteCommand
 17469 ;; This function is called by:
 17470 ;;		_CC2500_PowerOnInitial
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           
 17475                           ;psect for function _CC2500_ClearTXFIFO
 17476  1C00                     _CC2500_ClearTXFIFO:	
 17477                           
 17478                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17479                           
 17480                           ;incstack = 0
 17481                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17482  1C00  303B               	movlw	59
 17483  1C01  319E  26D3         	fcall	_CC2500_WriteCommand
 17484  1C03  0008               	return
 17485  1C04                     __end_of_CC2500_ClearTXFIFO:	
 17486                           
 17487                           	psect	text120
 17488  1BFC                     __ptext120:	
 17489 ;; *************** function _CC2500_ClearRXFIFO *****************
 17490 ;; Defined at:
 17491 ;;		line 194 in file "../src/CC2500_B1.c"
 17492 ;; Parameters:    Size  Location     Type
 17493 ;;		None
 17494 ;; Auto vars:     Size  Location     Type
 17495 ;;		None
 17496 ;; Return value:  Size  Location     Type
 17497 ;;		None               void
 17498 ;; Registers used:
 17499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17500 ;; Tracked objects:
 17501 ;;		On entry : 0/0
 17502 ;;		On exit  : 0/0
 17503 ;;		Unchanged: 0/0
 17504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;Total ram usage:        0 bytes
 17510 ;; Hardware stack levels used:    1
 17511 ;; Hardware stack levels required when called:    7
 17512 ;; This function calls:
 17513 ;;		_CC2500_WriteCommand
 17514 ;; This function is called by:
 17515 ;;		_CC2500_PowerOnInitial
 17516 ;; This function uses a non-reentrant model
 17517 ;;
 17518                           
 17519                           
 17520                           ;psect for function _CC2500_ClearRXFIFO
 17521  1BFC                     _CC2500_ClearRXFIFO:	
 17522                           
 17523                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17524                           
 17525                           ;incstack = 0
 17526                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17527  1BFC  303A               	movlw	58
 17528  1BFD  319E  26D3         	fcall	_CC2500_WriteCommand
 17529  1BFF  0008               	return
 17530  1C00                     __end_of_CC2500_ClearRXFIFO:	
 17531                           
 17532                           	psect	text121
 17533  1ED3                     __ptext121:	
 17534 ;; *************** function _CC2500_WriteCommand *****************
 17535 ;; Defined at:
 17536 ;;		line 285 in file "../src/CC2500_B1.c"
 17537 ;; Parameters:    Size  Location     Type
 17538 ;;  command         1    wreg     unsigned char 
 17539 ;; Auto vars:     Size  Location     Type
 17540 ;;  command         1    3[BANK0 ] unsigned char 
 17541 ;; Return value:  Size  Location     Type
 17542 ;;		None               void
 17543 ;; Registers used:
 17544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17545 ;; Tracked objects:
 17546 ;;		On entry : 0/0
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;Total ram usage:        2 bytes
 17555 ;; Hardware stack levels used:    1
 17556 ;; Hardware stack levels required when called:    6
 17557 ;; This function calls:
 17558 ;;		_CC2500_WriteByte
 17559 ;;		_Timeout_Counter
 17560 ;;		_set_TimeoutCleared
 17561 ;; This function is called by:
 17562 ;;		_CC2500_TxData
 17563 ;;		_CC2500_ClearTXFIFO
 17564 ;;		_CC2500_ClearRXFIFO
 17565 ;;		_CC2500_FrequencyCabr
 17566 ;;		_CC2500_SIDLEMode
 17567 ;;		_setRF_Main
 17568 ;;		_RF_RxDisable
 17569 ;; This function uses a non-reentrant model
 17570 ;;
 17571                           
 17572                           
 17573                           ;psect for function _CC2500_WriteCommand
 17574  1ED3                     _CC2500_WriteCommand:	
 17575                           
 17576                           ;incstack = 0
 17577                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17578                           ;CC2500_WriteCommand@command stored from wreg
 17579  1ED3  0020               	movlb	0	; select bank0
 17580  1ED4  00A3               	movwf	CC2500_WriteCommand@command
 17581                           
 17582                           ;CC2500_B1.c: 286: RC0 = 0;
 17583  1ED5  100E               	bcf	14,0	;volatile
 17584                           
 17585                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17586  1ED6  0823               	movf	CC2500_WriteCommand@command,w
 17587  1ED7  00A2               	movwf	??_CC2500_WriteCommand
 17588  1ED8  0822               	movf	??_CC2500_WriteCommand,w
 17589  1ED9  00FB               	movwf	_SPI0Buffer
 17590                           
 17591                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17592  1EDA  2EDE               	goto	l6138
 17593  1EDB                     l6136:	
 17594                           
 17595                           ;CC2500_B1.c: 290: Timeout_Counter();
 17596  1EDB  319E  2665  319E   	fcall	_Timeout_Counter
 17597  1EDE                     l6138:	
 17598  1EDE  0020               	movlb	0	; select bank0
 17599  1EDF  1E8E               	btfss	14,5	;volatile
 17600  1EE0  2EE4               	goto	l6142
 17601  1EE1  0021               	movlb	1	; select bank1
 17602  1EE2  1D2C               	btfss	(_myMain^(0+128)+12),2
 17603  1EE3  2EDB               	goto	l6136
 17604  1EE4                     l6142:	
 17605                           
 17606                           ;CC2500_B1.c: 291: };
 17607                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17608  1EE4  319C  241C  319E   	fcall	_set_TimeoutCleared
 17609                           
 17610                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17611  1EE7  319E  263D         	fcall	_CC2500_WriteByte
 17612                           
 17613                           ;CC2500_B1.c: 295: RC0 = 1;
 17614  1EE9  0020               	movlb	0	; select bank0
 17615  1EEA  140E               	bsf	14,0	;volatile
 17616  1EEB  0008               	return
 17617  1EEC                     __end_of_CC2500_WriteCommand:	
 17618                           
 17619                           	psect	text122
 17620  1C1C                     __ptext122:	
 17621 ;; *************** function _set_TimeoutCleared *****************
 17622 ;; Defined at:
 17623 ;;		line 283 in file "../src/Main_B1.c"
 17624 ;; Parameters:    Size  Location     Type
 17625 ;;		None
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;		None               void
 17630 ;; Registers used:
 17631 ;;		status,2
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        0 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    5
 17644 ;; This function calls:
 17645 ;;		Nothing
 17646 ;; This function is called by:
 17647 ;;		_CC2500_TxData
 17648 ;;		_CC2500_RxData
 17649 ;;		_CC2500_PowerRST
 17650 ;;		_CC2500_WriteREG
 17651 ;;		_CC2500_WriteCommand
 17652 ;;		_CC2500_ReadStatus
 17653 ;;		_getAD
 17654 ;;		_TouchPower
 17655 ;;		_CC2500_ReadREG
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function _set_TimeoutCleared
 17661  1C1C                     _set_TimeoutCleared:	
 17662                           
 17663                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17664                           
 17665                           ;incstack = 0
 17666                           ; Regs used in _set_TimeoutCleared: [status,2]
 17667  1C1C  0021               	movlb	1	; select bank1
 17668  1C1D  112C               	bcf	(_myMain^(0+128)+12),2
 17669                           
 17670                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17671  1C1E  01AD               	clrf	(_myMain^(0+128)+13)
 17672  1C1F  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17673  1C20  0008               	return
 17674  1C21                     __end_of_set_TimeoutCleared:	
 17675                           
 17676                           	psect	text123
 17677  1E65                     __ptext123:	
 17678 ;; *************** function _Timeout_Counter *****************
 17679 ;; Defined at:
 17680 ;;		line 274 in file "../src/Main_B1.c"
 17681 ;; Parameters:    Size  Location     Type
 17682 ;;		None
 17683 ;; Auto vars:     Size  Location     Type
 17684 ;;		None
 17685 ;; Return value:  Size  Location     Type
 17686 ;;		None               void
 17687 ;; Registers used:
 17688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17698 ;;Total ram usage:        0 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:    5
 17701 ;; This function calls:
 17702 ;;		Nothing
 17703 ;; This function is called by:
 17704 ;;		_CC2500_TxData
 17705 ;;		_CC2500_RxData
 17706 ;;		_CC2500_PowerRST
 17707 ;;		_CC2500_WriteREG
 17708 ;;		_CC2500_WriteCommand
 17709 ;;		_CC2500_ReadStatus
 17710 ;;		_getAD
 17711 ;;		_TouchPower
 17712 ;;		_CC2500_ReadREG
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           
 17717                           ;psect for function _Timeout_Counter
 17718  1E65                     _Timeout_Counter:	
 17719                           
 17720                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17721                           
 17722                           ;incstack = 0
 17723                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17724  1E65  3001               	movlw	1
 17725  1E66  0021               	movlb	1	; select bank1
 17726  1E67  07AD               	addwf	(_myMain^(0+128)+13),f
 17727  1E68  3000               	movlw	0
 17728  1E69  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17729                           
 17730                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17731  1E6A  300D               	movlw	13
 17732  1E6B  3EA0               	addlw	_myMain& (0+255)
 17733  1E6C  0086               	movwf	6
 17734  1E6D  0187               	clrf	7
 17735  1E6E  3F40               	moviw [0]fsr1
 17736  1E6F  3A10               	xorlw	16
 17737  1E70  1D03               	skipz
 17738  1E71  2E74               	goto	u4995
 17739  1E72  3F41               	moviw [1]fsr1
 17740  1E73  3A27               	xorlw	39
 17741  1E74                     u4995:	
 17742  1E74  1D03               	skipz
 17743  1E75  0008               	return
 17744                           
 17745                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17746  1E76  01AD               	clrf	(_myMain^(0+128)+13)
 17747  1E77  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17748                           
 17749                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17750  1E78  152C               	bsf	(_myMain^(0+128)+12),2
 17751  1E79  0008               	return
 17752  1E7A                     __end_of_Timeout_Counter:	
 17753                           
 17754                           	psect	text124
 17755  1E3D                     __ptext124:	
 17756 ;; *************** function _CC2500_WriteByte *****************
 17757 ;; Defined at:
 17758 ;;		line 219 in file "../src/CC2500_B1.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;		None
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17763 ;; Return value:  Size  Location     Type
 17764 ;;		None               void
 17765 ;; Registers used:
 17766 ;;		wreg, status,2, status,0
 17767 ;; Tracked objects:
 17768 ;;		On entry : 0/0
 17769 ;;		On exit  : 0/0
 17770 ;;		Unchanged: 0/0
 17771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;Total ram usage:        2 bytes
 17777 ;; Hardware stack levels used:    1
 17778 ;; Hardware stack levels required when called:    5
 17779 ;; This function calls:
 17780 ;;		Nothing
 17781 ;; This function is called by:
 17782 ;;		_CC2500_TxData
 17783 ;;		_CC2500_RxData
 17784 ;;		_CC2500_PowerRST
 17785 ;;		_CC2500_WriteREG
 17786 ;;		_CC2500_WriteCommand
 17787 ;;		_CC2500_ReadStatus
 17788 ;;		_CC2500_ReadREG
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           
 17793                           ;psect for function _CC2500_WriteByte
 17794  1E3D                     _CC2500_WriteByte:	
 17795                           
 17796                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17797                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17798                           
 17799                           ;incstack = 0
 17800                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17801  1E3D  0020               	movlb	0	; select bank0
 17802  1E3E  01A1               	clrf	CC2500_WriteByte@loop_a
 17803  1E3F                     L11:	
 17804  1E3F  3008               	movlw	8
 17805  1E40  0221               	subwf	CC2500_WriteByte@loop_a,w
 17806  1E41  1803               	btfsc	3,0
 17807  1E42  0008               	return
 17808                           
 17809                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17810  1E43  1FFB               	btfss	_SPI0Buffer,7
 17811  1E44  2E47               	goto	l304
 17812                           
 17813                           ;CC2500_B1.c: 223: RC4 = 1;
 17814  1E45  160E               	bsf	14,4	;volatile
 17815  1E46  2E48               	goto	l305
 17816  1E47                     l304:	
 17817                           
 17818                           ;CC2500_B1.c: 224: else
 17819                           ;CC2500_B1.c: 225: RC4 = 0;
 17820  1E47  120E               	bcf	14,4	;volatile
 17821  1E48                     l305:	
 17822                           
 17823                           ;CC2500_B1.c: 226: RC3 = 1;
 17824  1E48  158E               	bsf	14,3	;volatile
 17825                           
 17826                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17827  1E49  1003               	clrc
 17828  1E4A  0DFB               	rlf	_SPI0Buffer,f
 17829                           
 17830                           ;CC2500_B1.c: 228: RC3 = 0;
 17831  1E4B  118E               	bcf	14,3	;volatile
 17832  1E4C  3001               	movlw	1
 17833  1E4D  00A0               	movwf	??_CC2500_WriteByte
 17834  1E4E  0820               	movf	??_CC2500_WriteByte,w
 17835  1E4F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17836  1E50  2E3F               	goto	L11
 17837  1E51                     __end_of_CC2500_WriteByte:	
 17838                           
 17839                           	psect	text125
 17840  14FF                     __ptext125:	
 17841 ;; *************** function _Buzzer_Main *****************
 17842 ;; Defined at:
 17843 ;;		line 46 in file "../src/Buzzer_B1.c"
 17844 ;; Parameters:    Size  Location     Type
 17845 ;;		None
 17846 ;; Auto vars:     Size  Location     Type
 17847 ;;		None
 17848 ;; Return value:  Size  Location     Type
 17849 ;;		None               void
 17850 ;; Registers used:
 17851 ;;		wreg, status,2, status,0
 17852 ;; Tracked objects:
 17853 ;;		On entry : 0/0
 17854 ;;		On exit  : 0/0
 17855 ;;		Unchanged: 0/0
 17856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17860 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;Total ram usage:        1 bytes
 17862 ;; Hardware stack levels used:    1
 17863 ;; Hardware stack levels required when called:    5
 17864 ;; This function calls:
 17865 ;;		Nothing
 17866 ;; This function is called by:
 17867 ;;		_main
 17868 ;; This function uses a non-reentrant model
 17869 ;;
 17870                           
 17871                           
 17872                           ;psect for function _Buzzer_Main
 17873  14FF                     _Buzzer_Main:	
 17874                           
 17875                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17876                           
 17877                           ;incstack = 0
 17878                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17879  14FF  0021               	movlb	1	; select bank1
 17880  1500  1CAF               	btfss	_Buz1^(0+128),1
 17881  1501  0008               	return
 17882                           
 17883                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17884  1502  3001               	movlw	1
 17885  1503  07B0               	addwf	(_Buz1^(0+128)+1),f
 17886  1504  3000               	movlw	0
 17887  1505  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 17888                           
 17889                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17890  1506  0836               	movf	((_Buz1+1)^(0+128)+6),w
 17891  1507  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 17892  1508  1D03               	skipz
 17893  1509  2D0C               	goto	u7115
 17894  150A  0835               	movf	(_Buz1^(0+128)+6),w
 17895  150B  0230               	subwf	(_Buz1^(0+128)+1),w
 17896  150C                     u7115:	
 17897  150C  1C03               	skipc
 17898  150D  0008               	return
 17899                           
 17900                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17901  150E  01B0               	clrf	(_Buz1^(0+128)+1)
 17902  150F  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 17903                           
 17904                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17905  1510  12AF               	bcf	_Buz1^(0+128),5
 17906  1511  0020               	movlb	0	; select bank0
 17907  1512  1D8D               	btfss	13,3	;volatile
 17908  1513  2D16               	goto	l7388
 17909  1514  0021               	movlb	1	; select bank1
 17910  1515  16AF               	bsf	_Buz1^(0+128),5
 17911  1516                     l7388:	
 17912                           
 17913                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17914  1516  0021               	movlb	1	; select bank1
 17915  1517  1AAF               	btfsc	_Buz1^(0+128),5
 17916  1518  2D42               	goto	l94
 17917                           
 17918                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17919  1519  08B2               	movf	(_Buz1^(0+128)+3),f
 17920  151A  1D03               	skipz
 17921  151B  2D3E               	goto	l95
 17922                           
 17923                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17924  151C  1DAF               	btfss	_Buz1^(0+128),3
 17925  151D  2D2C               	goto	l96
 17926                           
 17927                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17928  151E  11AF               	bcf	_Buz1^(0+128),3
 17929                           
 17930                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17931  151F  0833               	movf	(_Buz1^(0+128)+4),w
 17932  1520  0020               	movlb	0	; select bank0
 17933  1521  00A0               	movwf	??_Buzzer_Main
 17934  1522  0820               	movf	??_Buzzer_Main,w
 17935  1523  0021               	movlb	1	; select bank1
 17936  1524  00B2               	movwf	(_Buz1^(0+128)+3)
 17937                           
 17938                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17939  1525  0838               	movf	((_Buz1+1)^(0+128)+8),w
 17940  1526  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17941  1527  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17942  1528  0837               	movf	(_Buz1^(0+128)+8),w
 17943  1529  01B5               	clrf	(_Buz1^(0+128)+6)
 17944  152A  07B5               	addwf	(_Buz1^(0+128)+6),f
 17945                           
 17946                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17947  152B  0008               	return
 17948  152C                     l96:	
 17949  152C  1E2F               	btfss	_Buz1^(0+128),4
 17950  152D  2D3C               	goto	l98
 17951                           
 17952                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17953  152E  122F               	bcf	_Buz1^(0+128),4
 17954                           
 17955                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17956  152F  0834               	movf	(_Buz1^(0+128)+5),w
 17957  1530  0020               	movlb	0	; select bank0
 17958  1531  00A0               	movwf	??_Buzzer_Main
 17959  1532  0820               	movf	??_Buzzer_Main,w
 17960  1533  0021               	movlb	1	; select bank1
 17961  1534  00B2               	movwf	(_Buz1^(0+128)+3)
 17962                           
 17963                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17964  1535  083A               	movf	((_Buz1+1)^(0+128)+10),w
 17965  1536  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17966  1537  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17967  1538  0839               	movf	(_Buz1^(0+128)+10),w
 17968  1539  01B5               	clrf	(_Buz1^(0+128)+6)
 17969  153A  07B5               	addwf	(_Buz1^(0+128)+6),f
 17970                           
 17971                           ;Buzzer_B1.c: 62: } else {
 17972  153B  0008               	return
 17973  153C                     l98:	
 17974                           
 17975                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17976  153C  10AF               	bcf	_Buz1^(0+128),1
 17977                           
 17978                           ;Buzzer_B1.c: 64: }
 17979                           ;Buzzer_B1.c: 65: } else {
 17980  153D  0008               	return
 17981  153E                     l95:	
 17982                           
 17983                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17984  153E  16AF               	bsf	_Buz1^(0+128),5
 17985                           
 17986                           ;Buzzer_B1.c: 68: RB3 = 1;
 17987  153F  0020               	movlb	0	; select bank0
 17988  1540  158D               	bsf	13,3	;volatile
 17989                           
 17990                           ;Buzzer_B1.c: 69: }
 17991                           ;Buzzer_B1.c: 70: } else {
 17992  1541  0008               	return
 17993  1542                     l94:	
 17994                           
 17995                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17996  1542  12AF               	bcf	_Buz1^(0+128),5
 17997                           
 17998                           ;Buzzer_B1.c: 73: RB3 = 0;
 17999  1543  0020               	movlb	0	; select bank0
 18000  1544  118D               	bcf	13,3	;volatile
 18001                           
 18002                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18003  1545  3001               	movlw	1
 18004  1546  0021               	movlb	1	; select bank1
 18005  1547  02B2               	subwf	(_Buz1^(0+128)+3),f
 18006  1548  0008               	return
 18007  1549                     __end_of_Buzzer_Main:	
 18008                           
 18009                           	psect	text126
 18010  1BE9                     __ptext126:	
 18011 ;; *************** function _Buzzer_Initialization *****************
 18012 ;; Defined at:
 18013 ;;		line 11 in file "../src/Buzzer_B1.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;		None
 18016 ;; Auto vars:     Size  Location     Type
 18017 ;;		None
 18018 ;; Return value:  Size  Location     Type
 18019 ;;		None               void
 18020 ;; Registers used:
 18021 ;;		None
 18022 ;; Tracked objects:
 18023 ;;		On entry : 0/0
 18024 ;;		On exit  : 0/0
 18025 ;;		Unchanged: 0/0
 18026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;Total ram usage:        0 bytes
 18032 ;; Hardware stack levels used:    1
 18033 ;; Hardware stack levels required when called:    5
 18034 ;; This function calls:
 18035 ;;		Nothing
 18036 ;; This function is called by:
 18037 ;;		_main
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           
 18042                           ;psect for function _Buzzer_Initialization
 18043  1BE9                     _Buzzer_Initialization:	
 18044                           
 18045                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18046                           
 18047                           ;incstack = 0
 18048                           ; Regs used in _Buzzer_Initialization: []
 18049  1BE9  0021               	movlb	1	; select bank1
 18050  1BEA  142F               	bsf	_Buz1^(0+128),0
 18051  1BEB  0008               	return
 18052  1BEC                     __end_of_Buzzer_Initialization:	
 18053                           
 18054                           	psect	intentry
 18055  0004                     __pintentry:	
 18056 ;; *************** function _ISR *****************
 18057 ;; Defined at:
 18058 ;;		line 107 in file "../src/MCU_B1.c"
 18059 ;; Parameters:    Size  Location     Type
 18060 ;;		None
 18061 ;; Auto vars:     Size  Location     Type
 18062 ;;		None
 18063 ;; Return value:  Size  Location     Type
 18064 ;;		None               void
 18065 ;; Registers used:
 18066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18067 ;; Tracked objects:
 18068 ;;		On entry : 0/0
 18069 ;;		On exit  : 0/0
 18070 ;;		Unchanged: 0/0
 18071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;Total ram usage:        1 bytes
 18077 ;; Hardware stack levels used:    1
 18078 ;; Hardware stack levels required when called:    4
 18079 ;; This function calls:
 18080 ;;		_IOC_ISR
 18081 ;;		_TMR1_ISR
 18082 ;; This function is called by:
 18083 ;;		Interrupt level 1
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087  0004                     _ISR:	
 18088                           
 18089                           ;incstack = 0
 18090                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18091  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18092  0005  3180               	pagesel	$
 18093  0006  0020               	movlb	0	; select bank0
 18094  0007  087F               	movf	127,w
 18095  0008  00F7               	movwf	??_ISR
 18096                           
 18097                           ;MCU_B1.c: 109: IOC_ISR();
 18098  0009  319D  2530  3180   	fcall	_IOC_ISR
 18099                           
 18100                           ;MCU_B1.c: 111: ;;
 18101                           ;MCU_B1.c: 113: TMR1_ISR();
 18102  000C  3190  20CD         	fcall	_TMR1_ISR
 18103  000E  0877               	movf	??_ISR,w
 18104  000F  0020               	movlb	0	; select bank0
 18105  0010  00FF               	movwf	127
 18106  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18107  0012  0009               	retfie
 18108  0013                     __end_of_ISR:	
 18109                           
 18110                           	psect	text128
 18111  10CD                     __ptext128:	
 18112 ;; *************** function _TMR1_ISR *****************
 18113 ;; Defined at:
 18114 ;;		line 209 in file "../src/MCU_B1.c"
 18115 ;; Parameters:    Size  Location     Type
 18116 ;;		None
 18117 ;; Auto vars:     Size  Location     Type
 18118 ;;		None
 18119 ;; Return value:  Size  Location     Type
 18120 ;;		None               void
 18121 ;; Registers used:
 18122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18123 ;; Tracked objects:
 18124 ;;		On entry : 0/0
 18125 ;;		On exit  : 0/0
 18126 ;;		Unchanged: 0/0
 18127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;Total ram usage:        0 bytes
 18133 ;; Hardware stack levels used:    1
 18134 ;; Hardware stack levels required when called:    2
 18135 ;; This function calls:
 18136 ;;		_setDimmerLights_IntrControl
 18137 ;; This function is called by:
 18138 ;;		_ISR
 18139 ;; This function uses a non-reentrant model
 18140 ;;
 18141                           
 18142                           
 18143                           ;psect for function _TMR1_ISR
 18144  10CD                     _TMR1_ISR:	
 18145                           
 18146                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18147                           
 18148                           ;incstack = 0
 18149                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18150  10CD  0021               	movlb	1	; select bank1
 18151  10CE  1C11               	btfss	17,0	;volatile
 18152  10CF  0008               	return
 18153  10D0  0020               	movlb	0	; select bank0
 18154  10D1  1C11               	btfss	17,0	;volatile
 18155  10D2  0008               	return
 18156                           
 18157                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18158  10D3  30FA               	movlw	250
 18159  10D4  0097               	movwf	23	;volatile
 18160                           
 18161                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18162  10D5  3038               	movlw	56
 18163  10D6  0096               	movwf	22	;volatile
 18164                           
 18165                           ;MCU_B1.c: 214: TMR1IF = 0;
 18166  10D7  1011               	bcf	17,0	;volatile
 18167                           
 18168                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18169  10D8  3001               	movlw	1
 18170  10D9  3181  21B2  3190   	fcall	_setDimmerLights_IntrControl
 18171                           
 18172                           ;MCU_B1.c: 234: Timer1.Count++;
 18173  10DC  3001               	movlw	1
 18174  10DD  0021               	movlb	1	; select bank1
 18175  10DE  07C8               	addwf	(_Timer1^(0+128)+1),f
 18176  10DF  3000               	movlw	0
 18177  10E0  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18178                           
 18179                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18180  10E1  3001               	movlw	1
 18181  10E2  3EC7               	addlw	_Timer1& (0+255)
 18182  10E3  0086               	movwf	6
 18183  10E4  0187               	clrf	7
 18184  10E5  3F40               	moviw [0]fsr1
 18185  10E6  3A64               	xorlw	100
 18186  10E7  1D03               	skipz
 18187  10E8  28EB               	goto	u727_25
 18188  10E9  3F41               	moviw [1]fsr1
 18189  10EA  3A00               	xorlw	0
 18190  10EB                     u727_25:	
 18191  10EB  1D03               	skipz
 18192  10EC  0008               	return
 18193                           
 18194                           ;MCU_B1.c: 236: {
 18195                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18196  10ED  01C8               	clrf	(_Timer1^(0+128)+1)
 18197  10EE  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18198                           
 18199                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18200  10EF  1447               	bsf	_Timer1^(0+128),0
 18201  10F0  0008               	return
 18202  10F1                     __end_of_TMR1_ISR:	
 18203                           
 18204                           	psect	text129
 18205  01B2                     __ptext129:	
 18206 ;; *************** function _setDimmerLights_IntrControl *****************
 18207 ;; Defined at:
 18208 ;;		line 93 in file "../src/Dimmer_B1.c"
 18209 ;; Parameters:    Size  Location     Type
 18210 ;;  lights          1    wreg     unsigned char 
 18211 ;; Auto vars:     Size  Location     Type
 18212 ;;  lights          1    6[COMMON] unsigned char 
 18213 ;; Return value:  Size  Location     Type
 18214 ;;		None               void
 18215 ;; Registers used:
 18216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18226 ;;Total ram usage:        5 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:    1
 18229 ;; This function calls:
 18230 ;;		_DimmerIntrPointSelect
 18231 ;; This function is called by:
 18232 ;;		_TMR1_ISR
 18233 ;; This function uses a non-reentrant model
 18234 ;;
 18235                           
 18236                           
 18237                           ;psect for function _setDimmerLights_IntrControl
 18238  01B2                     _setDimmerLights_IntrControl:	
 18239                           
 18240                           ;incstack = 0
 18241                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18242                           ;setDimmerLights_IntrControl@lights stored from wreg
 18243  01B2  00F6               	movwf	setDimmerLights_IntrControl@lights
 18244                           
 18245                           ;Dimmer_B1.c: 231: DimmerIntrPointSelect(lights);
 18246  01B3  0876               	movf	setDimmerLights_IntrControl@lights,w
 18247  01B4  319C  2461  3181   	fcall	_DimmerIntrPointSelect
 18248                           
 18249                           ;Dimmer_B1.c: 232: if (DimmerLightsIntr->GO == 1) {
 18250  01B7  0879               	movf	_DimmerLightsIntr,w
 18251  01B8  0086               	movwf	6
 18252  01B9  3001               	movlw	1	; select bank2/3
 18253  01BA  0087               	movwf	7
 18254  01BB  1C01               	btfss	1,0
 18255  01BC  2A0E               	goto	i1l6840
 18256                           
 18257                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count++;
 18258  01BD  3001               	movlw	1
 18259  01BE  00F2               	movwf	??_setDimmerLights_IntrControl
 18260  01BF  0879               	movf	_DimmerLightsIntr,w
 18261  01C0  3E03               	addlw	3
 18262  01C1  0086               	movwf	6
 18263  01C2  3001               	movlw	1	; select bank2/3
 18264  01C3  0087               	movwf	7
 18265  01C4  0872               	movf	??_setDimmerLights_IntrControl,w
 18266  01C5  0781               	addwf	1,f
 18267                           
 18268                           ;Dimmer_B1.c: 234: if (DimmerLightsIntr->Count
 18269                           ;Dimmer_B1.c: 235: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18270  01C6  0022               	movlb	2	; select bank2
 18271  01C7  0840               	movf	(_Dimmer^(0+256)+2),w
 18272  01C8  00F2               	movwf	??_setDimmerLights_IntrControl
 18273  01C9  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18274  01CA  09F2               	comf	??_setDimmerLights_IntrControl,f
 18275  01CB  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18276  01CC  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18277  01CD  1903               	skipnz
 18278  01CE  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18279  01CF  0879               	movf	_DimmerLightsIntr,w
 18280  01D0  3E04               	addlw	4
 18281  01D1  0086               	movwf	6
 18282  01D2  3001               	movlw	1	; select bank2/3
 18283  01D3  0087               	movwf	7
 18284  01D4  0801               	movf	1,w
 18285  01D5  0772               	addwf	??_setDimmerLights_IntrControl,w
 18286  01D6  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18287  01D7  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18288  01D8  1803               	skipnc
 18289  01D9  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18290  01DA  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18291  01DB  0879               	movf	_DimmerLightsIntr,w
 18292  01DC  3E03               	addlw	3
 18293  01DD  0086               	movwf	6
 18294  01DE  3001               	movlw	1	; select bank2/3
 18295  01DF  0087               	movwf	7
 18296  01E0  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18297  01E1  3A80               	xorlw	128
 18298  01E2  3C80               	sublw	128
 18299  01E3  1D03               	skipz
 18300  01E4  29E7               	goto	u614_25
 18301  01E5  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18302  01E6  0201               	subwf	1,w
 18303  01E7                     u614_25:	
 18304  01E7  1C03               	skipc
 18305  01E8  0008               	return
 18306                           
 18307                           ;Dimmer_B1.c: 236: DimmerLightsIntr->Count = 0;
 18308  01E9  0879               	movf	_DimmerLightsIntr,w
 18309  01EA  3E03               	addlw	3
 18310  01EB  0086               	movwf	6
 18311  01EC  3001               	movlw	1	; select bank2/3
 18312  01ED  0087               	movwf	7
 18313  01EE  0181               	clrf	1
 18314                           
 18315                           ;Dimmer_B1.c: 237: DimmerLightsIntr->GO = 0;
 18316  01EF  0879               	movf	_DimmerLightsIntr,w
 18317  01F0  0086               	movwf	6
 18318  01F1  3001               	movlw	1	; select bank2/3
 18319  01F2  0087               	movwf	7
 18320  01F3  1001               	bcf	1,0
 18321                           
 18322                           ;Dimmer_B1.c: 238: DimmerLightsIntr->Flag = 1;
 18323  01F4  0879               	movf	_DimmerLightsIntr,w
 18324  01F5  3E08               	addlw	8
 18325  01F6  0086               	movwf	6
 18326  01F7  3001               	movlw	1	; select bank2/3
 18327  01F8  0087               	movwf	7
 18328  01F9  1401               	bsf	1,0
 18329                           
 18330                           ;Dimmer_B1.c: 239: if (DimmerLightsIntr->MOSFET == 1) {
 18331  01FA  0879               	movf	_DimmerLightsIntr,w
 18332  01FB  3E09               	addlw	9
 18333  01FC  0086               	movwf	6
 18334  01FD  3001               	movlw	1	; select bank2/3
 18335  01FE  0087               	movwf	7
 18336  01FF  1E01               	btfss	1,4
 18337  0200  0008               	return
 18338                           
 18339                           ;Dimmer_B1.c: 240: DimmerLightsIntr->MOSFET = 0;
 18340  0201  0879               	movf	_DimmerLightsIntr,w
 18341  0202  3E09               	addlw	9
 18342  0203  0086               	movwf	6
 18343  0204  3001               	movlw	1	; select bank2/3
 18344  0205  0087               	movwf	7
 18345  0206  1201               	bcf	1,4
 18346                           
 18347                           ;Dimmer_B1.c: 242: if (lights == 1) {
 18348  0207  0876               	movf	setDimmerLights_IntrControl@lights,w
 18349  0208  3A01               	xorlw	1
 18350  0209  1D03               	skipz
 18351  020A  0008               	return
 18352                           
 18353                           ;Dimmer_B1.c: 243: RB4 = 0;
 18354  020B  0020               	movlb	0	; select bank0
 18355  020C  120D               	bcf	13,4	;volatile
 18356                           
 18357                           ;Dimmer_B1.c: 245: }
 18358                           ;Dimmer_B1.c: 252: }
 18359                           ;Dimmer_B1.c: 253: }
 18360                           ;Dimmer_B1.c: 254: } else {
 18361  020D  0008               	return
 18362  020E                     i1l6840:	
 18363                           
 18364                           ;Dimmer_B1.c: 255: if (DimmerLightsIntr->Flag == 1) {
 18365  020E  0879               	movf	_DimmerLightsIntr,w
 18366  020F  3E08               	addlw	8
 18367  0210  0086               	movwf	6
 18368  0211  3001               	movlw	1	; select bank2/3
 18369  0212  0087               	movwf	7
 18370  0213  1C01               	btfss	1,0
 18371  0214  2AD2               	goto	i1l676
 18372                           
 18373                           ;Dimmer_B1.c: 256: DimmerLightsIntr->Flag = 0;
 18374  0215  0879               	movf	_DimmerLightsIntr,w
 18375  0216  3E08               	addlw	8
 18376  0217  0086               	movwf	6
 18377  0218  3001               	movlw	1	; select bank2/3
 18378  0219  0087               	movwf	7
 18379  021A  1001               	bcf	1,0
 18380                           
 18381                           ;Dimmer_B1.c: 257: if (DimmerLightsIntr->Signal == 1) {
 18382  021B  0879               	movf	_DimmerLightsIntr,w
 18383  021C  0086               	movwf	6
 18384  021D  3001               	movlw	1	; select bank2/3
 18385  021E  0087               	movwf	7
 18386  021F  1C81               	btfss	1,1
 18387  0220  2AD2               	goto	i1l676
 18388                           
 18389                           ;Dimmer_B1.c: 258: DimmerLightsIntr->DimmingTime++;
 18390  0221  3001               	movlw	1
 18391  0222  00F2               	movwf	??_setDimmerLights_IntrControl
 18392  0223  0A79               	incf	_DimmerLightsIntr,w
 18393  0224  0086               	movwf	6
 18394  0225  3001               	movlw	1	; select bank2/3
 18395  0226  0087               	movwf	7
 18396  0227  0872               	movf	??_setDimmerLights_IntrControl,w
 18397  0228  0781               	addwf	1,f
 18398                           
 18399                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18400  0229  0A79               	incf	_DimmerLightsIntr,w
 18401  022A  0086               	movwf	6
 18402  022B  3001               	movlw	1	; select bank2/3
 18403  022C  0087               	movwf	7
 18404  022D  0879               	movf	_DimmerLightsIntr,w
 18405  022E  3E02               	addlw	2
 18406  022F  0084               	movwf	4
 18407  0230  3001               	movlw	1	; select bank2/3
 18408  0231  0085               	movwf	5
 18409  0232  0800               	movf	0,w
 18410  0233  0201               	subwf	1,w
 18411  0234  1C03               	skipc
 18412  0235  2AD2               	goto	i1l676
 18413                           
 18414                           ;Dimmer_B1.c: 260: DimmerLightsIntr->DimmingTime = 0;
 18415  0236  0A79               	incf	_DimmerLightsIntr,w
 18416  0237  0086               	movwf	6
 18417  0238  3001               	movlw	1	; select bank2/3
 18418  0239  0087               	movwf	7
 18419  023A  0181               	clrf	1
 18420                           
 18421                           ;Dimmer_B1.c: 261: if (DimmerLightsIntr->AdjFlag == 1) {
 18422  023B  0879               	movf	_DimmerLightsIntr,w
 18423  023C  0086               	movwf	6
 18424  023D  3001               	movlw	1	; select bank2/3
 18425  023E  0087               	movwf	7
 18426  023F  1D81               	btfss	1,3
 18427  0240  2A87               	goto	i1l6870
 18428                           
 18429                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjStatus == 0) {
 18430  0241  0879               	movf	_DimmerLightsIntr,w
 18431  0242  0086               	movwf	6
 18432  0243  3001               	movlw	1	; select bank2/3
 18433  0244  0087               	movwf	7
 18434  0245  1A01               	btfsc	1,4
 18435  0246  2A68               	goto	i1l6862
 18436                           
 18437                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->DimmingValue < ((char)(90*0.8))) {
 18438  0247  0879               	movf	_DimmerLightsIntr,w
 18439  0248  3E04               	addlw	4
 18440  0249  0086               	movwf	6
 18441  024A  3001               	movlw	1	; select bank2/3
 18442  024B  0087               	movwf	7
 18443  024C  3048               	movlw	72
 18444  024D  0201               	subwf	1,w
 18445  024E  1803               	skipnc
 18446  024F  2A59               	goto	i1l6858
 18447                           
 18448                           ;Dimmer_B1.c: 264: DimmerLightsIntr->DimmingValue++;
 18449  0250  3001               	movlw	1
 18450  0251  00F2               	movwf	??_setDimmerLights_IntrControl
 18451  0252  0879               	movf	_DimmerLightsIntr,w
 18452  0253  3E04               	addlw	4
 18453  0254  0086               	movwf	6
 18454  0255  3001               	movlw	1	; select bank2/3
 18455  0256  0087               	movwf	7
 18456  0257  0872               	movf	??_setDimmerLights_IntrControl,w
 18457  0258  0781               	addwf	1,f
 18458  0259                     i1l6858:	
 18459                           
 18460                           ;Dimmer_B1.c: 265: }
 18461                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue == ((char)(90*0.8))) {
 18462  0259  0879               	movf	_DimmerLightsIntr,w
 18463  025A  3E04               	addlw	4
 18464  025B  0086               	movwf	6
 18465  025C  3001               	movlw	1	; select bank2/3
 18466  025D  0087               	movwf	7
 18467  025E  0801               	movf	1,w
 18468  025F  3A48               	xorlw	72
 18469  0260  1D03               	skipz
 18470  0261  2AD2               	goto	i1l676
 18471                           
 18472                           ;Dimmer_B1.c: 267: DimmerLightsIntr->AdjStatus = 1;
 18473  0262  0879               	movf	_DimmerLightsIntr,w
 18474  0263  0086               	movwf	6
 18475  0264  3001               	movlw	1	; select bank2/3
 18476  0265  0087               	movwf	7
 18477  0266  1601               	bsf	1,4
 18478                           
 18479                           ;Dimmer_B1.c: 268: }
 18480                           ;Dimmer_B1.c: 269: } else {
 18481  0267  2AD2               	goto	i1l676
 18482  0268                     i1l6862:	
 18483                           
 18484                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18485  0268  0879               	movf	_DimmerLightsIntr,w
 18486  0269  3E04               	addlw	4
 18487  026A  0086               	movwf	6
 18488  026B  3001               	movlw	1	; select bank2/3
 18489  026C  0087               	movwf	7
 18490  026D  300D               	movlw	13
 18491  026E  0201               	subwf	1,w
 18492  026F  1C03               	skipc
 18493  0270  2A78               	goto	i1l6866
 18494                           
 18495                           ;Dimmer_B1.c: 271: DimmerLightsIntr->DimmingValue--;
 18496  0271  0879               	movf	_DimmerLightsIntr,w
 18497  0272  3E04               	addlw	4
 18498  0273  0086               	movwf	6
 18499  0274  3001               	movlw	1	; select bank2/3
 18500  0275  0087               	movwf	7
 18501  0276  3001               	movlw	1
 18502  0277  0281               	subwf	1,f
 18503  0278                     i1l6866:	
 18504                           
 18505                           ;Dimmer_B1.c: 272: }
 18506                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18507  0278  0879               	movf	_DimmerLightsIntr,w
 18508  0279  3E04               	addlw	4
 18509  027A  0086               	movwf	6
 18510  027B  3001               	movlw	1	; select bank2/3
 18511  027C  0087               	movwf	7
 18512  027D  0801               	movf	1,w
 18513  027E  3A0C               	xorlw	12
 18514  027F  1D03               	skipz
 18515  0280  2AD2               	goto	i1l676
 18516                           
 18517                           ;Dimmer_B1.c: 274: DimmerLightsIntr->AdjStatus = 0;
 18518  0281  0879               	movf	_DimmerLightsIntr,w
 18519  0282  0086               	movwf	6
 18520  0283  3001               	movlw	1	; select bank2/3
 18521  0284  0087               	movwf	7
 18522  0285  1201               	bcf	1,4
 18523                           
 18524                           ;Dimmer_B1.c: 275: }
 18525                           ;Dimmer_B1.c: 276: }
 18526                           ;Dimmer_B1.c: 277: } else if (DimmerLightsIntr->AdjRF == 1) {
 18527  0286  2AD2               	goto	i1l676
 18528  0287                     i1l6870:	
 18529  0287  0879               	movf	_DimmerLightsIntr,w
 18530  0288  0086               	movwf	6
 18531  0289  3001               	movlw	1	; select bank2/3
 18532  028A  0087               	movwf	7
 18533  028B  1D01               	btfss	1,2
 18534  028C  2AD2               	goto	i1l676
 18535                           
 18536                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18537  028D  0879               	movf	_DimmerLightsIntr,w
 18538  028E  3E04               	addlw	4
 18539  028F  0086               	movwf	6
 18540  0290  3001               	movlw	1	; select bank2/3
 18541  0291  0087               	movwf	7
 18542  0292  0879               	movf	_DimmerLightsIntr,w
 18543  0293  3E05               	addlw	5
 18544  0294  0084               	movwf	4
 18545  0295  3001               	movlw	1	; select bank2/3
 18546  0296  0085               	movwf	5
 18547  0297  0800               	movf	0,w
 18548  0298  0201               	subwf	1,w
 18549  0299  1803               	skipnc
 18550  029A  2AA5               	goto	i1l6876
 18551                           
 18552                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue++;
 18553  029B  3001               	movlw	1
 18554  029C  00F2               	movwf	??_setDimmerLights_IntrControl
 18555  029D  0879               	movf	_DimmerLightsIntr,w
 18556  029E  3E04               	addlw	4
 18557  029F  0086               	movwf	6
 18558  02A0  3001               	movlw	1	; select bank2/3
 18559  02A1  0087               	movwf	7
 18560  02A2  0872               	movf	??_setDimmerLights_IntrControl,w
 18561  02A3  0781               	addwf	1,f
 18562                           
 18563                           ;Dimmer_B1.c: 280: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18564  02A4  2ABA               	goto	i1l6880
 18565  02A5                     i1l6876:	
 18566  02A5  0879               	movf	_DimmerLightsIntr,w
 18567  02A6  3E05               	addlw	5
 18568  02A7  0086               	movwf	6
 18569  02A8  3001               	movlw	1	; select bank2/3
 18570  02A9  0087               	movwf	7
 18571  02AA  0879               	movf	_DimmerLightsIntr,w
 18572  02AB  3E04               	addlw	4
 18573  02AC  0084               	movwf	4
 18574  02AD  3001               	movlw	1	; select bank2/3
 18575  02AE  0085               	movwf	5
 18576  02AF  0800               	movf	0,w
 18577  02B0  0201               	subwf	1,w
 18578  02B1  1803               	skipnc
 18579  02B2  2ABA               	goto	i1l6880
 18580                           
 18581                           ;Dimmer_B1.c: 281: DimmerLightsIntr->DimmingValue--;
 18582  02B3  0879               	movf	_DimmerLightsIntr,w
 18583  02B4  3E04               	addlw	4
 18584  02B5  0086               	movwf	6
 18585  02B6  3001               	movlw	1	; select bank2/3
 18586  02B7  0087               	movwf	7
 18587  02B8  3001               	movlw	1
 18588  02B9  0281               	subwf	1,f
 18589  02BA                     i1l6880:	
 18590                           
 18591                           ;Dimmer_B1.c: 282: }
 18592                           ;Dimmer_B1.c: 283: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18593  02BA  0879               	movf	_DimmerLightsIntr,w
 18594  02BB  3E05               	addlw	5
 18595  02BC  0086               	movwf	6
 18596  02BD  3001               	movlw	1	; select bank2/3
 18597  02BE  0087               	movwf	7
 18598  02BF  0879               	movf	_DimmerLightsIntr,w
 18599  02C0  3E04               	addlw	4
 18600  02C1  0084               	movwf	4
 18601  02C2  3001               	movlw	1	; select bank2/3
 18602  02C3  0085               	movwf	5
 18603  02C4  0800               	movf	0,w
 18604  02C5  0601               	xorwf	1,w
 18605  02C6  1D03               	skipz
 18606  02C7  2AD2               	goto	i1l676
 18607                           
 18608                           ;Dimmer_B1.c: 284: DimmerLightsIntr->AdjRF = 0;
 18609  02C8  0879               	movf	_DimmerLightsIntr,w
 18610  02C9  0086               	movwf	6
 18611  02CA  3001               	movlw	1	; select bank2/3
 18612  02CB  0087               	movwf	7
 18613  02CC  1101               	bcf	1,2
 18614                           
 18615                           ;Dimmer_B1.c: 285: DimmerLightsIntr->Signal = 0;
 18616  02CD  0879               	movf	_DimmerLightsIntr,w
 18617  02CE  0086               	movwf	6
 18618  02CF  3001               	movlw	1	; select bank2/3
 18619  02D0  0087               	movwf	7
 18620  02D1  1081               	bcf	1,1
 18621  02D2                     i1l676:	
 18622                           
 18623                           ;Dimmer_B1.c: 286: }
 18624                           ;Dimmer_B1.c: 287: }
 18625                           ;Dimmer_B1.c: 305: }
 18626                           ;Dimmer_B1.c: 306: }
 18627                           ;Dimmer_B1.c: 307: }
 18628                           ;Dimmer_B1.c: 309: if (DimmerLightsIntr->MosfetSignal == 1) {
 18629  02D2  0879               	movf	_DimmerLightsIntr,w
 18630  02D3  3E09               	addlw	9
 18631  02D4  0086               	movwf	6
 18632  02D5  3001               	movlw	1	; select bank2/3
 18633  02D6  0087               	movwf	7
 18634  02D7  1D81               	btfss	1,3
 18635  02D8  0008               	return
 18636                           
 18637                           ;Dimmer_B1.c: 310: DimmerLightsIntr->MosfetSignalCount++;
 18638  02D9  3001               	movlw	1
 18639  02DA  00F2               	movwf	??_setDimmerLights_IntrControl
 18640  02DB  0879               	movf	_DimmerLightsIntr,w
 18641  02DC  3E0C               	addlw	12
 18642  02DD  0086               	movwf	6
 18643  02DE  3001               	movlw	1	; select bank2/3
 18644  02DF  0087               	movwf	7
 18645  02E0  0872               	movf	??_setDimmerLights_IntrControl,w
 18646  02E1  0781               	addwf	1,f
 18647                           
 18648                           ;Dimmer_B1.c: 311: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18649  02E2  0879               	movf	_DimmerLightsIntr,w
 18650  02E3  3E0C               	addlw	12
 18651  02E4  0086               	movwf	6
 18652  02E5  3001               	movlw	1	; select bank2/3
 18653  02E6  0087               	movwf	7
 18654  02E7  0801               	movf	1,w
 18655  02E8  3A05               	xorlw	5
 18656  02E9  1D03               	skipz
 18657  02EA  0008               	return
 18658                           
 18659                           ;Dimmer_B1.c: 312: DimmerLightsIntr->MosfetSignalCount = 0;
 18660  02EB  0879               	movf	_DimmerLightsIntr,w
 18661  02EC  3E0C               	addlw	12
 18662  02ED  0086               	movwf	6
 18663  02EE  3001               	movlw	1	; select bank2/3
 18664  02EF  0087               	movwf	7
 18665  02F0  0181               	clrf	1
 18666                           
 18667                           ;Dimmer_B1.c: 313: DimmerLightsIntr->MosfetSignal = 0;
 18668  02F1  0879               	movf	_DimmerLightsIntr,w
 18669  02F2  3E09               	addlw	9
 18670  02F3  0086               	movwf	6
 18671  02F4  3001               	movlw	1	; select bank2/3
 18672  02F5  0087               	movwf	7
 18673  02F6  1181               	bcf	1,3
 18674  02F7  0008               	return
 18675  02F8                     __end_of_setDimmerLights_IntrControl:	
 18676                           
 18677                           	psect	text130
 18678  1C61                     __ptext130:	
 18679 ;; *************** function _DimmerIntrPointSelect *****************
 18680 ;; Defined at:
 18681 ;;		line 71 in file "../src/Dimmer_B1.c"
 18682 ;; Parameters:    Size  Location     Type
 18683 ;;  lights          1    wreg     unsigned char 
 18684 ;; Auto vars:     Size  Location     Type
 18685 ;;  lights          1    1[COMMON] unsigned char 
 18686 ;; Return value:  Size  Location     Type
 18687 ;;		None               void
 18688 ;; Registers used:
 18689 ;;		wreg
 18690 ;; Tracked objects:
 18691 ;;		On entry : 0/0
 18692 ;;		On exit  : 0/0
 18693 ;;		Unchanged: 0/0
 18694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;Total ram usage:        2 bytes
 18700 ;; Hardware stack levels used:    1
 18701 ;; This function calls:
 18702 ;;		Nothing
 18703 ;; This function is called by:
 18704 ;;		_setDimmerLights_IntrControl
 18705 ;; This function uses a non-reentrant model
 18706 ;;
 18707                           
 18708                           
 18709                           ;psect for function _DimmerIntrPointSelect
 18710  1C61                     _DimmerIntrPointSelect:	
 18711                           
 18712                           ;incstack = 0
 18713                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18714                           ;DimmerIntrPointSelect@lights stored from wreg
 18715  1C61  00F1               	movwf	DimmerIntrPointSelect@lights
 18716                           
 18717                           ;Dimmer_B1.c: 73: if (lights == 1) {
 18718  1C62  0871               	movf	DimmerIntrPointSelect@lights,w
 18719  1C63  3A01               	xorlw	1
 18720  1C64  1D03               	skipz
 18721  1C65  0008               	return
 18722                           
 18723                           ;Dimmer_B1.c: 74: DimmerLightsIntr = &DimmerLights1;
 18724  1C66  30C5               	movlw	_DimmerLights1& (0+255)
 18725  1C67  00F0               	movwf	??_DimmerIntrPointSelect
 18726  1C68  0870               	movf	??_DimmerIntrPointSelect,w
 18727  1C69  00F9               	movwf	_DimmerLightsIntr
 18728  1C6A  0008               	return
 18729  1C6B                     __end_of_DimmerIntrPointSelect:	
 18730                           
 18731                           	psect	text131
 18732  1D30                     __ptext131:	
 18733 ;; *************** function _IOC_ISR *****************
 18734 ;; Defined at:
 18735 ;;		line 401 in file "../src/MCU_B1.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;		None
 18738 ;; Auto vars:     Size  Location     Type
 18739 ;;		None
 18740 ;; Return value:  Size  Location     Type
 18741 ;;		None               void
 18742 ;; Registers used:
 18743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18744 ;; Tracked objects:
 18745 ;;		On entry : 0/0
 18746 ;;		On exit  : 0/0
 18747 ;;		Unchanged: 0/0
 18748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;Total ram usage:        0 bytes
 18754 ;; Hardware stack levels used:    1
 18755 ;; Hardware stack levels required when called:    3
 18756 ;; This function calls:
 18757 ;;		_setDimmerReClock
 18758 ;; This function is called by:
 18759 ;;		_ISR
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           
 18764                           ;psect for function _IOC_ISR
 18765  1D30                     _IOC_ISR:	
 18766                           
 18767                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18768                           
 18769                           ;incstack = 0
 18770                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18771  1D30  1D8B               	btfss	11,3	;volatile
 18772  1D31  0008               	return
 18773  1D32  1C0B               	btfss	11,0	;volatile
 18774  1D33  0008               	return
 18775  1D34  0027               	movlb	7	; select bank7
 18776  1D35  1D16               	btfss	22,2	;volatile
 18777  1D36  0008               	return
 18778                           
 18779                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18780  1D37  1116               	bcf	22,2	;volatile
 18781                           
 18782                           ;MCU_B1.c: 404: IOCIF = 0;
 18783  1D38  100B               	bcf	11,0	;volatile
 18784                           
 18785                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18786  1D39  0021               	movlb	1	; select bank1
 18787  1D3A  1C20               	btfss	_myMain^(0+128),0
 18788  1D3B  0008               	return
 18789                           
 18790                           ;MCU_B1.c: 408: setDimmerReClock();
 18791  1D3C  319B  23F8         	fcall	_setDimmerReClock
 18792  1D3E  0008               	return
 18793  1D3F                     __end_of_IOC_ISR:	
 18794                           
 18795                           	psect	text132
 18796  1BF8                     __ptext132:	
 18797 ;; *************** function _setDimmerReClock *****************
 18798 ;; Defined at:
 18799 ;;		line 244 in file "../src/MCU_B1.c"
 18800 ;; Parameters:    Size  Location     Type
 18801 ;;		None
 18802 ;; Auto vars:     Size  Location     Type
 18803 ;;		None
 18804 ;; Return value:  Size  Location     Type
 18805 ;;		None               void
 18806 ;; Registers used:
 18807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18808 ;; Tracked objects:
 18809 ;;		On entry : 0/0
 18810 ;;		On exit  : 0/0
 18811 ;;		Unchanged: 0/0
 18812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18817 ;;Total ram usage:        0 bytes
 18818 ;; Hardware stack levels used:    1
 18819 ;; Hardware stack levels required when called:    2
 18820 ;; This function calls:
 18821 ;;		_setDimmerLights_IntrIOC_GO
 18822 ;; This function is called by:
 18823 ;;		_IOC_ISR
 18824 ;; This function uses a non-reentrant model
 18825 ;;
 18826                           
 18827                           
 18828                           ;psect for function _setDimmerReClock
 18829  1BF8                     _setDimmerReClock:	
 18830                           
 18831                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18832                           
 18833                           ;incstack = 0
 18834                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18835  1BF8  3001               	movlw	1
 18836  1BF9  3192  22B4         	fcall	_setDimmerLights_IntrIOC_GO
 18837  1BFB  0008               	return
 18838  1BFC                     __end_of_setDimmerReClock:	
 18839                           
 18840                           	psect	text133
 18841  12B4                     __ptext133:	
 18842 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18843 ;; Defined at:
 18844 ;;		line 28 in file "../src/Dimmer_B1.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;  lights          1    wreg     unsigned char 
 18847 ;; Auto vars:     Size  Location     Type
 18848 ;;  lights          1    2[COMMON] unsigned char 
 18849 ;; Return value:  Size  Location     Type
 18850 ;;		None               void
 18851 ;; Registers used:
 18852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18853 ;; Tracked objects:
 18854 ;;		On entry : 0/0
 18855 ;;		On exit  : 0/0
 18856 ;;		Unchanged: 0/0
 18857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;Total ram usage:        1 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; Hardware stack levels required when called:    1
 18865 ;; This function calls:
 18866 ;;		_DimmerIntrIOCPointSelect
 18867 ;; This function is called by:
 18868 ;;		_setDimmerReClock
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           
 18873                           ;psect for function _setDimmerLights_IntrIOC_GO
 18874  12B4                     _setDimmerLights_IntrIOC_GO:	
 18875                           
 18876                           ;incstack = 0
 18877                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18878                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18879  12B4  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18880                           
 18881                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18882  12B5  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18883  12B6  319C  2475  3192   	fcall	_DimmerIntrIOCPointSelect
 18884                           
 18885                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 18886  12B9  0021               	movlb	1	; select bank1
 18887  12BA  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18888  12BB  0086               	movwf	6
 18889  12BC  3001               	movlw	1	; select bank2/3
 18890  12BD  0087               	movwf	7
 18891  12BE  1801               	btfsc	1,0
 18892  12BF  0008               	return
 18893  12C0  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18894  12C1  3E09               	addlw	9
 18895  12C2  0086               	movwf	6
 18896  12C3  3001               	movlw	1	; select bank2/3
 18897  12C4  0087               	movwf	7
 18898  12C5  1981               	btfsc	1,3
 18899  12C6  0008               	return
 18900                           
 18901                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18902  12C7  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18903  12C8  0086               	movwf	6
 18904  12C9  3001               	movlw	1	; select bank2/3
 18905  12CA  0087               	movwf	7
 18906  12CB  1401               	bsf	1,0
 18907                           
 18908                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18909  12CC  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18910  12CD  3E09               	addlw	9
 18911  12CE  0086               	movwf	6
 18912  12CF  3001               	movlw	1	; select bank2/3
 18913  12D0  0087               	movwf	7
 18914  12D1  1581               	bsf	1,3
 18915                           
 18916                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 18917  12D2  0022               	movlb	2	; select bank2
 18918  12D3  01C0               	clrf	(_Dimmer^(0+256)+2)
 18919                           
 18920                           ;Dimmer_B1.c: 49: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18921  12D4  0021               	movlb	1	; select bank1
 18922  12D5  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18923  12D6  0086               	movwf	6
 18924  12D7  3001               	movlw	1	; select bank2/3
 18925  12D8  0087               	movwf	7
 18926  12D9  1F01               	btfss	1,6
 18927  12DA  0008               	return
 18928                           
 18929                           ;Dimmer_B1.c: 50: DimmerLightsIntrIOC->MOSFET = 1;
 18930  12DB  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18931  12DC  3E09               	addlw	9
 18932  12DD  0086               	movwf	6
 18933  12DE  3001               	movlw	1	; select bank2/3
 18934  12DF  0087               	movwf	7
 18935  12E0  1601               	bsf	1,4
 18936                           
 18937                           ;Dimmer_B1.c: 52: if (lights == 1) {
 18938  12E1  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18939  12E2  3A01               	xorlw	1
 18940  12E3  1D03               	skipz
 18941  12E4  0008               	return
 18942                           
 18943                           ;Dimmer_B1.c: 53: RB4 = 1;
 18944  12E5  0020               	movlb	0	; select bank0
 18945  12E6  160D               	bsf	13,4	;volatile
 18946  12E7  0008               	return
 18947  12E8                     __end_of_setDimmerLights_IntrIOC_GO:	
 18948                           
 18949                           	psect	text134
 18950  1C75                     __ptext134:	
 18951 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18952 ;; Defined at:
 18953 ;;		line 8 in file "../src/Dimmer_B1.c"
 18954 ;; Parameters:    Size  Location     Type
 18955 ;;  lights          1    wreg     unsigned char 
 18956 ;; Auto vars:     Size  Location     Type
 18957 ;;  lights          1    1[COMMON] unsigned char 
 18958 ;; Return value:  Size  Location     Type
 18959 ;;		None               void
 18960 ;; Registers used:
 18961 ;;		wreg
 18962 ;; Tracked objects:
 18963 ;;		On entry : 0/0
 18964 ;;		On exit  : 0/0
 18965 ;;		Unchanged: 0/0
 18966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18969 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18970 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18971 ;;Total ram usage:        2 bytes
 18972 ;; Hardware stack levels used:    1
 18973 ;; This function calls:
 18974 ;;		Nothing
 18975 ;; This function is called by:
 18976 ;;		_setDimmerLights_IntrIOC_GO
 18977 ;; This function uses a non-reentrant model
 18978 ;;
 18979                           
 18980                           
 18981                           ;psect for function _DimmerIntrIOCPointSelect
 18982  1C75                     _DimmerIntrIOCPointSelect:	
 18983                           
 18984                           ;incstack = 0
 18985                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18986                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18987  1C75  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18988                           
 18989                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18990  1C76  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18991  1C77  3A01               	xorlw	1
 18992  1C78  1D03               	skipz
 18993  1C79  0008               	return
 18994                           
 18995                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18996  1C7A  30C5               	movlw	_DimmerLights1& (0+255)
 18997  1C7B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18998  1C7C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18999  1C7D  0021               	movlb	1	; select bank1
 19000  1C7E  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19001  1C7F  0008               	return
 19002  1C80                     __end_of_DimmerIntrIOCPointSelect:	
 19003  007E                     btemp	set	126	;btemp
 19004  007E                     pic14e$flags	set	126
 19005  007E                     wtemp	set	126
 19006  007E                     wtemp0	set	126
 19007  0080                     wtemp1	set	128
 19008  0082                     wtemp2	set	130
 19009  0084                     wtemp3	set	132
 19010  0086                     wtemp4	set	134
 19011  0088                     wtemp5	set	136
 19012  007F                     wtemp6	set	127
 19013  007E                     ttemp	set	126
 19014  007E                     ttemp0	set	126
 19015  0081                     ttemp1	set	129
 19016  0084                     ttemp2	set	132
 19017  0087                     ttemp3	set	135
 19018  007F                     ttemp4	set	127
 19019  007E                     ltemp	set	126
 19020  007E                     ltemp0	set	126
 19021  0082                     ltemp1	set	130
 19022  0086                     ltemp2	set	134
 19023  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95409
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11071
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4872
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29028
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29028
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     762
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1347
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28352
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 01 17:27:27 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 16C7                                       l94 1542  
                                     l86 16DB                                       l95 153E  
                                     l96 152C                                       l98 153C  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 2000  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CB7  
                 __end_of_setDelayOff_GO 0866                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16EF  
                   _setDimmerLights_Line 1CD9                             ___ftadd@sign 004B  
                                    l231 0A1B                                      l304 1E47  
                                    l305 1E48                     _setDimmerLights_SwOn 13F6  
                                    l348 10F6                                      l707 1216  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RC0 0070  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RB4 006C                                      _RA6 0066  
                                    _RC3 0073                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RF1 00BB  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01D4  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E51  
                  _Buzzer_Initialization 1BE9                          __end_of_ADC_Set 1C3F  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0CE5                   _setMain_Exception$3731 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 10AA  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D3F  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l2002 060D  
                                   l2011 0590                                     l1204 158F  
                                   l2004 055B                                     l2013 05C9  
                                   l2005 055D                                     l2006 0565  
                                   l1181 1383                                     l1430 127B  
                                   l2047 1D44                                     l2071 13BB  
                                   l2055 0DA5                           _Load_Main$4106 002D  
                                   l1425 1264                                     l2065 0DFB  
                                   l1426 127F                 ?_DimmerLightsPointSelect 0070  
                                   l1195 11E5                                     l1540 0436  
                                   l2085 0980                                     l1381 090D  
                                   l1543 032F                                     l1544 0406  
                                   l1545 0404                                     l2097 145E  
                        __end_of_IOC_Set 1D09                                     l2381 1F8F  
                                   l2367 1E96                                     l2391 01A9  
                                   l2393 0082                                     l6010 1229  
                                   l1685 0E9F                                     l2734 09CB  
                                   l6110 15CA                                     l2728 09B4  
                                   l6210 1335                                     l6114 15D9  
                                   l7010 1FB2                                     l6204 132C  
                                   l6060 1EB5                                     l7004 1FAA  
                                   l2757 04DB                                     l6142 1EE4  
                                   l7022 1550                                     l7006 1FAD  
                                   l6136 1EDB                                     l6400 1112  
                                   l6080 15F0                                     l6152 1091  
                                   l6320 0A2E                                     l6312 0A21  
                                   l6128 144C                                     l6138 1EDE  
                                   l6082 1621                                     l6218 1349  
                                   l6058 1EB1                                     l6154 1094  
                                   l6322 0A31                                     l6314 0A24  
                                   l7114 0E12                                     l6412 1FF0  
                                   l5516 1071                                     l5532 046B  
                                   l5604 0ED0                                     l7028 1565  
                                   l6340 0B7A                                     l6308 0A03  
                                   l6406 1FE7                                     l6078 161B  
                                   l6182 125F                                     l5470 0991  
                                   l5550 0494                                     l6158 109A  
                                   l6326 0A37                                     l6318 0A2A  
                                   l7230 05AE                                     l7062 17D1  
                                   l6408 1FEA                                     l5800 07E8  
                                   l6192 1276                                     l6184 1268  
                                   l5480 09B9                                     l5472 099B  
                                   l5560 04B6                                     l5528 0464  
                                   l6360 0B9B                                     l6344 0B80  
                                   l5640 0F63                                     l6272 095D  
                                   l6256 0922                                     l7232 05B0  
                                   l7072 17F1                                     l7056 17C3  
                                   l7048 17B0                                     l6520 12FD  
                                   l7144 0E6B                                     l6450 11B5  
                                   l5482 09C1                                     l5474 09A0  
                                   l5466 098A                                     l5570 04D7  
                                   l5562 04BA                                     l5538 047A  
                                   l5626 0F2A                                     l5618 0F11  
                                   l6354 0B92                                     l6338 0B77  
                                   l6346 0B83                                     l6290 09EC  
                                   l6274 0961                                     l7066 17E1  
                                   l7074 17FA                                     l7314 00B0  
                                   l7146 0E6D                                     l5804 07F1  
                                   l6452 1199                                     l5556 04A7  
                                   l5732 0CDC                                     l5724 0CC2  
                                   l5716 0CA7                                     l6356 0B95  
                                   l6268 0947                                     l7260 05FB  
                                   l7324 00E2                                     l7156 0E82  
                  _setDimmerLights_SwOff 14B6                                     l5494 1DE4  
                                   l6454 11BA                                     l5574 04ED  
                                   l5558 04B1                                     l5726 0CCB  
                                   l5718 0CB5                                     l6294 09F2  
                                   l6630 1DCA                                     l5670 0FD0  
                                   l5662 0FBC                                     l5646 0F79  
                                   l6278 0965                                     l6542 1CBF  
                                   l7158 0E83                                     l5808 07F9  
                                   l5752 1190                                     l5568 04CD  
                                   l5728 0CCE                                     l6376 0BAC  
                                   l6288 09E9                                     l7248 05DA  
                                   l7280 1E9B                                     l7600 0C2B  
                                   l5498 1DEA                                     l5578 04FF  
                                   l7434 120D                                     l6378 0BC4  
                                   l5674 0FD8                                     l5658 0FB4  
                                   l5922 142C                                     l7338 0120  
                                   l5860 0857                                     l5852 083B  
                                   l5588 051A                                     l6476 0D33  
                                   l7436 1210                                     l7196 057C  
                                   l7284 1EA1                                     l7348 0152  
                                   l6398 1107                                     l6742 14A0  
                                   l5782 07C2                                     l5598 0EBA  
                                   l7438 1218                                     l6654 0D91  
                                   l6718 1DDB                                     l7374 01A5  
                                   l7630 13E7                                     l6752 14B0  
                                   l6736 1497                                     l5792 07CA  
                                   l5776 07B7                                     l5856 0841  
                                   l6488 0D5A                                     l6496 0B23  
                                   l7712 0349                                     l7616 0C58  
                                   l6746 14A7                                     l6738 149A  
                                   l5794 07D6                                     l5858 084E  
                                   l5938 14EA                                     l5698 0C77  
                                   l6586 11CD                                     l6666 0DA8  
                                   l7298 006D                                     l7388 1516  
                                   l6748 14AA                                     l5956 1794  
                                   l6916 1714                                     l6918 171A  
                                   l7742 03C2                                     l7750 03D5  
                                   l7718 0373                                     l6694 0DF1  
                                   l6678 0DC0                                     l7654 08F7  
                                   l6928 1742                                     l7496 0683  
                                   l7808 0424                                     l7760 03EA  
                                   l6688 0DE6                                     l7832 1F98  
                                   l7664 090E                                     l7648 08E5  
                                   l7912 166D                                     l7748 03CF  
                                   l7692 031E                                     l7596 0C23  
                                   l7588 0BFE                                     l7908 1662  
                  _myMain_Initialization 1D4E                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4005 0996  
                                   u4025 09AF                                     u4045 09BC  
                                   u4215 0495                                     u4305 04CE  
                                   u4075 09D2                                     u4245 04A8  
                                   u4405 0F21                                     u4415 0F2B  
                                   u4275 04BB                                     _PEIE 005E  
                                   u5085 15F9                                     u4605 0CA8  
                                   u4525 0FD9                                     u4375 0EE2  
                                   u4535 0FDF                                     u4455 0F85  
                                   u4385 0EF2                                     u4465 0F95  
                                   u7115 150C                                     u4395 0F12  
                                   u4635 0CC3                                     u4485 0FBD  
                                   u5535 10FC                                     u4735 07CD  
                                   u4575 0C7E                                     u4495 0FC3  
                                   u5625 11A2                                     u4755 07D7  
                                   u4940 1752                                     u4765 07E1  
                                   u4685 117C                                     u6605 0E53  
                                   u7405 0C11                                     u4775 07E9  
                                   u4945 1750                                     u7345 137A  
                                   u6625 0E73                                     u7505 13ED  
                                   u6725 0576                                     u7525 08D4  
                                   u7455 0C45                                     u7535 08F3  
                                   u7705 0388                                     u7545 0905  
                                   u4995 1E74                                     u6845 05EB  
                                   u7565 091C                                     u7495 13DE  
                                   u7765 03DB                                     u7685 0375  
                                   u7695 037A                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0143  
                                   _Temp 00D6                                     _main 163E  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 08C3  
                        __end_of_RF_Main 1BF2                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1CAC                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1BF8  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1473                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1D5D  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1C18         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C6B                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EB                          __end_of___awdiv 0800  
                        __end_of___ftadd 0532                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1C58                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l676 02D2                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1E7A                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 12E8               _setDimmerLights_IntrIOC_GO 12B4  
                       __end_of_TMR1_ISR 10F1             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 163E               _setDimmerLights_ErrorClose 15E6  
                       __end_of_TMR1_Set 1D15                                    _getAD 1F9F  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1E17  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1D8D                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 11BD            __end_of_setLED_Initialization 1DAE  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1748              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0AA8  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 1696                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1C1C                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D6E                     _setSw_Initialization 1D8D  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0921  
                         _setMemory_Data 1CE5                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1C96                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0866  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1088                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 09E2                 _getMain_All_Error_Status 124E  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F22  
                                 i1l6840 020E                                   i1l6862 0268  
                                 i1l6870 0287                                   i1l6880 02BA  
                                 i1l6866 0278                                   i1l6858 0259  
                                 i1l6876 02A5                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u614_25 01E7  
                                 _OSCCON 0099                       __size_of_Load_Main 0144  
                                 u727_25 10EB                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1EBB  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1BE7           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E8F                                   _Dimmer 013E  
                                 _DlySw1 01DD               __end_of_Mcu_Initialization 1E05  
                    __end_of_Buzzer_Main 1549                                   _Memory 01A0  
                                 _Timer1 00C7       __end_of_setDimmerLights_TriggerAdj 1F7F  
             _setDimmerLights_TriggerAdj 1F5F                                   ___bmul 1DE1  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 131D                                   _myMain 00A0  
                 __end_of_setMemory_Data 1CF1                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 1696  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1C26  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 02F8              _setDimmerLights_IntrControl 01B2  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1E3D              getMain_Lights_Count@status1 0023  
            getMain_Lights_Count@status2 0021              getMain_Lights_Count@status3 0022  
                  __end_of_SwPointSelect 1CCD             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 000B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1E8F               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0B0D         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 003F                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5491 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1FBF                            __end_of_getAD 1FBF  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1C10  
                        _getSw_KeyStatus 1DD0                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1D7D  
                              ?_WDT_Main 0070                        __end_of_Load_Main 043C  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1192  
             __end_of_set_TimeoutCleared 1C21                 __end_of_setDimmerReClock 1BFC  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                     __size_of_setLED_Main 0033  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1BF2                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 14FF  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1BF8  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1C08  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 163E  
                         _getDelayOff_GO 1D6D                      _CC2500_WriteCommand 1ED3  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1C3F  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1C38                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13BF                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1CB7  
                     _setRFSW_AdjControl 1433                                  _IOC_ISR 1D30  
                                _IOC_Set 1CFD                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1353  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1EEC  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1BEF                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1CA1  
        __end_of_setControl_Lights_Table 0981                          setRF_Main@error 00EA  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0A43                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1CD9  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1DBF  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1D7D           __end_of_getDimmerLights_Status 1D6D  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1DE1  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C80  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1F40  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 07AC  
                                ___ftadd 043C                                  ___ftdiv 0EA3  
                                ___ftneg 1C4F                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1F9F  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1DBF  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0036                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 08C3  
                                __ptext2 1D4E                                  __ptext3 13BF  
                                __ptext4 0BDD                                  __ptext5 1F9F  
                                __ptext6 1E05                                  __ptext7 0002  
                                __ptext8 1BF5                                  __ptext9 0DFE  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1C61                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 1389  
              __end_of_Flash_Memory_Read 1F06                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0532                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1C0C                        _DimmerLights_Main 11EC  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1C2C  
             __end_of_CC2500_ClearRXFIFO 1C00                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1C04            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1C96  
                    _DelayOffPointSelect 1C80                           _getMain_LoadOK 1D22  
                                clrloop0 1C33           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 0809                     end_of_initialization 003F  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 113E  
                          _DelayTime_1us 10F1                        __end_of_setTxData 07AC  
             __end_of_Flash_Memory_Write 11EC                                  init_ram 1C2C  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1C2D  
                             _setSw_Main 0043                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1088  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1D9D  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B73                            _CC2500_TxData 09E2  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1549                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1C58  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 121C  
                     _Mcu_Initialization 1DF3                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 0921                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1CA1  
                __end_of_setPercentValue 0AA8                   __end_of_getMain_LoadOK 1D30  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1168  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0B0D                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 10AA                            ?_RF_RxDisable 0070  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1ED3  
                   _setRF_Initialization 1CAC                       _setMemory_LoopSave 1E2A  
                            _Switch_Main 1F7F                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C8B  
                __end_of_getRF_KeyStatus 1DD0                        _setMain_Exception 17A4  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E7A                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1DF3  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
               _DimmerIntrIOCPointSelect 1C75          _setDimmerLights_AdjControl$2408 0027  
                      getSw_KeyStatus@sw 0070                        __size_of_TMR1_ISR 0024  
          __size_of_getDimmerLights_Line 000B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 1353            __size_of_setDimmerLights_Line 000C  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 16EF  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1CCD  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 1597  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 121C  
                        ?_LedPointSelect 0070                                _Load_Main 02F8  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1C47                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F5F  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                           ??_RF_RxDisable 0024  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1C1C  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 01E2                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 1800  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1BF5  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D0                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D2  
                            __pdataBANK4 0220                _getAll_DimmerLights_AdjGO 1C6B  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1281  
                       _CC2500_SIDLEMode 1C04               __size_of_DimmerLights_Main 0030  
              __end_of_setRF_DimmerValue 124E                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1E17                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E8  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C5                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1F22                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 0004  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DF                           Load_Main@adjgo 002C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1BE8                                _getBuz_GO 1DAE  
    __end_of_Flash_Memory_Initialization 06ED              _Flash_Memory_Initialization 0611  
                               ?___awdiv 0020                                __ptext100 0809  
                              __ptext101 1168                                __ptext110 1C80  
                              __ptext102 1DE1                                __ptext111 1E7A  
                              __ptext103 1D6D                                __ptext120 1BFC  
                              __ptext112 1C04                                __ptext104 1D5D  
                              __ptext121 1ED3                                __ptext113 1473  
                              __ptext105 1C8B                                __ptext130 1C61  
                              __ptext122 1C1C                                __ptext114 113E  
                              __ptext106 1696                                __ptext131 1D30  
                              __ptext123 1E65                                __ptext115 1F40  
                              __ptext107 07AC                                __ptext132 1BF8  
                              __ptext124 1E3D                                __ptext116 1FDF  
                              __ptext108 1C08                                __ptext133 12B4  
                              __ptext125 14FF                                __ptext117 1CCD  
                              __ptext109 1C26                                 ?___ftadd 0041  
                              __ptext134 1C75                                __ptext126 1BE9  
                              __ptext118 10F1                                __ptext119 1C00  
                              __ptext128 10CD                                __ptext129 01B2  
                              _getRxData 0D6E                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 005E  
                __end_of_setRFSW_Control 15E6            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1BEC                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0020                       __end_of_TouchPower 1EA4  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 10CD  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2344 0069  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 14FF  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D5D  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1CC2                      __end_of_setLED_Main 12B4  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1BF5  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1C14                          SwPointSelect@sw 0021  
                              clear_ram0 1C32                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 08C3  
                              _setTxData 06ED      __end_of_DimmerLights_Initialization 1D22  
            _DimmerLights_Initialization 1D15                       _CC2500_ClearRXFIFO 1BFC  
                     _CC2500_ClearTXFIFO 1C00           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E65                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 11BD                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10CD  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1D09  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0141  
                   __end_of_RF_RxDisable 1D4E                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1EEC                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1E05                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0021                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E8                    __size_of_setTemp_Main 00A5  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1CFD                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 13BF                    _DlyOff_Initialization 1C26  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1C18                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C5E                       __end_of_getLoad_OK 1C47  
                  _Switch_Initialization 0800        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 13F6                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1E3D                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D1  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$3747 0021            _getMain_All_Error_Status$3756 0023  
               __end_of_getDimmer_LoadOK 1C4F                      _Load_Initialization 1C21  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0DFE  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1066                         ??_LedPointSelect 0020  
                               ___ftpack 0981            __size_of_getMain_Lights_Count 0010  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002B  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1281  
             __end_of_setRF_DimmerLights 17A4                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 000A  
                   ?_Load_Initialization 0070                                 __ptext10 1BF2  
                               __ptext11 1BE8                                 __ptext20 0800  
                               __ptext12 1F7F                                 __ptext21 1D8D  
                               __ptext13 0043                                 __ptext30 13F6  
                               __ptext22 1E8F                                 __ptext14 1E51  
                               __ptext31 1433                                 __ptext23 1BEF  
                               __ptext15 12E8                                 __ptext40 09E2  
                               __ptext32 121C                                 __ptext24 0532  
                               __ptext16 1DD0                                 __ptext41 0B73  
                               __ptext33 10AA                                 __ptext25 0D6E  
                               __ptext17 1CC2                                 __ptext50 1CFD  
                               __ptext42 1088                                 __ptext34 0AA8  
                               __ptext26 1389                                 __ptext18 17A4  
                               __ptext51 1C18                                 __ptext43 1EA4  
                               __ptext35 0F4C                                 __ptext27 1E2A  
                               __ptext19 1CB7                                 __ptext60 1C14  
                               __ptext52 1C38                                 __ptext44 1BEC  
                               __ptext36 1E17                                 __ptext28 0921  
                               __ptext61 1281                                 __ptext53 02F8  
                               __ptext45 1CAC                                 __ptext37 1DBF  
                               __ptext29 1597                                 __ptext70 1C58  
                               __ptext62 1C10                                 __ptext54 1D22  
                               __ptext46 1DF3                                 __ptext38 1DAE  
                               __ptext71 1EEC                                 __ptext63 1D9D  
                               __ptext55 1C47                                 __ptext47 1CA1  
                               __ptext39 1D3F                                 __ptext80 1C4F  
                               __ptext72 11EC                                 __ptext64 1353  
                               __ptext56 1D7D                                 __ptext48 1D09  
                               __ptext81 0EA3                                 __ptext73 16EF  
                               __ptext65 1549                                 __ptext57 1C6B  
                               __ptext49 1EBB                                 __ptext90 1C3F  
                               __ptext82 043C                                 __ptext74 0B0D  
                               __ptext66 1CF1                                 __ptext58 1C21  
                               __ptext91 1D15                                 __ptext83 1066  
                               __ptext75 0CE5                                 __ptext67 0611  
                               __ptext59 1F06                                 __ptext92 1117  
                               __ptext84 0981                                 __ptext76 06ED  
                               __ptext68 1CE5                                 __ptext93 1BE7  
                               __ptext85 131D                                 __ptext77 1748  
                               __ptext69 11BD                                 __ptext94 1C0C  
                               __ptext86 1C96                                 __ptext78 0A43  
                               __ptext95 0866                                 __ptext87 1CD9  
                               __ptext79 0C5E                                 __ptext96 15E6  
                               __ptext88 124E                                 __ptext97 14B6  
                               __ptext89 1192                                 __ptext98 1F5F  
                               __ptext99 1F22                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1CC2            __end_of_Dimmer_Initialization 1BE8  
           __end_of_setDimmerLights_Main 1748             __end_of_setDimmerLights_Line 1CE5  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 1433  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1E51                 __end_of_CC2500_SIDLEMode 1C08  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1C8B  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00E9  
              __size_of_setDimmerReClock 0004           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1EA4                       _CC2500_InitPATable 1F40  
               __end_of_setMemory_Modify 1E2A            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0611                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EB                                 main@argv 00ED  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6547 0022  
                        _CC2500_PowerRST 1473                 __size_of_getSw_KeyStatus 0011  
            __end_of_Flash_Memory_Modify 1597                        ??_getPercentValue 005C  
                            _setLog_Code 1389              __end_of_Flash_Memory_Unlock 1C61  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1FDF  
                     __end_of_setSw_Main 01B2                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1168                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C75              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 113E  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 1117              __end_of_setDimmerLights_Adj 0B73  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1BEC     __size_of_setDimmerLights_IntrControl 0146  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1CF1  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1C0C      __size_of_setDimmerLights_IntrIOC_GO 0034  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1C10       __end_of_setDimmerLights_AdjControl 131D  
             _setDimmerLights_AdjControl 12E8                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0809  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 1192  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 1117                  __end_of_CC2500_ReadByte 1EBB  
           __end_of_setSw_Initialization 1D9D                          _Timeout_Counter 1E65  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1D3F               __end_of_LED_Initialization 1C14  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1BE9  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1BEF  
                  __end_of_CC2500_RxData 0BDD                    __end_of_CC2500_TxData 0A43  
                  _setLoad_AH_AL_Restore 1F06                  __end_of_CC2500_PowerRST 14B6  
         getAll_DimmerLights_AdjGO@adjgo 0020  
