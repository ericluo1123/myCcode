

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 04 14:50:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	dabs	1,0x7E,2
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  011D                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0194                     	;# 
   211  0195                     	;# 
   212  0196                     	;# 
   213  0197                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  020D                     	;# 
   226  0210                     	;# 
   227  0211                     	;# 
   228  0211                     	;# 
   229  0212                     	;# 
   230  0212                     	;# 
   231  0213                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0214                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0216                     	;# 
   239  0216                     	;# 
   240  0217                     	;# 
   241  0217                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0FE4                     	;# 
   254  0FE5                     	;# 
   255  0FE6                     	;# 
   256  0FE7                     	;# 
   257  0FE8                     	;# 
   258  0FE9                     	;# 
   259  0FEA                     	;# 
   260  0FEB                     	;# 
   261  0FED                     	;# 
   262  0FEE                     	;# 
   263  0FEF                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  0116                     	;# 
   311  0117                     	;# 
   312  011D                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  018E                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0197                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020D                     	;# 
   337  0210                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0291                     	;# 
   354  0291                     	;# 
   355  0292                     	;# 
   356  0293                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  0394                     	;# 
   362  0395                     	;# 
   363  0396                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018D                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020D                     	;# 
   448  0210                     	;# 
   449  0211                     	;# 
   450  0211                     	;# 
   451  0212                     	;# 
   452  0212                     	;# 
   453  0213                     	;# 
   454  0213                     	;# 
   455  0214                     	;# 
   456  0214                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0216                     	;# 
   461  0216                     	;# 
   462  0217                     	;# 
   463  0217                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  0394                     	;# 
   473  0395                     	;# 
   474  0396                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0010                     	;# 
   502  0011                     	;# 
   503  0012                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  011D                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537  018E                     	;# 
   538  0191                     	;# 
   539  0191                     	;# 
   540  0192                     	;# 
   541  0193                     	;# 
   542  0193                     	;# 
   543  0194                     	;# 
   544  0195                     	;# 
   545  0196                     	;# 
   546  0197                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019C                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020D                     	;# 
   559  0210                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0298                     	;# 
   580  0298                     	;# 
   581  0299                     	;# 
   582  029A                     	;# 
   583  0394                     	;# 
   584  0395                     	;# 
   585  0396                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0010                     	;# 
   613  0011                     	;# 
   614  0012                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  008E                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0099                     	;# 
   634  009A                     	;# 
   635  009B                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  010C                     	;# 
   641  010D                     	;# 
   642  010E                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0197                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  020D                     	;# 
   670  0210                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0216                     	;# 
   683  0216                     	;# 
   684  0217                     	;# 
   685  0217                     	;# 
   686  0291                     	;# 
   687  0291                     	;# 
   688  0292                     	;# 
   689  0293                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  0394                     	;# 
   695  0395                     	;# 
   696  0396                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0197                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019C                     	;# 
   776  019C                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  019F                     	;# 
   780  020D                     	;# 
   781  0210                     	;# 
   782  0211                     	;# 
   783  0211                     	;# 
   784  0212                     	;# 
   785  0212                     	;# 
   786  0213                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0291                     	;# 
   798  0291                     	;# 
   799  0292                     	;# 
   800  0293                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  0394                     	;# 
   806  0395                     	;# 
   807  0396                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0015                     	;# 
   838  0016                     	;# 
   839  0016                     	;# 
   840  0017                     	;# 
   841  0018                     	;# 
   842  0019                     	;# 
   843  001A                     	;# 
   844  001B                     	;# 
   845  001C                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0095                     	;# 
   853  0096                     	;# 
   854  0097                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010D                     	;# 
   864  010E                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0197                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0298                     	;# 
   913  0298                     	;# 
   914  0299                     	;# 
   915  029A                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000D                     	;# 
   944  000E                     	;# 
   945  0010                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0090                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0197                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019C                     	;# 
   999  019D                     	;# 
  1000  019E                     	;# 
  1001  019F                     	;# 
  1002  020D                     	;# 
  1003  0210                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0216                     	;# 
  1016  0216                     	;# 
  1017  0217                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0298                     	;# 
  1024  0298                     	;# 
  1025  0299                     	;# 
  1026  029A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0010                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  008C                     	;# 
  1069  008D                     	;# 
  1070  008E                     	;# 
  1071  0090                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  010C                     	;# 
  1085  010D                     	;# 
  1086  010E                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  011D                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019C                     	;# 
  1109  019C                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  020D                     	;# 
  1114  0210                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  000E                     	;# 
  1167  0010                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  008C                     	;# 
  1180  008D                     	;# 
  1181  008E                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  010E                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  011D                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0194                     	;# 
  1210  0195                     	;# 
  1211  0196                     	;# 
  1212  0197                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019C                     	;# 
  1221  019D                     	;# 
  1222  019E                     	;# 
  1223  019F                     	;# 
  1224  020D                     	;# 
  1225  0210                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  029A                     	;# 
  1249  0394                     	;# 
  1250  0395                     	;# 
  1251  0396                     	;# 
  1252  0FE4                     	;# 
  1253  0FE5                     	;# 
  1254  0FE6                     	;# 
  1255  0FE7                     	;# 
  1256  0FE8                     	;# 
  1257  0FE9                     	;# 
  1258  0FEA                     	;# 
  1259  0FEB                     	;# 
  1260  0FED                     	;# 
  1261  0FEE                     	;# 
  1262  0FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0011                     	;# 
  1280  0012                     	;# 
  1281  0015                     	;# 
  1282  0016                     	;# 
  1283  0016                     	;# 
  1284  0017                     	;# 
  1285  0018                     	;# 
  1286  0019                     	;# 
  1287  001A                     	;# 
  1288  001B                     	;# 
  1289  001C                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0095                     	;# 
  1297  0096                     	;# 
  1298  0097                     	;# 
  1299  0099                     	;# 
  1300  009A                     	;# 
  1301  009B                     	;# 
  1302  009B                     	;# 
  1303  009C                     	;# 
  1304  009D                     	;# 
  1305  009E                     	;# 
  1306  010C                     	;# 
  1307  010D                     	;# 
  1308  010E                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  011D                     	;# 
  1312  018C                     	;# 
  1313  018D                     	;# 
  1314  018E                     	;# 
  1315  0191                     	;# 
  1316  0191                     	;# 
  1317  0192                     	;# 
  1318  0193                     	;# 
  1319  0193                     	;# 
  1320  0194                     	;# 
  1321  0195                     	;# 
  1322  0196                     	;# 
  1323  0197                     	;# 
  1324  0199                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020D                     	;# 
  1336  0210                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0291                     	;# 
  1353  0291                     	;# 
  1354  0292                     	;# 
  1355  0293                     	;# 
  1356  0298                     	;# 
  1357  0298                     	;# 
  1358  0299                     	;# 
  1359  029A                     	;# 
  1360  0394                     	;# 
  1361  0395                     	;# 
  1362  0396                     	;# 
  1363  0FE4                     	;# 
  1364  0FE5                     	;# 
  1365  0FE6                     	;# 
  1366  0FE7                     	;# 
  1367  0FE8                     	;# 
  1368  0FE9                     	;# 
  1369  0FEA                     	;# 
  1370  0FEB                     	;# 
  1371  0FED                     	;# 
  1372  0FEE                     	;# 
  1373  0FEF                     	;# 
  1374  0000                     	;# 
  1375  0001                     	;# 
  1376  0002                     	;# 
  1377  0003                     	;# 
  1378  0004                     	;# 
  1379  0005                     	;# 
  1380  0006                     	;# 
  1381  0007                     	;# 
  1382  0008                     	;# 
  1383  0009                     	;# 
  1384  000A                     	;# 
  1385  000B                     	;# 
  1386  000C                     	;# 
  1387  000D                     	;# 
  1388  000E                     	;# 
  1389  0010                     	;# 
  1390  0011                     	;# 
  1391  0012                     	;# 
  1392  0015                     	;# 
  1393  0016                     	;# 
  1394  0016                     	;# 
  1395  0017                     	;# 
  1396  0018                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  008C                     	;# 
  1402  008D                     	;# 
  1403  008E                     	;# 
  1404  0090                     	;# 
  1405  0091                     	;# 
  1406  0092                     	;# 
  1407  0095                     	;# 
  1408  0096                     	;# 
  1409  0097                     	;# 
  1410  0099                     	;# 
  1411  009A                     	;# 
  1412  009B                     	;# 
  1413  009B                     	;# 
  1414  009C                     	;# 
  1415  009D                     	;# 
  1416  009E                     	;# 
  1417  010C                     	;# 
  1418  010D                     	;# 
  1419  010E                     	;# 
  1420  0116                     	;# 
  1421  0117                     	;# 
  1422  011D                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  019A                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019D                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  020D                     	;# 
  1447  0210                     	;# 
  1448  0211                     	;# 
  1449  0211                     	;# 
  1450  0212                     	;# 
  1451  0212                     	;# 
  1452  0213                     	;# 
  1453  0213                     	;# 
  1454  0214                     	;# 
  1455  0214                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0216                     	;# 
  1460  0216                     	;# 
  1461  0217                     	;# 
  1462  0217                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0298                     	;# 
  1468  0298                     	;# 
  1469  0299                     	;# 
  1470  029A                     	;# 
  1471  0394                     	;# 
  1472  0395                     	;# 
  1473  0396                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0010                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0090                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  011D                     	;# 
  1534  018C                     	;# 
  1535  018D                     	;# 
  1536  018E                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0194                     	;# 
  1543  0195                     	;# 
  1544  0196                     	;# 
  1545  0197                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020D                     	;# 
  1558  0210                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0298                     	;# 
  1579  0298                     	;# 
  1580  0299                     	;# 
  1581  029A                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0010                     	;# 
  1612  0011                     	;# 
  1613  0012                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  001B                     	;# 
  1622  001C                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0090                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0116                     	;# 
  1643  0117                     	;# 
  1644  011D                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0197                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019C                     	;# 
  1664  019C                     	;# 
  1665  019D                     	;# 
  1666  019E                     	;# 
  1667  019F                     	;# 
  1668  020D                     	;# 
  1669  0210                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0298                     	;# 
  1690  0298                     	;# 
  1691  0299                     	;# 
  1692  029A                     	;# 
  1693  0394                     	;# 
  1694  0395                     	;# 
  1695  0396                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0010                     	;# 
  1723  0011                     	;# 
  1724  0012                     	;# 
  1725  0015                     	;# 
  1726  0016                     	;# 
  1727  0016                     	;# 
  1728  0017                     	;# 
  1729  0018                     	;# 
  1730  0019                     	;# 
  1731  001A                     	;# 
  1732  001B                     	;# 
  1733  001C                     	;# 
  1734  008C                     	;# 
  1735  008D                     	;# 
  1736  008E                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0099                     	;# 
  1744  009A                     	;# 
  1745  009B                     	;# 
  1746  009B                     	;# 
  1747  009C                     	;# 
  1748  009D                     	;# 
  1749  009E                     	;# 
  1750  010C                     	;# 
  1751  010D                     	;# 
  1752  010E                     	;# 
  1753  0116                     	;# 
  1754  0117                     	;# 
  1755  011D                     	;# 
  1756  018C                     	;# 
  1757  018D                     	;# 
  1758  018E                     	;# 
  1759  0191                     	;# 
  1760  0191                     	;# 
  1761  0192                     	;# 
  1762  0193                     	;# 
  1763  0193                     	;# 
  1764  0194                     	;# 
  1765  0195                     	;# 
  1766  0196                     	;# 
  1767  0197                     	;# 
  1768  0199                     	;# 
  1769  019A                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019C                     	;# 
  1775  019C                     	;# 
  1776  019D                     	;# 
  1777  019E                     	;# 
  1778  019F                     	;# 
  1779  020D                     	;# 
  1780  0210                     	;# 
  1781  0211                     	;# 
  1782  0211                     	;# 
  1783  0212                     	;# 
  1784  0212                     	;# 
  1785  0213                     	;# 
  1786  0213                     	;# 
  1787  0214                     	;# 
  1788  0214                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0216                     	;# 
  1793  0216                     	;# 
  1794  0217                     	;# 
  1795  0217                     	;# 
  1796  0291                     	;# 
  1797  0291                     	;# 
  1798  0292                     	;# 
  1799  0293                     	;# 
  1800  0298                     	;# 
  1801  0298                     	;# 
  1802  0299                     	;# 
  1803  029A                     	;# 
  1804  0394                     	;# 
  1805  0395                     	;# 
  1806  0396                     	;# 
  1807  0FE4                     	;# 
  1808  0FE5                     	;# 
  1809  0FE6                     	;# 
  1810  0FE7                     	;# 
  1811  0FE8                     	;# 
  1812  0FE9                     	;# 
  1813  0FEA                     	;# 
  1814  0FEB                     	;# 
  1815  0FED                     	;# 
  1816  0FEE                     	;# 
  1817  0FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0011                     	;# 
  1835  0012                     	;# 
  1836  0015                     	;# 
  1837  0016                     	;# 
  1838  0016                     	;# 
  1839  0017                     	;# 
  1840  0018                     	;# 
  1841  0019                     	;# 
  1842  001A                     	;# 
  1843  001B                     	;# 
  1844  001C                     	;# 
  1845  008C                     	;# 
  1846  008D                     	;# 
  1847  008E                     	;# 
  1848  0090                     	;# 
  1849  0091                     	;# 
  1850  0092                     	;# 
  1851  0095                     	;# 
  1852  0096                     	;# 
  1853  0097                     	;# 
  1854  0099                     	;# 
  1855  009A                     	;# 
  1856  009B                     	;# 
  1857  009B                     	;# 
  1858  009C                     	;# 
  1859  009D                     	;# 
  1860  009E                     	;# 
  1861  010C                     	;# 
  1862  010D                     	;# 
  1863  010E                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  011D                     	;# 
  1867  018C                     	;# 
  1868  018D                     	;# 
  1869  018E                     	;# 
  1870  0191                     	;# 
  1871  0191                     	;# 
  1872  0192                     	;# 
  1873  0193                     	;# 
  1874  0193                     	;# 
  1875  0194                     	;# 
  1876  0195                     	;# 
  1877  0196                     	;# 
  1878  0197                     	;# 
  1879  0199                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  019C                     	;# 
  1887  019D                     	;# 
  1888  019E                     	;# 
  1889  019F                     	;# 
  1890  020D                     	;# 
  1891  0210                     	;# 
  1892  0211                     	;# 
  1893  0211                     	;# 
  1894  0212                     	;# 
  1895  0212                     	;# 
  1896  0213                     	;# 
  1897  0213                     	;# 
  1898  0214                     	;# 
  1899  0214                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0216                     	;# 
  1904  0216                     	;# 
  1905  0217                     	;# 
  1906  0217                     	;# 
  1907  0291                     	;# 
  1908  0291                     	;# 
  1909  0292                     	;# 
  1910  0293                     	;# 
  1911  0298                     	;# 
  1912  0298                     	;# 
  1913  0299                     	;# 
  1914  029A                     	;# 
  1915  0394                     	;# 
  1916  0395                     	;# 
  1917  0396                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  008C                     	;# 
  1957  008D                     	;# 
  1958  008E                     	;# 
  1959  0090                     	;# 
  1960  0091                     	;# 
  1961  0092                     	;# 
  1962  0095                     	;# 
  1963  0096                     	;# 
  1964  0097                     	;# 
  1965  0099                     	;# 
  1966  009A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  011D                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020D                     	;# 
  2002  0210                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0216                     	;# 
  2015  0216                     	;# 
  2016  0217                     	;# 
  2017  0217                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0298                     	;# 
  2023  0298                     	;# 
  2024  0299                     	;# 
  2025  029A                     	;# 
  2026  0394                     	;# 
  2027  0395                     	;# 
  2028  0396                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040  0000                     	;# 
  2041  0001                     	;# 
  2042  0002                     	;# 
  2043  0003                     	;# 
  2044  0004                     	;# 
  2045  0005                     	;# 
  2046  0006                     	;# 
  2047  0007                     	;# 
  2048  0008                     	;# 
  2049  0009                     	;# 
  2050  000A                     	;# 
  2051  000B                     	;# 
  2052  000C                     	;# 
  2053  000D                     	;# 
  2054  000E                     	;# 
  2055  0010                     	;# 
  2056  0011                     	;# 
  2057  0012                     	;# 
  2058  0015                     	;# 
  2059  0016                     	;# 
  2060  0016                     	;# 
  2061  0017                     	;# 
  2062  0018                     	;# 
  2063  0019                     	;# 
  2064  001A                     	;# 
  2065  001B                     	;# 
  2066  001C                     	;# 
  2067  008C                     	;# 
  2068  008D                     	;# 
  2069  008E                     	;# 
  2070  0090                     	;# 
  2071  0091                     	;# 
  2072  0092                     	;# 
  2073  0095                     	;# 
  2074  0096                     	;# 
  2075  0097                     	;# 
  2076  0099                     	;# 
  2077  009A                     	;# 
  2078  009B                     	;# 
  2079  009B                     	;# 
  2080  009C                     	;# 
  2081  009D                     	;# 
  2082  009E                     	;# 
  2083  010C                     	;# 
  2084  010D                     	;# 
  2085  010E                     	;# 
  2086  0116                     	;# 
  2087  0117                     	;# 
  2088  011D                     	;# 
  2089  018C                     	;# 
  2090  018D                     	;# 
  2091  018E                     	;# 
  2092  0191                     	;# 
  2093  0191                     	;# 
  2094  0192                     	;# 
  2095  0193                     	;# 
  2096  0193                     	;# 
  2097  0194                     	;# 
  2098  0195                     	;# 
  2099  0196                     	;# 
  2100  0197                     	;# 
  2101  0199                     	;# 
  2102  019A                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019B                     	;# 
  2106  019B                     	;# 
  2107  019C                     	;# 
  2108  019C                     	;# 
  2109  019D                     	;# 
  2110  019E                     	;# 
  2111  019F                     	;# 
  2112  020D                     	;# 
  2113  0210                     	;# 
  2114  0211                     	;# 
  2115  0211                     	;# 
  2116  0212                     	;# 
  2117  0212                     	;# 
  2118  0213                     	;# 
  2119  0213                     	;# 
  2120  0214                     	;# 
  2121  0214                     	;# 
  2122  0215                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0216                     	;# 
  2126  0216                     	;# 
  2127  0217                     	;# 
  2128  0217                     	;# 
  2129  0291                     	;# 
  2130  0291                     	;# 
  2131  0292                     	;# 
  2132  0293                     	;# 
  2133  0298                     	;# 
  2134  0298                     	;# 
  2135  0299                     	;# 
  2136  029A                     	;# 
  2137  0394                     	;# 
  2138  0395                     	;# 
  2139  0396                     	;# 
  2140  0FE4                     	;# 
  2141  0FE5                     	;# 
  2142  0FE6                     	;# 
  2143  0FE7                     	;# 
  2144  0FE8                     	;# 
  2145  0FE9                     	;# 
  2146  0FEA                     	;# 
  2147  0FEB                     	;# 
  2148  0FED                     	;# 
  2149  0FEE                     	;# 
  2150  0FEF                     	;# 
  2151                           
  2152                           	psect	idataBANK4
  2153  10DB                     __pidataBANK4:	
  2154                           
  2155                           ;initializer for __product
  2156  10DB  3463               	retlw	99
  2157  10DC  3402               	retlw	2
  2158  10DD  3400               	retlw	0
  2159  10DE  3400               	retlw	0
  2160  10DF  3400               	retlw	0
  2161  10E0  3400               	retlw	0
  2162  10E1  3400               	retlw	0
  2163  10E2  3400               	retlw	0
  2164  10E3  3400               	retlw	0
  2165  10E4  3400               	retlw	0
  2166  10E5  3400               	retlw	0
  2167  10E6  3400               	retlw	0
  2168  10E7  34FF               	retlw	255
  2169  10E8  34FF               	retlw	255
  2170  10E9  34FF               	retlw	255
  2171  10EA  3400               	retlw	0
  2172  10EB  3400               	retlw	0
  2173  10EC  3400               	retlw	0
  2174  10ED  3400               	retlw	0
  2175  10EE  3400               	retlw	0
  2176  10EF  3400               	retlw	0
  2177  10F0  3400               	retlw	0
  2178  10F1  3400               	retlw	0
  2179  10F2  3400               	retlw	0
  2180  10F3  3400               	retlw	0
  2181  10F4  3400               	retlw	0
  2182  10F5  3400               	retlw	0
  2183  10F6  3400               	retlw	0
  2184  10F7  3400               	retlw	0
  2185  10F8  3400               	retlw	0
  2186  10F9  3400               	retlw	0
  2187  10FA  3400               	retlw	0
  2188                           
  2189                           	psect	stringtext
  2190  1000                     __pstringtext:	
  2191  1000                     _CC2500_registers_address:	
  2192  1000  3403               	retlw	3
  2193  1001  3416               	retlw	22
  2194  1002  3417               	retlw	23
  2195  1003  341E               	retlw	30
  2196  1004  341F               	retlw	31
  2197  1005  3420               	retlw	32
  2198  1006  342A               	retlw	42
  2199  1007  342B               	retlw	43
  2200  1008  340B               	retlw	11
  2201  1009  340C               	retlw	12
  2202  100A  340D               	retlw	13
  2203  100B  340E               	retlw	14
  2204  100C  340F               	retlw	15
  2205  100D  3410               	retlw	16
  2206  100E  3411               	retlw	17
  2207  100F  3412               	retlw	18
  2208  1010  3413               	retlw	19
  2209  1011  3414               	retlw	20
  2210  1012  340A               	retlw	10
  2211  1013  3415               	retlw	21
  2212  1014  3421               	retlw	33
  2213  1015  3422               	retlw	34
  2214  1016  3418               	retlw	24
  2215  1017  3419               	retlw	25
  2216  1018  341A               	retlw	26
  2217  1019  341B               	retlw	27
  2218  101A  341C               	retlw	28
  2219  101B  341D               	retlw	29
  2220  101C  3423               	retlw	35
  2221  101D  3424               	retlw	36
  2222  101E  3425               	retlw	37
  2223  101F  3426               	retlw	38
  2224  1020  3429               	retlw	41
  2225  1021  342C               	retlw	44
  2226  1022  342D               	retlw	45
  2227  1023  342E               	retlw	46
  2228  1024  3400               	retlw	0
  2229  1025  3401               	retlw	1
  2230  1026  3402               	retlw	2
  2231  1027  3407               	retlw	7
  2232  1028  3408               	retlw	8
  2233  1029  3409               	retlw	9
  2234  102A  3406               	retlw	6
  2235  102B  3404               	retlw	4
  2236  102C  3405               	retlw	5
  2237  102D  3427               	retlw	39
  2238  102E  3428               	retlw	40
  2239  102F                     __end_of_CC2500_registers_address:	
  2240  102F                     _CC2500_rfSettings:	
  2241  102F  3407               	retlw	7
  2242  1030  3407               	retlw	7
  2243  1031  3430               	retlw	48
  2244  1032  3487               	retlw	135
  2245  1033  346B               	retlw	107
  2246  1034  34F8               	retlw	248
  2247  1035  347F               	retlw	127
  2248  1036  343F               	retlw	63
  2249  1037  3409               	retlw	9
  2250  1038  3400               	retlw	0
  2251  1039  345C               	retlw	92
  2252  103A  34A7               	retlw	167
  2253  103B  3462               	retlw	98
  2254  103C  3486               	retlw	134
  2255  103D  3483               	retlw	131
  2256  103E  3403               	retlw	3
  2257  103F  3422               	retlw	34
  2258  1040  34F8               	retlw	248
  2259  1041  3400               	retlw	0
  2260  1042  3444               	retlw	68
  2261  1043  34B6               	retlw	182
  2262  1044  3410               	retlw	16
  2263  1045  3418               	retlw	24
  2264  1046  341D               	retlw	29
  2265  1047  341C               	retlw	28
  2266  1048  34C7               	retlw	199
  2267  1049  3400               	retlw	0
  2268  104A  34B2               	retlw	178
  2269  104B  34EA               	retlw	234
  2270  104C  340A               	retlw	10
  2271  104D  3400               	retlw	0
  2272  104E  3411               	retlw	17
  2273  104F  3459               	retlw	89
  2274  1050  3488               	retlw	136
  2275  1051  3431               	retlw	49
  2276  1052  340B               	retlw	11
  2277  1053  342F               	retlw	47
  2278  1054  342E               	retlw	46
  2279  1055  3406               	retlw	6
  2280  1056  3404               	retlw	4
  2281  1057  3405               	retlw	5
  2282  1058  3400               	retlw	0
  2283  1059  3430               	retlw	48
  2284  105A  34D3               	retlw	211
  2285  105B  3491               	retlw	145
  2286  105C  3441               	retlw	65
  2287  105D  3400               	retlw	0
  2288  105E                     __end_of_CC2500_rfSettings:	
  2289  105E                     _CC2500_patable_vaule:	
  2290  105E  34FE               	retlw	254
  2291  105F  34FE               	retlw	254
  2292  1060  34FE               	retlw	254
  2293  1061  34FE               	retlw	254
  2294  1062  34FE               	retlw	254
  2295  1063  34FE               	retlw	254
  2296  1064  34FE               	retlw	254
  2297  1065  34FE               	retlw	254
  2298  1066                     __end_of_CC2500_patable_vaule:	
  2299                           
  2300                           	psect	nvBANK0
  2301  006E                     __pnvBANK0:	
  2302  006E                     _product:	
  2303  006E                     	ds	1
  2304  000C                     _PORTA	set	12
  2305  000D                     _PORTB	set	13
  2306  000E                     _PORTC	set	14
  2307  0018                     _T1CON	set	24
  2308  0017                     _TMR1H	set	23
  2309  0016                     _TMR1L	set	22
  2310  005F                     _GIE	set	95
  2311  005B                     _IOCIE	set	91
  2312  0058                     _IOCIF	set	88
  2313  005E                     _PEIE	set	94
  2314  0060                     _RA0	set	96
  2315  0064                     _RA4	set	100
  2316  0066                     _RA6	set	102
  2317  0067                     _RA7	set	103
  2318  0068                     _RB0	set	104
  2319  0069                     _RB1	set	105
  2320  006A                     _RB2	set	106
  2321  006B                     _RB3	set	107
  2322  006D                     _RB5	set	109
  2323  0070                     _RC0	set	112
  2324  0071                     _RC1	set	113
  2325  0073                     _RC3	set	115
  2326  0074                     _RC4	set	116
  2327  0075                     _RC5	set	117
  2328  0088                     _TMR1IF	set	136
  2329  009D                     _ADCON0	set	157
  2330  009E                     _ADCON1	set	158
  2331  009C                     _ADRESH	set	156
  2332  009B                     _ADRESL	set	155
  2333  0099                     _OSCCON	set	153
  2334  008C                     _TRISA	set	140
  2335  008D                     _TRISB	set	141
  2336  008E                     _TRISC	set	142
  2337  0097                     _WDTCON	set	151
  2338  04E9                     _GO_nDONE	set	1257
  2339  0488                     _TMR1IE	set	1160
  2340  0117                     _FVRCON	set	279
  2341  010C                     _LATA	set	268
  2342  010D                     _LATB	set	269
  2343  010E                     _LATC	set	270
  2344  018C                     _ANSELA	set	396
  2345  018D                     _ANSELB	set	397
  2346  018E                     _ANSELC	set	398
  2347  0192                     _PMADRH	set	402
  2348  0191                     _PMADRL	set	401
  2349  0196                     _PMCON2	set	406
  2350  0194                     _PMDATH	set	404
  2351  0193                     _PMDATL	set	403
  2352  0CAE                     _CFGS	set	3246
  2353  0CAC                     _FREE	set	3244
  2354  0CAD                     _LWLO	set	3245
  2355  0CA8                     _RD	set	3240
  2356  0CA9                     _WR	set	3241
  2357  0CAA                     _WREN	set	3242
  2358  1069                     _WPUB1	set	4201
  2359  106A                     _WPUB2	set	4202
  2360  0396                     _IOCBF	set	918
  2361  0395                     _IOCBN	set	917
  2362  0394                     _IOCBP	set	916
  2363  1CB2                     _IOCBF2	set	7346
  2364                           
  2365                           ; #config settings
  2366  0000                     
  2367                           	psect	cinit
  2368  0015                     start_initialization:	
  2369  0015                     __initialization:	
  2370                           
  2371                           ; Clear objects allocated to BITCOMMON
  2372  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2373                           
  2374                           ; Clear objects allocated to COMMON
  2375  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2376  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2377  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2378  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2379  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2380                           
  2381                           ; Clear objects allocated to BANK0
  2382  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2383                           
  2384                           ; Clear objects allocated to BANK1
  2385  001C  30A0               	movlw	low __pbssBANK1
  2386  001D  0084               	movwf	4
  2387  001E  3000               	movlw	high __pbssBANK1
  2388  001F  0085               	movwf	5
  2389  0020  3048               	movlw	72
  2390  0021  319C  24F6  3180   	fcall	clear_ram0
  2391                           
  2392                           ; Clear objects allocated to BANK2
  2393  0024  3020               	movlw	low __pbssBANK2
  2394  0025  0084               	movwf	4
  2395  0026  3001               	movlw	high __pbssBANK2
  2396  0027  0085               	movwf	5
  2397  0028  3050               	movlw	80
  2398  0029  319C  24F6  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK3
  2401  002C  30A0               	movlw	low __pbssBANK3
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK3
  2404  002F  0085               	movwf	5
  2405  0030  3046               	movlw	70
  2406  0031  319C  24F6  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Initialize objects allocated to BANK4
  2409  0034  30DB               	movlw	low __pidataBANK4
  2410  0035  0084               	movwf	4
  2411  0036  3090               	movlw	(high __pidataBANK4)| (0+128)
  2412  0037  0085               	movwf	5
  2413  0038  3020               	movlw	low __pdataBANK4
  2414  0039  0086               	movwf	6
  2415  003A  3002               	movlw	high __pdataBANK4
  2416  003B  0087               	movwf	7
  2417  003C  3020               	movlw	32
  2418  003D  319C  24F0         	fcall	init_ram
  2419  003F                     end_of_initialization:	
  2420                           ;End of C runtime variable initialization code
  2421                           
  2422  003F                     __end_of__initialization:	
  2423  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2424  0040  0020               	movlb	0
  2425  0041  3197  2F4F         	ljmp	_main	;jump to C main() function
  2426                           
  2427                           	psect	bitbssCOMMON
  2428  03E8                     __pbitbssCOMMON:	
  2429  03E8                     _Receive_OK:	
  2430  03E8                     	ds	1
  2431  03E9                     _Transceive_OK:	
  2432  03E9                     	ds	1
  2433                           
  2434                           	psect	bssCOMMON
  2435  0078                     __pbssCOMMON:	
  2436  0078                     _DelayOff:	
  2437  0078                     	ds	1
  2438  0079                     _DimmerLightsIntr:	
  2439  0079                     	ds	1
  2440  007A                     _LED:	
  2441  007A                     	ds	1
  2442  007B                     _SPI0Buffer:	
  2443  007B                     	ds	1
  2444  007C                     _Sw:	
  2445  007C                     	ds	1
  2446                           
  2447                           	psect	bssBANK0
  2448  006F                     __pbssBANK0:	
  2449  006F                     _DimmerLights:	
  2450  006F                     	ds	1
  2451                           
  2452                           	psect	bssBANK1
  2453  00A0                     __pbssBANK1:	
  2454  00A0                     _myMain:	
  2455  00A0                     	ds	15
  2456  00AF                     _Buz1:	
  2457  00AF                     	ds	12
  2458  00BB                     _RF1:	
  2459  00BB                     	ds	12
  2460  00C7                     _Timer1:	
  2461  00C7                     	ds	3
  2462  00CA                     _WDT:	
  2463  00CA                     	ds	2
  2464  00CC                     _CRC:	
  2465  00CC                     	ds	1
  2466  00CD                     _DimmerLights11:	
  2467  00CD                     	ds	1
  2468  00CE                     _DimmerLightsIntrIOC:	
  2469  00CE                     	ds	1
  2470  00CF                     _RSSI:	
  2471  00CF                     	ds	1
  2472  00D0                     _Rx_Length:	
  2473  00D0                     	ds	1
  2474  00D1                     _SwDetect:	
  2475  00D1                     	ds	1
  2476  00D2                     _Tx_Length:	
  2477  00D2                     	ds	1
  2478  00D3                     _r_address:	
  2479  00D3                     	ds	1
  2480  00D4                     _r_data:	
  2481  00D4                     	ds	1
  2482  00D5                     _s_data:	
  2483  00D5                     	ds	1
  2484  00D6                     _Temp:	
  2485  00D6                     	ds	18
  2486                           
  2487                           	psect	bssBANK2
  2488  0120                     __pbssBANK2:	
  2489  0120                     _RF_Data:	
  2490  0120                     	ds	30
  2491  013E                     _Dimmer:	
  2492  013E                     	ds	3
  2493  0141                     _RF_Count:	
  2494  0141                     	ds	2
  2495  0143                     _Load:	
  2496  0143                     	ds	45
  2497                           
  2498                           	psect	bssBANK3
  2499  01A0                     __pbssBANK3:	
  2500  01A0                     _Memory:	
  2501  01A0                     	ds	37
  2502  01C5                     _DimmerLights1:	
  2503  01C5                     	ds	15
  2504  01D4                     _Sw1:	
  2505  01D4                     	ds	9
  2506  01DD                     _DlySw1:	
  2507  01DD                     	ds	5
  2508  01E2                     _VarErrLED:	
  2509  01E2                     	ds	4
  2510                           
  2511                           	psect	dataBANK4
  2512  0220                     __pdataBANK4:	
  2513  0220                     __product:	
  2514  0220                     	ds	32
  2515                           
  2516                           	psect	clrtext
  2517  1CF6                     clear_ram0:	
  2518                           ;	Called with FSR0 containing the base address, and
  2519                           ;	WREG with the size to clear
  2520                           
  2521  1CF6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2522  1CF7                     clrloop0:	
  2523  1CF7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2524  1CF8  3101               	addfsr 0,1
  2525  1CF9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2526  1CFA  2CF7               	goto	clrloop0	;have we reached the end yet?
  2527  1CFB  3400               	retlw	0	;all done for this memory range, return
  2528                           
  2529                           	psect	inittext
  2530  1CF0                     init_ram:	
  2531  1CF0  00FE               	movwf	126
  2532  1CF1                     initloop:	
  2533  1CF1  0012               	moviw fsr0++
  2534  1CF2  001E               	movwi fsr1++
  2535  1CF3  0BFE               	decfsz	126,f
  2536  1CF4  2CF1               	goto	initloop
  2537  1CF5  3400               	retlw	0
  2538                           
  2539                           	psect	cstackBANK1
  2540  00E8                     __pcstackBANK1:	
  2541  00E8                     setRF_Main@loop_f:	
  2542                           
  2543                           ; 1 bytes @ 0x0
  2544  00E8                     	ds	1
  2545  00E9                     setRF_Main@Receive_OK:	
  2546                           
  2547                           ; 1 bytes @ 0x1
  2548  00E9                     	ds	1
  2549  00EA                     setRF_Main@error:	
  2550                           
  2551                           ; 1 bytes @ 0x2
  2552  00EA                     	ds	1
  2553  00EB                     ?_main:	
  2554  00EB                     main@argc:	
  2555                           ; 2 bytes @ 0x3
  2556                           
  2557                           
  2558                           ; 2 bytes @ 0x3
  2559  00EB                     	ds	2
  2560  00ED                     main@argv:	
  2561                           
  2562                           ; 2 bytes @ 0x5
  2563  00ED                     	ds	2
  2564                           
  2565                           	psect	cstackCOMMON
  2566  0070                     __pcstackCOMMON:	
  2567  0070                     ?_Timeout_Counter:	
  2568  0070                     ?_set_TimeoutCleared:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_CC2500_WriteByte:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_CC2500_WriteCommand:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_CC2500_PowerRST:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_CC2500_InitSetREG:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_CC2500_InitPATable:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_CC2500_ClearTXFIFO:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_CC2500_ClearRXFIFO:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_CC2500_FrequencyCabr:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_CC2500_SIDLEMode:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_DlyOff_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_DlyOff_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_setDimmerLights_ErrorClose:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setDimmerLights_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_Dimmer_Initialization:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setDimmerLights_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setDimmerLights_Line:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_setTxData:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setLED_Initialization:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setLED_Main:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_Fosc_Set:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_IO_Set:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_TMR1_Set:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_ADC_Set:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_IOC_Set:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_WDT_Set:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_IOC_ISR:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_TMR1_ISR:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_Flash_Memory_Write:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_Flash_Memory_Modify:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_WDT_Clearing:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_myMain_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Temp_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_Load_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Switch_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_RF_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_getLoad_AD:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_getTemp_AD:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_my_MainTimer:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Temp_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Load_Main:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Switch_Main:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_RF_Main:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLoad_AH_AL_Restore:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setTemp_Initialization:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_setTemp_Main:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_setRF_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setRF_Main:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_RF_RxDisable:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_getRxData:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setLog_Code:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_setControl_Lights_Table:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setRFSW_Control:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setRFSW_AdjControl:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_setRF_DimmerValue:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_setSw_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setSw_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Buzzer_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Buzzer_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_CC2500_TxData:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_CC2500_PowerOnInitial:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_DelayOffPointSelect:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_DelayOff_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_DelayOff_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_DimmerIntrIOCPointSelect:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ??_DimmerIntrIOCPointSelect:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_DimmerIntrPointSelect:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ??_DimmerIntrPointSelect:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setDimmerLights_IntrControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_DimmerLightsPointSelect:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DimmerLights_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_DimmerLights_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setDimmerLights_SwOn:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setDimmerLights_SwOff:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setDimmerLights_AdjControl:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setDimmerLights_AdjRF:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_LedPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_LED_Initialization:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_LED_Main:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_Mcu_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_ISR:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_setDimmerReClock:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Flash_Memory_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_Flash_Memory_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_Flash_Memory_Unlock:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_Flash_Memory_Erasing:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_setMemory_Modify:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_setMemory_LoopSave:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_WDT_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_setMain_Exception:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setRF_Learn:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_TouchPower:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_SwPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_DelayTimejudge:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_getMain_All_Error_Status:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_getLoad_OK:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_getMain_LightsStatus:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_setPercentValue:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_getPercentValue:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Read:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_getRF_KeyStatus:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_getSw_KeyStatus:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_getDelayOff_GO:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_getDimmerLights_Status:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_getAll_DimmerLights_AdjGO:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_getDimmer_LoadOK:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getDimmerLights_Line:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getMain_Lights_Count:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getMain_LoadOK:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     getSw_KeyStatus@sw:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0x0
  2903  0070                     	ds	1
  2904  0071                     DimmerIntrIOCPointSelect@lights:	
  2905  0071                     DimmerIntrPointSelect@lights:	
  2906                           ; 1 bytes @ 0x1
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x1
  2910  0071                     	ds	1
  2911  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2912  0072                     ??_setDimmerLights_IntrControl:	
  2913                           ; 0 bytes @ 0x2
  2914                           
  2915  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2916                           ; 0 bytes @ 0x2
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x2
  2920  0072                     	ds	1
  2921  0073                     ??_IOC_ISR:	
  2922  0073                     ??_setDimmerReClock:	
  2923                           ; 0 bytes @ 0x3
  2924                           
  2925                           
  2926                           ; 0 bytes @ 0x3
  2927  0073                     	ds	3
  2928  0076                     setDimmerLights_IntrControl@lights:	
  2929                           
  2930                           ; 1 bytes @ 0x6
  2931  0076                     	ds	1
  2932  0077                     ??_TMR1_ISR:	
  2933  0077                     ??_ISR:	
  2934                           ; 0 bytes @ 0x7
  2935                           
  2936                           
  2937                           ; 0 bytes @ 0x7
  2938  0077                     	ds	1
  2939                           
  2940                           	psect	cstackBANK0
  2941  0020                     __pcstackBANK0:	
  2942  0020                     ??_Timeout_Counter:	
  2943  0020                     ??_set_TimeoutCleared:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ??_CC2500_WriteByte:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ?_DelayTime_1us:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_Dimmer_Initialization:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_getMain_All_Error_Status:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_getLoad_OK:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_setDimmerLights_Line:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ?_setRF_DimmerLights:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setTxData:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Fosc_Set:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_IO_Set:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_TMR1_Set:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_ADC_Set:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_IOC_Set:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_WDT_Set:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_Flash_Memory_Read:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ?_setMemory_Data:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_Flash_Memory_Write:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_WDT_Clearing:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_myMain_Initialization:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_Temp_Initialization:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_setLoad_AH_AL_Restore:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_setTemp_Initialization:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_setRF_Initialization:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getRF_KeyStatus:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_getSw_KeyStatus:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_Buzzer_Initialization:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_Buzzer_Main:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_DelayOffPointSelect:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_DimmerLightsPointSelect:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_getAll_DimmerLights_AdjGO:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_getDimmer_LoadOK:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_getDimmerLights_Line:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_LedPointSelect:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_Flash_Memory_Unlock:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Flash_Memory_Erasing:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setMemory_Modify:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setMemory_LoopSave:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_WDT_Main:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_getMain_Lights_Count:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setRF_Learn:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_TouchPower:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_SwPointSelect:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ?___bmul:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ?_getBuz_GO:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0020                     ?_getAD:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081  0020                     ?___awdiv:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084  0020                     ?___ftpack:	
  3085                           ; 2 bytes @ 0x0
  3086                           
  3087  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3088                           ; 3 bytes @ 0x0
  3089                           
  3090  0020                     getDimmer_LoadOK@status:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     setDimmerLights_Line@lights:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0020                     getDimmerLights_Line@line:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0020                     getAD@adcon1:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0020                     setMemory_Data@data:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0020                     getMain_Lights_Count@count:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0020                     getLoad_OK@ok:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0020                     setRF_DimmerLights@on:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0020                     ___bmul@multiplicand:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0020                     DelayTime_1us@count:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     ___awdiv@divisor:	
  3121                           ; 2 bytes @ 0x0
  3122                           
  3123  0020                     ___ftpack@arg:	
  3124                           ; 2 bytes @ 0x0
  3125                           
  3126                           
  3127                           ; 3 bytes @ 0x0
  3128  0020                     	ds	1
  3129  0021                     ??_setRF_DimmerLights:	
  3130  0021                     ??_setMemory_Data:	
  3131                           ; 0 bytes @ 0x1
  3132                           
  3133  0021                     ??_RF_Initialization:	
  3134                           ; 0 bytes @ 0x1
  3135                           
  3136  0021                     ??_Mcu_Initialization:	
  3137                           ; 0 bytes @ 0x1
  3138                           
  3139  0021                     ??_getMain_LoadOK:	
  3140                           ; 0 bytes @ 0x1
  3141                           
  3142  0021                     ??___bmul:	
  3143                           ; 0 bytes @ 0x1
  3144                           
  3145  0021                     CC2500_WriteByte@loop_a:	
  3146                           ; 0 bytes @ 0x1
  3147                           
  3148  0021                     DelayOffPointSelect@sw:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0021                     DimmerLightsPointSelect@lights:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0021                     LedPointSelect@led:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0021                     Flash_Memory_Read@i:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0021                     Flash_Memory_Write@i:	
  3161                           ; 1 bytes @ 0x1
  3162                           
  3163  0021                     setMemory_Modify@command:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166  0021                     setMemory_LoopSave@command:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0021                     getMain_Lights_Count@status2:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0021                     setLoad_AH_AL_Restore@i:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0021                     setRF_Learn@command:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0021                     getRF_KeyStatus@key:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0021                     SwPointSelect@sw:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184  0021                     getSw_KeyStatus@status:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187  0021                     _getMain_All_Error_Status$3748:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x1
  3192  0021                     	ds	1
  3193  0022                     ??_CC2500_WriteCommand:	
  3194  0022                     ??_DelayTime_1us:	
  3195                           ; 0 bytes @ 0x2
  3196                           
  3197  0022                     ?_CC2500_WriteREG:	
  3198                           ; 0 bytes @ 0x2
  3199                           
  3200  0022                     ??_DlyOff_Initialization:	
  3201                           ; 0 bytes @ 0x2
  3202                           
  3203  0022                     ??_setDimmerLights_Initialization:	
  3204                           ; 0 bytes @ 0x2
  3205                           
  3206  0022                     ?_setDimmerLights_Trigger:	
  3207                           ; 0 bytes @ 0x2
  3208                           
  3209  0022                     ?_setDimmerLights_TriggerAdj:	
  3210                           ; 0 bytes @ 0x2
  3211                           
  3212  0022                     ?_setLED:	
  3213                           ; 0 bytes @ 0x2
  3214                           
  3215  0022                     ??_setLED_Main:	
  3216                           ; 0 bytes @ 0x2
  3217                           
  3218  0022                     ??_Load_Initialization:	
  3219                           ; 0 bytes @ 0x2
  3220                           
  3221  0022                     ??_getBuz_GO:	
  3222                           ; 0 bytes @ 0x2
  3223                           
  3224  0022                     ??_getDelayOff_GO:	
  3225                           ; 0 bytes @ 0x2
  3226                           
  3227  0022                     ??_getDimmerLights_Status:	
  3228                           ; 0 bytes @ 0x2
  3229                           
  3230  0022                     CC2500_WriteREG@value:	
  3231                           ; 0 bytes @ 0x2
  3232                           
  3233  0022                     DlyOff_Initialization@sw:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     getDelayOff_GO@sw:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     getDimmerLights_Status@lights:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     setDimmerLights_Trigger@command:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0022                     setDimmerLights_TriggerAdj@command:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0022                     setLED@command:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0022                     Flash_Memory_Read@address:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0022                     setMemory_Data@address:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     getMain_Lights_Count@status3:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     getMain_LoadOK@ok:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     _getRF_KeyStatus$5489:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     _getSw_KeyStatus$6545:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     ___bmul@product:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     DelayTime_1us@i:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     ___awdiv@dividend:	
  3276                           ; 2 bytes @ 0x2
  3277                           
  3278                           
  3279                           ; 2 bytes @ 0x2
  3280  0022                     	ds	1
  3281  0023                     ??_CC2500_WriteREG:	
  3282  0023                     ??_setDimmerLights_Trigger:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0023                     ??_setDimmerLights_TriggerAdj:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0023                     ??_setLED:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     ??_DelayOff_Initialization:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     ??_getAD:	
  3295                           ; 0 bytes @ 0x3
  3296                           
  3297  0023                     CC2500_WriteCommand@command:	
  3298                           ; 0 bytes @ 0x3
  3299                           
  3300  0023                     getDelayOff_GO@go:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0023                     setDimmerLights_Initialization@lights:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0023                     getDimmerLights_Status@status:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0023                     setLED@led:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0023                     getAD@adcon0:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0023                     Flash_Memory_Read@ret:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0023                     getMain_Lights_Count@status1:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0023                     setRF_DimmerLights@status:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     ___bmul@multiplier:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     ___ftpack@exp:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     _getMain_All_Error_Status$3757:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333                           
  3334                           ; 2 bytes @ 0x3
  3335  0023                     	ds	1
  3336  0024                     ??_CC2500_ClearTXFIFO:	
  3337  0024                     ??_CC2500_ClearRXFIFO:	
  3338                           ; 0 bytes @ 0x4
  3339                           
  3340  0024                     ??_CC2500_SIDLEMode:	
  3341                           ; 0 bytes @ 0x4
  3342                           
  3343  0024                     ??_DelayTimejudge:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0024                     ??_getMain_LightsStatus:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0024                     ??_setLED_Initialization:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0024                     ??_Flash_Memory_Modify:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0024                     ??_getLoad_AD:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0024                     ??_getTemp_AD:	
  3359                           ; 0 bytes @ 0x4
  3360                           
  3361  0024                     ??_RF_RxDisable:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_setSw_Initialization:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_CC2500_TxData:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_DimmerLights_Initialization:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??___awdiv:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     CC2500_WriteREG@w_addr:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     setDimmerLights_Trigger@lights:	
  3380                           ; 1 bytes @ 0x4
  3381                           
  3382  0024                     setDimmerLights_TriggerAdj@lights:	
  3383                           ; 1 bytes @ 0x4
  3384                           
  3385  0024                     setLED_Initialization@led:	
  3386                           ; 1 bytes @ 0x4
  3387                           
  3388  0024                     setLED_Main@led:	
  3389                           ; 1 bytes @ 0x4
  3390                           
  3391  0024                     setRF_DimmerLights@lights:	
  3392                           ; 1 bytes @ 0x4
  3393                           
  3394  0024                     setSw_Initialization@sw:	
  3395                           ; 1 bytes @ 0x4
  3396                           
  3397  0024                     ___ftpack@sign:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0024                     getBuz_GO@i:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0024                     DelayTime_1us@j:	
  3404                           ; 2 bytes @ 0x4
  3405                           
  3406                           
  3407                           ; 2 bytes @ 0x4
  3408  0024                     	ds	1
  3409  0025                     ??_CC2500_InitSetREG:	
  3410  0025                     ??_CC2500_InitPATable:	
  3411                           ; 0 bytes @ 0x5
  3412                           
  3413  0025                     ??_Switch_Initialization:	
  3414                           ; 0 bytes @ 0x5
  3415                           
  3416  0025                     ??___ftpack:	
  3417                           ; 0 bytes @ 0x5
  3418                           
  3419  0025                     ??_setDimmerLights_AdjControl:	
  3420                           ; 0 bytes @ 0x5
  3421                           
  3422  0025                     ??_LED_Initialization:	
  3423                           ; 0 bytes @ 0x5
  3424                           
  3425  0025                     ??_LED_Main:	
  3426                           ; 0 bytes @ 0x5
  3427                           
  3428  0025                     CC2500_TxData@loop_e:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0025                     Flash_Memory_Modify@i:	
  3432                           ; 1 bytes @ 0x5
  3433                           
  3434  0025                     getMain_LightsStatus@count:	
  3435                           ; 1 bytes @ 0x5
  3436                           
  3437  0025                     getMain_All_Error_Status@command:	
  3438                           ; 1 bytes @ 0x5
  3439                           
  3440  0025                     getTemp_AD@channel:	
  3441                           ; 1 bytes @ 0x5
  3442                           
  3443  0025                     ___awdiv@counter:	
  3444                           ; 1 bytes @ 0x5
  3445                           
  3446                           
  3447                           ; 1 bytes @ 0x5
  3448  0025                     	ds	1
  3449  0026                     ??_CC2500_PowerRST:	
  3450  0026                     ??_CC2500_FrequencyCabr:	
  3451                           ; 0 bytes @ 0x6
  3452                           
  3453  0026                     CC2500_InitSetREG@temp1:	
  3454                           ; 0 bytes @ 0x6
  3455                           
  3456  0026                     CC2500_InitPATable@temp:	
  3457                           ; 1 bytes @ 0x6
  3458                           
  3459  0026                     DelayTimejudge@i:	
  3460                           ; 1 bytes @ 0x6
  3461                           
  3462  0026                     setDimmerLights_AdjControl@idle:	
  3463                           ; 1 bytes @ 0x6
  3464                           
  3465  0026                     getMain_All_Error_Status@status:	
  3466                           ; 1 bytes @ 0x6
  3467                           
  3468  0026                     getLoad_AD@channel:	
  3469                           ; 1 bytes @ 0x6
  3470                           
  3471  0026                     ___awdiv@sign:	
  3472                           ; 1 bytes @ 0x6
  3473                           
  3474  0026                     getMain_LightsStatus@i:	
  3475                           ; 1 bytes @ 0x6
  3476                           
  3477                           
  3478                           ; 2 bytes @ 0x6
  3479  0026                     	ds	1
  3480  0027                     CC2500_InitSetREG@temp2:	
  3481  0027                     CC2500_InitPATable@loop_d:	
  3482                           ; 1 bytes @ 0x7
  3483                           
  3484  0027                     DelayTimejudge@j:	
  3485                           ; 1 bytes @ 0x7
  3486                           
  3487  0027                     _setDimmerLights_AdjControl$2409:	
  3488                           ; 1 bytes @ 0x7
  3489                           
  3490  0027                     getLoad_AD@k:	
  3491                           ; 1 bytes @ 0x7
  3492                           
  3493  0027                     ___awdiv@quotient:	
  3494                           ; 1 bytes @ 0x7
  3495                           
  3496                           
  3497                           ; 2 bytes @ 0x7
  3498  0027                     	ds	1
  3499  0028                     ?___awtoft:	
  3500  0028                     CC2500_InitSetREG@loop_c:	
  3501                           ; 3 bytes @ 0x8
  3502                           
  3503  0028                     DelayTimejudge@k:	
  3504                           ; 1 bytes @ 0x8
  3505                           
  3506  0028                     setDimmerLights_AdjControl@sw:	
  3507                           ; 1 bytes @ 0x8
  3508                           
  3509  0028                     getMain_LightsStatus@status:	
  3510                           ; 1 bytes @ 0x8
  3511                           
  3512  0028                     getLoad_AD@j:	
  3513                           ; 1 bytes @ 0x8
  3514                           
  3515  0028                     ___awtoft@c:	
  3516                           ; 1 bytes @ 0x8
  3517                           
  3518                           
  3519                           ; 2 bytes @ 0x8
  3520  0028                     	ds	1
  3521  0029                     ??_Load_Main:	
  3522  0029                     ?_setBuz:	
  3523                           ; 0 bytes @ 0x9
  3524                           
  3525  0029                     ??_CC2500_PowerOnInitial:	
  3526                           ; 0 bytes @ 0x9
  3527                           
  3528  0029                     ??_Flash_Memory_Main:	
  3529                           ; 0 bytes @ 0x9
  3530                           
  3531  0029                     DelayTimejudge@value:	
  3532                           ; 0 bytes @ 0x9
  3533                           
  3534  0029                     getLoad_AD@i:	
  3535                           ; 1 bytes @ 0x9
  3536                           
  3537  0029                     setBuz@time:	
  3538                           ; 1 bytes @ 0x9
  3539                           
  3540                           
  3541                           ; 2 bytes @ 0x9
  3542  0029                     	ds	1
  3543  002A                     ?_setDelayOff_GO:	
  3544  002A                     setDelayOff_GO@command:	
  3545                           ; 0 bytes @ 0xA
  3546                           
  3547                           
  3548                           ; 1 bytes @ 0xA
  3549  002A                     	ds	1
  3550  002B                     ??_setBuz:	
  3551  002B                     ??___awtoft:	
  3552                           ; 0 bytes @ 0xB
  3553                           
  3554  002B                     setDelayOff_GO@value:	
  3555                           ; 0 bytes @ 0xB
  3556                           
  3557  002B                     Load_Main@j:	
  3558                           ; 1 bytes @ 0xB
  3559                           
  3560                           
  3561                           ; 1 bytes @ 0xB
  3562  002B                     	ds	1
  3563  002C                     ??_setDelayOff_GO:	
  3564  002C                     setBuz@count:	
  3565                           ; 0 bytes @ 0xC
  3566                           
  3567  002C                     Load_Main@adjgo:	
  3568                           ; 1 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0xC
  3572  002C                     	ds	1
  3573  002D                     ??_my_MainTimer:	
  3574  002D                     ??_setTemp_Main:	
  3575                           ; 0 bytes @ 0xD
  3576                           
  3577  002D                     ??_setLog_Code:	
  3578                           ; 0 bytes @ 0xD
  3579                           
  3580  002D                     ??_setDimmerLights_SwOn:	
  3581                           ; 0 bytes @ 0xD
  3582                           
  3583  002D                     _Load_Main$4107:	
  3584                           ; 0 bytes @ 0xD
  3585                           
  3586  002D                     ___awtoft@sign:	
  3587                           ; 1 bytes @ 0xD
  3588                           
  3589                           
  3590                           ; 1 bytes @ 0xD
  3591  002D                     	ds	1
  3592  002E                     ?___ftdiv:	
  3593  002E                     ?___ftmul:	
  3594                           ; 3 bytes @ 0xE
  3595                           
  3596  002E                     setDelayOff_GO@sw:	
  3597                           ; 3 bytes @ 0xE
  3598                           
  3599  002E                     setDimmerLights_SwOn@idle:	
  3600                           ; 1 bytes @ 0xE
  3601                           
  3602  002E                     Load_Main@error:	
  3603                           ; 1 bytes @ 0xE
  3604                           
  3605  002E                     ___ftdiv@f2:	
  3606                           ; 1 bytes @ 0xE
  3607                           
  3608  002E                     ___ftmul@f1:	
  3609                           ; 3 bytes @ 0xE
  3610                           
  3611                           
  3612                           ; 3 bytes @ 0xE
  3613  002E                     	ds	1
  3614  002F                     ??_Temp_Main:	
  3615  002F                     ??_setDimmerLights_SwOff:	
  3616                           ; 0 bytes @ 0xF
  3617                           
  3618  002F                     setDimmerLights_SwOn@sw:	
  3619                           ; 0 bytes @ 0xF
  3620                           
  3621  002F                     setDimmerLights_SwOff@command:	
  3622                           ; 1 bytes @ 0xF
  3623                           
  3624  002F                     Load_Main@i:	
  3625                           ; 1 bytes @ 0xF
  3626                           
  3627                           
  3628                           ; 1 bytes @ 0xF
  3629  002F                     	ds	1
  3630  0030                     setDimmerLights_SwOff@sw:	
  3631                           
  3632                           ; 1 bytes @ 0x10
  3633  0030                     	ds	1
  3634  0031                     ??_setDimmerLights_ErrorClose:	
  3635  0031                     ??_setRFSW_Control:	
  3636                           ; 0 bytes @ 0x11
  3637                           
  3638  0031                     ??_setSw_Main:	
  3639                           ; 0 bytes @ 0x11
  3640                           
  3641  0031                     ___ftdiv@f1:	
  3642                           ; 0 bytes @ 0x11
  3643                           
  3644  0031                     ___ftmul@f2:	
  3645                           ; 3 bytes @ 0x11
  3646                           
  3647                           
  3648                           ; 3 bytes @ 0x11
  3649  0031                     	ds	1
  3650  0032                     setDimmerLights_ErrorClose@count:	
  3651  0032                     setRFSW_Control@status:	
  3652                           ; 1 bytes @ 0x12
  3653                           
  3654                           
  3655                           ; 1 bytes @ 0x12
  3656  0032                     	ds	1
  3657  0033                     setDimmerLights_ErrorClose@lights:	
  3658  0033                     setRFSW_Control@sw:	
  3659                           ; 1 bytes @ 0x13
  3660                           
  3661  0033                     setSw_Main@sw:	
  3662                           ; 1 bytes @ 0x13
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x13
  3666  0033                     	ds	1
  3667  0034                     ??___ftdiv:	
  3668  0034                     ??___ftmul:	
  3669                           ; 0 bytes @ 0x14
  3670                           
  3671  0034                     setDimmerLights_ErrorClose@i:	
  3672                           ; 0 bytes @ 0x14
  3673                           
  3674                           
  3675                           ; 2 bytes @ 0x14
  3676  0034                     	ds	2
  3677  0036                     ??_DlyOff_Main:	
  3678  0036                     ??_setMain_Exception:	
  3679                           ; 0 bytes @ 0x16
  3680                           
  3681                           
  3682                           ; 0 bytes @ 0x16
  3683  0036                     	ds	2
  3684  0038                     DlyOff_Main@sw:	
  3685  0038                     setMain_Exception@buz:	
  3686                           ; 1 bytes @ 0x18
  3687                           
  3688  0038                     ___ftdiv@cntr:	
  3689                           ; 1 bytes @ 0x18
  3690                           
  3691  0038                     ___ftmul@exp:	
  3692                           ; 1 bytes @ 0x18
  3693                           
  3694                           
  3695                           ; 1 bytes @ 0x18
  3696  0038                     	ds	1
  3697  0039                     ??_DelayOff_Main:	
  3698  0039                     _setMain_Exception$3732:	
  3699                           ; 0 bytes @ 0x19
  3700                           
  3701  0039                     ___ftdiv@f3:	
  3702                           ; 2 bytes @ 0x19
  3703                           
  3704  0039                     ___ftmul@f3_as_product:	
  3705                           ; 3 bytes @ 0x19
  3706                           
  3707                           
  3708                           ; 3 bytes @ 0x19
  3709  0039                     	ds	2
  3710  003B                     setMain_Exception@status:	
  3711                           
  3712                           ; 1 bytes @ 0x1B
  3713  003B                     	ds	1
  3714  003C                     setMain_Exception@command:	
  3715  003C                     ___ftdiv@exp:	
  3716                           ; 1 bytes @ 0x1C
  3717                           
  3718  003C                     ___ftmul@cntr:	
  3719                           ; 1 bytes @ 0x1C
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x1C
  3723  003C                     	ds	1
  3724  003D                     ??_Switch_Main:	
  3725  003D                     ___ftdiv@sign:	
  3726                           ; 0 bytes @ 0x1D
  3727                           
  3728  003D                     ___ftmul@sign:	
  3729                           ; 1 bytes @ 0x1D
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x1D
  3733  003D                     	ds	1
  3734  003E                     ?___ftneg:	
  3735  003E                     Switch_Main@error:	
  3736                           ; 3 bytes @ 0x1E
  3737                           
  3738  003E                     ___ftneg@f1:	
  3739                           ; 1 bytes @ 0x1E
  3740                           
  3741                           
  3742                           ; 3 bytes @ 0x1E
  3743  003E                     	ds	3
  3744  0041                     ??___ftneg:	
  3745  0041                     ?___ftadd:	
  3746                           ; 0 bytes @ 0x21
  3747                           
  3748  0041                     ___ftadd@f1:	
  3749                           ; 3 bytes @ 0x21
  3750                           
  3751                           
  3752                           ; 3 bytes @ 0x21
  3753  0041                     	ds	3
  3754  0044                     ___ftadd@f2:	
  3755                           
  3756                           ; 3 bytes @ 0x24
  3757  0044                     	ds	3
  3758  0047                     ??___ftadd:	
  3759                           
  3760                           ; 0 bytes @ 0x27
  3761  0047                     	ds	4
  3762  004B                     ___ftadd@sign:	
  3763                           
  3764                           ; 1 bytes @ 0x2B
  3765  004B                     	ds	1
  3766  004C                     ___ftadd@exp2:	
  3767                           
  3768                           ; 1 bytes @ 0x2C
  3769  004C                     	ds	1
  3770  004D                     ___ftadd@exp1:	
  3771                           
  3772                           ; 1 bytes @ 0x2D
  3773  004D                     	ds	1
  3774  004E                     ?___fttol:	
  3775  004E                     ___fttol@f1:	
  3776                           ; 4 bytes @ 0x2E
  3777                           
  3778                           
  3779                           ; 3 bytes @ 0x2E
  3780  004E                     	ds	4
  3781  0052                     ??___fttol:	
  3782                           
  3783                           ; 0 bytes @ 0x32
  3784  0052                     	ds	4
  3785  0056                     ___fttol@sign1:	
  3786                           
  3787                           ; 1 bytes @ 0x36
  3788  0056                     	ds	1
  3789  0057                     ___fttol@lval:	
  3790                           
  3791                           ; 4 bytes @ 0x37
  3792  0057                     	ds	4
  3793  005B                     ___fttol@exp1:	
  3794                           
  3795                           ; 1 bytes @ 0x3B
  3796  005B                     	ds	1
  3797  005C                     ??_setPercentValue:	
  3798  005C                     ??_getPercentValue:	
  3799                           ; 0 bytes @ 0x3C
  3800                           
  3801                           
  3802                           ; 0 bytes @ 0x3C
  3803  005C                     	ds	2
  3804  005E                     getPercentValue@value:	
  3805  005E                     setPercentValue@value:	
  3806                           ; 1 bytes @ 0x3E
  3807                           
  3808                           
  3809                           ; 1 bytes @ 0x3E
  3810  005E                     	ds	1
  3811  005F                     getPercentValue@i:	
  3812  005F                     setPercentValue@i:	
  3813                           ; 3 bytes @ 0x3F
  3814                           
  3815                           
  3816                           ; 3 bytes @ 0x3F
  3817  005F                     	ds	3
  3818  0062                     ?_setDimmerLights:	
  3819  0062                     ?_setDimmerLights_Adj:	
  3820                           ; 0 bytes @ 0x42
  3821                           
  3822  0062                     ??_setDimmerLights_AdjRF:	
  3823                           ; 0 bytes @ 0x42
  3824                           
  3825  0062                     ??_Flash_Memory_Initialization:	
  3826                           ; 0 bytes @ 0x42
  3827                           
  3828  0062                     setDimmerLights@status:	
  3829                           ; 0 bytes @ 0x42
  3830                           
  3831  0062                     setDimmerLights_Adj@status:	
  3832                           ; 1 bytes @ 0x42
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0x42
  3836  0062                     	ds	1
  3837  0063                     ??_setDimmerLights:	
  3838  0063                     ??_setDimmerLights_Adj:	
  3839                           ; 0 bytes @ 0x43
  3840                           
  3841  0063                     setDimmerLights_AdjRF@lights:	
  3842                           ; 0 bytes @ 0x43
  3843                           
  3844  0063                     Flash_Memory_Initialization@i:	
  3845                           ; 1 bytes @ 0x43
  3846                           
  3847                           
  3848                           ; 1 bytes @ 0x43
  3849  0063                     	ds	1
  3850  0064                     ??_setRF_DimmerValue:	
  3851                           
  3852                           ; 0 bytes @ 0x44
  3853  0064                     	ds	1
  3854  0065                     setDimmerLights@lights:	
  3855  0065                     setDimmerLights_Adj@lights:	
  3856                           ; 1 bytes @ 0x45
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x45
  3860  0065                     	ds	1
  3861  0066                     ??_setDimmerLights_Main:	
  3862  0066                     setDimmerLights_Main@lights:	
  3863                           ; 0 bytes @ 0x46
  3864                           
  3865  0066                     setRF_DimmerValue@lights:	
  3866                           ; 1 bytes @ 0x46
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x46
  3870  0066                     	ds	1
  3871  0067                     ??_setRFSW_AdjControl:	
  3872  0067                     ??_DimmerLights_Main:	
  3873                           ; 0 bytes @ 0x47
  3874                           
  3875                           
  3876                           ; 0 bytes @ 0x47
  3877  0067                     	ds	2
  3878  0069                     setRFSW_AdjControl@status:	
  3879  0069                     _DimmerLights_Main$2345:	
  3880                           ; 1 bytes @ 0x49
  3881                           
  3882                           
  3883                           ; 2 bytes @ 0x49
  3884  0069                     	ds	1
  3885  006A                     setRFSW_AdjControl@sw:	
  3886                           
  3887                           ; 1 bytes @ 0x4A
  3888  006A                     	ds	1
  3889  006B                     ??_getRxData:	
  3890  006B                     ??_setControl_Lights_Table:	
  3891                           ; 0 bytes @ 0x4B
  3892                           
  3893                           
  3894                           ; 0 bytes @ 0x4B
  3895  006B                     	ds	1
  3896  006C                     getRxData@error:	
  3897                           
  3898                           ; 1 bytes @ 0x4C
  3899  006C                     	ds	1
  3900  006D                     ??_setRF_Main:	
  3901                           
  3902                           ; 0 bytes @ 0x4D
  3903  006D                     	ds	1
  3904  006E                     ??_RF_Main:	
  3905  006E                     ??_main:	
  3906                           ; 0 bytes @ 0x4E
  3907                           
  3908                           
  3909                           	psect	maintext
  3910  174F                     __pmaintext:	
  3911                           ; 0 bytes @ 0x4E
  3912 ;;
  3913 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3914 ;;
  3915 ;; *************** function _main *****************
  3916 ;; Defined at:
  3917 ;;		line 7 in file "../src/Main_B1.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  argc            2    3[BANK1 ] int 
  3920 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  2    3[BANK1 ] int 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 17F/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3932 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3935 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3936 ;;Total ram usage:        4 bytes
  3937 ;; Hardware stack levels required when called:   15
  3938 ;; This function calls:
  3939 ;;		_Buzzer_Initialization
  3940 ;;		_Buzzer_Main
  3941 ;;		_CC2500_PowerOnInitial
  3942 ;;		_DelayOff_Initialization
  3943 ;;		_DelayOff_Main
  3944 ;;		_DimmerLights_Initialization
  3945 ;;		_DimmerLights_Main
  3946 ;;		_Flash_Memory_Initialization
  3947 ;;		_Flash_Memory_Main
  3948 ;;		_LED_Initialization
  3949 ;;		_LED_Main
  3950 ;;		_Load_Initialization
  3951 ;;		_Load_Main
  3952 ;;		_Mcu_Initialization
  3953 ;;		_RF_Initialization
  3954 ;;		_RF_Main
  3955 ;;		_Switch_Initialization
  3956 ;;		_Switch_Main
  3957 ;;		_Temp_Initialization
  3958 ;;		_Temp_Main
  3959 ;;		_WDT_Main
  3960 ;;		_getLoad_AD
  3961 ;;		_getTemp_AD
  3962 ;;		_myMain_Initialization
  3963 ;;		_my_MainTimer
  3964 ;; This function is called by:
  3965 ;;		Startup code after reset
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           
  3970                           ;psect for function _main
  3971  174F                     _main:	
  3972                           
  3973                           ;Main_B1.c: 8: myMain_Initialization();
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3977  174F  319E  261B  3197   	fcall	_myMain_Initialization
  3978                           
  3979                           ;Main_B1.c: 9: Mcu_Initialization();
  3980  1752  319E  26C0  3197   	fcall	_Mcu_Initialization
  3981                           
  3982                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3983  1755  3185  2532  3197   	fcall	_Flash_Memory_Initialization
  3984                           
  3985                           ;Main_B1.c: 11: LED_Initialization();
  3986  1758  319C  24D9  3197   	fcall	_LED_Initialization
  3987                           
  3988                           ;Main_B1.c: 12: Buzzer_Initialization();
  3989  175B  319C  24B2  3197   	fcall	_Buzzer_Initialization
  3990                           
  3991                           ;Main_B1.c: 14: ;;
  3992                           ;Main_B1.c: 15: Temp_Initialization();
  3993  175E  319C  24BB  3197   	fcall	_Temp_Initialization
  3994                           
  3995                           ;Main_B1.c: 16: Load_Initialization();
  3996  1761  3187  27FB  3197   	fcall	_Load_Initialization
  3997                           
  3998                           ;Main_B1.c: 17: ;;
  3999                           ;Main_B1.c: 18: DelayOff_Initialization();
  4000  1764  319C  24D1  3197   	fcall	_DelayOff_Initialization
  4001                           
  4002                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4003  1767  319D  25E2  3197   	fcall	_DimmerLights_Initialization
  4004                           
  4005                           ;Main_B1.c: 21: ;;
  4006                           ;Main_B1.c: 22: ;;
  4007                           ;Main_B1.c: 23: ;;
  4008                           ;Main_B1.c: 24: Switch_Initialization();
  4009  176A  319D  2525  3197   	fcall	_Switch_Initialization
  4010                           
  4011                           ;Main_B1.c: 25: RF_Initialization();
  4012  176D  319C  24B5  3197   	fcall	_RF_Initialization
  4013                           
  4014                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4015  1770  319F  2747  3197   	fcall	_CC2500_PowerOnInitial
  4016  1773                     l7878:	
  4017                           ;Main_B1.c: 27: ;;
  4018                           ;Main_B1.c: 28: ;;
  4019                           ;Main_B1.c: 30: while (1) {
  4020                           
  4021                           
  4022                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4023  1773  0021               	movlb	1	; select bank1
  4024  1774  1C20               	btfss	_myMain^(0+128),0
  4025  1775  2F7E               	goto	l7882
  4026                           
  4027                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4028  1776  3005               	movlw	5
  4029  1777  318B  23DD  3197   	fcall	_getLoad_AD
  4030                           
  4031                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4032  177A  3009               	movlw	9
  4033  177B  3193  23F9  3197   	fcall	_getTemp_AD
  4034  177E                     l7882:	
  4035                           
  4036                           ;Main_B1.c: 57: }
  4037                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4038  177E  0021               	movlb	1	; select bank1
  4039  177F  1C47               	btfss	_Timer1^(0+128),0
  4040  1780  2F73               	goto	l7878
  4041                           
  4042                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4043  1781  1047               	bcf	_Timer1^(0+128),0
  4044                           
  4045                           ;Main_B1.c: 95: my_MainTimer();
  4046  1782  3195  25BB  3197   	fcall	_my_MainTimer
  4047                           
  4048                           ;Main_B1.c: 96: WDT_Main();
  4049  1785  319E  26D2  3197   	fcall	_WDT_Main
  4050                           
  4051                           ;Main_B1.c: 97: ;;
  4052                           ;Main_B1.c: 98: ;;
  4053                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4054  1788  0021               	movlb	1	; select bank1
  4055  1789  1C20               	btfss	_myMain^(0+128),0
  4056  178A  2F73               	goto	l7878
  4057                           
  4058                           ;Main_B1.c: 100: Flash_Memory_Main();
  4059  178B  3193  238D  3197   	fcall	_Flash_Memory_Main
  4060                           
  4061                           ;Main_B1.c: 102: LED_Main();
  4062  178E  319C  24DD  3197   	fcall	_LED_Main
  4063                           
  4064                           ;Main_B1.c: 103: Buzzer_Main();
  4065  1791  3195  2571  3197   	fcall	_Buzzer_Main
  4066                           
  4067                           ;Main_B1.c: 105: ;;
  4068                           ;Main_B1.c: 106: Temp_Main();
  4069  1794  319C  24BE  3197   	fcall	_Temp_Main
  4070                           
  4071                           ;Main_B1.c: 107: Load_Main();
  4072  1797  3182  22F8  3197   	fcall	_Load_Main
  4073                           
  4074                           ;Main_B1.c: 108: ;;
  4075                           ;Main_B1.c: 110: ;;
  4076                           ;Main_B1.c: 111: DimmerLights_Main();
  4077  179A  3192  225A  3197   	fcall	_DimmerLights_Main
  4078                           
  4079                           ;Main_B1.c: 112: Switch_Main();
  4080  179D  3190  209B  3197   	fcall	_Switch_Main
  4081                           
  4082                           ;Main_B1.c: 113: ;;
  4083                           ;Main_B1.c: 114: ;;
  4084                           ;Main_B1.c: 116: RF_Main();
  4085  17A0  319C  24B8  3197   	fcall	_RF_Main
  4086                           
  4087                           ;Main_B1.c: 117: DelayOff_Main();
  4088  17A3  319C  24D5  3197   	fcall	_DelayOff_Main
  4089                           
  4090                           ;Main_B1.c: 118: ;;
  4091                           ;Main_B1.c: 119: ;;
  4092  17A6  2F73               	goto	l7878
  4093  17A7                     __end_of_main:	
  4094                           ;Main_B1.c: 126: }
  4095                           ;Main_B1.c: 127: }
  4096                           ;Main_B1.c: 161: }
  4097                           ;Main_B1.c: 162: return (0);
  4098                           ;	Return value of _main is never used
  4099                           
  4100                           
  4101                           	psect	text1
  4102  15BB                     __ptext1:	
  4103 ;; *************** function _my_MainTimer *****************
  4104 ;; Defined at:
  4105 ;;		line 181 in file "../src/Main_B1.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    7
  4126 ;; This function calls:
  4127 ;;		_setBuz
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _my_MainTimer
  4135  15BB                     _my_MainTimer:	
  4136                           
  4137                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4141  15BB  0021               	movlb	1	; select bank1
  4142  15BC  1820               	btfsc	_myMain^(0+128),0
  4143  15BD  2DDC               	goto	l7548
  4144                           
  4145                           ;Main_B1.c: 184: myMain.PowerCount++;
  4146  15BE  3001               	movlw	1
  4147  15BF  07A1               	addwf	(_myMain^(0+128)+1),f
  4148  15C0  3000               	movlw	0
  4149  15C1  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4150                           
  4151                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  4152  15C2  3001               	movlw	1
  4153  15C3  3EA0               	addlw	_myMain& (0+255)
  4154  15C4  0086               	movwf	6
  4155  15C5  0187               	clrf	7
  4156  15C6  3F40               	moviw [0]fsr1
  4157  15C7  3A96               	xorlw	150
  4158  15C8  1D03               	skipz
  4159  15C9  2DCC               	goto	u7395
  4160  15CA  3F41               	moviw [1]fsr1
  4161  15CB  3A00               	xorlw	0
  4162  15CC                     u7395:	
  4163  15CC  1D03               	skipz
  4164  15CD  0008               	return
  4165                           
  4166                           ;Main_B1.c: 186: {
  4167                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  4168  15CE  01A1               	clrf	(_myMain^(0+128)+1)
  4169  15CF  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4170                           
  4171                           ;Main_B1.c: 188: myMain.PowerON = 1;
  4172  15D0  1420               	bsf	_myMain^(0+128),0
  4173                           
  4174                           ;Main_B1.c: 193: setBuz(3, 50);
  4175  15D1  3032               	movlw	50
  4176  15D2  0020               	movlb	0	; select bank0
  4177  15D3  00A9               	movwf	setBuz@time
  4178  15D4  3000               	movlw	0
  4179  15D5  00AA               	movwf	setBuz@time+1
  4180  15D6  3003               	movlw	3
  4181  15D7  3197  27A7         	fcall	_setBuz
  4182                           
  4183                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4184  15D9  0021               	movlb	1	; select bank1
  4185  15DA  1620               	bsf	_myMain^(0+128),4
  4186                           
  4187                           ;Main_B1.c: 203: }
  4188                           ;Main_B1.c: 204: } else {
  4189  15DB  0008               	return
  4190  15DC                     l7548:	
  4191                           
  4192                           ;Main_B1.c: 205: myMain.PowerCount++;
  4193  15DC  3001               	movlw	1
  4194  15DD  07A1               	addwf	(_myMain^(0+128)+1),f
  4195  15DE  3000               	movlw	0
  4196  15DF  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4197                           
  4198                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  4199  15E0  3001               	movlw	1
  4200  15E1  3EA0               	addlw	_myMain& (0+255)
  4201  15E2  0086               	movwf	6
  4202  15E3  0187               	clrf	7
  4203  15E4  3F40               	moviw [0]fsr1
  4204  15E5  3A64               	xorlw	100
  4205  15E6  1D03               	skipz
  4206  15E7  2DEA               	goto	u7405
  4207  15E8  3F41               	moviw [1]fsr1
  4208  15E9  3A00               	xorlw	0
  4209  15EA                     u7405:	
  4210  15EA  1D03               	skipz
  4211  15EB  2DEE               	goto	l7554
  4212                           
  4213                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  4214  15EC  01A1               	clrf	(_myMain^(0+128)+1)
  4215  15ED  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4216  15EE                     l7554:	
  4217                           
  4218                           ;Main_B1.c: 219: }
  4219                           ;Main_B1.c: 221: myMain.Count1++;
  4220  15EE  3001               	movlw	1
  4221  15EF  07A5               	addwf	(_myMain^(0+128)+5),f
  4222  15F0  3000               	movlw	0
  4223  15F1  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4224                           
  4225                           ;Main_B1.c: 222: if (myMain.Count1 == 100)
  4226  15F2  3005               	movlw	5
  4227  15F3  3EA0               	addlw	_myMain& (0+255)
  4228  15F4  0086               	movwf	6
  4229  15F5  0187               	clrf	7
  4230  15F6  3F40               	moviw [0]fsr1
  4231  15F7  3A64               	xorlw	100
  4232  15F8  1D03               	skipz
  4233  15F9  2DFC               	goto	u7415
  4234  15FA  3F41               	moviw [1]fsr1
  4235  15FB  3A00               	xorlw	0
  4236  15FC                     u7415:	
  4237  15FC  1D03               	skipz
  4238  15FD  0008               	return
  4239                           
  4240                           ;Main_B1.c: 223: {
  4241                           ;Main_B1.c: 224: myMain.Count1 = 0;
  4242  15FE  01A5               	clrf	(_myMain^(0+128)+5)
  4243  15FF  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4244                           
  4245                           ;Main_B1.c: 236: if (myMain.Flag) {
  4246  1600  1CA0               	btfss	_myMain^(0+128),1
  4247  1601  2E04               	goto	l1383
  4248                           
  4249                           ;Main_B1.c: 237: myMain.Flag = 0;
  4250  1602  10A0               	bcf	_myMain^(0+128),1
  4251                           
  4252                           ;Main_B1.c: 246: } else {
  4253  1603  0008               	return
  4254  1604                     l1383:	
  4255                           
  4256                           ;Main_B1.c: 247: myMain.Flag = 1;
  4257  1604  14A0               	bsf	_myMain^(0+128),1
  4258  1605  0008               	return
  4259  1606                     __end_of_my_MainTimer:	
  4260                           
  4261                           	psect	text2
  4262  1E1B                     __ptext2:	
  4263 ;; *************** function _myMain_Initialization *****************
  4264 ;; Defined at:
  4265 ;;		line 168 in file "../src/Main_B1.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;		None
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;		None               void
  4272 ;; Registers used:
  4273 ;;		wreg, fsr1l, fsr1h
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;Total ram usage:        1 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    5
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_main
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _myMain_Initialization
  4295  1E1B                     _myMain_Initialization:	
  4296                           
  4297                           ;Main_B1.c: 170: product = &_product;
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4301  1E1B  3020               	movlw	__product& (0+255)
  4302  1E1C  0020               	movlb	0	; select bank0
  4303  1E1D  00A0               	movwf	??_myMain_Initialization
  4304  1E1E  0820               	movf	??_myMain_Initialization,w
  4305  1E1F  00EE               	movwf	_product
  4306                           
  4307                           ;Main_B1.c: 171: product->Data[20] = 209;
  4308  1E20  30D1               	movlw	209
  4309  1E21  00A0               	movwf	??_myMain_Initialization
  4310  1E22  086E               	movf	_product,w
  4311  1E23  3E14               	addlw	20
  4312  1E24  0086               	movwf	6
  4313  1E25  3002               	movlw	2	; select bank4/5
  4314  1E26  0087               	movwf	7
  4315  1E27  0820               	movf	??_myMain_Initialization,w
  4316  1E28  0081               	movwf	1
  4317  1E29  0008               	return
  4318  1E2A                     __end_of_myMain_Initialization:	
  4319                           
  4320                           	psect	text3
  4321  13F9                     __ptext3:	
  4322 ;; *************** function _getTemp_AD *****************
  4323 ;; Defined at:
  4324 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  channel         1    wreg     unsigned char 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  channel         1    5[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;		None               void
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;Total ram usage:        2 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		_getAD
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _getTemp_AD
  4354  13F9                     _getTemp_AD:	
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4358                           ;getTemp_AD@channel stored from wreg
  4359  13F9  0020               	movlb	0	; select bank0
  4360  13FA  00A5               	movwf	getTemp_AD@channel
  4361                           
  4362                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4363  13FB  0021               	movlb	1	; select bank1
  4364  13FC  1D56               	btfss	_Temp^(0+128),2
  4365  13FD  0008               	return
  4366                           
  4367                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4368  13FE  1656               	bsf	_Temp^(0+128),4
  4369                           
  4370                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4371  13FF  30F0               	movlw	240
  4372  1400  0020               	movlb	0	; select bank0
  4373  1401  00A4               	movwf	??_getTemp_AD
  4374  1402  0824               	movf	??_getTemp_AD,w
  4375  1403  00A0               	movwf	getAD@adcon1
  4376  1404  0825               	movf	getTemp_AD@channel,w
  4377  1405  3190  20BB  3193   	fcall	_getAD
  4378  1408  0020               	movlb	0	; select bank0
  4379  1409  0821               	movf	?_getAD+1,w
  4380  140A  0021               	movlb	1	; select bank1
  4381  140B  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4382  140C  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4383  140D  0020               	movlb	0	; select bank0
  4384  140E  0820               	movf	?_getAD,w
  4385  140F  0021               	movlb	1	; select bank1
  4386  1410  01E2               	clrf	(_Temp^(0+128)+12)
  4387  1411  07E2               	addwf	(_Temp^(0+128)+12),f
  4388                           
  4389                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4390  1412  0863               	movf	((_Temp+1)^(0+128)+12),w
  4391  1413  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4392  1414  1D03               	skipz
  4393  1415  2C18               	goto	u7365
  4394  1416  0862               	movf	(_Temp^(0+128)+12),w
  4395  1417  025E               	subwf	(_Temp^(0+128)+8),w
  4396  1418                     u7365:	
  4397  1418  1803               	skipnc
  4398  1419  2C21               	goto	l7530
  4399                           
  4400                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4401  141A  0863               	movf	((_Temp+1)^(0+128)+12),w
  4402  141B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4403  141C  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4404  141D  0862               	movf	(_Temp^(0+128)+12),w
  4405  141E  01DE               	clrf	(_Temp^(0+128)+8)
  4406  141F  07DE               	addwf	(_Temp^(0+128)+8),f
  4407                           
  4408                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4409  1420  0008               	return
  4410  1421                     l7530:	
  4411  1421  0863               	movf	((_Temp+1)^(0+128)+12),w
  4412  1422  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4413  1423  1D03               	skipz
  4414  1424  2C27               	goto	u7375
  4415  1425  0862               	movf	(_Temp^(0+128)+12),w
  4416  1426  0260               	subwf	(_Temp^(0+128)+10),w
  4417  1427                     u7375:	
  4418  1427  1803               	skipnc
  4419  1428  0008               	return
  4420                           
  4421                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4422  1429  0863               	movf	((_Temp+1)^(0+128)+12),w
  4423  142A  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4424  142B  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4425  142C  0862               	movf	(_Temp^(0+128)+12),w
  4426  142D  01E0               	clrf	(_Temp^(0+128)+10)
  4427  142E  07E0               	addwf	(_Temp^(0+128)+10),f
  4428  142F  0008               	return
  4429  1430                     __end_of_getTemp_AD:	
  4430                           
  4431                           	psect	text4
  4432  0BDD                     __ptext4:	
  4433 ;; *************** function _getLoad_AD *****************
  4434 ;; Defined at:
  4435 ;;		line 15 in file "../src/OverLoad_B1.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  channel         1    wreg     unsigned char 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  channel         1    6[BANK0 ] unsigned char 
  4440 ;;  i               1    9[BANK0 ] unsigned char 
  4441 ;;  j               1    8[BANK0 ] unsigned char 
  4442 ;;  k               1    7[BANK0 ] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;		None               void
  4445 ;; Registers used:
  4446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;Total ram usage:        6 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    7
  4459 ;; This function calls:
  4460 ;;		_getAD
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _getLoad_AD
  4468  0BDD                     _getLoad_AD:	
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4472                           ;getLoad_AD@channel stored from wreg
  4473  0BDD  0020               	movlb	0	; select bank0
  4474  0BDE  00A6               	movwf	getLoad_AD@channel
  4475                           
  4476                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4477  0BDF  01A9               	clrf	getLoad_AD@i
  4478  0BE0  01A8               	clrf	getLoad_AD@j
  4479  0BE1  01A7               	clrf	getLoad_AD@k
  4480                           
  4481                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4482  0BE2  0022               	movlb	2	; select bank2
  4483  0BE3  1E43               	btfss	_Load^(0+256),4
  4484  0BE4  0008               	return
  4485                           
  4486                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4487  0BE5  30F3               	movlw	243
  4488  0BE6  0020               	movlb	0	; select bank0
  4489  0BE7  00A4               	movwf	??_getLoad_AD
  4490  0BE8  0824               	movf	??_getLoad_AD,w
  4491  0BE9  00A0               	movwf	getAD@adcon1
  4492  0BEA  0826               	movf	getLoad_AD@channel,w
  4493  0BEB  3190  20BB  318B   	fcall	_getAD
  4494  0BEE  0020               	movlb	0	; select bank0
  4495  0BEF  0821               	movf	?_getAD+1,w
  4496  0BF0  0022               	movlb	2	; select bank2
  4497  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4498  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4499  0BF3  0020               	movlb	0	; select bank0
  4500  0BF4  0820               	movf	?_getAD,w
  4501  0BF5  0022               	movlb	2	; select bank2
  4502  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4503  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4504                           
  4505                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4506  0BF8  0020               	movlb	0	; select bank0
  4507  0BF9  01A9               	clrf	getLoad_AD@i
  4508  0BFA  3004               	movlw	4
  4509  0BFB  0229               	subwf	getLoad_AD@i,w
  4510  0BFC  1803               	btfsc	3,0
  4511  0BFD  2C2B               	goto	l7500
  4512  0BFE                     l7488:	
  4513                           
  4514                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4515  0BFE  3529               	lslf	getLoad_AD@i,w
  4516  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4517  0C00  0086               	movwf	6
  4518  0C01  3001               	movlw	1	; select bank2/3
  4519  0C02  0087               	movwf	7
  4520  0C03  3F40               	moviw [0]fsr1
  4521  0C04  00A4               	movwf	??_getLoad_AD
  4522  0C05  3F41               	moviw [1]fsr1
  4523  0C06  00A5               	movwf	??_getLoad_AD+1
  4524  0C07  0022               	movlb	2	; select bank2
  4525  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4526  0C09  0020               	movlb	0	; select bank0
  4527  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4528  0C0B  1D03               	skipz
  4529  0C0C  2C11               	goto	u7275
  4530  0C0D  0022               	movlb	2	; select bank2
  4531  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4532  0C0F  0020               	movlb	0	; select bank0
  4533  0C10  0224               	subwf	??_getLoad_AD,w
  4534  0C11                     u7275:	
  4535  0C11  1803               	skipnc
  4536  0C12  2C23               	goto	l7496
  4537  0C13  08A8               	movf	getLoad_AD@j,f
  4538  0C14  1D03               	skipz
  4539  0C15  2C23               	goto	l7496
  4540                           
  4541                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4542  0C16  3529               	lslf	getLoad_AD@i,w
  4543  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4544  0C18  0086               	movwf	6
  4545  0C19  3001               	movlw	1	; select bank2/3
  4546  0C1A  0087               	movwf	7
  4547  0C1B  0022               	movlb	2	; select bank2
  4548  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4549  0C1D  3FC0               	movwi [0]fsr1
  4550  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4551  0C1F  3FC1               	movwi [1]fsr1
  4552                           
  4553                           ;OverLoad_B1.c: 24: j = 1;
  4554  0C20  0020               	movlb	0	; select bank0
  4555  0C21  01A8               	clrf	getLoad_AD@j
  4556  0C22  0AA8               	incf	getLoad_AD@j,f
  4557  0C23                     l7496:	
  4558  0C23  3001               	movlw	1
  4559  0C24  00A4               	movwf	??_getLoad_AD
  4560  0C25  0824               	movf	??_getLoad_AD,w
  4561  0C26  07A9               	addwf	getLoad_AD@i,f
  4562  0C27  3004               	movlw	4
  4563  0C28  0229               	subwf	getLoad_AD@i,w
  4564  0C29  1C03               	skipc
  4565  0C2A  2BFE               	goto	l7488
  4566  0C2B                     l7500:	
  4567                           
  4568                           ;OverLoad_B1.c: 25: }
  4569                           ;OverLoad_B1.c: 26: }
  4570                           ;OverLoad_B1.c: 27: if (j == 0) {
  4571  0C2B  08A8               	movf	getLoad_AD@j,f
  4572  0C2C  1D03               	skipz
  4573  0C2D  0008               	return
  4574                           
  4575                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4576  0C2E  01A9               	clrf	getLoad_AD@i
  4577  0C2F                     L1:	
  4578  0C2F  3004               	movlw	4
  4579  0C30  0229               	subwf	getLoad_AD@i,w
  4580  0C31  1803               	btfsc	3,0
  4581  0C32  0008               	return
  4582                           
  4583                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4584  0C33  3529               	lslf	getLoad_AD@i,w
  4585  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4586  0C35  0086               	movwf	6
  4587  0C36  3001               	movlw	1	; select bank2/3
  4588  0C37  0087               	movwf	7
  4589  0C38  3F40               	moviw [0]fsr1
  4590  0C39  00A4               	movwf	??_getLoad_AD
  4591  0C3A  3F41               	moviw [1]fsr1
  4592  0C3B  00A5               	movwf	??_getLoad_AD+1
  4593  0C3C  0825               	movf	??_getLoad_AD+1,w
  4594  0C3D  0022               	movlb	2	; select bank2
  4595  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4596  0C3F  1D03               	skipz
  4597  0C40  2C45               	goto	u7325
  4598  0C41  0020               	movlb	0	; select bank0
  4599  0C42  0824               	movf	??_getLoad_AD,w
  4600  0C43  0022               	movlb	2	; select bank2
  4601  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4602  0C45                     u7325:	
  4603  0C45  1803               	skipnc
  4604  0C46  2C58               	goto	l7516
  4605  0C47  0020               	movlb	0	; select bank0
  4606  0C48  08A7               	movf	getLoad_AD@k,f
  4607  0C49  1D03               	skipz
  4608  0C4A  2C58               	goto	l7516
  4609                           
  4610                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4611  0C4B  3529               	lslf	getLoad_AD@i,w
  4612  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4613  0C4D  0086               	movwf	6
  4614  0C4E  3001               	movlw	1	; select bank2/3
  4615  0C4F  0087               	movwf	7
  4616  0C50  0022               	movlb	2	; select bank2
  4617  0C51  0864               	movf	(_Load^(0+256)+33),w
  4618  0C52  3FC0               	movwi [0]fsr1
  4619  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4620  0C54  3FC1               	movwi [1]fsr1
  4621                           
  4622                           ;OverLoad_B1.c: 31: k = 1;
  4623  0C55  0020               	movlb	0	; select bank0
  4624  0C56  01A7               	clrf	getLoad_AD@k
  4625  0C57  0AA7               	incf	getLoad_AD@k,f
  4626  0C58                     l7516:	
  4627  0C58  3001               	movlw	1
  4628  0C59  0020               	movlb	0	; select bank0
  4629  0C5A  00A4               	movwf	??_getLoad_AD
  4630  0C5B  0824               	movf	??_getLoad_AD,w
  4631  0C5C  07A9               	addwf	getLoad_AD@i,f
  4632  0C5D  2C2F               	goto	L1
  4633  0C5E                     __end_of_getLoad_AD:	
  4634                           
  4635                           	psect	text5
  4636  10BB                     __ptext5:	
  4637 ;; *************** function _getAD *****************
  4638 ;; Defined at:
  4639 ;;		line 455 in file "../src/MCU_B1.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  adcon0          1    wreg     unsigned char 
  4642 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  2    0[BANK0 ] int 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4654 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;Total ram usage:        4 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    6
  4661 ;; This function calls:
  4662 ;;		_Timeout_Counter
  4663 ;;		_set_TimeoutCleared
  4664 ;; This function is called by:
  4665 ;;		_getLoad_AD
  4666 ;;		_getTemp_AD
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           
  4671                           ;psect for function _getAD
  4672  10BB                     _getAD:	
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4676                           ;getAD@adcon0 stored from wreg
  4677  10BB  0020               	movlb	0	; select bank0
  4678  10BC  00A3               	movwf	getAD@adcon0
  4679                           
  4680                           ;MCU_B1.c: 456: ADCON0 = adcon0;
  4681  10BD  0823               	movf	getAD@adcon0,w
  4682  10BE  0021               	movlb	1	; select bank1
  4683  10BF  009D               	movwf	29	;volatile
  4684                           
  4685                           ;MCU_B1.c: 457: ADCON1 = adcon1;
  4686  10C0  0020               	movlb	0	; select bank0
  4687  10C1  0820               	movf	getAD@adcon1,w
  4688  10C2  0021               	movlb	1	; select bank1
  4689  10C3  009E               	movwf	30	;volatile
  4690                           
  4691                           ;MCU_B1.c: 458: GO_nDONE = 1;
  4692  10C4  149D               	bsf	29,1	;volatile
  4693                           
  4694                           ;MCU_B1.c: 459: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4695  10C5  28C9               	goto	l6898
  4696  10C6                     l6896:	
  4697                           
  4698                           ;MCU_B1.c: 460: Timeout_Counter();
  4699  10C6  319F  2732  3190   	fcall	_Timeout_Counter
  4700  10C9                     l6898:	
  4701  10C9  0021               	movlb	1	; select bank1
  4702  10CA  1C9D               	btfss	29,1	;volatile
  4703  10CB  28CE               	goto	l6902
  4704  10CC  1D2C               	btfss	(_myMain^(0+128)+12),2
  4705  10CD  28C6               	goto	l6896
  4706  10CE                     l6902:	
  4707                           
  4708                           ;MCU_B1.c: 461: };
  4709                           ;MCU_B1.c: 462: set_TimeoutCleared();
  4710  10CE  319C  24E5         	fcall	_set_TimeoutCleared
  4711                           
  4712                           ;MCU_B1.c: 463: return ((ADRESH*256)+ADRESL);
  4713  10D0  0021               	movlb	1	; select bank1
  4714  10D1  081C               	movf	28,w	;volatile
  4715  10D2  0020               	movlb	0	; select bank0
  4716  10D3  01A1               	clrf	?_getAD+1
  4717  10D4  07A1               	addwf	?_getAD+1,f
  4718  10D5  0021               	movlb	1	; select bank1
  4719  10D6  081B               	movf	27,w	;volatile
  4720  10D7  0020               	movlb	0	; select bank0
  4721  10D8  01A0               	clrf	?_getAD
  4722  10D9  07A0               	addwf	?_getAD,f
  4723  10DA  0008               	return
  4724  10DB                     __end_of_getAD:	
  4725                           
  4726                           	psect	text6
  4727  1ED2                     __ptext6:	
  4728 ;; *************** function _WDT_Main *****************
  4729 ;; Defined at:
  4730 ;;		line 1058 in file "../src/MCU_B1.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;		None               void
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:        1 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    6
  4751 ;; This function calls:
  4752 ;;		_WDT_Clearing
  4753 ;; This function is called by:
  4754 ;;		_main
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _WDT_Main
  4760  1ED2                     _WDT_Main:	
  4761                           
  4762                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4766  1ED2  0021               	movlb	1	; select bank1
  4767  1ED3  1C4A               	btfss	_WDT^(0+128),0
  4768  1ED4  0008               	return
  4769                           
  4770                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  4771  1ED5  3001               	movlw	1
  4772  1ED6  02CB               	subwf	(_WDT^(0+128)+1),f
  4773  1ED7  084B               	movf	(_WDT^(0+128)+1),w
  4774  1ED8  3AFF               	xorlw	255
  4775  1ED9  1903               	skipnz
  4776  1EDA  0008               	return
  4777                           
  4778                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  4779  1EDB  3064               	movlw	100
  4780  1EDC  0020               	movlb	0	; select bank0
  4781  1EDD  00A0               	movwf	??_WDT_Main
  4782  1EDE  0820               	movf	??_WDT_Main,w
  4783  1EDF  0021               	movlb	1	; select bank1
  4784  1EE0  00CB               	movwf	(_WDT^(0+128)+1)
  4785                           
  4786                           ;MCU_B1.c: 1062: WDT_Clearing();
  4787  1EE1  3180  2002         	fcall	_WDT_Clearing
  4788  1EE3  0008               	return
  4789  1EE4                     __end_of_WDT_Main:	
  4790                           
  4791                           	psect	text7
  4792  0002                     __ptext7:	
  4793 ;; *************** function _WDT_Clearing *****************
  4794 ;; Defined at:
  4795 ;;		line 1068 in file "../src/MCU_B1.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;		None               void
  4802 ;; Registers used:
  4803 ;;		None
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    5
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_WDT_Main
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _WDT_Clearing
  4825  0002                     _WDT_Clearing:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _WDT_Clearing: []
  4829  0002  0064               	clrwdt	;# 
  4830  0003  0008               	return
  4831  0004                     __end_of_WDT_Clearing:	
  4832                           
  4833                           	psect	text8
  4834  1CBE                     __ptext8:	
  4835 ;; *************** function _Temp_Main *****************
  4836 ;; Defined at:
  4837 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;		None               void
  4844 ;; Registers used:
  4845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4855 ;;Total ram usage:        0 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    8
  4858 ;; This function calls:
  4859 ;;		_setTemp_Main
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _Temp_Main
  4867  1CBE                     _Temp_Main:	
  4868                           
  4869                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4873  1CBE  318D  25FE         	fcall	_setTemp_Main
  4874  1CC0  0008               	return
  4875  1CC1                     __end_of_Temp_Main:	
  4876                           
  4877                           	psect	text9
  4878  0DFE                     __ptext9:	
  4879 ;; *************** function _setTemp_Main *****************
  4880 ;; Defined at:
  4881 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;Total ram usage:        2 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    7
  4902 ;; This function calls:
  4903 ;;		_getMain_All_Error_Status
  4904 ;;		_setBuz
  4905 ;; This function is called by:
  4906 ;;		_Temp_Main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _setTemp_Main
  4912  0DFE                     _setTemp_Main:	
  4913                           
  4914                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4918  0DFE  0021               	movlb	1	; select bank1
  4919  0DFF  1C56               	btfss	_Temp^(0+128),0
  4920  0E00  2E9F               	goto	l1686
  4921                           
  4922                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4923  0E01  1956               	btfsc	_Temp^(0+128),2
  4924  0E02  2E12               	goto	l7006
  4925                           
  4926                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4927  0E03  3001               	movlw	1
  4928  0E04  07D7               	addwf	(_Temp^(0+128)+1),f
  4929  0E05  3000               	movlw	0
  4930  0E06  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4931                           
  4932                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4933  0E07  3001               	movlw	1
  4934  0E08  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4935  0E09  30F4               	movlw	244
  4936  0E0A  1903               	skipnz
  4937  0E0B  0257               	subwf	(_Temp^(0+128)+1),w
  4938  0E0C  1C03               	skipc
  4939  0E0D  0008               	return
  4940                           
  4941                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4942  0E0E  01D7               	clrf	(_Temp^(0+128)+1)
  4943  0E0F  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4944                           
  4945                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4946  0E10  1556               	bsf	_Temp^(0+128),2
  4947                           
  4948                           ;OverTemperature_B1.c: 64: }
  4949                           ;OverTemperature_B1.c: 65: } else {
  4950  0E11  0008               	return
  4951  0E12                     l7006:	
  4952                           
  4953                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  4954  0E12  3002               	movlw	2
  4955  0E13  3192  22BC  318D   	fcall	_getMain_All_Error_Status
  4956  0E16  3800               	iorlw	0
  4957  0E17  1D03               	skipz
  4958  0E18  0008               	return
  4959                           
  4960                           ;OverTemperature_B1.c: 67: Temp.Time++;
  4961  0E19  3001               	movlw	1
  4962  0E1A  0021               	movlb	1	; select bank1
  4963  0E1B  07D7               	addwf	(_Temp^(0+128)+1),f
  4964  0E1C  3000               	movlw	0
  4965  0E1D  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4966                           
  4967                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  4968  0E1E  3000               	movlw	0
  4969  0E1F  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4970  0E20  3005               	movlw	5
  4971  0E21  1903               	skipnz
  4972  0E22  0257               	subwf	(_Temp^(0+128)+1),w
  4973  0E23  1C03               	skipc
  4974  0E24  0008               	return
  4975                           
  4976                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  4977  0E25  01D7               	clrf	(_Temp^(0+128)+1)
  4978  0E26  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4979                           
  4980                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  4981  0E27  1E56               	btfss	_Temp^(0+128),4
  4982  0E28  0008               	return
  4983                           
  4984                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  4985  0E29  1156               	bcf	_Temp^(0+128),2
  4986                           
  4987                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4988  0E2A  300A               	movlw	10
  4989  0E2B  3ED6               	addlw	_Temp& (0+255)
  4990  0E2C  0086               	movwf	6
  4991  0E2D  0187               	clrf	7
  4992  0E2E  3008               	movlw	8
  4993  0E2F  3ED6               	addlw	_Temp& (0+255)
  4994  0E30  0084               	movwf	4
  4995  0E31  0185               	clrf	5
  4996  0E32  3F40               	moviw [0]fsr1
  4997  0E33  0700               	addwf	0,w
  4998  0E34  0020               	movlb	0	; select bank0
  4999  0E35  00AD               	movwf	??_setTemp_Main
  5000  0E36  3101               	addfsr 0,1
  5001  0E37  3F41               	moviw [1]fsr1
  5002  0E38  3D00               	addwfc	0,w
  5003  0E39  00AE               	movwf	??_setTemp_Main+1
  5004  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5005  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5006  0E3C  082D               	movf	??_setTemp_Main,w
  5007  0E3D  0021               	movlb	1	; select bank1
  5008  0E3E  00DC               	movwf	(_Temp^(0+128)+6)
  5009  0E3F  0020               	movlb	0	; select bank0
  5010  0E40  082E               	movf	??_setTemp_Main+1,w
  5011  0E41  0021               	movlb	1	; select bank1
  5012  0E42  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5013                           
  5014                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 550;
  5015  0E43  3026               	movlw	38
  5016  0E44  00E4               	movwf	(_Temp^(0+128)+14)
  5017  0E45  3002               	movlw	2
  5018  0E46  00E5               	movwf	(_Temp^(0+128)+15)
  5019                           
  5020                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 500;
  5021  0E47  30F4               	movlw	244
  5022  0E48  00E6               	movwf	(_Temp^(0+128)+16)
  5023  0E49  3001               	movlw	1
  5024  0E4A  00E7               	movwf	(_Temp^(0+128)+17)
  5025                           
  5026                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5027  0E4B  1CD6               	btfss	_Temp^(0+128),1
  5028  0E4C  2E6D               	goto	l7038
  5029                           
  5030                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5031  0E4D  0865               	movf	((_Temp+1)^(0+128)+14),w
  5032  0E4E  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5033  0E4F  1D03               	skipz
  5034  0E50  2E53               	goto	u6465
  5035  0E51  0864               	movf	(_Temp^(0+128)+14),w
  5036  0E52  025C               	subwf	(_Temp^(0+128)+6),w
  5037  0E53                     u6465:	
  5038  0E53  1C03               	skipc
  5039  0E54  2E6B               	goto	l7036
  5040                           
  5041                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5042  0E55  3001               	movlw	1
  5043  0E56  0020               	movlb	0	; select bank0
  5044  0E57  00AD               	movwf	??_setTemp_Main
  5045  0E58  082D               	movf	??_setTemp_Main,w
  5046  0E59  0021               	movlb	1	; select bank1
  5047  0E5A  07D9               	addwf	(_Temp^(0+128)+3),f
  5048                           
  5049                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5050  0E5B  3003               	movlw	3
  5051  0E5C  0259               	subwf	(_Temp^(0+128)+3),w
  5052  0E5D  1C03               	skipc
  5053  0E5E  2E83               	goto	l7050
  5054                           
  5055                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5056  0E5F  01D9               	clrf	(_Temp^(0+128)+3)
  5057                           
  5058                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5059  0E60  10D6               	bcf	_Temp^(0+128),1
  5060                           
  5061                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5062  0E61  3064               	movlw	100
  5063  0E62  0020               	movlb	0	; select bank0
  5064  0E63  00A9               	movwf	setBuz@time
  5065  0E64  3000               	movlw	0
  5066  0E65  00AA               	movwf	setBuz@time+1
  5067  0E66  3002               	movlw	2
  5068  0E67  3197  27A7  318D   	fcall	_setBuz
  5069                           
  5070                           ;OverTemperature_B1.c: 96: }
  5071                           ;OverTemperature_B1.c: 97: } else {
  5072  0E6A  2E83               	goto	l7050
  5073  0E6B                     l7036:	
  5074                           
  5075                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5076  0E6B  0021               	movlb	1	; select bank1
  5077  0E6C  2E82               	goto	l7048
  5078  0E6D                     l7038:	
  5079                           ;OverTemperature_B1.c: 99: }
  5080                           ;OverTemperature_B1.c: 100: } else {
  5081                           
  5082                           
  5083                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5084  0E6D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5085  0E6E  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5086  0E6F  1D03               	skipz
  5087  0E70  2E73               	goto	u6485
  5088  0E71  085C               	movf	(_Temp^(0+128)+6),w
  5089  0E72  0266               	subwf	(_Temp^(0+128)+16),w
  5090  0E73                     u6485:	
  5091  0E73  1C03               	skipc
  5092  0E74  2E82               	goto	l7048
  5093                           
  5094                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5095  0E75  3001               	movlw	1
  5096  0E76  0020               	movlb	0	; select bank0
  5097  0E77  00AD               	movwf	??_setTemp_Main
  5098  0E78  082D               	movf	??_setTemp_Main,w
  5099  0E79  0021               	movlb	1	; select bank1
  5100  0E7A  07D9               	addwf	(_Temp^(0+128)+3),f
  5101                           
  5102                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5103  0E7B  3003               	movlw	3
  5104  0E7C  0259               	subwf	(_Temp^(0+128)+3),w
  5105  0E7D  1C03               	skipc
  5106  0E7E  2E83               	goto	l7050
  5107                           
  5108                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5109  0E7F  01D9               	clrf	(_Temp^(0+128)+3)
  5110                           
  5111                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5112  0E80  14D6               	bsf	_Temp^(0+128),1
  5113                           
  5114                           ;OverTemperature_B1.c: 106: }
  5115                           ;OverTemperature_B1.c: 107: } else {
  5116  0E81  2E83               	goto	l7050
  5117  0E82                     l7048:	
  5118                           
  5119                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5120  0E82  01D9               	clrf	(_Temp^(0+128)+3)
  5121  0E83                     l7050:	
  5122                           
  5123                           ;OverTemperature_B1.c: 109: }
  5124                           ;OverTemperature_B1.c: 110: }
  5125                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5126  0E83  0021               	movlb	1	; select bank1
  5127  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5128  0E85  0020               	movlb	0	; select bank0
  5129  0E86  00AD               	movwf	??_setTemp_Main
  5130  0E87  086E               	movf	_product,w
  5131  0E88  3E18               	addlw	24
  5132  0E89  0086               	movwf	6
  5133  0E8A  3002               	movlw	2	; select bank4/5
  5134  0E8B  0087               	movwf	7
  5135  0E8C  082D               	movf	??_setTemp_Main,w
  5136  0E8D  0081               	movwf	1
  5137                           
  5138                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5139  0E8E  0021               	movlb	1	; select bank1
  5140  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5141  0E90  0020               	movlb	0	; select bank0
  5142  0E91  00AD               	movwf	??_setTemp_Main
  5143  0E92  086E               	movf	_product,w
  5144  0E93  3E19               	addlw	25
  5145  0E94  0086               	movwf	6
  5146  0E95  3002               	movlw	2	; select bank4/5
  5147  0E96  0087               	movwf	7
  5148  0E97  082D               	movf	??_setTemp_Main,w
  5149  0E98  0081               	movwf	1
  5150                           
  5151                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5152  0E99  0021               	movlb	1	; select bank1
  5153  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5154  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5155                           
  5156                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5157  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5158  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5159                           
  5160                           ;OverTemperature_B1.c: 120: }
  5161                           ;OverTemperature_B1.c: 121: }
  5162                           ;OverTemperature_B1.c: 122: }
  5163                           ;OverTemperature_B1.c: 123: }
  5164                           ;OverTemperature_B1.c: 124: } else {
  5165  0E9E  0008               	return
  5166  0E9F                     l1686:	
  5167                           
  5168                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5169  0E9F  1C20               	btfss	_myMain^(0+128),0
  5170  0EA0  0008               	return
  5171                           
  5172                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5173  0EA1  1456               	bsf	_Temp^(0+128),0
  5174  0EA2  0008               	return
  5175  0EA3                     __end_of_setTemp_Main:	
  5176                           
  5177                           	psect	text10
  5178  1CBB                     __ptext10:	
  5179 ;; *************** function _Temp_Initialization *****************
  5180 ;; Defined at:
  5181 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;		None
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;		None               void
  5188 ;; Registers used:
  5189 ;;		status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;Total ram usage:        0 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    6
  5202 ;; This function calls:
  5203 ;;		_setTemp_Initialization
  5204 ;; This function is called by:
  5205 ;;		_main
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           
  5210                           ;psect for function _Temp_Initialization
  5211  1CBB                     _Temp_Initialization:	
  5212                           
  5213                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5217  1CBB  319C  24B1         	fcall	_setTemp_Initialization
  5218  1CBD  0008               	return
  5219  1CBE                     __end_of_Temp_Initialization:	
  5220                           
  5221                           	psect	text11
  5222  1CB1                     __ptext11:	
  5223 ;; *************** function _setTemp_Initialization *****************
  5224 ;; Defined at:
  5225 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;		None
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;		None
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		None
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:        0 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    5
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_Temp_Initialization
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           
  5254                           ;psect for function _setTemp_Initialization
  5255  1CB1                     _setTemp_Initialization:	
  5256                           
  5257                           ;incstack = 0
  5258                           ; Regs used in _setTemp_Initialization: []
  5259  1CB1  0008               	return
  5260  1CB2                     __end_of_setTemp_Initialization:	
  5261                           
  5262                           	psect	text12
  5263  109B                     __ptext12:	
  5264 ;; *************** function _Switch_Main *****************
  5265 ;; Defined at:
  5266 ;;		line 72 in file "../src/Switch_B1.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;		None
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;  error           1   30[BANK0 ] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;		None               void
  5273 ;; Registers used:
  5274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;Total ram usage:        2 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:   11
  5287 ;; This function calls:
  5288 ;;		_TouchPower
  5289 ;;		_getMain_All_Error_Status
  5290 ;;		_setMain_Exception
  5291 ;;		_setSw_Main
  5292 ;; This function is called by:
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _Switch_Main
  5299  109B                     _Switch_Main:	
  5300                           
  5301                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5305  109B  3000               	movlw	0
  5306  109C  3192  22BC  3190   	fcall	_getMain_All_Error_Status
  5307  109F  0020               	movlb	0	; select bank0
  5308  10A0  00BD               	movwf	??_Switch_Main
  5309  10A1  083D               	movf	??_Switch_Main,w
  5310  10A2  00BE               	movwf	Switch_Main@error
  5311                           
  5312                           ;Switch_B1.c: 74: if (error != 0) {
  5313  10A3  083E               	movf	Switch_Main@error,w
  5314  10A4  1903               	btfsc	3,2
  5315  10A5  28AB               	goto	l2379
  5316                           
  5317                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5318  10A6  0021               	movlb	1	; select bank1
  5319  10A7  1851               	btfsc	_SwDetect^(0+128),0
  5320  10A8  28B4               	goto	l7726
  5321                           
  5322                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5323  10A9  1451               	bsf	_SwDetect^(0+128),0
  5324  10AA  28AF               	goto	L2
  5325  10AB                     l2379:	
  5326                           ;Switch_B1.c: 80: }
  5327                           ;Switch_B1.c: 81: } else {
  5328                           
  5329                           ;Switch_B1.c: 78: setMain_Exception(error);
  5330                           
  5331                           
  5332                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5333  10AB  0021               	movlb	1	; select bank1
  5334  10AC  1C51               	btfss	_SwDetect^(0+128),0
  5335  10AD  28B4               	goto	l7726
  5336                           
  5337                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5338  10AE  1051               	bcf	_SwDetect^(0+128),0
  5339  10AF                     L2:	
  5340                           
  5341                           ;Switch_B1.c: 85: setMain_Exception(error);
  5342  10AF  0020               	movlb	0	; select bank0
  5343  10B0  083E               	movf	Switch_Main@error,w
  5344  10B1  3188  20DB  3190   	fcall	_setMain_Exception
  5345  10B4                     l7726:	
  5346                           
  5347                           ;Switch_B1.c: 87: }
  5348                           ;Switch_B1.c: 88: }
  5349                           ;Switch_B1.c: 91: setSw_Main(1);
  5350  10B4  3001               	movlw	1
  5351  10B5  3180  2043  3190   	fcall	_setSw_Main
  5352                           
  5353                           ;Switch_B1.c: 103: TouchPower();
  5354  10B8  3190  2066         	fcall	_TouchPower
  5355  10BA  0008               	return
  5356  10BB                     __end_of_Switch_Main:	
  5357                           
  5358                           	psect	text13
  5359  0043                     __ptext13:	
  5360 ;; *************** function _setSw_Main *****************
  5361 ;; Defined at:
  5362 ;;		line 137 in file "../src/Switch_B1.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;  sw              1    wreg     unsigned char 
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;  sw              1   19[BANK0 ] unsigned char 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;Total ram usage:        3 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    9
  5383 ;; This function calls:
  5384 ;;		_SwPointSelect
  5385 ;;		_getSw_KeyStatus
  5386 ;;		_setBuz
  5387 ;;		_setDimmerLights_AdjControl
  5388 ;;		_setDimmerLights_SwOff
  5389 ;;		_setDimmerLights_SwOn
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  0043                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  0043  0020               	movlb	0	; select bank0
  5404  0044  00B3               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5407  0045  0833               	movf	setSw_Main@sw,w
  5408  0046  319D  258F  3180   	fcall	_SwPointSelect
  5409                           
  5410                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5411  0049  087C               	movf	_Sw,w
  5412  004A  0086               	movwf	6
  5413  004B  3001               	movlw	1	; select bank2/3
  5414  004C  0087               	movwf	7
  5415  004D  1C01               	btfss	1,0
  5416  004E  29A9               	goto	l2389
  5417                           
  5418                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5419  004F  0021               	movlb	1	; select bank1
  5420  0050  1851               	btfsc	_SwDetect^(0+128),0
  5421  0051  286D               	goto	l7180
  5422                           
  5423                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5424  0052  0A7C               	incf	_Sw,w
  5425  0053  0086               	movwf	6
  5426  0054  3001               	movlw	1	; select bank2/3
  5427  0055  0087               	movwf	7
  5428  0056  1081               	bcf	1,1
  5429                           
  5430                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5431  0057  0020               	movlb	0	; select bank0
  5432  0058  0833               	movf	setSw_Main@sw,w
  5433  0059  319E  269D  3180   	fcall	_getSw_KeyStatus
  5434  005C  3A01               	xorlw	1
  5435  005D  3000               	movlw	0
  5436  005E  1903               	skipnz
  5437  005F  3001               	movlw	1
  5438  0060  0020               	movlb	0	; select bank0
  5439  0061  00B1               	movwf	??_setSw_Main
  5440  0062  087C               	movf	_Sw,w
  5441  0063  0086               	movwf	6
  5442  0064  3001               	movlw	1	; select bank2/3
  5443  0065  0087               	movwf	7
  5444  0066  0DB1               	rlf	??_setSw_Main,f
  5445  0067  0801               	movf	1,w
  5446  0068  0631               	xorwf	??_setSw_Main,w
  5447  0069  39FD               	andlw	-3
  5448  006A  0631               	xorwf	??_setSw_Main,w
  5449  006B  0081               	movwf	1
  5450                           
  5451                           ;Switch_B1.c: 143: } else {
  5452  006C  2882               	goto	l2391
  5453  006D                     l7180:	
  5454                           
  5455                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5456  006D  0A7C               	incf	_Sw,w
  5457  006E  0086               	movwf	6
  5458  006F  3001               	movlw	1	; select bank2/3
  5459  0070  0087               	movwf	7
  5460  0071  1881               	btfsc	1,1
  5461  0072  2882               	goto	l2391
  5462                           
  5463                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5464  0073  0A7C               	incf	_Sw,w
  5465  0074  0086               	movwf	6
  5466  0075  3001               	movlw	1	; select bank2/3
  5467  0076  0087               	movwf	7
  5468  0077  1481               	bsf	1,1
  5469                           
  5470                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5471  0078  087C               	movf	_Sw,w
  5472  0079  0086               	movwf	6
  5473  007A  3001               	movlw	1	; select bank2/3
  5474  007B  0087               	movwf	7
  5475  007C  1081               	bcf	1,1
  5476                           
  5477                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5478  007D  087C               	movf	_Sw,w
  5479  007E  0086               	movwf	6
  5480  007F  3001               	movlw	1	; select bank2/3
  5481  0080  0087               	movwf	7
  5482  0081  1501               	bsf	1,2
  5483  0082                     l2391:	
  5484                           
  5485                           ;Switch_B1.c: 148: }
  5486                           ;Switch_B1.c: 149: }
  5487                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5488  0082  087C               	movf	_Sw,w
  5489  0083  0086               	movwf	6
  5490  0084  3001               	movlw	1	; select bank2/3
  5491  0085  0087               	movwf	7
  5492  0086  1C81               	btfss	1,1
  5493  0087  2952               	goto	l7230
  5494                           
  5495                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5496  0088  087C               	movf	_Sw,w
  5497  0089  0086               	movwf	6
  5498  008A  3001               	movlw	1	; select bank2/3
  5499  008B  0087               	movwf	7
  5500  008C  1901               	btfsc	1,2
  5501  008D  28B0               	goto	l7196
  5502                           
  5503                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5504  008E  3001               	movlw	1
  5505  008F  0020               	movlb	0	; select bank0
  5506  0090  00B1               	movwf	??_setSw_Main
  5507  0091  087C               	movf	_Sw,w
  5508  0092  3E02               	addlw	2
  5509  0093  0086               	movwf	6
  5510  0094  3001               	movlw	1	; select bank2/3
  5511  0095  0087               	movwf	7
  5512  0096  0831               	movf	??_setSw_Main,w
  5513  0097  0781               	addwf	1,f
  5514                           
  5515                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5516  0098  087C               	movf	_Sw,w
  5517  0099  3E02               	addlw	2
  5518  009A  0086               	movwf	6
  5519  009B  3001               	movlw	1	; select bank2/3
  5520  009C  0087               	movwf	7
  5521  009D  3005               	movlw	5
  5522  009E  0201               	subwf	1,w
  5523  009F  1C03               	skipc
  5524  00A0  0008               	return
  5525                           
  5526                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5527  00A1  087C               	movf	_Sw,w
  5528  00A2  3E02               	addlw	2
  5529  00A3  0086               	movwf	6
  5530  00A4  3001               	movlw	1	; select bank2/3
  5531  00A5  0087               	movwf	7
  5532  00A6  0181               	clrf	1
  5533                           
  5534                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5535  00A7  087C               	movf	_Sw,w
  5536  00A8  0086               	movwf	6
  5537  00A9  3001               	movlw	1	; select bank2/3
  5538  00AA  0087               	movwf	7
  5539  00AB  1501               	bsf	1,2
  5540                           
  5541                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5542  00AC  0833               	movf	setSw_Main@sw,w
  5543  00AD  3194  2468         	fcall	_setDimmerLights_SwOn
  5544                           
  5545                           ;Switch_B1.c: 162: }
  5546                           ;Switch_B1.c: 163: } else {
  5547  00AF  0008               	return
  5548  00B0                     l7196:	
  5549                           
  5550                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5551  00B0  087C               	movf	_Sw,w
  5552  00B1  0086               	movwf	6
  5553  00B2  3001               	movlw	1	; select bank2/3
  5554  00B3  0087               	movwf	7
  5555  00B4  1981               	btfsc	1,3
  5556  00B5  28E2               	goto	l7206
  5557                           
  5558                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5559  00B6  087C               	movf	_Sw,w
  5560  00B7  3E03               	addlw	3
  5561  00B8  0086               	movwf	6
  5562  00B9  3001               	movlw	1	; select bank2/3
  5563  00BA  0087               	movwf	7
  5564  00BB  3001               	movlw	1
  5565  00BC  0781               	addwf	1,f
  5566  00BD  3141               	addfsr 1,1
  5567  00BE  1803               	skipnc
  5568  00BF  0A81               	incf	1,f
  5569                           
  5570                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5571  00C0  087C               	movf	_Sw,w
  5572  00C1  3E03               	addlw	3
  5573  00C2  0086               	movwf	6
  5574  00C3  3001               	movlw	1	; select bank2/3
  5575  00C4  0087               	movwf	7
  5576  00C5  3F40               	moviw [0]fsr1
  5577  00C6  0020               	movlb	0	; select bank0
  5578  00C7  00B1               	movwf	??_setSw_Main
  5579  00C8  3F41               	moviw [1]fsr1
  5580  00C9  00B2               	movwf	??_setSw_Main+1
  5581  00CA  3000               	movlw	0
  5582  00CB  0232               	subwf	??_setSw_Main+1,w
  5583  00CC  3096               	movlw	150
  5584  00CD  1903               	skipnz
  5585  00CE  0231               	subwf	??_setSw_Main,w
  5586  00CF  1C03               	skipc
  5587  00D0  0008               	return
  5588                           
  5589                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5590  00D1  087C               	movf	_Sw,w
  5591  00D2  3E03               	addlw	3
  5592  00D3  0086               	movwf	6
  5593  00D4  3001               	movlw	1	; select bank2/3
  5594  00D5  0087               	movwf	7
  5595  00D6  3000               	movlw	0
  5596  00D7  3FC0               	movwi [0]fsr1
  5597  00D8  3FC1               	movwi [1]fsr1
  5598                           
  5599                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5600  00D9  087C               	movf	_Sw,w
  5601  00DA  0086               	movwf	6
  5602  00DB  3001               	movlw	1	; select bank2/3
  5603  00DC  0087               	movwf	7
  5604  00DD  1581               	bsf	1,3
  5605                           
  5606                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5607  00DE  0833               	movf	setSw_Main@sw,w
  5608  00DF  3193  2322         	fcall	_setDimmerLights_AdjControl
  5609                           
  5610                           ;Switch_B1.c: 174: }
  5611                           ;Switch_B1.c: 175: } else {
  5612  00E1  0008               	return
  5613  00E2                     l7206:	
  5614                           
  5615                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5616  00E2  087C               	movf	_Sw,w
  5617  00E3  0086               	movwf	6
  5618  00E4  3001               	movlw	1	; select bank2/3
  5619  00E5  0087               	movwf	7
  5620  00E6  1A01               	btfsc	1,4
  5621  00E7  2920               	goto	l7220
  5622                           
  5623                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5624  00E8  087C               	movf	_Sw,w
  5625  00E9  3E05               	addlw	5
  5626  00EA  0086               	movwf	6
  5627  00EB  3001               	movlw	1	; select bank2/3
  5628  00EC  0087               	movwf	7
  5629  00ED  3001               	movlw	1
  5630  00EE  0781               	addwf	1,f
  5631  00EF  3141               	addfsr 1,1
  5632  00F0  1803               	skipnc
  5633  00F1  0A81               	incf	1,f
  5634                           
  5635                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5636  00F2  087C               	movf	_Sw,w
  5637  00F3  3E05               	addlw	5
  5638  00F4  0086               	movwf	6
  5639  00F5  3001               	movlw	1	; select bank2/3
  5640  00F6  0087               	movwf	7
  5641  00F7  3F40               	moviw [0]fsr1
  5642  00F8  0020               	movlb	0	; select bank0
  5643  00F9  00B1               	movwf	??_setSw_Main
  5644  00FA  3F41               	moviw [1]fsr1
  5645  00FB  00B2               	movwf	??_setSw_Main+1
  5646  00FC  3000               	movlw	0
  5647  00FD  0232               	subwf	??_setSw_Main+1,w
  5648  00FE  3096               	movlw	150
  5649  00FF  1903               	skipnz
  5650  0100  0231               	subwf	??_setSw_Main,w
  5651  0101  1C03               	skipc
  5652  0102  0008               	return
  5653                           
  5654                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5655  0103  087C               	movf	_Sw,w
  5656  0104  3E05               	addlw	5
  5657  0105  0086               	movwf	6
  5658  0106  3001               	movlw	1	; select bank2/3
  5659  0107  0087               	movwf	7
  5660  0108  3000               	movlw	0
  5661  0109  3FC0               	movwi [0]fsr1
  5662  010A  3FC1               	movwi [1]fsr1
  5663                           
  5664                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5665  010B  087C               	movf	_Sw,w
  5666  010C  0086               	movwf	6
  5667  010D  3001               	movlw	1	; select bank2/3
  5668  010E  0087               	movwf	7
  5669  010F  1601               	bsf	1,4
  5670                           
  5671                           ;Switch_B1.c: 183: setRF_Learn(1);
  5672  0110  3001               	movlw	1
  5673  0111  319F  271E  3180   	fcall	_setRF_Learn
  5674                           
  5675                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5676  0114  0021               	movlb	1	; select bank1
  5677  0115  1EA0               	btfss	_myMain^(0+128),5
  5678  0116  0008               	return
  5679                           
  5680                           ;Switch_B1.c: 186: setBuz(2, 100);
  5681  0117  3064               	movlw	100
  5682  0118  0020               	movlb	0	; select bank0
  5683  0119  00A9               	movwf	setBuz@time
  5684  011A  3000               	movlw	0
  5685  011B  00AA               	movwf	setBuz@time+1
  5686  011C  3002               	movlw	2
  5687  011D  3197  27A7         	fcall	_setBuz
  5688                           
  5689                           ;Switch_B1.c: 187: }
  5690                           ;Switch_B1.c: 189: }
  5691                           ;Switch_B1.c: 190: } else {
  5692  011F  0008               	return
  5693  0120                     l7220:	
  5694                           
  5695                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5696  0120  087C               	movf	_Sw,w
  5697  0121  0086               	movwf	6
  5698  0122  3001               	movlw	1	; select bank2/3
  5699  0123  0087               	movwf	7
  5700  0124  1A81               	btfsc	1,5
  5701  0125  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5704  0126  087C               	movf	_Sw,w
  5705  0127  3E07               	addlw	7
  5706  0128  0086               	movwf	6
  5707  0129  3001               	movlw	1	; select bank2/3
  5708  012A  0087               	movwf	7
  5709  012B  3001               	movlw	1
  5710  012C  0781               	addwf	1,f
  5711  012D  3141               	addfsr 1,1
  5712  012E  1803               	skipnc
  5713  012F  0A81               	incf	1,f
  5714                           
  5715                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5716  0130  087C               	movf	_Sw,w
  5717  0131  3E07               	addlw	7
  5718  0132  0086               	movwf	6
  5719  0133  3001               	movlw	1	; select bank2/3
  5720  0134  0087               	movwf	7
  5721  0135  3F40               	moviw [0]fsr1
  5722  0136  0020               	movlb	0	; select bank0
  5723  0137  00B1               	movwf	??_setSw_Main
  5724  0138  3F41               	moviw [1]fsr1
  5725  0139  00B2               	movwf	??_setSw_Main+1
  5726  013A  3001               	movlw	1
  5727  013B  0232               	subwf	??_setSw_Main+1,w
  5728  013C  302C               	movlw	44
  5729  013D  1903               	skipnz
  5730  013E  0231               	subwf	??_setSw_Main,w
  5731  013F  1C03               	skipc
  5732  0140  0008               	return
  5733                           
  5734                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5735  0141  087C               	movf	_Sw,w
  5736  0142  3E07               	addlw	7
  5737  0143  0086               	movwf	6
  5738  0144  3001               	movlw	1	; select bank2/3
  5739  0145  0087               	movwf	7
  5740  0146  3000               	movlw	0
  5741  0147  3FC0               	movwi [0]fsr1
  5742  0148  3FC1               	movwi [1]fsr1
  5743                           
  5744                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5745  0149  087C               	movf	_Sw,w
  5746  014A  0086               	movwf	6
  5747  014B  3001               	movlw	1	; select bank2/3
  5748  014C  0087               	movwf	7
  5749  014D  1681               	bsf	1,5
  5750                           
  5751                           ;Switch_B1.c: 198: setRF_Learn(0);
  5752  014E  3000               	movlw	0
  5753  014F  319F  271E         	fcall	_setRF_Learn
  5754                           
  5755                           ;Switch_B1.c: 201: }
  5756                           ;Switch_B1.c: 202: }
  5757                           ;Switch_B1.c: 203: }
  5758                           ;Switch_B1.c: 204: }
  5759                           ;Switch_B1.c: 205: }
  5760                           ;Switch_B1.c: 206: } else {
  5761  0151  0008               	return
  5762  0152                     l7230:	
  5763                           
  5764                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5765  0152  087C               	movf	_Sw,w
  5766  0153  0086               	movwf	6
  5767  0154  3001               	movlw	1	; select bank2/3
  5768  0155  0087               	movwf	7
  5769  0156  1D01               	btfss	1,2
  5770  0157  0008               	return
  5771                           
  5772                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5773  0158  3001               	movlw	1
  5774  0159  0020               	movlb	0	; select bank0
  5775  015A  00B1               	movwf	??_setSw_Main
  5776  015B  087C               	movf	_Sw,w
  5777  015C  3E02               	addlw	2
  5778  015D  0086               	movwf	6
  5779  015E  3001               	movlw	1	; select bank2/3
  5780  015F  0087               	movwf	7
  5781  0160  0831               	movf	??_setSw_Main,w
  5782  0161  0781               	addwf	1,f
  5783                           
  5784                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5785  0162  087C               	movf	_Sw,w
  5786  0163  3E02               	addlw	2
  5787  0164  0086               	movwf	6
  5788  0165  3001               	movlw	1	; select bank2/3
  5789  0166  0087               	movwf	7
  5790  0167  3005               	movlw	5
  5791  0168  0201               	subwf	1,w
  5792  0169  1C03               	skipc
  5793  016A  0008               	return
  5794                           
  5795                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5796  016B  087C               	movf	_Sw,w
  5797  016C  3E02               	addlw	2
  5798  016D  0086               	movwf	6
  5799  016E  3001               	movlw	1	; select bank2/3
  5800  016F  0087               	movwf	7
  5801  0170  0181               	clrf	1
  5802                           
  5803                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5804  0171  087C               	movf	_Sw,w
  5805  0172  0086               	movwf	6
  5806  0173  3001               	movlw	1	; select bank2/3
  5807  0174  0087               	movwf	7
  5808  0175  1101               	bcf	1,2
  5809                           
  5810                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5811  0176  087C               	movf	_Sw,w
  5812  0177  3E03               	addlw	3
  5813  0178  0086               	movwf	6
  5814  0179  3001               	movlw	1	; select bank2/3
  5815  017A  0087               	movwf	7
  5816  017B  3000               	movlw	0
  5817  017C  3FC0               	movwi [0]fsr1
  5818  017D  3FC1               	movwi [1]fsr1
  5819                           
  5820                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5821  017E  087C               	movf	_Sw,w
  5822  017F  0086               	movwf	6
  5823  0180  3001               	movlw	1	; select bank2/3
  5824  0181  0087               	movwf	7
  5825  0182  1181               	bcf	1,3
  5826                           
  5827                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5828  0183  087C               	movf	_Sw,w
  5829  0184  3E05               	addlw	5
  5830  0185  0086               	movwf	6
  5831  0186  3001               	movlw	1	; select bank2/3
  5832  0187  0087               	movwf	7
  5833  0188  3000               	movlw	0
  5834  0189  3FC0               	movwi [0]fsr1
  5835  018A  3FC1               	movwi [1]fsr1
  5836                           
  5837                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5838  018B  087C               	movf	_Sw,w
  5839  018C  0086               	movwf	6
  5840  018D  3001               	movlw	1	; select bank2/3
  5841  018E  0087               	movwf	7
  5842  018F  1201               	bcf	1,4
  5843                           
  5844                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5845  0190  087C               	movf	_Sw,w
  5846  0191  3E07               	addlw	7
  5847  0192  0086               	movwf	6
  5848  0193  3001               	movlw	1	; select bank2/3
  5849  0194  0087               	movwf	7
  5850  0195  3000               	movlw	0
  5851  0196  3FC0               	movwi [0]fsr1
  5852  0197  3FC1               	movwi [1]fsr1
  5853                           
  5854                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5855  0198  087C               	movf	_Sw,w
  5856  0199  0086               	movwf	6
  5857  019A  3001               	movlw	1	; select bank2/3
  5858  019B  0087               	movwf	7
  5859  019C  1281               	bcf	1,5
  5860                           
  5861                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5862  019D  0021               	movlb	1	; select bank1
  5863  019E  1851               	btfsc	_SwDetect^(0+128),0
  5864  019F  29A5               	goto	l7256
  5865                           
  5866                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5867  01A0  0020               	movlb	0	; select bank0
  5868  01A1  0833               	movf	setSw_Main@sw,w
  5869  01A2  3195  2528  3180   	fcall	_setDimmerLights_SwOff
  5870  01A5                     l7256:	
  5871                           
  5872                           ;Switch_B1.c: 221: }
  5873                           ;Switch_B1.c: 224: setRF_Learn(0);
  5874  01A5  3000               	movlw	0
  5875  01A6  319F  271E         	fcall	_setRF_Learn
  5876                           
  5877                           ;Switch_B1.c: 226: }
  5878                           ;Switch_B1.c: 227: }
  5879                           ;Switch_B1.c: 228: }
  5880                           ;Switch_B1.c: 229: } else {
  5881  01A8  0008               	return
  5882  01A9                     l2389:	
  5883                           
  5884                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5885  01A9  0021               	movlb	1	; select bank1
  5886  01AA  1C20               	btfss	_myMain^(0+128),0
  5887  01AB  0008               	return
  5888                           
  5889                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5890  01AC  087C               	movf	_Sw,w
  5891  01AD  0086               	movwf	6
  5892  01AE  3001               	movlw	1	; select bank2/3
  5893  01AF  0087               	movwf	7
  5894  01B0  1401               	bsf	1,0
  5895  01B1  0008               	return
  5896  01B2                     __end_of_setSw_Main:	
  5897                           
  5898                           	psect	text14
  5899  1F1E                     __ptext14:	
  5900 ;; *************** function _setRF_Learn *****************
  5901 ;; Defined at:
  5902 ;;		line 23 in file "../src/RF_Control_B1.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  command         1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  command         1    1[BANK0 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;		None               void
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;Total ram usage:        2 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    5
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_setSw_Main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           
  5931                           ;psect for function _setRF_Learn
  5932  1F1E                     _setRF_Learn:	
  5933                           
  5934                           ;incstack = 0
  5935                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5936                           ;setRF_Learn@command stored from wreg
  5937  1F1E  0020               	movlb	0	; select bank0
  5938  1F1F  00A1               	movwf	setRF_Learn@command
  5939                           
  5940                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5941  1F20  0821               	movf	setRF_Learn@command,w
  5942  1F21  3A01               	xorlw	1
  5943  1F22  3000               	movlw	0
  5944  1F23  1903               	skipnz
  5945  1F24  3001               	movlw	1
  5946  1F25  00A0               	movwf	??_setRF_Learn
  5947  1F26  0EA0               	swapf	??_setRF_Learn,f
  5948  1F27  0DA0               	rlf	??_setRF_Learn,f
  5949  1F28  0DA0               	rlf	??_setRF_Learn,f
  5950  1F29  0021               	movlb	1	; select bank1
  5951  1F2A  083B               	movf	_RF1^(0+128),w
  5952  1F2B  0020               	movlb	0	; select bank0
  5953  1F2C  0620               	xorwf	??_setRF_Learn,w
  5954  1F2D  39BF               	andlw	-65
  5955  1F2E  0620               	xorwf	??_setRF_Learn,w
  5956  1F2F  0021               	movlb	1	; select bank1
  5957  1F30  00BB               	movwf	_RF1^(0+128)
  5958  1F31  0008               	return
  5959  1F32                     __end_of_setRF_Learn:	
  5960                           
  5961                           	psect	text15
  5962  1322                     __ptext15:	
  5963 ;; *************** function _setDimmerLights_AdjControl *****************
  5964 ;; Defined at:
  5965 ;;		line 546 in file "../src/Dimmer_B1.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  sw              1    wreg     unsigned char 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  sw              1    8[BANK0 ] unsigned char 
  5970 ;;  idle            1    6[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        4 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    7
  5987 ;; This function calls:
  5988 ;;		_DimmerLightsPointSelect
  5989 ;;		_getAll_DimmerLights_AdjGO
  5990 ;;		_setDimmerLights_TriggerAdj
  5991 ;; This function is called by:
  5992 ;;		_setSw_Main
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _setDimmerLights_AdjControl
  5998  1322                     _setDimmerLights_AdjControl:	
  5999                           
  6000                           ;incstack = 0
  6001                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6002                           ;setDimmerLights_AdjControl@sw stored from wreg
  6003  1322  0020               	movlb	0	; select bank0
  6004  1323  00A8               	movwf	setDimmerLights_AdjControl@sw
  6005                           
  6006                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6007  1324  0828               	movf	setDimmerLights_AdjControl@sw,w
  6008  1325  319D  2558  3193   	fcall	_DimmerLightsPointSelect
  6009                           
  6010                           ;Dimmer_B1.c: 548: char idle = 0;
  6011  1328  0020               	movlb	0	; select bank0
  6012  1329  01A6               	clrf	setDimmerLights_AdjControl@idle
  6013                           
  6014                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6015  132A  01A7               	clrf	_setDimmerLights_AdjControl$2409
  6016  132B  319D  2538  3193   	fcall	_getAll_DimmerLights_AdjGO
  6017  132E  3A01               	xorlw	1
  6018  132F  1D03               	skipz
  6019  1330  2B37               	goto	l6412
  6020  1331  0022               	movlb	2	; select bank2
  6021  1332  1CBE               	btfss	_Dimmer^(0+256),1
  6022  1333  2B37               	goto	l6412
  6023  1334  0020               	movlb	0	; select bank0
  6024  1335  01A7               	clrf	_setDimmerLights_AdjControl$2409
  6025  1336  0AA7               	incf	_setDimmerLights_AdjControl$2409,f
  6026  1337                     l6412:	
  6027  1337  0020               	movlb	0	; select bank0
  6028  1338  0827               	movf	_setDimmerLights_AdjControl$2409,w
  6029  1339  00A5               	movwf	??_setDimmerLights_AdjControl
  6030  133A  0825               	movf	??_setDimmerLights_AdjControl,w
  6031  133B  00A6               	movwf	setDimmerLights_AdjControl@idle
  6032                           
  6033                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6034  133C  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6035  133D  1D03               	skipz
  6036  133E  0008               	return
  6037                           
  6038                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6039  133F  086F               	movf	_DimmerLights,w
  6040  1340  3E09               	addlw	9
  6041  1341  0086               	movwf	6
  6042  1342  3001               	movlw	1	; select bank2/3
  6043  1343  0087               	movwf	7
  6044  1344  1F01               	btfss	1,6
  6045  1345  0008               	return
  6046                           
  6047                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6048  1346  086F               	movf	_DimmerLights,w
  6049  1347  3E09               	addlw	9
  6050  1348  0086               	movwf	6
  6051  1349  3001               	movlw	1	; select bank2/3
  6052  134A  0087               	movwf	7
  6053  134B  1781               	bsf	1,7
  6054                           
  6055                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6056  134C  086F               	movf	_DimmerLights,w
  6057  134D  0086               	movwf	6
  6058  134E  3001               	movlw	1	; select bank2/3
  6059  134F  0087               	movwf	7
  6060  1350  1681               	bsf	1,5
  6061                           
  6062                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6063  1351  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6064  1352  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6065  1353  0828               	movf	setDimmerLights_AdjControl@sw,w
  6066  1354  3190  207B         	fcall	_setDimmerLights_TriggerAdj
  6067  1356  0008               	return
  6068  1357                     __end_of_setDimmerLights_AdjControl:	
  6069                           
  6070                           	psect	text16
  6071  1E9D                     __ptext16:	
  6072 ;; *************** function _getSw_KeyStatus *****************
  6073 ;; Defined at:
  6074 ;;		line 237 in file "../src/Switch_B1.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sw              1    wreg     unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  sw              1    0[COMMON] unsigned char 
  6079 ;;  status          1    1[BANK0 ] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      unsigned char 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;Total ram usage:        3 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    5
  6096 ;; This function calls:
  6097 ;;		Nothing
  6098 ;; This function is called by:
  6099 ;;		_setSw_Main
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function _getSw_KeyStatus
  6105  1E9D                     _getSw_KeyStatus:	
  6106                           
  6107                           ;Switch_B1.c: 238: char status = 0;
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6111  1E9D  0020               	movlb	0	; select bank0
  6112  1E9E  01A1               	clrf	getSw_KeyStatus@status
  6113                           
  6114                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6115  1E9F  01A2               	clrf	_getSw_KeyStatus$6545
  6116  1EA0  0AA2               	incf	_getSw_KeyStatus$6545,f
  6117  1EA1  1F0C               	btfss	12,6	;volatile
  6118  1EA2  1A0C               	btfsc	12,4	;volatile
  6119  1EA3  2EA8               	goto	l6610
  6120  1EA4  1C0C               	btfss	12,0	;volatile
  6121  1EA5  1B8C               	btfsc	12,7	;volatile
  6122  1EA6  2EA8               	goto	l6610
  6123  1EA7  01A2               	clrf	_getSw_KeyStatus$6545
  6124  1EA8                     l6610:	
  6125  1EA8  0822               	movf	_getSw_KeyStatus$6545,w
  6126  1EA9  00A0               	movwf	??_getSw_KeyStatus
  6127  1EAA  0820               	movf	??_getSw_KeyStatus,w
  6128  1EAB  00A1               	movwf	getSw_KeyStatus@status
  6129                           
  6130                           ;Switch_B1.c: 261: return status;
  6131  1EAC  0821               	movf	getSw_KeyStatus@status,w
  6132  1EAD  0008               	return
  6133  1EAE                     __end_of_getSw_KeyStatus:	
  6134                           
  6135                           	psect	text17
  6136  1D8F                     __ptext17:	
  6137 ;; *************** function _SwPointSelect *****************
  6138 ;; Defined at:
  6139 ;;		line 25 in file "../src/Switch_B1.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  sw              1    wreg     unsigned char 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  sw              1    1[BANK0 ] unsigned char 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;Total ram usage:        2 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    5
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		_setSw_Main
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           
  6168                           ;psect for function _SwPointSelect
  6169  1D8F                     _SwPointSelect:	
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _SwPointSelect: [wreg]
  6173                           ;SwPointSelect@sw stored from wreg
  6174  1D8F  0020               	movlb	0	; select bank0
  6175  1D90  00A1               	movwf	SwPointSelect@sw
  6176                           
  6177                           ;Switch_B1.c: 28: if (sw == 1) {
  6178  1D91  0821               	movf	SwPointSelect@sw,w
  6179  1D92  3A01               	xorlw	1
  6180  1D93  1D03               	skipz
  6181  1D94  0008               	return
  6182                           
  6183                           ;Switch_B1.c: 29: Sw = &Sw1;
  6184  1D95  30D4               	movlw	_Sw1& (0+255)
  6185  1D96  00A0               	movwf	??_SwPointSelect
  6186  1D97  0820               	movf	??_SwPointSelect,w
  6187  1D98  00FC               	movwf	_Sw
  6188  1D99  0008               	return
  6189  1D9A                     __end_of_SwPointSelect:	
  6190                           
  6191                           	psect	text18
  6192  08DB                     __ptext18:	
  6193 ;; *************** function _setMain_Exception *****************
  6194 ;; Defined at:
  6195 ;;		line 282 in file "../src/Main_B1.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  command         1    wreg     unsigned char 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  command         1   28[BANK0 ] unsigned char 
  6200 ;;  status          1   27[BANK0 ] unsigned char 
  6201 ;;  buz             1   24[BANK0 ] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        7 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:   10
  6218 ;; This function calls:
  6219 ;;		_getDimmerLights_Line
  6220 ;;		_getMain_LightsStatus
  6221 ;;		_setBuz
  6222 ;;		_setDimmerLights_ErrorClose
  6223 ;;		_setLED
  6224 ;; This function is called by:
  6225 ;;		_Switch_Main
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function _setMain_Exception
  6231  08DB                     _setMain_Exception:	
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6235                           ;setMain_Exception@command stored from wreg
  6236  08DB  0020               	movlb	0	; select bank0
  6237  08DC  00BC               	movwf	setMain_Exception@command
  6238                           
  6239                           ;Main_B1.c: 283: char status = 0, buz = 0;
  6240  08DD  01BB               	clrf	setMain_Exception@status
  6241  08DE  01B8               	clrf	setMain_Exception@buz
  6242                           
  6243                           ;Main_B1.c: 300: status = command == 3 ? getDimmerLights_Line() : 255;
  6244  08DF  083C               	movf	setMain_Exception@command,w
  6245  08E0  3A03               	xorlw	3
  6246  08E1  1903               	skipnz
  6247  08E2  28E7               	goto	l6940
  6248  08E3  30FF               	movlw	255
  6249  08E4  00B9               	movwf	_setMain_Exception$3732
  6250  08E5  3000               	movlw	0
  6251  08E6  28F0               	goto	L3
  6252  08E7                     l6940:	
  6253  08E7  319D  2584  3188   	fcall	_getDimmerLights_Line
  6254  08EA  0020               	movlb	0	; select bank0
  6255  08EB  00B6               	movwf	??_setMain_Exception
  6256  08EC  01B7               	clrf	??_setMain_Exception+1
  6257  08ED  0836               	movf	??_setMain_Exception,w
  6258  08EE  00B9               	movwf	_setMain_Exception$3732
  6259  08EF  0837               	movf	??_setMain_Exception+1,w
  6260  08F0                     L3:	
  6261  08F0  00BA               	movwf	_setMain_Exception$3732+1
  6262  08F1  0839               	movf	_setMain_Exception$3732,w
  6263  08F2  00B6               	movwf	??_setMain_Exception
  6264  08F3  0836               	movf	??_setMain_Exception,w
  6265  08F4  00BB               	movwf	setMain_Exception@status
  6266                           
  6267                           ;Main_B1.c: 302: if (command == 0) {
  6268  08F5  08BC               	movf	setMain_Exception@command,f
  6269  08F6  1D03               	skipz
  6270  08F7  28FA               	goto	l6948
  6271                           
  6272                           ;Main_B1.c: 303: setLED(99, 10);
  6273  08F8  300A               	movlw	10
  6274  08F9  28FC               	goto	L4
  6275  08FA                     l6948:	
  6276                           ;Main_B1.c: 304: } else {
  6277                           
  6278                           
  6279                           ;Main_B1.c: 305: setLED(99, 11);
  6280  08FA  300B               	movlw	11
  6281  08FB  0020               	movlb	0	; select bank0
  6282  08FC                     L4:	
  6283  08FC  00B6               	movwf	??_setMain_Exception
  6284  08FD  0836               	movf	??_setMain_Exception,w
  6285  08FE  00A2               	movwf	setLED@command
  6286  08FF  3063               	movlw	99
  6287  0900  3193  2357  3188   	fcall	_setLED
  6288                           
  6289                           ;Main_B1.c: 306: }
  6290                           ;Main_B1.c: 308: if (command != 0) {
  6291  0903  0020               	movlb	0	; select bank0
  6292  0904  083C               	movf	setMain_Exception@command,w
  6293  0905  1903               	btfsc	3,2
  6294  0906  0008               	return
  6295                           
  6296                           ;Main_B1.c: 309: switch (command) {
  6297  0907  2928               	goto	l6964
  6298  0908                     l6954:	
  6299                           ;Main_B1.c: 310: case 2:
  6300                           
  6301                           
  6302                           ;Main_B1.c: 311: if (getMain_LightsStatus() == 1) {
  6303  0908  3192  2200  3188   	fcall	_getMain_LightsStatus
  6304  090B  3A01               	xorlw	1
  6305  090C  1D03               	skipz
  6306  090D  2931               	goto	l6966
  6307                           
  6308                           ;Main_B1.c: 312: setBuz(10, 300);
  6309  090E  302C               	movlw	44
  6310  090F  0020               	movlb	0	; select bank0
  6311  0910  00A9               	movwf	setBuz@time
  6312  0911  3001               	movlw	1
  6313  0912  00AA               	movwf	setBuz@time+1
  6314  0913  300A               	movlw	10
  6315  0914  3197  27A7  3188   	fcall	_setBuz
  6316                           
  6317                           ;Main_B1.c: 313: }
  6318                           ;Main_B1.c: 314: break;
  6319  0917  2931               	goto	l6966
  6320  0918                     l6958:	
  6321                           ;Main_B1.c: 315: case 3:
  6322                           
  6323                           
  6324                           ;Main_B1.c: 316: if (getMain_LightsStatus() == 1) {
  6325  0918  3192  2200  3188   	fcall	_getMain_LightsStatus
  6326  091B  3A01               	xorlw	1
  6327  091C  1D03               	skipz
  6328  091D  2931               	goto	l6966
  6329                           
  6330                           ;Main_B1.c: 317: setBuz(5, 300);
  6331  091E  302C               	movlw	44
  6332  091F  0020               	movlb	0	; select bank0
  6333  0920  00A9               	movwf	setBuz@time
  6334  0921  3001               	movlw	1
  6335  0922  00AA               	movwf	setBuz@time+1
  6336  0923  3005               	movlw	5
  6337  0924  3197  27A7  3188   	fcall	_setBuz
  6338                           
  6339                           ;Main_B1.c: 320: }
  6340                           
  6341                           ;Main_B1.c: 318: }
  6342                           ;Main_B1.c: 319: break;
  6343  0927  2931               	goto	l6966
  6344  0928                     l6964:	
  6345  0928  0020               	movlb	0	; select bank0
  6346  0929  083C               	movf	setMain_Exception@command,w
  6347                           
  6348                           ; Switch size 1, requested type "space"
  6349                           ; Number of cases is 2, Range of values is 2 to 3
  6350                           ; switch strategies available:
  6351                           ; Name         Instructions Cycles
  6352                           ; simple_byte            7     4 (average)
  6353                           ; direct_byte           13     9 (fixed)
  6354                           ; jumptable            263     9 (fixed)
  6355                           ;	Chosen strategy is simple_byte
  6356  092A  3A02               	xorlw	2	; case 2
  6357  092B  1903               	skipnz
  6358  092C  2908               	goto	l6954
  6359  092D  3A01               	xorlw	1	; case 3
  6360  092E  1903               	skipnz
  6361  092F  2918               	goto	l6958
  6362  0930  2931               	goto	l6966
  6363  0931                     l6966:	
  6364                           
  6365                           ;Main_B1.c: 321: setDimmerLights_ErrorClose(status);
  6366  0931  0020               	movlb	0	; select bank0
  6367  0932  083B               	movf	setMain_Exception@status,w
  6368  0933  3196  26F7         	fcall	_setDimmerLights_ErrorClose
  6369  0935  0020               	movlb	0	; select bank0
  6370  0936  0008               	return
  6371  0937                     __end_of_setMain_Exception:	
  6372                           
  6373                           	psect	text19
  6374  1D84                     __ptext19:	
  6375 ;; *************** function _getDimmerLights_Line *****************
  6376 ;; Defined at:
  6377 ;;		line 695 in file "../src/Dimmer_B1.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  line            1    0[BANK0 ] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      unsigned char 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;Total ram usage:        1 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    5
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_setMain_Exception
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _getDimmerLights_Line
  6407  1D84                     _getDimmerLights_Line:	
  6408                           
  6409                           ;Dimmer_B1.c: 696: char line = 0;
  6410                           
  6411                           ;incstack = 0
  6412                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6413  1D84  0020               	movlb	0	; select bank0
  6414  1D85  01A0               	clrf	getDimmerLights_Line@line
  6415                           
  6416                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6417  1D86  0023               	movlb	3	; select bank3
  6418  1D87  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6419  1D88  2D8C               	goto	l6434
  6420                           
  6421                           ;Dimmer_B1.c: 699: line = 1;
  6422  1D89  0020               	movlb	0	; select bank0
  6423  1D8A  01A0               	clrf	getDimmerLights_Line@line
  6424  1D8B  0AA0               	incf	getDimmerLights_Line@line,f
  6425  1D8C                     l6434:	
  6426                           
  6427                           ;Dimmer_B1.c: 700: }
  6428                           ;Dimmer_B1.c: 712: return line;
  6429  1D8C  0020               	movlb	0	; select bank0
  6430  1D8D  0820               	movf	getDimmerLights_Line@line,w
  6431  1D8E  0008               	return
  6432  1D8F                     __end_of_getDimmerLights_Line:	
  6433                           
  6434                           	psect	text20
  6435  1D25                     __ptext20:	
  6436 ;; *************** function _Switch_Initialization *****************
  6437 ;; Defined at:
  6438 ;;		line 46 in file "../src/Switch_B1.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;		None               void
  6445 ;; Registers used:
  6446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    8
  6459 ;; This function calls:
  6460 ;;		_TouchPower
  6461 ;;		_setSw_Initialization
  6462 ;; This function is called by:
  6463 ;;		_main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           
  6468                           ;psect for function _Switch_Initialization
  6469  1D25                     _Switch_Initialization:	
  6470                           
  6471                           ;Switch_B1.c: 47: TouchPower();
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6475  1D25  3190  2066  319D   	fcall	_TouchPower
  6476                           
  6477                           ;Switch_B1.c: 49: WPUB1 = 0;
  6478  1D28  0024               	movlb	4	; select bank4
  6479  1D29  108D               	bcf	13,1	;volatile
  6480                           
  6481                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6482  1D2A  3001               	movlw	1
  6483  1D2B  319E  265A         	fcall	_setSw_Initialization
  6484  1D2D  0008               	return
  6485  1D2E                     __end_of_Switch_Initialization:	
  6486                           
  6487                           	psect	text21
  6488  1E5A                     __ptext21:	
  6489 ;; *************** function _setSw_Initialization *****************
  6490 ;; Defined at:
  6491 ;;		line 109 in file "../src/Switch_B1.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  sw              1    wreg     unsigned char 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  sw              1    4[BANK0 ] unsigned char 
  6496 ;; Return value:  Size  Location     Type
  6497 ;;		None               void
  6498 ;; Registers used:
  6499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;Total ram usage:        1 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    7
  6512 ;; This function calls:
  6513 ;;		_setLED
  6514 ;; This function is called by:
  6515 ;;		_Switch_Initialization
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _setSw_Initialization
  6521  1E5A                     _setSw_Initialization:	
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6525                           ;setSw_Initialization@sw stored from wreg
  6526  1E5A  0020               	movlb	0	; select bank0
  6527  1E5B  00A4               	movwf	setSw_Initialization@sw
  6528                           
  6529                           ;Switch_B1.c: 110: setLED(sw, 1);
  6530  1E5C  01A2               	clrf	setLED@command
  6531  1E5D  0AA2               	incf	setLED@command,f
  6532  1E5E  0824               	movf	setSw_Initialization@sw,w
  6533  1E5F  3193  2357  319E   	fcall	_setLED
  6534                           
  6535                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6536  1E62  0020               	movlb	0	; select bank0
  6537  1E63  01A2               	clrf	setLED@command
  6538  1E64  0AA2               	incf	setLED@command,f
  6539  1E65  0824               	movf	setSw_Initialization@sw,w
  6540  1E66  3E01               	addlw	1
  6541  1E67  3193  2357         	fcall	_setLED
  6542  1E69  0008               	return
  6543  1E6A                     __end_of_setSw_Initialization:	
  6544                           
  6545                           	psect	text22
  6546  1066                     __ptext22:	
  6547 ;; *************** function _TouchPower *****************
  6548 ;; Defined at:
  6549 ;;		line 10 in file "../src/Switch_B1.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    6
  6570 ;; This function calls:
  6571 ;;		_Timeout_Counter
  6572 ;;		_set_TimeoutCleared
  6573 ;; This function is called by:
  6574 ;;		_Switch_Initialization
  6575 ;;		_Switch_Main
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _TouchPower
  6581  1066                     _TouchPower:	
  6582                           
  6583                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6587  1066  0020               	movlb	0	; select bank0
  6588  1067  180D               	btfsc	13,0	;volatile
  6589  1068  0008               	return
  6590                           
  6591                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6592  1069  0021               	movlb	1	; select bank1
  6593  106A  1C20               	btfss	_myMain^(0+128),0
  6594  106B  0008               	return
  6595  106C  2872               	goto	l7162
  6596  106D                     l2365:	
  6597                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6598                           
  6599                           
  6600                           ;Switch_B1.c: 14: RB0 = 1;
  6601  106D  0020               	movlb	0	; select bank0
  6602  106E  140D               	bsf	13,0	;volatile
  6603                           
  6604                           ;Switch_B1.c: 15: Timeout_Counter();
  6605  106F  319F  2732  3190   	fcall	_Timeout_Counter
  6606  1072                     l7162:	
  6607  1072  0020               	movlb	0	; select bank0
  6608  1073  180D               	btfsc	13,0	;volatile
  6609  1074  2878               	goto	l7166
  6610  1075  0021               	movlb	1	; select bank1
  6611  1076  1D2C               	btfss	(_myMain^(0+128)+12),2
  6612  1077  286D               	goto	l2365
  6613  1078                     l7166:	
  6614                           
  6615                           ;Switch_B1.c: 16: }
  6616                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6617  1078  319C  24E5         	fcall	_set_TimeoutCleared
  6618  107A  0008               	return
  6619  107B                     __end_of_TouchPower:	
  6620                           
  6621                           	psect	text23
  6622  1CB8                     __ptext23:	
  6623 ;; *************** function _RF_Main *****************
  6624 ;; Defined at:
  6625 ;;		line 16 in file "../src/RF_Control_B1.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;		None
  6630 ;; Return value:  Size  Location     Type
  6631 ;;		None               void
  6632 ;; Registers used:
  6633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        0 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:   14
  6646 ;; This function calls:
  6647 ;;		_setRF_Main
  6648 ;; This function is called by:
  6649 ;;		_main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _RF_Main
  6655  1CB8                     _RF_Main:	
  6656                           
  6657                           ;RF_Control_B1.c: 18: setRF_Main();
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6661  1CB8  3186  260E         	fcall	_setRF_Main
  6662  1CBA  0008               	return
  6663  1CBB                     __end_of_RF_Main:	
  6664                           
  6665                           	psect	text24
  6666  060E                     __ptext24:	
  6667 ;; *************** function _setRF_Main *****************
  6668 ;; Defined at:
  6669 ;;		line 52 in file "../src/RF_Control_B1.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  error           1    2[BANK1 ] unsigned char 
  6674 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6675 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;		None               void
  6678 ;; Registers used:
  6679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;Total ram usage:        4 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:   13
  6692 ;; This function calls:
  6693 ;;		_CC2500_TxData
  6694 ;;		_RF_RxDisable
  6695 ;;		_getBuz_GO
  6696 ;;		_getMain_All_Error_Status
  6697 ;;		_getRF_KeyStatus
  6698 ;;		_getRxData
  6699 ;; This function is called by:
  6700 ;;		_RF_Main
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _setRF_Main
  6706  060E                     _setRF_Main:	
  6707                           
  6708                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6712  060E  0021               	movlb	1	; select bank1
  6713  060F  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6714  0610  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6715  0611  01EA               	clrf	setRF_Main@error^(0+128)
  6716                           
  6717                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6718  0612  1C3B               	btfss	_RF1^(0+128),0
  6719  0613  2ED2               	goto	l2001
  6720                           
  6721                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6722  0614  319E  267B  3186   	fcall	_getBuz_GO
  6723  0617  0020               	movlb	0	; select bank0
  6724  0618  0821               	movf	?_getBuz_GO+1,w
  6725  0619  0420               	iorwf	?_getBuz_GO,w
  6726  061A  1D03               	skipz
  6727  061B  0008               	return
  6728                           
  6729                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6730  061C  3000               	movlw	0
  6731  061D  3192  22BC  3186   	fcall	_getMain_All_Error_Status
  6732  0620  3800               	iorlw	0
  6733  0621  1D03               	skipz
  6734  0622  2E37               	goto	l2003
  6735                           
  6736                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6737  0623  319E  268C  3186   	fcall	_getRF_KeyStatus
  6738  0626  3A01               	xorlw	1
  6739  0627  3000               	movlw	0
  6740  0628  1903               	skipnz
  6741  0629  3001               	movlw	1
  6742  062A  0020               	movlb	0	; select bank0
  6743  062B  00ED               	movwf	??_setRF_Main
  6744  062C  0CED               	rrf	??_setRF_Main,f
  6745  062D  0CED               	rrf	??_setRF_Main,f
  6746  062E  0021               	movlb	1	; select bank1
  6747  062F  083B               	movf	_RF1^(0+128),w
  6748  0630  0020               	movlb	0	; select bank0
  6749  0631  066D               	xorwf	??_setRF_Main,w
  6750  0632  397F               	andlw	-129
  6751  0633  066D               	xorwf	??_setRF_Main,w
  6752  0634  0021               	movlb	1	; select bank1
  6753  0635  00BB               	movwf	_RF1^(0+128)
  6754                           
  6755                           ;RF_Control_B1.c: 65: } else {
  6756  0636  2E39               	goto	l2004
  6757  0637                     l2003:	
  6758                           
  6759                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6760  0637  0021               	movlb	1	; select bank1
  6761  0638  13BB               	bcf	_RF1^(0+128),7
  6762  0639                     l2004:	
  6763                           
  6764                           ;RF_Control_B1.c: 70: }
  6765                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6766  0639  1BBB               	btfsc	_RF1^(0+128),7
  6767  063A  1B3B               	btfsc	_RF1^(0+128),6
  6768  063B  2E41               	goto	l2005
  6769                           
  6770                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6771  063C  01BD               	clrf	(_RF1^(0+128)+2)
  6772  063D  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6773                           
  6774                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6775  063E  14BC               	bsf	(_RF1^(0+128)+1),1
  6776                           
  6777                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6778  063F  11BB               	bcf	_RF1^(0+128),3
  6779                           
  6780                           ;RF_Control_B1.c: 76: } else {
  6781  0640  0008               	return
  6782  0641                     l2005:	
  6783                           
  6784                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6785  0641  18BC               	btfsc	(_RF1^(0+128)+1),1
  6786  0642  1B3B               	btfsc	_RF1^(0+128),6
  6787  0643  2E58               	goto	l7088
  6788                           
  6789                           ;RF_Control_B1.c: 78: RF1.Count++;
  6790  0644  3001               	movlw	1
  6791  0645  07BD               	addwf	(_RF1^(0+128)+2),f
  6792  0646  3000               	movlw	0
  6793  0647  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6794                           
  6795                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6796  0648  3002               	movlw	2
  6797  0649  3EBB               	addlw	_RF1& (0+255)
  6798  064A  0086               	movwf	6
  6799  064B  0187               	clrf	7
  6800  064C  3F40               	moviw [0]fsr1
  6801  064D  0642               	xorwf	(_RF1^(0+128)+7),w
  6802  064E  1D03               	skipz
  6803  064F  2E52               	goto	u6585
  6804  0650  3F41               	moviw [1]fsr1
  6805  0651  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6806  0652                     u6585:	
  6807  0652  1D03               	skipz
  6808  0653  2E9F               	goto	l2009
  6809                           
  6810                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6811  0654  01BD               	clrf	(_RF1^(0+128)+2)
  6812  0655  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6813                           
  6814                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6815  0656  10BC               	bcf	(_RF1^(0+128)+1),1
  6816                           
  6817                           ;RF_Control_B1.c: 82: }
  6818                           ;RF_Control_B1.c: 83: } else {
  6819  0657  2E9F               	goto	l2009
  6820  0658                     l7088:	
  6821                           
  6822                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6823  0658  01BD               	clrf	(_RF1^(0+128)+2)
  6824  0659  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6825                           
  6826                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6827  065A  10BC               	bcf	(_RF1^(0+128)+1),1
  6828                           
  6829                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6830  065B  193B               	btfsc	_RF1^(0+128),2
  6831  065C  1B3B               	btfsc	_RF1^(0+128),6
  6832  065D  2E6C               	goto	l2010
  6833                           
  6834                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6835  065E  113B               	bcf	_RF1^(0+128),2
  6836                           
  6837                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6838  065F  11BB               	bcf	_RF1^(0+128),3
  6839                           
  6840                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6841  0660  10BB               	bcf	_RF1^(0+128),1
  6842                           
  6843                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6844  0661  300A               	movlw	10
  6845  0662  00C2               	movwf	(_RF1^(0+128)+7)
  6846  0663  3000               	movlw	0
  6847  0664  00C3               	movwf	(_RF1^(0+128)+8)
  6848                           
  6849                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6850  0665  319E  260C  3186   	fcall	_RF_RxDisable
  6851                           
  6852                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6853  0668  318A  22B2  3186   	fcall	_CC2500_TxData
  6854                           
  6855                           ;RF_Control_B1.c: 106: } else {
  6856  066B  2E9F               	goto	l2009
  6857  066C                     l2010:	
  6858                           
  6859                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6860  066C  19BB               	btfsc	_RF1^(0+128),3
  6861                           
  6862                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6863  066D  1CBB               	btfss	_RF1^(0+128),1
  6864  066E  2E9F               	goto	l2009
  6865                           
  6866                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6867  066F  10BB               	bcf	_RF1^(0+128),1
  6868                           
  6869                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6870  0670  12BC               	bcf	(_RF1^(0+128)+1),5
  6871                           
  6872                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6873  0671  01C5               	clrf	(_RF1^(0+128)+10)
  6874  0672  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6875                           
  6876                           ;RF_Control_B1.c: 126: getRxData();
  6877  0673  318D  256E  3186   	fcall	_getRxData
  6878                           
  6879                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6880  0676  0021               	movlb	1	; select bank1
  6881  0677  14BC               	bsf	(_RF1^(0+128)+1),1
  6882                           
  6883                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  6884  0678  1DBC               	btfss	(_RF1^(0+128)+1),3
  6885  0679  2E87               	goto	l7122
  6886                           
  6887                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  6888  067A  3000               	movlw	0
  6889  067B  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6890  067C  300B               	movlw	11
  6891  067D  1903               	skipnz
  6892  067E  0242               	subwf	(_RF1^(0+128)+7),w
  6893  067F  1C03               	skipc
  6894  0680  2E85               	goto	l7120
  6895                           
  6896                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  6897  0681  300A               	movlw	10
  6898  0682  00C2               	movwf	(_RF1^(0+128)+7)
  6899  0683  3000               	movlw	0
  6900  0684  00C3               	movwf	(_RF1^(0+128)+8)
  6901  0685                     l7120:	
  6902                           
  6903                           ;RF_Control_B1.c: 132: }
  6904                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  6905  0685  01BF               	clrf	(_RF1^(0+128)+4)
  6906                           
  6907                           ;RF_Control_B1.c: 134: } else {
  6908  0686  2E9F               	goto	l2009
  6909  0687                     l7122:	
  6910                           
  6911                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  6912  0687  3001               	movlw	1
  6913  0688  0020               	movlb	0	; select bank0
  6914  0689  00ED               	movwf	??_setRF_Main
  6915  068A  086D               	movf	??_setRF_Main,w
  6916  068B  0021               	movlb	1	; select bank1
  6917  068C  07BF               	addwf	(_RF1^(0+128)+4),f
  6918                           
  6919                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  6920  068D  083F               	movf	(_RF1^(0+128)+4),w
  6921  068E  3A02               	xorlw	2
  6922  068F  1D03               	skipz
  6923  0690  2E9F               	goto	l2009
  6924                           
  6925                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  6926  0691  01BF               	clrf	(_RF1^(0+128)+4)
  6927                           
  6928                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  6929  0692  01C0               	clrf	(_RF1^(0+128)+5)
  6930  0693  01C1               	clrf	((_RF1+1)^(0+128)+5)
  6931                           
  6932                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  6933  0694  3000               	movlw	0
  6934  0695  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6935  0696  30C8               	movlw	200
  6936  0697  1903               	skipnz
  6937  0698  0242               	subwf	(_RF1^(0+128)+7),w
  6938  0699  1803               	skipnc
  6939  069A  2E9F               	goto	l2009
  6940                           
  6941                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  6942  069B  300A               	movlw	10
  6943  069C  07C2               	addwf	(_RF1^(0+128)+7),f
  6944  069D  3000               	movlw	0
  6945  069E  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  6946  069F                     l2009:	
  6947                           ;RF_Control_B1.c: 141: }
  6948                           ;RF_Control_B1.c: 142: }
  6949                           ;RF_Control_B1.c: 143: }
  6950                           ;RF_Control_B1.c: 144: }
  6951                           ;RF_Control_B1.c: 145: } else {
  6952                           
  6953                           
  6954                           ;RF_Control_B1.c: 157: }
  6955                           ;RF_Control_B1.c: 158: }
  6956                           ;RF_Control_B1.c: 159: }
  6957                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  6958  069F  0021               	movlb	1	; select bank1
  6959  06A0  1DBB               	btfss	_RF1^(0+128),3
  6960  06A1  2EC0               	goto	l7142
  6961                           
  6962                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  6963  06A2  3001               	movlw	1
  6964  06A3  07C0               	addwf	(_RF1^(0+128)+5),f
  6965  06A4  3000               	movlw	0
  6966  06A5  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  6967                           
  6968                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  6969  06A6  3005               	movlw	5
  6970  06A7  3EBB               	addlw	_RF1& (0+255)
  6971  06A8  0086               	movwf	6
  6972  06A9  0187               	clrf	7
  6973  06AA  3F40               	moviw [0]fsr1
  6974  06AB  3A64               	xorlw	100
  6975  06AC  1D03               	skipz
  6976  06AD  2EB0               	goto	u6685
  6977  06AE  3F41               	moviw [1]fsr1
  6978  06AF  3A00               	xorlw	0
  6979  06B0                     u6685:	
  6980  06B0  1D03               	skipz
  6981  06B1  2EC0               	goto	l7142
  6982                           
  6983                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  6984  06B2  01C0               	clrf	(_RF1^(0+128)+5)
  6985  06B3  01C1               	clrf	((_RF1+1)^(0+128)+5)
  6986                           
  6987                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  6988  06B4  01BF               	clrf	(_RF1^(0+128)+4)
  6989                           
  6990                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  6991  06B5  3000               	movlw	0
  6992  06B6  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6993  06B7  300B               	movlw	11
  6994  06B8  1903               	skipnz
  6995  06B9  0242               	subwf	(_RF1^(0+128)+7),w
  6996  06BA  1C03               	skipc
  6997  06BB  2EC0               	goto	l7142
  6998                           
  6999                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7000  06BC  300A               	movlw	10
  7001  06BD  02C2               	subwf	(_RF1^(0+128)+7),f
  7002  06BE  3000               	movlw	0
  7003  06BF  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7004  06C0                     l7142:	
  7005                           
  7006                           ;RF_Control_B1.c: 167: }
  7007                           ;RF_Control_B1.c: 168: }
  7008                           ;RF_Control_B1.c: 169: }
  7009                           ;RF_Control_B1.c: 170: if (RF1.Correction == 1) {
  7010  06C0  1EBC               	btfss	(_RF1^(0+128)+1),5
  7011  06C1  0008               	return
  7012                           
  7013                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter++;
  7014  06C2  3001               	movlw	1
  7015  06C3  07C5               	addwf	(_RF1^(0+128)+10),f
  7016  06C4  3000               	movlw	0
  7017  06C5  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7018                           
  7019                           ;RF_Control_B1.c: 172: if (RF1.CorrectionCounter >= 30000) {
  7020  06C6  3075               	movlw	117
  7021  06C7  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7022  06C8  3030               	movlw	48
  7023  06C9  1903               	skipnz
  7024  06CA  0245               	subwf	(_RF1^(0+128)+10),w
  7025  06CB  1C03               	skipc
  7026  06CC  0008               	return
  7027                           
  7028                           ;RF_Control_B1.c: 173: RF1.CorrectionCounter = 0;
  7029  06CD  01C5               	clrf	(_RF1^(0+128)+10)
  7030  06CE  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7031                           
  7032                           ;RF_Control_B1.c: 174: RF1.RxStatus = 0;
  7033  06CF  11BB               	bcf	_RF1^(0+128),3
  7034                           
  7035                           ;RF_Control_B1.c: 175: RF1.ReceiveGO = 0;
  7036  06D0  10BB               	bcf	_RF1^(0+128),1
  7037                           
  7038                           ;RF_Control_B1.c: 176: }
  7039                           ;RF_Control_B1.c: 177: }
  7040                           ;RF_Control_B1.c: 178: }
  7041                           ;RF_Control_B1.c: 179: }
  7042                           ;RF_Control_B1.c: 186: } else {
  7043  06D1  0008               	return
  7044  06D2                     l2001:	
  7045                           
  7046                           ;RF_Control_B1.c: 187: if (myMain.PowerON == 1) {
  7047  06D2  1C20               	btfss	_myMain^(0+128),0
  7048  06D3  0008               	return
  7049                           
  7050                           ;RF_Control_B1.c: 188: RF1.Enable = 1;
  7051  06D4  143B               	bsf	_RF1^(0+128),0
  7052  06D5  0008               	return
  7053  06D6                     __end_of_setRF_Main:	
  7054                           
  7055                           	psect	text25
  7056  0D6E                     __ptext25:	
  7057 ;; *************** function _getRxData *****************
  7058 ;; Defined at:
  7059 ;;		line 282 in file "../src/RF_Control_B1.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;		None
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  error           1   76[BANK0 ] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;		None               void
  7066 ;; Registers used:
  7067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:        2 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:   12
  7080 ;; This function calls:
  7081 ;;		_getMain_All_Error_Status
  7082 ;;		_setControl_Lights_Table
  7083 ;;		_setLog_Code
  7084 ;;		_setTxData
  7085 ;; This function is called by:
  7086 ;;		_setRF_Main
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           
  7091                           ;psect for function _getRxData
  7092  0D6E                     _getRxData:	
  7093                           
  7094                           ;RF_Control_B1.c: 283: char error = getMain_All_Error_Status(0);
  7095                           
  7096                           ;incstack = 0
  7097                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7098  0D6E  3000               	movlw	0
  7099  0D6F  3192  22BC  318D   	fcall	_getMain_All_Error_Status
  7100  0D72  0020               	movlb	0	; select bank0
  7101  0D73  00EB               	movwf	??_getRxData
  7102  0D74  086B               	movf	??_getRxData,w
  7103  0D75  00EC               	movwf	getRxData@error
  7104                           
  7105                           ;RF_Control_B1.c: 284: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7106  0D76  0022               	movlb	2	; select bank2
  7107  0D77  0820               	movf	_RF_Data^(0+256),w
  7108  0D78  3AAA               	xorlw	170
  7109  0D79  1D03               	skipz
  7110  0D7A  2D91               	goto	l6546
  7111  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7112  0D7C  3A01               	xorlw	1
  7113  0D7D  1D03               	skipz
  7114  0D7E  2D91               	goto	l6546
  7115                           
  7116                           ;RF_Control_B1.c: 286: product->Data[2] = 0x55;
  7117  0D7F  3055               	movlw	85
  7118  0D80  0020               	movlb	0	; select bank0
  7119  0D81  00EB               	movwf	??_getRxData
  7120  0D82  086E               	movf	_product,w
  7121  0D83  3E02               	addlw	2
  7122  0D84  0086               	movwf	6
  7123  0D85  3002               	movlw	2	; select bank4/5
  7124  0D86  0087               	movwf	7
  7125  0D87  086B               	movf	??_getRxData,w
  7126  0D88  0081               	movwf	1
  7127                           
  7128                           ;RF_Control_B1.c: 287: setTxData();
  7129  0D89  3186  26D6         	fcall	_setTxData
  7130                           
  7131                           ;RF_Control_B1.c: 288: RF1.RunTime = 10;
  7132  0D8B  300A               	movlw	10
  7133  0D8C  0021               	movlb	1	; select bank1
  7134  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7135  0D8E  3000               	movlw	0
  7136  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7137                           
  7138                           ;RF_Control_B1.c: 294: } else {
  7139  0D90  0008               	return
  7140  0D91                     l6546:	
  7141                           
  7142                           ;RF_Control_B1.c: 296: if (error == 0) {
  7143  0D91  0020               	movlb	0	; select bank0
  7144  0D92  08EC               	movf	getRxData@error,f
  7145  0D93  1D03               	skipz
  7146  0D94  0008               	return
  7147                           
  7148                           ;RF_Control_B1.c: 297: if (RF1.Learn == 1) {
  7149  0D95  0021               	movlb	1	; select bank1
  7150  0D96  1F3B               	btfss	_RF1^(0+128),6
  7151  0D97  2DA8               	goto	l6558
  7152                           
  7153                           ;RF_Control_B1.c: 298: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7154  0D98  0022               	movlb	2	; select bank2
  7155  0D99  08A0               	movf	_RF_Data^(0+256),f
  7156  0D9A  1D03               	skipz
  7157  0D9B  2DA5               	goto	l2053
  7158  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7159  0D9D  3A64               	xorlw	100
  7160  0D9E  1D03               	skipz
  7161  0D9F  2DA5               	goto	l2053
  7162                           
  7163                           ;RF_Control_B1.c: 299: setLog_Code();
  7164  0DA0  3193  23C3         	fcall	_setLog_Code
  7165                           
  7166                           ;RF_Control_B1.c: 300: RF1.Checked = 1;
  7167  0DA2  0021               	movlb	1	; select bank1
  7168  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7169                           
  7170                           ;RF_Control_B1.c: 301: } else {
  7171  0DA4  0008               	return
  7172  0DA5                     l2053:	
  7173                           
  7174                           ;RF_Control_B1.c: 302: RF1.Checked = 0;
  7175  0DA5  0021               	movlb	1	; select bank1
  7176  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7177                           
  7178                           ;RF_Control_B1.c: 303: }
  7179                           ;RF_Control_B1.c: 304: } else {
  7180  0DA7  0008               	return
  7181  0DA8                     l6558:	
  7182                           
  7183                           ;RF_Control_B1.c: 305: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7184  0DA8  0022               	movlb	2	; select bank2
  7185  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7186  0DAA  1D03               	skipz
  7187  0DAB  2DE6               	goto	l6580
  7188  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7189  0DAD  3A02               	xorlw	2
  7190  0DAE  1D03               	skipz
  7191  0DAF  2DE6               	goto	l6580
  7192                           
  7193                           ;RF_Control_B1.c: 307: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7194  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7195  0DB1  3AFF               	xorlw	255
  7196  0DB2  1D03               	skipz
  7197  0DB3  2DC0               	goto	l6570
  7198  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7199  0DB5  3AFF               	xorlw	255
  7200  0DB6  1D03               	skipz
  7201  0DB7  2DC0               	goto	l6570
  7202  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7203  0DB9  3AFF               	xorlw	255
  7204  0DBA  1D03               	skipz
  7205  0DBB  2DC0               	goto	l6570
  7206                           
  7207                           ;RF_Control_B1.c: 308: __nop();
  7208  0DBC  0000               	nop
  7209                           
  7210                           ;RF_Control_B1.c: 309: RF1.Checked = 0;
  7211  0DBD  0021               	movlb	1	; select bank1
  7212  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7213                           
  7214                           ;RF_Control_B1.c: 310: } else {
  7215  0DBF  0008               	return
  7216  0DC0                     l6570:	
  7217                           
  7218                           ;RF_Control_B1.c: 311: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7219  0DC0  0020               	movlb	0	; select bank0
  7220  0DC1  086E               	movf	_product,w
  7221  0DC2  3E0C               	addlw	12
  7222  0DC3  0086               	movwf	6
  7223  0DC4  3002               	movlw	2	; select bank4/5
  7224  0DC5  0087               	movwf	7
  7225  0DC6  0022               	movlb	2	; select bank2
  7226  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7227  0DC8  0601               	xorwf	1,w
  7228  0DC9  1D03               	skipz
  7229  0DCA  0008               	return
  7230  0DCB  0020               	movlb	0	; select bank0
  7231  0DCC  086E               	movf	_product,w
  7232  0DCD  3E0D               	addlw	13
  7233  0DCE  0086               	movwf	6
  7234  0DCF  3002               	movlw	2	; select bank4/5
  7235  0DD0  0087               	movwf	7
  7236  0DD1  0022               	movlb	2	; select bank2
  7237  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7238  0DD3  0601               	xorwf	1,w
  7239  0DD4  1D03               	skipz
  7240  0DD5  0008               	return
  7241  0DD6  0020               	movlb	0	; select bank0
  7242  0DD7  086E               	movf	_product,w
  7243  0DD8  3E0E               	addlw	14
  7244  0DD9  0086               	movwf	6
  7245  0DDA  3002               	movlw	2	; select bank4/5
  7246  0DDB  0087               	movwf	7
  7247  0DDC  0022               	movlb	2	; select bank2
  7248  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7249  0DDE  0601               	xorwf	1,w
  7250  0DDF  1D03               	skipz
  7251  0DE0  0008               	return
  7252                           
  7253                           ;RF_Control_B1.c: 312: setControl_Lights_Table();
  7254  0DE1  3189  21F1         	fcall	_setControl_Lights_Table
  7255                           
  7256                           ;RF_Control_B1.c: 313: RF1.Checked = 1;
  7257  0DE3  0021               	movlb	1	; select bank1
  7258  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7259                           
  7260                           ;RF_Control_B1.c: 314: }
  7261                           ;RF_Control_B1.c: 315: }
  7262                           ;RF_Control_B1.c: 316: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7263  0DE5  0008               	return
  7264  0DE6                     l6580:	
  7265  0DE6  0022               	movlb	2	; select bank2
  7266  0DE7  0820               	movf	_RF_Data^(0+256),w
  7267  0DE8  3AFF               	xorlw	255
  7268  0DE9  1D03               	skipz
  7269  0DEA  2DF1               	goto	l6586
  7270  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7271  0DEC  3A02               	xorlw	2
  7272  0DED  1D03               	skipz
  7273  0DEE  2DF1               	goto	l6586
  7274                           
  7275                           ;RF_Control_B1.c: 317: __nop();
  7276  0DEF  0000               	nop
  7277                           
  7278                           ;RF_Control_B1.c: 318: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7279  0DF0  0008               	return
  7280  0DF1                     l6586:	
  7281  0DF1  0022               	movlb	2	; select bank2
  7282  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7283  0DF3  1D03               	skipz
  7284  0DF4  2DFB               	goto	l2063
  7285  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7286  0DF6  3A65               	xorlw	101
  7287  0DF7  1D03               	skipz
  7288  0DF8  2DFB               	goto	l2063
  7289                           
  7290                           ;RF_Control_B1.c: 319: __nop();
  7291  0DF9  0000               	nop
  7292                           
  7293                           ;RF_Control_B1.c: 320: } else {
  7294  0DFA  0008               	return
  7295  0DFB                     l2063:	
  7296                           
  7297                           ;RF_Control_B1.c: 321: RF1.Checked = 0;
  7298  0DFB  0021               	movlb	1	; select bank1
  7299  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7300                           
  7301                           ;RF_Control_B1.c: 329: ;
  7302                           
  7303                           ;RF_Control_B1.c: 322: }
  7304                           ;RF_Control_B1.c: 327: }
  7305                           ;RF_Control_B1.c: 328: } else {
  7306  0DFD  0008               	return
  7307  0DFE                     __end_of_getRxData:	
  7308                           
  7309                           	psect	text26
  7310  13C3                     __ptext26:	
  7311 ;; *************** function _setLog_Code *****************
  7312 ;; Defined at:
  7313 ;;		line 335 in file "../src/RF_Control_B1.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;		None
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;		None
  7318 ;; Return value:  Size  Location     Type
  7319 ;;		None               void
  7320 ;; Registers used:
  7321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;Total ram usage:        1 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    7
  7334 ;; This function calls:
  7335 ;;		_setBuz
  7336 ;;		_setMemory_LoopSave
  7337 ;;		_setMemory_Modify
  7338 ;; This function is called by:
  7339 ;;		_getRxData
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _setLog_Code
  7345  13C3                     _setLog_Code:	
  7346                           
  7347                           ;RF_Control_B1.c: 336: RF1.Learn = 0;
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7351  13C3  0021               	movlb	1	; select bank1
  7352  13C4  133B               	bcf	_RF1^(0+128),6
  7353                           
  7354                           ;RF_Control_B1.c: 337: product->Data[12]=RF_Data[12];
  7355  13C5  0022               	movlb	2	; select bank2
  7356  13C6  082C               	movf	(_RF_Data^(0+256)+12),w
  7357  13C7  0020               	movlb	0	; select bank0
  7358  13C8  00AD               	movwf	??_setLog_Code
  7359  13C9  086E               	movf	_product,w
  7360  13CA  3E0C               	addlw	12
  7361  13CB  0086               	movwf	6
  7362  13CC  3002               	movlw	2	; select bank4/5
  7363  13CD  0087               	movwf	7
  7364  13CE  082D               	movf	??_setLog_Code,w
  7365  13CF  0081               	movwf	1
  7366                           
  7367                           ;RF_Control_B1.c: 338: product->Data[13]=RF_Data[13];
  7368  13D0  0022               	movlb	2	; select bank2
  7369  13D1  082D               	movf	(_RF_Data^(0+256)+13),w
  7370  13D2  0020               	movlb	0	; select bank0
  7371  13D3  00AD               	movwf	??_setLog_Code
  7372  13D4  086E               	movf	_product,w
  7373  13D5  3E0D               	addlw	13
  7374  13D6  0086               	movwf	6
  7375  13D7  3002               	movlw	2	; select bank4/5
  7376  13D8  0087               	movwf	7
  7377  13D9  082D               	movf	??_setLog_Code,w
  7378  13DA  0081               	movwf	1
  7379                           
  7380                           ;RF_Control_B1.c: 339: product->Data[14]=RF_Data[14];
  7381  13DB  0022               	movlb	2	; select bank2
  7382  13DC  082E               	movf	(_RF_Data^(0+256)+14),w
  7383  13DD  0020               	movlb	0	; select bank0
  7384  13DE  00AD               	movwf	??_setLog_Code
  7385  13DF  086E               	movf	_product,w
  7386  13E0  3E0E               	addlw	14
  7387  13E1  0086               	movwf	6
  7388  13E2  3002               	movlw	2	; select bank4/5
  7389  13E3  0087               	movwf	7
  7390  13E4  082D               	movf	??_setLog_Code,w
  7391  13E5  0081               	movwf	1
  7392                           
  7393                           ;RF_Control_B1.c: 340: setBuz(1, 100);
  7394  13E6  3064               	movlw	100
  7395  13E7  00A9               	movwf	setBuz@time
  7396  13E8  3000               	movlw	0
  7397  13E9  00AA               	movwf	setBuz@time+1
  7398  13EA  3001               	movlw	1
  7399  13EB  3197  27A7  3193   	fcall	_setBuz
  7400                           
  7401                           ;RF_Control_B1.c: 341: if (myMain.First == 1) {
  7402  13EE  0021               	movlb	1	; select bank1
  7403  13EF  1EA0               	btfss	_myMain^(0+128),5
  7404  13F0  2BF5               	goto	l2069
  7405                           
  7406                           ;RF_Control_B1.c: 342: setMemory_LoopSave(1);
  7407  13F1  3001               	movlw	1
  7408  13F2  319E  26F7  3193   	fcall	_setMemory_LoopSave
  7409  13F5                     l2069:	
  7410                           
  7411                           ;RF_Control_B1.c: 343: }
  7412                           ;RF_Control_B1.c: 344: setMemory_Modify(1);
  7413  13F5  3001               	movlw	1
  7414  13F6  319E  26E4         	fcall	_setMemory_Modify
  7415  13F8  0008               	return
  7416  13F9                     __end_of_setLog_Code:	
  7417                           
  7418                           	psect	text27
  7419  1EF7                     __ptext27:	
  7420 ;; *************** function _setMemory_LoopSave *****************
  7421 ;; Defined at:
  7422 ;;		line 1031 in file "../src/MCU_B1.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  command         1    wreg     unsigned char 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  command         1    1[BANK0 ] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;Total ram usage:        2 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    5
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_setLog_Code
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           
  7451                           ;psect for function _setMemory_LoopSave
  7452  1EF7                     _setMemory_LoopSave:	
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7456                           ;setMemory_LoopSave@command stored from wreg
  7457  1EF7  0020               	movlb	0	; select bank0
  7458  1EF8  00A1               	movwf	setMemory_LoopSave@command
  7459                           
  7460                           ;MCU_B1.c: 1032: Memory.LoopSave = command == 1 ? 1 : 0;
  7461  1EF9  0821               	movf	setMemory_LoopSave@command,w
  7462  1EFA  3A01               	xorlw	1
  7463  1EFB  3000               	movlw	0
  7464  1EFC  1903               	skipnz
  7465  1EFD  3001               	movlw	1
  7466  1EFE  00A0               	movwf	??_setMemory_LoopSave
  7467  1EFF  0DA0               	rlf	??_setMemory_LoopSave,f
  7468  1F00  0DA0               	rlf	??_setMemory_LoopSave,f
  7469  1F01  0023               	movlb	3	; select bank3
  7470  1F02  0844               	movf	(_Memory^(0+384)+36),w
  7471  1F03  0020               	movlb	0	; select bank0
  7472  1F04  0620               	xorwf	??_setMemory_LoopSave,w
  7473  1F05  39FB               	andlw	-5
  7474  1F06  0620               	xorwf	??_setMemory_LoopSave,w
  7475  1F07  0023               	movlb	3	; select bank3
  7476  1F08  00C4               	movwf	(_Memory^(0+384)+36)
  7477  1F09  0008               	return
  7478  1F0A                     __end_of_setMemory_LoopSave:	
  7479                           
  7480                           	psect	text28
  7481  09F1                     __ptext28:	
  7482 ;; *************** function _setControl_Lights_Table *****************
  7483 ;; Defined at:
  7484 ;;		line 348 in file "../src/RF_Control_B1.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;		None               void
  7491 ;; Registers used:
  7492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;Total ram usage:        0 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:   11
  7505 ;; This function calls:
  7506 ;;		_setBuz
  7507 ;;		_setDimmerLights_ErrorClose
  7508 ;;		_setRFSW_AdjControl
  7509 ;;		_setRFSW_Control
  7510 ;;		_setTxData
  7511 ;; This function is called by:
  7512 ;;		_getRxData
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           
  7517                           ;psect for function _setControl_Lights_Table
  7518  09F1                     _setControl_Lights_Table:	
  7519                           
  7520                           ;RF_Control_B1.c: 349: switch (RF_Data[15]) {
  7521                           
  7522                           ;incstack = 0
  7523                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7524  09F1  2A35               	goto	l6224
  7525  09F2                     l6202:	
  7526                           ;RF_Control_B1.c: 350: case 0x00:
  7527                           
  7528                           
  7529                           ;RF_Control_B1.c: 352: setDimmerLights_ErrorClose(255);
  7530  09F2  30FF               	movlw	255
  7531  09F3  3196  26F7  3189   	fcall	_setDimmerLights_ErrorClose
  7532                           
  7533                           ;RF_Control_B1.c: 354: product->Data[9]=0;
  7534  09F6  0020               	movlb	0	; select bank0
  7535  09F7  086E               	movf	_product,w
  7536  09F8  3E09               	addlw	9
  7537  09F9  0086               	movwf	6
  7538  09FA  3002               	movlw	2	; select bank4/5
  7539  09FB  0087               	movwf	7
  7540  09FC  0181               	clrf	1
  7541                           
  7542                           ;RF_Control_B1.c: 355: product->Data[11]=0;
  7543  09FD  086E               	movf	_product,w
  7544  09FE  3E0B               	addlw	11
  7545  09FF  0086               	movwf	6
  7546  0A00  3002               	movlw	2	; select bank4/5
  7547  0A01  0087               	movwf	7
  7548  0A02  0181               	clrf	1
  7549                           
  7550                           ;RF_Control_B1.c: 356: product->Data[15]=0;
  7551  0A03  086E               	movf	_product,w
  7552  0A04  3E0F               	addlw	15
  7553  0A05  0086               	movwf	6
  7554  0A06  3002               	movlw	2	; select bank4/5
  7555  0A07  0087               	movwf	7
  7556  0A08  0181               	clrf	1
  7557                           
  7558                           ;RF_Control_B1.c: 357: product->Data[17]=0;
  7559  0A09  086E               	movf	_product,w
  7560  0A0A  3E11               	addlw	17
  7561  0A0B  0086               	movwf	6
  7562  0A0C  3002               	movlw	2	; select bank4/5
  7563  0A0D  0087               	movwf	7
  7564  0A0E  0181               	clrf	1
  7565                           
  7566                           ;RF_Control_B1.c: 358: setBuz(1, 100);
  7567  0A0F  3064               	movlw	100
  7568  0A10  00A9               	movwf	setBuz@time
  7569  0A11  3000               	movlw	0
  7570  0A12  00AA               	movwf	setBuz@time+1
  7571  0A13  3001               	movlw	1
  7572  0A14  3197  27A7         	fcall	_setBuz
  7573                           
  7574                           ;RF_Control_B1.c: 360: break;
  7575  0A16  0008               	return
  7576  0A17                     l6214:	
  7577                           ;RF_Control_B1.c: 361: case 0x20:
  7578                           
  7579                           
  7580                           ;RF_Control_B1.c: 362: product->Data[9]=0;
  7581  0A17  0020               	movlb	0	; select bank0
  7582  0A18  086E               	movf	_product,w
  7583  0A19  3E09               	addlw	9
  7584  0A1A  0086               	movwf	6
  7585  0A1B  3002               	movlw	2	; select bank4/5
  7586  0A1C  0087               	movwf	7
  7587  0A1D  0181               	clrf	1
  7588                           
  7589                           ;RF_Control_B1.c: 363: product->Data[11]=0;
  7590  0A1E  086E               	movf	_product,w
  7591  0A1F  3E0B               	addlw	11
  7592  0A20  0086               	movwf	6
  7593  0A21  3002               	movlw	2	; select bank4/5
  7594  0A22  0087               	movwf	7
  7595  0A23  0181               	clrf	1
  7596                           
  7597                           ;RF_Control_B1.c: 364: product->Data[17]=0;
  7598  0A24  086E               	movf	_product,w
  7599  0A25  3E11               	addlw	17
  7600  0A26  0086               	movwf	6
  7601  0A27  3002               	movlw	2	; select bank4/5
  7602  0A28  0087               	movwf	7
  7603  0A29  0181               	clrf	1
  7604                           
  7605                           ;RF_Control_B1.c: 365: setTxData();
  7606  0A2A  3186  26D6         	fcall	_setTxData
  7607                           
  7608                           ;RF_Control_B1.c: 366: break;
  7609  0A2C  0008               	return
  7610  0A2D                     l6218:	
  7611                           ;RF_Control_B1.c: 367: case 0x01:
  7612                           
  7613                           
  7614                           ;RF_Control_B1.c: 369: setRFSW_Control(1);
  7615  0A2D  3001               	movlw	1
  7616  0A2E  3196  2654         	fcall	_setRFSW_Control
  7617                           
  7618                           ;RF_Control_B1.c: 381: break;
  7619                           
  7620                           ;RF_Control_B1.c: 377: case 0x03:
  7621                           
  7622                           ;RF_Control_B1.c: 376: break;
  7623                           
  7624                           ;RF_Control_B1.c: 372: case 0x02:
  7625                           
  7626                           ;RF_Control_B1.c: 371: break;
  7627  0A30  0008               	return
  7628  0A31                     l6220:	
  7629                           ;RF_Control_B1.c: 382: case 0x11:
  7630                           
  7631                           
  7632                           ;RF_Control_B1.c: 385: setRFSW_AdjControl(1);
  7633  0A31  3001               	movlw	1
  7634  0A32  3194  24A5         	fcall	_setRFSW_AdjControl
  7635                           
  7636                           ;RF_Control_B1.c: 403: }
  7637                           
  7638                           ;RF_Control_B1.c: 402: break;
  7639                           
  7640                           ;RF_Control_B1.c: 396: case 0x31:
  7641                           
  7642                           ;RF_Control_B1.c: 395: break;
  7643                           
  7644                           ;RF_Control_B1.c: 389: case 0x21:
  7645                           
  7646                           ;RF_Control_B1.c: 388: break;
  7647  0A34  0008               	return
  7648  0A35                     l6224:	
  7649  0A35  0022               	movlb	2	; select bank2
  7650  0A36  082F               	movf	(_RF_Data^(0+256)+15),w
  7651                           
  7652                           ; Switch size 1, requested type "space"
  7653                           ; Number of cases is 8, Range of values is 0 to 49
  7654                           ; switch strategies available:
  7655                           ; Name         Instructions Cycles
  7656                           ; simple_byte           25    13 (average)
  7657                           ; direct_byte          106     6 (fixed)
  7658                           ; jumptable            260     6 (fixed)
  7659                           ;	Chosen strategy is simple_byte
  7660  0A37  3A00               	xorlw	0	; case 0
  7661  0A38  1903               	skipnz
  7662  0A39  29F2               	goto	l6202
  7663  0A3A  3A01               	xorlw	1	; case 1
  7664  0A3B  1903               	skipnz
  7665  0A3C  2A2D               	goto	l6218
  7666  0A3D  3A03               	xorlw	3	; case 2
  7667  0A3E  1903               	skipnz
  7668  0A3F  2A50               	goto	l2083
  7669  0A40  3A01               	xorlw	1	; case 3
  7670  0A41  1903               	skipnz
  7671  0A42  2A50               	goto	l2083
  7672  0A43  3A12               	xorlw	18	; case 17
  7673  0A44  1903               	skipnz
  7674  0A45  2A31               	goto	l6220
  7675  0A46  3A31               	xorlw	49	; case 32
  7676  0A47  1903               	skipnz
  7677  0A48  2A17               	goto	l6214
  7678  0A49  3A01               	xorlw	1	; case 33
  7679  0A4A  1903               	skipnz
  7680  0A4B  2A50               	goto	l2083
  7681  0A4C  3A10               	xorlw	16	; case 49
  7682  0A4D  1903               	skipnz
  7683  0A4E  2A50               	goto	l2083
  7684  0A4F  2A50               	goto	l2083
  7685  0A50                     l2083:	
  7686  0A50  0008               	return
  7687  0A51                     __end_of_setControl_Lights_Table:	
  7688                           
  7689                           	psect	text29
  7690  1654                     __ptext29:	
  7691 ;; *************** function _setRFSW_Control *****************
  7692 ;; Defined at:
  7693 ;;		line 430 in file "../src/RF_Control_B1.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  sw              1    wreg     unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  sw              1   19[BANK0 ] unsigned char 
  7698 ;;  status          1   18[BANK0 ] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;		None               void
  7701 ;; Registers used:
  7702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7712 ;;Total ram usage:        3 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    9
  7715 ;; This function calls:
  7716 ;;		_getDelayOff_GO
  7717 ;;		_getDimmerLights_Status
  7718 ;;		_setBuz
  7719 ;;		_setDelayOff_GO
  7720 ;;		_setDimmerLights_SwOff
  7721 ;;		_setDimmerLights_SwOn
  7722 ;;		_setRF_DimmerLights
  7723 ;;		_setTxData
  7724 ;; This function is called by:
  7725 ;;		_setControl_Lights_Table
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _setRFSW_Control
  7731  1654                     _setRFSW_Control:	
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7735                           ;setRFSW_Control@sw stored from wreg
  7736  1654  0020               	movlb	0	; select bank0
  7737  1655  00B3               	movwf	setRFSW_Control@sw
  7738                           
  7739                           ;RF_Control_B1.c: 431: char status = 0;
  7740  1656  01B2               	clrf	setRFSW_Control@status
  7741                           
  7742                           ;RF_Control_B1.c: 434: if (RF_Data[16] == 0x80) {
  7743  1657  0022               	movlb	2	; select bank2
  7744  1658  0830               	movf	(_RF_Data^(0+256)+16),w
  7745  1659  3A80               	xorlw	128
  7746  165A  1D03               	skipz
  7747  165B  2E87               	goto	l6076
  7748                           
  7749                           ;RF_Control_B1.c: 435: setDelayOff_GO(sw, 1, RF_Data[17]);
  7750  165C  0020               	movlb	0	; select bank0
  7751  165D  01AA               	clrf	setDelayOff_GO@command
  7752  165E  0AAA               	incf	setDelayOff_GO@command,f
  7753  165F  0022               	movlb	2	; select bank2
  7754  1660  0831               	movf	(_RF_Data^(0+256)+17),w
  7755  1661  0020               	movlb	0	; select bank0
  7756  1662  00B1               	movwf	??_setRFSW_Control
  7757  1663  0831               	movf	??_setRFSW_Control,w
  7758  1664  00AB               	movwf	setDelayOff_GO@value
  7759  1665  0833               	movf	setRFSW_Control@sw,w
  7760  1666  3189  2137  3196   	fcall	_setDelayOff_GO
  7761                           
  7762                           ;RF_Control_B1.c: 436: if (getDimmerLights_Status(sw) == 1) {
  7763  1669  0020               	movlb	0	; select bank0
  7764  166A  0833               	movf	setRFSW_Control@sw,w
  7765  166B  319E  262A  3196   	fcall	_getDimmerLights_Status
  7766  166E  3A01               	xorlw	1
  7767  166F  1D03               	skipz
  7768  1670  2E96               	goto	l6080
  7769                           
  7770                           ;RF_Control_B1.c: 437: setBuz(1, 100);
  7771  1671  3064               	movlw	100
  7772  1672  0020               	movlb	0	; select bank0
  7773  1673  00A9               	movwf	setBuz@time
  7774  1674  3000               	movlw	0
  7775  1675  00AA               	movwf	setBuz@time+1
  7776  1676  3001               	movlw	1
  7777  1677  3197  27A7  3196   	fcall	_setBuz
  7778                           
  7779                           ;RF_Control_B1.c: 438: status = 1;
  7780  167A  0020               	movlb	0	; select bank0
  7781  167B  01B2               	clrf	setRFSW_Control@status
  7782  167C  0AB2               	incf	setRFSW_Control@status,f
  7783                           
  7784                           ;RF_Control_B1.c: 439: setRF_DimmerLights(sw, 1);
  7785  167D  01A0               	clrf	setRF_DimmerLights@on
  7786  167E  0AA0               	incf	setRF_DimmerLights@on,f
  7787  167F  0833               	movf	setRFSW_Control@sw,w
  7788  1680  3188  207F  3196   	fcall	_setRF_DimmerLights
  7789                           
  7790                           ;RF_Control_B1.c: 440: setTxData();
  7791  1683  3186  26D6  3196   	fcall	_setTxData
  7792                           
  7793                           ;RF_Control_B1.c: 442: }
  7794                           ;RF_Control_B1.c: 443: } else {
  7795  1686  2E96               	goto	l6080
  7796  1687                     l6076:	
  7797                           
  7798                           ;RF_Control_B1.c: 445: if (getDelayOff_GO(sw) == 1) {
  7799  1687  0020               	movlb	0	; select bank0
  7800  1688  0833               	movf	setRFSW_Control@sw,w
  7801  1689  319E  263A  3196   	fcall	_getDelayOff_GO
  7802  168C  3A01               	xorlw	1
  7803  168D  1D03               	skipz
  7804  168E  2E96               	goto	l6080
  7805                           
  7806                           ;RF_Control_B1.c: 446: setDelayOff_GO(sw, 0, 0);
  7807  168F  0020               	movlb	0	; select bank0
  7808  1690  01AA               	clrf	setDelayOff_GO@command
  7809  1691  01AB               	clrf	setDelayOff_GO@value
  7810  1692  0833               	movf	setRFSW_Control@sw,w
  7811  1693  3189  2137  3196   	fcall	_setDelayOff_GO
  7812  1696                     l6080:	
  7813                           
  7814                           ;RF_Control_B1.c: 447: }
  7815                           ;RF_Control_B1.c: 449: }
  7816                           ;RF_Control_B1.c: 450: if (status == 0) {
  7817  1696  0020               	movlb	0	; select bank0
  7818  1697  08B2               	movf	setRFSW_Control@status,f
  7819  1698  1D03               	skipz
  7820  1699  0008               	return
  7821                           
  7822                           ;RF_Control_B1.c: 452: setDimmerLights_SwOn(sw);
  7823  169A  0833               	movf	setRFSW_Control@sw,w
  7824  169B  3194  2468  3196   	fcall	_setDimmerLights_SwOn
  7825                           
  7826                           ;RF_Control_B1.c: 453: setDimmerLights_SwOff(sw);
  7827  169E  0020               	movlb	0	; select bank0
  7828  169F  0833               	movf	setRFSW_Control@sw,w
  7829  16A0  3195  2528         	fcall	_setDimmerLights_SwOff
  7830  16A2  0008               	return
  7831  16A3                     __end_of_setRFSW_Control:	
  7832                           
  7833                           	psect	text30
  7834  1468                     __ptext30:	
  7835 ;; *************** function _setDimmerLights_SwOn *****************
  7836 ;; Defined at:
  7837 ;;		line 505 in file "../src/Dimmer_B1.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  sw              1    wreg     unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  sw              1   15[BANK0 ] unsigned char 
  7842 ;;  idle            1   14[BANK0 ] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;		None               void
  7845 ;; Registers used:
  7846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:        3 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    7
  7859 ;; This function calls:
  7860 ;;		_DimmerLightsPointSelect
  7861 ;;		_getAll_DimmerLights_AdjGO
  7862 ;;		_setBuz
  7863 ;;		_setDimmerLights_Trigger
  7864 ;; This function is called by:
  7865 ;;		_setRFSW_Control
  7866 ;;		_setSw_Main
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           
  7871                           ;psect for function _setDimmerLights_SwOn
  7872  1468                     _setDimmerLights_SwOn:	
  7873                           
  7874                           ;incstack = 0
  7875                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7876                           ;setDimmerLights_SwOn@sw stored from wreg
  7877  1468  0020               	movlb	0	; select bank0
  7878  1469  00AF               	movwf	setDimmerLights_SwOn@sw
  7879                           
  7880                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7881  146A  082F               	movf	setDimmerLights_SwOn@sw,w
  7882  146B  319D  2558  3194   	fcall	_DimmerLightsPointSelect
  7883                           
  7884                           ;Dimmer_B1.c: 507: char idle = 0;
  7885  146E  0020               	movlb	0	; select bank0
  7886  146F  01AE               	clrf	setDimmerLights_SwOn@idle
  7887                           
  7888                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7889  1470  319D  2538  3194   	fcall	_getAll_DimmerLights_AdjGO
  7890  1473  3A01               	xorlw	1
  7891  1474  3000               	movlw	0
  7892  1475  1903               	skipnz
  7893  1476  3001               	movlw	1
  7894  1477  0020               	movlb	0	; select bank0
  7895  1478  00AD               	movwf	??_setDimmerLights_SwOn
  7896  1479  082D               	movf	??_setDimmerLights_SwOn,w
  7897  147A  00AE               	movwf	setDimmerLights_SwOn@idle
  7898                           
  7899                           ;Dimmer_B1.c: 511: if (idle == 0) {
  7900  147B  08AE               	movf	setDimmerLights_SwOn@idle,f
  7901  147C  1D03               	skipz
  7902  147D  0008               	return
  7903                           
  7904                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  7905  147E  086F               	movf	_DimmerLights,w
  7906  147F  3E09               	addlw	9
  7907  1480  0086               	movwf	6
  7908  1481  3001               	movlw	1	; select bank2/3
  7909  1482  0087               	movwf	7
  7910  1483  1701               	bsf	1,6
  7911                           
  7912                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  7913  1484  3064               	movlw	100
  7914  1485  00A9               	movwf	setBuz@time
  7915  1486  3000               	movlw	0
  7916  1487  00AA               	movwf	setBuz@time+1
  7917  1488  3001               	movlw	1
  7918  1489  3197  27A7  3194   	fcall	_setBuz
  7919                           
  7920                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  7921  148C  0020               	movlb	0	; select bank0
  7922  148D  086F               	movf	_DimmerLights,w
  7923  148E  0086               	movwf	6
  7924  148F  3001               	movlw	1	; select bank2/3
  7925  1490  0087               	movwf	7
  7926  1491  1A81               	btfsc	1,5
  7927  1492  2C9E               	goto	l5906
  7928                           
  7929                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  7930  1493  086F               	movf	_DimmerLights,w
  7931  1494  0086               	movwf	6
  7932  1495  3001               	movlw	1	; select bank2/3
  7933  1496  0087               	movwf	7
  7934  1497  1681               	bsf	1,5
  7935                           
  7936                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  7937  1498  01A2               	clrf	setDimmerLights_Trigger@command
  7938  1499  0AA2               	incf	setDimmerLights_Trigger@command,f
  7939  149A  082F               	movf	setDimmerLights_SwOn@sw,w
  7940  149B  319F  27C3         	fcall	_setDimmerLights_Trigger
  7941                           
  7942                           ;Dimmer_B1.c: 517: } else {
  7943  149D  0008               	return
  7944  149E                     l5906:	
  7945                           
  7946                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  7947  149E  0020               	movlb	0	; select bank0
  7948  149F  086F               	movf	_DimmerLights,w
  7949  14A0  0086               	movwf	6
  7950  14A1  3001               	movlw	1	; select bank2/3
  7951  14A2  0087               	movwf	7
  7952  14A3  1281               	bcf	1,5
  7953  14A4  0008               	return
  7954  14A5                     __end_of_setDimmerLights_SwOn:	
  7955                           
  7956                           	psect	text31
  7957  14A5                     __ptext31:	
  7958 ;; *************** function _setRFSW_AdjControl *****************
  7959 ;; Defined at:
  7960 ;;		line 459 in file "../src/RF_Control_B1.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  sw              1    wreg     unsigned char 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  sw              1   74[BANK0 ] unsigned char 
  7965 ;;  status          1   73[BANK0 ] unsigned char 
  7966 ;; Return value:  Size  Location     Type
  7967 ;;		None               void
  7968 ;; Registers used:
  7969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;Total ram usage:        4 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:   10
  7982 ;; This function calls:
  7983 ;;		_getDimmerLights_Status
  7984 ;;		_setMemory_Modify
  7985 ;;		_setRF_DimmerValue
  7986 ;;		_setTxData
  7987 ;; This function is called by:
  7988 ;;		_setControl_Lights_Table
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _setRFSW_AdjControl
  7994  14A5                     _setRFSW_AdjControl:	
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7998                           ;setRFSW_AdjControl@sw stored from wreg
  7999  14A5  0020               	movlb	0	; select bank0
  8000  14A6  00EA               	movwf	setRFSW_AdjControl@sw
  8001                           
  8002                           ;RF_Control_B1.c: 460: char status = 0;
  8003  14A7  01E9               	clrf	setRFSW_AdjControl@status
  8004                           
  8005                           ;RF_Control_B1.c: 462: status = getDimmerLights_Status(sw);
  8006  14A8  086A               	movf	setRFSW_AdjControl@sw,w
  8007  14A9  319E  262A  3194   	fcall	_getDimmerLights_Status
  8008  14AC  0020               	movlb	0	; select bank0
  8009  14AD  00E7               	movwf	??_setRFSW_AdjControl
  8010  14AE  0867               	movf	??_setRFSW_AdjControl,w
  8011  14AF  00E9               	movwf	setRFSW_AdjControl@status
  8012                           
  8013                           ;RF_Control_B1.c: 465: if (status == 1) {
  8014  14B0  0869               	movf	setRFSW_AdjControl@status,w
  8015  14B1  3A01               	xorlw	1
  8016  14B2  1D03               	skipz
  8017  14B3  2CBE               	goto	l6094
  8018                           
  8019                           ;RF_Control_B1.c: 466: setMemory_Modify(1);
  8020  14B4  3001               	movlw	1
  8021  14B5  319E  26E4  3194   	fcall	_setMemory_Modify
  8022                           
  8023                           ;RF_Control_B1.c: 467: setRF_DimmerValue(sw);
  8024  14B8  0020               	movlb	0	; select bank0
  8025  14B9  086A               	movf	setRFSW_AdjControl@sw,w
  8026  14BA  3192  228A  3194   	fcall	_setRF_DimmerValue
  8027                           
  8028                           ;RF_Control_B1.c: 468: } else {
  8029  14BD  2CD0               	goto	l2095
  8030  14BE                     l6094:	
  8031                           
  8032                           ;RF_Control_B1.c: 469: product->Data[9]=product->Data[20 + sw];
  8033  14BE  0020               	movlb	0	; select bank0
  8034  14BF  086A               	movf	setRFSW_AdjControl@sw,w
  8035  14C0  3E14               	addlw	20
  8036  14C1  076E               	addwf	_product,w
  8037  14C2  00E7               	movwf	??_setRFSW_AdjControl
  8038  14C3  0867               	movf	??_setRFSW_AdjControl,w
  8039  14C4  0086               	movwf	6
  8040  14C5  3002               	movlw	2	; select bank4/5
  8041  14C6  0087               	movwf	7
  8042  14C7  0801               	movf	1,w
  8043  14C8  00E8               	movwf	??_setRFSW_AdjControl+1
  8044  14C9  086E               	movf	_product,w
  8045  14CA  3E09               	addlw	9
  8046  14CB  0086               	movwf	6
  8047  14CC  3002               	movlw	2	; select bank4/5
  8048  14CD  0087               	movwf	7
  8049  14CE  0868               	movf	??_setRFSW_AdjControl+1,w
  8050  14CF  0081               	movwf	1
  8051  14D0                     l2095:	
  8052                           
  8053                           ;RF_Control_B1.c: 470: }
  8054                           ;RF_Control_B1.c: 471: product->Data[17]=product->Data[26 + sw];
  8055  14D0  0020               	movlb	0	; select bank0
  8056  14D1  086A               	movf	setRFSW_AdjControl@sw,w
  8057  14D2  3E1A               	addlw	26
  8058  14D3  076E               	addwf	_product,w
  8059  14D4  00E7               	movwf	??_setRFSW_AdjControl
  8060  14D5  0867               	movf	??_setRFSW_AdjControl,w
  8061  14D6  0086               	movwf	6
  8062  14D7  3002               	movlw	2	; select bank4/5
  8063  14D8  0087               	movwf	7
  8064  14D9  0801               	movf	1,w
  8065  14DA  00E8               	movwf	??_setRFSW_AdjControl+1
  8066  14DB  086E               	movf	_product,w
  8067  14DC  3E11               	addlw	17
  8068  14DD  0086               	movwf	6
  8069  14DE  3002               	movlw	2	; select bank4/5
  8070  14DF  0087               	movwf	7
  8071  14E0  0868               	movf	??_setRFSW_AdjControl+1,w
  8072  14E1  0081               	movwf	1
  8073                           
  8074                           ;RF_Control_B1.c: 472: setTxData();
  8075  14E2  3186  26D6         	fcall	_setTxData
  8076  14E4  0008               	return
  8077  14E5                     __end_of_setRFSW_AdjControl:	
  8078                           
  8079                           	psect	text32
  8080  128A                     __ptext32:	
  8081 ;; *************** function _setRF_DimmerValue *****************
  8082 ;; Defined at:
  8083 ;;		line 477 in file "../src/RF_Control_B1.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  lights          1    wreg     unsigned char 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  lights          1   70[BANK0 ] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;Total ram usage:        3 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    9
  8104 ;; This function calls:
  8105 ;;		_setDimmerLights_AdjRF
  8106 ;; This function is called by:
  8107 ;;		_setRFSW_AdjControl
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           
  8112                           ;psect for function _setRF_DimmerValue
  8113  128A                     _setRF_DimmerValue:	
  8114                           
  8115                           ;incstack = 0
  8116                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8117                           ;setRF_DimmerValue@lights stored from wreg
  8118  128A  0020               	movlb	0	; select bank0
  8119  128B  00E6               	movwf	setRF_DimmerValue@lights
  8120                           
  8121                           ;RF_Control_B1.c: 478: if (RF_Data[9] > 0x64) {
  8122  128C  3065               	movlw	101
  8123  128D  0022               	movlb	2	; select bank2
  8124  128E  0229               	subwf	(_RF_Data^(0+256)+9),w
  8125  128F  1C03               	skipc
  8126  1290  2A97               	goto	l5994
  8127                           
  8128                           ;RF_Control_B1.c: 479: RF_Data[9] = 0x64;
  8129  1291  3064               	movlw	100
  8130  1292  0020               	movlb	0	; select bank0
  8131  1293  00E4               	movwf	??_setRF_DimmerValue
  8132  1294  0864               	movf	??_setRF_DimmerValue,w
  8133  1295  0022               	movlb	2	; select bank2
  8134  1296  00A9               	movwf	(_RF_Data^(0+256)+9)
  8135  1297                     l5994:	
  8136                           
  8137                           ;RF_Control_B1.c: 480: }
  8138                           ;RF_Control_B1.c: 481: product->Data[9]=RF_Data[9];
  8139  1297  0829               	movf	(_RF_Data^(0+256)+9),w
  8140  1298  0020               	movlb	0	; select bank0
  8141  1299  00E4               	movwf	??_setRF_DimmerValue
  8142  129A  086E               	movf	_product,w
  8143  129B  3E09               	addlw	9
  8144  129C  0086               	movwf	6
  8145  129D  3002               	movlw	2	; select bank4/5
  8146  129E  0087               	movwf	7
  8147  129F  0864               	movf	??_setRF_DimmerValue,w
  8148  12A0  0081               	movwf	1
  8149                           
  8150                           ;RF_Control_B1.c: 482: product->Data[11]=lights;
  8151  12A1  0866               	movf	setRF_DimmerValue@lights,w
  8152  12A2  00E4               	movwf	??_setRF_DimmerValue
  8153  12A3  086E               	movf	_product,w
  8154  12A4  3E0B               	addlw	11
  8155  12A5  0086               	movwf	6
  8156  12A6  3002               	movlw	2	; select bank4/5
  8157  12A7  0087               	movwf	7
  8158  12A8  0864               	movf	??_setRF_DimmerValue,w
  8159  12A9  0081               	movwf	1
  8160                           
  8161                           ;RF_Control_B1.c: 483: product->Data[(20 + lights)]=RF_Data[9];
  8162  12AA  0022               	movlb	2	; select bank2
  8163  12AB  0829               	movf	(_RF_Data^(0+256)+9),w
  8164  12AC  0020               	movlb	0	; select bank0
  8165  12AD  00E4               	movwf	??_setRF_DimmerValue
  8166  12AE  0866               	movf	setRF_DimmerValue@lights,w
  8167  12AF  3E14               	addlw	20
  8168  12B0  076E               	addwf	_product,w
  8169  12B1  00E5               	movwf	??_setRF_DimmerValue+1
  8170  12B2  0865               	movf	??_setRF_DimmerValue+1,w
  8171  12B3  0086               	movwf	6
  8172  12B4  3002               	movlw	2	; select bank4/5
  8173  12B5  0087               	movwf	7
  8174  12B6  0864               	movf	??_setRF_DimmerValue,w
  8175  12B7  0081               	movwf	1
  8176                           
  8177                           ;RF_Control_B1.c: 484: setDimmerLights_AdjRF(lights);
  8178  12B8  0866               	movf	setRF_DimmerValue@lights,w
  8179  12B9  3191  213E         	fcall	_setDimmerLights_AdjRF
  8180  12BB  0008               	return
  8181  12BC                     __end_of_setRF_DimmerValue:	
  8182                           
  8183                           	psect	text33
  8184  113E                     __ptext33:	
  8185 ;; *************** function _setDimmerLights_AdjRF *****************
  8186 ;; Defined at:
  8187 ;;		line 746 in file "../src/Dimmer_B1.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  lights          1    wreg     unsigned char 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  lights          1   67[BANK0 ] unsigned char 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;		None               void
  8194 ;; Registers used:
  8195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;Total ram usage:        2 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    8
  8208 ;; This function calls:
  8209 ;;		_DimmerLightsPointSelect
  8210 ;;		_getPercentValue
  8211 ;; This function is called by:
  8212 ;;		_setRF_DimmerValue
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _setDimmerLights_AdjRF
  8218  113E                     _setDimmerLights_AdjRF:	
  8219                           
  8220                           ;incstack = 0
  8221                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8222                           ;setDimmerLights_AdjRF@lights stored from wreg
  8223  113E  0020               	movlb	0	; select bank0
  8224  113F  00E3               	movwf	setDimmerLights_AdjRF@lights
  8225                           
  8226                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8227  1140  0863               	movf	setDimmerLights_AdjRF@lights,w
  8228  1141  319D  2558  3191   	fcall	_DimmerLightsPointSelect
  8229                           
  8230                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8231  1144  0020               	movlb	0	; select bank0
  8232  1145  086F               	movf	_DimmerLights,w
  8233  1146  0086               	movwf	6
  8234  1147  3001               	movlw	1	; select bank2/3
  8235  1148  0087               	movwf	7
  8236  1149  1501               	bsf	1,2
  8237                           
  8238                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8239  114A  086F               	movf	_DimmerLights,w
  8240  114B  0086               	movwf	6
  8241  114C  3001               	movlw	1	; select bank2/3
  8242  114D  0087               	movwf	7
  8243  114E  1481               	bsf	1,1
  8244                           
  8245                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8246  114F  086E               	movf	_product,w
  8247  1150  3E09               	addlw	9
  8248  1151  0086               	movwf	6
  8249  1152  3002               	movlw	2	; select bank4/5
  8250  1153  0087               	movwf	7
  8251  1154  0801               	movf	1,w
  8252  1155  318B  2378         	fcall	_getPercentValue
  8253  1157  0020               	movlb	0	; select bank0
  8254  1158  00E2               	movwf	??_setDimmerLights_AdjRF
  8255  1159  086F               	movf	_DimmerLights,w
  8256  115A  3E05               	addlw	5
  8257  115B  0086               	movwf	6
  8258  115C  3001               	movlw	1	; select bank2/3
  8259  115D  0087               	movwf	7
  8260  115E  0862               	movf	??_setDimmerLights_AdjRF,w
  8261  115F  0081               	movwf	1
  8262  1160  0008               	return
  8263  1161                     __end_of_setDimmerLights_AdjRF:	
  8264                           
  8265                           	psect	text34
  8266  0B78                     __ptext34:	
  8267 ;; *************** function _getPercentValue *****************
  8268 ;; Defined at:
  8269 ;;		line 858 in file "../src/Dimmer_B1.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;  value           1    wreg     unsigned char 
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;  value           1   62[BANK0 ] unsigned char 
  8274 ;;  i               3   63[BANK0 ] float 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  1    wreg      unsigned char 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0, pclath, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;Total ram usage:        6 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; Hardware stack levels required when called:    7
  8291 ;; This function calls:
  8292 ;;		___awtoft
  8293 ;;		___ftadd
  8294 ;;		___ftdiv
  8295 ;;		___ftmul
  8296 ;;		___ftneg
  8297 ;;		___fttol
  8298 ;; This function is called by:
  8299 ;;		_setDimmerLights_AdjRF
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _getPercentValue
  8305  0B78                     _getPercentValue:	
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8309                           ;getPercentValue@value stored from wreg
  8310  0B78  0020               	movlb	0	; select bank0
  8311  0B79  00DE               	movwf	getPercentValue@value
  8312                           
  8313                           ;Dimmer_B1.c: 866: float i = ((char)(65*0.8)) - ((char)(15*0.8));
  8314  0B7A  3000               	movlw	0
  8315  0B7B  00DF               	movwf	getPercentValue@i
  8316  0B7C  3020               	movlw	32
  8317  0B7D  00E0               	movwf	getPercentValue@i+1
  8318  0B7E  3042               	movlw	66
  8319  0B7F  00E1               	movwf	getPercentValue@i+2
  8320                           
  8321                           ;Dimmer_B1.c: 867: i /= 100;
  8322  0B80  3000               	movlw	0
  8323  0B81  00AE               	movwf	___ftdiv@f2
  8324  0B82  30C8               	movlw	200
  8325  0B83  00AF               	movwf	___ftdiv@f2+1
  8326  0B84  3042               	movlw	66
  8327  0B85  00B0               	movwf	___ftdiv@f2+2
  8328  0B86  085F               	movf	getPercentValue@i,w
  8329  0B87  00B1               	movwf	___ftdiv@f1
  8330  0B88  0860               	movf	getPercentValue@i+1,w
  8331  0B89  00B2               	movwf	___ftdiv@f1+1
  8332  0B8A  0861               	movf	getPercentValue@i+2,w
  8333  0B8B  00B3               	movwf	___ftdiv@f1+2
  8334  0B8C  318E  26A3  318B   	fcall	___ftdiv
  8335  0B8F  0020               	movlb	0	; select bank0
  8336  0B90  082E               	movf	?___ftdiv,w
  8337  0B91  00DF               	movwf	getPercentValue@i
  8338  0B92  082F               	movf	?___ftdiv+1,w
  8339  0B93  00E0               	movwf	getPercentValue@i+1
  8340  0B94  0830               	movf	?___ftdiv+2,w
  8341  0B95  00E1               	movwf	getPercentValue@i+2
  8342                           
  8343                           ;Dimmer_B1.c: 869: return (char) (((char)(65*0.8)) - ((100 - value) * i));
  8344  0B96  085E               	movf	getPercentValue@value,w
  8345  0B97  00DC               	movwf	??_getPercentValue
  8346  0B98  01DD               	clrf	??_getPercentValue+1
  8347  0B99  09DC               	comf	??_getPercentValue,f
  8348  0B9A  09DD               	comf	??_getPercentValue+1,f
  8349  0B9B  0ADC               	incf	??_getPercentValue,f
  8350  0B9C  1903               	skipnz
  8351  0B9D  0ADD               	incf	??_getPercentValue+1,f
  8352  0B9E  085C               	movf	??_getPercentValue,w
  8353  0B9F  3E64               	addlw	100
  8354  0BA0  00A8               	movwf	___awtoft@c
  8355  0BA1  3000               	movlw	0
  8356  0BA2  3D5D               	addwfc	??_getPercentValue+1,w
  8357  0BA3  00A9               	movwf	___awtoft@c+1
  8358  0BA4  3191  211C  318B   	fcall	___awtoft
  8359  0BA7  0020               	movlb	0	; select bank0
  8360  0BA8  0828               	movf	?___awtoft,w
  8361  0BA9  00B1               	movwf	___ftmul@f2
  8362  0BAA  0829               	movf	?___awtoft+1,w
  8363  0BAB  00B2               	movwf	___ftmul@f2+1
  8364  0BAC  082A               	movf	?___awtoft+2,w
  8365  0BAD  00B3               	movwf	___ftmul@f2+2
  8366  0BAE  085F               	movf	getPercentValue@i,w
  8367  0BAF  00AE               	movwf	___ftmul@f1
  8368  0BB0  0860               	movf	getPercentValue@i+1,w
  8369  0BB1  00AF               	movwf	___ftmul@f1+1
  8370  0BB2  0861               	movf	getPercentValue@i+2,w
  8371  0BB3  00B0               	movwf	___ftmul@f1+2
  8372  0BB4  318F  274C  318B   	fcall	___ftmul
  8373  0BB7  0020               	movlb	0	; select bank0
  8374  0BB8  082E               	movf	?___ftmul,w
  8375  0BB9  00BE               	movwf	___ftneg@f1
  8376  0BBA  082F               	movf	?___ftmul+1,w
  8377  0BBB  00BF               	movwf	___ftneg@f1+1
  8378  0BBC  0830               	movf	?___ftmul+2,w
  8379  0BBD  00C0               	movwf	___ftneg@f1+2
  8380  0BBE  319D  2513  318B   	fcall	___ftneg
  8381  0BC1  0020               	movlb	0	; select bank0
  8382  0BC2  083E               	movf	?___ftneg,w
  8383  0BC3  00C4               	movwf	___ftadd@f2
  8384  0BC4  083F               	movf	?___ftneg+1,w
  8385  0BC5  00C5               	movwf	___ftadd@f2+1
  8386  0BC6  0840               	movf	?___ftneg+2,w
  8387  0BC7  00C6               	movwf	___ftadd@f2+2
  8388  0BC8  3000               	movlw	0
  8389  0BC9  00C1               	movwf	___ftadd@f1
  8390  0BCA  3050               	movlw	80
  8391  0BCB  00C2               	movwf	___ftadd@f1+1
  8392  0BCC  3042               	movlw	66
  8393  0BCD  00C3               	movwf	___ftadd@f1+2
  8394  0BCE  3184  243C  318B   	fcall	___ftadd
  8395  0BD1  0020               	movlb	0	; select bank0
  8396  0BD2  0841               	movf	?___ftadd,w
  8397  0BD3  00CE               	movwf	___fttol@f1
  8398  0BD4  0842               	movf	?___ftadd+1,w
  8399  0BD5  00CF               	movwf	___fttol@f1+1
  8400  0BD6  0843               	movf	?___ftadd+2,w
  8401  0BD7  00D0               	movwf	___fttol@f1+2
  8402  0BD8  318C  245E         	fcall	___fttol
  8403  0BDA  0020               	movlb	0	; select bank0
  8404  0BDB  084E               	movf	?___fttol,w
  8405  0BDC  0008               	return
  8406  0BDD                     __end_of_getPercentValue:	
  8407                           
  8408                           	psect	text35
  8409  0F4C                     __ptext35:	
  8410 ;; *************** function ___ftmul *****************
  8411 ;; Defined at:
  8412 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  f1              3   14[BANK0 ] float 
  8415 ;;  f2              3   17[BANK0 ] float 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8418 ;;  sign            1   29[BANK0 ] unsigned char 
  8419 ;;  cntr            1   28[BANK0 ] unsigned char 
  8420 ;;  exp             1   24[BANK0 ] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;                  3   14[BANK0 ] float 
  8423 ;; Registers used:
  8424 ;;		wreg, status,2, status,0, pclath, cstack
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;Total ram usage:       16 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    6
  8437 ;; This function calls:
  8438 ;;		___ftpack
  8439 ;; This function is called by:
  8440 ;;		_getPercentValue
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           
  8445                           ;psect for function ___ftmul
  8446  0F4C                     ___ftmul:	
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8450  0F4C  0020               	movlb	0	; select bank0
  8451  0F4D  082E               	movf	___ftmul@f1,w
  8452  0F4E  00B4               	movwf	??___ftmul
  8453  0F4F  082F               	movf	___ftmul@f1+1,w
  8454  0F50  00B5               	movwf	??___ftmul+1
  8455  0F51  0830               	movf	___ftmul@f1+2,w
  8456  0F52  00B6               	movwf	??___ftmul+2
  8457  0F53  1003               	clrc
  8458  0F54  0D35               	rlf	??___ftmul+1,w
  8459  0F55  0D36               	rlf	??___ftmul+2,w
  8460  0F56  00B7               	movwf	??___ftmul+3
  8461  0F57  0837               	movf	??___ftmul+3,w
  8462  0F58  00B8               	movwf	___ftmul@exp
  8463  0F59  08B8               	movf	___ftmul@exp,f
  8464  0F5A  1D03               	skipz
  8465  0F5B  2F63               	goto	l5624
  8466  0F5C  3000               	movlw	0
  8467  0F5D  00AE               	movwf	?___ftmul
  8468  0F5E  3000               	movlw	0
  8469  0F5F  00AF               	movwf	?___ftmul+1
  8470  0F60  3000               	movlw	0
  8471  0F61  00B0               	movwf	?___ftmul+2
  8472  0F62  0008               	return
  8473  0F63                     l5624:	
  8474  0F63  0831               	movf	___ftmul@f2,w
  8475  0F64  00B4               	movwf	??___ftmul
  8476  0F65  0832               	movf	___ftmul@f2+1,w
  8477  0F66  00B5               	movwf	??___ftmul+1
  8478  0F67  0833               	movf	___ftmul@f2+2,w
  8479  0F68  00B6               	movwf	??___ftmul+2
  8480  0F69  1003               	clrc
  8481  0F6A  0D35               	rlf	??___ftmul+1,w
  8482  0F6B  0D36               	rlf	??___ftmul+2,w
  8483  0F6C  00B7               	movwf	??___ftmul+3
  8484  0F6D  0837               	movf	??___ftmul+3,w
  8485  0F6E  00BD               	movwf	___ftmul@sign
  8486  0F6F  08BD               	movf	___ftmul@sign,f
  8487  0F70  1D03               	skipz
  8488  0F71  2F79               	goto	l5630
  8489  0F72  3000               	movlw	0
  8490  0F73  00AE               	movwf	?___ftmul
  8491  0F74  3000               	movlw	0
  8492  0F75  00AF               	movwf	?___ftmul+1
  8493  0F76  3000               	movlw	0
  8494  0F77  00B0               	movwf	?___ftmul+2
  8495  0F78  0008               	return
  8496  0F79                     l5630:	
  8497  0F79  083D               	movf	___ftmul@sign,w
  8498  0F7A  3E7B               	addlw	123
  8499  0F7B  00B4               	movwf	??___ftmul
  8500  0F7C  0834               	movf	??___ftmul,w
  8501  0F7D  07B8               	addwf	___ftmul@exp,f
  8502  0F7E  082E               	movf	___ftmul@f1,w
  8503  0F7F  00B4               	movwf	??___ftmul
  8504  0F80  082F               	movf	___ftmul@f1+1,w
  8505  0F81  00B5               	movwf	??___ftmul+1
  8506  0F82  0830               	movf	___ftmul@f1+2,w
  8507  0F83  00B6               	movwf	??___ftmul+2
  8508  0F84  3010               	movlw	16
  8509  0F85                     u4435:	
  8510  0F85  36B6               	lsrf	??___ftmul+2,f
  8511  0F86  0CB5               	rrf	??___ftmul+1,f
  8512  0F87  0CB4               	rrf	??___ftmul,f
  8513  0F88  0B89               	decfsz	9,f
  8514  0F89  2F85               	goto	u4435
  8515  0F8A  0834               	movf	??___ftmul,w
  8516  0F8B  00B7               	movwf	??___ftmul+3
  8517  0F8C  0837               	movf	??___ftmul+3,w
  8518  0F8D  00BD               	movwf	___ftmul@sign
  8519  0F8E  0831               	movf	___ftmul@f2,w
  8520  0F8F  00B4               	movwf	??___ftmul
  8521  0F90  0832               	movf	___ftmul@f2+1,w
  8522  0F91  00B5               	movwf	??___ftmul+1
  8523  0F92  0833               	movf	___ftmul@f2+2,w
  8524  0F93  00B6               	movwf	??___ftmul+2
  8525  0F94  3010               	movlw	16
  8526  0F95                     u4445:	
  8527  0F95  36B6               	lsrf	??___ftmul+2,f
  8528  0F96  0CB5               	rrf	??___ftmul+1,f
  8529  0F97  0CB4               	rrf	??___ftmul,f
  8530  0F98  0B89               	decfsz	9,f
  8531  0F99  2F95               	goto	u4445
  8532  0F9A  0834               	movf	??___ftmul,w
  8533  0F9B  00B7               	movwf	??___ftmul+3
  8534  0F9C  0837               	movf	??___ftmul+3,w
  8535  0F9D  06BD               	xorwf	___ftmul@sign,f
  8536  0F9E  3080               	movlw	128
  8537  0F9F  00B4               	movwf	??___ftmul
  8538  0FA0  0834               	movf	??___ftmul,w
  8539  0FA1  05BD               	andwf	___ftmul@sign,f
  8540  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8541  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8542  0FA4  30FF               	movlw	255
  8543  0FA5  05B1               	andwf	___ftmul@f2,f
  8544  0FA6  30FF               	movlw	255
  8545  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8546  0FA8  3000               	movlw	0
  8547  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8548  0FAA  3000               	movlw	0
  8549  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8550  0FAC  3000               	movlw	0
  8551  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8552  0FAE  3000               	movlw	0
  8553  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8554  0FB0  3007               	movlw	7
  8555  0FB1  00B4               	movwf	??___ftmul
  8556  0FB2  0834               	movf	??___ftmul,w
  8557  0FB3  00BC               	movwf	___ftmul@cntr
  8558  0FB4                     l5642:	
  8559  0FB4  1C2E               	btfss	___ftmul@f1,0
  8560  0FB5  2FBC               	goto	l5646
  8561  0FB6  0831               	movf	___ftmul@f2,w
  8562  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8563  0FB8  0832               	movf	___ftmul@f2+1,w
  8564  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8565  0FBA  0833               	movf	___ftmul@f2+2,w
  8566  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8567  0FBC                     l5646:	
  8568  0FBC  3001               	movlw	1
  8569  0FBD                     u4465:	
  8570  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8571  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8572  0FBF  0CAE               	rrf	___ftmul@f1,f
  8573  0FC0  0B89               	decfsz	9,f
  8574  0FC1  2FBD               	goto	u4465
  8575  0FC2  3001               	movlw	1
  8576  0FC3                     u4475:	
  8577  0FC3  35B1               	lslf	___ftmul@f2,f
  8578  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8579  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8580  0FC6  0B89               	decfsz	9,f
  8581  0FC7  2FC3               	goto	u4475
  8582  0FC8  3001               	movlw	1
  8583  0FC9  02BC               	subwf	___ftmul@cntr,f
  8584  0FCA  1D03               	btfss	3,2
  8585  0FCB  2FB4               	goto	l5642
  8586  0FCC  3009               	movlw	9
  8587  0FCD  00B4               	movwf	??___ftmul
  8588  0FCE  0834               	movf	??___ftmul,w
  8589  0FCF  00BC               	movwf	___ftmul@cntr
  8590  0FD0                     l5654:	
  8591  0FD0  1C2E               	btfss	___ftmul@f1,0
  8592  0FD1  2FD8               	goto	l5658
  8593  0FD2  0831               	movf	___ftmul@f2,w
  8594  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8595  0FD4  0832               	movf	___ftmul@f2+1,w
  8596  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8597  0FD6  0833               	movf	___ftmul@f2+2,w
  8598  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8599  0FD8                     l5658:	
  8600  0FD8  3001               	movlw	1
  8601  0FD9                     u4505:	
  8602  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8603  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8604  0FDB  0CAE               	rrf	___ftmul@f1,f
  8605  0FDC  0B89               	decfsz	9,f
  8606  0FDD  2FD9               	goto	u4505
  8607  0FDE  3001               	movlw	1
  8608  0FDF                     u4515:	
  8609  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8610  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8611  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8612  0FE2  0B89               	decfsz	9,f
  8613  0FE3  2FDF               	goto	u4515
  8614  0FE4  3001               	movlw	1
  8615  0FE5  02BC               	subwf	___ftmul@cntr,f
  8616  0FE6  1D03               	btfss	3,2
  8617  0FE7  2FD0               	goto	l5654
  8618  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8619  0FE9  00A0               	movwf	___ftpack@arg
  8620  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8621  0FEB  00A1               	movwf	___ftpack@arg+1
  8622  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8623  0FED  00A2               	movwf	___ftpack@arg+2
  8624  0FEE  0838               	movf	___ftmul@exp,w
  8625  0FEF  00B4               	movwf	??___ftmul
  8626  0FF0  0834               	movf	??___ftmul,w
  8627  0FF1  00A3               	movwf	___ftpack@exp
  8628  0FF2  083D               	movf	___ftmul@sign,w
  8629  0FF3  00B5               	movwf	??___ftmul+1
  8630  0FF4  0835               	movf	??___ftmul+1,w
  8631  0FF5  00A4               	movwf	___ftpack@sign
  8632  0FF6  318A  2251         	fcall	___ftpack
  8633  0FF8  0020               	movlb	0	; select bank0
  8634  0FF9  0820               	movf	?___ftpack,w
  8635  0FFA  00AE               	movwf	?___ftmul
  8636  0FFB  0821               	movf	?___ftpack+1,w
  8637  0FFC  00AF               	movwf	?___ftmul+1
  8638  0FFD  0822               	movf	?___ftpack+2,w
  8639  0FFE  00B0               	movwf	?___ftmul+2
  8640  0FFF  0008               	return
  8641  1000                     __end_of___ftmul:	
  8642                           
  8643                           	psect	text36
  8644  1EE4                     __ptext36:	
  8645 ;; *************** function _setMemory_Modify *****************
  8646 ;; Defined at:
  8647 ;;		line 1025 in file "../src/MCU_B1.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  command         1    wreg     unsigned char 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  command         1    1[BANK0 ] unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;		None               void
  8654 ;; Registers used:
  8655 ;;		wreg, status,2, status,0
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;Total ram usage:        2 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    5
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_setLog_Code
  8672 ;;		_setRFSW_AdjControl
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           
  8677                           ;psect for function _setMemory_Modify
  8678  1EE4                     _setMemory_Modify:	
  8679                           
  8680                           ;incstack = 0
  8681                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8682                           ;setMemory_Modify@command stored from wreg
  8683  1EE4  0020               	movlb	0	; select bank0
  8684  1EE5  00A1               	movwf	setMemory_Modify@command
  8685                           
  8686                           ;MCU_B1.c: 1026: Memory.Modify = command == 1 ? 1 : 0;
  8687  1EE6  0821               	movf	setMemory_Modify@command,w
  8688  1EE7  3A01               	xorlw	1
  8689  1EE8  3000               	movlw	0
  8690  1EE9  1903               	skipnz
  8691  1EEA  3001               	movlw	1
  8692  1EEB  00A0               	movwf	??_setMemory_Modify
  8693  1EEC  0023               	movlb	3	; select bank3
  8694  1EED  0844               	movf	(_Memory^(0+384)+36),w
  8695  1EEE  0020               	movlb	0	; select bank0
  8696  1EEF  0620               	xorwf	??_setMemory_Modify,w
  8697  1EF0  39FE               	andlw	-2
  8698  1EF1  0620               	xorwf	??_setMemory_Modify,w
  8699  1EF2  0023               	movlb	3	; select bank3
  8700  1EF3  00C4               	movwf	(_Memory^(0+384)+36)
  8701                           
  8702                           ;MCU_B1.c: 1027: Memory.Time = 0;
  8703  1EF4  01C2               	clrf	(_Memory^(0+384)+34)
  8704  1EF5  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8705  1EF6  0008               	return
  8706  1EF7                     __end_of_setMemory_Modify:	
  8707                           
  8708                           	psect	text37
  8709  1E8C                     __ptext37:	
  8710 ;; *************** function _getRF_KeyStatus *****************
  8711 ;; Defined at:
  8712 ;;		line 194 in file "../src/RF_Control_B1.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;		None
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  key             1    1[BANK0 ] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      unsigned char 
  8719 ;; Registers used:
  8720 ;;		wreg, status,2
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;Total ram usage:        3 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    5
  8733 ;; This function calls:
  8734 ;;		Nothing
  8735 ;; This function is called by:
  8736 ;;		_setRF_Main
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _getRF_KeyStatus
  8742  1E8C                     _getRF_KeyStatus:	
  8743                           
  8744                           ;RF_Control_B1.c: 195: char key = 0;
  8745                           
  8746                           ;incstack = 0
  8747                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8748  1E8C  0020               	movlb	0	; select bank0
  8749  1E8D  01A1               	clrf	getRF_KeyStatus@key
  8750                           
  8751                           ;RF_Control_B1.c: 205: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8752  1E8E  01A2               	clrf	_getRF_KeyStatus$5489
  8753  1E8F  0AA2               	incf	_getRF_KeyStatus$5489,f
  8754  1E90  1F0C               	btfss	12,6	;volatile
  8755  1E91  1A0C               	btfsc	12,4	;volatile
  8756  1E92  2E97               	goto	l6522
  8757  1E93  1C0C               	btfss	12,0	;volatile
  8758  1E94  1B8C               	btfsc	12,7	;volatile
  8759  1E95  2E97               	goto	l6522
  8760  1E96  01A2               	clrf	_getRF_KeyStatus$5489
  8761  1E97                     l6522:	
  8762  1E97  0822               	movf	_getRF_KeyStatus$5489,w
  8763  1E98  00A0               	movwf	??_getRF_KeyStatus
  8764  1E99  0820               	movf	??_getRF_KeyStatus,w
  8765  1E9A  00A1               	movwf	getRF_KeyStatus@key
  8766                           
  8767                           ;RF_Control_B1.c: 207: return key;
  8768  1E9B  0821               	movf	getRF_KeyStatus@key,w
  8769  1E9C  0008               	return
  8770  1E9D                     __end_of_getRF_KeyStatus:	
  8771                           
  8772                           	psect	text38
  8773  1E7B                     __ptext38:	
  8774 ;; *************** function _getBuz_GO *****************
  8775 ;; Defined at:
  8776 ;;		line 82 in file "../src/Buzzer_B1.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;  i               2    4[BANK0 ] int 
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  2    0[BANK0 ] int 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        6 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    5
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_setRF_Main
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _getBuz_GO
  8806  1E7B                     _getBuz_GO:	
  8807                           
  8808                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8812  1E7B  0021               	movlb	1	; select bank1
  8813  1E7C  0C2F               	rrf	_Buz1^(0+128),w
  8814  1E7D  3901               	andlw	1
  8815  1E7E  0020               	movlb	0	; select bank0
  8816  1E7F  00A2               	movwf	??_getBuz_GO
  8817  1E80  01A3               	clrf	??_getBuz_GO+1
  8818  1E81  0822               	movf	??_getBuz_GO,w
  8819  1E82  00A4               	movwf	getBuz_GO@i
  8820  1E83  0823               	movf	??_getBuz_GO+1,w
  8821  1E84  00A5               	movwf	getBuz_GO@i+1
  8822                           
  8823                           ;Buzzer_B1.c: 84: return i;
  8824  1E85  0825               	movf	getBuz_GO@i+1,w
  8825  1E86  01A1               	clrf	?_getBuz_GO+1
  8826  1E87  07A1               	addwf	?_getBuz_GO+1,f
  8827  1E88  0824               	movf	getBuz_GO@i,w
  8828  1E89  01A0               	clrf	?_getBuz_GO
  8829  1E8A  07A0               	addwf	?_getBuz_GO,f
  8830  1E8B  0008               	return
  8831  1E8C                     __end_of_getBuz_GO:	
  8832                           
  8833                           	psect	text39
  8834  1E0C                     __ptext39:	
  8835 ;; *************** function _RF_RxDisable *****************
  8836 ;; Defined at:
  8837 ;;		line 269 in file "../src/RF_Control_B1.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;		None               void
  8844 ;; Registers used:
  8845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;Total ram usage:        0 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    7
  8858 ;; This function calls:
  8859 ;;		_CC2500_WriteCommand
  8860 ;; This function is called by:
  8861 ;;		_setRF_Main
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           
  8866                           ;psect for function _RF_RxDisable
  8867  1E0C                     _RF_RxDisable:	
  8868                           
  8869                           ;RF_Control_B1.c: 270: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8870                           
  8871                           ;incstack = 0
  8872                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8873  1E0C  0021               	movlb	1	; select bank1
  8874  1E0D  18BB               	btfsc	_RF1^(0+128),1
  8875  1E0E  2E11               	goto	l2045
  8876  1E0F  1DBB               	btfss	_RF1^(0+128),3
  8877  1E10  0008               	return
  8878  1E11                     l2045:	
  8879                           
  8880                           ;RF_Control_B1.c: 271: RF1.RxStatus = 0;
  8881  1E11  11BB               	bcf	_RF1^(0+128),3
  8882                           
  8883                           ;RF_Control_B1.c: 272: RF1.ReceiveGO = 0;
  8884  1E12  10BB               	bcf	_RF1^(0+128),1
  8885                           
  8886                           ;RF_Control_B1.c: 273: CC2500_WriteCommand(0x36);
  8887  1E13  3036               	movlw	54
  8888  1E14  319F  2774  319E   	fcall	_CC2500_WriteCommand
  8889                           
  8890                           ;RF_Control_B1.c: 275: CC2500_WriteCommand(0x3A);
  8891  1E17  303A               	movlw	58
  8892  1E18  319F  2774         	fcall	_CC2500_WriteCommand
  8893  1E1A  0008               	return
  8894  1E1B                     __end_of_RF_RxDisable:	
  8895                           
  8896                           	psect	text40
  8897  0AB2                     __ptext40:	
  8898 ;; *************** function _CC2500_TxData *****************
  8899 ;; Defined at:
  8900 ;;		line 32 in file "../src/CC2500_B1.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;		None               void
  8907 ;; Registers used:
  8908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:        2 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    7
  8921 ;; This function calls:
  8922 ;;		_CC2500_WriteByte
  8923 ;;		_CC2500_WriteCommand
  8924 ;;		_Timeout_Counter
  8925 ;;		_set_TimeoutCleared
  8926 ;; This function is called by:
  8927 ;;		_setRF_Main
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           
  8932                           ;psect for function _CC2500_TxData
  8933  0AB2                     _CC2500_TxData:	
  8934                           
  8935                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8936                           ;CC2500_B1.c: 35: RC0 = 0;
  8937                           
  8938                           ;incstack = 0
  8939                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8940  0AB2  0020               	movlb	0	; select bank0
  8941  0AB3  100E               	bcf	14,0	;volatile
  8942                           
  8943                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8944  0AB4  307F               	movlw	127
  8945  0AB5  00A4               	movwf	??_CC2500_TxData
  8946  0AB6  0824               	movf	??_CC2500_TxData,w
  8947  0AB7  00FB               	movwf	_SPI0Buffer
  8948                           
  8949                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8950  0AB8  2ABC               	goto	l6236
  8951  0AB9                     l6234:	
  8952                           
  8953                           ;CC2500_B1.c: 38: Timeout_Counter();
  8954  0AB9  319F  2732  318A   	fcall	_Timeout_Counter
  8955  0ABC                     l6236:	
  8956  0ABC  0020               	movlb	0	; select bank0
  8957  0ABD  1E8E               	btfss	14,5	;volatile
  8958  0ABE  2AC2               	goto	l6240
  8959  0ABF  0021               	movlb	1	; select bank1
  8960  0AC0  1D2C               	btfss	(_myMain^(0+128)+12),2
  8961  0AC1  2AB9               	goto	l6234
  8962  0AC2                     l6240:	
  8963                           
  8964                           ;CC2500_B1.c: 39: };
  8965                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8966  0AC2  319C  24E5  318A   	fcall	_set_TimeoutCleared
  8967                           
  8968                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8969  0AC5  319F  270A  318A   	fcall	_CC2500_WriteByte
  8970                           
  8971                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8972  0AC8  0021               	movlb	1	; select bank1
  8973  0AC9  0852               	movf	_Tx_Length^(0+128),w
  8974  0ACA  0020               	movlb	0	; select bank0
  8975  0ACB  00A4               	movwf	??_CC2500_TxData
  8976  0ACC  0824               	movf	??_CC2500_TxData,w
  8977  0ACD  00FB               	movwf	_SPI0Buffer
  8978                           
  8979                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8980  0ACE  319F  270A  318A   	fcall	_CC2500_WriteByte
  8981                           
  8982                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8983  0AD1  0020               	movlb	0	; select bank0
  8984  0AD2  01A5               	clrf	CC2500_TxData@loop_e
  8985  0AD3                     l6254:	
  8986  0AD3  0021               	movlb	1	; select bank1
  8987  0AD4  0852               	movf	_Tx_Length^(0+128),w
  8988  0AD5  0020               	movlb	0	; select bank0
  8989  0AD6  0225               	subwf	CC2500_TxData@loop_e,w
  8990  0AD7  1803               	btfsc	3,0
  8991  0AD8  2AEB               	goto	l231
  8992                           
  8993                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8994  0AD9  0825               	movf	CC2500_TxData@loop_e,w
  8995  0ADA  3E20               	addlw	_RF_Data& (0+255)
  8996  0ADB  0086               	movwf	6
  8997  0ADC  3001               	movlw	1	; select bank2/3
  8998  0ADD  0087               	movwf	7
  8999  0ADE  0801               	movf	1,w
  9000  0ADF  00A4               	movwf	??_CC2500_TxData
  9001  0AE0  0824               	movf	??_CC2500_TxData,w
  9002  0AE1  00FB               	movwf	_SPI0Buffer
  9003                           
  9004                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9005  0AE2  319F  270A  318A   	fcall	_CC2500_WriteByte
  9006  0AE5  3001               	movlw	1
  9007  0AE6  0020               	movlb	0	; select bank0
  9008  0AE7  00A4               	movwf	??_CC2500_TxData
  9009  0AE8  0824               	movf	??_CC2500_TxData,w
  9010  0AE9  07A5               	addwf	CC2500_TxData@loop_e,f
  9011  0AEA  2AD3               	goto	l6254
  9012  0AEB                     l231:	
  9013                           
  9014                           ;CC2500_B1.c: 48: }
  9015                           ;CC2500_B1.c: 49: RC0 = 1;
  9016  0AEB  140E               	bsf	14,0	;volatile
  9017                           
  9018                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9019  0AEC  3035               	movlw	53
  9020  0AED  319F  2774  318A   	fcall	_CC2500_WriteCommand
  9021                           
  9022                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9023  0AF0  2AF4               	goto	l6260
  9024  0AF1                     l6258:	
  9025                           
  9026                           ;CC2500_B1.c: 52: Timeout_Counter();
  9027  0AF1  319F  2732  318A   	fcall	_Timeout_Counter
  9028  0AF4                     l6260:	
  9029  0AF4  0020               	movlb	0	; select bank0
  9030  0AF5  188E               	btfsc	14,1	;volatile
  9031  0AF6  2AFA               	goto	l6264
  9032  0AF7  0021               	movlb	1	; select bank1
  9033  0AF8  1D2C               	btfss	(_myMain^(0+128)+12),2
  9034  0AF9  2AF1               	goto	l6258
  9035  0AFA                     l6264:	
  9036                           
  9037                           ;CC2500_B1.c: 53: };
  9038                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9039  0AFA  319C  24E5  318A   	fcall	_set_TimeoutCleared
  9040                           
  9041                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9042  0AFD  2B01               	goto	l6268
  9043  0AFE                     l6266:	
  9044                           
  9045                           ;CC2500_B1.c: 57: Timeout_Counter();
  9046  0AFE  319F  2732  318A   	fcall	_Timeout_Counter
  9047  0B01                     l6268:	
  9048  0B01  0020               	movlb	0	; select bank0
  9049  0B02  1C8E               	btfss	14,1	;volatile
  9050  0B03  2B07               	goto	l6272
  9051  0B04  0021               	movlb	1	; select bank1
  9052  0B05  1D2C               	btfss	(_myMain^(0+128)+12),2
  9053  0B06  2AFE               	goto	l6266
  9054  0B07                     l6272:	
  9055                           
  9056                           ;CC2500_B1.c: 58: };
  9057                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9058  0B07  319C  24E5  318A   	fcall	_set_TimeoutCleared
  9059                           
  9060                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9061  0B0A  3036               	movlw	54
  9062  0B0B  319F  2774  318A   	fcall	_CC2500_WriteCommand
  9063                           
  9064                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9065  0B0E  303B               	movlw	59
  9066  0B0F  319F  2774         	fcall	_CC2500_WriteCommand
  9067                           
  9068                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9069  0B11  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9070  0B12  0008               	return
  9071  0B13                     __end_of_CC2500_TxData:	
  9072                           
  9073                           	psect	text41
  9074  1CB5                     __ptext41:	
  9075 ;; *************** function _RF_Initialization *****************
  9076 ;; Defined at:
  9077 ;;		line 9 in file "../src/RF_Control_B1.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;		None
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;		None
  9082 ;; Return value:  Size  Location     Type
  9083 ;;		None               void
  9084 ;; Registers used:
  9085 ;;		wreg, status,2, status,0, pclath, cstack
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 0/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;Total ram usage:        0 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; Hardware stack levels required when called:    6
  9098 ;; This function calls:
  9099 ;;		_setRF_Initialization
  9100 ;; This function is called by:
  9101 ;;		_main
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           
  9106                           ;psect for function _RF_Initialization
  9107  1CB5                     _RF_Initialization:	
  9108                           
  9109                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9110                           
  9111                           ;incstack = 0
  9112                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9113  1CB5  319D  2579         	fcall	_setRF_Initialization
  9114  1CB7  0008               	return
  9115  1CB8                     __end_of_RF_Initialization:	
  9116                           
  9117                           	psect	text42
  9118  1D79                     __ptext42:	
  9119 ;; *************** function _setRF_Initialization *****************
  9120 ;; Defined at:
  9121 ;;		line 43 in file "../src/RF_Control_B1.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;		None
  9126 ;; Return value:  Size  Location     Type
  9127 ;;		None               void
  9128 ;; Registers used:
  9129 ;;		wreg
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:        1 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    5
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_RF_Initialization
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _setRF_Initialization
  9151  1D79                     _setRF_Initialization:	
  9152                           
  9153                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _setRF_Initialization: [wreg]
  9157  1D79  3015               	movlw	21
  9158  1D7A  0020               	movlb	0	; select bank0
  9159  1D7B  00A0               	movwf	??_setRF_Initialization
  9160  1D7C  0820               	movf	??_setRF_Initialization,w
  9161  1D7D  0021               	movlb	1	; select bank1
  9162  1D7E  00D2               	movwf	_Tx_Length^(0+128)
  9163                           
  9164                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9165  1D7F  300A               	movlw	10
  9166  1D80  00C2               	movwf	(_RF1^(0+128)+7)
  9167  1D81  3000               	movlw	0
  9168  1D82  00C3               	movwf	(_RF1^(0+128)+8)
  9169  1D83  0008               	return
  9170  1D84                     __end_of_setRF_Initialization:	
  9171                           
  9172                           	psect	text43
  9173  1EC0                     __ptext43:	
  9174 ;; *************** function _Mcu_Initialization *****************
  9175 ;; Defined at:
  9176 ;;		line 30 in file "../src/MCU_B1.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;		None               void
  9183 ;; Registers used:
  9184 ;;		wreg, status,2, status,0, pclath, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    6
  9197 ;; This function calls:
  9198 ;;		_ADC_Set
  9199 ;;		_Fosc_Set
  9200 ;;		_IOC_Set
  9201 ;;		_IO_Set
  9202 ;;		_TMR1_Set
  9203 ;;		_WDT_Set
  9204 ;; This function is called by:
  9205 ;;		_main
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function _Mcu_Initialization
  9211  1EC0                     _Mcu_Initialization:	
  9212                           
  9213                           ;MCU_B1.c: 32: Fosc_Set();
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9217  1EC0  319C  24E1  319E   	fcall	_Fosc_Set
  9218                           
  9219                           ;MCU_B1.c: 34: IO_Set();
  9220  1EC3  319F  275C  319E   	fcall	_IO_Set
  9221                           
  9222                           ;MCU_B1.c: 36: ;;
  9223                           ;MCU_B1.c: 38: TMR1_Set();
  9224  1EC6  319D  25D6  319E   	fcall	_TMR1_Set
  9225                           
  9226                           ;MCU_B1.c: 40: ADC_Set();
  9227  1EC9  319C  24FC  319E   	fcall	_ADC_Set
  9228                           
  9229                           ;MCU_B1.c: 42: ;;
  9230                           ;MCU_B1.c: 44: ;;
  9231                           ;MCU_B1.c: 46: IOC_Set();
  9232  1ECC  319D  25CA  319E   	fcall	_IOC_Set
  9233                           
  9234                           ;MCU_B1.c: 48: ;;
  9235                           ;MCU_B1.c: 50: ;;
  9236                           ;MCU_B1.c: 52: WDT_Set();
  9237  1ECF  319D  256E         	fcall	_WDT_Set
  9238  1ED1  0008               	return
  9239  1ED2                     __end_of_Mcu_Initialization:	
  9240                           
  9241                           	psect	text44
  9242  1D6E                     __ptext44:	
  9243 ;; *************** function _WDT_Set *****************
  9244 ;; Defined at:
  9245 ;;		line 1044 in file "../src/MCU_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    5
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_Mcu_Initialization
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           
  9274                           ;psect for function _WDT_Set
  9275  1D6E                     _WDT_Set:	
  9276                           
  9277                           ;MCU_B1.c: 1051: WDTCON = 0b00010111;;
  9278                           
  9279                           ;incstack = 0
  9280                           ; Regs used in _WDT_Set: [wreg]
  9281  1D6E  3017               	movlw	23
  9282  1D6F  0021               	movlb	1	; select bank1
  9283  1D70  0097               	movwf	23	;volatile
  9284                           
  9285                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  9286  1D71  144A               	bsf	_WDT^(0+128),0
  9287                           
  9288                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  9289  1D72  300A               	movlw	10
  9290  1D73  0020               	movlb	0	; select bank0
  9291  1D74  00A0               	movwf	??_WDT_Set
  9292  1D75  0820               	movf	??_WDT_Set,w
  9293  1D76  0021               	movlb	1	; select bank1
  9294  1D77  00CB               	movwf	(_WDT^(0+128)+1)
  9295  1D78  0008               	return
  9296  1D79                     __end_of_WDT_Set:	
  9297                           
  9298                           	psect	text45
  9299  1DD6                     __ptext45:	
  9300 ;; *************** function _TMR1_Set *****************
  9301 ;; Defined at:
  9302 ;;		line 199 in file "../src/MCU_B1.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    5
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_Mcu_Initialization
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function _TMR1_Set
  9332  1DD6                     _TMR1_Set:	
  9333                           
  9334                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _TMR1_Set: [wreg]
  9338  1DD6  3041               	movlw	65
  9339  1DD7  0020               	movlb	0	; select bank0
  9340  1DD8  0098               	movwf	24	;volatile
  9341                           
  9342                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9343  1DD9  30FA               	movlw	250
  9344  1DDA  0097               	movwf	23	;volatile
  9345                           
  9346                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9347  1DDB  3038               	movlw	56
  9348  1DDC  0096               	movwf	22	;volatile
  9349                           
  9350                           ;MCU_B1.c: 203: TMR1IE = 1;
  9351  1DDD  0021               	movlb	1	; select bank1
  9352  1DDE  1411               	bsf	17,0	;volatile
  9353                           
  9354                           ;MCU_B1.c: 204: PEIE = 1;
  9355  1DDF  170B               	bsf	11,6	;volatile
  9356                           
  9357                           ;MCU_B1.c: 205: GIE = 1;
  9358  1DE0  178B               	bsf	11,7	;volatile
  9359  1DE1  0008               	return
  9360  1DE2                     __end_of_TMR1_Set:	
  9361                           
  9362                           	psect	text46
  9363  1F5C                     __ptext46:	
  9364 ;; *************** function _IO_Set *****************
  9365 ;; Defined at:
  9366 ;;		line 60 in file "../src/MCU_B1.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;		None
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;		None               void
  9373 ;; Registers used:
  9374 ;;		wreg, status,2
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;Total ram usage:        0 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    5
  9387 ;; This function calls:
  9388 ;;		Nothing
  9389 ;; This function is called by:
  9390 ;;		_Mcu_Initialization
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           
  9395                           ;psect for function _IO_Set
  9396  1F5C                     _IO_Set:	
  9397                           
  9398                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9399                           
  9400                           ;incstack = 0
  9401                           ; Regs used in _IO_Set: [wreg+status,2]
  9402  1F5C  30F7               	movlw	247
  9403  1F5D  0021               	movlb	1	; select bank1
  9404  1F5E  008C               	movwf	12	;volatile
  9405                           
  9406                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9407  1F5F  3004               	movlw	4
  9408  1F60  008D               	movwf	13	;volatile
  9409                           
  9410                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9411  1F61  3026               	movlw	38
  9412  1F62  008E               	movwf	14	;volatile
  9413                           
  9414                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9415  1F63  0022               	movlb	2	; select bank2
  9416  1F64  018C               	clrf	12	;volatile
  9417                           
  9418                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9419  1F65  018D               	clrf	13	;volatile
  9420                           
  9421                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9422  1F66  018E               	clrf	14	;volatile
  9423                           
  9424                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9425  1F67  300E               	movlw	14
  9426  1F68  0023               	movlb	3	; select bank3
  9427  1F69  008C               	movwf	12	;volatile
  9428                           
  9429                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9430  1F6A  018D               	clrf	13	;volatile
  9431                           
  9432                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9433  1F6B  018E               	clrf	14	;volatile
  9434                           
  9435                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9436  1F6C  30F7               	movlw	247
  9437  1F6D  0020               	movlb	0	; select bank0
  9438  1F6E  008C               	movwf	12	;volatile
  9439                           
  9440                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9441  1F6F  3004               	movlw	4
  9442  1F70  008D               	movwf	13	;volatile
  9443                           
  9444                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9445  1F71  3026               	movlw	38
  9446  1F72  008E               	movwf	14	;volatile
  9447  1F73  0008               	return
  9448  1F74                     __end_of_IO_Set:	
  9449                           
  9450                           	psect	text47
  9451  1DCA                     __ptext47:	
  9452 ;; *************** function _IOC_Set *****************
  9453 ;; Defined at:
  9454 ;;		line 366 in file "../src/MCU_B1.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;		None               void
  9461 ;; Registers used:
  9462 ;;		wreg, status,2
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;Total ram usage:        0 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    5
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_Mcu_Initialization
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           
  9483                           ;psect for function _IOC_Set
  9484  1DCA                     _IOC_Set:	
  9485                           
  9486                           ;MCU_B1.c: 367: WPUB2 = 0;
  9487                           
  9488                           ;incstack = 0
  9489                           ; Regs used in _IOC_Set: [wreg+status,2]
  9490  1DCA  0024               	movlb	4	; select bank4
  9491  1DCB  110D               	bcf	13,2	;volatile
  9492                           
  9493                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9494  1DCC  0027               	movlb	7	; select bank7
  9495  1DCD  0194               	clrf	20	;volatile
  9496                           
  9497                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9498  1DCE  3004               	movlw	4
  9499  1DCF  0095               	movwf	21	;volatile
  9500                           
  9501                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9502  1DD0  0196               	clrf	22	;volatile
  9503                           
  9504                           ;MCU_B1.c: 394: IOCIE = 1;
  9505  1DD1  158B               	bsf	11,3	;volatile
  9506                           
  9507                           ;MCU_B1.c: 395: IOCIF = 0;
  9508  1DD2  100B               	bcf	11,0	;volatile
  9509                           
  9510                           ;MCU_B1.c: 396: PEIE = 1;
  9511  1DD3  170B               	bsf	11,6	;volatile
  9512                           
  9513                           ;MCU_B1.c: 397: GIE = 1;
  9514  1DD4  178B               	bsf	11,7	;volatile
  9515  1DD5  0008               	return
  9516  1DD6                     __end_of_IOC_Set:	
  9517                           
  9518                           	psect	text48
  9519  1CE1                     __ptext48:	
  9520 ;; *************** function _Fosc_Set *****************
  9521 ;; Defined at:
  9522 ;;		line 56 in file "../src/MCU_B1.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;Total ram usage:        0 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    5
  9543 ;; This function calls:
  9544 ;;		Nothing
  9545 ;; This function is called by:
  9546 ;;		_Mcu_Initialization
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           
  9551                           ;psect for function _Fosc_Set
  9552  1CE1                     _Fosc_Set:	
  9553                           
  9554                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9555                           
  9556                           ;incstack = 0
  9557                           ; Regs used in _Fosc_Set: [wreg]
  9558  1CE1  3078               	movlw	120
  9559  1CE2  0021               	movlb	1	; select bank1
  9560  1CE3  0099               	movwf	25	;volatile
  9561  1CE4  0008               	return
  9562  1CE5                     __end_of_Fosc_Set:	
  9563                           
  9564                           	psect	text49
  9565  1CFC                     __ptext49:	
  9566 ;; *************** function _ADC_Set *****************
  9567 ;; Defined at:
  9568 ;;		line 421 in file "../src/MCU_B1.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;		None               void
  9575 ;; Registers used:
  9576 ;;		wreg
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;Total ram usage:        0 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    5
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_Mcu_Initialization
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _ADC_Set
  9598  1CFC                     _ADC_Set:	
  9599                           
  9600                           ;MCU_B1.c: 422: ADCON1 = 0xf3;
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in _ADC_Set: [wreg]
  9604  1CFC  30F3               	movlw	243
  9605  1CFD  0021               	movlb	1	; select bank1
  9606  1CFE  009E               	movwf	30	;volatile
  9607                           
  9608                           ;MCU_B1.c: 423: FVRCON = 0xc1;
  9609  1CFF  30C1               	movlw	193
  9610  1D00  0022               	movlb	2	; select bank2
  9611  1D01  0097               	movwf	23	;volatile
  9612  1D02  0008               	return
  9613  1D03                     __end_of_ADC_Set:	
  9614                           
  9615                           	psect	text50
  9616  02F8                     __ptext50:	
  9617 ;; *************** function _Load_Main *****************
  9618 ;; Defined at:
  9619 ;;		line 39 in file "../src/OverLoad_B1.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;		None
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  i               1   15[BANK0 ] unsigned char 
  9624 ;;  error           1   14[BANK0 ] unsigned char 
  9625 ;;  adjgo           1   12[BANK0 ] unsigned char 
  9626 ;;  j               1   11[BANK0 ] unsigned char 
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        7 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    8
  9643 ;; This function calls:
  9644 ;;		_getAll_DimmerLights_AdjGO
  9645 ;;		_getMain_All_Error_Status
  9646 ;;		_getMain_LightsStatus
  9647 ;;		_getMain_Lights_Count
  9648 ;;		_getMain_LoadOK
  9649 ;;		_setLoad_AH_AL_Restore
  9650 ;; This function is called by:
  9651 ;;		_main
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function _Load_Main
  9657  02F8                     _Load_Main:	
  9658                           
  9659                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9663  02F8  0020               	movlb	0	; select bank0
  9664  02F9  01AF               	clrf	Load_Main@i
  9665  02FA  01AB               	clrf	Load_Main@j
  9666  02FB  3000               	movlw	0
  9667  02FC  3192  22BC  3182   	fcall	_getMain_All_Error_Status
  9668  02FF  0020               	movlb	0	; select bank0
  9669  0300  00A9               	movwf	??_Load_Main
  9670  0301  0829               	movf	??_Load_Main,w
  9671  0302  00AE               	movwf	Load_Main@error
  9672  0303  01AC               	clrf	Load_Main@adjgo
  9673                           
  9674                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  9675  0304  0022               	movlb	2	; select bank2
  9676  0305  1C43               	btfss	_Load^(0+256),0
  9677  0306  2C36               	goto	l1541
  9678                           
  9679                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
  9680  0307  319D  2538  3182   	fcall	_getAll_DimmerLights_AdjGO
  9681  030A  0020               	movlb	0	; select bank0
  9682  030B  00A9               	movwf	??_Load_Main
  9683  030C  0829               	movf	??_Load_Main,w
  9684  030D  00AC               	movwf	Load_Main@adjgo
  9685                           
  9686                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  9687  030E  01AD               	clrf	_Load_Main$4107
  9688  030F  3192  2200  3182   	fcall	_getMain_LightsStatus
  9689  0312  3A01               	xorlw	1
  9690  0313  1D03               	skipz
  9691  0314  2B1E               	goto	l7586
  9692  0315  0020               	movlb	0	; select bank0
  9693  0316  08AE               	movf	Load_Main@error,f
  9694  0317  1D03               	skipz
  9695  0318  2B1E               	goto	l7586
  9696  0319  08AC               	movf	Load_Main@adjgo,f
  9697  031A  1D03               	skipz
  9698  031B  2B1E               	goto	l7586
  9699  031C  01AD               	clrf	_Load_Main$4107
  9700  031D  0AAD               	incf	_Load_Main$4107,f
  9701  031E                     l7586:	
  9702  031E  0020               	movlb	0	; select bank0
  9703  031F  082D               	movf	_Load_Main$4107,w
  9704  0320  0022               	movlb	2	; select bank2
  9705  0321  10C3               	bcf	_Load^(0+256),1
  9706  0322  1D03               	skipz
  9707  0323  14C3               	bsf	_Load^(0+256),1
  9708                           
  9709                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  9710  0324  319D  25EF  3182   	fcall	_getMain_LoadOK
  9711  0327  3A01               	xorlw	1
  9712  0328  1D03               	skipz
  9713  0329  2B2F               	goto	l1544
  9714  032A  0022               	movlb	2	; select bank2
  9715  032B  19C3               	btfsc	_Load^(0+256),3
  9716  032C  2B2F               	goto	l1544
  9717                           
  9718                           ;OverLoad_B1.c: 49: Load.Run = 1;
  9719  032D  15C3               	bsf	_Load^(0+256),3
  9720                           
  9721                           ;OverLoad_B1.c: 50: Load.OK = 0;
  9722  032E  13C3               	bcf	_Load^(0+256),7
  9723  032F                     l1544:	
  9724                           
  9725                           ;OverLoad_B1.c: 51: }
  9726                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  9727  032F  0022               	movlb	2	; select bank2
  9728  0330  1CC3               	btfss	_Load^(0+256),1
  9729  0331  2C06               	goto	l1545
  9730                           
  9731                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  9732  0332  1543               	bsf	_Load^(0+256),2
  9733                           
  9734                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  9735  0333  1E43               	btfss	_Load^(0+256),4
  9736  0334  2C04               	goto	l1546
  9737                           
  9738                           ;OverLoad_B1.c: 58: Load.Time++;
  9739  0335  3001               	movlw	1
  9740  0336  07C4               	addwf	(_Load^(0+256)+1),f
  9741  0337  3000               	movlw	0
  9742  0338  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
  9743                           
  9744                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  9745  0339  3000               	movlw	0
  9746  033A  0245               	subwf	((_Load+1)^(0+256)+1),w
  9747  033B  3005               	movlw	5
  9748  033C  1903               	skipnz
  9749  033D  0244               	subwf	(_Load^(0+256)+1),w
  9750  033E  1C03               	skipc
  9751  033F  0008               	return
  9752                           
  9753                           ;OverLoad_B1.c: 60: Load.Time = 0;
  9754  0340  01C4               	clrf	(_Load^(0+256)+1)
  9755  0341  01C5               	clrf	((_Load+1)^(0+256)+1)
  9756                           
  9757                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  9758  0342  1243               	bcf	_Load^(0+256),4
  9759                           
  9760                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
  9761  0343  0020               	movlb	0	; select bank0
  9762  0344  01AF               	clrf	Load_Main@i
  9763  0345  3004               	movlw	4
  9764  0346  022F               	subwf	Load_Main@i,w
  9765  0347  1803               	btfsc	3,0
  9766  0348  2B73               	goto	l7612
  9767  0349                     l7606:	
  9768                           
  9769                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  9770  0349  352F               	lslf	Load_Main@i,w
  9771  034A  3E4E               	addlw	(_Load+11)& (0+255)
  9772  034B  0086               	movwf	6
  9773  034C  3001               	movlw	1	; select bank2/3
  9774  034D  0087               	movwf	7
  9775  034E  3F40               	moviw [0]fsr1
  9776  034F  00A9               	movwf	??_Load_Main
  9777  0350  3F41               	moviw [1]fsr1
  9778  0351  00AA               	movwf	??_Load_Main+1
  9779  0352  0829               	movf	??_Load_Main,w
  9780  0353  0022               	movlb	2	; select bank2
  9781  0354  07C8               	addwf	(_Load^(0+256)+5),f
  9782  0355  0020               	movlb	0	; select bank0
  9783  0356  082A               	movf	??_Load_Main+1,w
  9784  0357  0022               	movlb	2	; select bank2
  9785  0358  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
  9786                           
  9787                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  9788  0359  0020               	movlb	0	; select bank0
  9789  035A  352F               	lslf	Load_Main@i,w
  9790  035B  3E58               	addlw	(_Load+21)& (0+255)
  9791  035C  0086               	movwf	6
  9792  035D  3001               	movlw	1	; select bank2/3
  9793  035E  0087               	movwf	7
  9794  035F  3F40               	moviw [0]fsr1
  9795  0360  00A9               	movwf	??_Load_Main
  9796  0361  3F41               	moviw [1]fsr1
  9797  0362  00AA               	movwf	??_Load_Main+1
  9798  0363  0829               	movf	??_Load_Main,w
  9799  0364  0022               	movlb	2	; select bank2
  9800  0365  07CA               	addwf	(_Load^(0+256)+7),f
  9801  0366  0020               	movlb	0	; select bank0
  9802  0367  082A               	movf	??_Load_Main+1,w
  9803  0368  0022               	movlb	2	; select bank2
  9804  0369  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
  9805  036A  3001               	movlw	1
  9806  036B  0020               	movlb	0	; select bank0
  9807  036C  00A9               	movwf	??_Load_Main
  9808  036D  0829               	movf	??_Load_Main,w
  9809  036E  07AF               	addwf	Load_Main@i,f
  9810  036F  3004               	movlw	4
  9811  0370  022F               	subwf	Load_Main@i,w
  9812  0371  1C03               	skipc
  9813  0372  2B49               	goto	l7606
  9814  0373                     l7612:	
  9815                           
  9816                           ;OverLoad_B1.c: 66: }
  9817                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
  9818  0373  3002               	movlw	2
  9819  0374  0022               	movlb	2	; select bank2
  9820  0375                     u7545:	
  9821  0375  36C9               	lsrf	((_Load+1)^(0+256)+5),f
  9822  0376  0CC8               	rrf	(_Load^(0+256)+5),f
  9823  0377  0B89               	decfsz	9,f
  9824  0378  2B75               	goto	u7545
  9825                           
  9826                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
  9827  0379  3002               	movlw	2
  9828  037A                     u7555:	
  9829  037A  36CB               	lsrf	((_Load+1)^(0+256)+7),f
  9830  037B  0CCA               	rrf	(_Load^(0+256)+7),f
  9831  037C  0B89               	decfsz	9,f
  9832  037D  2B7A               	goto	u7555
  9833                           
  9834                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  9835  037E  319F  27A7  3182   	fcall	_setLoad_AH_AL_Restore
  9836                           
  9837                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  9838  0381  0022               	movlb	2	; select bank2
  9839  0382  0849               	movf	((_Load+1)^(0+256)+5),w
  9840  0383  024B               	subwf	((_Load+1)^(0+256)+7),w
  9841  0384  1D03               	skipz
  9842  0385  2B88               	goto	u7565
  9843  0386  0848               	movf	(_Load^(0+256)+5),w
  9844  0387  024A               	subwf	(_Load^(0+256)+7),w
  9845  0388                     u7565:	
  9846  0388  1803               	skipnc
  9847  0389  0008               	return
  9848                           
  9849                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  9850  038A  3005               	movlw	5
  9851  038B  3E43               	addlw	_Load& (0+255)
  9852  038C  0086               	movwf	6
  9853  038D  3001               	movlw	1	; select bank2/3
  9854  038E  0087               	movwf	7
  9855  038F  094A               	comf	(_Load^(0+256)+7),w
  9856  0390  0020               	movlb	0	; select bank0
  9857  0391  00A9               	movwf	??_Load_Main
  9858  0392  0022               	movlb	2	; select bank2
  9859  0393  094B               	comf	((_Load+1)^(0+256)+7),w
  9860  0394  0020               	movlb	0	; select bank0
  9861  0395  00AA               	movwf	??_Load_Main+1
  9862  0396  0AA9               	incf	??_Load_Main,f
  9863  0397  1903               	skipnz
  9864  0398  0AAA               	incf	??_Load_Main+1,f
  9865  0399  3F40               	moviw [0]fsr1
  9866  039A  0729               	addwf	??_Load_Main,w
  9867  039B  0022               	movlb	2	; select bank2
  9868  039C  00E2               	movwf	(_Load^(0+256)+31)
  9869  039D  3F41               	moviw [1]fsr1
  9870  039E  0020               	movlb	0	; select bank0
  9871  039F  3D2A               	addwfc	??_Load_Main+1,w
  9872  03A0  0022               	movlb	2	; select bank2
  9873  03A1  00E3               	movwf	(_Load^(0+256)+32)
  9874                           
  9875                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  9876  03A2  01C8               	clrf	(_Load^(0+256)+5)
  9877  03A3  01C9               	clrf	((_Load+1)^(0+256)+5)
  9878                           
  9879                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  9880  03A4  01CA               	clrf	(_Load^(0+256)+7)
  9881  03A5  01CB               	clrf	((_Load+1)^(0+256)+7)
  9882                           
  9883                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  9884  03A6  319E  264A  3182   	fcall	_getMain_Lights_Count
  9885  03A9  0020               	movlb	0	; select bank0
  9886  03AA  00A9               	movwf	??_Load_Main
  9887  03AB  0829               	movf	??_Load_Main,w
  9888  03AC  0022               	movlb	2	; select bank2
  9889  03AD  00EE               	movwf	(_Load^(0+256)+43)
  9890                           
  9891                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  9892  03AE  1DC3               	btfss	_Load^(0+256),3
  9893  03AF  2BD5               	goto	l7644
  9894                           
  9895                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  9896  03B0  3002               	movlw	2
  9897  03B1  026C               	subwf	(_Load^(0+256)+41),w
  9898  03B2  1803               	skipnc
  9899  03B3  2BD5               	goto	l7644
  9900                           
  9901                           ;OverLoad_B1.c: 79: Load.Count++;
  9902  03B4  3001               	movlw	1
  9903  03B5  0020               	movlb	0	; select bank0
  9904  03B6  00A9               	movwf	??_Load_Main
  9905  03B7  0829               	movf	??_Load_Main,w
  9906  03B8  0022               	movlb	2	; select bank2
  9907  03B9  07EC               	addwf	(_Load^(0+256)+41),f
  9908                           
  9909                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
  9910  03BA  086C               	movf	(_Load^(0+256)+41),w
  9911  03BB  3A01               	xorlw	1
  9912  03BC  1D03               	skipz
  9913  03BD  2BC2               	goto	l7636
  9914                           
  9915                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*57);
  9916  03BE  3074               	movlw	116
  9917  03BF  00E8               	movwf	(_Load^(0+256)+37)
  9918  03C0  3004               	movlw	4
  9919  03C1  2BCD               	goto	L5
  9920  03C2                     l7636:	
  9921                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
  9922                           
  9923  03C2  086C               	movf	(_Load^(0+256)+41),w
  9924  03C3  3A02               	xorlw	2
  9925  03C4  1D03               	skipz
  9926  03C5  2BD5               	goto	l7644
  9927                           
  9928                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
  9929  03C6  086E               	movf	(_Load^(0+256)+43),w
  9930  03C7  3A01               	xorlw	1
  9931  03C8  1D03               	skipz
  9932  03C9  2BCF               	goto	l7642
  9933                           
  9934                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(2.5*57);
  9935  03CA  308E               	movlw	142
  9936  03CB  00E8               	movwf	(_Load^(0+256)+37)
  9937  03CC  3000               	movlw	0
  9938  03CD                     L5:	
  9939  03CD  00E9               	movwf	(_Load^(0+256)+38)
  9940                           
  9941                           ;OverLoad_B1.c: 85: } else {
  9942  03CE  2BD5               	goto	l7644
  9943  03CF                     l7642:	
  9944                           
  9945                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
  9946  03CF  084C               	movf	(_Load^(0+256)+9),w
  9947  03D0  3E8E               	addlw	142
  9948  03D1  00E8               	movwf	(_Load^(0+256)+37)
  9949  03D2  3000               	movlw	0
  9950  03D3  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
  9951  03D4  00E9               	movwf	((_Load+1)^(0+256)+37)
  9952  03D5                     l7644:	
  9953                           
  9954                           ;OverLoad_B1.c: 87: }
  9955                           ;OverLoad_B1.c: 88: }
  9956                           ;OverLoad_B1.c: 89: }
  9957                           ;OverLoad_B1.c: 90: }
  9958                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
  9959  03D5  0869               	movf	((_Load+1)^(0+256)+37),w
  9960  03D6  0263               	subwf	((_Load+1)^(0+256)+31),w
  9961  03D7  1D03               	skipz
  9962  03D8  2BDB               	goto	u7625
  9963  03D9  0868               	movf	(_Load^(0+256)+37),w
  9964  03DA  0262               	subwf	(_Load^(0+256)+31),w
  9965  03DB                     u7625:	
  9966  03DB  1C03               	skipc
  9967  03DC  2BEA               	goto	l7654
  9968                           
  9969                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
  9970  03DD  3001               	movlw	1
  9971  03DE  0020               	movlb	0	; select bank0
  9972  03DF  00A9               	movwf	??_Load_Main
  9973  03E0  0829               	movf	??_Load_Main,w
  9974  03E1  0022               	movlb	2	; select bank2
  9975  03E2  07ED               	addwf	(_Load^(0+256)+42),f
  9976                           
  9977                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
  9978  03E3  3003               	movlw	3
  9979  03E4  026D               	subwf	(_Load^(0+256)+42),w
  9980  03E5  1C03               	skipc
  9981  03E6  0008               	return
  9982                           
  9983                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
  9984  03E7  01ED               	clrf	(_Load^(0+256)+42)
  9985                           
  9986                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
  9987  03E8  16C3               	bsf	_Load^(0+256),5
  9988                           
  9989                           ;OverLoad_B1.c: 122: }
  9990                           ;OverLoad_B1.c: 123: } else {
  9991  03E9  0008               	return
  9992  03EA                     l7654:	
  9993                           
  9994                           ;OverLoad_B1.c: 124: Load.ErrorCount = 0;
  9995  03EA  01ED               	clrf	(_Load^(0+256)+42)
  9996                           
  9997                           ;OverLoad_B1.c: 125: if (Load.Run == 1) {
  9998  03EB  1DC3               	btfss	_Load^(0+256),3
  9999  03EC  0008               	return
 10000                           
 10001                           ;OverLoad_B1.c: 126: if (Load.OK == 0) {
 10002  03ED  1BC3               	btfsc	_Load^(0+256),7
 10003  03EE  0008               	return
 10004                           
 10005                           ;OverLoad_B1.c: 127: Load.SafeCount++;
 10006  03EF  3001               	movlw	1
 10007  03F0  0020               	movlb	0	; select bank0
 10008  03F1  00A9               	movwf	??_Load_Main
 10009  03F2  0829               	movf	??_Load_Main,w
 10010  03F3  0022               	movlb	2	; select bank2
 10011  03F4  07EF               	addwf	(_Load^(0+256)+44),f
 10012                           
 10013                           ;OverLoad_B1.c: 128: if (Load.SafeCount >= 3) {
 10014  03F5  3003               	movlw	3
 10015  03F6  026F               	subwf	(_Load^(0+256)+44),w
 10016  03F7  1C03               	skipc
 10017  03F8  0008               	return
 10018                           
 10019                           ;OverLoad_B1.c: 129: Load.SafeCount = 0;
 10020  03F9  01EF               	clrf	(_Load^(0+256)+44)
 10021                           
 10022                           ;OverLoad_B1.c: 130: Load.OK = 1;
 10023  03FA  17C3               	bsf	_Load^(0+256),7
 10024                           
 10025                           ;OverLoad_B1.c: 131: Load.Run = 0;
 10026  03FB  11C3               	bcf	_Load^(0+256),3
 10027                           
 10028                           ;OverLoad_B1.c: 132: Load.Count = 0;
 10029  03FC  01EC               	clrf	(_Load^(0+256)+41)
 10030                           
 10031                           ;OverLoad_B1.c: 133: Load.TotalLoad = Load.AD;
 10032  03FD  0863               	movf	((_Load+1)^(0+256)+31),w
 10033  03FE  01CD               	clrf	((_Load+1)^(0+256)+9)
 10034  03FF  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10035  0400  0862               	movf	(_Load^(0+256)+31),w
 10036  0401  01CC               	clrf	(_Load^(0+256)+9)
 10037  0402  07CC               	addwf	(_Load^(0+256)+9),f
 10038                           
 10039                           ;OverLoad_B1.c: 157: }
 10040                           ;OverLoad_B1.c: 158: }
 10041                           ;OverLoad_B1.c: 159: }
 10042                           ;OverLoad_B1.c: 160: }
 10043                           ;OverLoad_B1.c: 161: }
 10044                           ;OverLoad_B1.c: 162: }
 10045                           ;OverLoad_B1.c: 163: } else {
 10046  0403  0008               	return
 10047  0404                     l1546:	
 10048                           
 10049                           ;OverLoad_B1.c: 164: Load.ADtoGO = 1;
 10050  0404  1643               	bsf	_Load^(0+256),4
 10051                           
 10052                           ;OverLoad_B1.c: 165: }
 10053                           ;OverLoad_B1.c: 166: } else {
 10054  0405  0008               	return
 10055  0406                     l1545:	
 10056                           
 10057                           ;OverLoad_B1.c: 167: if (Load.LightsON == 1 && error != 3) {
 10058  0406  1D43               	btfss	_Load^(0+256),2
 10059  0407  2C24               	goto	l7702
 10060  0408  0020               	movlb	0	; select bank0
 10061  0409  082E               	movf	Load_Main@error,w
 10062  040A  3A03               	xorlw	3
 10063  040B  1903               	skipnz
 10064  040C  2C24               	goto	l7702
 10065                           
 10066                           ;OverLoad_B1.c: 168: Load.LightsON = 0;
 10067  040D  0022               	movlb	2	; select bank2
 10068  040E  1143               	bcf	_Load^(0+256),2
 10069                           
 10070                           ;OverLoad_B1.c: 170: Load.Time = 0;
 10071  040F  01C4               	clrf	(_Load^(0+256)+1)
 10072  0410  01C5               	clrf	((_Load+1)^(0+256)+1)
 10073                           
 10074                           ;OverLoad_B1.c: 171: Load.ADtoGO = 0;
 10075  0411  1243               	bcf	_Load^(0+256),4
 10076                           
 10077                           ;OverLoad_B1.c: 172: setLoad_AH_AL_Restore();
 10078  0412  319F  27A7  3182   	fcall	_setLoad_AH_AL_Restore
 10079                           
 10080                           ;OverLoad_B1.c: 173: Load.Count = 0;
 10081  0415  0022               	movlb	2	; select bank2
 10082  0416  01EC               	clrf	(_Load^(0+256)+41)
 10083                           
 10084                           ;OverLoad_B1.c: 174: Load.ErrorCount = 0;
 10085  0417  01ED               	clrf	(_Load^(0+256)+42)
 10086                           
 10087                           ;OverLoad_B1.c: 175: Load.SafeCount = 0;
 10088  0418  01EF               	clrf	(_Load^(0+256)+44)
 10089                           
 10090                           ;OverLoad_B1.c: 177: Load.ADH = 0;
 10091  0419  01C8               	clrf	(_Load^(0+256)+5)
 10092  041A  01C9               	clrf	((_Load+1)^(0+256)+5)
 10093                           
 10094                           ;OverLoad_B1.c: 178: Load.ADL = 0;
 10095  041B  01CA               	clrf	(_Load^(0+256)+7)
 10096  041C  01CB               	clrf	((_Load+1)^(0+256)+7)
 10097                           
 10098                           ;OverLoad_B1.c: 179: Load.AD = 0;
 10099  041D  01E2               	clrf	(_Load^(0+256)+31)
 10100  041E  01E3               	clrf	((_Load+1)^(0+256)+31)
 10101                           
 10102                           ;OverLoad_B1.c: 180: Load.JudgeValue = 0;
 10103  041F  01E8               	clrf	(_Load^(0+256)+37)
 10104  0420  01E9               	clrf	((_Load+1)^(0+256)+37)
 10105                           
 10106                           ;OverLoad_B1.c: 181: Load.LightsCount = 0;
 10107  0421  01EE               	clrf	(_Load^(0+256)+43)
 10108                           
 10109                           ;OverLoad_B1.c: 182: Load.Run = 0;
 10110  0422  11C3               	bcf	_Load^(0+256),3
 10111                           
 10112                           ;OverLoad_B1.c: 183: Load.OK = 1;
 10113  0423  17C3               	bsf	_Load^(0+256),7
 10114  0424                     l7702:	
 10115                           
 10116                           ;OverLoad_B1.c: 204: }
 10117                           ;OverLoad_B1.c: 205: if (Load.ERROR == 1) {
 10118  0424  0022               	movlb	2	; select bank2
 10119  0425  1EC3               	btfss	_Load^(0+256),5
 10120  0426  0008               	return
 10121                           
 10122                           ;OverLoad_B1.c: 206: Load.ErrorTime++;
 10123  0427  3001               	movlw	1
 10124  0428  07C6               	addwf	(_Load^(0+256)+3),f
 10125  0429  3000               	movlw	0
 10126  042A  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10127                           
 10128                           ;OverLoad_B1.c: 207: if (Load.ErrorTime >= 1000) {
 10129  042B  3003               	movlw	3
 10130  042C  0247               	subwf	((_Load+1)^(0+256)+3),w
 10131  042D  30E8               	movlw	232
 10132  042E  1903               	skipnz
 10133  042F  0246               	subwf	(_Load^(0+256)+3),w
 10134  0430  1C03               	skipc
 10135  0431  0008               	return
 10136                           
 10137                           ;OverLoad_B1.c: 208: Load.ErrorTime = 0;
 10138  0432  01C6               	clrf	(_Load^(0+256)+3)
 10139  0433  01C7               	clrf	((_Load+1)^(0+256)+3)
 10140                           
 10141                           ;OverLoad_B1.c: 215: Load.ERROR = 0;
 10142  0434  12C3               	bcf	_Load^(0+256),5
 10143                           
 10144                           ;OverLoad_B1.c: 216: }
 10145                           ;OverLoad_B1.c: 217: }
 10146                           ;OverLoad_B1.c: 218: }
 10147                           ;OverLoad_B1.c: 219: } else {
 10148  0435  0008               	return
 10149  0436                     l1541:	
 10150                           
 10151                           ;OverLoad_B1.c: 220: if (myMain.PowerON == 1) {
 10152  0436  0021               	movlb	1	; select bank1
 10153  0437  1C20               	btfss	_myMain^(0+128),0
 10154  0438  0008               	return
 10155                           
 10156                           ;OverLoad_B1.c: 221: Load.Enable = 1;
 10157  0439  0022               	movlb	2	; select bank2
 10158  043A  1443               	bsf	_Load^(0+256),0
 10159  043B  0008               	return
 10160  043C                     __end_of_Load_Main:	
 10161                           
 10162                           	psect	text51
 10163  1DEF                     __ptext51:	
 10164 ;; *************** function _getMain_LoadOK *****************
 10165 ;; Defined at:
 10166 ;;		line 440 in file "../src/Main_B1.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;		None
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;  ok              1    2[BANK0 ] unsigned char 
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  1    wreg      unsigned char 
 10173 ;; Registers used:
 10174 ;;		wreg, status,2, pclath, cstack
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;Total ram usage:        2 bytes
 10185 ;; Hardware stack levels used:    1
 10186 ;; Hardware stack levels required when called:    6
 10187 ;; This function calls:
 10188 ;;		_getDimmer_LoadOK
 10189 ;; This function is called by:
 10190 ;;		_Load_Main
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           
 10195                           ;psect for function _getMain_LoadOK
 10196  1DEF                     _getMain_LoadOK:	
 10197                           
 10198                           ;Main_B1.c: 441: char ok = 0;
 10199                           
 10200                           ;incstack = 0
 10201                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10202  1DEF  0020               	movlb	0	; select bank0
 10203  1DF0  01A2               	clrf	getMain_LoadOK@ok
 10204                           
 10205                           ;Main_B1.c: 447: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10206  1DF1  319D  250B         	fcall	_getDimmer_LoadOK
 10207  1DF3  3A01               	xorlw	1
 10208  1DF4  3000               	movlw	0
 10209  1DF5  1903               	skipnz
 10210  1DF6  3001               	movlw	1
 10211  1DF7  0020               	movlb	0	; select bank0
 10212  1DF8  00A1               	movwf	??_getMain_LoadOK
 10213  1DF9  0821               	movf	??_getMain_LoadOK,w
 10214  1DFA  00A2               	movwf	getMain_LoadOK@ok
 10215                           
 10216                           ;Main_B1.c: 449: return ok;
 10217  1DFB  0822               	movf	getMain_LoadOK@ok,w
 10218  1DFC  0008               	return
 10219  1DFD                     __end_of_getMain_LoadOK:	
 10220                           
 10221                           	psect	text52
 10222  1D0B                     __ptext52:	
 10223 ;; *************** function _getDimmer_LoadOK *****************
 10224 ;; Defined at:
 10225 ;;		line 599 in file "../src/Dimmer_B1.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;		None
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;  status          1    0[BANK0 ] unsigned char 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      unsigned char 
 10232 ;; Registers used:
 10233 ;;		wreg, status,2
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;Total ram usage:        1 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    5
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_getMain_LoadOK
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           
 10254                           ;psect for function _getDimmer_LoadOK
 10255  1D0B                     _getDimmer_LoadOK:	
 10256                           
 10257                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10258                           
 10259                           ;incstack = 0
 10260                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10261  1D0B  3000               	movlw	0
 10262  1D0C  0022               	movlb	2	; select bank2
 10263  1D0D  18BE               	btfsc	_Dimmer^(0+256),1
 10264  1D0E  3001               	movlw	1
 10265  1D0F  0020               	movlb	0	; select bank0
 10266  1D10  00A0               	movwf	getDimmer_LoadOK@status
 10267                           
 10268                           ;Dimmer_B1.c: 601: return status;
 10269  1D11  0820               	movf	getDimmer_LoadOK@status,w
 10270  1D12  0008               	return
 10271  1D13                     __end_of_getDimmer_LoadOK:	
 10272                           
 10273                           	psect	text53
 10274  1E4A                     __ptext53:	
 10275 ;; *************** function _getMain_Lights_Count *****************
 10276 ;; Defined at:
 10277 ;;		line 410 in file "../src/Main_B1.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  status1         1    3[BANK0 ] unsigned char 
 10282 ;;  status3         1    2[BANK0 ] unsigned char 
 10283 ;;  status2         1    1[BANK0 ] unsigned char 
 10284 ;;  count           1    0[BANK0 ] unsigned char 
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  1    wreg      unsigned char 
 10287 ;; Registers used:
 10288 ;;		wreg, status,2, status,0
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;Total ram usage:        4 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    5
 10301 ;; This function calls:
 10302 ;;		Nothing
 10303 ;; This function is called by:
 10304 ;;		_Load_Main
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _getMain_Lights_Count
 10310  1E4A                     _getMain_Lights_Count:	
 10311                           
 10312                           ;Main_B1.c: 411: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10316  1E4A  0020               	movlb	0	; select bank0
 10317  1E4B  01A3               	clrf	getMain_Lights_Count@status1
 10318  1E4C  01A1               	clrf	getMain_Lights_Count@status2
 10319  1E4D  01A2               	clrf	getMain_Lights_Count@status3
 10320  1E4E  01A0               	clrf	getMain_Lights_Count@count
 10321                           
 10322                           ;Main_B1.c: 415: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10323  1E4F  3000               	movlw	0
 10324  1E50  0023               	movlb	3	; select bank3
 10325  1E51  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10326  1E52  3001               	movlw	1
 10327  1E53  0020               	movlb	0	; select bank0
 10328  1E54  00A3               	movwf	getMain_Lights_Count@status1
 10329                           
 10330                           ;Main_B1.c: 436: return count = (status1 + status2 + status3);
 10331  1E55  0823               	movf	getMain_Lights_Count@status1,w
 10332  1E56  0721               	addwf	getMain_Lights_Count@status2,w
 10333  1E57  0722               	addwf	getMain_Lights_Count@status3,w
 10334  1E58  00A0               	movwf	getMain_Lights_Count@count
 10335  1E59  0008               	return
 10336  1E5A                     __end_of_getMain_Lights_Count:	
 10337                           
 10338                           	psect	text54
 10339  1D38                     __ptext54:	
 10340 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10341 ;; Defined at:
 10342 ;;		line 490 in file "../src/Dimmer_B1.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;		None
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10347 ;; Return value:  Size  Location     Type
 10348 ;;                  1    wreg      unsigned char 
 10349 ;; Registers used:
 10350 ;;		wreg, status,2
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;Total ram usage:        1 bytes
 10361 ;; Hardware stack levels used:    1
 10362 ;; Hardware stack levels required when called:    5
 10363 ;; This function calls:
 10364 ;;		Nothing
 10365 ;; This function is called by:
 10366 ;;		_setDimmerLights_SwOn
 10367 ;;		_setDimmerLights_AdjControl
 10368 ;;		_Load_Main
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           
 10373                           ;psect for function _getAll_DimmerLights_AdjGO
 10374  1D38                     _getAll_DimmerLights_AdjGO:	
 10375                           
 10376                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10377                           
 10378                           ;incstack = 0
 10379                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10380  1D38  0020               	movlb	0	; select bank0
 10381  1D39  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10382                           
 10383                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10384  1D3A  3000               	movlw	0
 10385  1D3B  0023               	movlb	3	; select bank3
 10386  1D3C  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10387  1D3D  3001               	movlw	1
 10388  1D3E  0020               	movlb	0	; select bank0
 10389  1D3F  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10390                           
 10391                           ;Dimmer_B1.c: 501: return adjgo;
 10392  1D40  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10393  1D41  0008               	return
 10394  1D42                     __end_of_getAll_DimmerLights_AdjGO:	
 10395                           
 10396                           	psect	text55
 10397  07FB                     __ptext55:	
 10398 ;; *************** function _Load_Initialization *****************
 10399 ;; Defined at:
 10400 ;;		line 9 in file "../src/OverLoad_B1.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;		None
 10405 ;; Return value:  Size  Location     Type
 10406 ;;		None               void
 10407 ;; Registers used:
 10408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10409 ;; Tracked objects:
 10410 ;;		On entry : 0/0
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;Total ram usage:        0 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    6
 10421 ;; This function calls:
 10422 ;;		_setLoad_AH_AL_Restore
 10423 ;; This function is called by:
 10424 ;;		_main
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _Load_Initialization
 10430  07FB                     _Load_Initialization:	
 10431                           
 10432                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10436  07FB  0022               	movlb	2	; select bank2
 10437  07FC  17C3               	bsf	_Load^(0+256),7
 10438                           
 10439                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10440  07FD  319F  27A7         	fcall	_setLoad_AH_AL_Restore
 10441  07FF  0008               	return
 10442  0800                     __end_of_Load_Initialization:	
 10443                           
 10444                           	psect	text56
 10445  1FA7                     __ptext56:	
 10446 ;; *************** function _setLoad_AH_AL_Restore *****************
 10447 ;; Defined at:
 10448 ;;		line 248 in file "../src/OverLoad_B1.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  i               1    1[BANK0 ] unsigned char 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;		None               void
 10455 ;; Registers used:
 10456 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        2 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    5
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_Load_Initialization
 10473 ;;		_Load_Main
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           
 10478                           ;psect for function _setLoad_AH_AL_Restore
 10479  1FA7                     _setLoad_AH_AL_Restore:	
 10480                           
 10481                           ;OverLoad_B1.c: 249: char i;
 10482                           ;OverLoad_B1.c: 250: for (i = 0; i < 5; i++) {
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10486  1FA7  0020               	movlb	0	; select bank0
 10487  1FA8  01A1               	clrf	setLoad_AH_AL_Restore@i
 10488  1FA9                     L6:	
 10489  1FA9  3005               	movlw	5
 10490  1FAA  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10491  1FAB  1803               	btfsc	3,0
 10492  1FAC  0008               	return
 10493                           
 10494                           ;OverLoad_B1.c: 251: Load.AH[i] = 0;
 10495  1FAD  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10496  1FAE  3E4E               	addlw	(_Load+11)& (0+255)
 10497  1FAF  0086               	movwf	6
 10498  1FB0  3001               	movlw	1	; select bank2/3
 10499  1FB1  0087               	movwf	7
 10500  1FB2  3000               	movlw	0
 10501  1FB3  3FC0               	movwi [0]fsr1
 10502  1FB4  3FC1               	movwi [1]fsr1
 10503                           
 10504                           ;OverLoad_B1.c: 252: Load.AL[i] = 0xffff;
 10505  1FB5  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10506  1FB6  3E58               	addlw	(_Load+21)& (0+255)
 10507  1FB7  0086               	movwf	6
 10508  1FB8  3001               	movlw	1	; select bank2/3
 10509  1FB9  0087               	movwf	7
 10510  1FBA  30FF               	movlw	255
 10511  1FBB  3FC0               	movwi [0]fsr1
 10512  1FBC  30FF               	movlw	255
 10513  1FBD  3FC1               	movwi [1]fsr1
 10514  1FBE  3001               	movlw	1
 10515  1FBF  00A0               	movwf	??_setLoad_AH_AL_Restore
 10516  1FC0  0820               	movf	??_setLoad_AH_AL_Restore,w
 10517  1FC1  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10518  1FC2  2FA9               	goto	L6
 10519  1FC3                     __end_of_setLoad_AH_AL_Restore:	
 10520                           
 10521                           	psect	text57
 10522  1CDD                     __ptext57:	
 10523 ;; *************** function _LED_Main *****************
 10524 ;; Defined at:
 10525 ;;		line 47 in file "../src/LED_B1.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;		None
 10530 ;; Return value:  Size  Location     Type
 10531 ;;		None               void
 10532 ;; Registers used:
 10533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:        0 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    7
 10546 ;; This function calls:
 10547 ;;		_setLED_Main
 10548 ;; This function is called by:
 10549 ;;		_main
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           
 10554                           ;psect for function _LED_Main
 10555  1CDD                     _LED_Main:	
 10556                           
 10557                           ;LED_B1.c: 62: setLED_Main(99);
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10561  1CDD  3063               	movlw	99
 10562  1CDE  3192  22EF         	fcall	_setLED_Main
 10563  1CE0  0008               	return
 10564  1CE1                     __end_of_LED_Main:	
 10565                           
 10566                           	psect	text58
 10567  12EF                     __ptext58:	
 10568 ;; *************** function _setLED_Main *****************
 10569 ;; Defined at:
 10570 ;;		line 221 in file "../src/LED_B1.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;  led             1    wreg     unsigned char 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;  led             1    4[BANK0 ] unsigned char 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;Total ram usage:        3 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    6
 10591 ;; This function calls:
 10592 ;;		_LedPointSelect
 10593 ;; This function is called by:
 10594 ;;		_LED_Main
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _setLED_Main
 10600  12EF                     _setLED_Main:	
 10601                           
 10602                           ;incstack = 0
 10603                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10604                           ;setLED_Main@led stored from wreg
 10605  12EF  0020               	movlb	0	; select bank0
 10606  12F0  00A4               	movwf	setLED_Main@led
 10607                           
 10608                           ;LED_B1.c: 222: LedPointSelect(led);
 10609  12F1  0824               	movf	setLED_Main@led,w
 10610  12F2  319D  2563  3192   	fcall	_LedPointSelect
 10611                           
 10612                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10613  12F5  087A               	movf	_LED,w
 10614  12F6  0086               	movwf	6
 10615  12F7  3001               	movlw	1	; select bank2/3
 10616  12F8  0087               	movwf	7
 10617  12F9  1C81               	btfss	1,1
 10618  12FA  0008               	return
 10619                           
 10620                           ;LED_B1.c: 224: LED->Time++;
 10621  12FB  0A7A               	incf	_LED,w
 10622  12FC  0086               	movwf	6
 10623  12FD  3001               	movlw	1	; select bank2/3
 10624  12FE  0087               	movwf	7
 10625  12FF  3001               	movlw	1
 10626  1300  0781               	addwf	1,f
 10627  1301  3141               	addfsr 1,1
 10628  1302  1803               	skipnc
 10629  1303  0A81               	incf	1,f
 10630                           
 10631                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10632  1304  0A7A               	incf	_LED,w
 10633  1305  0086               	movwf	6
 10634  1306  3001               	movlw	1	; select bank2/3
 10635  1307  0087               	movwf	7
 10636  1308  3F40               	moviw [0]fsr1
 10637  1309  0020               	movlb	0	; select bank0
 10638  130A  00A2               	movwf	??_setLED_Main
 10639  130B  3F41               	moviw [1]fsr1
 10640  130C  00A3               	movwf	??_setLED_Main+1
 10641  130D  3000               	movlw	0
 10642  130E  0223               	subwf	??_setLED_Main+1,w
 10643  130F  3032               	movlw	50
 10644  1310  1903               	skipnz
 10645  1311  0222               	subwf	??_setLED_Main,w
 10646  1312  1C03               	skipc
 10647  1313  0008               	return
 10648                           
 10649                           ;LED_B1.c: 226: LED->Time = 0;
 10650  1314  0A7A               	incf	_LED,w
 10651  1315  0086               	movwf	6
 10652  1316  3001               	movlw	1	; select bank2/3
 10653  1317  0087               	movwf	7
 10654  1318  3000               	movlw	0
 10655  1319  3FC0               	movwi [0]fsr1
 10656  131A  3FC1               	movwi [1]fsr1
 10657                           
 10658                           ;LED_B1.c: 243: if (led == 99) {
 10659  131B  0824               	movf	setLED_Main@led,w
 10660  131C  3A63               	xorlw	99
 10661  131D  1D03               	skipz
 10662  131E  0008               	return
 10663                           
 10664                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10665  131F  3020               	movlw	32
 10666  1320  068D               	xorwf	13,f
 10667  1321  0008               	return
 10668  1322                     __end_of_setLED_Main:	
 10669                           
 10670                           	psect	text59
 10671  1CD9                     __ptext59:	
 10672 ;; *************** function _LED_Initialization *****************
 10673 ;; Defined at:
 10674 ;;		line 31 in file "../src/LED_B1.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;		None
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;		None               void
 10681 ;; Registers used:
 10682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        0 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    8
 10695 ;; This function calls:
 10696 ;;		_setLED_Initialization
 10697 ;; This function is called by:
 10698 ;;		_main
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function _LED_Initialization
 10704  1CD9                     _LED_Initialization:	
 10705                           
 10706                           ;LED_B1.c: 42: setLED_Initialization(99);
 10707                           
 10708                           ;incstack = 0
 10709                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10710  1CD9  3063               	movlw	99
 10711  1CDA  319E  266A         	fcall	_setLED_Initialization
 10712  1CDC  0008               	return
 10713  1CDD                     __end_of_LED_Initialization:	
 10714                           
 10715                           	psect	text60
 10716  1E6A                     __ptext60:	
 10717 ;; *************** function _setLED_Initialization *****************
 10718 ;; Defined at:
 10719 ;;		line 69 in file "../src/LED_B1.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  led             1    wreg     unsigned char 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  led             1    4[BANK0 ] unsigned char 
 10724 ;; Return value:  Size  Location     Type
 10725 ;;		None               void
 10726 ;; Registers used:
 10727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;Total ram usage:        1 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    7
 10740 ;; This function calls:
 10741 ;;		_LedPointSelect
 10742 ;;		_setLED
 10743 ;; This function is called by:
 10744 ;;		_LED_Initialization
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           
 10749                           ;psect for function _setLED_Initialization
 10750  1E6A                     _setLED_Initialization:	
 10751                           
 10752                           ;incstack = 0
 10753                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10754                           ;setLED_Initialization@led stored from wreg
 10755  1E6A  0020               	movlb	0	; select bank0
 10756  1E6B  00A4               	movwf	setLED_Initialization@led
 10757                           
 10758                           ;LED_B1.c: 70: LedPointSelect(led);
 10759  1E6C  0824               	movf	setLED_Initialization@led,w
 10760  1E6D  319D  2563  319E   	fcall	_LedPointSelect
 10761                           
 10762                           ;LED_B1.c: 71: LED->Enable = 1;
 10763  1E70  087A               	movf	_LED,w
 10764  1E71  0086               	movwf	6
 10765  1E72  3001               	movlw	1	; select bank2/3
 10766  1E73  0087               	movwf	7
 10767  1E74  1401               	bsf	1,0
 10768                           
 10769                           ;LED_B1.c: 72: setLED(led, 0);
 10770  1E75  0020               	movlb	0	; select bank0
 10771  1E76  01A2               	clrf	setLED@command
 10772  1E77  0824               	movf	setLED_Initialization@led,w
 10773  1E78  3193  2357         	fcall	_setLED
 10774  1E7A  0008               	return
 10775  1E7B                     __end_of_setLED_Initialization:	
 10776                           
 10777                           	psect	text61
 10778  138D                     __ptext61:	
 10779 ;; *************** function _Flash_Memory_Main *****************
 10780 ;; Defined at:
 10781 ;;		line 926 in file "../src/MCU_B1.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;		None
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;		None
 10786 ;; Return value:  Size  Location     Type
 10787 ;;		None               void
 10788 ;; Registers used:
 10789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;Total ram usage:        1 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; Hardware stack levels required when called:    8
 10802 ;; This function calls:
 10803 ;;		_Flash_Memory_Modify
 10804 ;;		_getMain_LightsStatus
 10805 ;; This function is called by:
 10806 ;;		_main
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           
 10811                           ;psect for function _Flash_Memory_Main
 10812  138D                     _Flash_Memory_Main:	
 10813                           
 10814                           ;MCU_B1.c: 927: if (Memory.Modify == 1) {
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10818  138D  0023               	movlb	3	; select bank3
 10819  138E  1C44               	btfss	(_Memory^(0+384)+36),0
 10820  138F  0008               	return
 10821                           
 10822                           ;MCU_B1.c: 928: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 10823  1390  3192  2200  3193   	fcall	_getMain_LightsStatus
 10824  1393  3A00               	xorlw	0
 10825  1394  3000               	movlw	0
 10826  1395  1903               	skipnz
 10827  1396  3001               	movlw	1
 10828  1397  0020               	movlb	0	; select bank0
 10829  1398  00A9               	movwf	??_Flash_Memory_Main
 10830  1399  0DA9               	rlf	??_Flash_Memory_Main,f
 10831  139A  0023               	movlb	3	; select bank3
 10832  139B  0844               	movf	(_Memory^(0+384)+36),w
 10833  139C  0020               	movlb	0	; select bank0
 10834  139D  0629               	xorwf	??_Flash_Memory_Main,w
 10835  139E  39FD               	andlw	-3
 10836  139F  0629               	xorwf	??_Flash_Memory_Main,w
 10837  13A0  0023               	movlb	3	; select bank3
 10838  13A1  00C4               	movwf	(_Memory^(0+384)+36)
 10839                           
 10840                           ;MCU_B1.c: 929: if (Memory.GO == 1) {
 10841  13A2  1CC4               	btfss	(_Memory^(0+384)+36),1
 10842  13A3  2BBD               	goto	l1183
 10843                           
 10844                           ;MCU_B1.c: 930: Memory.Runtime = 1;
 10845  13A4  15C4               	bsf	(_Memory^(0+384)+36),3
 10846                           
 10847                           ;MCU_B1.c: 931: Memory.Time++;
 10848  13A5  3001               	movlw	1
 10849  13A6  07C2               	addwf	(_Memory^(0+384)+34),f
 10850  13A7  3000               	movlw	0
 10851  13A8  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 10852                           
 10853                           ;MCU_B1.c: 932: if (Memory.Time == 25) {
 10854  13A9  3022               	movlw	34
 10855  13AA  3EA0               	addlw	_Memory& (0+255)
 10856  13AB  0086               	movwf	6
 10857  13AC  3001               	movlw	1	; select bank3/4
 10858  13AD  0087               	movwf	7
 10859  13AE  3F40               	moviw [0]fsr1
 10860  13AF  3A19               	xorlw	25
 10861  13B0  1D03               	skipz
 10862  13B1  2BB4               	goto	u7215
 10863  13B2  3F41               	moviw [1]fsr1
 10864  13B3  3A00               	xorlw	0
 10865  13B4                     u7215:	
 10866  13B4  1D03               	skipz
 10867  13B5  0008               	return
 10868                           
 10869                           ;MCU_B1.c: 933: Memory.Time = 0;
 10870  13B6  01C2               	clrf	(_Memory^(0+384)+34)
 10871  13B7  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10872                           
 10873                           ;MCU_B1.c: 934: Memory.Modify = 0;
 10874  13B8  1044               	bcf	(_Memory^(0+384)+36),0
 10875                           
 10876                           ;MCU_B1.c: 935: Memory.GO = 0;
 10877  13B9  10C4               	bcf	(_Memory^(0+384)+36),1
 10878                           
 10879                           ;MCU_B1.c: 936: Flash_Memory_Modify();
 10880  13BA  3196  2606         	fcall	_Flash_Memory_Modify
 10881                           
 10882                           ;MCU_B1.c: 937: }
 10883                           ;MCU_B1.c: 938: } else {
 10884  13BC  0008               	return
 10885  13BD                     l1183:	
 10886                           
 10887                           ;MCU_B1.c: 939: if (Memory.Runtime == 1) {
 10888  13BD  1DC4               	btfss	(_Memory^(0+384)+36),3
 10889  13BE  0008               	return
 10890                           
 10891                           ;MCU_B1.c: 940: Memory.Runtime = 0;
 10892  13BF  11C4               	bcf	(_Memory^(0+384)+36),3
 10893                           
 10894                           ;MCU_B1.c: 941: Memory.Time = 0;
 10895  13C0  01C2               	clrf	(_Memory^(0+384)+34)
 10896  13C1  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10897  13C2  0008               	return
 10898  13C3                     __end_of_Flash_Memory_Main:	
 10899                           
 10900                           	psect	text62
 10901  1606                     __ptext62:	
 10902 ;; *************** function _Flash_Memory_Modify *****************
 10903 ;; Defined at:
 10904 ;;		line 999 in file "../src/MCU_B1.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;		None
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  i               1    5[BANK0 ] unsigned char 
 10909 ;; Return value:  Size  Location     Type
 10910 ;;		None               void
 10911 ;; Registers used:
 10912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10913 ;; Tracked objects:
 10914 ;;		On entry : 0/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;Total ram usage:        2 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    7
 10925 ;; This function calls:
 10926 ;;		_Flash_Memory_Erasing
 10927 ;;		_Flash_Memory_Read
 10928 ;;		_Flash_Memory_Write
 10929 ;;		_setMemory_Data
 10930 ;; This function is called by:
 10931 ;;		_Flash_Memory_Main
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _Flash_Memory_Modify
 10937  1606                     _Flash_Memory_Modify:	
 10938                           
 10939                           ;MCU_B1.c: 1000: char i = 0;
 10940                           
 10941                           ;incstack = 0
 10942                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10943  1606  0020               	movlb	0	; select bank0
 10944  1607  01A5               	clrf	Flash_Memory_Modify@i
 10945                           
 10946                           ;MCU_B1.c: 1001: for (i = 0; i < 32; i++) {
 10947  1608  01A5               	clrf	Flash_Memory_Modify@i
 10948  1609  3020               	movlw	32
 10949  160A  0225               	subwf	Flash_Memory_Modify@i,w
 10950  160B  1803               	btfsc	3,0
 10951  160C  2E22               	goto	l6920
 10952  160D                     l6914:	
 10953                           
 10954                           ;MCU_B1.c: 1002: Memory.Data[i] = Flash_Memory_Read(i);
 10955  160D  0825               	movf	Flash_Memory_Modify@i,w
 10956  160E  319F  278D  3196   	fcall	_Flash_Memory_Read
 10957  1611  0020               	movlb	0	; select bank0
 10958  1612  00A4               	movwf	??_Flash_Memory_Modify
 10959  1613  0825               	movf	Flash_Memory_Modify@i,w
 10960  1614  3EA0               	addlw	_Memory& (0+255)
 10961  1615  0086               	movwf	6
 10962  1616  3001               	movlw	1	; select bank3/4
 10963  1617  0087               	movwf	7
 10964  1618  0824               	movf	??_Flash_Memory_Modify,w
 10965  1619  0081               	movwf	1
 10966  161A  3001               	movlw	1
 10967  161B  00A4               	movwf	??_Flash_Memory_Modify
 10968  161C  0824               	movf	??_Flash_Memory_Modify,w
 10969  161D  07A5               	addwf	Flash_Memory_Modify@i,f
 10970  161E  3020               	movlw	32
 10971  161F  0225               	subwf	Flash_Memory_Modify@i,w
 10972  1620  1C03               	skipc
 10973  1621  2E0D               	goto	l6914
 10974  1622                     l6920:	
 10975                           
 10976                           ;MCU_B1.c: 1003: }
 10977                           ;MCU_B1.c: 1004: setMemory_Data(0, product->Data[12]);
 10978  1622  086E               	movf	_product,w
 10979  1623  0086               	movwf	6
 10980  1624  3002               	movlw	2	; select bank4/5
 10981  1625  0087               	movwf	7
 10982  1626  3002               	movlw	2	; select bank4/5
 10983  1627  3F4C               	moviw [12]fsr1
 10984  1628  00A0               	movwf	setMemory_Data@data
 10985  1629  3000               	movlw	0
 10986  162A  319D  25B2  3196   	fcall	_setMemory_Data
 10987                           
 10988                           ;MCU_B1.c: 1005: setMemory_Data(1, product->Data[13]);
 10989  162D  0020               	movlb	0	; select bank0
 10990  162E  086E               	movf	_product,w
 10991  162F  0086               	movwf	6
 10992  1630  3002               	movlw	2	; select bank4/5
 10993  1631  0087               	movwf	7
 10994  1632  3002               	movlw	2	; select bank4/5
 10995  1633  3F4D               	moviw [13]fsr1
 10996  1634  00A0               	movwf	setMemory_Data@data
 10997  1635  3001               	movlw	1
 10998  1636  319D  25B2  3196   	fcall	_setMemory_Data
 10999                           
 11000                           ;MCU_B1.c: 1006: setMemory_Data(2, product->Data[14]);
 11001  1639  0020               	movlb	0	; select bank0
 11002  163A  086E               	movf	_product,w
 11003  163B  0086               	movwf	6
 11004  163C  3002               	movlw	2	; select bank4/5
 11005  163D  0087               	movwf	7
 11006  163E  3002               	movlw	2	; select bank4/5
 11007  163F  3F4E               	moviw [14]fsr1
 11008  1640  00A0               	movwf	setMemory_Data@data
 11009  1641  3002               	movlw	2
 11010  1642  319D  25B2  3196   	fcall	_setMemory_Data
 11011                           
 11012                           ;MCU_B1.c: 1012: if (Memory.LoopSave == 1) {
 11013  1645  0023               	movlb	3	; select bank3
 11014  1646  1D44               	btfss	(_Memory^(0+384)+36),2
 11015  1647  2E4C               	goto	l1206
 11016                           
 11017                           ;MCU_B1.c: 1013: Memory.LoopSave = 0;
 11018  1648  1144               	bcf	(_Memory^(0+384)+36),2
 11019                           
 11020                           ;MCU_B1.c: 1014: myMain.FirstOpen = 0;
 11021  1649  0021               	movlb	1	; select bank1
 11022  164A  11A0               	bcf	_myMain^(0+128),3
 11023                           
 11024                           ;MCU_B1.c: 1015: myMain.First = 0;
 11025  164B  12A0               	bcf	_myMain^(0+128),5
 11026  164C                     l1206:	
 11027                           
 11028                           ;MCU_B1.c: 1017: }
 11029                           ;MCU_B1.c: 1018: GIE = 0;
 11030  164C  138B               	bcf	11,7	;volatile
 11031                           
 11032                           ;MCU_B1.c: 1019: Flash_Memory_Erasing();
 11033  164D  319D  25BE  3196   	fcall	_Flash_Memory_Erasing
 11034                           
 11035                           ;MCU_B1.c: 1020: Flash_Memory_Write();
 11036  1650  3192  222B         	fcall	_Flash_Memory_Write
 11037                           
 11038                           ;MCU_B1.c: 1021: GIE = 1;
 11039  1652  178B               	bsf	11,7	;volatile
 11040  1653  0008               	return
 11041  1654                     __end_of_Flash_Memory_Modify:	
 11042                           
 11043                           	psect	text63
 11044  1DBE                     __ptext63:	
 11045 ;; *************** function _Flash_Memory_Erasing *****************
 11046 ;; Defined at:
 11047 ;;		line 988 in file "../src/MCU_B1.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;		None
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;		None
 11052 ;; Return value:  Size  Location     Type
 11053 ;;		None               void
 11054 ;; Registers used:
 11055 ;;		wreg, status,2, status,0, pclath, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;Total ram usage:        0 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    6
 11068 ;; This function calls:
 11069 ;;		_Flash_Memory_Unlock
 11070 ;; This function is called by:
 11071 ;;		_Flash_Memory_Modify
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           
 11076                           ;psect for function _Flash_Memory_Erasing
 11077  1DBE                     _Flash_Memory_Erasing:	
 11078                           
 11079                           ;MCU_B1.c: 989: CFGS = 0;
 11080                           
 11081                           ;incstack = 0
 11082                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11083  1DBE  0023               	movlb	3	; select bank3
 11084  1DBF  1315               	bcf	21,6	;volatile
 11085                           
 11086                           ;MCU_B1.c: 990: PMADRH = 0x30;
 11087  1DC0  3030               	movlw	48
 11088  1DC1  0092               	movwf	18	;volatile
 11089                           
 11090                           ;MCU_B1.c: 991: PMADRL = 0x00;
 11091  1DC2  0191               	clrf	17	;volatile
 11092                           
 11093                           ;MCU_B1.c: 992: FREE = 1;
 11094  1DC3  1615               	bsf	21,4	;volatile
 11095                           
 11096                           ;MCU_B1.c: 993: WREN = 1;
 11097  1DC4  1515               	bsf	21,2	;volatile
 11098                           
 11099                           ;MCU_B1.c: 994: Flash_Memory_Unlock();
 11100  1DC5  319D  251C         	fcall	_Flash_Memory_Unlock
 11101                           
 11102                           ;MCU_B1.c: 995: WREN = 0;
 11103  1DC7  0023               	movlb	3	; select bank3
 11104  1DC8  1115               	bcf	21,2	;volatile
 11105  1DC9  0008               	return
 11106  1DCA                     __end_of_Flash_Memory_Erasing:	
 11107                           
 11108                           	psect	text64
 11109  0532                     __ptext64:	
 11110 ;; *************** function _Flash_Memory_Initialization *****************
 11111 ;; Defined at:
 11112 ;;		line 885 in file "../src/MCU_B1.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;  i               1   67[BANK0 ] unsigned char 
 11117 ;; Return value:  Size  Location     Type
 11118 ;;		None               void
 11119 ;; Registers used:
 11120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;Total ram usage:        2 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; Hardware stack levels required when called:    8
 11133 ;; This function calls:
 11134 ;;		_Flash_Memory_Read
 11135 ;;		_Flash_Memory_Write
 11136 ;;		_setMemory_Data
 11137 ;;		_setPercentValue
 11138 ;; This function is called by:
 11139 ;;		_main
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           
 11144                           ;psect for function _Flash_Memory_Initialization
 11145  0532                     _Flash_Memory_Initialization:	
 11146                           
 11147                           ;MCU_B1.c: 886: char i = 0;
 11148                           
 11149                           ;incstack = 0
 11150                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11151  0532  0020               	movlb	0	; select bank0
 11152  0533  01E3               	clrf	Flash_Memory_Initialization@i
 11153                           
 11154                           ;MCU_B1.c: 887: if (Flash_Memory_Read(31) == 0xaa) {
 11155  0534  301F               	movlw	31
 11156  0535  319F  278D  3185   	fcall	_Flash_Memory_Read
 11157  0538  3AAA               	xorlw	170
 11158  0539  1D03               	skipz
 11159  053A  2DA4               	goto	l7396
 11160                           
 11161                           ;MCU_B1.c: 888: product->Data[12] = Flash_Memory_Read(0);
 11162  053B  3000               	movlw	0
 11163  053C  319F  278D  3185   	fcall	_Flash_Memory_Read
 11164  053F  0020               	movlb	0	; select bank0
 11165  0540  00E2               	movwf	??_Flash_Memory_Initialization
 11166  0541  086E               	movf	_product,w
 11167  0542  3E0C               	addlw	12
 11168  0543  0086               	movwf	6
 11169  0544  3002               	movlw	2	; select bank4/5
 11170  0545  0087               	movwf	7
 11171  0546  0862               	movf	??_Flash_Memory_Initialization,w
 11172  0547  0081               	movwf	1
 11173                           
 11174                           ;MCU_B1.c: 889: product->Data[13] = Flash_Memory_Read(1);
 11175  0548  3001               	movlw	1
 11176  0549  319F  278D  3185   	fcall	_Flash_Memory_Read
 11177  054C  0020               	movlb	0	; select bank0
 11178  054D  00E2               	movwf	??_Flash_Memory_Initialization
 11179  054E  086E               	movf	_product,w
 11180  054F  3E0D               	addlw	13
 11181  0550  0086               	movwf	6
 11182  0551  3002               	movlw	2	; select bank4/5
 11183  0552  0087               	movwf	7
 11184  0553  0862               	movf	??_Flash_Memory_Initialization,w
 11185  0554  0081               	movwf	1
 11186                           
 11187                           ;MCU_B1.c: 890: product->Data[14] = Flash_Memory_Read(2);
 11188  0555  3002               	movlw	2
 11189  0556  319F  278D  3185   	fcall	_Flash_Memory_Read
 11190  0559  0020               	movlb	0	; select bank0
 11191  055A  00E2               	movwf	??_Flash_Memory_Initialization
 11192  055B  086E               	movf	_product,w
 11193  055C  3E0E               	addlw	14
 11194  055D  0086               	movwf	6
 11195  055E  3002               	movlw	2	; select bank4/5
 11196  055F  0087               	movwf	7
 11197  0560  0862               	movf	??_Flash_Memory_Initialization,w
 11198  0561  0081               	movwf	1
 11199                           
 11200                           ;MCU_B1.c: 896: i = setPercentValue(((char)(65*0.8)));
 11201  0562  3034               	movlw	52
 11202  0563  318B  2313  3185   	fcall	_setPercentValue
 11203  0566  0020               	movlb	0	; select bank0
 11204  0567  00E2               	movwf	??_Flash_Memory_Initialization
 11205  0568  0862               	movf	??_Flash_Memory_Initialization,w
 11206  0569  00E3               	movwf	Flash_Memory_Initialization@i
 11207                           
 11208                           ;MCU_B1.c: 897: product->Data[21] = i;
 11209  056A  0863               	movf	Flash_Memory_Initialization@i,w
 11210  056B  00E2               	movwf	??_Flash_Memory_Initialization
 11211  056C  086E               	movf	_product,w
 11212  056D  3E15               	addlw	21
 11213  056E  0086               	movwf	6
 11214  056F  3002               	movlw	2	; select bank4/5
 11215  0570  0087               	movwf	7
 11216  0571  0862               	movf	??_Flash_Memory_Initialization,w
 11217  0572  0081               	movwf	1
 11218                           
 11219                           ;MCU_B1.c: 898: product->Data[22] = i;
 11220  0573  0863               	movf	Flash_Memory_Initialization@i,w
 11221  0574  00E2               	movwf	??_Flash_Memory_Initialization
 11222  0575  086E               	movf	_product,w
 11223  0576  3E16               	addlw	22
 11224  0577  0086               	movwf	6
 11225  0578  3002               	movlw	2	; select bank4/5
 11226  0579  0087               	movwf	7
 11227  057A  0862               	movf	??_Flash_Memory_Initialization,w
 11228  057B  0081               	movwf	1
 11229                           
 11230                           ;MCU_B1.c: 899: product->Data[23] = i;
 11231  057C  0863               	movf	Flash_Memory_Initialization@i,w
 11232  057D  00E2               	movwf	??_Flash_Memory_Initialization
 11233  057E  086E               	movf	_product,w
 11234  057F  3E17               	addlw	23
 11235  0580  0086               	movwf	6
 11236  0581  3002               	movlw	2	; select bank4/5
 11237  0582  0087               	movwf	7
 11238  0583  0862               	movf	??_Flash_Memory_Initialization,w
 11239  0584  0081               	movwf	1
 11240                           
 11241                           ;MCU_B1.c: 901: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11242  0585  086E               	movf	_product,w
 11243  0586  3E0C               	addlw	12
 11244  0587  0086               	movwf	6
 11245  0588  3002               	movlw	2	; select bank4/5
 11246  0589  0087               	movwf	7
 11247  058A  0801               	movf	1,w
 11248  058B  3AFF               	xorlw	255
 11249  058C  1D03               	skipz
 11250  058D  0008               	return
 11251  058E  086E               	movf	_product,w
 11252  058F  3E0D               	addlw	13
 11253  0590  0086               	movwf	6
 11254  0591  3002               	movlw	2	; select bank4/5
 11255  0592  0087               	movwf	7
 11256  0593  0801               	movf	1,w
 11257  0594  3AFF               	xorlw	255
 11258  0595  1D03               	skipz
 11259  0596  0008               	return
 11260  0597  086E               	movf	_product,w
 11261  0598  3E0E               	addlw	14
 11262  0599  0086               	movwf	6
 11263  059A  3002               	movlw	2	; select bank4/5
 11264  059B  0087               	movwf	7
 11265  059C  0801               	movf	1,w
 11266  059D  3AFF               	xorlw	255
 11267  059E  1D03               	skipz
 11268  059F  0008               	return
 11269                           
 11270                           ;MCU_B1.c: 902: myMain.FirstOpen = 1;
 11271  05A0  0021               	movlb	1	; select bank1
 11272  05A1  15A0               	bsf	_myMain^(0+128),3
 11273                           
 11274                           ;MCU_B1.c: 903: myMain.First = 1;
 11275  05A2  16A0               	bsf	_myMain^(0+128),5
 11276                           
 11277                           ;MCU_B1.c: 904: }
 11278                           ;MCU_B1.c: 905: } else {
 11279  05A3  0008               	return
 11280  05A4                     l7396:	
 11281                           
 11282                           ;MCU_B1.c: 906: i = setPercentValue(((char)(65*0.8)));
 11283  05A4  3034               	movlw	52
 11284  05A5  318B  2313  3185   	fcall	_setPercentValue
 11285  05A8  0020               	movlb	0	; select bank0
 11286  05A9  00E2               	movwf	??_Flash_Memory_Initialization
 11287  05AA  0862               	movf	??_Flash_Memory_Initialization,w
 11288  05AB  00E3               	movwf	Flash_Memory_Initialization@i
 11289                           
 11290                           ;MCU_B1.c: 907: setMemory_Data(0, 0xff);
 11291  05AC  30FF               	movlw	255
 11292  05AD  00E2               	movwf	??_Flash_Memory_Initialization
 11293  05AE  0862               	movf	??_Flash_Memory_Initialization,w
 11294  05AF  00A0               	movwf	setMemory_Data@data
 11295  05B0  3000               	movlw	0
 11296  05B1  319D  25B2  3185   	fcall	_setMemory_Data
 11297                           
 11298                           ;MCU_B1.c: 908: setMemory_Data(1, 0xff);
 11299  05B4  30FF               	movlw	255
 11300  05B5  0020               	movlb	0	; select bank0
 11301  05B6  00E2               	movwf	??_Flash_Memory_Initialization
 11302  05B7  0862               	movf	??_Flash_Memory_Initialization,w
 11303  05B8  00A0               	movwf	setMemory_Data@data
 11304  05B9  3001               	movlw	1
 11305  05BA  319D  25B2  3185   	fcall	_setMemory_Data
 11306                           
 11307                           ;MCU_B1.c: 909: setMemory_Data(2, 0xff);
 11308  05BD  30FF               	movlw	255
 11309  05BE  0020               	movlb	0	; select bank0
 11310  05BF  00E2               	movwf	??_Flash_Memory_Initialization
 11311  05C0  0862               	movf	??_Flash_Memory_Initialization,w
 11312  05C1  00A0               	movwf	setMemory_Data@data
 11313  05C2  3002               	movlw	2
 11314  05C3  319D  25B2  3185   	fcall	_setMemory_Data
 11315                           
 11316                           ;MCU_B1.c: 910: setMemory_Data(3, 0xff);
 11317  05C6  30FF               	movlw	255
 11318  05C7  0020               	movlb	0	; select bank0
 11319  05C8  00E2               	movwf	??_Flash_Memory_Initialization
 11320  05C9  0862               	movf	??_Flash_Memory_Initialization,w
 11321  05CA  00A0               	movwf	setMemory_Data@data
 11322  05CB  3003               	movlw	3
 11323  05CC  319D  25B2  3185   	fcall	_setMemory_Data
 11324                           
 11325                           ;MCU_B1.c: 911: setMemory_Data(4, 0xff);
 11326  05CF  30FF               	movlw	255
 11327  05D0  0020               	movlb	0	; select bank0
 11328  05D1  00E2               	movwf	??_Flash_Memory_Initialization
 11329  05D2  0862               	movf	??_Flash_Memory_Initialization,w
 11330  05D3  00A0               	movwf	setMemory_Data@data
 11331  05D4  3004               	movlw	4
 11332  05D5  319D  25B2  3185   	fcall	_setMemory_Data
 11333                           
 11334                           ;MCU_B1.c: 912: setMemory_Data(5, 0xff);
 11335  05D8  30FF               	movlw	255
 11336  05D9  0020               	movlb	0	; select bank0
 11337  05DA  00E2               	movwf	??_Flash_Memory_Initialization
 11338  05DB  0862               	movf	??_Flash_Memory_Initialization,w
 11339  05DC  00A0               	movwf	setMemory_Data@data
 11340  05DD  3005               	movlw	5
 11341  05DE  319D  25B2  3185   	fcall	_setMemory_Data
 11342                           
 11343                           ;MCU_B1.c: 913: setMemory_Data(31, 0xaa);
 11344  05E1  30AA               	movlw	170
 11345  05E2  0020               	movlb	0	; select bank0
 11346  05E3  00E2               	movwf	??_Flash_Memory_Initialization
 11347  05E4  0862               	movf	??_Flash_Memory_Initialization,w
 11348  05E5  00A0               	movwf	setMemory_Data@data
 11349  05E6  301F               	movlw	31
 11350  05E7  319D  25B2  3185   	fcall	_setMemory_Data
 11351                           
 11352                           ;MCU_B1.c: 914: product->Data[21] = i;
 11353  05EA  0020               	movlb	0	; select bank0
 11354  05EB  0863               	movf	Flash_Memory_Initialization@i,w
 11355  05EC  00E2               	movwf	??_Flash_Memory_Initialization
 11356  05ED  086E               	movf	_product,w
 11357  05EE  3E15               	addlw	21
 11358  05EF  0086               	movwf	6
 11359  05F0  3002               	movlw	2	; select bank4/5
 11360  05F1  0087               	movwf	7
 11361  05F2  0862               	movf	??_Flash_Memory_Initialization,w
 11362  05F3  0081               	movwf	1
 11363                           
 11364                           ;MCU_B1.c: 915: product->Data[22] = i;
 11365  05F4  0863               	movf	Flash_Memory_Initialization@i,w
 11366  05F5  00E2               	movwf	??_Flash_Memory_Initialization
 11367  05F6  086E               	movf	_product,w
 11368  05F7  3E16               	addlw	22
 11369  05F8  0086               	movwf	6
 11370  05F9  3002               	movlw	2	; select bank4/5
 11371  05FA  0087               	movwf	7
 11372  05FB  0862               	movf	??_Flash_Memory_Initialization,w
 11373  05FC  0081               	movwf	1
 11374                           
 11375                           ;MCU_B1.c: 916: product->Data[23] = i;
 11376  05FD  0863               	movf	Flash_Memory_Initialization@i,w
 11377  05FE  00E2               	movwf	??_Flash_Memory_Initialization
 11378  05FF  086E               	movf	_product,w
 11379  0600  3E17               	addlw	23
 11380  0601  0086               	movwf	6
 11381  0602  3002               	movlw	2	; select bank4/5
 11382  0603  0087               	movwf	7
 11383  0604  0862               	movf	??_Flash_Memory_Initialization,w
 11384  0605  0081               	movwf	1
 11385                           
 11386                           ;MCU_B1.c: 917: GIE = 0;
 11387  0606  138B               	bcf	11,7	;volatile
 11388                           
 11389                           ;MCU_B1.c: 918: Flash_Memory_Write();
 11390  0607  3192  222B         	fcall	_Flash_Memory_Write
 11391                           
 11392                           ;MCU_B1.c: 919: GIE = 1;
 11393  0609  178B               	bsf	11,7	;volatile
 11394                           
 11395                           ;MCU_B1.c: 920: myMain.FirstOpen = 1;
 11396  060A  0021               	movlb	1	; select bank1
 11397  060B  15A0               	bsf	_myMain^(0+128),3
 11398                           
 11399                           ;MCU_B1.c: 921: myMain.First = 1;
 11400  060C  16A0               	bsf	_myMain^(0+128),5
 11401  060D  0008               	return
 11402  060E                     __end_of_Flash_Memory_Initialization:	
 11403                           
 11404                           	psect	text65
 11405  1DB2                     __ptext65:	
 11406 ;; *************** function _setMemory_Data *****************
 11407 ;; Defined at:
 11408 ;;		line 1036 in file "../src/MCU_B1.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;  address         1    wreg     unsigned char 
 11411 ;;  data            1    0[BANK0 ] unsigned char 
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  address         1    2[BANK0 ] unsigned char 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;		None               void
 11416 ;; Registers used:
 11417 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;Total ram usage:        3 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    5
 11430 ;; This function calls:
 11431 ;;		Nothing
 11432 ;; This function is called by:
 11433 ;;		_Flash_Memory_Initialization
 11434 ;;		_Flash_Memory_Modify
 11435 ;; This function uses a non-reentrant model
 11436 ;;
 11437                           
 11438                           
 11439                           ;psect for function _setMemory_Data
 11440  1DB2                     _setMemory_Data:	
 11441                           
 11442                           ;incstack = 0
 11443                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11444                           ;setMemory_Data@address stored from wreg
 11445  1DB2  0020               	movlb	0	; select bank0
 11446  1DB3  00A2               	movwf	setMemory_Data@address
 11447                           
 11448                           ;MCU_B1.c: 1037: Memory.Data[address] = data;
 11449  1DB4  0820               	movf	setMemory_Data@data,w
 11450  1DB5  00A1               	movwf	??_setMemory_Data
 11451  1DB6  0822               	movf	setMemory_Data@address,w
 11452  1DB7  3EA0               	addlw	_Memory& (0+255)
 11453  1DB8  0086               	movwf	6
 11454  1DB9  3001               	movlw	1	; select bank3/4
 11455  1DBA  0087               	movwf	7
 11456  1DBB  0821               	movf	??_setMemory_Data,w
 11457  1DBC  0081               	movwf	1
 11458  1DBD  0008               	return
 11459  1DBE                     __end_of_setMemory_Data:	
 11460                           
 11461                           	psect	text66
 11462  122B                     __ptext66:	
 11463 ;; *************** function _Flash_Memory_Write *****************
 11464 ;; Defined at:
 11465 ;;		line 969 in file "../src/MCU_B1.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;		None
 11468 ;; Auto vars:     Size  Location     Type
 11469 ;;  i               1    1[BANK0 ] unsigned char 
 11470 ;; Return value:  Size  Location     Type
 11471 ;;		None               void
 11472 ;; Registers used:
 11473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11474 ;; Tracked objects:
 11475 ;;		On entry : 0/0
 11476 ;;		On exit  : 0/0
 11477 ;;		Unchanged: 0/0
 11478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;Total ram usage:        2 bytes
 11484 ;; Hardware stack levels used:    1
 11485 ;; Hardware stack levels required when called:    6
 11486 ;; This function calls:
 11487 ;;		_Flash_Memory_Unlock
 11488 ;; This function is called by:
 11489 ;;		_Flash_Memory_Initialization
 11490 ;;		_Flash_Memory_Modify
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           
 11495                           ;psect for function _Flash_Memory_Write
 11496  122B                     _Flash_Memory_Write:	
 11497                           
 11498                           ;MCU_B1.c: 970: char i = 0;
 11499                           
 11500                           ;incstack = 0
 11501                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11502  122B  0020               	movlb	0	; select bank0
 11503  122C  01A1               	clrf	Flash_Memory_Write@i
 11504                           
 11505                           ;MCU_B1.c: 971: CFGS = 0;
 11506  122D  0023               	movlb	3	; select bank3
 11507  122E  1315               	bcf	21,6	;volatile
 11508                           
 11509                           ;MCU_B1.c: 972: PMADRH = 0x30;
 11510  122F  3030               	movlw	48
 11511  1230  0092               	movwf	18	;volatile
 11512                           
 11513                           ;MCU_B1.c: 973: PMDATH = 0;
 11514  1231  0194               	clrf	20	;volatile
 11515                           
 11516                           ;MCU_B1.c: 974: FREE = 0;
 11517  1232  1215               	bcf	21,4	;volatile
 11518                           
 11519                           ;MCU_B1.c: 975: LWLO = 1;
 11520  1233  1695               	bsf	21,5	;volatile
 11521                           
 11522                           ;MCU_B1.c: 976: WREN = 1;
 11523  1234  1515               	bsf	21,2	;volatile
 11524                           
 11525                           ;MCU_B1.c: 977: for (i = 0; i < 32; i++) {
 11526  1235  0020               	movlb	0	; select bank0
 11527  1236  01A1               	clrf	Flash_Memory_Write@i
 11528  1237  3020               	movlw	32
 11529  1238  0221               	subwf	Flash_Memory_Write@i,w
 11530  1239  1803               	btfsc	3,0
 11531  123A  2A53               	goto	l1197
 11532  123B                     l6478:	
 11533                           
 11534                           ;MCU_B1.c: 978: PMADRL = i;
 11535  123B  0821               	movf	Flash_Memory_Write@i,w
 11536  123C  0023               	movlb	3	; select bank3
 11537  123D  0091               	movwf	17	;volatile
 11538                           
 11539                           ;MCU_B1.c: 979: PMDATL = Memory.Data[i];
 11540  123E  0020               	movlb	0	; select bank0
 11541  123F  0821               	movf	Flash_Memory_Write@i,w
 11542  1240  3EA0               	addlw	_Memory& (0+255)
 11543  1241  0086               	movwf	6
 11544  1242  3001               	movlw	1	; select bank3/4
 11545  1243  0087               	movwf	7
 11546  1244  0801               	movf	1,w
 11547  1245  0023               	movlb	3	; select bank3
 11548  1246  0093               	movwf	19	;volatile
 11549                           
 11550                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 11551  1247  319D  251C  3192   	fcall	_Flash_Memory_Unlock
 11552  124A  3001               	movlw	1
 11553  124B  0020               	movlb	0	; select bank0
 11554  124C  00A0               	movwf	??_Flash_Memory_Write
 11555  124D  0820               	movf	??_Flash_Memory_Write,w
 11556  124E  07A1               	addwf	Flash_Memory_Write@i,f
 11557  124F  3020               	movlw	32
 11558  1250  0221               	subwf	Flash_Memory_Write@i,w
 11559  1251  1C03               	skipc
 11560  1252  2A3B               	goto	l6478
 11561  1253                     l1197:	
 11562                           
 11563                           ;MCU_B1.c: 981: }
 11564                           ;MCU_B1.c: 982: LWLO = 0;
 11565  1253  0023               	movlb	3	; select bank3
 11566  1254  1295               	bcf	21,5	;volatile
 11567                           
 11568                           ;MCU_B1.c: 983: Flash_Memory_Unlock();
 11569  1255  319D  251C         	fcall	_Flash_Memory_Unlock
 11570                           
 11571                           ;MCU_B1.c: 984: WREN = 0;
 11572  1257  0023               	movlb	3	; select bank3
 11573  1258  1115               	bcf	21,2	;volatile
 11574  1259  0008               	return
 11575  125A                     __end_of_Flash_Memory_Write:	
 11576                           
 11577                           	psect	text67
 11578  1D1C                     __ptext67:	
 11579 ;; *************** function _Flash_Memory_Unlock *****************
 11580 ;; Defined at:
 11581 ;;		line 948 in file "../src/MCU_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;		None
 11586 ;; Return value:  Size  Location     Type
 11587 ;;		None               void
 11588 ;; Registers used:
 11589 ;;		wreg
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        0 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    5
 11602 ;; This function calls:
 11603 ;;		Nothing
 11604 ;; This function is called by:
 11605 ;;		_Flash_Memory_Write
 11606 ;;		_Flash_Memory_Erasing
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           
 11611                           ;psect for function _Flash_Memory_Unlock
 11612  1D1C                     _Flash_Memory_Unlock:	
 11613                           
 11614                           ;MCU_B1.c: 949: PMCON2 = 0x55;
 11615                           
 11616                           ;incstack = 0
 11617                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11618  1D1C  3055               	movlw	85
 11619  1D1D  0023               	movlb	3	; select bank3
 11620  1D1E  0096               	movwf	22	;volatile
 11621                           
 11622                           ;MCU_B1.c: 950: PMCON2 = 0xaa;
 11623  1D1F  30AA               	movlw	170
 11624  1D20  0096               	movwf	22	;volatile
 11625                           
 11626                           ;MCU_B1.c: 951: WR = 1;
 11627  1D21  1495               	bsf	21,1	;volatile
 11628                           
 11629                           ;MCU_B1.c: 952: __nop();
 11630  1D22  0000               	nop
 11631                           
 11632                           ;MCU_B1.c: 953: __nop();
 11633  1D23  0000               	nop
 11634  1D24  0008               	return
 11635  1D25                     __end_of_Flash_Memory_Unlock:	
 11636                           
 11637                           	psect	text68
 11638  1F8D                     __ptext68:	
 11639 ;; *************** function _Flash_Memory_Read *****************
 11640 ;; Defined at:
 11641 ;;		line 957 in file "../src/MCU_B1.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;  address         1    wreg     unsigned char 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  address         1    2[BANK0 ] unsigned char 
 11646 ;;  ret             1    3[BANK0 ] unsigned char 
 11647 ;;  i               1    1[BANK0 ] unsigned char 
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      unsigned char 
 11650 ;; Registers used:
 11651 ;;		wreg, status,2
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;Total ram usage:        4 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    5
 11664 ;; This function calls:
 11665 ;;		Nothing
 11666 ;; This function is called by:
 11667 ;;		_Flash_Memory_Initialization
 11668 ;;		_Flash_Memory_Modify
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           
 11673                           ;psect for function _Flash_Memory_Read
 11674  1F8D                     _Flash_Memory_Read:	
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11678                           ;Flash_Memory_Read@address stored from wreg
 11679  1F8D  0020               	movlb	0	; select bank0
 11680  1F8E  00A2               	movwf	Flash_Memory_Read@address
 11681                           
 11682                           ;MCU_B1.c: 958: char i = 0, ret = 0;
 11683  1F8F  01A1               	clrf	Flash_Memory_Read@i
 11684  1F90  01A3               	clrf	Flash_Memory_Read@ret
 11685                           
 11686                           ;MCU_B1.c: 959: PMADRH = 0x30;
 11687  1F91  3030               	movlw	48
 11688  1F92  0023               	movlb	3	; select bank3
 11689  1F93  0092               	movwf	18	;volatile
 11690                           
 11691                           ;MCU_B1.c: 960: PMADRL = address;
 11692  1F94  0020               	movlb	0	; select bank0
 11693  1F95  0822               	movf	Flash_Memory_Read@address,w
 11694  1F96  0023               	movlb	3	; select bank3
 11695  1F97  0091               	movwf	17	;volatile
 11696                           
 11697                           ;MCU_B1.c: 961: CFGS = 0;
 11698  1F98  1315               	bcf	21,6	;volatile
 11699                           
 11700                           ;MCU_B1.c: 962: RD = 1;
 11701  1F99  1415               	bsf	21,0	;volatile
 11702                           
 11703                           ;MCU_B1.c: 963: i = PMDATH;
 11704  1F9A  0814               	movf	20,w	;volatile
 11705  1F9B  0020               	movlb	0	; select bank0
 11706  1F9C  00A0               	movwf	??_Flash_Memory_Read
 11707  1F9D  0820               	movf	??_Flash_Memory_Read,w
 11708  1F9E  00A1               	movwf	Flash_Memory_Read@i
 11709                           
 11710                           ;MCU_B1.c: 964: ret = PMDATL;
 11711  1F9F  0023               	movlb	3	; select bank3
 11712  1FA0  0813               	movf	19,w	;volatile
 11713  1FA1  0020               	movlb	0	; select bank0
 11714  1FA2  00A0               	movwf	??_Flash_Memory_Read
 11715  1FA3  0820               	movf	??_Flash_Memory_Read,w
 11716  1FA4  00A3               	movwf	Flash_Memory_Read@ret
 11717                           
 11718                           ;MCU_B1.c: 965: return ret;
 11719  1FA5  0823               	movf	Flash_Memory_Read@ret,w
 11720  1FA6  0008               	return
 11721  1FA7                     __end_of_Flash_Memory_Read:	
 11722                           
 11723                           	psect	text69
 11724  125A                     __ptext69:	
 11725 ;; *************** function _DimmerLights_Main *****************
 11726 ;; Defined at:
 11727 ;;		line 390 in file "../src/Dimmer_B1.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;		None
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;		None
 11732 ;; Return value:  Size  Location     Type
 11733 ;;		None               void
 11734 ;; Registers used:
 11735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;Total ram usage:        4 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:   10
 11748 ;; This function calls:
 11749 ;;		_getLoad_OK
 11750 ;;		_getMain_All_Error_Status
 11751 ;;		_getMain_LightsStatus
 11752 ;;		_setDimmerLights_Main
 11753 ;; This function is called by:
 11754 ;;		_main
 11755 ;; This function uses a non-reentrant model
 11756 ;;
 11757                           
 11758                           
 11759                           ;psect for function _DimmerLights_Main
 11760  125A                     _DimmerLights_Main:	
 11761                           
 11762                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 11763                           
 11764                           ;incstack = 0
 11765                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11766  125A  3000               	movlw	0
 11767  125B  3192  22BC  3192   	fcall	_getMain_All_Error_Status
 11768  125E  3800               	iorlw	0
 11769  125F  1D03               	skipz
 11770  1260  2A84               	goto	l709
 11771                           
 11772                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 11773  1261  0022               	movlb	2	; select bank2
 11774  1262  1CBE               	btfss	_Dimmer^(0+256),1
 11775  1263  2A86               	goto	l7338
 11776                           
 11777                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 11778  1264  319D  2503  3192   	fcall	_getLoad_OK
 11779  1267  3A01               	xorlw	1
 11780  1268  1903               	skipnz
 11781  1269  2A7B               	goto	l7334
 11782  126A  3192  2200  3192   	fcall	_getMain_LightsStatus
 11783  126D  3A00               	xorlw	0
 11784  126E  1903               	skipnz
 11785  126F  2A7B               	goto	l7334
 11786  1270  0022               	movlb	2	; select bank2
 11787  1271  0C3E               	rrf	_Dimmer^(0+256),w
 11788  1272  3901               	andlw	1
 11789  1273  0020               	movlb	0	; select bank0
 11790  1274  00E7               	movwf	??_DimmerLights_Main
 11791  1275  01E8               	clrf	??_DimmerLights_Main+1
 11792  1276  0867               	movf	??_DimmerLights_Main,w
 11793  1277  00E9               	movwf	_DimmerLights_Main$2345
 11794  1278  0868               	movf	??_DimmerLights_Main+1,w
 11795  1279  00EA               	movwf	_DimmerLights_Main$2345+1
 11796  127A  2A7E               	goto	l7336
 11797  127B                     l7334:	
 11798  127B  0020               	movlb	0	; select bank0
 11799  127C  01E9               	clrf	_DimmerLights_Main$2345
 11800  127D  01EA               	clrf	_DimmerLights_Main$2345+1
 11801  127E                     l7336:	
 11802  127E  0869               	movf	_DimmerLights_Main$2345,w
 11803  127F  0022               	movlb	2	; select bank2
 11804  1280  10BE               	bcf	_Dimmer^(0+256),1
 11805  1281  1D03               	skipz
 11806  1282  14BE               	bsf	_Dimmer^(0+256),1
 11807                           
 11808                           ;Dimmer_B1.c: 395: }
 11809                           ;Dimmer_B1.c: 396: } else {
 11810  1283  2A86               	goto	l7338
 11811  1284                     l709:	
 11812                           
 11813                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 11814  1284  0022               	movlb	2	; select bank2
 11815  1285  10BE               	bcf	_Dimmer^(0+256),1
 11816  1286                     l7338:	
 11817                           
 11818                           ;Dimmer_B1.c: 398: }
 11819                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 11820  1286  3001               	movlw	1
 11821  1287  3188  2026         	fcall	_setDimmerLights_Main
 11822  1289  0008               	return
 11823  128A                     __end_of_DimmerLights_Main:	
 11824                           
 11825                           	psect	text70
 11826  0826                     __ptext70:	
 11827 ;; *************** function _setDimmerLights_Main *****************
 11828 ;; Defined at:
 11829 ;;		line 416 in file "../src/Dimmer_B1.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;  lights          1    wreg     unsigned char 
 11832 ;; Auto vars:     Size  Location     Type
 11833 ;;  lights          1   70[BANK0 ] unsigned char 
 11834 ;; Return value:  Size  Location     Type
 11835 ;;		None               void
 11836 ;; Registers used:
 11837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;Total ram usage:        1 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    9
 11850 ;; This function calls:
 11851 ;;		_DimmerLightsPointSelect
 11852 ;;		_setBuz
 11853 ;;		_setDimmerLights
 11854 ;;		_setDimmerLights_Adj
 11855 ;; This function is called by:
 11856 ;;		_DimmerLights_Main
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function _setDimmerLights_Main
 11862  0826                     _setDimmerLights_Main:	
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11866                           ;setDimmerLights_Main@lights stored from wreg
 11867  0826  0020               	movlb	0	; select bank0
 11868  0827  00E6               	movwf	setDimmerLights_Main@lights
 11869                           
 11870                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 11871  0828  0866               	movf	setDimmerLights_Main@lights,w
 11872  0829  319D  2558  3188   	fcall	_DimmerLightsPointSelect
 11873                           
 11874                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 11875  082C  0020               	movlb	0	; select bank0
 11876  082D  086F               	movf	_DimmerLights,w
 11877  082E  3E08               	addlw	8
 11878  082F  0086               	movwf	6
 11879  0830  3001               	movlw	1	; select bank2/3
 11880  0831  0087               	movwf	7
 11881  0832  1D01               	btfss	1,2
 11882  0833  2851               	goto	l6810
 11883                           
 11884                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 11885  0834  0022               	movlb	2	; select bank2
 11886  0835  18BE               	btfsc	_Dimmer^(0+256),1
 11887  0836  0008               	return
 11888                           
 11889                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 11890  0837  0020               	movlb	0	; select bank0
 11891  0838  086F               	movf	_DimmerLights,w
 11892  0839  3E08               	addlw	8
 11893  083A  0086               	movwf	6
 11894  083B  3001               	movlw	1	; select bank2/3
 11895  083C  0087               	movwf	7
 11896  083D  1101               	bcf	1,2
 11897                           
 11898                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 11899  083E  086F               	movf	_DimmerLights,w
 11900  083F  3E08               	addlw	8
 11901  0840  0086               	movwf	6
 11902  0841  3001               	movlw	1	; select bank2/3
 11903  0842  0087               	movwf	7
 11904  0843  1C81               	btfss	1,1
 11905  0844  284B               	goto	l6808
 11906                           
 11907                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 11908  0845  01E2               	clrf	setDimmerLights@status
 11909  0846  0AE2               	incf	setDimmerLights@status,f
 11910  0847  0866               	movf	setDimmerLights_Main@lights,w
 11911  0848  318C  24E5         	fcall	_setDimmerLights
 11912                           
 11913                           ;Dimmer_B1.c: 425: } else {
 11914  084A  0008               	return
 11915  084B                     l6808:	
 11916                           
 11917                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 11918  084B  0020               	movlb	0	; select bank0
 11919  084C  01E2               	clrf	setDimmerLights@status
 11920  084D  0866               	movf	setDimmerLights_Main@lights,w
 11921  084E  318C  24E5         	fcall	_setDimmerLights
 11922                           
 11923                           ;Dimmer_B1.c: 427: }
 11924                           ;Dimmer_B1.c: 428: }
 11925                           ;Dimmer_B1.c: 429: } else {
 11926  0850  0008               	return
 11927  0851                     l6810:	
 11928                           
 11929                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 11930  0851  0020               	movlb	0	; select bank0
 11931  0852  086F               	movf	_DimmerLights,w
 11932  0853  3E08               	addlw	8
 11933  0854  0086               	movwf	6
 11934  0855  3001               	movlw	1	; select bank2/3
 11935  0856  0087               	movwf	7
 11936  0857  1E01               	btfss	1,4
 11937  0858  0008               	return
 11938                           
 11939                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 11940  0859  0022               	movlb	2	; select bank2
 11941  085A  18BE               	btfsc	_Dimmer^(0+256),1
 11942  085B  0008               	return
 11943                           
 11944                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 11945  085C  0020               	movlb	0	; select bank0
 11946  085D  086F               	movf	_DimmerLights,w
 11947  085E  3E08               	addlw	8
 11948  085F  0086               	movwf	6
 11949  0860  3001               	movlw	1	; select bank2/3
 11950  0861  0087               	movwf	7
 11951  0862  1201               	bcf	1,4
 11952                           
 11953                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 11954  0863  086F               	movf	_DimmerLights,w
 11955  0864  3E08               	addlw	8
 11956  0865  0086               	movwf	6
 11957  0866  3001               	movlw	1	; select bank2/3
 11958  0867  0087               	movwf	7
 11959  0868  1D81               	btfss	1,3
 11960  0869  2879               	goto	l6820
 11961                           
 11962                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 11963  086A  01E2               	clrf	setDimmerLights_Adj@status
 11964  086B  0AE2               	incf	setDimmerLights_Adj@status,f
 11965  086C  0866               	movf	setDimmerLights_Main@lights,w
 11966  086D  3187  2795  3188   	fcall	_setDimmerLights_Adj
 11967                           
 11968                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 11969  0870  3064               	movlw	100
 11970  0871  0020               	movlb	0	; select bank0
 11971  0872  00A9               	movwf	setBuz@time
 11972  0873  3000               	movlw	0
 11973  0874  00AA               	movwf	setBuz@time+1
 11974  0875  3001               	movlw	1
 11975  0876  3197  27A7         	fcall	_setBuz
 11976                           
 11977                           ;Dimmer_B1.c: 436: } else {
 11978  0878  0008               	return
 11979  0879                     l6820:	
 11980                           
 11981                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 11982  0879  0020               	movlb	0	; select bank0
 11983  087A  01E2               	clrf	setDimmerLights_Adj@status
 11984  087B  0866               	movf	setDimmerLights_Main@lights,w
 11985  087C  3187  2795         	fcall	_setDimmerLights_Adj
 11986  087E  0008               	return
 11987  087F                     __end_of_setDimmerLights_Main:	
 11988                           
 11989                           	psect	text71
 11990  0795                     __ptext71:	
 11991 ;; *************** function _setDimmerLights_Adj *****************
 11992 ;; Defined at:
 11993 ;;		line 716 in file "../src/Dimmer_B1.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  lights          1    wreg     unsigned char 
 11996 ;;  status          1   66[BANK0 ] unsigned char 
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;  lights          1   69[BANK0 ] unsigned char 
 11999 ;; Return value:  Size  Location     Type
 12000 ;;		None               void
 12001 ;; Registers used:
 12002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12008 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;Total ram usage:        4 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    8
 12015 ;; This function calls:
 12016 ;;		_DimmerLightsPointSelect
 12017 ;;		_getMain_All_Error_Status
 12018 ;;		_setPercentValue
 12019 ;;		_setRF_DimmerLights
 12020 ;;		_setTxData
 12021 ;; This function is called by:
 12022 ;;		_setDimmerLights_Main
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           
 12027                           ;psect for function _setDimmerLights_Adj
 12028  0795                     _setDimmerLights_Adj:	
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12032                           ;setDimmerLights_Adj@lights stored from wreg
 12033  0795  0020               	movlb	0	; select bank0
 12034  0796  00E5               	movwf	setDimmerLights_Adj@lights
 12035                           
 12036                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12037  0797  0865               	movf	setDimmerLights_Adj@lights,w
 12038  0798  319D  2558  3187   	fcall	_DimmerLightsPointSelect
 12039                           
 12040                           ;Dimmer_B1.c: 718: if (status == 1) {
 12041  079B  0020               	movlb	0	; select bank0
 12042  079C  0862               	movf	setDimmerLights_Adj@status,w
 12043  079D  3A01               	xorlw	1
 12044  079E  1D03               	skipz
 12045  079F  2FAB               	goto	l6388
 12046                           
 12047                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12048  07A0  086F               	movf	_DimmerLights,w
 12049  07A1  0086               	movwf	6
 12050  07A2  3001               	movlw	1	; select bank2/3
 12051  07A3  0087               	movwf	7
 12052  07A4  1581               	bsf	1,3
 12053                           
 12054                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12055  07A5  086F               	movf	_DimmerLights,w
 12056  07A6  0086               	movwf	6
 12057  07A7  3001               	movlw	1	; select bank2/3
 12058  07A8  0087               	movwf	7
 12059  07A9  1481               	bsf	1,1
 12060                           
 12061                           ;Dimmer_B1.c: 721: } else {
 12062  07AA  0008               	return
 12063  07AB                     l6388:	
 12064                           
 12065                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12066  07AB  086F               	movf	_DimmerLights,w
 12067  07AC  0086               	movwf	6
 12068  07AD  3001               	movlw	1	; select bank2/3
 12069  07AE  0087               	movwf	7
 12070  07AF  1D81               	btfss	1,3
 12071  07B0  0008               	return
 12072                           
 12073                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12074  07B1  086F               	movf	_DimmerLights,w
 12075  07B2  0086               	movwf	6
 12076  07B3  3001               	movlw	1	; select bank2/3
 12077  07B4  0087               	movwf	7
 12078  07B5  1081               	bcf	1,1
 12079                           
 12080                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12081  07B6  086F               	movf	_DimmerLights,w
 12082  07B7  0086               	movwf	6
 12083  07B8  3001               	movlw	1	; select bank2/3
 12084  07B9  0087               	movwf	7
 12085  07BA  1181               	bcf	1,3
 12086                           
 12087                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12088  07BB  086F               	movf	_DimmerLights,w
 12089  07BC  3E04               	addlw	4
 12090  07BD  0086               	movwf	6
 12091  07BE  3001               	movlw	1	; select bank2/3
 12092  07BF  0087               	movwf	7
 12093  07C0  0801               	movf	1,w
 12094  07C1  00E3               	movwf	??_setDimmerLights_Adj
 12095  07C2  086F               	movf	_DimmerLights,w
 12096  07C3  3E05               	addlw	5
 12097  07C4  0086               	movwf	6
 12098  07C5  3001               	movlw	1	; select bank2/3
 12099  07C6  0087               	movwf	7
 12100  07C7  0863               	movf	??_setDimmerLights_Adj,w
 12101  07C8  0081               	movwf	1
 12102                           
 12103                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12104  07C9  086F               	movf	_DimmerLights,w
 12105  07CA  3E04               	addlw	4
 12106  07CB  0086               	movwf	6
 12107  07CC  3001               	movlw	1	; select bank2/3
 12108  07CD  0087               	movwf	7
 12109  07CE  0801               	movf	1,w
 12110  07CF  318B  2313  3187   	fcall	_setPercentValue
 12111  07D2  0020               	movlb	0	; select bank0
 12112  07D3  00E3               	movwf	??_setDimmerLights_Adj
 12113  07D4  0865               	movf	setDimmerLights_Adj@lights,w
 12114  07D5  3E14               	addlw	20
 12115  07D6  076E               	addwf	_product,w
 12116  07D7  00E4               	movwf	??_setDimmerLights_Adj+1
 12117  07D8  0864               	movf	??_setDimmerLights_Adj+1,w
 12118  07D9  0086               	movwf	6
 12119  07DA  3002               	movlw	2	; select bank4/5
 12120  07DB  0087               	movwf	7
 12121  07DC  0863               	movf	??_setDimmerLights_Adj,w
 12122  07DD  0081               	movwf	1
 12123                           
 12124                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12125  07DE  3000               	movlw	0
 12126  07DF  3192  22BC  3187   	fcall	_getMain_All_Error_Status
 12127  07E2  3A00               	xorlw	0
 12128  07E3  3000               	movlw	0
 12129  07E4  1903               	skipnz
 12130  07E5  3001               	movlw	1
 12131  07E6  0020               	movlb	0	; select bank0
 12132  07E7  00E3               	movwf	??_setDimmerLights_Adj
 12133  07E8  0DE3               	rlf	??_setDimmerLights_Adj,f
 12134  07E9  0022               	movlb	2	; select bank2
 12135  07EA  083E               	movf	_Dimmer^(0+256),w
 12136  07EB  0020               	movlb	0	; select bank0
 12137  07EC  0663               	xorwf	??_setDimmerLights_Adj,w
 12138  07ED  39FD               	andlw	-3
 12139  07EE  0663               	xorwf	??_setDimmerLights_Adj,w
 12140  07EF  0022               	movlb	2	; select bank2
 12141  07F0  00BE               	movwf	_Dimmer^(0+256)
 12142                           
 12143                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12144  07F1  0020               	movlb	0	; select bank0
 12145  07F2  01A0               	clrf	setRF_DimmerLights@on
 12146  07F3  0AA0               	incf	setRF_DimmerLights@on,f
 12147  07F4  0865               	movf	setDimmerLights_Adj@lights,w
 12148  07F5  3188  207F  3187   	fcall	_setRF_DimmerLights
 12149                           
 12150                           ;Dimmer_B1.c: 740: setTxData();
 12151  07F8  3186  26D6         	fcall	_setTxData
 12152  07FA  0008               	return
 12153  07FB                     __end_of_setDimmerLights_Adj:	
 12154                           
 12155                           	psect	text72
 12156  0CE5                     __ptext72:	
 12157 ;; *************** function _setDimmerLights *****************
 12158 ;; Defined at:
 12159 ;;		line 611 in file "../src/Dimmer_B1.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;  lights          1    wreg     unsigned char 
 12162 ;;  status          1   66[BANK0 ] unsigned char 
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;  lights          1   69[BANK0 ] unsigned char 
 12165 ;; Return value:  Size  Location     Type
 12166 ;;		None               void
 12167 ;; Registers used:
 12168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12174 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;Total ram usage:        4 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    8
 12181 ;; This function calls:
 12182 ;;		_DimmerLightsPointSelect
 12183 ;;		_getMain_All_Error_Status
 12184 ;;		_setDimmerLights_Line
 12185 ;;		_setLED
 12186 ;;		_setPercentValue
 12187 ;;		_setRF_DimmerLights
 12188 ;;		_setTxData
 12189 ;; This function is called by:
 12190 ;;		_setDimmerLights_Main
 12191 ;; This function uses a non-reentrant model
 12192 ;;
 12193                           
 12194                           
 12195                           ;psect for function _setDimmerLights
 12196  0CE5                     _setDimmerLights:	
 12197                           
 12198                           ;incstack = 0
 12199                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12200                           ;setDimmerLights@lights stored from wreg
 12201  0CE5  0020               	movlb	0	; select bank0
 12202  0CE6  00E5               	movwf	setDimmerLights@lights
 12203                           
 12204                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12205  0CE7  0865               	movf	setDimmerLights@lights,w
 12206  0CE8  319D  2558  318C   	fcall	_DimmerLightsPointSelect
 12207                           
 12208                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12209  0CEB  3000               	movlw	0
 12210  0CEC  3192  22BC  318C   	fcall	_getMain_All_Error_Status
 12211  0CEF  3A00               	xorlw	0
 12212  0CF0  3000               	movlw	0
 12213  0CF1  1903               	skipnz
 12214  0CF2  3001               	movlw	1
 12215  0CF3  0020               	movlb	0	; select bank0
 12216  0CF4  00E3               	movwf	??_setDimmerLights
 12217  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12218  0CF6  0022               	movlb	2	; select bank2
 12219  0CF7  083E               	movf	_Dimmer^(0+256),w
 12220  0CF8  0020               	movlb	0	; select bank0
 12221  0CF9  0663               	xorwf	??_setDimmerLights,w
 12222  0CFA  39FD               	andlw	-3
 12223  0CFB  0663               	xorwf	??_setDimmerLights,w
 12224  0CFC  0022               	movlb	2	; select bank2
 12225  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12226                           
 12227                           ;Dimmer_B1.c: 619: if (status == 1) {
 12228  0CFE  0020               	movlb	0	; select bank0
 12229  0CFF  0862               	movf	setDimmerLights@status,w
 12230  0D00  3A01               	xorlw	1
 12231  0D01  1D03               	skipz
 12232  0D02  2D33               	goto	l6368
 12233                           
 12234                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12235  0D03  086F               	movf	_DimmerLights,w
 12236  0D04  3E09               	addlw	9
 12237  0D05  0086               	movwf	6
 12238  0D06  3001               	movlw	1	; select bank2/3
 12239  0D07  0087               	movwf	7
 12240  0D08  1481               	bsf	1,1
 12241                           
 12242                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12243  0D09  01A2               	clrf	setLED@command
 12244  0D0A  0865               	movf	setDimmerLights@lights,w
 12245  0D0B  3193  2357  318C   	fcall	_setLED
 12246                           
 12247                           ;Dimmer_B1.c: 622: ;;
 12248                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12249  0D0E  0020               	movlb	0	; select bank0
 12250  0D0F  0865               	movf	setDimmerLights@lights,w
 12251  0D10  319D  25A6  318C   	fcall	_setDimmerLights_Line
 12252                           
 12253                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12254  0D13  0020               	movlb	0	; select bank0
 12255  0D14  086F               	movf	_DimmerLights,w
 12256  0D15  0086               	movwf	6
 12257  0D16  3001               	movlw	1	; select bank2/3
 12258  0D17  0087               	movwf	7
 12259  0D18  1701               	bsf	1,6
 12260                           
 12261                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(65*0.8));
 12262  0D19  3034               	movlw	52
 12263  0D1A  00E3               	movwf	??_setDimmerLights
 12264  0D1B  086F               	movf	_DimmerLights,w
 12265  0D1C  3E04               	addlw	4
 12266  0D1D  0086               	movwf	6
 12267  0D1E  3001               	movlw	1	; select bank2/3
 12268  0D1F  0087               	movwf	7
 12269  0D20  0863               	movf	??_setDimmerLights,w
 12270  0D21  0081               	movwf	1
 12271                           
 12272                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(65*0.8)));
 12273  0D22  3034               	movlw	52
 12274  0D23  318B  2313  318C   	fcall	_setPercentValue
 12275  0D26  0020               	movlb	0	; select bank0
 12276  0D27  00E3               	movwf	??_setDimmerLights
 12277  0D28  0865               	movf	setDimmerLights@lights,w
 12278  0D29  3E14               	addlw	20
 12279  0D2A  076E               	addwf	_product,w
 12280  0D2B  00E4               	movwf	??_setDimmerLights+1
 12281  0D2C  0864               	movf	??_setDimmerLights+1,w
 12282  0D2D  0086               	movwf	6
 12283  0D2E  3002               	movlw	2	; select bank4/5
 12284  0D2F  0087               	movwf	7
 12285  0D30  0863               	movf	??_setDimmerLights,w
 12286  0D31  0081               	movwf	1
 12287  0D32  2D5A               	goto	l6380
 12288  0D33                     l6368:	
 12289                           ;Dimmer_B1.c: 642: } else {
 12290                           
 12291                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12292                           
 12293                           
 12294                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12295  0D33  086F               	movf	_DimmerLights,w
 12296  0D34  0086               	movwf	6
 12297  0D35  3001               	movlw	1	; select bank2/3
 12298  0D36  0087               	movwf	7
 12299  0D37  1301               	bcf	1,6
 12300                           
 12301                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12302  0D38  086F               	movf	_DimmerLights,w
 12303  0D39  3E09               	addlw	9
 12304  0D3A  0086               	movwf	6
 12305  0D3B  3001               	movlw	1	; select bank2/3
 12306  0D3C  0087               	movwf	7
 12307  0D3D  1081               	bcf	1,1
 12308                           
 12309                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12310  0D3E  01A2               	clrf	setLED@command
 12311  0D3F  0AA2               	incf	setLED@command,f
 12312  0D40  0865               	movf	setDimmerLights@lights,w
 12313  0D41  3193  2357  318C   	fcall	_setLED
 12314                           
 12315                           ;Dimmer_B1.c: 646: ;;
 12316                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12317  0D44  0020               	movlb	0	; select bank0
 12318  0D45  086F               	movf	_DimmerLights,w
 12319  0D46  3E08               	addlw	8
 12320  0D47  0086               	movwf	6
 12321  0D48  3001               	movlw	1	; select bank2/3
 12322  0D49  0087               	movwf	7
 12323  0D4A  1781               	bsf	1,7
 12324                           
 12325                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12326  0D4B  086F               	movf	_DimmerLights,w
 12327  0D4C  0086               	movwf	6
 12328  0D4D  3001               	movlw	1	; select bank2/3
 12329  0D4E  0087               	movwf	7
 12330  0D4F  1181               	bcf	1,3
 12331                           
 12332                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12333  0D50  086F               	movf	_DimmerLights,w
 12334  0D51  0086               	movwf	6
 12335  0D52  3001               	movlw	1	; select bank2/3
 12336  0D53  0087               	movwf	7
 12337  0D54  1201               	bcf	1,4
 12338                           
 12339                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12340  0D55  086F               	movf	_DimmerLights,w
 12341  0D56  0086               	movwf	6
 12342  0D57  3001               	movlw	1	; select bank2/3
 12343  0D58  0087               	movwf	7
 12344  0D59  1101               	bcf	1,2
 12345  0D5A                     l6380:	
 12346                           
 12347                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12348  0D5A  3007               	movlw	7
 12349  0D5B  00E3               	movwf	??_setDimmerLights
 12350  0D5C  086F               	movf	_DimmerLights,w
 12351  0D5D  3E02               	addlw	2
 12352  0D5E  0086               	movwf	6
 12353  0D5F  3001               	movlw	1	; select bank2/3
 12354  0D60  0087               	movwf	7
 12355  0D61  0863               	movf	??_setDimmerLights,w
 12356  0D62  0081               	movwf	1
 12357                           
 12358                           ;Dimmer_B1.c: 661: }
 12359                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12360  0D63  0862               	movf	setDimmerLights@status,w
 12361  0D64  00E3               	movwf	??_setDimmerLights
 12362  0D65  0863               	movf	??_setDimmerLights,w
 12363  0D66  00A0               	movwf	setRF_DimmerLights@on
 12364  0D67  0865               	movf	setDimmerLights@lights,w
 12365  0D68  3188  207F  318C   	fcall	_setRF_DimmerLights
 12366                           
 12367                           ;Dimmer_B1.c: 663: setTxData();
 12368  0D6B  3186  26D6         	fcall	_setTxData
 12369  0D6D  0008               	return
 12370  0D6E                     __end_of_setDimmerLights:	
 12371                           
 12372                           	psect	text73
 12373  06D6                     __ptext73:	
 12374 ;; *************** function _setTxData *****************
 12375 ;; Defined at:
 12376 ;;		line 211 in file "../src/RF_Control_B1.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  i               1    0        unsigned char 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;		None               void
 12383 ;; Registers used:
 12384 ;;		wreg, fsr1l, fsr1h
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        1 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    5
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_setDimmerLights
 12401 ;;		_setDimmerLights_Adj
 12402 ;;		_getRxData
 12403 ;;		_setControl_Lights_Table
 12404 ;;		_setRFSW_Control
 12405 ;;		_setRFSW_AdjControl
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           
 12410                           ;psect for function _setTxData
 12411  06D6                     _setTxData:	
 12412                           
 12413                           ;RF_Control_B1.c: 212: char i;
 12414                           ;RF_Control_B1.c: 213: if (RF1.Enable == 1) {
 12415                           
 12416                           ;incstack = 0
 12417                           ; Regs used in _setTxData: [wregfsr1]
 12418  06D6  0021               	movlb	1	; select bank1
 12419  06D7  1C3B               	btfss	_RF1^(0+128),0
 12420  06D8  0008               	return
 12421                           
 12422                           ;RF_Control_B1.c: 215: if (RF1.TransceiveGO == 0) {
 12423  06D9  193B               	btfsc	_RF1^(0+128),2
 12424  06DA  0008               	return
 12425                           
 12426                           ;RF_Control_B1.c: 216: RF1.TransceiveGO = 1;
 12427  06DB  153B               	bsf	_RF1^(0+128),2
 12428                           
 12429                           ;RF_Control_B1.c: 217: RF1.RunTime = 20;
 12430  06DC  3014               	movlw	20
 12431  06DD  00C2               	movwf	(_RF1^(0+128)+7)
 12432  06DE  3000               	movlw	0
 12433  06DF  00C3               	movwf	(_RF1^(0+128)+8)
 12434                           
 12435                           ;RF_Control_B1.c: 229: RF_Data[0] = 0x63;
 12436  06E0  3063               	movlw	99
 12437  06E1  0020               	movlb	0	; select bank0
 12438  06E2  00A0               	movwf	??_setTxData
 12439  06E3  0820               	movf	??_setTxData,w
 12440  06E4  0022               	movlb	2	; select bank2
 12441  06E5  00A0               	movwf	_RF_Data^(0+256)
 12442                           
 12443                           ;RF_Control_B1.c: 230: RF_Data[1] = 0x02;
 12444  06E6  3002               	movlw	2
 12445  06E7  0020               	movlb	0	; select bank0
 12446  06E8  00A0               	movwf	??_setTxData
 12447  06E9  0820               	movf	??_setTxData,w
 12448  06EA  0022               	movlb	2	; select bank2
 12449  06EB  00A1               	movwf	(_RF_Data^(0+256)+1)
 12450                           
 12451                           ;RF_Control_B1.c: 232: RF_Data[2] = product->Data[2];
 12452  06EC  0020               	movlb	0	; select bank0
 12453  06ED  086E               	movf	_product,w
 12454  06EE  0086               	movwf	6
 12455  06EF  3002               	movlw	2	; select bank4/5
 12456  06F0  0087               	movwf	7
 12457  06F1  3002               	movlw	2	; select bank4/5
 12458  06F2  3F42               	moviw [2]fsr1
 12459  06F3  0022               	movlb	2	; select bank2
 12460  06F4  00A2               	movwf	(_RF_Data^(0+256)+2)
 12461                           
 12462                           ;RF_Control_B1.c: 233: RF_Data[3] = product->Data[3];
 12463  06F5  0020               	movlb	0	; select bank0
 12464  06F6  086E               	movf	_product,w
 12465  06F7  0086               	movwf	6
 12466  06F8  3002               	movlw	2	; select bank4/5
 12467  06F9  0087               	movwf	7
 12468  06FA  3002               	movlw	2	; select bank4/5
 12469  06FB  3F43               	moviw [3]fsr1
 12470  06FC  0022               	movlb	2	; select bank2
 12471  06FD  00A3               	movwf	(_RF_Data^(0+256)+3)
 12472                           
 12473                           ;RF_Control_B1.c: 234: RF_Data[4] = product->Data[4];
 12474  06FE  0020               	movlb	0	; select bank0
 12475  06FF  086E               	movf	_product,w
 12476  0700  0086               	movwf	6
 12477  0701  3002               	movlw	2	; select bank4/5
 12478  0702  0087               	movwf	7
 12479  0703  3002               	movlw	2	; select bank4/5
 12480  0704  3F44               	moviw [4]fsr1
 12481  0705  0022               	movlb	2	; select bank2
 12482  0706  00A4               	movwf	(_RF_Data^(0+256)+4)
 12483                           
 12484                           ;RF_Control_B1.c: 235: RF_Data[5] = product->Data[5];
 12485  0707  0020               	movlb	0	; select bank0
 12486  0708  086E               	movf	_product,w
 12487  0709  0086               	movwf	6
 12488  070A  3002               	movlw	2	; select bank4/5
 12489  070B  0087               	movwf	7
 12490  070C  3002               	movlw	2	; select bank4/5
 12491  070D  3F45               	moviw [5]fsr1
 12492  070E  0022               	movlb	2	; select bank2
 12493  070F  00A5               	movwf	(_RF_Data^(0+256)+5)
 12494                           
 12495                           ;RF_Control_B1.c: 236: RF_Data[6] = product->Data[6];
 12496  0710  0020               	movlb	0	; select bank0
 12497  0711  086E               	movf	_product,w
 12498  0712  0086               	movwf	6
 12499  0713  3002               	movlw	2	; select bank4/5
 12500  0714  0087               	movwf	7
 12501  0715  3002               	movlw	2	; select bank4/5
 12502  0716  3F46               	moviw [6]fsr1
 12503  0717  0022               	movlb	2	; select bank2
 12504  0718  00A6               	movwf	(_RF_Data^(0+256)+6)
 12505                           
 12506                           ;RF_Control_B1.c: 237: RF_Data[7] = product->Data[7];
 12507  0719  0020               	movlb	0	; select bank0
 12508  071A  086E               	movf	_product,w
 12509  071B  0086               	movwf	6
 12510  071C  3002               	movlw	2	; select bank4/5
 12511  071D  0087               	movwf	7
 12512  071E  3002               	movlw	2	; select bank4/5
 12513  071F  3F47               	moviw [7]fsr1
 12514  0720  0022               	movlb	2	; select bank2
 12515  0721  00A7               	movwf	(_RF_Data^(0+256)+7)
 12516                           
 12517                           ;RF_Control_B1.c: 238: RF_Data[8] = product->Data[8];
 12518  0722  0020               	movlb	0	; select bank0
 12519  0723  086E               	movf	_product,w
 12520  0724  0086               	movwf	6
 12521  0725  3002               	movlw	2	; select bank4/5
 12522  0726  0087               	movwf	7
 12523  0727  3002               	movlw	2	; select bank4/5
 12524  0728  3F48               	moviw [8]fsr1
 12525  0729  0022               	movlb	2	; select bank2
 12526  072A  00A8               	movwf	(_RF_Data^(0+256)+8)
 12527                           
 12528                           ;RF_Control_B1.c: 239: RF_Data[9] = product->Data[9];
 12529  072B  0020               	movlb	0	; select bank0
 12530  072C  086E               	movf	_product,w
 12531  072D  0086               	movwf	6
 12532  072E  3002               	movlw	2	; select bank4/5
 12533  072F  0087               	movwf	7
 12534  0730  3002               	movlw	2	; select bank4/5
 12535  0731  3F49               	moviw [9]fsr1
 12536  0732  0022               	movlb	2	; select bank2
 12537  0733  00A9               	movwf	(_RF_Data^(0+256)+9)
 12538                           
 12539                           ;RF_Control_B1.c: 240: RF_Data[10] = product->Data[10];
 12540  0734  0020               	movlb	0	; select bank0
 12541  0735  086E               	movf	_product,w
 12542  0736  0086               	movwf	6
 12543  0737  3002               	movlw	2	; select bank4/5
 12544  0738  0087               	movwf	7
 12545  0739  3002               	movlw	2	; select bank4/5
 12546  073A  3F4A               	moviw [10]fsr1
 12547  073B  0022               	movlb	2	; select bank2
 12548  073C  00AA               	movwf	(_RF_Data^(0+256)+10)
 12549                           
 12550                           ;RF_Control_B1.c: 241: RF_Data[11] = product->Data[11];
 12551  073D  0020               	movlb	0	; select bank0
 12552  073E  086E               	movf	_product,w
 12553  073F  0086               	movwf	6
 12554  0740  3002               	movlw	2	; select bank4/5
 12555  0741  0087               	movwf	7
 12556  0742  3002               	movlw	2	; select bank4/5
 12557  0743  3F4B               	moviw [11]fsr1
 12558  0744  0022               	movlb	2	; select bank2
 12559  0745  00AB               	movwf	(_RF_Data^(0+256)+11)
 12560                           
 12561                           ;RF_Control_B1.c: 242: RF_Data[12] = product->Data[12];
 12562  0746  0020               	movlb	0	; select bank0
 12563  0747  086E               	movf	_product,w
 12564  0748  0086               	movwf	6
 12565  0749  3002               	movlw	2	; select bank4/5
 12566  074A  0087               	movwf	7
 12567  074B  3002               	movlw	2	; select bank4/5
 12568  074C  3F4C               	moviw [12]fsr1
 12569  074D  0022               	movlb	2	; select bank2
 12570  074E  00AC               	movwf	(_RF_Data^(0+256)+12)
 12571                           
 12572                           ;RF_Control_B1.c: 243: RF_Data[13] = product->Data[13];
 12573  074F  0020               	movlb	0	; select bank0
 12574  0750  086E               	movf	_product,w
 12575  0751  0086               	movwf	6
 12576  0752  3002               	movlw	2	; select bank4/5
 12577  0753  0087               	movwf	7
 12578  0754  3002               	movlw	2	; select bank4/5
 12579  0755  3F4D               	moviw [13]fsr1
 12580  0756  0022               	movlb	2	; select bank2
 12581  0757  00AD               	movwf	(_RF_Data^(0+256)+13)
 12582                           
 12583                           ;RF_Control_B1.c: 244: RF_Data[14] = product->Data[14];
 12584  0758  0020               	movlb	0	; select bank0
 12585  0759  086E               	movf	_product,w
 12586  075A  0086               	movwf	6
 12587  075B  3002               	movlw	2	; select bank4/5
 12588  075C  0087               	movwf	7
 12589  075D  3002               	movlw	2	; select bank4/5
 12590  075E  3F4E               	moviw [14]fsr1
 12591  075F  0022               	movlb	2	; select bank2
 12592  0760  00AE               	movwf	(_RF_Data^(0+256)+14)
 12593                           
 12594                           ;RF_Control_B1.c: 245: RF_Data[15] = product->Data[15];
 12595  0761  0020               	movlb	0	; select bank0
 12596  0762  086E               	movf	_product,w
 12597  0763  0086               	movwf	6
 12598  0764  3002               	movlw	2	; select bank4/5
 12599  0765  0087               	movwf	7
 12600  0766  3002               	movlw	2	; select bank4/5
 12601  0767  3F4F               	moviw [15]fsr1
 12602  0768  0022               	movlb	2	; select bank2
 12603  0769  00AF               	movwf	(_RF_Data^(0+256)+15)
 12604                           
 12605                           ;RF_Control_B1.c: 246: RF_Data[16] = product->Data[16];
 12606  076A  0020               	movlb	0	; select bank0
 12607  076B  086E               	movf	_product,w
 12608  076C  0086               	movwf	6
 12609  076D  3002               	movlw	2	; select bank4/5
 12610  076E  0087               	movwf	7
 12611  076F  3002               	movlw	2	; select bank4/5
 12612  0770  3F50               	moviw [16]fsr1
 12613  0771  0022               	movlb	2	; select bank2
 12614  0772  00B0               	movwf	(_RF_Data^(0+256)+16)
 12615                           
 12616                           ;RF_Control_B1.c: 247: RF_Data[17] = product->Data[17];
 12617  0773  0020               	movlb	0	; select bank0
 12618  0774  086E               	movf	_product,w
 12619  0775  0086               	movwf	6
 12620  0776  3002               	movlw	2	; select bank4/5
 12621  0777  0087               	movwf	7
 12622  0778  3002               	movlw	2	; select bank4/5
 12623  0779  3F51               	moviw [17]fsr1
 12624  077A  0022               	movlb	2	; select bank2
 12625  077B  00B1               	movwf	(_RF_Data^(0+256)+17)
 12626                           
 12627                           ;RF_Control_B1.c: 248: RF_Data[18] = product->Data[18];
 12628  077C  0020               	movlb	0	; select bank0
 12629  077D  086E               	movf	_product,w
 12630  077E  0086               	movwf	6
 12631  077F  3002               	movlw	2	; select bank4/5
 12632  0780  0087               	movwf	7
 12633  0781  3002               	movlw	2	; select bank4/5
 12634  0782  3F52               	moviw [18]fsr1
 12635  0783  0022               	movlb	2	; select bank2
 12636  0784  00B2               	movwf	(_RF_Data^(0+256)+18)
 12637                           
 12638                           ;RF_Control_B1.c: 249: RF_Data[19] = product->Data[19];
 12639  0785  0020               	movlb	0	; select bank0
 12640  0786  086E               	movf	_product,w
 12641  0787  0086               	movwf	6
 12642  0788  3002               	movlw	2	; select bank4/5
 12643  0789  0087               	movwf	7
 12644  078A  3002               	movlw	2	; select bank4/5
 12645  078B  3F53               	moviw [19]fsr1
 12646  078C  0022               	movlb	2	; select bank2
 12647  078D  00B3               	movwf	(_RF_Data^(0+256)+19)
 12648                           
 12649                           ;RF_Control_B1.c: 250: RF_Data[20] = 209;
 12650  078E  30D1               	movlw	209
 12651  078F  0020               	movlb	0	; select bank0
 12652  0790  00A0               	movwf	??_setTxData
 12653  0791  0820               	movf	??_setTxData,w
 12654  0792  0022               	movlb	2	; select bank2
 12655  0793  00B4               	movwf	(_RF_Data^(0+256)+20)
 12656  0794  0008               	return
 12657  0795                     __end_of_setTxData:	
 12658                           
 12659                           	psect	text74
 12660  087F                     __ptext74:	
 12661 ;; *************** function _setRF_DimmerLights *****************
 12662 ;; Defined at:
 12663 ;;		line 488 in file "../src/RF_Control_B1.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;  lights          1    wreg     unsigned char 
 12666 ;;  on              1    0[BANK0 ] unsigned char 
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;  lights          1    4[BANK0 ] unsigned char 
 12669 ;;  status          1    3[BANK0 ] unsigned char 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;Total ram usage:        5 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    5
 12686 ;; This function calls:
 12687 ;;		Nothing
 12688 ;; This function is called by:
 12689 ;;		_setDimmerLights
 12690 ;;		_setDimmerLights_Adj
 12691 ;;		_setRFSW_Control
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           
 12696                           ;psect for function _setRF_DimmerLights
 12697  087F                     _setRF_DimmerLights:	
 12698                           
 12699                           ;incstack = 0
 12700                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 12701                           ;setRF_DimmerLights@lights stored from wreg
 12702  087F  0020               	movlb	0	; select bank0
 12703  0880  00A4               	movwf	setRF_DimmerLights@lights
 12704                           
 12705                           ;RF_Control_B1.c: 489: char status = 1;
 12706  0881  01A3               	clrf	setRF_DimmerLights@status
 12707  0882  0AA3               	incf	setRF_DimmerLights@status,f
 12708                           
 12709                           ;RF_Control_B1.c: 490: status <<= (lights - 1);
 12710  0883  0824               	movf	setRF_DimmerLights@lights,w
 12711  0884  3EFF               	addlw	-1
 12712  0885  0A89               	incf	9,f
 12713  0886  2889               	goto	u4920
 12714  0887                     u4925:	
 12715  0887  1003               	clrc
 12716  0888  0DA3               	rlf	setRF_DimmerLights@status,f
 12717  0889                     u4920:	
 12718  0889  3EFF               	addlw	-1
 12719  088A  1D03               	skipz
 12720  088B  2887               	goto	u4925
 12721                           
 12722                           ;RF_Control_B1.c: 491: product->Data[11]=lights;
 12723  088C  0824               	movf	setRF_DimmerLights@lights,w
 12724  088D  00A1               	movwf	??_setRF_DimmerLights
 12725  088E  086E               	movf	_product,w
 12726  088F  3E0B               	addlw	11
 12727  0890  0086               	movwf	6
 12728  0891  3002               	movlw	2	; select bank4/5
 12729  0892  0087               	movwf	7
 12730  0893  0821               	movf	??_setRF_DimmerLights,w
 12731  0894  0081               	movwf	1
 12732                           
 12733                           ;RF_Control_B1.c: 499: product->Data[9]=product->Data[20 + lights];
 12734  0895  0824               	movf	setRF_DimmerLights@lights,w
 12735  0896  3E14               	addlw	20
 12736  0897  076E               	addwf	_product,w
 12737  0898  00A1               	movwf	??_setRF_DimmerLights
 12738  0899  0821               	movf	??_setRF_DimmerLights,w
 12739  089A  0086               	movwf	6
 12740  089B  3002               	movlw	2	; select bank4/5
 12741  089C  0087               	movwf	7
 12742  089D  0801               	movf	1,w
 12743  089E  00A2               	movwf	??_setRF_DimmerLights+1
 12744  089F  086E               	movf	_product,w
 12745  08A0  3E09               	addlw	9
 12746  08A1  0086               	movwf	6
 12747  08A2  3002               	movlw	2	; select bank4/5
 12748  08A3  0087               	movwf	7
 12749  08A4  0822               	movf	??_setRF_DimmerLights+1,w
 12750  08A5  0081               	movwf	1
 12751                           
 12752                           ;RF_Control_B1.c: 500: product->Data[17]=product->Data[26 + lights];
 12753  08A6  0824               	movf	setRF_DimmerLights@lights,w
 12754  08A7  3E1A               	addlw	26
 12755  08A8  076E               	addwf	_product,w
 12756  08A9  00A1               	movwf	??_setRF_DimmerLights
 12757  08AA  0821               	movf	??_setRF_DimmerLights,w
 12758  08AB  0086               	movwf	6
 12759  08AC  3002               	movlw	2	; select bank4/5
 12760  08AD  0087               	movwf	7
 12761  08AE  0801               	movf	1,w
 12762  08AF  00A2               	movwf	??_setRF_DimmerLights+1
 12763  08B0  086E               	movf	_product,w
 12764  08B1  3E11               	addlw	17
 12765  08B2  0086               	movwf	6
 12766  08B3  3002               	movlw	2	; select bank4/5
 12767  08B4  0087               	movwf	7
 12768  08B5  0822               	movf	??_setRF_DimmerLights+1,w
 12769  08B6  0081               	movwf	1
 12770                           
 12771                           ;RF_Control_B1.c: 501: if (on == 1) {
 12772  08B7  0820               	movf	setRF_DimmerLights@on,w
 12773  08B8  3A01               	xorlw	1
 12774  08B9  1D03               	skipz
 12775  08BA  28CB               	goto	l5940
 12776                           
 12777                           ;RF_Control_B1.c: 502: product->Data[15]=(product->Data[15] | status);
 12778  08BB  086E               	movf	_product,w
 12779  08BC  3E0F               	addlw	15
 12780  08BD  0086               	movwf	6
 12781  08BE  3002               	movlw	2	; select bank4/5
 12782  08BF  0087               	movwf	7
 12783  08C0  0801               	movf	1,w
 12784  08C1  0423               	iorwf	setRF_DimmerLights@status,w
 12785  08C2  00A1               	movwf	??_setRF_DimmerLights
 12786  08C3  086E               	movf	_product,w
 12787  08C4  3E0F               	addlw	15
 12788  08C5  0086               	movwf	6
 12789  08C6  3002               	movlw	2	; select bank4/5
 12790  08C7  0087               	movwf	7
 12791  08C8  0821               	movf	??_setRF_DimmerLights,w
 12792  08C9  0081               	movwf	1
 12793                           
 12794                           ;RF_Control_B1.c: 503: } else {
 12795  08CA  0008               	return
 12796  08CB                     l5940:	
 12797                           
 12798                           ;RF_Control_B1.c: 504: product->Data[15]=(product->Data[15]&(~status));
 12799  08CB  086E               	movf	_product,w
 12800  08CC  3E0F               	addlw	15
 12801  08CD  0086               	movwf	6
 12802  08CE  3002               	movlw	2	; select bank4/5
 12803  08CF  0087               	movwf	7
 12804  08D0  0923               	comf	setRF_DimmerLights@status,w
 12805  08D1  0501               	andwf	1,w
 12806  08D2  00A1               	movwf	??_setRF_DimmerLights
 12807  08D3  086E               	movf	_product,w
 12808  08D4  3E0F               	addlw	15
 12809  08D5  0086               	movwf	6
 12810  08D6  3002               	movlw	2	; select bank4/5
 12811  08D7  0087               	movwf	7
 12812  08D8  0821               	movf	??_setRF_DimmerLights,w
 12813  08D9  0081               	movwf	1
 12814  08DA  0008               	return
 12815  08DB                     __end_of_setRF_DimmerLights:	
 12816                           
 12817                           	psect	text75
 12818  0B13                     __ptext75:	
 12819 ;; *************** function _setPercentValue *****************
 12820 ;; Defined at:
 12821 ;;		line 874 in file "../src/Dimmer_B1.c"
 12822 ;; Parameters:    Size  Location     Type
 12823 ;;  value           1    wreg     unsigned char 
 12824 ;; Auto vars:     Size  Location     Type
 12825 ;;  value           1   62[BANK0 ] unsigned char 
 12826 ;;  i               3   63[BANK0 ] float 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      unsigned char 
 12829 ;; Registers used:
 12830 ;;		wreg, status,2, status,0, pclath, cstack
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;Total ram usage:        6 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    7
 12843 ;; This function calls:
 12844 ;;		___awtoft
 12845 ;;		___ftadd
 12846 ;;		___ftdiv
 12847 ;;		___ftneg
 12848 ;;		___fttol
 12849 ;; This function is called by:
 12850 ;;		_setDimmerLights
 12851 ;;		_setDimmerLights_Adj
 12852 ;;		_Flash_Memory_Initialization
 12853 ;; This function uses a non-reentrant model
 12854 ;;
 12855                           
 12856                           
 12857                           ;psect for function _setPercentValue
 12858  0B13                     _setPercentValue:	
 12859                           
 12860                           ;incstack = 0
 12861                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12862                           ;setPercentValue@value stored from wreg
 12863  0B13  0020               	movlb	0	; select bank0
 12864  0B14  00DE               	movwf	setPercentValue@value
 12865                           
 12866                           ;Dimmer_B1.c: 882: float i = ((char)(65*0.8)) - ((char)(15*0.8));
 12867  0B15  3000               	movlw	0
 12868  0B16  00DF               	movwf	setPercentValue@i
 12869  0B17  3020               	movlw	32
 12870  0B18  00E0               	movwf	setPercentValue@i+1
 12871  0B19  3042               	movlw	66
 12872  0B1A  00E1               	movwf	setPercentValue@i+2
 12873                           
 12874                           ;Dimmer_B1.c: 883: i /= 100;
 12875  0B1B  3000               	movlw	0
 12876  0B1C  00AE               	movwf	___ftdiv@f2
 12877  0B1D  30C8               	movlw	200
 12878  0B1E  00AF               	movwf	___ftdiv@f2+1
 12879  0B1F  3042               	movlw	66
 12880  0B20  00B0               	movwf	___ftdiv@f2+2
 12881  0B21  085F               	movf	setPercentValue@i,w
 12882  0B22  00B1               	movwf	___ftdiv@f1
 12883  0B23  0860               	movf	setPercentValue@i+1,w
 12884  0B24  00B2               	movwf	___ftdiv@f1+1
 12885  0B25  0861               	movf	setPercentValue@i+2,w
 12886  0B26  00B3               	movwf	___ftdiv@f1+2
 12887  0B27  318E  26A3  318B   	fcall	___ftdiv
 12888  0B2A  0020               	movlb	0	; select bank0
 12889  0B2B  082E               	movf	?___ftdiv,w
 12890  0B2C  00DF               	movwf	setPercentValue@i
 12891  0B2D  082F               	movf	?___ftdiv+1,w
 12892  0B2E  00E0               	movwf	setPercentValue@i+1
 12893  0B2F  0830               	movf	?___ftdiv+2,w
 12894  0B30  00E1               	movwf	setPercentValue@i+2
 12895                           
 12896                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 12897  0B31  085E               	movf	setPercentValue@value,w
 12898  0B32  00DC               	movwf	??_setPercentValue
 12899  0B33  01DD               	clrf	??_setPercentValue+1
 12900  0B34  09DC               	comf	??_setPercentValue,f
 12901  0B35  09DD               	comf	??_setPercentValue+1,f
 12902  0B36  0ADC               	incf	??_setPercentValue,f
 12903  0B37  1903               	skipnz
 12904  0B38  0ADD               	incf	??_setPercentValue+1,f
 12905  0B39  085C               	movf	??_setPercentValue,w
 12906  0B3A  3E34               	addlw	52
 12907  0B3B  00A8               	movwf	___awtoft@c
 12908  0B3C  3000               	movlw	0
 12909  0B3D  3D5D               	addwfc	??_setPercentValue+1,w
 12910  0B3E  00A9               	movwf	___awtoft@c+1
 12911  0B3F  3191  211C  318B   	fcall	___awtoft
 12912  0B42  0020               	movlb	0	; select bank0
 12913  0B43  0828               	movf	?___awtoft,w
 12914  0B44  00B1               	movwf	___ftdiv@f1
 12915  0B45  0829               	movf	?___awtoft+1,w
 12916  0B46  00B2               	movwf	___ftdiv@f1+1
 12917  0B47  082A               	movf	?___awtoft+2,w
 12918  0B48  00B3               	movwf	___ftdiv@f1+2
 12919  0B49  085F               	movf	setPercentValue@i,w
 12920  0B4A  00AE               	movwf	___ftdiv@f2
 12921  0B4B  0860               	movf	setPercentValue@i+1,w
 12922  0B4C  00AF               	movwf	___ftdiv@f2+1
 12923  0B4D  0861               	movf	setPercentValue@i+2,w
 12924  0B4E  00B0               	movwf	___ftdiv@f2+2
 12925  0B4F  318E  26A3  318B   	fcall	___ftdiv
 12926  0B52  0020               	movlb	0	; select bank0
 12927  0B53  082E               	movf	?___ftdiv,w
 12928  0B54  00BE               	movwf	___ftneg@f1
 12929  0B55  082F               	movf	?___ftdiv+1,w
 12930  0B56  00BF               	movwf	___ftneg@f1+1
 12931  0B57  0830               	movf	?___ftdiv+2,w
 12932  0B58  00C0               	movwf	___ftneg@f1+2
 12933  0B59  319D  2513  318B   	fcall	___ftneg
 12934  0B5C  0020               	movlb	0	; select bank0
 12935  0B5D  083E               	movf	?___ftneg,w
 12936  0B5E  00C4               	movwf	___ftadd@f2
 12937  0B5F  083F               	movf	?___ftneg+1,w
 12938  0B60  00C5               	movwf	___ftadd@f2+1
 12939  0B61  0840               	movf	?___ftneg+2,w
 12940  0B62  00C6               	movwf	___ftadd@f2+2
 12941  0B63  3000               	movlw	0
 12942  0B64  00C1               	movwf	___ftadd@f1
 12943  0B65  30C8               	movlw	200
 12944  0B66  00C2               	movwf	___ftadd@f1+1
 12945  0B67  3042               	movlw	66
 12946  0B68  00C3               	movwf	___ftadd@f1+2
 12947  0B69  3184  243C  318B   	fcall	___ftadd
 12948  0B6C  0020               	movlb	0	; select bank0
 12949  0B6D  0841               	movf	?___ftadd,w
 12950  0B6E  00CE               	movwf	___fttol@f1
 12951  0B6F  0842               	movf	?___ftadd+1,w
 12952  0B70  00CF               	movwf	___fttol@f1+1
 12953  0B71  0843               	movf	?___ftadd+2,w
 12954  0B72  00D0               	movwf	___fttol@f1+2
 12955  0B73  318C  245E         	fcall	___fttol
 12956  0B75  0020               	movlb	0	; select bank0
 12957  0B76  084E               	movf	?___fttol,w
 12958  0B77  0008               	return
 12959  0B78                     __end_of_setPercentValue:	
 12960                           
 12961                           	psect	text76
 12962  0C5E                     __ptext76:	
 12963 ;; *************** function ___fttol *****************
 12964 ;; Defined at:
 12965 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;  f1              3   46[BANK0 ] float 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  lval            4   55[BANK0 ] unsigned long 
 12970 ;;  exp1            1   59[BANK0 ] unsigned char 
 12971 ;;  sign1           1   54[BANK0 ] unsigned char 
 12972 ;; Return value:  Size  Location     Type
 12973 ;;                  4   46[BANK0 ] long 
 12974 ;; Registers used:
 12975 ;;		wreg, status,2, status,0
 12976 ;; Tracked objects:
 12977 ;;		On entry : 0/0
 12978 ;;		On exit  : 0/0
 12979 ;;		Unchanged: 0/0
 12980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;Total ram usage:       14 bytes
 12986 ;; Hardware stack levels used:    1
 12987 ;; Hardware stack levels required when called:    5
 12988 ;; This function calls:
 12989 ;;		Nothing
 12990 ;; This function is called by:
 12991 ;;		_getPercentValue
 12992 ;;		_setPercentValue
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function ___fttol
 12998  0C5E                     ___fttol:	
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13002  0C5E  0020               	movlb	0	; select bank0
 13003  0C5F  084E               	movf	___fttol@f1,w
 13004  0C60  00D2               	movwf	??___fttol
 13005  0C61  084F               	movf	___fttol@f1+1,w
 13006  0C62  00D3               	movwf	??___fttol+1
 13007  0C63  0850               	movf	___fttol@f1+2,w
 13008  0C64  00D4               	movwf	??___fttol+2
 13009  0C65  1003               	clrc
 13010  0C66  0D53               	rlf	??___fttol+1,w
 13011  0C67  0D54               	rlf	??___fttol+2,w
 13012  0C68  00D5               	movwf	??___fttol+3
 13013  0C69  0855               	movf	??___fttol+3,w
 13014  0C6A  00DB               	movwf	___fttol@exp1
 13015  0C6B  08DB               	movf	___fttol@exp1,f
 13016  0C6C  1D03               	skipz
 13017  0C6D  2C77               	goto	l5682
 13018  0C6E  3000               	movlw	0
 13019  0C6F  00D1               	movwf	?___fttol+3
 13020  0C70  3000               	movlw	0
 13021  0C71  00D0               	movwf	?___fttol+2
 13022  0C72  3000               	movlw	0
 13023  0C73  00CF               	movwf	?___fttol+1
 13024  0C74  3000               	movlw	0
 13025  0C75  00CE               	movwf	?___fttol
 13026  0C76  0008               	return
 13027  0C77                     l5682:	
 13028  0C77  084E               	movf	___fttol@f1,w
 13029  0C78  00D2               	movwf	??___fttol
 13030  0C79  084F               	movf	___fttol@f1+1,w
 13031  0C7A  00D3               	movwf	??___fttol+1
 13032  0C7B  0850               	movf	___fttol@f1+2,w
 13033  0C7C  00D4               	movwf	??___fttol+2
 13034  0C7D  3017               	movlw	23
 13035  0C7E                     u4555:	
 13036  0C7E  36D4               	lsrf	??___fttol+2,f
 13037  0C7F  0CD3               	rrf	??___fttol+1,f
 13038  0C80  0CD2               	rrf	??___fttol,f
 13039  0C81  0B89               	decfsz	9,f
 13040  0C82  2C7E               	goto	u4555
 13041  0C83  0852               	movf	??___fttol,w
 13042  0C84  00D5               	movwf	??___fttol+3
 13043  0C85  0855               	movf	??___fttol+3,w
 13044  0C86  00D6               	movwf	___fttol@sign1
 13045  0C87  17CF               	bsf	___fttol@f1+1,7
 13046  0C88  30FF               	movlw	255
 13047  0C89  05CE               	andwf	___fttol@f1,f
 13048  0C8A  30FF               	movlw	255
 13049  0C8B  05CF               	andwf	___fttol@f1+1,f
 13050  0C8C  3000               	movlw	0
 13051  0C8D  05D0               	andwf	___fttol@f1+2,f
 13052  0C8E  084E               	movf	___fttol@f1,w
 13053  0C8F  00D7               	movwf	___fttol@lval
 13054  0C90  084F               	movf	___fttol@f1+1,w
 13055  0C91  00D8               	movwf	___fttol@lval+1
 13056  0C92  0850               	movf	___fttol@f1+2,w
 13057  0C93  00D9               	movwf	___fttol@lval+2
 13058  0C94  01DA               	clrf	___fttol@lval+3
 13059  0C95  308E               	movlw	142
 13060  0C96  02DB               	subwf	___fttol@exp1,f
 13061  0C97  1FDB               	btfss	___fttol@exp1,7
 13062  0C98  2CB5               	goto	l5702
 13063  0C99  085B               	movf	___fttol@exp1,w
 13064  0C9A  3A80               	xorlw	128
 13065  0C9B  3E8F               	addlw	143
 13066  0C9C  1803               	skipnc
 13067  0C9D  2CA7               	goto	l5700
 13068  0C9E  3000               	movlw	0
 13069  0C9F  00D1               	movwf	?___fttol+3
 13070  0CA0  3000               	movlw	0
 13071  0CA1  00D0               	movwf	?___fttol+2
 13072  0CA2  3000               	movlw	0
 13073  0CA3  00CF               	movwf	?___fttol+1
 13074  0CA4  3000               	movlw	0
 13075  0CA5  00CE               	movwf	?___fttol
 13076  0CA6  0008               	return
 13077  0CA7                     l5700:	
 13078  0CA7  3001               	movlw	1
 13079  0CA8                     u4585:	
 13080  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13081  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13082  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13083  0CAB  0CD7               	rrf	___fttol@lval,f
 13084  0CAC  0B89               	decfsz	9,f
 13085  0CAD  2CA8               	goto	u4585
 13086  0CAE  3001               	movlw	1
 13087  0CAF  00D2               	movwf	??___fttol
 13088  0CB0  0852               	movf	??___fttol,w
 13089  0CB1  07DB               	addwf	___fttol@exp1,f
 13090  0CB2  1903               	btfsc	3,2
 13091  0CB3  2CCE               	goto	l5712
 13092  0CB4  2CA7               	goto	l5700
 13093  0CB5                     l5702:	
 13094  0CB5  3018               	movlw	24
 13095  0CB6  025B               	subwf	___fttol@exp1,w
 13096  0CB7  1C03               	skipc
 13097  0CB8  2CCB               	goto	l5710
 13098  0CB9  3000               	movlw	0
 13099  0CBA  00D1               	movwf	?___fttol+3
 13100  0CBB  3000               	movlw	0
 13101  0CBC  00D0               	movwf	?___fttol+2
 13102  0CBD  3000               	movlw	0
 13103  0CBE  00CF               	movwf	?___fttol+1
 13104  0CBF  3000               	movlw	0
 13105  0CC0  00CE               	movwf	?___fttol
 13106  0CC1  0008               	return
 13107  0CC2                     l5708:	
 13108  0CC2  3001               	movlw	1
 13109  0CC3                     u4615:	
 13110  0CC3  35D7               	lslf	___fttol@lval,f
 13111  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13112  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13113  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13114  0CC7  0B89               	decfsz	9,f
 13115  0CC8  2CC3               	goto	u4615
 13116  0CC9  3001               	movlw	1
 13117  0CCA  02DB               	subwf	___fttol@exp1,f
 13118  0CCB                     l5710:	
 13119  0CCB  08DB               	movf	___fttol@exp1,f
 13120  0CCC  1D03               	skipz
 13121  0CCD  2CC2               	goto	l5708
 13122  0CCE                     l5712:	
 13123  0CCE  0856               	movf	___fttol@sign1,w
 13124  0CCF  1903               	btfsc	3,2
 13125  0CD0  2CDC               	goto	l5716
 13126  0CD1  09D7               	comf	___fttol@lval,f
 13127  0CD2  09D8               	comf	___fttol@lval+1,f
 13128  0CD3  09D9               	comf	___fttol@lval+2,f
 13129  0CD4  09DA               	comf	___fttol@lval+3,f
 13130  0CD5  0AD7               	incf	___fttol@lval,f
 13131  0CD6  1903               	skipnz
 13132  0CD7  0AD8               	incf	___fttol@lval+1,f
 13133  0CD8  1903               	skipnz
 13134  0CD9  0AD9               	incf	___fttol@lval+2,f
 13135  0CDA  1903               	skipnz
 13136  0CDB  0ADA               	incf	___fttol@lval+3,f
 13137  0CDC                     l5716:	
 13138  0CDC  085A               	movf	___fttol@lval+3,w
 13139  0CDD  00D1               	movwf	?___fttol+3
 13140  0CDE  0859               	movf	___fttol@lval+2,w
 13141  0CDF  00D0               	movwf	?___fttol+2
 13142  0CE0  0858               	movf	___fttol@lval+1,w
 13143  0CE1  00CF               	movwf	?___fttol+1
 13144  0CE2  0857               	movf	___fttol@lval,w
 13145  0CE3  00CE               	movwf	?___fttol
 13146  0CE4  0008               	return
 13147  0CE5                     __end_of___fttol:	
 13148                           
 13149                           	psect	text77
 13150  1D13                     __ptext77:	
 13151 ;; *************** function ___ftneg *****************
 13152 ;; Defined at:
 13153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  f1              3   30[BANK0 ] float 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  3   30[BANK0 ] float 
 13160 ;; Registers used:
 13161 ;;		wreg
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;Total ram usage:        3 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    5
 13174 ;; This function calls:
 13175 ;;		Nothing
 13176 ;; This function is called by:
 13177 ;;		_getPercentValue
 13178 ;;		_setPercentValue
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           
 13183                           ;psect for function ___ftneg
 13184  1D13                     ___ftneg:	
 13185                           
 13186                           ;incstack = 0
 13187                           ; Regs used in ___ftneg: [wreg]
 13188  1D13  0020               	movlb	0	; select bank0
 13189  1D14  0840               	movf	___ftneg@f1+2,w
 13190  1D15  043F               	iorwf	___ftneg@f1+1,w
 13191  1D16  043E               	iorwf	___ftneg@f1,w
 13192  1D17  1903               	skipnz
 13193  1D18  0008               	return
 13194  1D19  3080               	movlw	128
 13195  1D1A  06C0               	xorwf	___ftneg@f1+2,f
 13196  1D1B  0008               	return
 13197  1D1C                     __end_of___ftneg:	
 13198                           
 13199                           	psect	text78
 13200  0EA3                     __ptext78:	
 13201 ;; *************** function ___ftdiv *****************
 13202 ;; Defined at:
 13203 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;  f2              3   14[BANK0 ] float 
 13206 ;;  f1              3   17[BANK0 ] float 
 13207 ;; Auto vars:     Size  Location     Type
 13208 ;;  f3              3   25[BANK0 ] float 
 13209 ;;  sign            1   29[BANK0 ] unsigned char 
 13210 ;;  exp             1   28[BANK0 ] unsigned char 
 13211 ;;  cntr            1   24[BANK0 ] unsigned char 
 13212 ;; Return value:  Size  Location     Type
 13213 ;;                  3   14[BANK0 ] float 
 13214 ;; Registers used:
 13215 ;;		wreg, status,2, status,0, pclath, cstack
 13216 ;; Tracked objects:
 13217 ;;		On entry : 0/0
 13218 ;;		On exit  : 0/0
 13219 ;;		Unchanged: 0/0
 13220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13221 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13222 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;Total ram usage:       16 bytes
 13226 ;; Hardware stack levels used:    1
 13227 ;; Hardware stack levels required when called:    6
 13228 ;; This function calls:
 13229 ;;		___ftpack
 13230 ;; This function is called by:
 13231 ;;		_getPercentValue
 13232 ;;		_setPercentValue
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           
 13237                           ;psect for function ___ftdiv
 13238  0EA3                     ___ftdiv:	
 13239                           
 13240                           ;incstack = 0
 13241                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13242  0EA3  0020               	movlb	0	; select bank0
 13243  0EA4  0831               	movf	___ftdiv@f1,w
 13244  0EA5  00B4               	movwf	??___ftdiv
 13245  0EA6  0832               	movf	___ftdiv@f1+1,w
 13246  0EA7  00B5               	movwf	??___ftdiv+1
 13247  0EA8  0833               	movf	___ftdiv@f1+2,w
 13248  0EA9  00B6               	movwf	??___ftdiv+2
 13249  0EAA  1003               	clrc
 13250  0EAB  0D35               	rlf	??___ftdiv+1,w
 13251  0EAC  0D36               	rlf	??___ftdiv+2,w
 13252  0EAD  00B7               	movwf	??___ftdiv+3
 13253  0EAE  0837               	movf	??___ftdiv+3,w
 13254  0EAF  00BC               	movwf	___ftdiv@exp
 13255  0EB0  08BC               	movf	___ftdiv@exp,f
 13256  0EB1  1D03               	skipz
 13257  0EB2  2EBA               	goto	l5582
 13258  0EB3  3000               	movlw	0
 13259  0EB4  00AE               	movwf	?___ftdiv
 13260  0EB5  3000               	movlw	0
 13261  0EB6  00AF               	movwf	?___ftdiv+1
 13262  0EB7  3000               	movlw	0
 13263  0EB8  00B0               	movwf	?___ftdiv+2
 13264  0EB9  0008               	return
 13265  0EBA                     l5582:	
 13266  0EBA  082E               	movf	___ftdiv@f2,w
 13267  0EBB  00B4               	movwf	??___ftdiv
 13268  0EBC  082F               	movf	___ftdiv@f2+1,w
 13269  0EBD  00B5               	movwf	??___ftdiv+1
 13270  0EBE  0830               	movf	___ftdiv@f2+2,w
 13271  0EBF  00B6               	movwf	??___ftdiv+2
 13272  0EC0  1003               	clrc
 13273  0EC1  0D35               	rlf	??___ftdiv+1,w
 13274  0EC2  0D36               	rlf	??___ftdiv+2,w
 13275  0EC3  00B7               	movwf	??___ftdiv+3
 13276  0EC4  0837               	movf	??___ftdiv+3,w
 13277  0EC5  00BD               	movwf	___ftdiv@sign
 13278  0EC6  08BD               	movf	___ftdiv@sign,f
 13279  0EC7  1D03               	skipz
 13280  0EC8  2ED0               	goto	l5588
 13281  0EC9  3000               	movlw	0
 13282  0ECA  00AE               	movwf	?___ftdiv
 13283  0ECB  3000               	movlw	0
 13284  0ECC  00AF               	movwf	?___ftdiv+1
 13285  0ECD  3000               	movlw	0
 13286  0ECE  00B0               	movwf	?___ftdiv+2
 13287  0ECF  0008               	return
 13288  0ED0                     l5588:	
 13289  0ED0  3000               	movlw	0
 13290  0ED1  00B9               	movwf	___ftdiv@f3
 13291  0ED2  3000               	movlw	0
 13292  0ED3  00BA               	movwf	___ftdiv@f3+1
 13293  0ED4  3000               	movlw	0
 13294  0ED5  00BB               	movwf	___ftdiv@f3+2
 13295  0ED6  3089               	movlw	137
 13296  0ED7  073D               	addwf	___ftdiv@sign,w
 13297  0ED8  00B4               	movwf	??___ftdiv
 13298  0ED9  0834               	movf	??___ftdiv,w
 13299  0EDA  02BC               	subwf	___ftdiv@exp,f
 13300  0EDB  0831               	movf	___ftdiv@f1,w
 13301  0EDC  00B4               	movwf	??___ftdiv
 13302  0EDD  0832               	movf	___ftdiv@f1+1,w
 13303  0EDE  00B5               	movwf	??___ftdiv+1
 13304  0EDF  0833               	movf	___ftdiv@f1+2,w
 13305  0EE0  00B6               	movwf	??___ftdiv+2
 13306  0EE1  3010               	movlw	16
 13307  0EE2                     u4355:	
 13308  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13309  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13310  0EE4  0CB4               	rrf	??___ftdiv,f
 13311  0EE5  0B89               	decfsz	9,f
 13312  0EE6  2EE2               	goto	u4355
 13313  0EE7  0834               	movf	??___ftdiv,w
 13314  0EE8  00B7               	movwf	??___ftdiv+3
 13315  0EE9  0837               	movf	??___ftdiv+3,w
 13316  0EEA  00BD               	movwf	___ftdiv@sign
 13317  0EEB  082E               	movf	___ftdiv@f2,w
 13318  0EEC  00B4               	movwf	??___ftdiv
 13319  0EED  082F               	movf	___ftdiv@f2+1,w
 13320  0EEE  00B5               	movwf	??___ftdiv+1
 13321  0EEF  0830               	movf	___ftdiv@f2+2,w
 13322  0EF0  00B6               	movwf	??___ftdiv+2
 13323  0EF1  3010               	movlw	16
 13324  0EF2                     u4365:	
 13325  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13326  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13327  0EF4  0CB4               	rrf	??___ftdiv,f
 13328  0EF5  0B89               	decfsz	9,f
 13329  0EF6  2EF2               	goto	u4365
 13330  0EF7  0834               	movf	??___ftdiv,w
 13331  0EF8  00B7               	movwf	??___ftdiv+3
 13332  0EF9  0837               	movf	??___ftdiv+3,w
 13333  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13334  0EFB  3080               	movlw	128
 13335  0EFC  00B4               	movwf	??___ftdiv
 13336  0EFD  0834               	movf	??___ftdiv,w
 13337  0EFE  05BD               	andwf	___ftdiv@sign,f
 13338  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13339  0F00  30FF               	movlw	255
 13340  0F01  05B1               	andwf	___ftdiv@f1,f
 13341  0F02  30FF               	movlw	255
 13342  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13343  0F04  3000               	movlw	0
 13344  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13345  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13346  0F07  30FF               	movlw	255
 13347  0F08  05AE               	andwf	___ftdiv@f2,f
 13348  0F09  30FF               	movlw	255
 13349  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13350  0F0B  3000               	movlw	0
 13351  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13352  0F0D  3018               	movlw	24
 13353  0F0E  00B4               	movwf	??___ftdiv
 13354  0F0F  0834               	movf	??___ftdiv,w
 13355  0F10  00B8               	movwf	___ftdiv@cntr
 13356  0F11                     l5602:	
 13357  0F11  3001               	movlw	1
 13358  0F12                     u4375:	
 13359  0F12  35B9               	lslf	___ftdiv@f3,f
 13360  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13361  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13362  0F15  0B89               	decfsz	9,f
 13363  0F16  2F12               	goto	u4375
 13364  0F17  0830               	movf	___ftdiv@f2+2,w
 13365  0F18  0233               	subwf	___ftdiv@f1+2,w
 13366  0F19  1D03               	skipz
 13367  0F1A  2F21               	goto	u4385
 13368  0F1B  082F               	movf	___ftdiv@f2+1,w
 13369  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13370  0F1D  1D03               	skipz
 13371  0F1E  2F21               	goto	u4385
 13372  0F1F  082E               	movf	___ftdiv@f2,w
 13373  0F20  0231               	subwf	___ftdiv@f1,w
 13374  0F21                     u4385:	
 13375  0F21  1C03               	skipc
 13376  0F22  2F2A               	goto	l5610
 13377  0F23  082E               	movf	___ftdiv@f2,w
 13378  0F24  02B1               	subwf	___ftdiv@f1,f
 13379  0F25  082F               	movf	___ftdiv@f2+1,w
 13380  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13381  0F27  0830               	movf	___ftdiv@f2+2,w
 13382  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13383  0F29  1439               	bsf	___ftdiv@f3,0
 13384  0F2A                     l5610:	
 13385  0F2A  3001               	movlw	1
 13386  0F2B                     u4395:	
 13387  0F2B  35B1               	lslf	___ftdiv@f1,f
 13388  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13389  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13390  0F2E  0B89               	decfsz	9,f
 13391  0F2F  2F2B               	goto	u4395
 13392  0F30  3001               	movlw	1
 13393  0F31  02B8               	subwf	___ftdiv@cntr,f
 13394  0F32  1D03               	btfss	3,2
 13395  0F33  2F11               	goto	l5602
 13396  0F34  0839               	movf	___ftdiv@f3,w
 13397  0F35  00A0               	movwf	___ftpack@arg
 13398  0F36  083A               	movf	___ftdiv@f3+1,w
 13399  0F37  00A1               	movwf	___ftpack@arg+1
 13400  0F38  083B               	movf	___ftdiv@f3+2,w
 13401  0F39  00A2               	movwf	___ftpack@arg+2
 13402  0F3A  083C               	movf	___ftdiv@exp,w
 13403  0F3B  00B4               	movwf	??___ftdiv
 13404  0F3C  0834               	movf	??___ftdiv,w
 13405  0F3D  00A3               	movwf	___ftpack@exp
 13406  0F3E  083D               	movf	___ftdiv@sign,w
 13407  0F3F  00B5               	movwf	??___ftdiv+1
 13408  0F40  0835               	movf	??___ftdiv+1,w
 13409  0F41  00A4               	movwf	___ftpack@sign
 13410  0F42  318A  2251         	fcall	___ftpack
 13411  0F44  0020               	movlb	0	; select bank0
 13412  0F45  0820               	movf	?___ftpack,w
 13413  0F46  00AE               	movwf	?___ftdiv
 13414  0F47  0821               	movf	?___ftpack+1,w
 13415  0F48  00AF               	movwf	?___ftdiv+1
 13416  0F49  0822               	movf	?___ftpack+2,w
 13417  0F4A  00B0               	movwf	?___ftdiv+2
 13418  0F4B  0008               	return
 13419  0F4C                     __end_of___ftdiv:	
 13420                           
 13421                           	psect	text79
 13422  043C                     __ptext79:	
 13423 ;; *************** function ___ftadd *****************
 13424 ;; Defined at:
 13425 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;  f1              3   33[BANK0 ] float 
 13428 ;;  f2              3   36[BANK0 ] float 
 13429 ;; Auto vars:     Size  Location     Type
 13430 ;;  exp1            1   45[BANK0 ] unsigned char 
 13431 ;;  exp2            1   44[BANK0 ] unsigned char 
 13432 ;;  sign            1   43[BANK0 ] unsigned char 
 13433 ;; Return value:  Size  Location     Type
 13434 ;;                  3   33[BANK0 ] float 
 13435 ;; Registers used:
 13436 ;;		wreg, status,2, status,0, pclath, cstack
 13437 ;; Tracked objects:
 13438 ;;		On entry : 0/0
 13439 ;;		On exit  : 0/0
 13440 ;;		Unchanged: 0/0
 13441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13442 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;Total ram usage:       13 bytes
 13447 ;; Hardware stack levels used:    1
 13448 ;; Hardware stack levels required when called:    6
 13449 ;; This function calls:
 13450 ;;		___ftpack
 13451 ;; This function is called by:
 13452 ;;		_getPercentValue
 13453 ;;		_setPercentValue
 13454 ;; This function uses a non-reentrant model
 13455 ;;
 13456                           
 13457                           
 13458                           ;psect for function ___ftadd
 13459  043C                     ___ftadd:	
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13463  043C  0020               	movlb	0	; select bank0
 13464  043D  0841               	movf	___ftadd@f1,w
 13465  043E  00C7               	movwf	??___ftadd
 13466  043F  0842               	movf	___ftadd@f1+1,w
 13467  0440  00C8               	movwf	??___ftadd+1
 13468  0441  0843               	movf	___ftadd@f1+2,w
 13469  0442  00C9               	movwf	??___ftadd+2
 13470  0443  1003               	clrc
 13471  0444  0D48               	rlf	??___ftadd+1,w
 13472  0445  0D49               	rlf	??___ftadd+2,w
 13473  0446  00CA               	movwf	??___ftadd+3
 13474  0447  084A               	movf	??___ftadd+3,w
 13475  0448  00CD               	movwf	___ftadd@exp1
 13476  0449  0844               	movf	___ftadd@f2,w
 13477  044A  00C7               	movwf	??___ftadd
 13478  044B  0845               	movf	___ftadd@f2+1,w
 13479  044C  00C8               	movwf	??___ftadd+1
 13480  044D  0846               	movf	___ftadd@f2+2,w
 13481  044E  00C9               	movwf	??___ftadd+2
 13482  044F  1003               	clrc
 13483  0450  0D48               	rlf	??___ftadd+1,w
 13484  0451  0D49               	rlf	??___ftadd+2,w
 13485  0452  00CA               	movwf	??___ftadd+3
 13486  0453  084A               	movf	??___ftadd+3,w
 13487  0454  00CC               	movwf	___ftadd@exp2
 13488  0455  084D               	movf	___ftadd@exp1,w
 13489  0456  1903               	btfsc	3,2
 13490  0457  2C64               	goto	l5512
 13491  0458  084C               	movf	___ftadd@exp2,w
 13492  0459  024D               	subwf	___ftadd@exp1,w
 13493  045A  1803               	skipnc
 13494  045B  2C6B               	goto	l5516
 13495  045C  034D               	decf	___ftadd@exp1,w
 13496  045D  3AFF               	xorlw	255
 13497  045E  074C               	addwf	___ftadd@exp2,w
 13498  045F  00C7               	movwf	??___ftadd
 13499  0460  3019               	movlw	25
 13500  0461  0247               	subwf	??___ftadd,w
 13501  0462  1C03               	skipc
 13502  0463  2C6B               	goto	l5516
 13503  0464                     l5512:	
 13504  0464  0844               	movf	___ftadd@f2,w
 13505  0465  00C1               	movwf	?___ftadd
 13506  0466  0845               	movf	___ftadd@f2+1,w
 13507  0467  00C2               	movwf	?___ftadd+1
 13508  0468  0846               	movf	___ftadd@f2+2,w
 13509  0469  00C3               	movwf	?___ftadd+2
 13510  046A  0008               	return
 13511  046B                     l5516:	
 13512  046B  084C               	movf	___ftadd@exp2,w
 13513  046C  1903               	btfsc	3,2
 13514  046D  0008               	return
 13515  046E  084D               	movf	___ftadd@exp1,w
 13516  046F  024C               	subwf	___ftadd@exp2,w
 13517  0470  1803               	skipnc
 13518  0471  2C7A               	goto	l5522
 13519  0472  034C               	decf	___ftadd@exp2,w
 13520  0473  3AFF               	xorlw	255
 13521  0474  074D               	addwf	___ftadd@exp1,w
 13522  0475  00C7               	movwf	??___ftadd
 13523  0476  3019               	movlw	25
 13524  0477  0247               	subwf	??___ftadd,w
 13525  0478  1803               	btfsc	3,0
 13526  0479  0008               	return
 13527  047A                     l5522:	
 13528  047A  3006               	movlw	6
 13529  047B  00C7               	movwf	??___ftadd
 13530  047C  0847               	movf	??___ftadd,w
 13531  047D  00CB               	movwf	___ftadd@sign
 13532  047E  1BC3               	btfsc	___ftadd@f1+2,7
 13533  047F  17CB               	bsf	___ftadd@sign,7
 13534  0480  1BC6               	btfsc	___ftadd@f2+2,7
 13535  0481  174B               	bsf	___ftadd@sign,6
 13536  0482  17C2               	bsf	___ftadd@f1+1,7
 13537  0483  30FF               	movlw	255
 13538  0484  05C1               	andwf	___ftadd@f1,f
 13539  0485  30FF               	movlw	255
 13540  0486  05C2               	andwf	___ftadd@f1+1,f
 13541  0487  3000               	movlw	0
 13542  0488  05C3               	andwf	___ftadd@f1+2,f
 13543  0489  17C5               	bsf	___ftadd@f2+1,7
 13544  048A  30FF               	movlw	255
 13545  048B  05C4               	andwf	___ftadd@f2,f
 13546  048C  30FF               	movlw	255
 13547  048D  05C5               	andwf	___ftadd@f2+1,f
 13548  048E  3000               	movlw	0
 13549  048F  05C6               	andwf	___ftadd@f2+2,f
 13550  0490  084C               	movf	___ftadd@exp2,w
 13551  0491  024D               	subwf	___ftadd@exp1,w
 13552  0492  1803               	skipnc
 13553  0493  2CB6               	goto	l5544
 13554  0494                     l5534:	
 13555  0494  3001               	movlw	1
 13556  0495                     u4195:	
 13557  0495  35C4               	lslf	___ftadd@f2,f
 13558  0496  0DC5               	rlf	___ftadd@f2+1,f
 13559  0497  0DC6               	rlf	___ftadd@f2+2,f
 13560  0498  0B89               	decfsz	9,f
 13561  0499  2C95               	goto	u4195
 13562  049A  3001               	movlw	1
 13563  049B  02CC               	subwf	___ftadd@exp2,f
 13564  049C  084C               	movf	___ftadd@exp2,w
 13565  049D  064D               	xorwf	___ftadd@exp1,w
 13566  049E  1903               	skipnz
 13567  049F  2CB1               	goto	l5542
 13568  04A0  3001               	movlw	1
 13569  04A1  02CB               	subwf	___ftadd@sign,f
 13570  04A2  084B               	movf	___ftadd@sign,w
 13571  04A3  3907               	andlw	7
 13572  04A4  1903               	btfsc	3,2
 13573  04A5  2CB1               	goto	l5542
 13574  04A6  2C94               	goto	l5534
 13575  04A7                     l5540:	
 13576  04A7  3001               	movlw	1
 13577  04A8                     u4225:	
 13578  04A8  36C3               	lsrf	___ftadd@f1+2,f
 13579  04A9  0CC2               	rrf	___ftadd@f1+1,f
 13580  04AA  0CC1               	rrf	___ftadd@f1,f
 13581  04AB  0B89               	decfsz	9,f
 13582  04AC  2CA8               	goto	u4225
 13583  04AD  3001               	movlw	1
 13584  04AE  00C7               	movwf	??___ftadd
 13585  04AF  0847               	movf	??___ftadd,w
 13586  04B0  07CD               	addwf	___ftadd@exp1,f
 13587  04B1                     l5542:	
 13588  04B1  084D               	movf	___ftadd@exp1,w
 13589  04B2  064C               	xorwf	___ftadd@exp2,w
 13590  04B3  1903               	btfsc	3,2
 13591  04B4  2CDB               	goto	l2755
 13592  04B5  2CA7               	goto	l5540
 13593  04B6                     l5544:	
 13594  04B6  084D               	movf	___ftadd@exp1,w
 13595  04B7  024C               	subwf	___ftadd@exp2,w
 13596  04B8  1803               	skipnc
 13597  04B9  2CDB               	goto	l2755
 13598  04BA                     l5546:	
 13599  04BA  3001               	movlw	1
 13600  04BB                     u4255:	
 13601  04BB  35C1               	lslf	___ftadd@f1,f
 13602  04BC  0DC2               	rlf	___ftadd@f1+1,f
 13603  04BD  0DC3               	rlf	___ftadd@f1+2,f
 13604  04BE  0B89               	decfsz	9,f
 13605  04BF  2CBB               	goto	u4255
 13606  04C0  3001               	movlw	1
 13607  04C1  02CD               	subwf	___ftadd@exp1,f
 13608  04C2  084C               	movf	___ftadd@exp2,w
 13609  04C3  064D               	xorwf	___ftadd@exp1,w
 13610  04C4  1903               	skipnz
 13611  04C5  2CD7               	goto	l5554
 13612  04C6  3001               	movlw	1
 13613  04C7  02CB               	subwf	___ftadd@sign,f
 13614  04C8  084B               	movf	___ftadd@sign,w
 13615  04C9  3907               	andlw	7
 13616  04CA  1903               	btfsc	3,2
 13617  04CB  2CD7               	goto	l5554
 13618  04CC  2CBA               	goto	l5546
 13619  04CD                     l5552:	
 13620  04CD  3001               	movlw	1
 13621  04CE                     u4285:	
 13622  04CE  36C6               	lsrf	___ftadd@f2+2,f
 13623  04CF  0CC5               	rrf	___ftadd@f2+1,f
 13624  04D0  0CC4               	rrf	___ftadd@f2,f
 13625  04D1  0B89               	decfsz	9,f
 13626  04D2  2CCE               	goto	u4285
 13627  04D3  3001               	movlw	1
 13628  04D4  00C7               	movwf	??___ftadd
 13629  04D5  0847               	movf	??___ftadd,w
 13630  04D6  07CC               	addwf	___ftadd@exp2,f
 13631  04D7                     l5554:	
 13632  04D7  084D               	movf	___ftadd@exp1,w
 13633  04D8  064C               	xorwf	___ftadd@exp2,w
 13634  04D9  1D03               	skipz
 13635  04DA  2CCD               	goto	l5552
 13636  04DB                     l2755:	
 13637  04DB  1FCB               	btfss	___ftadd@sign,7
 13638  04DC  2CED               	goto	l5558
 13639  04DD  30FF               	movlw	255
 13640  04DE  06C1               	xorwf	___ftadd@f1,f
 13641  04DF  30FF               	movlw	255
 13642  04E0  06C2               	xorwf	___ftadd@f1+1,f
 13643  04E1  30FF               	movlw	255
 13644  04E2  06C3               	xorwf	___ftadd@f1+2,f
 13645  04E3  3001               	movlw	1
 13646  04E4  07C1               	addwf	___ftadd@f1,f
 13647  04E5  3000               	movlw	0
 13648  04E6  1803               	skipnc
 13649  04E7  3001               	movlw	1
 13650  04E8  07C2               	addwf	___ftadd@f1+1,f
 13651  04E9  3000               	movlw	0
 13652  04EA  1803               	skipnc
 13653  04EB  3001               	movlw	1
 13654  04EC  07C3               	addwf	___ftadd@f1+2,f
 13655  04ED                     l5558:	
 13656  04ED  1F4B               	btfss	___ftadd@sign,6
 13657  04EE  2CFF               	goto	l5562
 13658  04EF  30FF               	movlw	255
 13659  04F0  06C4               	xorwf	___ftadd@f2,f
 13660  04F1  30FF               	movlw	255
 13661  04F2  06C5               	xorwf	___ftadd@f2+1,f
 13662  04F3  30FF               	movlw	255
 13663  04F4  06C6               	xorwf	___ftadd@f2+2,f
 13664  04F5  3001               	movlw	1
 13665  04F6  07C4               	addwf	___ftadd@f2,f
 13666  04F7  3000               	movlw	0
 13667  04F8  1803               	skipnc
 13668  04F9  3001               	movlw	1
 13669  04FA  07C5               	addwf	___ftadd@f2+1,f
 13670  04FB  3000               	movlw	0
 13671  04FC  1803               	skipnc
 13672  04FD  3001               	movlw	1
 13673  04FE  07C6               	addwf	___ftadd@f2+2,f
 13674  04FF                     l5562:	
 13675  04FF  01CB               	clrf	___ftadd@sign
 13676  0500  0841               	movf	___ftadd@f1,w
 13677  0501  07C4               	addwf	___ftadd@f2,f
 13678  0502  0842               	movf	___ftadd@f1+1,w
 13679  0503  3DC5               	addwfc	___ftadd@f2+1,f
 13680  0504  0843               	movf	___ftadd@f1+2,w
 13681  0505  3DC6               	addwfc	___ftadd@f2+2,f
 13682  0506  1FC6               	btfss	___ftadd@f2+2,7
 13683  0507  2D1A               	goto	l5572
 13684  0508  30FF               	movlw	255
 13685  0509  06C4               	xorwf	___ftadd@f2,f
 13686  050A  30FF               	movlw	255
 13687  050B  06C5               	xorwf	___ftadd@f2+1,f
 13688  050C  30FF               	movlw	255
 13689  050D  06C6               	xorwf	___ftadd@f2+2,f
 13690  050E  3001               	movlw	1
 13691  050F  07C4               	addwf	___ftadd@f2,f
 13692  0510  3000               	movlw	0
 13693  0511  1803               	skipnc
 13694  0512  3001               	movlw	1
 13695  0513  07C5               	addwf	___ftadd@f2+1,f
 13696  0514  3000               	movlw	0
 13697  0515  1803               	skipnc
 13698  0516  3001               	movlw	1
 13699  0517  07C6               	addwf	___ftadd@f2+2,f
 13700  0518  01CB               	clrf	___ftadd@sign
 13701  0519  0ACB               	incf	___ftadd@sign,f
 13702  051A                     l5572:	
 13703  051A  0844               	movf	___ftadd@f2,w
 13704  051B  00A0               	movwf	___ftpack@arg
 13705  051C  0845               	movf	___ftadd@f2+1,w
 13706  051D  00A1               	movwf	___ftpack@arg+1
 13707  051E  0846               	movf	___ftadd@f2+2,w
 13708  051F  00A2               	movwf	___ftpack@arg+2
 13709  0520  084D               	movf	___ftadd@exp1,w
 13710  0521  00C7               	movwf	??___ftadd
 13711  0522  0847               	movf	??___ftadd,w
 13712  0523  00A3               	movwf	___ftpack@exp
 13713  0524  084B               	movf	___ftadd@sign,w
 13714  0525  00C8               	movwf	??___ftadd+1
 13715  0526  0848               	movf	??___ftadd+1,w
 13716  0527  00A4               	movwf	___ftpack@sign
 13717  0528  318A  2251         	fcall	___ftpack
 13718  052A  0020               	movlb	0	; select bank0
 13719  052B  0820               	movf	?___ftpack,w
 13720  052C  00C1               	movwf	?___ftadd
 13721  052D  0821               	movf	?___ftpack+1,w
 13722  052E  00C2               	movwf	?___ftadd+1
 13723  052F  0822               	movf	?___ftpack+2,w
 13724  0530  00C3               	movwf	?___ftadd+2
 13725  0531  0008               	return
 13726  0532                     __end_of___ftadd:	
 13727                           
 13728                           	psect	text80
 13729  111C                     __ptext80:	
 13730 ;; *************** function ___awtoft *****************
 13731 ;; Defined at:
 13732 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  c               2    8[BANK0 ] int 
 13735 ;; Auto vars:     Size  Location     Type
 13736 ;;  sign            1   13[BANK0 ] unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;                  3    8[BANK0 ] float 
 13739 ;; Registers used:
 13740 ;;		wreg, status,2, status,0, pclath, cstack
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13746 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;Total ram usage:        6 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; Hardware stack levels required when called:    6
 13753 ;; This function calls:
 13754 ;;		___ftpack
 13755 ;; This function is called by:
 13756 ;;		_getPercentValue
 13757 ;;		_setPercentValue
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           
 13762                           ;psect for function ___awtoft
 13763  111C                     ___awtoft:	
 13764                           
 13765                           ;incstack = 0
 13766                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13767  111C  0020               	movlb	0	; select bank0
 13768  111D  01AD               	clrf	___awtoft@sign
 13769  111E  1FA9               	btfss	___awtoft@c+1,7
 13770  111F  2927               	goto	l5500
 13771  1120  09A8               	comf	___awtoft@c,f
 13772  1121  09A9               	comf	___awtoft@c+1,f
 13773  1122  0AA8               	incf	___awtoft@c,f
 13774  1123  1903               	skipnz
 13775  1124  0AA9               	incf	___awtoft@c+1,f
 13776  1125  01AD               	clrf	___awtoft@sign
 13777  1126  0AAD               	incf	___awtoft@sign,f
 13778  1127                     l5500:	
 13779  1127  0828               	movf	___awtoft@c,w
 13780  1128  00A0               	movwf	___ftpack@arg
 13781  1129  0829               	movf	___awtoft@c+1,w
 13782  112A  00A1               	movwf	___ftpack@arg+1
 13783  112B  01A2               	clrf	___ftpack@arg+2
 13784  112C  308E               	movlw	142
 13785  112D  00AB               	movwf	??___awtoft
 13786  112E  082B               	movf	??___awtoft,w
 13787  112F  00A3               	movwf	___ftpack@exp
 13788  1130  082D               	movf	___awtoft@sign,w
 13789  1131  00AC               	movwf	??___awtoft+1
 13790  1132  082C               	movf	??___awtoft+1,w
 13791  1133  00A4               	movwf	___ftpack@sign
 13792  1134  318A  2251         	fcall	___ftpack
 13793  1136  0020               	movlb	0	; select bank0
 13794  1137  0820               	movf	?___ftpack,w
 13795  1138  00A8               	movwf	?___awtoft
 13796  1139  0821               	movf	?___ftpack+1,w
 13797  113A  00A9               	movwf	?___awtoft+1
 13798  113B  0822               	movf	?___ftpack+2,w
 13799  113C  00AA               	movwf	?___awtoft+2
 13800  113D  0008               	return
 13801  113E                     __end_of___awtoft:	
 13802                           
 13803                           	psect	text81
 13804  0A51                     __ptext81:	
 13805 ;; *************** function ___ftpack *****************
 13806 ;; Defined at:
 13807 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13808 ;; Parameters:    Size  Location     Type
 13809 ;;  arg             3    0[BANK0 ] unsigned um
 13810 ;;  exp             1    3[BANK0 ] unsigned char 
 13811 ;;  sign            1    4[BANK0 ] unsigned char 
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;		None
 13814 ;; Return value:  Size  Location     Type
 13815 ;;                  3    0[BANK0 ] float 
 13816 ;; Registers used:
 13817 ;;		wreg, status,2, status,0
 13818 ;; Tracked objects:
 13819 ;;		On entry : 0/0
 13820 ;;		On exit  : 0/0
 13821 ;;		Unchanged: 0/0
 13822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13823 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;Total ram usage:        8 bytes
 13828 ;; Hardware stack levels used:    1
 13829 ;; Hardware stack levels required when called:    5
 13830 ;; This function calls:
 13831 ;;		Nothing
 13832 ;; This function is called by:
 13833 ;;		___awtoft
 13834 ;;		___ftadd
 13835 ;;		___ftdiv
 13836 ;;		___ftmul
 13837 ;; This function uses a non-reentrant model
 13838 ;;
 13839                           
 13840                           
 13841                           ;psect for function ___ftpack
 13842  0A51                     ___ftpack:	
 13843                           
 13844                           ;incstack = 0
 13845                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13846  0A51  0020               	movlb	0	; select bank0
 13847  0A52  0823               	movf	___ftpack@exp,w
 13848  0A53  1903               	btfsc	3,2
 13849  0A54  2A5A               	goto	l5450
 13850  0A55  0822               	movf	___ftpack@arg+2,w
 13851  0A56  0421               	iorwf	___ftpack@arg+1,w
 13852  0A57  0420               	iorwf	___ftpack@arg,w
 13853  0A58  1D03               	skipz
 13854  0A59  2A6B               	goto	l5456
 13855  0A5A                     l5450:	
 13856  0A5A  3000               	movlw	0
 13857  0A5B  00A0               	movwf	?___ftpack
 13858  0A5C  3000               	movlw	0
 13859  0A5D  00A1               	movwf	?___ftpack+1
 13860  0A5E  3000               	movlw	0
 13861  0A5F  00A2               	movwf	?___ftpack+2
 13862  0A60  0008               	return
 13863  0A61                     l5454:	
 13864  0A61  3001               	movlw	1
 13865  0A62  00A5               	movwf	??___ftpack
 13866  0A63  0825               	movf	??___ftpack,w
 13867  0A64  07A3               	addwf	___ftpack@exp,f
 13868  0A65  3001               	movlw	1
 13869  0A66                     u3985:	
 13870  0A66  36A2               	lsrf	___ftpack@arg+2,f
 13871  0A67  0CA1               	rrf	___ftpack@arg+1,f
 13872  0A68  0CA0               	rrf	___ftpack@arg,f
 13873  0A69  0B89               	decfsz	9,f
 13874  0A6A  2A66               	goto	u3985
 13875  0A6B                     l5456:	
 13876  0A6B  30FE               	movlw	254
 13877  0A6C  0522               	andwf	___ftpack@arg+2,w
 13878  0A6D  1903               	btfsc	3,2
 13879  0A6E  2A84               	goto	l2726
 13880  0A6F  2A61               	goto	l5454
 13881  0A70                     l5458:	
 13882  0A70  3001               	movlw	1
 13883  0A71  00A5               	movwf	??___ftpack
 13884  0A72  0825               	movf	??___ftpack,w
 13885  0A73  07A3               	addwf	___ftpack@exp,f
 13886  0A74  3001               	movlw	1
 13887  0A75  07A0               	addwf	___ftpack@arg,f
 13888  0A76  3000               	movlw	0
 13889  0A77  1803               	skipnc
 13890  0A78  3001               	movlw	1
 13891  0A79  07A1               	addwf	___ftpack@arg+1,f
 13892  0A7A  3000               	movlw	0
 13893  0A7B  1803               	skipnc
 13894  0A7C  3001               	movlw	1
 13895  0A7D  07A2               	addwf	___ftpack@arg+2,f
 13896  0A7E  3001               	movlw	1
 13897  0A7F                     u4005:	
 13898  0A7F  36A2               	lsrf	___ftpack@arg+2,f
 13899  0A80  0CA1               	rrf	___ftpack@arg+1,f
 13900  0A81  0CA0               	rrf	___ftpack@arg,f
 13901  0A82  0B89               	decfsz	9,f
 13902  0A83  2A7F               	goto	u4005
 13903  0A84                     l2726:	
 13904  0A84  30FF               	movlw	255
 13905  0A85  0522               	andwf	___ftpack@arg+2,w
 13906  0A86  1903               	btfsc	3,2
 13907  0A87  2A91               	goto	l5466
 13908  0A88  2A70               	goto	l5458
 13909  0A89                     l5464:	
 13910  0A89  3001               	movlw	1
 13911  0A8A  02A3               	subwf	___ftpack@exp,f
 13912  0A8B  3001               	movlw	1
 13913  0A8C                     u4025:	
 13914  0A8C  35A0               	lslf	___ftpack@arg,f
 13915  0A8D  0DA1               	rlf	___ftpack@arg+1,f
 13916  0A8E  0DA2               	rlf	___ftpack@arg+2,f
 13917  0A8F  0B89               	decfsz	9,f
 13918  0A90  2A8C               	goto	u4025
 13919  0A91                     l5466:	
 13920  0A91  1FA1               	btfss	___ftpack@arg+1,7
 13921  0A92  2A89               	goto	l5464
 13922  0A93  1823               	btfsc	___ftpack@exp,0
 13923  0A94  2A9B               	goto	l2732
 13924  0A95  30FF               	movlw	255
 13925  0A96  05A0               	andwf	___ftpack@arg,f
 13926  0A97  307F               	movlw	127
 13927  0A98  05A1               	andwf	___ftpack@arg+1,f
 13928  0A99  30FF               	movlw	255
 13929  0A9A  05A2               	andwf	___ftpack@arg+2,f
 13930  0A9B                     l2732:	
 13931  0A9B  1003               	clrc
 13932  0A9C  0CA3               	rrf	___ftpack@exp,f
 13933  0A9D  0823               	movf	___ftpack@exp,w
 13934  0A9E  00A5               	movwf	??___ftpack
 13935  0A9F  01A6               	clrf	??___ftpack+1
 13936  0AA0  01A7               	clrf	??___ftpack+2
 13937  0AA1  3010               	movlw	16
 13938  0AA2                     u4055:	
 13939  0AA2  35A5               	lslf	??___ftpack,f
 13940  0AA3  0DA6               	rlf	??___ftpack+1,f
 13941  0AA4  0DA7               	rlf	??___ftpack+2,f
 13942  0AA5  0B89               	decfsz	9,f
 13943  0AA6  2AA2               	goto	u4055
 13944  0AA7  0825               	movf	??___ftpack,w
 13945  0AA8  04A0               	iorwf	___ftpack@arg,f
 13946  0AA9  0826               	movf	??___ftpack+1,w
 13947  0AAA  04A1               	iorwf	___ftpack@arg+1,f
 13948  0AAB  0827               	movf	??___ftpack+2,w
 13949  0AAC  04A2               	iorwf	___ftpack@arg+2,f
 13950  0AAD  0824               	movf	___ftpack@sign,w
 13951  0AAE  1903               	btfsc	3,2
 13952  0AAF  0008               	return
 13953  0AB0  17A2               	bsf	___ftpack@arg+2,7
 13954  0AB1  0008               	return
 13955  0AB2                     __end_of___ftpack:	
 13956                           
 13957                           	psect	text82
 13958  1357                     __ptext82:	
 13959 ;; *************** function _setLED *****************
 13960 ;; Defined at:
 13961 ;;		line 76 in file "../src/LED_B1.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  led             1    wreg     unsigned char 
 13964 ;;  command         1    2[BANK0 ] unsigned char 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  led             1    3[BANK0 ] unsigned char 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;		None               void
 13969 ;; Registers used:
 13970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13976 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;Total ram usage:        2 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; Hardware stack levels required when called:    6
 13983 ;; This function calls:
 13984 ;;		_LedPointSelect
 13985 ;; This function is called by:
 13986 ;;		_setDimmerLights
 13987 ;;		_setLED_Initialization
 13988 ;;		_setMain_Exception
 13989 ;;		_setSw_Initialization
 13990 ;; This function uses a non-reentrant model
 13991 ;;
 13992                           
 13993                           
 13994                           ;psect for function _setLED
 13995  1357                     _setLED:	
 13996                           
 13997                           ;incstack = 0
 13998                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13999                           ;setLED@led stored from wreg
 14000  1357  0020               	movlb	0	; select bank0
 14001  1358  00A3               	movwf	setLED@led
 14002                           
 14003                           ;LED_B1.c: 77: LedPointSelect(led);
 14004  1359  0823               	movf	setLED@led,w
 14005  135A  319D  2563  3193   	fcall	_LedPointSelect
 14006                           
 14007                           ;LED_B1.c: 78: if (command == 0) {
 14008  135D  0020               	movlb	0	; select bank0
 14009  135E  08A2               	movf	setLED@command,f
 14010  135F  1D03               	skipz
 14011  1360  2B66               	goto	l6150
 14012                           
 14013                           ;LED_B1.c: 107: if (led == 99) {
 14014  1361  0823               	movf	setLED@led,w
 14015  1362  3A63               	xorlw	99
 14016  1363  1D03               	skipz
 14017  1364  2B66               	goto	l6150
 14018                           
 14019                           ;LED_B1.c: 111: RB5 = 1;
 14020  1365  168D               	bsf	13,5	;volatile
 14021  1366                     l6150:	
 14022                           
 14023                           ;LED_B1.c: 113: }
 14024                           ;LED_B1.c: 115: }
 14025                           ;LED_B1.c: 116: if (command == 1) {
 14026  1366  0822               	movf	setLED@command,w
 14027  1367  3A01               	xorlw	1
 14028  1368  1D03               	skipz
 14029  1369  2B6F               	goto	l6156
 14030                           
 14031                           ;LED_B1.c: 145: if (led == 99) {
 14032  136A  0823               	movf	setLED@led,w
 14033  136B  3A63               	xorlw	99
 14034  136C  1D03               	skipz
 14035  136D  2B6F               	goto	l6156
 14036                           
 14037                           ;LED_B1.c: 149: RB5 = 0;
 14038  136E  128D               	bcf	13,5	;volatile
 14039  136F                     l6156:	
 14040                           
 14041                           ;LED_B1.c: 151: }
 14042                           ;LED_B1.c: 153: }
 14043                           ;LED_B1.c: 154: if (command == 10) {
 14044  136F  0822               	movf	setLED@command,w
 14045  1370  3A0A               	xorlw	10
 14046  1371  1D03               	skipz
 14047  1372  2B83               	goto	l6164
 14048                           
 14049                           ;LED_B1.c: 155: LED->GO = 0;
 14050  1373  087A               	movf	_LED,w
 14051  1374  0086               	movwf	6
 14052  1375  3001               	movlw	1	; select bank2/3
 14053  1376  0087               	movwf	7
 14054  1377  1081               	bcf	1,1
 14055                           
 14056                           ;LED_B1.c: 156: LED->Time = 0;
 14057  1378  0A7A               	incf	_LED,w
 14058  1379  0086               	movwf	6
 14059  137A  3001               	movlw	1	; select bank2/3
 14060  137B  0087               	movwf	7
 14061  137C  3000               	movlw	0
 14062  137D  3FC0               	movwi [0]fsr1
 14063  137E  3FC1               	movwi [1]fsr1
 14064                           
 14065                           ;LED_B1.c: 185: if (led == 99) {
 14066  137F  0823               	movf	setLED@led,w
 14067  1380  3A63               	xorlw	99
 14068  1381  1903               	btfsc	3,2
 14069                           
 14070                           ;LED_B1.c: 189: RB5 = 1;
 14071  1382  168D               	bsf	13,5	;volatile
 14072  1383                     l6164:	
 14073                           
 14074                           ;LED_B1.c: 191: }
 14075                           ;LED_B1.c: 193: }
 14076                           ;LED_B1.c: 194: if (command == 11) {
 14077  1383  0822               	movf	setLED@command,w
 14078  1384  3A0B               	xorlw	11
 14079  1385  1D03               	skipz
 14080  1386  0008               	return
 14081                           
 14082                           ;LED_B1.c: 195: LED->GO = 1;
 14083  1387  087A               	movf	_LED,w
 14084  1388  0086               	movwf	6
 14085  1389  3001               	movlw	1	; select bank2/3
 14086  138A  0087               	movwf	7
 14087  138B  1481               	bsf	1,1
 14088  138C  0008               	return
 14089  138D                     __end_of_setLED:	
 14090                           
 14091                           	psect	text83
 14092  1D63                     __ptext83:	
 14093 ;; *************** function _LedPointSelect *****************
 14094 ;; Defined at:
 14095 ;;		line 7 in file "../src/LED_B1.c"
 14096 ;; Parameters:    Size  Location     Type
 14097 ;;  led             1    wreg     unsigned char 
 14098 ;; Auto vars:     Size  Location     Type
 14099 ;;  led             1    1[BANK0 ] unsigned char 
 14100 ;; Return value:  Size  Location     Type
 14101 ;;		None               void
 14102 ;; Registers used:
 14103 ;;		wreg
 14104 ;; Tracked objects:
 14105 ;;		On entry : 0/0
 14106 ;;		On exit  : 0/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;Total ram usage:        2 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    5
 14116 ;; This function calls:
 14117 ;;		Nothing
 14118 ;; This function is called by:
 14119 ;;		_setLED_Initialization
 14120 ;;		_setLED
 14121 ;;		_setLED_Main
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           
 14126                           ;psect for function _LedPointSelect
 14127  1D63                     _LedPointSelect:	
 14128                           
 14129                           ;incstack = 0
 14130                           ; Regs used in _LedPointSelect: [wreg]
 14131                           ;LedPointSelect@led stored from wreg
 14132  1D63  0020               	movlb	0	; select bank0
 14133  1D64  00A1               	movwf	LedPointSelect@led
 14134                           
 14135                           ;LED_B1.c: 24: if (led == 99) {
 14136  1D65  0821               	movf	LedPointSelect@led,w
 14137  1D66  3A63               	xorlw	99
 14138  1D67  1D03               	skipz
 14139  1D68  0008               	return
 14140                           
 14141                           ;LED_B1.c: 25: LED = &VarErrLED;
 14142  1D69  30E2               	movlw	_VarErrLED& (0+255)
 14143  1D6A  00A0               	movwf	??_LedPointSelect
 14144  1D6B  0820               	movf	??_LedPointSelect,w
 14145  1D6C  00FA               	movwf	_LED
 14146  1D6D  0008               	return
 14147  1D6E                     __end_of_LedPointSelect:	
 14148                           
 14149                           	psect	text84
 14150  1DA6                     __ptext84:	
 14151 ;; *************** function _setDimmerLights_Line *****************
 14152 ;; Defined at:
 14153 ;;		line 667 in file "../src/Dimmer_B1.c"
 14154 ;; Parameters:    Size  Location     Type
 14155 ;;  lights          1    wreg     unsigned char 
 14156 ;; Auto vars:     Size  Location     Type
 14157 ;;  lights          1    0[BANK0 ] unsigned char 
 14158 ;; Return value:  Size  Location     Type
 14159 ;;		None               void
 14160 ;; Registers used:
 14161 ;;		wreg
 14162 ;; Tracked objects:
 14163 ;;		On entry : 0/0
 14164 ;;		On exit  : 0/0
 14165 ;;		Unchanged: 0/0
 14166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;Total ram usage:        1 bytes
 14172 ;; Hardware stack levels used:    1
 14173 ;; Hardware stack levels required when called:    5
 14174 ;; This function calls:
 14175 ;;		Nothing
 14176 ;; This function is called by:
 14177 ;;		_setDimmerLights
 14178 ;; This function uses a non-reentrant model
 14179 ;;
 14180                           
 14181                           
 14182                           ;psect for function _setDimmerLights_Line
 14183  1DA6                     _setDimmerLights_Line:	
 14184                           
 14185                           ;incstack = 0
 14186                           ; Regs used in _setDimmerLights_Line: [wreg]
 14187                           ;setDimmerLights_Line@lights stored from wreg
 14188  1DA6  0020               	movlb	0	; select bank0
 14189  1DA7  00A0               	movwf	setDimmerLights_Line@lights
 14190                           
 14191                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14192  1DA8  0023               	movlb	3	; select bank3
 14193  1DA9  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14194                           
 14195                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14196  1DAA  0020               	movlb	0	; select bank0
 14197  1DAB  0820               	movf	setDimmerLights_Line@lights,w
 14198  1DAC  3A01               	xorlw	1
 14199  1DAD  1D03               	skipz
 14200  1DAE  0008               	return
 14201                           
 14202                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14203  1DAF  0023               	movlb	3	; select bank3
 14204  1DB0  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14205  1DB1  0008               	return
 14206  1DB2                     __end_of_setDimmerLights_Line:	
 14207                           
 14208                           	psect	text85
 14209  12BC                     __ptext85:	
 14210 ;; *************** function _getMain_All_Error_Status *****************
 14211 ;; Defined at:
 14212 ;;		line 369 in file "../src/Main_B1.c"
 14213 ;; Parameters:    Size  Location     Type
 14214 ;;  command         1    wreg     unsigned char 
 14215 ;; Auto vars:     Size  Location     Type
 14216 ;;  command         1    5[BANK0 ] unsigned char 
 14217 ;;  status          1    6[BANK0 ] unsigned char 
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  1    wreg      unsigned char 
 14220 ;; Registers used:
 14221 ;;		wreg, status,2, status,0
 14222 ;; Tracked objects:
 14223 ;;		On entry : 0/0
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;Total ram usage:        7 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:    5
 14234 ;; This function calls:
 14235 ;;		Nothing
 14236 ;; This function is called by:
 14237 ;;		_DimmerLights_Main
 14238 ;;		_setDimmerLights
 14239 ;;		_setDimmerLights_Adj
 14240 ;;		_Load_Main
 14241 ;;		_setTemp_Main
 14242 ;;		_setRF_Main
 14243 ;;		_getRxData
 14244 ;;		_Switch_Main
 14245 ;; This function uses a non-reentrant model
 14246 ;;
 14247                           
 14248                           
 14249                           ;psect for function _getMain_All_Error_Status
 14250  12BC                     _getMain_All_Error_Status:	
 14251                           
 14252                           ;incstack = 0
 14253                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14254                           ;getMain_All_Error_Status@command stored from wreg
 14255  12BC  0020               	movlb	0	; select bank0
 14256  12BD  00A5               	movwf	getMain_All_Error_Status@command
 14257                           
 14258                           ;Main_B1.c: 370: char status = 0;
 14259  12BE  01A6               	clrf	getMain_All_Error_Status@status
 14260                           
 14261                           ;Main_B1.c: 381: if (status == 0 && command != 2) {
 14262  12BF  08A6               	movf	getMain_All_Error_Status@status,f
 14263  12C0  1D03               	skipz
 14264  12C1  2AD6               	goto	l6130
 14265  12C2  0825               	movf	getMain_All_Error_Status@command,w
 14266  12C3  3A02               	xorlw	2
 14267  12C4  1903               	skipnz
 14268  12C5  2AD6               	goto	l6130
 14269                           
 14270                           ;Main_B1.c: 382: status = Temp.ERROR == 1 ? 2 : 0;
 14271  12C6  0021               	movlb	1	; select bank1
 14272  12C7  18D6               	btfsc	_Temp^(0+128),1
 14273  12C8  2ACD               	goto	l6128
 14274  12C9  0020               	movlb	0	; select bank0
 14275  12CA  01A1               	clrf	_getMain_All_Error_Status$3748
 14276  12CB  01A2               	clrf	_getMain_All_Error_Status$3748+1
 14277  12CC  2AD2               	goto	l1426
 14278  12CD                     l6128:	
 14279  12CD  3002               	movlw	2
 14280  12CE  0020               	movlb	0	; select bank0
 14281  12CF  00A1               	movwf	_getMain_All_Error_Status$3748
 14282  12D0  3000               	movlw	0
 14283  12D1  00A2               	movwf	_getMain_All_Error_Status$3748+1
 14284  12D2                     l1426:	
 14285  12D2  0821               	movf	_getMain_All_Error_Status$3748,w
 14286  12D3  00A0               	movwf	??_getMain_All_Error_Status
 14287  12D4  0820               	movf	??_getMain_All_Error_Status,w
 14288  12D5  00A6               	movwf	getMain_All_Error_Status@status
 14289  12D6                     l6130:	
 14290                           
 14291                           ;Main_B1.c: 383: }
 14292                           ;Main_B1.c: 388: if (status == 0 && command != 3) {
 14293  12D6  08A6               	movf	getMain_All_Error_Status@status,f
 14294  12D7  1D03               	skipz
 14295  12D8  2AED               	goto	l1427
 14296  12D9  0825               	movf	getMain_All_Error_Status@command,w
 14297  12DA  3A03               	xorlw	3
 14298  12DB  1903               	skipnz
 14299  12DC  2AED               	goto	l1427
 14300                           
 14301                           ;Main_B1.c: 389: status = Load.ERROR == 1 ? 3 : 0;
 14302  12DD  0022               	movlb	2	; select bank2
 14303  12DE  1AC3               	btfsc	_Load^(0+256),5
 14304  12DF  2AE4               	goto	l6138
 14305  12E0  0020               	movlb	0	; select bank0
 14306  12E1  01A3               	clrf	_getMain_All_Error_Status$3757
 14307  12E2  01A4               	clrf	_getMain_All_Error_Status$3757+1
 14308  12E3  2AE9               	goto	l1431
 14309  12E4                     l6138:	
 14310  12E4  3003               	movlw	3
 14311  12E5  0020               	movlb	0	; select bank0
 14312  12E6  00A3               	movwf	_getMain_All_Error_Status$3757
 14313  12E7  3000               	movlw	0
 14314  12E8  00A4               	movwf	_getMain_All_Error_Status$3757+1
 14315  12E9                     l1431:	
 14316  12E9  0823               	movf	_getMain_All_Error_Status$3757,w
 14317  12EA  00A0               	movwf	??_getMain_All_Error_Status
 14318  12EB  0820               	movf	??_getMain_All_Error_Status,w
 14319  12EC  00A6               	movwf	getMain_All_Error_Status@status
 14320  12ED                     l1427:	
 14321                           
 14322                           ;Main_B1.c: 390: }
 14323                           ;Main_B1.c: 406: return status;
 14324  12ED  0826               	movf	getMain_All_Error_Status@status,w
 14325  12EE  0008               	return
 14326  12EF                     __end_of_getMain_All_Error_Status:	
 14327                           
 14328                           	psect	text86
 14329  1200                     __ptext86:	
 14330 ;; *************** function _getMain_LightsStatus *****************
 14331 ;; Defined at:
 14332 ;;		line 342 in file "../src/Main_B1.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;		None
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  i               2    6[BANK0 ] int 
 14337 ;;  status          1    8[BANK0 ] unsigned char 
 14338 ;;  count           1    5[BANK0 ] unsigned char 
 14339 ;; Return value:  Size  Location     Type
 14340 ;;                  1    wreg      unsigned char 
 14341 ;; Registers used:
 14342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : 0/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;Total ram usage:        5 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:    7
 14355 ;; This function calls:
 14356 ;;		_getDimmerLights_Status
 14357 ;; This function is called by:
 14358 ;;		_DimmerLights_Main
 14359 ;;		_Flash_Memory_Main
 14360 ;;		_setMain_Exception
 14361 ;;		_Load_Main
 14362 ;; This function uses a non-reentrant model
 14363 ;;
 14364                           
 14365                           
 14366                           ;psect for function _getMain_LightsStatus
 14367  1200                     _getMain_LightsStatus:	
 14368                           
 14369                           ;Main_B1.c: 343: char status = 0, count = 0;
 14370                           
 14371                           ;incstack = 0
 14372                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14373  1200  0020               	movlb	0	; select bank0
 14374  1201  01A8               	clrf	getMain_LightsStatus@status
 14375  1202  01A5               	clrf	getMain_LightsStatus@count
 14376                           
 14377                           ;Main_B1.c: 346: count = 1;
 14378  1203  01A5               	clrf	getMain_LightsStatus@count
 14379  1204  0AA5               	incf	getMain_LightsStatus@count,f
 14380                           
 14381                           ;Main_B1.c: 355: for (int i = 0; i < count; i++) {
 14382  1205  01A6               	clrf	getMain_LightsStatus@i
 14383  1206  01A7               	clrf	getMain_LightsStatus@i+1
 14384  1207                     l6344:	
 14385  1207  0827               	movf	getMain_LightsStatus@i+1,w
 14386  1208  3A80               	xorlw	128
 14387  1209  00A4               	movwf	??_getMain_LightsStatus
 14388  120A  3080               	movlw	128
 14389  120B  0224               	subwf	??_getMain_LightsStatus,w
 14390  120C  1D03               	skipz
 14391  120D  2A10               	goto	u5485
 14392  120E  0825               	movf	getMain_LightsStatus@count,w
 14393  120F  0226               	subwf	getMain_LightsStatus@i,w
 14394  1210                     u5485:	
 14395  1210  1803               	btfsc	3,0
 14396  1211  2A28               	goto	l6346
 14397                           
 14398                           ;Main_B1.c: 356: if (status == 0) {
 14399  1212  0020               	movlb	0	; select bank0
 14400  1213  08A8               	movf	getMain_LightsStatus@status,f
 14401  1214  1D03               	skipz
 14402  1215  2A23               	goto	l6342
 14403                           
 14404                           ;Main_B1.c: 361: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14405  1216  0826               	movf	getMain_LightsStatus@i,w
 14406  1217  3E01               	addlw	1
 14407  1218  319E  262A  3192   	fcall	_getDimmerLights_Status
 14408  121B  3A01               	xorlw	1
 14409  121C  3000               	movlw	0
 14410  121D  1903               	skipnz
 14411  121E  3001               	movlw	1
 14412  121F  0020               	movlb	0	; select bank0
 14413  1220  00A4               	movwf	??_getMain_LightsStatus
 14414  1221  0824               	movf	??_getMain_LightsStatus,w
 14415  1222  00A8               	movwf	getMain_LightsStatus@status
 14416  1223                     l6342:	
 14417  1223  3001               	movlw	1
 14418  1224  07A6               	addwf	getMain_LightsStatus@i,f
 14419  1225  3000               	movlw	0
 14420  1226  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14421  1227  2A07               	goto	l6344
 14422  1228                     l6346:	
 14423                           
 14424                           ;Main_B1.c: 363: }
 14425                           ;Main_B1.c: 364: }
 14426                           ;Main_B1.c: 365: return status;
 14427  1228  0020               	movlb	0	; select bank0
 14428  1229  0828               	movf	getMain_LightsStatus@status,w
 14429  122A  0008               	return
 14430  122B                     __end_of_getMain_LightsStatus:	
 14431                           
 14432                           	psect	text87
 14433  1D03                     __ptext87:	
 14434 ;; *************** function _getLoad_OK *****************
 14435 ;; Defined at:
 14436 ;;		line 228 in file "../src/OverLoad_B1.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;		None
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;  ok              1    0[BANK0 ] unsigned char 
 14441 ;; Return value:  Size  Location     Type
 14442 ;;                  1    wreg      unsigned char 
 14443 ;; Registers used:
 14444 ;;		wreg, status,2
 14445 ;; Tracked objects:
 14446 ;;		On entry : 0/0
 14447 ;;		On exit  : 0/0
 14448 ;;		Unchanged: 0/0
 14449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;Total ram usage:        1 bytes
 14455 ;; Hardware stack levels used:    1
 14456 ;; Hardware stack levels required when called:    5
 14457 ;; This function calls:
 14458 ;;		Nothing
 14459 ;; This function is called by:
 14460 ;;		_DimmerLights_Main
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           
 14465                           ;psect for function _getLoad_OK
 14466  1D03                     _getLoad_OK:	
 14467                           
 14468                           ;OverLoad_B1.c: 229: char ok = Load.OK == 1 ? 1 : 0;
 14469                           
 14470                           ;incstack = 0
 14471                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14472  1D03  3000               	movlw	0
 14473  1D04  0022               	movlb	2	; select bank2
 14474  1D05  1BC3               	btfsc	_Load^(0+256),7
 14475  1D06  3001               	movlw	1
 14476  1D07  0020               	movlb	0	; select bank0
 14477  1D08  00A0               	movwf	getLoad_OK@ok
 14478                           
 14479                           ;OverLoad_B1.c: 230: return ok;
 14480  1D09  0820               	movf	getLoad_OK@ok,w
 14481  1D0A  0008               	return
 14482  1D0B                     __end_of_getLoad_OK:	
 14483                           
 14484                           	psect	text88
 14485  1DE2                     __ptext88:	
 14486 ;; *************** function _DimmerLights_Initialization *****************
 14487 ;; Defined at:
 14488 ;;		line 329 in file "../src/Dimmer_B1.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;		None
 14491 ;; Auto vars:     Size  Location     Type
 14492 ;;		None
 14493 ;; Return value:  Size  Location     Type
 14494 ;;		None               void
 14495 ;; Registers used:
 14496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14497 ;; Tracked objects:
 14498 ;;		On entry : 0/0
 14499 ;;		On exit  : 0/0
 14500 ;;		Unchanged: 0/0
 14501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;Total ram usage:        1 bytes
 14507 ;; Hardware stack levels used:    1
 14508 ;; Hardware stack levels required when called:    7
 14509 ;; This function calls:
 14510 ;;		_Dimmer_Initialization
 14511 ;;		_setDimmerLights_Initialization
 14512 ;; This function is called by:
 14513 ;;		_main
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           
 14518                           ;psect for function _DimmerLights_Initialization
 14519  1DE2                     _DimmerLights_Initialization:	
 14520                           
 14521                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 14522                           
 14523                           ;incstack = 0
 14524                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14525  1DE2  30C5               	movlw	_DimmerLights1& (0+255)
 14526  1DE3  0020               	movlb	0	; select bank0
 14527  1DE4  00A4               	movwf	??_DimmerLights_Initialization
 14528  1DE5  0824               	movf	??_DimmerLights_Initialization,w
 14529  1DE6  0021               	movlb	1	; select bank1
 14530  1DE7  00CD               	movwf	_DimmerLights11^(0+128)
 14531                           
 14532                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 14533  1DE8  3001               	movlw	1
 14534  1DE9  3191  2185  319D   	fcall	_setDimmerLights_Initialization
 14535                           
 14536                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 14537  1DEC  319C  24B0         	fcall	_Dimmer_Initialization
 14538  1DEE  0008               	return
 14539  1DEF                     __end_of_DimmerLights_Initialization:	
 14540                           
 14541                           	psect	text89
 14542  1185                     __ptext89:	
 14543 ;; *************** function _setDimmerLights_Initialization *****************
 14544 ;; Defined at:
 14545 ;;		line 352 in file "../src/Dimmer_B1.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  lights          1    wreg     unsigned char 
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  lights          1    3[BANK0 ] unsigned char 
 14550 ;; Return value:  Size  Location     Type
 14551 ;;		None               void
 14552 ;; Registers used:
 14553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14554 ;; Tracked objects:
 14555 ;;		On entry : 0/0
 14556 ;;		On exit  : 0/0
 14557 ;;		Unchanged: 0/0
 14558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;Total ram usage:        2 bytes
 14564 ;; Hardware stack levels used:    1
 14565 ;; Hardware stack levels required when called:    6
 14566 ;; This function calls:
 14567 ;;		_DimmerLightsPointSelect
 14568 ;; This function is called by:
 14569 ;;		_DimmerLights_Initialization
 14570 ;; This function uses a non-reentrant model
 14571 ;;
 14572                           
 14573                           
 14574                           ;psect for function _setDimmerLights_Initialization
 14575  1185                     _setDimmerLights_Initialization:	
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14579                           ;setDimmerLights_Initialization@lights stored from wreg
 14580  1185  0020               	movlb	0	; select bank0
 14581  1186  00A3               	movwf	setDimmerLights_Initialization@lights
 14582                           
 14583                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 14584  1187  0823               	movf	setDimmerLights_Initialization@lights,w
 14585  1188  319D  2558         	fcall	_DimmerLightsPointSelect
 14586                           
 14587                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(65*0.8));
 14588  118A  3034               	movlw	52
 14589  118B  0020               	movlb	0	; select bank0
 14590  118C  00A2               	movwf	??_setDimmerLights_Initialization
 14591  118D  086F               	movf	_DimmerLights,w
 14592  118E  3E05               	addlw	5
 14593  118F  0086               	movwf	6
 14594  1190  3001               	movlw	1	; select bank2/3
 14595  1191  0087               	movwf	7
 14596  1192  0822               	movf	??_setDimmerLights_Initialization,w
 14597  1193  0081               	movwf	1
 14598                           
 14599                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 14600  1194  300C               	movlw	12
 14601  1195  00A2               	movwf	??_setDimmerLights_Initialization
 14602  1196  086F               	movf	_DimmerLights,w
 14603  1197  3E06               	addlw	6
 14604  1198  0086               	movwf	6
 14605  1199  3001               	movlw	1	; select bank2/3
 14606  119A  0087               	movwf	7
 14607  119B  0822               	movf	??_setDimmerLights_Initialization,w
 14608  119C  0081               	movwf	1
 14609                           
 14610                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14611  119D  086F               	movf	_DimmerLights,w
 14612  119E  3E05               	addlw	5
 14613  119F  0086               	movwf	6
 14614  11A0  3001               	movlw	1	; select bank2/3
 14615  11A1  0087               	movwf	7
 14616  11A2  0801               	movf	1,w
 14617  11A3  00A2               	movwf	??_setDimmerLights_Initialization
 14618  11A4  086F               	movf	_DimmerLights,w
 14619  11A5  3E04               	addlw	4
 14620  11A6  0086               	movwf	6
 14621  11A7  3001               	movlw	1	; select bank2/3
 14622  11A8  0087               	movwf	7
 14623  11A9  0822               	movf	??_setDimmerLights_Initialization,w
 14624  11AA  0081               	movwf	1
 14625  11AB  0008               	return
 14626  11AC                     __end_of_setDimmerLights_Initialization:	
 14627                           
 14628                           	psect	text90
 14629  1CB0                     __ptext90:	
 14630 ;; *************** function _Dimmer_Initialization *****************
 14631 ;; Defined at:
 14632 ;;		line 892 in file "../src/Dimmer_B1.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;		None
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;		None
 14637 ;; Return value:  Size  Location     Type
 14638 ;;		None               void
 14639 ;; Registers used:
 14640 ;;		None
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;Total ram usage:        0 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    5
 14653 ;; This function calls:
 14654 ;;		Nothing
 14655 ;; This function is called by:
 14656 ;;		_DimmerLights_Initialization
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           
 14661                           ;psect for function _Dimmer_Initialization
 14662  1CB0                     _Dimmer_Initialization:	
 14663                           
 14664                           ;incstack = 0
 14665                           ; Regs used in _Dimmer_Initialization: []
 14666  1CB0  0008               	return
 14667  1CB1                     __end_of_Dimmer_Initialization:	
 14668                           
 14669                           	psect	text91
 14670  1CD5                     __ptext91:	
 14671 ;; *************** function _DelayOff_Main *****************
 14672 ;; Defined at:
 14673 ;;		line 41 in file "../src/DelayOff_B1.c"
 14674 ;; Parameters:    Size  Location     Type
 14675 ;;		None
 14676 ;; Auto vars:     Size  Location     Type
 14677 ;;		None
 14678 ;; Return value:  Size  Location     Type
 14679 ;;		None               void
 14680 ;; Registers used:
 14681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14682 ;; Tracked objects:
 14683 ;;		On entry : 0/0
 14684 ;;		On exit  : 0/0
 14685 ;;		Unchanged: 0/0
 14686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;Total ram usage:        0 bytes
 14692 ;; Hardware stack levels used:    1
 14693 ;; Hardware stack levels required when called:   11
 14694 ;; This function calls:
 14695 ;;		_DlyOff_Main
 14696 ;; This function is called by:
 14697 ;;		_main
 14698 ;; This function uses a non-reentrant model
 14699 ;;
 14700                           
 14701                           
 14702                           ;psect for function _DelayOff_Main
 14703  1CD5                     _DelayOff_Main:	
 14704                           
 14705                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14709  1CD5  3001               	movlw	1
 14710  1CD6  3189  2194         	fcall	_DlyOff_Main
 14711  1CD8  0008               	return
 14712  1CD9                     __end_of_DelayOff_Main:	
 14713                           
 14714                           	psect	text92
 14715  0994                     __ptext92:	
 14716 ;; *************** function _DlyOff_Main *****************
 14717 ;; Defined at:
 14718 ;;		line 61 in file "../src/DelayOff_B1.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  sw              1    wreg     unsigned char 
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  sw              1   24[BANK0 ] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;		None               void
 14725 ;; Registers used:
 14726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14727 ;; Tracked objects:
 14728 ;;		On entry : 0/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;Total ram usage:        3 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:   10
 14739 ;; This function calls:
 14740 ;;		_DelayOffPointSelect
 14741 ;;		_setBuz
 14742 ;;		_setDimmerLights_ErrorClose
 14743 ;; This function is called by:
 14744 ;;		_DelayOff_Main
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           
 14749                           ;psect for function _DlyOff_Main
 14750  0994                     _DlyOff_Main:	
 14751                           
 14752                           ;incstack = 0
 14753                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14754                           ;DlyOff_Main@sw stored from wreg
 14755  0994  0020               	movlb	0	; select bank0
 14756  0995  00B8               	movwf	DlyOff_Main@sw
 14757                           
 14758                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14759  0996  0838               	movf	DlyOff_Main@sw,w
 14760  0997  319D  254D  3189   	fcall	_DelayOffPointSelect
 14761                           
 14762                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14763  099A  0878               	movf	_DelayOff,w
 14764  099B  0086               	movwf	6
 14765  099C  3001               	movlw	1	; select bank2/3
 14766  099D  0087               	movwf	7
 14767  099E  1C81               	btfss	1,1
 14768  099F  0008               	return
 14769                           
 14770                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14771  09A0  0878               	movf	_DelayOff,w
 14772  09A1  3E02               	addlw	2
 14773  09A2  0086               	movwf	6
 14774  09A3  3001               	movlw	1	; select bank2/3
 14775  09A4  0087               	movwf	7
 14776  09A5  3001               	movlw	1
 14777  09A6  0781               	addwf	1,f
 14778  09A7  3141               	addfsr 1,1
 14779  09A8  1803               	skipnc
 14780  09A9  0A81               	incf	1,f
 14781                           
 14782                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 14783  09AA  0878               	movf	_DelayOff,w
 14784  09AB  3E02               	addlw	2
 14785  09AC  0086               	movwf	6
 14786  09AD  3001               	movlw	1	; select bank2/3
 14787  09AE  0087               	movwf	7
 14788  09AF  3F40               	moviw [0]fsr1
 14789  09B0  0020               	movlb	0	; select bank0
 14790  09B1  00B6               	movwf	??_DlyOff_Main
 14791  09B2  3F41               	moviw [1]fsr1
 14792  09B3  00B7               	movwf	??_DlyOff_Main+1
 14793  09B4  3017               	movlw	23
 14794  09B5  0237               	subwf	??_DlyOff_Main+1,w
 14795  09B6  3070               	movlw	112
 14796  09B7  1903               	skipnz
 14797  09B8  0236               	subwf	??_DlyOff_Main,w
 14798  09B9  1C03               	skipc
 14799  09BA  0008               	return
 14800                           
 14801                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14802  09BB  0878               	movf	_DelayOff,w
 14803  09BC  3E02               	addlw	2
 14804  09BD  0086               	movwf	6
 14805  09BE  3001               	movlw	1	; select bank2/3
 14806  09BF  0087               	movwf	7
 14807  09C0  3000               	movlw	0
 14808  09C1  3FC0               	movwi [0]fsr1
 14809  09C2  3FC1               	movwi [1]fsr1
 14810                           
 14811                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14812  09C3  3001               	movlw	1
 14813  09C4  00B6               	movwf	??_DlyOff_Main
 14814  09C5  0878               	movf	_DelayOff,w
 14815  09C6  3E04               	addlw	4
 14816  09C7  0086               	movwf	6
 14817  09C8  3001               	movlw	1	; select bank2/3
 14818  09C9  0087               	movwf	7
 14819  09CA  0836               	movf	??_DlyOff_Main,w
 14820  09CB  0781               	addwf	1,f
 14821                           
 14822                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14823  09CC  0878               	movf	_DelayOff,w
 14824  09CD  3E04               	addlw	4
 14825  09CE  0086               	movwf	6
 14826  09CF  3001               	movlw	1	; select bank2/3
 14827  09D0  0087               	movwf	7
 14828  09D1  0A78               	incf	_DelayOff,w
 14829  09D2  0084               	movwf	4
 14830  09D3  3001               	movlw	1	; select bank2/3
 14831  09D4  0085               	movwf	5
 14832  09D5  0800               	movf	0,w
 14833  09D6  0201               	subwf	1,w
 14834  09D7  1C03               	skipc
 14835  09D8  0008               	return
 14836                           
 14837                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14838  09D9  0878               	movf	_DelayOff,w
 14839  09DA  3E04               	addlw	4
 14840  09DB  0086               	movwf	6
 14841  09DC  3001               	movlw	1	; select bank2/3
 14842  09DD  0087               	movwf	7
 14843  09DE  0181               	clrf	1
 14844                           
 14845                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14846  09DF  0878               	movf	_DelayOff,w
 14847  09E0  0086               	movwf	6
 14848  09E1  3001               	movlw	1	; select bank2/3
 14849  09E2  0087               	movwf	7
 14850  09E3  1081               	bcf	1,1
 14851                           
 14852                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 14853  09E4  3064               	movlw	100
 14854  09E5  00A9               	movwf	setBuz@time
 14855  09E6  3000               	movlw	0
 14856  09E7  00AA               	movwf	setBuz@time+1
 14857  09E8  3001               	movlw	1
 14858  09E9  3197  27A7  3189   	fcall	_setBuz
 14859                           
 14860                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 14861  09EC  0020               	movlb	0	; select bank0
 14862  09ED  0838               	movf	DlyOff_Main@sw,w
 14863  09EE  3196  26F7         	fcall	_setDimmerLights_ErrorClose
 14864  09F0  0008               	return
 14865  09F1                     __end_of_DlyOff_Main:	
 14866                           
 14867                           	psect	text93
 14868  16F7                     __ptext93:	
 14869 ;; *************** function _setDimmerLights_ErrorClose *****************
 14870 ;; Defined at:
 14871 ;;		line 562 in file "../src/Dimmer_B1.c"
 14872 ;; Parameters:    Size  Location     Type
 14873 ;;  lights          1    wreg     unsigned char 
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;  lights          1   19[BANK0 ] unsigned char 
 14876 ;;  i               2   20[BANK0 ] int 
 14877 ;;  count           1   18[BANK0 ] unsigned char 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;		None               void
 14880 ;; Registers used:
 14881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        5 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    9
 14894 ;; This function calls:
 14895 ;;		_DimmerLightsPointSelect
 14896 ;;		_getDimmerLights_Status
 14897 ;;		_setDimmerLights_SwOff
 14898 ;; This function is called by:
 14899 ;;		_DlyOff_Main
 14900 ;;		_setMain_Exception
 14901 ;;		_setControl_Lights_Table
 14902 ;; This function uses a non-reentrant model
 14903 ;;
 14904                           
 14905                           
 14906                           ;psect for function _setDimmerLights_ErrorClose
 14907  16F7                     _setDimmerLights_ErrorClose:	
 14908                           
 14909                           ;incstack = 0
 14910                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14911                           ;setDimmerLights_ErrorClose@lights stored from wreg
 14912  16F7  0020               	movlb	0	; select bank0
 14913  16F8  00B3               	movwf	setDimmerLights_ErrorClose@lights
 14914                           
 14915                           ;Dimmer_B1.c: 563: if (lights == 255) {
 14916  16F9  0833               	movf	setDimmerLights_ErrorClose@lights,w
 14917  16FA  3AFF               	xorlw	255
 14918  16FB  1D03               	skipz
 14919  16FC  2F32               	goto	l6048
 14920                           
 14921                           ;Dimmer_B1.c: 565: char count = 1;
 14922  16FD  01B2               	clrf	setDimmerLights_ErrorClose@count
 14923  16FE  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 14924                           
 14925                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 14926  16FF  01B4               	clrf	setDimmerLights_ErrorClose@i
 14927  1700  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 14928  1701                     l6046:	
 14929  1701  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 14930  1702  3A80               	xorlw	128
 14931  1703  00B1               	movwf	??_setDimmerLights_ErrorClose
 14932  1704  3080               	movlw	128
 14933  1705  0231               	subwf	??_setDimmerLights_ErrorClose,w
 14934  1706  1D03               	skipz
 14935  1707  2F0A               	goto	u5035
 14936  1708  0832               	movf	setDimmerLights_ErrorClose@count,w
 14937  1709  0234               	subwf	setDimmerLights_ErrorClose@i,w
 14938  170A                     u5035:	
 14939  170A  1803               	btfsc	3,0
 14940  170B  0008               	return
 14941                           
 14942                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 14943  170C  0020               	movlb	0	; select bank0
 14944  170D  0834               	movf	setDimmerLights_ErrorClose@i,w
 14945  170E  3E01               	addlw	1
 14946  170F  319D  2558  3196   	fcall	_DimmerLightsPointSelect
 14947                           
 14948                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 14949  1712  0020               	movlb	0	; select bank0
 14950  1713  0834               	movf	setDimmerLights_ErrorClose@i,w
 14951  1714  3E01               	addlw	1
 14952  1715  319E  262A  3196   	fcall	_getDimmerLights_Status
 14953  1718  3A01               	xorlw	1
 14954  1719  1D03               	skipz
 14955  171A  2F2C               	goto	l6044
 14956                           
 14957                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 14958  171B  0020               	movlb	0	; select bank0
 14959  171C  086F               	movf	_DimmerLights,w
 14960  171D  3E09               	addlw	9
 14961  171E  0086               	movwf	6
 14962  171F  3001               	movlw	1	; select bank2/3
 14963  1720  0087               	movwf	7
 14964  1721  1701               	bsf	1,6
 14965                           
 14966                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 14967  1722  086F               	movf	_DimmerLights,w
 14968  1723  0086               	movwf	6
 14969  1724  3001               	movlw	1	; select bank2/3
 14970  1725  0087               	movwf	7
 14971  1726  1281               	bcf	1,5
 14972                           
 14973                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 14974  1727  0834               	movf	setDimmerLights_ErrorClose@i,w
 14975  1728  3E01               	addlw	1
 14976  1729  3195  2528  3196   	fcall	_setDimmerLights_SwOff
 14977  172C                     l6044:	
 14978  172C  3001               	movlw	1
 14979  172D  0020               	movlb	0	; select bank0
 14980  172E  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 14981  172F  3000               	movlw	0
 14982  1730  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 14983  1731  2F01               	goto	l6046
 14984  1732                     l6048:	
 14985                           ;Dimmer_B1.c: 579: }
 14986                           ;Dimmer_B1.c: 580: }
 14987                           ;Dimmer_B1.c: 581: } else {
 14988                           
 14989                           
 14990                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 14991  1732  0020               	movlb	0	; select bank0
 14992  1733  0833               	movf	setDimmerLights_ErrorClose@lights,w
 14993  1734  319D  2558  3196   	fcall	_DimmerLightsPointSelect
 14994                           
 14995                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 14996  1737  0020               	movlb	0	; select bank0
 14997  1738  0833               	movf	setDimmerLights_ErrorClose@lights,w
 14998  1739  319E  262A  3196   	fcall	_getDimmerLights_Status
 14999  173C  3A01               	xorlw	1
 15000  173D  1D03               	skipz
 15001  173E  0008               	return
 15002                           
 15003                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15004  173F  0020               	movlb	0	; select bank0
 15005  1740  086F               	movf	_DimmerLights,w
 15006  1741  3E09               	addlw	9
 15007  1742  0086               	movwf	6
 15008  1743  3001               	movlw	1	; select bank2/3
 15009  1744  0087               	movwf	7
 15010  1745  1701               	bsf	1,6
 15011                           
 15012                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15013  1746  086F               	movf	_DimmerLights,w
 15014  1747  0086               	movwf	6
 15015  1748  3001               	movlw	1	; select bank2/3
 15016  1749  0087               	movwf	7
 15017  174A  1281               	bcf	1,5
 15018                           
 15019                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15020  174B  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15021  174C  3195  2528         	fcall	_setDimmerLights_SwOff
 15022  174E  0008               	return
 15023  174F                     __end_of_setDimmerLights_ErrorClose:	
 15024                           
 15025                           	psect	text94
 15026  1528                     __ptext94:	
 15027 ;; *************** function _setDimmerLights_SwOff *****************
 15028 ;; Defined at:
 15029 ;;		line 524 in file "../src/Dimmer_B1.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;  sw              1    wreg     unsigned char 
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;  sw              1   16[BANK0 ] unsigned char 
 15034 ;;  command         1   15[BANK0 ] unsigned char 
 15035 ;; Return value:  Size  Location     Type
 15036 ;;		None               void
 15037 ;; Registers used:
 15038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15039 ;; Tracked objects:
 15040 ;;		On entry : 0/0
 15041 ;;		On exit  : 0/0
 15042 ;;		Unchanged: 0/0
 15043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;Total ram usage:        2 bytes
 15049 ;; Hardware stack levels used:    1
 15050 ;; Hardware stack levels required when called:    8
 15051 ;; This function calls:
 15052 ;;		_DimmerLightsPointSelect
 15053 ;;		_getDelayOff_GO
 15054 ;;		_setDelayOff_GO
 15055 ;;		_setDimmerLights_Trigger
 15056 ;;		_setDimmerLights_TriggerAdj
 15057 ;; This function is called by:
 15058 ;;		_setDimmerLights_ErrorClose
 15059 ;;		_setRFSW_Control
 15060 ;;		_setSw_Main
 15061 ;; This function uses a non-reentrant model
 15062 ;;
 15063                           
 15064                           
 15065                           ;psect for function _setDimmerLights_SwOff
 15066  1528                     _setDimmerLights_SwOff:	
 15067                           
 15068                           ;incstack = 0
 15069                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15070                           ;setDimmerLights_SwOff@sw stored from wreg
 15071  1528  0020               	movlb	0	; select bank0
 15072  1529  00B0               	movwf	setDimmerLights_SwOff@sw
 15073                           
 15074                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15075  152A  0830               	movf	setDimmerLights_SwOff@sw,w
 15076  152B  319D  2558  3195   	fcall	_DimmerLightsPointSelect
 15077                           
 15078                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15079  152E  0020               	movlb	0	; select bank0
 15080  152F  086F               	movf	_DimmerLights,w
 15081  1530  0086               	movwf	6
 15082  1531  3001               	movlw	1	; select bank2/3
 15083  1532  0087               	movwf	7
 15084  1533  3000               	movlw	0
 15085  1534  1A81               	btfsc	1,5
 15086  1535  3001               	movlw	1
 15087  1536  00AF               	movwf	setDimmerLights_SwOff@command
 15088                           
 15089                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15090  1537  086F               	movf	_DimmerLights,w
 15091  1538  3E09               	addlw	9
 15092  1539  0086               	movwf	6
 15093  153A  3001               	movlw	1	; select bank2/3
 15094  153B  0087               	movwf	7
 15095  153C  1F01               	btfss	1,6
 15096  153D  0008               	return
 15097                           
 15098                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15099  153E  086F               	movf	_DimmerLights,w
 15100  153F  3E09               	addlw	9
 15101  1540  0086               	movwf	6
 15102  1541  3001               	movlw	1	; select bank2/3
 15103  1542  0087               	movwf	7
 15104  1543  1301               	bcf	1,6
 15105                           
 15106                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15107  1544  086F               	movf	_DimmerLights,w
 15108  1545  0086               	movwf	6
 15109  1546  3001               	movlw	1	; select bank2/3
 15110  1547  0087               	movwf	7
 15111  1548  1E81               	btfss	1,5
 15112  1549  2D5C               	goto	l5922
 15113                           
 15114                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15115  154A  086F               	movf	_DimmerLights,w
 15116  154B  3E09               	addlw	9
 15117  154C  0086               	movwf	6
 15118  154D  3001               	movlw	1	; select bank2/3
 15119  154E  0087               	movwf	7
 15120  154F  1F81               	btfss	1,7
 15121  1550  0008               	return
 15122                           
 15123                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15124  1551  086F               	movf	_DimmerLights,w
 15125  1552  3E09               	addlw	9
 15126  1553  0086               	movwf	6
 15127  1554  3001               	movlw	1	; select bank2/3
 15128  1555  0087               	movwf	7
 15129  1556  1381               	bcf	1,7
 15130                           
 15131                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15132  1557  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15133  1558  0830               	movf	setDimmerLights_SwOff@sw,w
 15134  1559  3190  207B         	fcall	_setDimmerLights_TriggerAdj
 15135                           
 15136                           ;Dimmer_B1.c: 533: }
 15137                           ;Dimmer_B1.c: 534: } else {
 15138  155B  0008               	return
 15139  155C                     l5922:	
 15140                           
 15141                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15142  155C  0020               	movlb	0	; select bank0
 15143  155D  01A2               	clrf	setDimmerLights_Trigger@command
 15144  155E  0830               	movf	setDimmerLights_SwOff@sw,w
 15145  155F  319F  27C3  3195   	fcall	_setDimmerLights_Trigger
 15146                           
 15147                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15148  1562  0020               	movlb	0	; select bank0
 15149  1563  0830               	movf	setDimmerLights_SwOff@sw,w
 15150  1564  319E  263A  3195   	fcall	_getDelayOff_GO
 15151  1567  3A01               	xorlw	1
 15152  1568  1D03               	skipz
 15153  1569  0008               	return
 15154                           
 15155                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15156  156A  0020               	movlb	0	; select bank0
 15157  156B  01AA               	clrf	setDelayOff_GO@command
 15158  156C  01AB               	clrf	setDelayOff_GO@value
 15159  156D  0830               	movf	setDimmerLights_SwOff@sw,w
 15160  156E  3189  2137         	fcall	_setDelayOff_GO
 15161  1570  0008               	return
 15162  1571                     __end_of_setDimmerLights_SwOff:	
 15163                           
 15164                           	psect	text95
 15165  107B                     __ptext95:	
 15166 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15167 ;; Defined at:
 15168 ;;		line 773 in file "../src/Dimmer_B1.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;  lights          1    wreg     unsigned char 
 15171 ;;  command         1    2[BANK0 ] unsigned char 
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;  lights          1    4[BANK0 ] unsigned char 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;		None               void
 15176 ;; Registers used:
 15177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15183 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;Total ram usage:        3 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    6
 15190 ;; This function calls:
 15191 ;;		_DimmerLightsPointSelect
 15192 ;; This function is called by:
 15193 ;;		_setDimmerLights_SwOff
 15194 ;;		_setDimmerLights_AdjControl
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _setDimmerLights_TriggerAdj
 15200  107B                     _setDimmerLights_TriggerAdj:	
 15201                           
 15202                           ;incstack = 0
 15203                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15204                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15205  107B  0020               	movlb	0	; select bank0
 15206  107C  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15207                           
 15208                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15209  107D  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15210  107E  319D  2558         	fcall	_DimmerLightsPointSelect
 15211                           
 15212                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15213  1080  0020               	movlb	0	; select bank0
 15214  1081  086F               	movf	_DimmerLights,w
 15215  1082  3E08               	addlw	8
 15216  1083  0086               	movwf	6
 15217  1084  3001               	movlw	1	; select bank2/3
 15218  1085  0087               	movwf	7
 15219  1086  1601               	bsf	1,4
 15220                           
 15221                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15222  1087  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15223  1088  3A01               	xorlw	1
 15224  1089  3000               	movlw	0
 15225  108A  1903               	skipnz
 15226  108B  3001               	movlw	1
 15227  108C  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15228  108D  086F               	movf	_DimmerLights,w
 15229  108E  3E08               	addlw	8
 15230  108F  0086               	movwf	6
 15231  1090  3001               	movlw	1	; select bank2/3
 15232  1091  0087               	movwf	7
 15233  1092  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15234  1093  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15235  1094  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15236  1095  0801               	movf	1,w
 15237  1096  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15238  1097  39F7               	andlw	-9
 15239  1098  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15240  1099  0081               	movwf	1
 15241  109A  0008               	return
 15242  109B                     __end_of_setDimmerLights_TriggerAdj:	
 15243                           
 15244                           	psect	text96
 15245  1FC3                     __ptext96:	
 15246 ;; *************** function _setDimmerLights_Trigger *****************
 15247 ;; Defined at:
 15248 ;;		line 767 in file "../src/Dimmer_B1.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;  lights          1    wreg     unsigned char 
 15251 ;;  command         1    2[BANK0 ] unsigned char 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  lights          1    4[BANK0 ] unsigned char 
 15254 ;; Return value:  Size  Location     Type
 15255 ;;		None               void
 15256 ;; Registers used:
 15257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15263 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;Total ram usage:        3 bytes
 15268 ;; Hardware stack levels used:    1
 15269 ;; Hardware stack levels required when called:    6
 15270 ;; This function calls:
 15271 ;;		_DimmerLightsPointSelect
 15272 ;; This function is called by:
 15273 ;;		_setDimmerLights_SwOn
 15274 ;;		_setDimmerLights_SwOff
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           
 15279                           ;psect for function _setDimmerLights_Trigger
 15280  1FC3                     _setDimmerLights_Trigger:	
 15281                           
 15282                           ;incstack = 0
 15283                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15284                           ;setDimmerLights_Trigger@lights stored from wreg
 15285  1FC3  0020               	movlb	0	; select bank0
 15286  1FC4  00A4               	movwf	setDimmerLights_Trigger@lights
 15287                           
 15288                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15289  1FC5  0824               	movf	setDimmerLights_Trigger@lights,w
 15290  1FC6  319D  2558         	fcall	_DimmerLightsPointSelect
 15291                           
 15292                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15293  1FC8  0020               	movlb	0	; select bank0
 15294  1FC9  086F               	movf	_DimmerLights,w
 15295  1FCA  3E08               	addlw	8
 15296  1FCB  0086               	movwf	6
 15297  1FCC  3001               	movlw	1	; select bank2/3
 15298  1FCD  0087               	movwf	7
 15299  1FCE  1501               	bsf	1,2
 15300                           
 15301                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15302  1FCF  0822               	movf	setDimmerLights_Trigger@command,w
 15303  1FD0  3A01               	xorlw	1
 15304  1FD1  3000               	movlw	0
 15305  1FD2  1903               	skipnz
 15306  1FD3  3001               	movlw	1
 15307  1FD4  00A3               	movwf	??_setDimmerLights_Trigger
 15308  1FD5  086F               	movf	_DimmerLights,w
 15309  1FD6  3E08               	addlw	8
 15310  1FD7  0086               	movwf	6
 15311  1FD8  3001               	movlw	1	; select bank2/3
 15312  1FD9  0087               	movwf	7
 15313  1FDA  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15314  1FDB  0801               	movf	1,w
 15315  1FDC  0623               	xorwf	??_setDimmerLights_Trigger,w
 15316  1FDD  39FD               	andlw	-3
 15317  1FDE  0623               	xorwf	??_setDimmerLights_Trigger,w
 15318  1FDF  0081               	movwf	1
 15319  1FE0  0008               	return
 15320  1FE1                     __end_of_setDimmerLights_Trigger:	
 15321                           
 15322                           	psect	text97
 15323  0937                     __ptext97:	
 15324 ;; *************** function _setDelayOff_GO *****************
 15325 ;; Defined at:
 15326 ;;		line 83 in file "../src/DelayOff_B1.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;  sw              1    wreg     unsigned char 
 15329 ;;  command         1   10[BANK0 ] unsigned char 
 15330 ;;  value           1   11[BANK0 ] unsigned char 
 15331 ;; Auto vars:     Size  Location     Type
 15332 ;;  sw              1   14[BANK0 ] unsigned char 
 15333 ;; Return value:  Size  Location     Type
 15334 ;;		None               void
 15335 ;; Registers used:
 15336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15337 ;; Tracked objects:
 15338 ;;		On entry : 0/0
 15339 ;;		On exit  : 0/0
 15340 ;;		Unchanged: 0/0
 15341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15342 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;Total ram usage:        5 bytes
 15347 ;; Hardware stack levels used:    1
 15348 ;; Hardware stack levels required when called:    7
 15349 ;; This function calls:
 15350 ;;		_DelayOffPointSelect
 15351 ;;		_DelayTimejudge
 15352 ;; This function is called by:
 15353 ;;		_setDimmerLights_SwOff
 15354 ;;		_setRFSW_Control
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           
 15359                           ;psect for function _setDelayOff_GO
 15360  0937                     _setDelayOff_GO:	
 15361                           
 15362                           ;incstack = 0
 15363                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15364                           ;setDelayOff_GO@sw stored from wreg
 15365  0937  0020               	movlb	0	; select bank0
 15366  0938  00AE               	movwf	setDelayOff_GO@sw
 15367                           
 15368                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15369  0939  082E               	movf	setDelayOff_GO@sw,w
 15370  093A  319D  254D  3189   	fcall	_DelayOffPointSelect
 15371                           
 15372                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15373  093D  0020               	movlb	0	; select bank0
 15374  093E  082A               	movf	setDelayOff_GO@command,w
 15375  093F  3A01               	xorlw	1
 15376  0940  3000               	movlw	0
 15377  0941  1903               	skipnz
 15378  0942  3001               	movlw	1
 15379  0943  00AC               	movwf	??_setDelayOff_GO
 15380  0944  0878               	movf	_DelayOff,w
 15381  0945  0086               	movwf	6
 15382  0946  3001               	movlw	1	; select bank2/3
 15383  0947  0087               	movwf	7
 15384  0948  0DAC               	rlf	??_setDelayOff_GO,f
 15385  0949  0801               	movf	1,w
 15386  094A  062C               	xorwf	??_setDelayOff_GO,w
 15387  094B  39FD               	andlw	-3
 15388  094C  062C               	xorwf	??_setDelayOff_GO,w
 15389  094D  0081               	movwf	1
 15390                           
 15391                           ;DelayOff_B1.c: 89: if (command == 1) {
 15392  094E  082A               	movf	setDelayOff_GO@command,w
 15393  094F  3A01               	xorlw	1
 15394  0950  1D03               	skipz
 15395  0951  297C               	goto	l5842
 15396                           
 15397                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15398  0952  082B               	movf	setDelayOff_GO@value,w
 15399  0953  3191  21D6  3189   	fcall	_DelayTimejudge
 15400  0956  0020               	movlb	0	; select bank0
 15401  0957  00AC               	movwf	??_setDelayOff_GO
 15402  0958  0A78               	incf	_DelayOff,w
 15403  0959  0086               	movwf	6
 15404  095A  3001               	movlw	1	; select bank2/3
 15405  095B  0087               	movwf	7
 15406  095C  082C               	movf	??_setDelayOff_GO,w
 15407  095D  0081               	movwf	1
 15408                           
 15409                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15410  095E  300F               	movlw	15
 15411  095F  052B               	andwf	setDelayOff_GO@value,w
 15412  0960  00AC               	movwf	??_setDelayOff_GO
 15413  0961  082C               	movf	??_setDelayOff_GO,w
 15414  0962  3A05               	xorlw	5
 15415  0963  1903               	skipnz
 15416  0964  2969               	goto	l5836
 15417  0965  082B               	movf	setDelayOff_GO@value,w
 15418  0966  390F               	andlw	15
 15419  0967  1D03               	btfss	3,2
 15420  0968  296F               	goto	l5840
 15421  0969                     l5836:	
 15422  0969  3026               	movlw	38
 15423  096A  022B               	subwf	setDelayOff_GO@value,w
 15424  096B  1803               	skipnc
 15425  096C  296F               	goto	l5840
 15426                           
 15427                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15428  096D  082B               	movf	setDelayOff_GO@value,w
 15429  096E  2970               	goto	L7
 15430  096F                     l5840:	
 15431                           ;DelayOff_B1.c: 93: } else {
 15432                           
 15433                           
 15434                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15435  096F  3005               	movlw	5
 15436  0970                     L7:	
 15437  0970  00AC               	movwf	??_setDelayOff_GO
 15438  0971  082E               	movf	setDelayOff_GO@sw,w
 15439  0972  3E1A               	addlw	26
 15440  0973  076E               	addwf	_product,w
 15441  0974  00AD               	movwf	??_setDelayOff_GO+1
 15442  0975  082D               	movf	??_setDelayOff_GO+1,w
 15443  0976  0086               	movwf	6
 15444  0977  3002               	movlw	2	; select bank4/5
 15445  0978  0087               	movwf	7
 15446  0979  082C               	movf	??_setDelayOff_GO,w
 15447  097A  0081               	movwf	1
 15448                           
 15449                           ;DelayOff_B1.c: 95: }
 15450                           ;DelayOff_B1.c: 96: } else {
 15451  097B  2985               	goto	l5844
 15452  097C                     l5842:	
 15453                           
 15454                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15455  097C  082E               	movf	setDelayOff_GO@sw,w
 15456  097D  3E1A               	addlw	26
 15457  097E  076E               	addwf	_product,w
 15458  097F  00AC               	movwf	??_setDelayOff_GO
 15459  0980  082C               	movf	??_setDelayOff_GO,w
 15460  0981  0086               	movwf	6
 15461  0982  3002               	movlw	2	; select bank4/5
 15462  0983  0087               	movwf	7
 15463  0984  0181               	clrf	1
 15464  0985                     l5844:	
 15465                           
 15466                           ;DelayOff_B1.c: 98: }
 15467                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15468  0985  0878               	movf	_DelayOff,w
 15469  0986  3E02               	addlw	2
 15470  0987  0086               	movwf	6
 15471  0988  3001               	movlw	1	; select bank2/3
 15472  0989  0087               	movwf	7
 15473  098A  3000               	movlw	0
 15474  098B  3FC0               	movwi [0]fsr1
 15475  098C  3FC1               	movwi [1]fsr1
 15476                           
 15477                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15478  098D  0878               	movf	_DelayOff,w
 15479  098E  3E04               	addlw	4
 15480  098F  0086               	movwf	6
 15481  0990  3001               	movlw	1	; select bank2/3
 15482  0991  0087               	movwf	7
 15483  0992  0181               	clrf	1
 15484  0993  0008               	return
 15485  0994                     __end_of_setDelayOff_GO:	
 15486                           
 15487                           	psect	text98
 15488  11D6                     __ptext98:	
 15489 ;; *************** function _DelayTimejudge *****************
 15490 ;; Defined at:
 15491 ;;		line 112 in file "../src/DelayOff_B1.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;  value           1    wreg     unsigned char 
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;  value           1    9[BANK0 ] unsigned char 
 15496 ;;  k               1    8[BANK0 ] unsigned char 
 15497 ;;  j               1    7[BANK0 ] unsigned char 
 15498 ;;  i               1    6[BANK0 ] unsigned char 
 15499 ;; Return value:  Size  Location     Type
 15500 ;;                  1    wreg      unsigned char 
 15501 ;; Registers used:
 15502 ;;		wreg, status,2, status,0, pclath, cstack
 15503 ;; Tracked objects:
 15504 ;;		On entry : 0/0
 15505 ;;		On exit  : 0/0
 15506 ;;		Unchanged: 0/0
 15507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;Total ram usage:        6 bytes
 15513 ;; Hardware stack levels used:    1
 15514 ;; Hardware stack levels required when called:    6
 15515 ;; This function calls:
 15516 ;;		___bmul
 15517 ;; This function is called by:
 15518 ;;		_setDelayOff_GO
 15519 ;; This function uses a non-reentrant model
 15520 ;;
 15521                           
 15522                           
 15523                           ;psect for function _DelayTimejudge
 15524  11D6                     _DelayTimejudge:	
 15525                           
 15526                           ;incstack = 0
 15527                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15528                           ;DelayTimejudge@value stored from wreg
 15529  11D6  0020               	movlb	0	; select bank0
 15530  11D7  00A9               	movwf	DelayTimejudge@value
 15531                           
 15532                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15533  11D8  3005               	movlw	5
 15534  11D9  00A4               	movwf	??_DelayTimejudge
 15535  11DA  0824               	movf	??_DelayTimejudge,w
 15536  11DB  00A6               	movwf	DelayTimejudge@i
 15537  11DC  01A7               	clrf	DelayTimejudge@j
 15538  11DD  01A8               	clrf	DelayTimejudge@k
 15539                           
 15540                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15541  11DE  3031               	movlw	49
 15542  11DF  0229               	subwf	DelayTimejudge@value,w
 15543  11E0  1803               	skipnc
 15544  11E1  29FE               	goto	l5736
 15545                           
 15546                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15547  11E2  0829               	movf	DelayTimejudge@value,w
 15548  11E3  390F               	andlw	15
 15549  11E4  00A4               	movwf	??_DelayTimejudge
 15550  11E5  0824               	movf	??_DelayTimejudge,w
 15551  11E6  00A7               	movwf	DelayTimejudge@j
 15552                           
 15553                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15554  11E7  0829               	movf	DelayTimejudge@value,w
 15555  11E8  00A4               	movwf	??_DelayTimejudge
 15556  11E9  3004               	movlw	4
 15557  11EA                     u4665:	
 15558  11EA  36A4               	lsrf	??_DelayTimejudge,f
 15559  11EB  0B89               	decfsz	9,f
 15560  11EC  29EA               	goto	u4665
 15561  11ED  0824               	movf	??_DelayTimejudge,w
 15562  11EE  390F               	andlw	15
 15563  11EF  00A5               	movwf	??_DelayTimejudge+1
 15564  11F0  0825               	movf	??_DelayTimejudge+1,w
 15565  11F1  00A8               	movwf	DelayTimejudge@k
 15566                           
 15567                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15568  11F2  300A               	movlw	10
 15569  11F3  00A4               	movwf	??_DelayTimejudge
 15570  11F4  0824               	movf	??_DelayTimejudge,w
 15571  11F5  00A0               	movwf	___bmul@multiplicand
 15572  11F6  0828               	movf	DelayTimejudge@k,w
 15573  11F7  319E  26AE         	fcall	___bmul
 15574  11F9  0020               	movlb	0	; select bank0
 15575  11FA  0727               	addwf	DelayTimejudge@j,w
 15576  11FB  00A5               	movwf	??_DelayTimejudge+1
 15577  11FC  0825               	movf	??_DelayTimejudge+1,w
 15578  11FD  00A6               	movwf	DelayTimejudge@i
 15579  11FE                     l5736:	
 15580                           
 15581                           ;DelayOff_B1.c: 118: }
 15582                           ;DelayOff_B1.c: 139: return i;
 15583  11FE  0826               	movf	DelayTimejudge@i,w
 15584  11FF  0008               	return
 15585  1200                     __end_of_DelayTimejudge:	
 15586                           
 15587                           	psect	text99
 15588  1EAE                     __ptext99:	
 15589 ;; *************** function ___bmul *****************
 15590 ;; Defined at:
 15591 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;  multiplier      1    wreg     unsigned char 
 15594 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15597 ;;  product         1    2[BANK0 ] unsigned char 
 15598 ;; Return value:  Size  Location     Type
 15599 ;;                  1    wreg      unsigned char 
 15600 ;; Registers used:
 15601 ;;		wreg, status,2, status,0
 15602 ;; Tracked objects:
 15603 ;;		On entry : 0/0
 15604 ;;		On exit  : 0/0
 15605 ;;		Unchanged: 0/0
 15606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15607 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;Total ram usage:        4 bytes
 15612 ;; Hardware stack levels used:    1
 15613 ;; Hardware stack levels required when called:    5
 15614 ;; This function calls:
 15615 ;;		Nothing
 15616 ;; This function is called by:
 15617 ;;		_DelayTimejudge
 15618 ;; This function uses a non-reentrant model
 15619 ;;
 15620                           
 15621                           
 15622                           ;psect for function ___bmul
 15623  1EAE                     ___bmul:	
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15627                           ;___bmul@multiplier stored from wreg
 15628  1EAE  0020               	movlb	0	; select bank0
 15629  1EAF  00A3               	movwf	___bmul@multiplier
 15630  1EB0  01A2               	clrf	___bmul@product
 15631  1EB1                     l5478:	
 15632  1EB1  1C23               	btfss	___bmul@multiplier,0
 15633  1EB2  2EB7               	goto	l5482
 15634  1EB3  0820               	movf	___bmul@multiplicand,w
 15635  1EB4  00A1               	movwf	??___bmul
 15636  1EB5  0821               	movf	??___bmul,w
 15637  1EB6  07A2               	addwf	___bmul@product,f
 15638  1EB7                     l5482:	
 15639  1EB7  1003               	clrc
 15640  1EB8  0DA0               	rlf	___bmul@multiplicand,f
 15641  1EB9  1003               	clrc
 15642  1EBA  0CA3               	rrf	___bmul@multiplier,f
 15643  1EBB  08A3               	movf	___bmul@multiplier,f
 15644  1EBC  1D03               	skipz
 15645  1EBD  2EB1               	goto	l5478
 15646  1EBE  0822               	movf	___bmul@product,w
 15647  1EBF  0008               	return
 15648  1EC0                     __end_of___bmul:	
 15649                           
 15650                           	psect	text100
 15651  1E3A                     __ptext100:	
 15652 ;; *************** function _getDelayOff_GO *****************
 15653 ;; Defined at:
 15654 ;;		line 105 in file "../src/DelayOff_B1.c"
 15655 ;; Parameters:    Size  Location     Type
 15656 ;;  sw              1    wreg     unsigned char 
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;  sw              1    2[BANK0 ] unsigned char 
 15659 ;;  go              1    3[BANK0 ] unsigned char 
 15660 ;; Return value:  Size  Location     Type
 15661 ;;                  1    wreg      unsigned char 
 15662 ;; Registers used:
 15663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15664 ;; Tracked objects:
 15665 ;;		On entry : 0/0
 15666 ;;		On exit  : 0/0
 15667 ;;		Unchanged: 0/0
 15668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;Total ram usage:        2 bytes
 15674 ;; Hardware stack levels used:    1
 15675 ;; Hardware stack levels required when called:    6
 15676 ;; This function calls:
 15677 ;;		_DelayOffPointSelect
 15678 ;; This function is called by:
 15679 ;;		_setDimmerLights_SwOff
 15680 ;;		_setRFSW_Control
 15681 ;; This function uses a non-reentrant model
 15682 ;;
 15683                           
 15684                           
 15685                           ;psect for function _getDelayOff_GO
 15686  1E3A                     _getDelayOff_GO:	
 15687                           
 15688                           ;incstack = 0
 15689                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15690                           ;getDelayOff_GO@sw stored from wreg
 15691  1E3A  0020               	movlb	0	; select bank0
 15692  1E3B  00A2               	movwf	getDelayOff_GO@sw
 15693                           
 15694                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 15695  1E3C  0822               	movf	getDelayOff_GO@sw,w
 15696  1E3D  319D  254D         	fcall	_DelayOffPointSelect
 15697                           
 15698                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 15699  1E3F  0878               	movf	_DelayOff,w
 15700  1E40  0086               	movwf	6
 15701  1E41  3001               	movlw	1	; select bank2/3
 15702  1E42  0087               	movwf	7
 15703  1E43  3000               	movlw	0
 15704  1E44  1881               	btfsc	1,1
 15705  1E45  3001               	movlw	1
 15706  1E46  0020               	movlb	0	; select bank0
 15707  1E47  00A3               	movwf	getDelayOff_GO@go
 15708                           
 15709                           ;DelayOff_B1.c: 108: return go;
 15710  1E48  0823               	movf	getDelayOff_GO@go,w
 15711  1E49  0008               	return
 15712  1E4A                     __end_of_getDelayOff_GO:	
 15713                           
 15714                           	psect	text101
 15715  1E2A                     __ptext101:	
 15716 ;; *************** function _getDimmerLights_Status *****************
 15717 ;; Defined at:
 15718 ;;		line 445 in file "../src/Dimmer_B1.c"
 15719 ;; Parameters:    Size  Location     Type
 15720 ;;  lights          1    wreg     unsigned char 
 15721 ;; Auto vars:     Size  Location     Type
 15722 ;;  lights          1    2[BANK0 ] unsigned char 
 15723 ;;  status          1    3[BANK0 ] unsigned char 
 15724 ;; Return value:  Size  Location     Type
 15725 ;;                  1    wreg      unsigned char 
 15726 ;; Registers used:
 15727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15728 ;; Tracked objects:
 15729 ;;		On entry : 0/0
 15730 ;;		On exit  : 0/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15737 ;;Total ram usage:        2 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; Hardware stack levels required when called:    6
 15740 ;; This function calls:
 15741 ;;		_DimmerLightsPointSelect
 15742 ;; This function is called by:
 15743 ;;		_setDimmerLights_ErrorClose
 15744 ;;		_getMain_LightsStatus
 15745 ;;		_setRFSW_Control
 15746 ;;		_setRFSW_AdjControl
 15747 ;; This function uses a non-reentrant model
 15748 ;;
 15749                           
 15750                           
 15751                           ;psect for function _getDimmerLights_Status
 15752  1E2A                     _getDimmerLights_Status:	
 15753                           
 15754                           ;incstack = 0
 15755                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15756                           ;getDimmerLights_Status@lights stored from wreg
 15757  1E2A  0020               	movlb	0	; select bank0
 15758  1E2B  00A2               	movwf	getDimmerLights_Status@lights
 15759                           
 15760                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 15761  1E2C  0822               	movf	getDimmerLights_Status@lights,w
 15762  1E2D  319D  2558         	fcall	_DimmerLightsPointSelect
 15763                           
 15764                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 15765  1E2F  0020               	movlb	0	; select bank0
 15766  1E30  086F               	movf	_DimmerLights,w
 15767  1E31  0086               	movwf	6
 15768  1E32  3001               	movlw	1	; select bank2/3
 15769  1E33  0087               	movwf	7
 15770  1E34  3000               	movlw	0
 15771  1E35  1A81               	btfsc	1,5
 15772  1E36  3001               	movlw	1
 15773  1E37  00A3               	movwf	getDimmerLights_Status@status
 15774                           
 15775                           ;Dimmer_B1.c: 448: return status;
 15776  1E38  0823               	movf	getDimmerLights_Status@status,w
 15777  1E39  0008               	return
 15778  1E3A                     __end_of_getDimmerLights_Status:	
 15779                           
 15780                           	psect	text102
 15781  1D58                     __ptext102:	
 15782 ;; *************** function _DimmerLightsPointSelect *****************
 15783 ;; Defined at:
 15784 ;;		line 310 in file "../src/Dimmer_B1.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;  lights          1    wreg     unsigned char 
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  lights          1    1[BANK0 ] unsigned char 
 15789 ;; Return value:  Size  Location     Type
 15790 ;;		None               void
 15791 ;; Registers used:
 15792 ;;		wreg
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;Total ram usage:        2 bytes
 15803 ;; Hardware stack levels used:    1
 15804 ;; Hardware stack levels required when called:    5
 15805 ;; This function calls:
 15806 ;;		Nothing
 15807 ;; This function is called by:
 15808 ;;		_setDimmerLights_Initialization
 15809 ;;		_setDimmerLights_Main
 15810 ;;		_getDimmerLights_Status
 15811 ;;		_setDimmerLights_SwOn
 15812 ;;		_setDimmerLights_SwOff
 15813 ;;		_setDimmerLights_AdjControl
 15814 ;;		_setDimmerLights_ErrorClose
 15815 ;;		_setDimmerLights
 15816 ;;		_setDimmerLights_Adj
 15817 ;;		_setDimmerLights_AdjRF
 15818 ;;		_setDimmerLights_Trigger
 15819 ;;		_setDimmerLights_TriggerAdj
 15820 ;;		_setDimmerLights_Status
 15821 ;;		_setDimmerLights_GO
 15822 ;;		_setDimmerLights_MaxmumValue
 15823 ;; This function uses a non-reentrant model
 15824 ;;
 15825                           
 15826                           
 15827                           ;psect for function _DimmerLightsPointSelect
 15828  1D58                     _DimmerLightsPointSelect:	
 15829                           
 15830                           ;incstack = 0
 15831                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15832                           ;DimmerLightsPointSelect@lights stored from wreg
 15833  1D58  0020               	movlb	0	; select bank0
 15834  1D59  00A1               	movwf	DimmerLightsPointSelect@lights
 15835                           
 15836                           ;Dimmer_B1.c: 312: if (lights == 1) {
 15837  1D5A  0821               	movf	DimmerLightsPointSelect@lights,w
 15838  1D5B  3A01               	xorlw	1
 15839  1D5C  1D03               	skipz
 15840  1D5D  0008               	return
 15841                           
 15842                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 15843  1D5E  30C5               	movlw	_DimmerLights1& (0+255)
 15844  1D5F  00A0               	movwf	??_DimmerLightsPointSelect
 15845  1D60  0820               	movf	??_DimmerLightsPointSelect,w
 15846  1D61  00EF               	movwf	_DimmerLights
 15847  1D62  0008               	return
 15848  1D63                     __end_of_DimmerLightsPointSelect:	
 15849                           
 15850                           	psect	text103
 15851  17A7                     __ptext103:	
 15852 ;; *************** function _setBuz *****************
 15853 ;; Defined at:
 15854 ;;		line 22 in file "../src/Buzzer_B1.c"
 15855 ;; Parameters:    Size  Location     Type
 15856 ;;  count           1    wreg     unsigned char 
 15857 ;;  time            2    9[BANK0 ] int 
 15858 ;; Auto vars:     Size  Location     Type
 15859 ;;  count           1   12[BANK0 ] unsigned char 
 15860 ;; Return value:  Size  Location     Type
 15861 ;;		None               void
 15862 ;; Registers used:
 15863 ;;		wreg, status,2, status,0, pclath, cstack
 15864 ;; Tracked objects:
 15865 ;;		On entry : 0/0
 15866 ;;		On exit  : 0/0
 15867 ;;		Unchanged: 0/0
 15868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15869 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15872 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15873 ;;Total ram usage:        4 bytes
 15874 ;; Hardware stack levels used:    1
 15875 ;; Hardware stack levels required when called:    6
 15876 ;; This function calls:
 15877 ;;		___awdiv
 15878 ;; This function is called by:
 15879 ;;		_DlyOff_Main
 15880 ;;		_setDimmerLights_Main
 15881 ;;		_setDimmerLights_SwOn
 15882 ;;		_my_MainTimer
 15883 ;;		_setMain_Exception
 15884 ;;		_setTemp_Main
 15885 ;;		_setLog_Code
 15886 ;;		_setControl_Lights_Table
 15887 ;;		_setRFSW_Control
 15888 ;;		_setSw_Main
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           
 15893                           ;psect for function _setBuz
 15894  17A7                     _setBuz:	
 15895                           
 15896                           ;incstack = 0
 15897                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15898                           ;setBuz@count stored from wreg
 15899  17A7  0020               	movlb	0	; select bank0
 15900  17A8  00AC               	movwf	setBuz@count
 15901                           
 15902                           ;Buzzer_B1.c: 23: time /= 10;
 15903  17A9  300A               	movlw	10
 15904  17AA  00A0               	movwf	___awdiv@divisor
 15905  17AB  3000               	movlw	0
 15906  17AC  00A1               	movwf	___awdiv@divisor+1
 15907  17AD  082A               	movf	setBuz@time+1,w
 15908  17AE  01A3               	clrf	___awdiv@dividend+1
 15909  17AF  07A3               	addwf	___awdiv@dividend+1,f
 15910  17B0  0829               	movf	setBuz@time,w
 15911  17B1  01A2               	clrf	___awdiv@dividend
 15912  17B2  07A2               	addwf	___awdiv@dividend,f
 15913  17B3  3196  26A3  3197   	fcall	___awdiv
 15914  17B6  0020               	movlb	0	; select bank0
 15915  17B7  0821               	movf	?___awdiv+1,w
 15916  17B8  01AA               	clrf	setBuz@time+1
 15917  17B9  07AA               	addwf	setBuz@time+1,f
 15918  17BA  0820               	movf	?___awdiv,w
 15919  17BB  01A9               	clrf	setBuz@time
 15920  17BC  07A9               	addwf	setBuz@time,f
 15921                           
 15922                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15923  17BD  0021               	movlb	1	; select bank1
 15924  17BE  1C2F               	btfss	_Buz1^(0+128),0
 15925  17BF  0008               	return
 15926                           
 15927                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15928  17C0  18AF               	btfsc	_Buz1^(0+128),1
 15929  17C1  2FD8               	goto	l84
 15930                           
 15931                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15932  17C2  14AF               	bsf	_Buz1^(0+128),1
 15933                           
 15934                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15935  17C3  01B0               	clrf	(_Buz1^(0+128)+1)
 15936  17C4  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 15937                           
 15938                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15939  17C5  0020               	movlb	0	; select bank0
 15940  17C6  082C               	movf	setBuz@count,w
 15941  17C7  00AB               	movwf	??_setBuz
 15942  17C8  082B               	movf	??_setBuz,w
 15943  17C9  0021               	movlb	1	; select bank1
 15944  17CA  00B2               	movwf	(_Buz1^(0+128)+3)
 15945                           
 15946                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15947  17CB  0020               	movlb	0	; select bank0
 15948  17CC  082A               	movf	setBuz@time+1,w
 15949  17CD  0021               	movlb	1	; select bank1
 15950  17CE  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 15951  17CF  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 15952  17D0  0020               	movlb	0	; select bank0
 15953  17D1  0829               	movf	setBuz@time,w
 15954  17D2  0021               	movlb	1	; select bank1
 15955  17D3  01B5               	clrf	(_Buz1^(0+128)+6)
 15956  17D4  07B5               	addwf	(_Buz1^(0+128)+6),f
 15957                           
 15958                           ;Buzzer_B1.c: 30: RB3 = 1;
 15959  17D5  0020               	movlb	0	; select bank0
 15960  17D6  158D               	bsf	13,3	;volatile
 15961                           
 15962                           ;Buzzer_B1.c: 31: } else {
 15963  17D7  0008               	return
 15964  17D8                     l84:	
 15965                           
 15966                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15967  17D8  19AF               	btfsc	_Buz1^(0+128),3
 15968  17D9  2FEC               	goto	l86
 15969                           
 15970                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15971  17DA  15AF               	bsf	_Buz1^(0+128),3
 15972                           
 15973                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15974  17DB  0020               	movlb	0	; select bank0
 15975  17DC  082C               	movf	setBuz@count,w
 15976  17DD  00AB               	movwf	??_setBuz
 15977  17DE  082B               	movf	??_setBuz,w
 15978  17DF  0021               	movlb	1	; select bank1
 15979  17E0  00B3               	movwf	(_Buz1^(0+128)+4)
 15980                           
 15981                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15982  17E1  0020               	movlb	0	; select bank0
 15983  17E2  082A               	movf	setBuz@time+1,w
 15984  17E3  0021               	movlb	1	; select bank1
 15985  17E4  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 15986  17E5  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 15987  17E6  0020               	movlb	0	; select bank0
 15988  17E7  0829               	movf	setBuz@time,w
 15989  17E8  0021               	movlb	1	; select bank1
 15990  17E9  01B7               	clrf	(_Buz1^(0+128)+8)
 15991  17EA  07B7               	addwf	(_Buz1^(0+128)+8),f
 15992                           
 15993                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15994  17EB  0008               	return
 15995  17EC                     l86:	
 15996  17EC  1A2F               	btfsc	_Buz1^(0+128),4
 15997  17ED  0008               	return
 15998                           
 15999                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16000  17EE  162F               	bsf	_Buz1^(0+128),4
 16001                           
 16002                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16003  17EF  0020               	movlb	0	; select bank0
 16004  17F0  082C               	movf	setBuz@count,w
 16005  17F1  00AB               	movwf	??_setBuz
 16006  17F2  082B               	movf	??_setBuz,w
 16007  17F3  0021               	movlb	1	; select bank1
 16008  17F4  00B4               	movwf	(_Buz1^(0+128)+5)
 16009                           
 16010                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16011  17F5  0020               	movlb	0	; select bank0
 16012  17F6  082A               	movf	setBuz@time+1,w
 16013  17F7  0021               	movlb	1	; select bank1
 16014  17F8  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16015  17F9  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16016  17FA  0020               	movlb	0	; select bank0
 16017  17FB  0829               	movf	setBuz@time,w
 16018  17FC  0021               	movlb	1	; select bank1
 16019  17FD  01B9               	clrf	(_Buz1^(0+128)+10)
 16020  17FE  07B9               	addwf	(_Buz1^(0+128)+10),f
 16021  17FF  0008               	return
 16022  1800                     __end_of_setBuz:	
 16023                           
 16024                           	psect	text104
 16025  16A3                     __ptext104:	
 16026 ;; *************** function ___awdiv *****************
 16027 ;; Defined at:
 16028 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;  divisor         2    0[BANK0 ] int 
 16031 ;;  dividend        2    2[BANK0 ] int 
 16032 ;; Auto vars:     Size  Location     Type
 16033 ;;  quotient        2    7[BANK0 ] int 
 16034 ;;  sign            1    6[BANK0 ] unsigned char 
 16035 ;;  counter         1    5[BANK0 ] unsigned char 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  2    0[BANK0 ] int 
 16038 ;; Registers used:
 16039 ;;		wreg, status,2, status,0
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16045 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16046 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;Total ram usage:        9 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    5
 16052 ;; This function calls:
 16053 ;;		Nothing
 16054 ;; This function is called by:
 16055 ;;		_setBuz
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function ___awdiv
 16061  16A3                     ___awdiv:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16065  16A3  0020               	movlb	0	; select bank0
 16066  16A4  01A6               	clrf	___awdiv@sign
 16067  16A5  1FA1               	btfss	___awdiv@divisor+1,7
 16068  16A6  2EAE               	goto	l5760
 16069  16A7  09A0               	comf	___awdiv@divisor,f
 16070  16A8  09A1               	comf	___awdiv@divisor+1,f
 16071  16A9  0AA0               	incf	___awdiv@divisor,f
 16072  16AA  1903               	skipnz
 16073  16AB  0AA1               	incf	___awdiv@divisor+1,f
 16074  16AC  01A6               	clrf	___awdiv@sign
 16075  16AD  0AA6               	incf	___awdiv@sign,f
 16076  16AE                     l5760:	
 16077  16AE  1FA3               	btfss	___awdiv@dividend+1,7
 16078  16AF  2EB9               	goto	l5766
 16079  16B0  09A2               	comf	___awdiv@dividend,f
 16080  16B1  09A3               	comf	___awdiv@dividend+1,f
 16081  16B2  0AA2               	incf	___awdiv@dividend,f
 16082  16B3  1903               	skipnz
 16083  16B4  0AA3               	incf	___awdiv@dividend+1,f
 16084  16B5  3001               	movlw	1
 16085  16B6  00A4               	movwf	??___awdiv
 16086  16B7  0824               	movf	??___awdiv,w
 16087  16B8  06A6               	xorwf	___awdiv@sign,f
 16088  16B9                     l5766:	
 16089  16B9  01A7               	clrf	___awdiv@quotient
 16090  16BA  01A8               	clrf	___awdiv@quotient+1
 16091  16BB  0821               	movf	___awdiv@divisor+1,w
 16092  16BC  0420               	iorwf	___awdiv@divisor,w
 16093  16BD  1903               	skipnz
 16094  16BE  2EE8               	goto	l5788
 16095  16BF  01A5               	clrf	___awdiv@counter
 16096  16C0  0AA5               	incf	___awdiv@counter,f
 16097  16C1                     l5776:	
 16098  16C1  1BA1               	btfsc	___awdiv@divisor+1,7
 16099  16C2  2ECD               	goto	l5778
 16100  16C3  3001               	movlw	1
 16101  16C4                     u4715:	
 16102  16C4  35A0               	lslf	___awdiv@divisor,f
 16103  16C5  0DA1               	rlf	___awdiv@divisor+1,f
 16104  16C6  0B89               	decfsz	9,f
 16105  16C7  2EC4               	goto	u4715
 16106  16C8  3001               	movlw	1
 16107  16C9  00A4               	movwf	??___awdiv
 16108  16CA  0824               	movf	??___awdiv,w
 16109  16CB  07A5               	addwf	___awdiv@counter,f
 16110  16CC  2EC1               	goto	l5776
 16111  16CD                     l5778:	
 16112  16CD  3001               	movlw	1
 16113  16CE                     u4735:	
 16114  16CE  35A7               	lslf	___awdiv@quotient,f
 16115  16CF  0DA8               	rlf	___awdiv@quotient+1,f
 16116  16D0  0B89               	decfsz	9,f
 16117  16D1  2ECE               	goto	u4735
 16118  16D2  0821               	movf	___awdiv@divisor+1,w
 16119  16D3  0223               	subwf	___awdiv@dividend+1,w
 16120  16D4  1D03               	skipz
 16121  16D5  2ED8               	goto	u4745
 16122  16D6  0820               	movf	___awdiv@divisor,w
 16123  16D7  0222               	subwf	___awdiv@dividend,w
 16124  16D8                     u4745:	
 16125  16D8  1C03               	skipc
 16126  16D9  2EDF               	goto	l5784
 16127  16DA  0820               	movf	___awdiv@divisor,w
 16128  16DB  02A2               	subwf	___awdiv@dividend,f
 16129  16DC  0821               	movf	___awdiv@divisor+1,w
 16130  16DD  3BA3               	subwfb	___awdiv@dividend+1,f
 16131  16DE  1427               	bsf	___awdiv@quotient,0
 16132  16DF                     l5784:	
 16133  16DF  3001               	movlw	1
 16134  16E0                     u4755:	
 16135  16E0  36A1               	lsrf	___awdiv@divisor+1,f
 16136  16E1  0CA0               	rrf	___awdiv@divisor,f
 16137  16E2  0B89               	decfsz	9,f
 16138  16E3  2EE0               	goto	u4755
 16139  16E4  3001               	movlw	1
 16140  16E5  02A5               	subwf	___awdiv@counter,f
 16141  16E6  1D03               	btfss	3,2
 16142  16E7  2ECD               	goto	l5778
 16143  16E8                     l5788:	
 16144  16E8  0826               	movf	___awdiv@sign,w
 16145  16E9  1903               	btfsc	3,2
 16146  16EA  2EF0               	goto	l5792
 16147  16EB  09A7               	comf	___awdiv@quotient,f
 16148  16EC  09A8               	comf	___awdiv@quotient+1,f
 16149  16ED  0AA7               	incf	___awdiv@quotient,f
 16150  16EE  1903               	skipnz
 16151  16EF  0AA8               	incf	___awdiv@quotient+1,f
 16152  16F0                     l5792:	
 16153  16F0  0828               	movf	___awdiv@quotient+1,w
 16154  16F1  01A1               	clrf	?___awdiv+1
 16155  16F2  07A1               	addwf	?___awdiv+1,f
 16156  16F3  0827               	movf	___awdiv@quotient,w
 16157  16F4  01A0               	clrf	?___awdiv
 16158  16F5  07A0               	addwf	?___awdiv,f
 16159  16F6  0008               	return
 16160  16F7                     __end_of___awdiv:	
 16161                           
 16162                           	psect	text105
 16163  1CD1                     __ptext105:	
 16164 ;; *************** function _DelayOff_Initialization *****************
 16165 ;; Defined at:
 16166 ;;		line 26 in file "../src/DelayOff_B1.c"
 16167 ;; Parameters:    Size  Location     Type
 16168 ;;		None
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;		None
 16171 ;; Return value:  Size  Location     Type
 16172 ;;		None               void
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:        0 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    7
 16187 ;; This function calls:
 16188 ;;		_DlyOff_Initialization
 16189 ;; This function is called by:
 16190 ;;		_main
 16191 ;; This function uses a non-reentrant model
 16192 ;;
 16193                           
 16194                           
 16195                           ;psect for function _DelayOff_Initialization
 16196  1CD1                     _DelayOff_Initialization:	
 16197                           
 16198                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16199                           
 16200                           ;incstack = 0
 16201                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16202  1CD1  3001               	movlw	1
 16203  1CD2  319C  24EA         	fcall	_DlyOff_Initialization
 16204  1CD4  0008               	return
 16205  1CD5                     __end_of_DelayOff_Initialization:	
 16206                           
 16207                           	psect	text106
 16208  1CEA                     __ptext106:	
 16209 ;; *************** function _DlyOff_Initialization *****************
 16210 ;; Defined at:
 16211 ;;		line 56 in file "../src/DelayOff_B1.c"
 16212 ;; Parameters:    Size  Location     Type
 16213 ;;  sw              1    wreg     unsigned char 
 16214 ;; Auto vars:     Size  Location     Type
 16215 ;;  sw              1    2[BANK0 ] unsigned char 
 16216 ;; Return value:  Size  Location     Type
 16217 ;;		None               void
 16218 ;; Registers used:
 16219 ;;		wreg, status,2, status,0, pclath, cstack
 16220 ;; Tracked objects:
 16221 ;;		On entry : 0/0
 16222 ;;		On exit  : 0/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:        1 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; Hardware stack levels required when called:    6
 16232 ;; This function calls:
 16233 ;;		_DelayOffPointSelect
 16234 ;; This function is called by:
 16235 ;;		_DelayOff_Initialization
 16236 ;; This function uses a non-reentrant model
 16237 ;;
 16238                           
 16239                           
 16240                           ;psect for function _DlyOff_Initialization
 16241  1CEA                     _DlyOff_Initialization:	
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16245                           ;DlyOff_Initialization@sw stored from wreg
 16246  1CEA  0020               	movlb	0	; select bank0
 16247  1CEB  00A2               	movwf	DlyOff_Initialization@sw
 16248                           
 16249                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16250  1CEC  0822               	movf	DlyOff_Initialization@sw,w
 16251  1CED  319D  254D         	fcall	_DelayOffPointSelect
 16252  1CEF  0008               	return
 16253  1CF0                     __end_of_DlyOff_Initialization:	
 16254                           
 16255                           	psect	text107
 16256  1D4D                     __ptext107:	
 16257 ;; *************** function _DelayOffPointSelect *****************
 16258 ;; Defined at:
 16259 ;;		line 7 in file "../src/DelayOff_B1.c"
 16260 ;; Parameters:    Size  Location     Type
 16261 ;;  sw              1    wreg     unsigned char 
 16262 ;; Auto vars:     Size  Location     Type
 16263 ;;  sw              1    1[BANK0 ] unsigned char 
 16264 ;; Return value:  Size  Location     Type
 16265 ;;		None               void
 16266 ;; Registers used:
 16267 ;;		wreg
 16268 ;; Tracked objects:
 16269 ;;		On entry : 0/0
 16270 ;;		On exit  : 0/0
 16271 ;;		Unchanged: 0/0
 16272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;Total ram usage:        2 bytes
 16278 ;; Hardware stack levels used:    1
 16279 ;; Hardware stack levels required when called:    5
 16280 ;; This function calls:
 16281 ;;		Nothing
 16282 ;; This function is called by:
 16283 ;;		_DlyOff_Initialization
 16284 ;;		_DlyOff_Main
 16285 ;;		_setDelayOff_GO
 16286 ;;		_getDelayOff_GO
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           
 16291                           ;psect for function _DelayOffPointSelect
 16292  1D4D                     _DelayOffPointSelect:	
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _DelayOffPointSelect: [wreg]
 16296                           ;DelayOffPointSelect@sw stored from wreg
 16297  1D4D  0020               	movlb	0	; select bank0
 16298  1D4E  00A1               	movwf	DelayOffPointSelect@sw
 16299                           
 16300                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16301  1D4F  0821               	movf	DelayOffPointSelect@sw,w
 16302  1D50  3A01               	xorlw	1
 16303  1D51  1D03               	skipz
 16304  1D52  0008               	return
 16305                           
 16306                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16307  1D53  30DD               	movlw	_DlySw1& (0+255)
 16308  1D54  00A0               	movwf	??_DelayOffPointSelect
 16309  1D55  0820               	movf	??_DelayOffPointSelect,w
 16310  1D56  00F8               	movwf	_DelayOff
 16311  1D57  0008               	return
 16312  1D58                     __end_of_DelayOffPointSelect:	
 16313                           
 16314                           	psect	text108
 16315  1F47                     __ptext108:	
 16316 ;; *************** function _CC2500_PowerOnInitial *****************
 16317 ;; Defined at:
 16318 ;;		line 119 in file "../src/CC2500_B1.c"
 16319 ;; Parameters:    Size  Location     Type
 16320 ;;		None
 16321 ;; Auto vars:     Size  Location     Type
 16322 ;;		None
 16323 ;; Return value:  Size  Location     Type
 16324 ;;		None               void
 16325 ;; Registers used:
 16326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16327 ;; Tracked objects:
 16328 ;;		On entry : 0/0
 16329 ;;		On exit  : 0/0
 16330 ;;		Unchanged: 0/0
 16331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;Total ram usage:        0 bytes
 16337 ;; Hardware stack levels used:    1
 16338 ;; Hardware stack levels required when called:    8
 16339 ;; This function calls:
 16340 ;;		_CC2500_ClearRXFIFO
 16341 ;;		_CC2500_ClearTXFIFO
 16342 ;;		_CC2500_FrequencyCabr
 16343 ;;		_CC2500_InitPATable
 16344 ;;		_CC2500_InitSetREG
 16345 ;;		_CC2500_PowerRST
 16346 ;;		_CC2500_SIDLEMode
 16347 ;; This function is called by:
 16348 ;;		_main
 16349 ;; This function uses a non-reentrant model
 16350 ;;
 16351                           
 16352                           
 16353                           ;psect for function _CC2500_PowerOnInitial
 16354  1F47                     _CC2500_PowerOnInitial:	
 16355                           
 16356                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16357                           
 16358                           ;incstack = 0
 16359                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16360  1F47  3194  24E5  319F   	fcall	_CC2500_PowerRST
 16361                           
 16362                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16363  1F4A  3191  21AC  319F   	fcall	_CC2500_InitSetREG
 16364                           
 16365                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16366  1F4D  319F  27E1  319F   	fcall	_CC2500_InitPATable
 16367                           
 16368                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16369  1F50  319C  24C9  319F   	fcall	_CC2500_ClearTXFIFO
 16370                           
 16371                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16372  1F53  319C  24C5  319F   	fcall	_CC2500_ClearRXFIFO
 16373                           
 16374                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16375  1F56  319D  259A  319F   	fcall	_CC2500_FrequencyCabr
 16376                           
 16377                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16378  1F59  319C  24CD         	fcall	_CC2500_SIDLEMode
 16379  1F5B  0008               	return
 16380  1F5C                     __end_of_CC2500_PowerOnInitial:	
 16381                           
 16382                           	psect	text109
 16383  1CCD                     __ptext109:	
 16384 ;; *************** function _CC2500_SIDLEMode *****************
 16385 ;; Defined at:
 16386 ;;		line 209 in file "../src/CC2500_B1.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;		None
 16391 ;; Return value:  Size  Location     Type
 16392 ;;		None               void
 16393 ;; Registers used:
 16394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;Total ram usage:        0 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    7
 16407 ;; This function calls:
 16408 ;;		_CC2500_WriteCommand
 16409 ;; This function is called by:
 16410 ;;		_CC2500_PowerOnInitial
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           
 16415                           ;psect for function _CC2500_SIDLEMode
 16416  1CCD                     _CC2500_SIDLEMode:	
 16417                           
 16418                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16422  1CCD  3036               	movlw	54
 16423  1CCE  319F  2774         	fcall	_CC2500_WriteCommand
 16424  1CD0  0008               	return
 16425  1CD1                     __end_of_CC2500_SIDLEMode:	
 16426                           
 16427                           	psect	text110
 16428  14E5                     __ptext110:	
 16429 ;; *************** function _CC2500_PowerRST *****************
 16430 ;; Defined at:
 16431 ;;		line 132 in file "../src/CC2500_B1.c"
 16432 ;; Parameters:    Size  Location     Type
 16433 ;;		None
 16434 ;; Auto vars:     Size  Location     Type
 16435 ;;		None
 16436 ;; Return value:  Size  Location     Type
 16437 ;;		None               void
 16438 ;; Registers used:
 16439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:        1 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    6
 16452 ;; This function calls:
 16453 ;;		_CC2500_WriteByte
 16454 ;;		_DelayTime_1us
 16455 ;;		_Timeout_Counter
 16456 ;;		_set_TimeoutCleared
 16457 ;; This function is called by:
 16458 ;;		_CC2500_PowerOnInitial
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           
 16463                           ;psect for function _CC2500_PowerRST
 16464  14E5                     _CC2500_PowerRST:	
 16465                           
 16466                           ;CC2500_B1.c: 133: RC3 = 0;
 16467                           
 16468                           ;incstack = 0
 16469                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16470  14E5  0020               	movlb	0	; select bank0
 16471  14E6  118E               	bcf	14,3	;volatile
 16472                           
 16473                           ;CC2500_B1.c: 134: RC4 = 0;
 16474  14E7  120E               	bcf	14,4	;volatile
 16475                           
 16476                           ;CC2500_B1.c: 135: RC0 = 1;
 16477  14E8  140E               	bsf	14,0	;volatile
 16478                           
 16479                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16480  14E9  300A               	movlw	10
 16481  14EA  00A0               	movwf	DelayTime_1us@count
 16482  14EB  3000               	movlw	0
 16483  14EC  00A1               	movwf	DelayTime_1us@count+1
 16484  14ED  3188  2000  3194   	fcall	_DelayTime_1us
 16485                           
 16486                           ;CC2500_B1.c: 137: RC0 = 0;
 16487  14F0  0020               	movlb	0	; select bank0
 16488  14F1  100E               	bcf	14,0	;volatile
 16489                           
 16490                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16491  14F2  300A               	movlw	10
 16492  14F3  00A0               	movwf	DelayTime_1us@count
 16493  14F4  3000               	movlw	0
 16494  14F5  00A1               	movwf	DelayTime_1us@count+1
 16495  14F6  3188  2000  3194   	fcall	_DelayTime_1us
 16496                           
 16497                           ;CC2500_B1.c: 139: RC0 = 1;
 16498  14F9  0020               	movlb	0	; select bank0
 16499  14FA  140E               	bsf	14,0	;volatile
 16500                           
 16501                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16502  14FB  3028               	movlw	40
 16503  14FC  00A0               	movwf	DelayTime_1us@count
 16504  14FD  3000               	movlw	0
 16505  14FE  00A1               	movwf	DelayTime_1us@count+1
 16506  14FF  3188  2000  3194   	fcall	_DelayTime_1us
 16507                           
 16508                           ;CC2500_B1.c: 141: RC0 = 0;
 16509  1502  0020               	movlb	0	; select bank0
 16510  1503  100E               	bcf	14,0	;volatile
 16511                           
 16512                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16513  1504  3030               	movlw	48
 16514  1505  00A6               	movwf	??_CC2500_PowerRST
 16515  1506  0826               	movf	??_CC2500_PowerRST,w
 16516  1507  00FB               	movwf	_SPI0Buffer
 16517                           
 16518                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16519  1508  2D0C               	goto	l6630
 16520  1509                     l6628:	
 16521                           
 16522                           ;CC2500_B1.c: 144: Timeout_Counter();
 16523  1509  319F  2732  3194   	fcall	_Timeout_Counter
 16524  150C                     l6630:	
 16525  150C  0020               	movlb	0	; select bank0
 16526  150D  1E8E               	btfss	14,5	;volatile
 16527  150E  2D12               	goto	l6634
 16528  150F  0021               	movlb	1	; select bank1
 16529  1510  1D2C               	btfss	(_myMain^(0+128)+12),2
 16530  1511  2D09               	goto	l6628
 16531  1512                     l6634:	
 16532                           
 16533                           ;CC2500_B1.c: 145: };
 16534                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16535  1512  319C  24E5  3194   	fcall	_set_TimeoutCleared
 16536                           
 16537                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 16538  1515  319F  270A  3194   	fcall	_CC2500_WriteByte
 16539                           
 16540                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 16541  1518  2D1C               	goto	l6640
 16542  1519                     l6638:	
 16543                           
 16544                           ;CC2500_B1.c: 149: Timeout_Counter();
 16545  1519  319F  2732  3194   	fcall	_Timeout_Counter
 16546  151C                     l6640:	
 16547  151C  0020               	movlb	0	; select bank0
 16548  151D  1E8E               	btfss	14,5	;volatile
 16549  151E  2D22               	goto	l6644
 16550  151F  0021               	movlb	1	; select bank1
 16551  1520  1D2C               	btfss	(_myMain^(0+128)+12),2
 16552  1521  2D19               	goto	l6638
 16553  1522                     l6644:	
 16554                           
 16555                           ;CC2500_B1.c: 150: };
 16556                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 16557  1522  319C  24E5         	fcall	_set_TimeoutCleared
 16558                           
 16559                           ;CC2500_B1.c: 152: RC4 = 0;
 16560  1524  0020               	movlb	0	; select bank0
 16561  1525  120E               	bcf	14,4	;volatile
 16562                           
 16563                           ;CC2500_B1.c: 153: RC0 = 1;
 16564  1526  140E               	bsf	14,0	;volatile
 16565  1527  0008               	return
 16566  1528                     __end_of_CC2500_PowerRST:	
 16567                           
 16568                           	psect	text111
 16569  11AC                     __ptext111:	
 16570 ;; *************** function _CC2500_InitSetREG *****************
 16571 ;; Defined at:
 16572 ;;		line 159 in file "../src/CC2500_B1.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16577 ;;  temp2           1    7[BANK0 ] unsigned char 
 16578 ;;  temp1           1    6[BANK0 ] unsigned char 
 16579 ;; Return value:  Size  Location     Type
 16580 ;;		None               void
 16581 ;; Registers used:
 16582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;Total ram usage:        4 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    7
 16595 ;; This function calls:
 16596 ;;		_CC2500_WriteREG
 16597 ;; This function is called by:
 16598 ;;		_CC2500_PowerOnInitial
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           
 16603                           ;psect for function _CC2500_InitSetREG
 16604  11AC                     _CC2500_InitSetREG:	
 16605                           
 16606                           ;CC2500_B1.c: 160: unsigned char loop_c;
 16607                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 16608                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 16609                           
 16610                           ;incstack = 0
 16611                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16612  11AC  0020               	movlb	0	; select bank0
 16613  11AD  01A8               	clrf	CC2500_InitSetREG@loop_c
 16614  11AE                     L8:	
 16615  11AE  302F               	movlw	47
 16616  11AF  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16617  11B0  1803               	btfsc	3,0
 16618  11B1  0008               	return
 16619                           
 16620                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 16621  11B2  0828               	movf	CC2500_InitSetREG@loop_c,w
 16622  11B3  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16623  11B4  0084               	movwf	4
 16624  11B5  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16625  11B6  1803               	skipnc
 16626  11B7  3E01               	addlw	1
 16627  11B8  0085               	movwf	5
 16628  11B9  0800               	movf	0,w	;code access
 16629  11BA  00A5               	movwf	??_CC2500_InitSetREG
 16630  11BB  0825               	movf	??_CC2500_InitSetREG,w
 16631  11BC  00A6               	movwf	CC2500_InitSetREG@temp1
 16632                           
 16633                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 16634  11BD  0828               	movf	CC2500_InitSetREG@loop_c,w
 16635  11BE  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16636  11BF  0084               	movwf	4
 16637  11C0  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16638  11C1  1803               	skipnc
 16639  11C2  3E01               	addlw	1
 16640  11C3  0085               	movwf	5
 16641  11C4  0800               	movf	0,w	;code access
 16642  11C5  00A5               	movwf	??_CC2500_InitSetREG
 16643  11C6  0825               	movf	??_CC2500_InitSetREG,w
 16644  11C7  00A7               	movwf	CC2500_InitSetREG@temp2
 16645                           
 16646                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 16647  11C8  0827               	movf	CC2500_InitSetREG@temp2,w
 16648  11C9  00A5               	movwf	??_CC2500_InitSetREG
 16649  11CA  0825               	movf	??_CC2500_InitSetREG,w
 16650  11CB  00A2               	movwf	CC2500_WriteREG@value
 16651  11CC  0826               	movf	CC2500_InitSetREG@temp1,w
 16652  11CD  3190  20FB  3191   	fcall	_CC2500_WriteREG
 16653  11D0  3001               	movlw	1
 16654  11D1  0020               	movlb	0	; select bank0
 16655  11D2  00A5               	movwf	??_CC2500_InitSetREG
 16656  11D3  0825               	movf	??_CC2500_InitSetREG,w
 16657  11D4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16658  11D5  29AE               	goto	L8
 16659  11D6                     __end_of_CC2500_InitSetREG:	
 16660                           
 16661                           	psect	text112
 16662  1FE1                     __ptext112:	
 16663 ;; *************** function _CC2500_InitPATable *****************
 16664 ;; Defined at:
 16665 ;;		line 174 in file "../src/CC2500_B1.c"
 16666 ;; Parameters:    Size  Location     Type
 16667 ;;		None
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16670 ;;  temp            1    6[BANK0 ] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;		None               void
 16673 ;; Registers used:
 16674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;Total ram usage:        3 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    7
 16687 ;; This function calls:
 16688 ;;		_CC2500_WriteREG
 16689 ;; This function is called by:
 16690 ;;		_CC2500_PowerOnInitial
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           
 16695                           ;psect for function _CC2500_InitPATable
 16696  1FE1                     _CC2500_InitPATable:	
 16697                           
 16698                           ;CC2500_B1.c: 175: unsigned char loop_d;
 16699                           ;CC2500_B1.c: 176: unsigned char temp;
 16700                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 16701                           
 16702                           ;incstack = 0
 16703                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16704  1FE1  0020               	movlb	0	; select bank0
 16705  1FE2  01A7               	clrf	CC2500_InitPATable@loop_d
 16706  1FE3                     L9:	
 16707  1FE3  3008               	movlw	8
 16708  1FE4  0227               	subwf	CC2500_InitPATable@loop_d,w
 16709  1FE5  1803               	btfsc	3,0
 16710  1FE6  0008               	return
 16711                           
 16712                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 16713  1FE7  0827               	movf	CC2500_InitPATable@loop_d,w
 16714  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16715  1FE9  0084               	movwf	4
 16716  1FEA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16717  1FEB  1803               	skipnc
 16718  1FEC  3E01               	addlw	1
 16719  1FED  0085               	movwf	5
 16720  1FEE  0800               	movf	0,w	;code access
 16721  1FEF  00A5               	movwf	??_CC2500_InitPATable
 16722  1FF0  0825               	movf	??_CC2500_InitPATable,w
 16723  1FF1  00A6               	movwf	CC2500_InitPATable@temp
 16724                           
 16725                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 16726  1FF2  0826               	movf	CC2500_InitPATable@temp,w
 16727  1FF3  00A5               	movwf	??_CC2500_InitPATable
 16728  1FF4  0825               	movf	??_CC2500_InitPATable,w
 16729  1FF5  00A2               	movwf	CC2500_WriteREG@value
 16730  1FF6  303E               	movlw	62
 16731  1FF7  3190  20FB  319F   	fcall	_CC2500_WriteREG
 16732  1FFA  3001               	movlw	1
 16733  1FFB  0020               	movlb	0	; select bank0
 16734  1FFC  00A5               	movwf	??_CC2500_InitPATable
 16735  1FFD  0825               	movf	??_CC2500_InitPATable,w
 16736  1FFE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16737  1FFF  2FE3               	goto	L9
 16738  2000                     __end_of_CC2500_InitPATable:	
 16739                           
 16740                           	psect	text113
 16741  10FB                     __ptext113:	
 16742 ;; *************** function _CC2500_WriteREG *****************
 16743 ;; Defined at:
 16744 ;;		line 251 in file "../src/CC2500_B1.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;  w_addr          1    wreg     unsigned char 
 16747 ;;  value           1    2[BANK0 ] unsigned char 
 16748 ;; Auto vars:     Size  Location     Type
 16749 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16750 ;; Return value:  Size  Location     Type
 16751 ;;		None               void
 16752 ;; Registers used:
 16753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16754 ;; Tracked objects:
 16755 ;;		On entry : 0/0
 16756 ;;		On exit  : 0/0
 16757 ;;		Unchanged: 0/0
 16758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16759 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;Total ram usage:        3 bytes
 16764 ;; Hardware stack levels used:    1
 16765 ;; Hardware stack levels required when called:    6
 16766 ;; This function calls:
 16767 ;;		_CC2500_WriteByte
 16768 ;;		_Timeout_Counter
 16769 ;;		_set_TimeoutCleared
 16770 ;; This function is called by:
 16771 ;;		_CC2500_InitSetREG
 16772 ;;		_CC2500_InitPATable
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           
 16777                           ;psect for function _CC2500_WriteREG
 16778  10FB                     _CC2500_WriteREG:	
 16779                           
 16780                           ;incstack = 0
 16781                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16782                           ;CC2500_WriteREG@w_addr stored from wreg
 16783  10FB  0020               	movlb	0	; select bank0
 16784  10FC  00A4               	movwf	CC2500_WriteREG@w_addr
 16785                           
 16786                           ;CC2500_B1.c: 252: RC0 = 0;
 16787  10FD  100E               	bcf	14,0	;volatile
 16788                           
 16789                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 16790  10FE  0824               	movf	CC2500_WriteREG@w_addr,w
 16791  10FF  00A3               	movwf	??_CC2500_WriteREG
 16792  1100  0823               	movf	??_CC2500_WriteREG,w
 16793  1101  00FB               	movwf	_SPI0Buffer
 16794                           
 16795                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 16796  1102  2906               	goto	l6298
 16797  1103                     l6296:	
 16798                           
 16799                           ;CC2500_B1.c: 255: Timeout_Counter();
 16800  1103  319F  2732  3190   	fcall	_Timeout_Counter
 16801  1106                     l6298:	
 16802  1106  0020               	movlb	0	; select bank0
 16803  1107  1E8E               	btfss	14,5	;volatile
 16804  1108  290C               	goto	l6302
 16805  1109  0021               	movlb	1	; select bank1
 16806  110A  1D2C               	btfss	(_myMain^(0+128)+12),2
 16807  110B  2903               	goto	l6296
 16808  110C                     l6302:	
 16809                           
 16810                           ;CC2500_B1.c: 256: };
 16811                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 16812  110C  319C  24E5  3190   	fcall	_set_TimeoutCleared
 16813                           
 16814                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 16815  110F  319F  270A  3190   	fcall	_CC2500_WriteByte
 16816                           
 16817                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 16818  1112  0020               	movlb	0	; select bank0
 16819  1113  0822               	movf	CC2500_WriteREG@value,w
 16820  1114  00A3               	movwf	??_CC2500_WriteREG
 16821  1115  0823               	movf	??_CC2500_WriteREG,w
 16822  1116  00FB               	movwf	_SPI0Buffer
 16823                           
 16824                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 16825  1117  319F  270A         	fcall	_CC2500_WriteByte
 16826                           
 16827                           ;CC2500_B1.c: 262: RC0 = 1;
 16828  1119  0020               	movlb	0	; select bank0
 16829  111A  140E               	bsf	14,0	;volatile
 16830  111B  0008               	return
 16831  111C                     __end_of_CC2500_WriteREG:	
 16832                           
 16833                           	psect	text114
 16834  1D9A                     __ptext114:	
 16835 ;; *************** function _CC2500_FrequencyCabr *****************
 16836 ;; Defined at:
 16837 ;;		line 201 in file "../src/CC2500_B1.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;		None
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;		None
 16842 ;; Return value:  Size  Location     Type
 16843 ;;		None               void
 16844 ;; Registers used:
 16845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16846 ;; Tracked objects:
 16847 ;;		On entry : 0/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;Total ram usage:        0 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    7
 16858 ;; This function calls:
 16859 ;;		_CC2500_WriteCommand
 16860 ;;		_DelayTime_1us
 16861 ;; This function is called by:
 16862 ;;		_CC2500_PowerOnInitial
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           
 16867                           ;psect for function _CC2500_FrequencyCabr
 16868  1D9A                     _CC2500_FrequencyCabr:	
 16869                           
 16870                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 16871                           
 16872                           ;incstack = 0
 16873                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16874  1D9A  3033               	movlw	51
 16875  1D9B  319F  2774  319D   	fcall	_CC2500_WriteCommand
 16876                           
 16877                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 16878  1D9E  30E8               	movlw	232
 16879  1D9F  0020               	movlb	0	; select bank0
 16880  1DA0  00A0               	movwf	DelayTime_1us@count
 16881  1DA1  3003               	movlw	3
 16882  1DA2  00A1               	movwf	DelayTime_1us@count+1
 16883  1DA3  3188  2000         	fcall	_DelayTime_1us
 16884  1DA5  0008               	return
 16885  1DA6                     __end_of_CC2500_FrequencyCabr:	
 16886                           
 16887                           	psect	text115
 16888  0800                     __ptext115:	
 16889 ;; *************** function _DelayTime_1us *****************
 16890 ;; Defined at:
 16891 ;;		line 320 in file "../src/CC2500_B1.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;  count           2    0[BANK0 ] int 
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;  j               2    4[BANK0 ] unsigned int 
 16896 ;;  i               2    2[BANK0 ] unsigned int 
 16897 ;; Return value:  Size  Location     Type
 16898 ;;		None               void
 16899 ;; Registers used:
 16900 ;;		wreg, status,2
 16901 ;; Tracked objects:
 16902 ;;		On entry : 0/0
 16903 ;;		On exit  : 0/0
 16904 ;;		Unchanged: 0/0
 16905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16906 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;Total ram usage:        6 bytes
 16911 ;; Hardware stack levels used:    1
 16912 ;; Hardware stack levels required when called:    5
 16913 ;; This function calls:
 16914 ;;		Nothing
 16915 ;; This function is called by:
 16916 ;;		_CC2500_PowerRST
 16917 ;;		_CC2500_FrequencyCabr
 16918 ;; This function uses a non-reentrant model
 16919 ;;
 16920                           
 16921                           
 16922                           ;psect for function _DelayTime_1us
 16923  0800                     _DelayTime_1us:	
 16924                           
 16925                           ;CC2500_B1.c: 321: unsigned int i, j;
 16926                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 16927                           
 16928                           ;incstack = 0
 16929                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16930  0800  3001               	movlw	1
 16931  0801  0020               	movlb	0	; select bank0
 16932  0802  00A2               	movwf	DelayTime_1us@i
 16933  0803  3000               	movlw	0
 16934  0804  00A3               	movwf	DelayTime_1us@i+1
 16935  0805                     l348:	
 16936  0805  0821               	movf	DelayTime_1us@count+1,w
 16937  0806  0223               	subwf	DelayTime_1us@i+1,w
 16938  0807  1D03               	skipz
 16939  0808  280B               	goto	u5385
 16940  0809  0820               	movf	DelayTime_1us@count,w
 16941  080A  0222               	subwf	DelayTime_1us@i,w
 16942  080B                     u5385:	
 16943  080B  1803               	btfsc	3,0
 16944  080C  0008               	return
 16945                           
 16946                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 16947  080D  01A4               	clrf	DelayTime_1us@j
 16948  080E  01A5               	clrf	DelayTime_1us@j+1
 16949  080F  3000               	movlw	0
 16950  0810  0225               	subwf	DelayTime_1us@j+1,w
 16951  0811  3002               	movlw	2
 16952  0812  1903               	skipnz
 16953  0813  0224               	subwf	DelayTime_1us@j,w
 16954  0814  1803               	btfsc	3,0
 16955  0815  2821               	goto	l6290
 16956  0816                     l6288:	
 16957  0816  3001               	movlw	1
 16958  0817  07A4               	addwf	DelayTime_1us@j,f
 16959  0818  3000               	movlw	0
 16960  0819  3DA5               	addwfc	DelayTime_1us@j+1,f
 16961  081A  3000               	movlw	0
 16962  081B  0225               	subwf	DelayTime_1us@j+1,w
 16963  081C  3002               	movlw	2
 16964  081D  1903               	skipnz
 16965  081E  0224               	subwf	DelayTime_1us@j,w
 16966  081F  1C03               	skipc
 16967  0820  2816               	goto	l6288
 16968  0821                     l6290:	
 16969  0821  3001               	movlw	1
 16970  0822  07A2               	addwf	DelayTime_1us@i,f
 16971  0823  3000               	movlw	0
 16972  0824  3DA3               	addwfc	DelayTime_1us@i+1,f
 16973  0825  2805               	goto	l348
 16974  0826                     __end_of_DelayTime_1us:	
 16975                           
 16976                           	psect	text116
 16977  1CC9                     __ptext116:	
 16978 ;; *************** function _CC2500_ClearTXFIFO *****************
 16979 ;; Defined at:
 16980 ;;		line 187 in file "../src/CC2500_B1.c"
 16981 ;; Parameters:    Size  Location     Type
 16982 ;;		None
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;		None
 16985 ;; Return value:  Size  Location     Type
 16986 ;;		None               void
 16987 ;; Registers used:
 16988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;Total ram usage:        0 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    7
 17001 ;; This function calls:
 17002 ;;		_CC2500_WriteCommand
 17003 ;; This function is called by:
 17004 ;;		_CC2500_PowerOnInitial
 17005 ;; This function uses a non-reentrant model
 17006 ;;
 17007                           
 17008                           
 17009                           ;psect for function _CC2500_ClearTXFIFO
 17010  1CC9                     _CC2500_ClearTXFIFO:	
 17011                           
 17012                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17013                           
 17014                           ;incstack = 0
 17015                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17016  1CC9  303B               	movlw	59
 17017  1CCA  319F  2774         	fcall	_CC2500_WriteCommand
 17018  1CCC  0008               	return
 17019  1CCD                     __end_of_CC2500_ClearTXFIFO:	
 17020                           
 17021                           	psect	text117
 17022  1CC5                     __ptext117:	
 17023 ;; *************** function _CC2500_ClearRXFIFO *****************
 17024 ;; Defined at:
 17025 ;;		line 194 in file "../src/CC2500_B1.c"
 17026 ;; Parameters:    Size  Location     Type
 17027 ;;		None
 17028 ;; Auto vars:     Size  Location     Type
 17029 ;;		None
 17030 ;; Return value:  Size  Location     Type
 17031 ;;		None               void
 17032 ;; Registers used:
 17033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17034 ;; Tracked objects:
 17035 ;;		On entry : 0/0
 17036 ;;		On exit  : 0/0
 17037 ;;		Unchanged: 0/0
 17038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17043 ;;Total ram usage:        0 bytes
 17044 ;; Hardware stack levels used:    1
 17045 ;; Hardware stack levels required when called:    7
 17046 ;; This function calls:
 17047 ;;		_CC2500_WriteCommand
 17048 ;; This function is called by:
 17049 ;;		_CC2500_PowerOnInitial
 17050 ;; This function uses a non-reentrant model
 17051 ;;
 17052                           
 17053                           
 17054                           ;psect for function _CC2500_ClearRXFIFO
 17055  1CC5                     _CC2500_ClearRXFIFO:	
 17056                           
 17057                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17058                           
 17059                           ;incstack = 0
 17060                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17061  1CC5  303A               	movlw	58
 17062  1CC6  319F  2774         	fcall	_CC2500_WriteCommand
 17063  1CC8  0008               	return
 17064  1CC9                     __end_of_CC2500_ClearRXFIFO:	
 17065                           
 17066                           	psect	text118
 17067  1F74                     __ptext118:	
 17068 ;; *************** function _CC2500_WriteCommand *****************
 17069 ;; Defined at:
 17070 ;;		line 285 in file "../src/CC2500_B1.c"
 17071 ;; Parameters:    Size  Location     Type
 17072 ;;  command         1    wreg     unsigned char 
 17073 ;; Auto vars:     Size  Location     Type
 17074 ;;  command         1    3[BANK0 ] unsigned char 
 17075 ;; Return value:  Size  Location     Type
 17076 ;;		None               void
 17077 ;; Registers used:
 17078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17079 ;; Tracked objects:
 17080 ;;		On entry : 0/0
 17081 ;;		On exit  : 0/0
 17082 ;;		Unchanged: 0/0
 17083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;Total ram usage:        2 bytes
 17089 ;; Hardware stack levels used:    1
 17090 ;; Hardware stack levels required when called:    6
 17091 ;; This function calls:
 17092 ;;		_CC2500_WriteByte
 17093 ;;		_Timeout_Counter
 17094 ;;		_set_TimeoutCleared
 17095 ;; This function is called by:
 17096 ;;		_CC2500_TxData
 17097 ;;		_CC2500_ClearTXFIFO
 17098 ;;		_CC2500_ClearRXFIFO
 17099 ;;		_CC2500_FrequencyCabr
 17100 ;;		_CC2500_SIDLEMode
 17101 ;;		_RF_RxDisable
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           
 17106                           ;psect for function _CC2500_WriteCommand
 17107  1F74                     _CC2500_WriteCommand:	
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17111                           ;CC2500_WriteCommand@command stored from wreg
 17112  1F74  0020               	movlb	0	; select bank0
 17113  1F75  00A3               	movwf	CC2500_WriteCommand@command
 17114                           
 17115                           ;CC2500_B1.c: 286: RC0 = 0;
 17116  1F76  100E               	bcf	14,0	;volatile
 17117                           
 17118                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17119  1F77  0823               	movf	CC2500_WriteCommand@command,w
 17120  1F78  00A2               	movwf	??_CC2500_WriteCommand
 17121  1F79  0822               	movf	??_CC2500_WriteCommand,w
 17122  1F7A  00FB               	movwf	_SPI0Buffer
 17123                           
 17124                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17125  1F7B  2F7F               	goto	l6104
 17126  1F7C                     l6102:	
 17127                           
 17128                           ;CC2500_B1.c: 290: Timeout_Counter();
 17129  1F7C  319F  2732  319F   	fcall	_Timeout_Counter
 17130  1F7F                     l6104:	
 17131  1F7F  0020               	movlb	0	; select bank0
 17132  1F80  1E8E               	btfss	14,5	;volatile
 17133  1F81  2F85               	goto	l6108
 17134  1F82  0021               	movlb	1	; select bank1
 17135  1F83  1D2C               	btfss	(_myMain^(0+128)+12),2
 17136  1F84  2F7C               	goto	l6102
 17137  1F85                     l6108:	
 17138                           
 17139                           ;CC2500_B1.c: 291: };
 17140                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17141  1F85  319C  24E5  319F   	fcall	_set_TimeoutCleared
 17142                           
 17143                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17144  1F88  319F  270A         	fcall	_CC2500_WriteByte
 17145                           
 17146                           ;CC2500_B1.c: 295: RC0 = 1;
 17147  1F8A  0020               	movlb	0	; select bank0
 17148  1F8B  140E               	bsf	14,0	;volatile
 17149  1F8C  0008               	return
 17150  1F8D                     __end_of_CC2500_WriteCommand:	
 17151                           
 17152                           	psect	text119
 17153  1CE5                     __ptext119:	
 17154 ;; *************** function _set_TimeoutCleared *****************
 17155 ;; Defined at:
 17156 ;;		line 276 in file "../src/Main_B1.c"
 17157 ;; Parameters:    Size  Location     Type
 17158 ;;		None
 17159 ;; Auto vars:     Size  Location     Type
 17160 ;;		None
 17161 ;; Return value:  Size  Location     Type
 17162 ;;		None               void
 17163 ;; Registers used:
 17164 ;;		status,2
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;Total ram usage:        0 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    5
 17177 ;; This function calls:
 17178 ;;		Nothing
 17179 ;; This function is called by:
 17180 ;;		_CC2500_TxData
 17181 ;;		_CC2500_PowerRST
 17182 ;;		_CC2500_WriteREG
 17183 ;;		_CC2500_WriteCommand
 17184 ;;		_getAD
 17185 ;;		_TouchPower
 17186 ;;		_CC2500_RxData
 17187 ;;		_CC2500_ReadREG
 17188 ;;		_CC2500_ReadStatus
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _set_TimeoutCleared
 17194  1CE5                     _set_TimeoutCleared:	
 17195                           
 17196                           ;Main_B1.c: 277: myMain.Timeout = 0;
 17197                           
 17198                           ;incstack = 0
 17199                           ; Regs used in _set_TimeoutCleared: [status,2]
 17200  1CE5  0021               	movlb	1	; select bank1
 17201  1CE6  112C               	bcf	(_myMain^(0+128)+12),2
 17202                           
 17203                           ;Main_B1.c: 278: myMain.Timeout_Counter = 0;
 17204  1CE7  01AD               	clrf	(_myMain^(0+128)+13)
 17205  1CE8  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17206  1CE9  0008               	return
 17207  1CEA                     __end_of_set_TimeoutCleared:	
 17208                           
 17209                           	psect	text120
 17210  1F32                     __ptext120:	
 17211 ;; *************** function _Timeout_Counter *****************
 17212 ;; Defined at:
 17213 ;;		line 267 in file "../src/Main_B1.c"
 17214 ;; Parameters:    Size  Location     Type
 17215 ;;		None
 17216 ;; Auto vars:     Size  Location     Type
 17217 ;;		None
 17218 ;; Return value:  Size  Location     Type
 17219 ;;		None               void
 17220 ;; Registers used:
 17221 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17222 ;; Tracked objects:
 17223 ;;		On entry : 0/0
 17224 ;;		On exit  : 0/0
 17225 ;;		Unchanged: 0/0
 17226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;Total ram usage:        0 bytes
 17232 ;; Hardware stack levels used:    1
 17233 ;; Hardware stack levels required when called:    5
 17234 ;; This function calls:
 17235 ;;		Nothing
 17236 ;; This function is called by:
 17237 ;;		_CC2500_TxData
 17238 ;;		_CC2500_PowerRST
 17239 ;;		_CC2500_WriteREG
 17240 ;;		_CC2500_WriteCommand
 17241 ;;		_getAD
 17242 ;;		_TouchPower
 17243 ;;		_CC2500_RxData
 17244 ;;		_CC2500_ReadREG
 17245 ;;		_CC2500_ReadStatus
 17246 ;; This function uses a non-reentrant model
 17247 ;;
 17248                           
 17249                           
 17250                           ;psect for function _Timeout_Counter
 17251  1F32                     _Timeout_Counter:	
 17252                           
 17253                           ;Main_B1.c: 268: myMain.Timeout_Counter++;
 17254                           
 17255                           ;incstack = 0
 17256                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17257  1F32  3001               	movlw	1
 17258  1F33  0021               	movlb	1	; select bank1
 17259  1F34  07AD               	addwf	(_myMain^(0+128)+13),f
 17260  1F35  3000               	movlw	0
 17261  1F36  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17262                           
 17263                           ;Main_B1.c: 269: if (myMain.Timeout_Counter == 10000) {
 17264  1F37  300D               	movlw	13
 17265  1F38  3EA0               	addlw	_myMain& (0+255)
 17266  1F39  0086               	movwf	6
 17267  1F3A  0187               	clrf	7
 17268  1F3B  3F40               	moviw [0]fsr1
 17269  1F3C  3A10               	xorlw	16
 17270  1F3D  1D03               	skipz
 17271  1F3E  2F41               	goto	u4975
 17272  1F3F  3F41               	moviw [1]fsr1
 17273  1F40  3A27               	xorlw	39
 17274  1F41                     u4975:	
 17275  1F41  1D03               	skipz
 17276  1F42  0008               	return
 17277                           
 17278                           ;Main_B1.c: 270: myMain.Timeout_Counter = 0;
 17279  1F43  01AD               	clrf	(_myMain^(0+128)+13)
 17280  1F44  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17281                           
 17282                           ;Main_B1.c: 271: myMain.Timeout = 1;
 17283  1F45  152C               	bsf	(_myMain^(0+128)+12),2
 17284  1F46  0008               	return
 17285  1F47                     __end_of_Timeout_Counter:	
 17286                           
 17287                           	psect	text121
 17288  1F0A                     __ptext121:	
 17289 ;; *************** function _CC2500_WriteByte *****************
 17290 ;; Defined at:
 17291 ;;		line 219 in file "../src/CC2500_B1.c"
 17292 ;; Parameters:    Size  Location     Type
 17293 ;;		None
 17294 ;; Auto vars:     Size  Location     Type
 17295 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;		None               void
 17298 ;; Registers used:
 17299 ;;		wreg, status,2, status,0
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;Total ram usage:        2 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:    5
 17312 ;; This function calls:
 17313 ;;		Nothing
 17314 ;; This function is called by:
 17315 ;;		_CC2500_TxData
 17316 ;;		_CC2500_PowerRST
 17317 ;;		_CC2500_WriteREG
 17318 ;;		_CC2500_WriteCommand
 17319 ;;		_CC2500_RxData
 17320 ;;		_CC2500_ReadREG
 17321 ;;		_CC2500_ReadStatus
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           
 17326                           ;psect for function _CC2500_WriteByte
 17327  1F0A                     _CC2500_WriteByte:	
 17328                           
 17329                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17330                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17334  1F0A  0020               	movlb	0	; select bank0
 17335  1F0B  01A1               	clrf	CC2500_WriteByte@loop_a
 17336  1F0C                     L10:	
 17337  1F0C  3008               	movlw	8
 17338  1F0D  0221               	subwf	CC2500_WriteByte@loop_a,w
 17339  1F0E  1803               	btfsc	3,0
 17340  1F0F  0008               	return
 17341                           
 17342                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17343  1F10  1FFB               	btfss	_SPI0Buffer,7
 17344  1F11  2F14               	goto	l304
 17345                           
 17346                           ;CC2500_B1.c: 223: RC4 = 1;
 17347  1F12  160E               	bsf	14,4	;volatile
 17348  1F13  2F15               	goto	l305
 17349  1F14                     l304:	
 17350                           
 17351                           ;CC2500_B1.c: 224: else
 17352                           ;CC2500_B1.c: 225: RC4 = 0;
 17353  1F14  120E               	bcf	14,4	;volatile
 17354  1F15                     l305:	
 17355                           
 17356                           ;CC2500_B1.c: 226: RC3 = 1;
 17357  1F15  158E               	bsf	14,3	;volatile
 17358                           
 17359                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17360  1F16  1003               	clrc
 17361  1F17  0DFB               	rlf	_SPI0Buffer,f
 17362                           
 17363                           ;CC2500_B1.c: 228: RC3 = 0;
 17364  1F18  118E               	bcf	14,3	;volatile
 17365  1F19  3001               	movlw	1
 17366  1F1A  00A0               	movwf	??_CC2500_WriteByte
 17367  1F1B  0820               	movf	??_CC2500_WriteByte,w
 17368  1F1C  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17369  1F1D  2F0C               	goto	L10
 17370  1F1E                     __end_of_CC2500_WriteByte:	
 17371                           
 17372                           	psect	text122
 17373  1571                     __ptext122:	
 17374 ;; *************** function _Buzzer_Main *****************
 17375 ;; Defined at:
 17376 ;;		line 46 in file "../src/Buzzer_B1.c"
 17377 ;; Parameters:    Size  Location     Type
 17378 ;;		None
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;		None
 17381 ;; Return value:  Size  Location     Type
 17382 ;;		None               void
 17383 ;; Registers used:
 17384 ;;		wreg, status,2, status,0
 17385 ;; Tracked objects:
 17386 ;;		On entry : 0/0
 17387 ;;		On exit  : 0/0
 17388 ;;		Unchanged: 0/0
 17389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;Total ram usage:        1 bytes
 17395 ;; Hardware stack levels used:    1
 17396 ;; Hardware stack levels required when called:    5
 17397 ;; This function calls:
 17398 ;;		Nothing
 17399 ;; This function is called by:
 17400 ;;		_main
 17401 ;; This function uses a non-reentrant model
 17402 ;;
 17403                           
 17404                           
 17405                           ;psect for function _Buzzer_Main
 17406  1571                     _Buzzer_Main:	
 17407                           
 17408                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17409                           
 17410                           ;incstack = 0
 17411                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17412  1571  0021               	movlb	1	; select bank1
 17413  1572  1CAF               	btfss	_Buz1^(0+128),1
 17414  1573  0008               	return
 17415                           
 17416                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17417  1574  3001               	movlw	1
 17418  1575  07B0               	addwf	(_Buz1^(0+128)+1),f
 17419  1576  3000               	movlw	0
 17420  1577  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 17421                           
 17422                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17423  1578  0836               	movf	((_Buz1+1)^(0+128)+6),w
 17424  1579  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 17425  157A  1D03               	skipz
 17426  157B  2D7E               	goto	u6955
 17427  157C  0835               	movf	(_Buz1^(0+128)+6),w
 17428  157D  0230               	subwf	(_Buz1^(0+128)+1),w
 17429  157E                     u6955:	
 17430  157E  1C03               	skipc
 17431  157F  0008               	return
 17432                           
 17433                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17434  1580  01B0               	clrf	(_Buz1^(0+128)+1)
 17435  1581  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 17436                           
 17437                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17438  1582  12AF               	bcf	_Buz1^(0+128),5
 17439  1583  0020               	movlb	0	; select bank0
 17440  1584  1D8D               	btfss	13,3	;volatile
 17441  1585  2D88               	goto	l7270
 17442  1586  0021               	movlb	1	; select bank1
 17443  1587  16AF               	bsf	_Buz1^(0+128),5
 17444  1588                     l7270:	
 17445                           
 17446                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17447  1588  0021               	movlb	1	; select bank1
 17448  1589  1AAF               	btfsc	_Buz1^(0+128),5
 17449  158A  2DB4               	goto	l94
 17450                           
 17451                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17452  158B  08B2               	movf	(_Buz1^(0+128)+3),f
 17453  158C  1D03               	skipz
 17454  158D  2DB0               	goto	l95
 17455                           
 17456                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17457  158E  1DAF               	btfss	_Buz1^(0+128),3
 17458  158F  2D9E               	goto	l96
 17459                           
 17460                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17461  1590  11AF               	bcf	_Buz1^(0+128),3
 17462                           
 17463                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17464  1591  0833               	movf	(_Buz1^(0+128)+4),w
 17465  1592  0020               	movlb	0	; select bank0
 17466  1593  00A0               	movwf	??_Buzzer_Main
 17467  1594  0820               	movf	??_Buzzer_Main,w
 17468  1595  0021               	movlb	1	; select bank1
 17469  1596  00B2               	movwf	(_Buz1^(0+128)+3)
 17470                           
 17471                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17472  1597  0838               	movf	((_Buz1+1)^(0+128)+8),w
 17473  1598  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17474  1599  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17475  159A  0837               	movf	(_Buz1^(0+128)+8),w
 17476  159B  01B5               	clrf	(_Buz1^(0+128)+6)
 17477  159C  07B5               	addwf	(_Buz1^(0+128)+6),f
 17478                           
 17479                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17480  159D  0008               	return
 17481  159E                     l96:	
 17482  159E  1E2F               	btfss	_Buz1^(0+128),4
 17483  159F  2DAE               	goto	l98
 17484                           
 17485                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17486  15A0  122F               	bcf	_Buz1^(0+128),4
 17487                           
 17488                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17489  15A1  0834               	movf	(_Buz1^(0+128)+5),w
 17490  15A2  0020               	movlb	0	; select bank0
 17491  15A3  00A0               	movwf	??_Buzzer_Main
 17492  15A4  0820               	movf	??_Buzzer_Main,w
 17493  15A5  0021               	movlb	1	; select bank1
 17494  15A6  00B2               	movwf	(_Buz1^(0+128)+3)
 17495                           
 17496                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17497  15A7  083A               	movf	((_Buz1+1)^(0+128)+10),w
 17498  15A8  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17499  15A9  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17500  15AA  0839               	movf	(_Buz1^(0+128)+10),w
 17501  15AB  01B5               	clrf	(_Buz1^(0+128)+6)
 17502  15AC  07B5               	addwf	(_Buz1^(0+128)+6),f
 17503                           
 17504                           ;Buzzer_B1.c: 62: } else {
 17505  15AD  0008               	return
 17506  15AE                     l98:	
 17507                           
 17508                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17509  15AE  10AF               	bcf	_Buz1^(0+128),1
 17510                           
 17511                           ;Buzzer_B1.c: 64: }
 17512                           ;Buzzer_B1.c: 65: } else {
 17513  15AF  0008               	return
 17514  15B0                     l95:	
 17515                           
 17516                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17517  15B0  16AF               	bsf	_Buz1^(0+128),5
 17518                           
 17519                           ;Buzzer_B1.c: 68: RB3 = 1;
 17520  15B1  0020               	movlb	0	; select bank0
 17521  15B2  158D               	bsf	13,3	;volatile
 17522                           
 17523                           ;Buzzer_B1.c: 69: }
 17524                           ;Buzzer_B1.c: 70: } else {
 17525  15B3  0008               	return
 17526  15B4                     l94:	
 17527                           
 17528                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17529  15B4  12AF               	bcf	_Buz1^(0+128),5
 17530                           
 17531                           ;Buzzer_B1.c: 73: RB3 = 0;
 17532  15B5  0020               	movlb	0	; select bank0
 17533  15B6  118D               	bcf	13,3	;volatile
 17534                           
 17535                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17536  15B7  3001               	movlw	1
 17537  15B8  0021               	movlb	1	; select bank1
 17538  15B9  02B2               	subwf	(_Buz1^(0+128)+3),f
 17539  15BA  0008               	return
 17540  15BB                     __end_of_Buzzer_Main:	
 17541                           
 17542                           	psect	text123
 17543  1CB2                     __ptext123:	
 17544 ;; *************** function _Buzzer_Initialization *****************
 17545 ;; Defined at:
 17546 ;;		line 11 in file "../src/Buzzer_B1.c"
 17547 ;; Parameters:    Size  Location     Type
 17548 ;;		None
 17549 ;; Auto vars:     Size  Location     Type
 17550 ;;		None
 17551 ;; Return value:  Size  Location     Type
 17552 ;;		None               void
 17553 ;; Registers used:
 17554 ;;		None
 17555 ;; Tracked objects:
 17556 ;;		On entry : 0/0
 17557 ;;		On exit  : 0/0
 17558 ;;		Unchanged: 0/0
 17559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17564 ;;Total ram usage:        0 bytes
 17565 ;; Hardware stack levels used:    1
 17566 ;; Hardware stack levels required when called:    5
 17567 ;; This function calls:
 17568 ;;		Nothing
 17569 ;; This function is called by:
 17570 ;;		_main
 17571 ;; This function uses a non-reentrant model
 17572 ;;
 17573                           
 17574                           
 17575                           ;psect for function _Buzzer_Initialization
 17576  1CB2                     _Buzzer_Initialization:	
 17577                           
 17578                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17579                           
 17580                           ;incstack = 0
 17581                           ; Regs used in _Buzzer_Initialization: []
 17582  1CB2  0021               	movlb	1	; select bank1
 17583  1CB3  142F               	bsf	_Buz1^(0+128),0
 17584  1CB4  0008               	return
 17585  1CB5                     __end_of_Buzzer_Initialization:	
 17586                           
 17587                           	psect	intentry
 17588  0004                     __pintentry:	
 17589 ;; *************** function _ISR *****************
 17590 ;; Defined at:
 17591 ;;		line 107 in file "../src/MCU_B1.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;		None
 17594 ;; Auto vars:     Size  Location     Type
 17595 ;;		None
 17596 ;; Return value:  Size  Location     Type
 17597 ;;		None               void
 17598 ;; Registers used:
 17599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17600 ;; Tracked objects:
 17601 ;;		On entry : 0/0
 17602 ;;		On exit  : 0/0
 17603 ;;		Unchanged: 0/0
 17604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;Total ram usage:        1 bytes
 17610 ;; Hardware stack levels used:    1
 17611 ;; Hardware stack levels required when called:    4
 17612 ;; This function calls:
 17613 ;;		_IOC_ISR
 17614 ;;		_TMR1_ISR
 17615 ;; This function is called by:
 17616 ;;		Interrupt level 1
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620  0004                     _ISR:	
 17621                           
 17622                           ;incstack = 0
 17623                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17624  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17625  0005  3180               	pagesel	$
 17626  0006  0020               	movlb	0	; select bank0
 17627  0007  087F               	movf	127,w
 17628  0008  00F7               	movwf	??_ISR
 17629                           
 17630                           ;MCU_B1.c: 109: IOC_ISR();
 17631  0009  319D  25FD  3180   	fcall	_IOC_ISR
 17632                           
 17633                           ;MCU_B1.c: 111: ;;
 17634                           ;MCU_B1.c: 113: TMR1_ISR();
 17635  000C  3191  2161         	fcall	_TMR1_ISR
 17636  000E  0877               	movf	??_ISR,w
 17637  000F  0020               	movlb	0	; select bank0
 17638  0010  00FF               	movwf	127
 17639  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17640  0012  0009               	retfie
 17641  0013                     __end_of_ISR:	
 17642                           
 17643                           	psect	text125
 17644  1161                     __ptext125:	
 17645 ;; *************** function _TMR1_ISR *****************
 17646 ;; Defined at:
 17647 ;;		line 209 in file "../src/MCU_B1.c"
 17648 ;; Parameters:    Size  Location     Type
 17649 ;;		None
 17650 ;; Auto vars:     Size  Location     Type
 17651 ;;		None
 17652 ;; Return value:  Size  Location     Type
 17653 ;;		None               void
 17654 ;; Registers used:
 17655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17656 ;; Tracked objects:
 17657 ;;		On entry : 0/0
 17658 ;;		On exit  : 0/0
 17659 ;;		Unchanged: 0/0
 17660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;Total ram usage:        0 bytes
 17666 ;; Hardware stack levels used:    1
 17667 ;; Hardware stack levels required when called:    2
 17668 ;; This function calls:
 17669 ;;		_setDimmerLights_IntrControl
 17670 ;; This function is called by:
 17671 ;;		_ISR
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           
 17676                           ;psect for function _TMR1_ISR
 17677  1161                     _TMR1_ISR:	
 17678                           
 17679                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17683  1161  0021               	movlb	1	; select bank1
 17684  1162  1C11               	btfss	17,0	;volatile
 17685  1163  0008               	return
 17686  1164  0020               	movlb	0	; select bank0
 17687  1165  1C11               	btfss	17,0	;volatile
 17688  1166  0008               	return
 17689                           
 17690                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 17691  1167  30FA               	movlw	250
 17692  1168  0097               	movwf	23	;volatile
 17693                           
 17694                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 17695  1169  3038               	movlw	56
 17696  116A  0096               	movwf	22	;volatile
 17697                           
 17698                           ;MCU_B1.c: 214: TMR1IF = 0;
 17699  116B  1011               	bcf	17,0	;volatile
 17700                           
 17701                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 17702  116C  3001               	movlw	1
 17703  116D  3181  21B2  3191   	fcall	_setDimmerLights_IntrControl
 17704                           
 17705                           ;MCU_B1.c: 234: Timer1.Count++;
 17706  1170  3001               	movlw	1
 17707  1171  0021               	movlb	1	; select bank1
 17708  1172  07C8               	addwf	(_Timer1^(0+128)+1),f
 17709  1173  3000               	movlw	0
 17710  1174  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 17711                           
 17712                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 17713  1175  3001               	movlw	1
 17714  1176  3EC7               	addlw	_Timer1& (0+255)
 17715  1177  0086               	movwf	6
 17716  1178  0187               	clrf	7
 17717  1179  3F40               	moviw [0]fsr1
 17718  117A  3A64               	xorlw	100
 17719  117B  1D03               	skipz
 17720  117C  297F               	goto	u714_25
 17721  117D  3F41               	moviw [1]fsr1
 17722  117E  3A00               	xorlw	0
 17723  117F                     u714_25:	
 17724  117F  1D03               	skipz
 17725  1180  0008               	return
 17726                           
 17727                           ;MCU_B1.c: 236: {
 17728                           ;MCU_B1.c: 237: Timer1.Count = 0;
 17729  1181  01C8               	clrf	(_Timer1^(0+128)+1)
 17730  1182  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 17731                           
 17732                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 17733  1183  1447               	bsf	_Timer1^(0+128),0
 17734  1184  0008               	return
 17735  1185                     __end_of_TMR1_ISR:	
 17736                           
 17737                           	psect	text126
 17738  01B2                     __ptext126:	
 17739 ;; *************** function _setDimmerLights_IntrControl *****************
 17740 ;; Defined at:
 17741 ;;		line 94 in file "../src/Dimmer_B1.c"
 17742 ;; Parameters:    Size  Location     Type
 17743 ;;  lights          1    wreg     unsigned char 
 17744 ;; Auto vars:     Size  Location     Type
 17745 ;;  lights          1    6[COMMON] unsigned char 
 17746 ;; Return value:  Size  Location     Type
 17747 ;;		None               void
 17748 ;; Registers used:
 17749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;Total ram usage:        5 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    1
 17762 ;; This function calls:
 17763 ;;		_DimmerIntrPointSelect
 17764 ;; This function is called by:
 17765 ;;		_TMR1_ISR
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769                           
 17770                           ;psect for function _setDimmerLights_IntrControl
 17771  01B2                     _setDimmerLights_IntrControl:	
 17772                           
 17773                           ;incstack = 0
 17774                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17775                           ;setDimmerLights_IntrControl@lights stored from wreg
 17776  01B2  00F6               	movwf	setDimmerLights_IntrControl@lights
 17777                           
 17778                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 17779  01B3  0876               	movf	setDimmerLights_IntrControl@lights,w
 17780  01B4  319D  252E  3181   	fcall	_DimmerIntrPointSelect
 17781                           
 17782                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 17783  01B7  0879               	movf	_DimmerLightsIntr,w
 17784  01B8  0086               	movwf	6
 17785  01B9  3001               	movlw	1	; select bank2/3
 17786  01BA  0087               	movwf	7
 17787  01BB  1C01               	btfss	1,0
 17788  01BC  2A0E               	goto	i1l6732
 17789                           
 17790                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 17791  01BD  3001               	movlw	1
 17792  01BE  00F2               	movwf	??_setDimmerLights_IntrControl
 17793  01BF  0879               	movf	_DimmerLightsIntr,w
 17794  01C0  3E03               	addlw	3
 17795  01C1  0086               	movwf	6
 17796  01C2  3001               	movlw	1	; select bank2/3
 17797  01C3  0087               	movwf	7
 17798  01C4  0872               	movf	??_setDimmerLights_IntrControl,w
 17799  01C5  0781               	addwf	1,f
 17800                           
 17801                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 17802                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 17803  01C6  0022               	movlb	2	; select bank2
 17804  01C7  0840               	movf	(_Dimmer^(0+256)+2),w
 17805  01C8  00F2               	movwf	??_setDimmerLights_IntrControl
 17806  01C9  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17807  01CA  09F2               	comf	??_setDimmerLights_IntrControl,f
 17808  01CB  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 17809  01CC  0AF2               	incf	??_setDimmerLights_IntrControl,f
 17810  01CD  1903               	skipnz
 17811  01CE  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17812  01CF  0879               	movf	_DimmerLightsIntr,w
 17813  01D0  3E04               	addlw	4
 17814  01D1  0086               	movwf	6
 17815  01D2  3001               	movlw	1	; select bank2/3
 17816  01D3  0087               	movwf	7
 17817  01D4  0801               	movf	1,w
 17818  01D5  0772               	addwf	??_setDimmerLights_IntrControl,w
 17819  01D6  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17820  01D7  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17821  01D8  1803               	skipnc
 17822  01D9  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17823  01DA  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17824  01DB  0879               	movf	_DimmerLightsIntr,w
 17825  01DC  3E03               	addlw	3
 17826  01DD  0086               	movwf	6
 17827  01DE  3001               	movlw	1	; select bank2/3
 17828  01DF  0087               	movwf	7
 17829  01E0  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17830  01E1  3A80               	xorlw	128
 17831  01E2  3C80               	sublw	128
 17832  01E3  1D03               	skipz
 17833  01E4  29E7               	goto	u600_25
 17834  01E5  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17835  01E6  0201               	subwf	1,w
 17836  01E7                     u600_25:	
 17837  01E7  1C03               	skipc
 17838  01E8  0008               	return
 17839                           
 17840                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 17841  01E9  0879               	movf	_DimmerLightsIntr,w
 17842  01EA  3E03               	addlw	3
 17843  01EB  0086               	movwf	6
 17844  01EC  3001               	movlw	1	; select bank2/3
 17845  01ED  0087               	movwf	7
 17846  01EE  0181               	clrf	1
 17847                           
 17848                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 17849  01EF  0879               	movf	_DimmerLightsIntr,w
 17850  01F0  0086               	movwf	6
 17851  01F1  3001               	movlw	1	; select bank2/3
 17852  01F2  0087               	movwf	7
 17853  01F3  1001               	bcf	1,0
 17854                           
 17855                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 17856  01F4  0879               	movf	_DimmerLightsIntr,w
 17857  01F5  3E08               	addlw	8
 17858  01F6  0086               	movwf	6
 17859  01F7  3001               	movlw	1	; select bank2/3
 17860  01F8  0087               	movwf	7
 17861  01F9  1401               	bsf	1,0
 17862                           
 17863                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 17864  01FA  0879               	movf	_DimmerLightsIntr,w
 17865  01FB  3E09               	addlw	9
 17866  01FC  0086               	movwf	6
 17867  01FD  3001               	movlw	1	; select bank2/3
 17868  01FE  0087               	movwf	7
 17869  01FF  1E01               	btfss	1,4
 17870  0200  0008               	return
 17871                           
 17872                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 17873  0201  0879               	movf	_DimmerLightsIntr,w
 17874  0202  3E09               	addlw	9
 17875  0203  0086               	movwf	6
 17876  0204  3001               	movlw	1	; select bank2/3
 17877  0205  0087               	movwf	7
 17878  0206  1201               	bcf	1,4
 17879                           
 17880                           ;Dimmer_B1.c: 243: if (lights == 1) {
 17881  0207  0876               	movf	setDimmerLights_IntrControl@lights,w
 17882  0208  3A01               	xorlw	1
 17883  0209  1D03               	skipz
 17884  020A  0008               	return
 17885                           
 17886                           ;Dimmer_B1.c: 244: RB1 = 0;
 17887  020B  0020               	movlb	0	; select bank0
 17888  020C  108D               	bcf	13,1	;volatile
 17889                           
 17890                           ;Dimmer_B1.c: 246: }
 17891                           ;Dimmer_B1.c: 253: }
 17892                           ;Dimmer_B1.c: 254: }
 17893                           ;Dimmer_B1.c: 255: } else {
 17894  020D  0008               	return
 17895  020E                     i1l6732:	
 17896                           
 17897                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 17898  020E  0879               	movf	_DimmerLightsIntr,w
 17899  020F  3E08               	addlw	8
 17900  0210  0086               	movwf	6
 17901  0211  3001               	movlw	1	; select bank2/3
 17902  0212  0087               	movwf	7
 17903  0213  1C01               	btfss	1,0
 17904  0214  2AD2               	goto	i1l678
 17905                           
 17906                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 17907  0215  0879               	movf	_DimmerLightsIntr,w
 17908  0216  3E08               	addlw	8
 17909  0217  0086               	movwf	6
 17910  0218  3001               	movlw	1	; select bank2/3
 17911  0219  0087               	movwf	7
 17912  021A  1001               	bcf	1,0
 17913                           
 17914                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 17915  021B  0879               	movf	_DimmerLightsIntr,w
 17916  021C  0086               	movwf	6
 17917  021D  3001               	movlw	1	; select bank2/3
 17918  021E  0087               	movwf	7
 17919  021F  1C81               	btfss	1,1
 17920  0220  2AD2               	goto	i1l678
 17921                           
 17922                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 17923  0221  3001               	movlw	1
 17924  0222  00F2               	movwf	??_setDimmerLights_IntrControl
 17925  0223  0A79               	incf	_DimmerLightsIntr,w
 17926  0224  0086               	movwf	6
 17927  0225  3001               	movlw	1	; select bank2/3
 17928  0226  0087               	movwf	7
 17929  0227  0872               	movf	??_setDimmerLights_IntrControl,w
 17930  0228  0781               	addwf	1,f
 17931                           
 17932                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17933  0229  0A79               	incf	_DimmerLightsIntr,w
 17934  022A  0086               	movwf	6
 17935  022B  3001               	movlw	1	; select bank2/3
 17936  022C  0087               	movwf	7
 17937  022D  0879               	movf	_DimmerLightsIntr,w
 17938  022E  3E02               	addlw	2
 17939  022F  0084               	movwf	4
 17940  0230  3001               	movlw	1	; select bank2/3
 17941  0231  0085               	movwf	5
 17942  0232  0800               	movf	0,w
 17943  0233  0201               	subwf	1,w
 17944  0234  1C03               	skipc
 17945  0235  2AD2               	goto	i1l678
 17946                           
 17947                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 17948  0236  0A79               	incf	_DimmerLightsIntr,w
 17949  0237  0086               	movwf	6
 17950  0238  3001               	movlw	1	; select bank2/3
 17951  0239  0087               	movwf	7
 17952  023A  0181               	clrf	1
 17953                           
 17954                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 17955  023B  0879               	movf	_DimmerLightsIntr,w
 17956  023C  0086               	movwf	6
 17957  023D  3001               	movlw	1	; select bank2/3
 17958  023E  0087               	movwf	7
 17959  023F  1D81               	btfss	1,3
 17960  0240  2A87               	goto	i1l6762
 17961                           
 17962                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 17963  0241  0879               	movf	_DimmerLightsIntr,w
 17964  0242  0086               	movwf	6
 17965  0243  3001               	movlw	1	; select bank2/3
 17966  0244  0087               	movwf	7
 17967  0245  1A01               	btfsc	1,4
 17968  0246  2A68               	goto	i1l6754
 17969                           
 17970                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(65*0.8))) {
 17971  0247  0879               	movf	_DimmerLightsIntr,w
 17972  0248  3E04               	addlw	4
 17973  0249  0086               	movwf	6
 17974  024A  3001               	movlw	1	; select bank2/3
 17975  024B  0087               	movwf	7
 17976  024C  3034               	movlw	52
 17977  024D  0201               	subwf	1,w
 17978  024E  1803               	skipnc
 17979  024F  2A59               	goto	i1l6750
 17980                           
 17981                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 17982  0250  3001               	movlw	1
 17983  0251  00F2               	movwf	??_setDimmerLights_IntrControl
 17984  0252  0879               	movf	_DimmerLightsIntr,w
 17985  0253  3E04               	addlw	4
 17986  0254  0086               	movwf	6
 17987  0255  3001               	movlw	1	; select bank2/3
 17988  0256  0087               	movwf	7
 17989  0257  0872               	movf	??_setDimmerLights_IntrControl,w
 17990  0258  0781               	addwf	1,f
 17991  0259                     i1l6750:	
 17992                           
 17993                           ;Dimmer_B1.c: 266: }
 17994                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(65*0.8))) {
 17995  0259  0879               	movf	_DimmerLightsIntr,w
 17996  025A  3E04               	addlw	4
 17997  025B  0086               	movwf	6
 17998  025C  3001               	movlw	1	; select bank2/3
 17999  025D  0087               	movwf	7
 18000  025E  0801               	movf	1,w
 18001  025F  3A34               	xorlw	52
 18002  0260  1D03               	skipz
 18003  0261  2AD2               	goto	i1l678
 18004                           
 18005                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18006  0262  0879               	movf	_DimmerLightsIntr,w
 18007  0263  0086               	movwf	6
 18008  0264  3001               	movlw	1	; select bank2/3
 18009  0265  0087               	movwf	7
 18010  0266  1601               	bsf	1,4
 18011                           
 18012                           ;Dimmer_B1.c: 269: }
 18013                           ;Dimmer_B1.c: 270: } else {
 18014  0267  2AD2               	goto	i1l678
 18015  0268                     i1l6754:	
 18016                           
 18017                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18018  0268  0879               	movf	_DimmerLightsIntr,w
 18019  0269  3E04               	addlw	4
 18020  026A  0086               	movwf	6
 18021  026B  3001               	movlw	1	; select bank2/3
 18022  026C  0087               	movwf	7
 18023  026D  300D               	movlw	13
 18024  026E  0201               	subwf	1,w
 18025  026F  1C03               	skipc
 18026  0270  2A78               	goto	i1l6758
 18027                           
 18028                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18029  0271  0879               	movf	_DimmerLightsIntr,w
 18030  0272  3E04               	addlw	4
 18031  0273  0086               	movwf	6
 18032  0274  3001               	movlw	1	; select bank2/3
 18033  0275  0087               	movwf	7
 18034  0276  3001               	movlw	1
 18035  0277  0281               	subwf	1,f
 18036  0278                     i1l6758:	
 18037                           
 18038                           ;Dimmer_B1.c: 273: }
 18039                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18040  0278  0879               	movf	_DimmerLightsIntr,w
 18041  0279  3E04               	addlw	4
 18042  027A  0086               	movwf	6
 18043  027B  3001               	movlw	1	; select bank2/3
 18044  027C  0087               	movwf	7
 18045  027D  0801               	movf	1,w
 18046  027E  3A0C               	xorlw	12
 18047  027F  1D03               	skipz
 18048  0280  2AD2               	goto	i1l678
 18049                           
 18050                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18051  0281  0879               	movf	_DimmerLightsIntr,w
 18052  0282  0086               	movwf	6
 18053  0283  3001               	movlw	1	; select bank2/3
 18054  0284  0087               	movwf	7
 18055  0285  1201               	bcf	1,4
 18056                           
 18057                           ;Dimmer_B1.c: 276: }
 18058                           ;Dimmer_B1.c: 277: }
 18059                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18060  0286  2AD2               	goto	i1l678
 18061  0287                     i1l6762:	
 18062  0287  0879               	movf	_DimmerLightsIntr,w
 18063  0288  0086               	movwf	6
 18064  0289  3001               	movlw	1	; select bank2/3
 18065  028A  0087               	movwf	7
 18066  028B  1D01               	btfss	1,2
 18067  028C  2AD2               	goto	i1l678
 18068                           
 18069                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18070  028D  0879               	movf	_DimmerLightsIntr,w
 18071  028E  3E04               	addlw	4
 18072  028F  0086               	movwf	6
 18073  0290  3001               	movlw	1	; select bank2/3
 18074  0291  0087               	movwf	7
 18075  0292  0879               	movf	_DimmerLightsIntr,w
 18076  0293  3E05               	addlw	5
 18077  0294  0084               	movwf	4
 18078  0295  3001               	movlw	1	; select bank2/3
 18079  0296  0085               	movwf	5
 18080  0297  0800               	movf	0,w
 18081  0298  0201               	subwf	1,w
 18082  0299  1803               	skipnc
 18083  029A  2AA5               	goto	i1l6768
 18084                           
 18085                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18086  029B  3001               	movlw	1
 18087  029C  00F2               	movwf	??_setDimmerLights_IntrControl
 18088  029D  0879               	movf	_DimmerLightsIntr,w
 18089  029E  3E04               	addlw	4
 18090  029F  0086               	movwf	6
 18091  02A0  3001               	movlw	1	; select bank2/3
 18092  02A1  0087               	movwf	7
 18093  02A2  0872               	movf	??_setDimmerLights_IntrControl,w
 18094  02A3  0781               	addwf	1,f
 18095                           
 18096                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18097  02A4  2ABA               	goto	i1l6772
 18098  02A5                     i1l6768:	
 18099  02A5  0879               	movf	_DimmerLightsIntr,w
 18100  02A6  3E05               	addlw	5
 18101  02A7  0086               	movwf	6
 18102  02A8  3001               	movlw	1	; select bank2/3
 18103  02A9  0087               	movwf	7
 18104  02AA  0879               	movf	_DimmerLightsIntr,w
 18105  02AB  3E04               	addlw	4
 18106  02AC  0084               	movwf	4
 18107  02AD  3001               	movlw	1	; select bank2/3
 18108  02AE  0085               	movwf	5
 18109  02AF  0800               	movf	0,w
 18110  02B0  0201               	subwf	1,w
 18111  02B1  1803               	skipnc
 18112  02B2  2ABA               	goto	i1l6772
 18113                           
 18114                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18115  02B3  0879               	movf	_DimmerLightsIntr,w
 18116  02B4  3E04               	addlw	4
 18117  02B5  0086               	movwf	6
 18118  02B6  3001               	movlw	1	; select bank2/3
 18119  02B7  0087               	movwf	7
 18120  02B8  3001               	movlw	1
 18121  02B9  0281               	subwf	1,f
 18122  02BA                     i1l6772:	
 18123                           
 18124                           ;Dimmer_B1.c: 283: }
 18125                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18126  02BA  0879               	movf	_DimmerLightsIntr,w
 18127  02BB  3E05               	addlw	5
 18128  02BC  0086               	movwf	6
 18129  02BD  3001               	movlw	1	; select bank2/3
 18130  02BE  0087               	movwf	7
 18131  02BF  0879               	movf	_DimmerLightsIntr,w
 18132  02C0  3E04               	addlw	4
 18133  02C1  0084               	movwf	4
 18134  02C2  3001               	movlw	1	; select bank2/3
 18135  02C3  0085               	movwf	5
 18136  02C4  0800               	movf	0,w
 18137  02C5  0601               	xorwf	1,w
 18138  02C6  1D03               	skipz
 18139  02C7  2AD2               	goto	i1l678
 18140                           
 18141                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18142  02C8  0879               	movf	_DimmerLightsIntr,w
 18143  02C9  0086               	movwf	6
 18144  02CA  3001               	movlw	1	; select bank2/3
 18145  02CB  0087               	movwf	7
 18146  02CC  1101               	bcf	1,2
 18147                           
 18148                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18149  02CD  0879               	movf	_DimmerLightsIntr,w
 18150  02CE  0086               	movwf	6
 18151  02CF  3001               	movlw	1	; select bank2/3
 18152  02D0  0087               	movwf	7
 18153  02D1  1081               	bcf	1,1
 18154  02D2                     i1l678:	
 18155                           
 18156                           ;Dimmer_B1.c: 287: }
 18157                           ;Dimmer_B1.c: 288: }
 18158                           ;Dimmer_B1.c: 289: }
 18159                           ;Dimmer_B1.c: 290: }
 18160                           ;Dimmer_B1.c: 291: }
 18161                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18162  02D2  0879               	movf	_DimmerLightsIntr,w
 18163  02D3  3E09               	addlw	9
 18164  02D4  0086               	movwf	6
 18165  02D5  3001               	movlw	1	; select bank2/3
 18166  02D6  0087               	movwf	7
 18167  02D7  1D81               	btfss	1,3
 18168  02D8  0008               	return
 18169                           
 18170                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18171  02D9  3001               	movlw	1
 18172  02DA  00F2               	movwf	??_setDimmerLights_IntrControl
 18173  02DB  0879               	movf	_DimmerLightsIntr,w
 18174  02DC  3E0C               	addlw	12
 18175  02DD  0086               	movwf	6
 18176  02DE  3001               	movlw	1	; select bank2/3
 18177  02DF  0087               	movwf	7
 18178  02E0  0872               	movf	??_setDimmerLights_IntrControl,w
 18179  02E1  0781               	addwf	1,f
 18180                           
 18181                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18182  02E2  0879               	movf	_DimmerLightsIntr,w
 18183  02E3  3E0C               	addlw	12
 18184  02E4  0086               	movwf	6
 18185  02E5  3001               	movlw	1	; select bank2/3
 18186  02E6  0087               	movwf	7
 18187  02E7  0801               	movf	1,w
 18188  02E8  3A05               	xorlw	5
 18189  02E9  1D03               	skipz
 18190  02EA  0008               	return
 18191                           
 18192                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18193  02EB  0879               	movf	_DimmerLightsIntr,w
 18194  02EC  3E0C               	addlw	12
 18195  02ED  0086               	movwf	6
 18196  02EE  3001               	movlw	1	; select bank2/3
 18197  02EF  0087               	movwf	7
 18198  02F0  0181               	clrf	1
 18199                           
 18200                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18201  02F1  0879               	movf	_DimmerLightsIntr,w
 18202  02F2  3E09               	addlw	9
 18203  02F3  0086               	movwf	6
 18204  02F4  3001               	movlw	1	; select bank2/3
 18205  02F5  0087               	movwf	7
 18206  02F6  1181               	bcf	1,3
 18207  02F7  0008               	return
 18208  02F8                     __end_of_setDimmerLights_IntrControl:	
 18209                           
 18210                           	psect	text127
 18211  1D2E                     __ptext127:	
 18212 ;; *************** function _DimmerIntrPointSelect *****************
 18213 ;; Defined at:
 18214 ;;		line 72 in file "../src/Dimmer_B1.c"
 18215 ;; Parameters:    Size  Location     Type
 18216 ;;  lights          1    wreg     unsigned char 
 18217 ;; Auto vars:     Size  Location     Type
 18218 ;;  lights          1    1[COMMON] unsigned char 
 18219 ;; Return value:  Size  Location     Type
 18220 ;;		None               void
 18221 ;; Registers used:
 18222 ;;		wreg
 18223 ;; Tracked objects:
 18224 ;;		On entry : 0/0
 18225 ;;		On exit  : 0/0
 18226 ;;		Unchanged: 0/0
 18227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18232 ;;Total ram usage:        2 bytes
 18233 ;; Hardware stack levels used:    1
 18234 ;; This function calls:
 18235 ;;		Nothing
 18236 ;; This function is called by:
 18237 ;;		_setDimmerLights_IntrControl
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function _DimmerIntrPointSelect
 18243  1D2E                     _DimmerIntrPointSelect:	
 18244                           
 18245                           ;incstack = 0
 18246                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18247                           ;DimmerIntrPointSelect@lights stored from wreg
 18248  1D2E  00F1               	movwf	DimmerIntrPointSelect@lights
 18249                           
 18250                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18251  1D2F  0871               	movf	DimmerIntrPointSelect@lights,w
 18252  1D30  3A01               	xorlw	1
 18253  1D31  1D03               	skipz
 18254  1D32  0008               	return
 18255                           
 18256                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18257  1D33  30C5               	movlw	_DimmerLights1& (0+255)
 18258  1D34  00F0               	movwf	??_DimmerIntrPointSelect
 18259  1D35  0870               	movf	??_DimmerIntrPointSelect,w
 18260  1D36  00F9               	movwf	_DimmerLightsIntr
 18261  1D37  0008               	return
 18262  1D38                     __end_of_DimmerIntrPointSelect:	
 18263                           
 18264                           	psect	text128
 18265  1DFD                     __ptext128:	
 18266 ;; *************** function _IOC_ISR *****************
 18267 ;; Defined at:
 18268 ;;		line 401 in file "../src/MCU_B1.c"
 18269 ;; Parameters:    Size  Location     Type
 18270 ;;		None
 18271 ;; Auto vars:     Size  Location     Type
 18272 ;;		None
 18273 ;; Return value:  Size  Location     Type
 18274 ;;		None               void
 18275 ;; Registers used:
 18276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18277 ;; Tracked objects:
 18278 ;;		On entry : 0/0
 18279 ;;		On exit  : 0/0
 18280 ;;		Unchanged: 0/0
 18281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18286 ;;Total ram usage:        0 bytes
 18287 ;; Hardware stack levels used:    1
 18288 ;; Hardware stack levels required when called:    3
 18289 ;; This function calls:
 18290 ;;		_setDimmerReClock
 18291 ;; This function is called by:
 18292 ;;		_ISR
 18293 ;; This function uses a non-reentrant model
 18294 ;;
 18295                           
 18296                           
 18297                           ;psect for function _IOC_ISR
 18298  1DFD                     _IOC_ISR:	
 18299                           
 18300                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18301                           
 18302                           ;incstack = 0
 18303                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18304  1DFD  1D8B               	btfss	11,3	;volatile
 18305  1DFE  0008               	return
 18306  1DFF  1C0B               	btfss	11,0	;volatile
 18307  1E00  0008               	return
 18308  1E01  0027               	movlb	7	; select bank7
 18309  1E02  1D16               	btfss	22,2	;volatile
 18310  1E03  0008               	return
 18311                           
 18312                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18313  1E04  1116               	bcf	22,2	;volatile
 18314                           
 18315                           ;MCU_B1.c: 404: IOCIF = 0;
 18316  1E05  100B               	bcf	11,0	;volatile
 18317                           
 18318                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18319  1E06  0021               	movlb	1	; select bank1
 18320  1E07  1C20               	btfss	_myMain^(0+128),0
 18321  1E08  0008               	return
 18322                           
 18323                           ;MCU_B1.c: 408: setDimmerReClock();
 18324  1E09  319C  24C1         	fcall	_setDimmerReClock
 18325  1E0B  0008               	return
 18326  1E0C                     __end_of_IOC_ISR:	
 18327                           
 18328                           	psect	text129
 18329  1CC1                     __ptext129:	
 18330 ;; *************** function _setDimmerReClock *****************
 18331 ;; Defined at:
 18332 ;;		line 244 in file "../src/MCU_B1.c"
 18333 ;; Parameters:    Size  Location     Type
 18334 ;;		None
 18335 ;; Auto vars:     Size  Location     Type
 18336 ;;		None
 18337 ;; Return value:  Size  Location     Type
 18338 ;;		None               void
 18339 ;; Registers used:
 18340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18341 ;; Tracked objects:
 18342 ;;		On entry : 0/0
 18343 ;;		On exit  : 0/0
 18344 ;;		Unchanged: 0/0
 18345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18350 ;;Total ram usage:        0 bytes
 18351 ;; Hardware stack levels used:    1
 18352 ;; Hardware stack levels required when called:    2
 18353 ;; This function calls:
 18354 ;;		_setDimmerLights_IntrIOC_GO
 18355 ;; This function is called by:
 18356 ;;		_IOC_ISR
 18357 ;; This function uses a non-reentrant model
 18358 ;;
 18359                           
 18360                           
 18361                           ;psect for function _setDimmerReClock
 18362  1CC1                     _setDimmerReClock:	
 18363                           
 18364                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18365                           
 18366                           ;incstack = 0
 18367                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18368  1CC1  3001               	movlw	1
 18369  1CC2  3194  2430         	fcall	_setDimmerLights_IntrIOC_GO
 18370  1CC4  0008               	return
 18371  1CC5                     __end_of_setDimmerReClock:	
 18372                           
 18373                           	psect	text130
 18374  1430                     __ptext130:	
 18375 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18376 ;; Defined at:
 18377 ;;		line 28 in file "../src/Dimmer_B1.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  lights          1    wreg     unsigned char 
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;  lights          1    2[COMMON] unsigned char 
 18382 ;; Return value:  Size  Location     Type
 18383 ;;		None               void
 18384 ;; Registers used:
 18385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;Total ram usage:        1 bytes
 18396 ;; Hardware stack levels used:    1
 18397 ;; Hardware stack levels required when called:    1
 18398 ;; This function calls:
 18399 ;;		_DimmerIntrIOCPointSelect
 18400 ;; This function is called by:
 18401 ;;		_setDimmerReClock
 18402 ;; This function uses a non-reentrant model
 18403 ;;
 18404                           
 18405                           
 18406                           ;psect for function _setDimmerLights_IntrIOC_GO
 18407  1430                     _setDimmerLights_IntrIOC_GO:	
 18408                           
 18409                           ;incstack = 0
 18410                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18411                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18412  1430  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18413                           
 18414                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18415  1431  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18416  1432  319D  2542  3194   	fcall	_DimmerIntrIOCPointSelect
 18417                           
 18418                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 18419  1435  0021               	movlb	1	; select bank1
 18420  1436  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18421  1437  0086               	movwf	6
 18422  1438  3001               	movlw	1	; select bank2/3
 18423  1439  0087               	movwf	7
 18424  143A  1801               	btfsc	1,0
 18425  143B  0008               	return
 18426  143C  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18427  143D  3E09               	addlw	9
 18428  143E  0086               	movwf	6
 18429  143F  3001               	movlw	1	; select bank2/3
 18430  1440  0087               	movwf	7
 18431  1441  1981               	btfsc	1,3
 18432  1442  0008               	return
 18433  1443  0020               	movlb	0	; select bank0
 18434  1444  190D               	btfsc	13,2	;volatile
 18435  1445  0008               	return
 18436                           
 18437                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18438  1446  0021               	movlb	1	; select bank1
 18439  1447  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18440  1448  0086               	movwf	6
 18441  1449  3001               	movlw	1	; select bank2/3
 18442  144A  0087               	movwf	7
 18443  144B  1401               	bsf	1,0
 18444                           
 18445                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18446  144C  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18447  144D  3E09               	addlw	9
 18448  144E  0086               	movwf	6
 18449  144F  3001               	movlw	1	; select bank2/3
 18450  1450  0087               	movwf	7
 18451  1451  1581               	bsf	1,3
 18452                           
 18453                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 18454  1452  0022               	movlb	2	; select bank2
 18455  1453  01C0               	clrf	(_Dimmer^(0+256)+2)
 18456                           
 18457                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18458  1454  0021               	movlb	1	; select bank1
 18459  1455  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18460  1456  0086               	movwf	6
 18461  1457  3001               	movlw	1	; select bank2/3
 18462  1458  0087               	movwf	7
 18463  1459  1F01               	btfss	1,6
 18464  145A  0008               	return
 18465                           
 18466                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 18467  145B  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18468  145C  3E09               	addlw	9
 18469  145D  0086               	movwf	6
 18470  145E  3001               	movlw	1	; select bank2/3
 18471  145F  0087               	movwf	7
 18472  1460  1601               	bsf	1,4
 18473                           
 18474                           ;Dimmer_B1.c: 53: if (lights == 1) {
 18475  1461  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18476  1462  3A01               	xorlw	1
 18477  1463  1D03               	skipz
 18478  1464  0008               	return
 18479                           
 18480                           ;Dimmer_B1.c: 54: RB1 = 1;
 18481  1465  0020               	movlb	0	; select bank0
 18482  1466  148D               	bsf	13,1	;volatile
 18483  1467  0008               	return
 18484  1468                     __end_of_setDimmerLights_IntrIOC_GO:	
 18485                           
 18486                           	psect	text131
 18487  1D42                     __ptext131:	
 18488 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18489 ;; Defined at:
 18490 ;;		line 8 in file "../src/Dimmer_B1.c"
 18491 ;; Parameters:    Size  Location     Type
 18492 ;;  lights          1    wreg     unsigned char 
 18493 ;; Auto vars:     Size  Location     Type
 18494 ;;  lights          1    1[COMMON] unsigned char 
 18495 ;; Return value:  Size  Location     Type
 18496 ;;		None               void
 18497 ;; Registers used:
 18498 ;;		wreg
 18499 ;; Tracked objects:
 18500 ;;		On entry : 0/0
 18501 ;;		On exit  : 0/0
 18502 ;;		Unchanged: 0/0
 18503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;Total ram usage:        2 bytes
 18509 ;; Hardware stack levels used:    1
 18510 ;; This function calls:
 18511 ;;		Nothing
 18512 ;; This function is called by:
 18513 ;;		_setDimmerLights_IntrIOC_GO
 18514 ;; This function uses a non-reentrant model
 18515 ;;
 18516                           
 18517                           
 18518                           ;psect for function _DimmerIntrIOCPointSelect
 18519  1D42                     _DimmerIntrIOCPointSelect:	
 18520                           
 18521                           ;incstack = 0
 18522                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18523                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18524  1D42  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18525                           
 18526                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18527  1D43  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18528  1D44  3A01               	xorlw	1
 18529  1D45  1D03               	skipz
 18530  1D46  0008               	return
 18531                           
 18532                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18533  1D47  30C5               	movlw	_DimmerLights1& (0+255)
 18534  1D48  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18535  1D49  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18536  1D4A  0021               	movlb	1	; select bank1
 18537  1D4B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 18538  1D4C  0008               	return
 18539  1D4D                     __end_of_DimmerIntrIOCPointSelect:	
 18540  007E                     btemp	set	126	;btemp
 18541  007E                     pic14e$flags	set	126
 18542  007E                     wtemp	set	126
 18543  007E                     wtemp0	set	126
 18544  0080                     wtemp1	set	128
 18545  0082                     wtemp2	set	130
 18546  0084                     wtemp3	set	132
 18547  0086                     wtemp4	set	134
 18548  0088                     wtemp5	set	136
 18549  007F                     wtemp6	set	127
 18550  007E                     ttemp	set	126
 18551  007E                     ttemp0	set	126
 18552  0081                     ttemp1	set	129
 18553  0084                     ttemp2	set	132
 18554  0087                     ttemp3	set	135
 18555  007F                     ttemp4	set	127
 18556  007E                     ltemp	set	126
 18557  007E                     ltemp0	set	126
 18558  0082                     ltemp1	set	130
 18559  0086                     ltemp2	set	134
 18560  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95089
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11071
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4872
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28708
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   28708
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_TxData
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     762
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1347
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28352
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 04 14:50:38 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 17D8                                       l94 15B4  
                                     l86 17EC                                       l95 15B0  
                                     l96 159E                                       l98 15AE  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 111C  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D84  
                 __end_of_setDelayOff_GO 0994                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 0826  
                   _setDimmerLights_Line 1DA6                             ___ftadd@sign 004B  
                                    l231 0AEB                                      l304 1F14  
                                    l305 1F15                     _setDimmerLights_SwOn 1468  
                                    l348 0805                                      l709 1284  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BB                                      _ISR 0004  
                                    _WDT 00CA             getDimmerLights_Status@lights 0022  
                                    _Sw1 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1F1E                    _Buzzer_Initialization 1CB2  
                        __end_of_ADC_Set 1D03                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CE5  
                 _setMain_Exception$3732 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 113E                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1E0C                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2001 06D2                                     l2010 066C  
                                   l2003 0637                                     l2004 0639  
                                   l2005 0641                                     l1206 164C  
                                   l2009 069F                                     l2045 1E11  
                                   l2053 0DA5                                     l1431 12E9  
                                   l1183 13BD                                     l2063 0DFB  
                         _Load_Main$4107 002D                                     l1426 12D2  
               ?_DimmerLightsPointSelect 0070                                     l1427 12ED  
                                   l2083 0A50                                     l1197 1253  
                                   l1541 0436                                     l2069 13F5  
                                   l2095 14D0                                     l1383 1604  
                                   l1544 032F                                     l1545 0406  
                                   l1546 0404                          __end_of_IOC_Set 1DD6  
                                   l2365 106D                                     l2391 0082  
                                   l2379 10AB                                     l2732 0A9B  
                                   l2389 01A9                                     l6102 1F7C  
                                   l2726 0A84                                     l1686 0E9F  
                                   l6104 1F7F                                     l6130 12D6  
                                   l6202 09F2                                     l2755 04DB  
                                   l6108 1F85                                     l6044 172C  
                                   l5500 1127                                     l6220 0A31  
                                   l6302 110C                                     l6046 1701  
                                   l6150 1366                                     l6214 0A17  
                                   l7006 0E12                                     l6048 1732  
                                   l6128 12CD                                     l5512 0464  
                                   l6240 0AC2                                     l6080 1696  
                                   l6224 0A35                                     l7120 0685  
                                   l6138 12E4                                     l5450 0A5A  
                                   l5522 047A                                     l5610 0F2A  
                                   l5602 0F11                                     l6234 0AB9  
                                   l6218 0A2D                                     l7122 0687  
                                   l7050 0E83                                     l6164 1383  
                                   l6156 136F                                     l5540 04A7  
                                   l5516 046B                                     l5700 0CA7  
                                   l6260 0AF4                                     l6236 0ABC  
                                   l6076 1687                                     l6412 1337  
                                   l7220 0120                                     l7036 0E6B  
                                   l6342 1223                                     l5454 0A61  
                                   l5542 04B1                                     l5534 0494  
                                   l5710 0CCB                                     l5702 0CB5  
                                   l6254 0AD3                                     l5630 0F79  
                                   l6094 14BE                                     l7142 06C0  
                                   l7206 00E2                                     l7230 0152  
                                   l7038 0E6D                                     l6344 1207  
                                   l5464 0A89                                     l5456 0A6B  
                                   l5552 04CD                                     l5544 04B6  
                                   l5712 0CCE                                     l6272 0B07  
                                   l6264 0AFA                                     l5624 0F63  
                                   l7048 0E82                                     l6290 0821  
                                   l5482 1EB7                                     l6346 1228  
                                   l5466 0A91                                     l5458 0A70  
                                   l5562 04FF                                     l5554 04D7  
                                   l5546 04BA                                     l6266 0AFE  
                                   l6258 0AF1                                     l6522 1E97  
                                   l5642 0FB4                                     l7162 1072  
                                   l6434 1D8C                                     l6610 1EA8  
                                   l5572 051A                                     l5716 0CDC  
                                   l5708 0CC2                                     l6380 0D5A  
                                   l6268 0B01                                     l7180 006D  
                                   l7500 0C2B                    _setDimmerLights_SwOff 1528  
                                   l7270 1588                                     l6630 150C  
                                   l5478 1EB1                                     l5558 04ED  
                                   l5582 0EBA                                     l7334 127B  
                                   l5654 0FD0                                     l5646 0FBC  
                                   l7166 1078                                     l6288 0816  
                                   l6296 1103                                     l6640 151C  
                                   l5760 16AE                                     l5736 11FE  
                                   l5840 096F                                     l6368 0D33  
                                   l7336 127E                                     l7088 0658  
                                   l7256 01A5                                     l6298 1106  
                                   l6634 1512                                     l5842 097C  
                                   l5922 155C                                     l5682 0C77  
                                   l6810 0851                                     l7338 1286  
                                   l5658 0FD8                                     l5906 149E  
                                   l6570 0DC0                                     l6546 0D91  
                                   l7530 1421                                     l6644 1522  
                                   l6628 1509                                     l5844 0985  
                                   l5836 0969                                     l5588 0ED0  
                                   l5940 08CB                                     l6388 07AB  
                                   l6820 0879                                     l7612 0373  
                                   l6580 0DE6                                     l7196 00B0  
                                   l7516 0C58                                     l6638 1519  
                                   l5766 16B9                                     l6478 123B  
                                   l7702 0424                                     l7606 0349  
                                   l6558 0DA8                                     l6902 10CE  
                                   l5792 16F0                                     l5784 16DF  
                                   l5776 16C1                                     l6808 084B  
                                   l6920 1622                                     l5778 16CD  
                                   l6914 160D                                     l7642 03CF  
                                   l6586 0DF1                                     l7554 15EE  
                                   l5788 16E8                                     l7396 05A4  
                                   l7636 03C2                                     l7644 03D5  
                                   l6940 08E7                                     l7548 15DC  
                                   l7654 03EA                                     l7726 10B4  
                                   l7496 0C23                                     l7488 0BFE  
                                   l7586 031E                                     l5994 1297  
                                   l6954 0908                                     l6964 0928  
                                   l6948 08FA                    _myMain_Initialization 1E1B  
                                   l6958 0918                                     l6966 0931  
                                   l6896 10C6                                     l6898 10C9  
                                   l7882 177E                                     l7878 1773  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4005 0A7F                                     u4025 0A8C  
                                   u4055 0AA2                                     u4225 04A8  
                                   u5035 170A                                     u4255 04BB  
                                   u4505 0FD9                                     u4195 0495  
                                   u4355 0EE2                                     u4515 0FDF  
                                   u4435 0F85                                     _PEIE 005E  
                                   u4285 04CE                                     u4365 0EF2  
                                   u4445 0F95                                     u4375 0F12  
                                   u4615 0CC3                                     u4385 0F21  
                                   u4465 0FBD                                     u4715 16C4  
                                   u4395 0F2B                                     u4555 0C7E  
                                   u4475 0FC3                                     u4735 16CE  
                                   u7215 13B4                                     u4920 0889  
                                   u5385 080B                                     u4745 16D8  
                                   u4665 11EA                                     u4585 0CA8  
                                   u4755 16E0                                     u5485 1210  
                                   u4925 0887                                     u7325 0C45  
                                   u7405 15EA                                     u7415 15FC  
                                   u3985 0A66                                     u6465 0E53  
                                   u7275 0C11                                     u6485 0E73  
                                   u7365 1418                                     u4975 1F41  
                                   u7375 1427                                     u7625 03DB  
                                   u7545 0375                                     u6585 0652  
                                   u7555 037A                                     u7395 15CC  
                                   u7565 0388                                     u6685 06B0  
                                   u6955 157E                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0143  
                                   _Temp 00D6                                     _main 174F  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 09F1  
                        __end_of_RF_Main 1CBB                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1D79                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1CC1  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 14E5                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1E2A  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1CE1         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1D38                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EB                          __end_of___awdiv 16F7  
                        __end_of___ftadd 0532                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1D1C                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l678 02D2                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1F47                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1468               _setDimmerLights_IntrIOC_GO 1430  
                       __end_of_TMR1_ISR 1185             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 174F               _setDimmerLights_ErrorClose 16F7  
                       __end_of_TMR1_Set 1DE2                                    _getAD 10BB  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1EE4  
            __size_of_CC2500_ClearTXFIFO 0004                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1E5A  
                     Flash_Memory_Read@i 0021                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 122B            __end_of_setLED_Initialization 1E7B  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 087F              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0B78  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 17A7                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1CE5                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D6E                     _setSw_Initialization 1E5A  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 09F1  
                         _setMemory_Data 1DB2                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1D63                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0994  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 113E                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0AB2                 _getMain_All_Error_Status 12BC  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1FC3  
                                 i1l6732 020E                                   i1l6750 0259  
                                 i1l6754 0268                                   i1l6762 0287  
                                 i1l6772 02BA                                   i1l6758 0278  
                                 i1l6768 02A5                                   _FVRCON 0117  
                                 _PMADRH 0192                                   u600_25 01E7  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u714_25 117F  
                     __size_of_Load_Main 0144                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1F5C  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1CB0           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1F5C                                   _Dimmer 013E  
                                 _DlySw1 01DD               __end_of_Mcu_Initialization 1ED2  
                    __end_of_Buzzer_Main 15BB                                   _Memory 01A0  
                                 _Timer1 00C7       __end_of_setDimmerLights_TriggerAdj 109B  
             _setDimmerLights_TriggerAdj 107B                                   ___bmul 1EAE  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 1357                                   _myMain 00A0  
                 __end_of_setMemory_Data 1DBE                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 0800  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 02F8              _setDimmerLights_IntrControl 01B2  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1F0A              getMain_Lights_Count@status1 0023  
            getMain_Lights_Count@status2 0021              getMain_Lights_Count@status3 0022  
                  __end_of_SwPointSelect 1D9A             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 000B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1066               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0BDD         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 003F                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5489 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 10DB                            __end_of_getAD 10DB  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1CD9  
                        _getSw_KeyStatus 1E9D                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1E4A  
                              ?_WDT_Main 0070                        __end_of_Load_Main 043C  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1200  
             __end_of_set_TimeoutCleared 1CEA                 __end_of_setDimmerReClock 1CC5  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                     __size_of_setLED_Main 0033  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1CBB                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1571  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1CC1  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1CD1  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 174F  
                         _getDelayOff_GO 1E3A                      _CC2500_WriteCommand 1F74  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1D03  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1CFC                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13F9                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1D84  
                     _setRFSW_AdjControl 14A5                                  _IOC_ISR 1DFD  
                                _IOC_Set 1DCA                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 138D  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1F8D  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1CB8  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1D6E          __end_of_setControl_Lights_Table 0A51  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 0B13  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1DA6                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1E8C                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1E4A  
         __end_of_getDimmerLights_Status 1E3A                        __end_of_getRxData 0DFE  
                __end_of_getSw_KeyStatus 1EAE                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1D4D                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1FE1                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 16A3                                  ___ftadd 043C  
                                ___ftdiv 0EA3                                  ___ftneg 1D13  
                                ___ftmul 0F4C                                  ___fttol 0C5E  
                    __end_of_Switch_Main 10BB                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1E8C                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 15BB                                  __ptext2 1E1B  
                                __ptext3 13F9                                  __ptext4 0BDD  
                                __ptext5 10BB                                  __ptext6 1ED2  
                                __ptext7 0002                                  __ptext8 1CBE  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1D2E  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 13C3                __end_of_Flash_Memory_Read 1FA7  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 060E  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1CD5  
                      _DimmerLights_Main 125A           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1CF0               __end_of_CC2500_ClearRXFIFO 1CC9  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1CCD  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1D63                      _DelayOffPointSelect 1D4D  
                         _getMain_LoadOK 1DEF                                  clrloop0 1CF7  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1D2E  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 11AC                            _DelayTime_1us 0800  
                      __end_of_setTxData 0795               __end_of_Flash_Memory_Write 125A  
                                init_ram 1CF0                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1CF1                               _setSw_Main 0043  
                 setDimmerLights_SwOn@sw 002F                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1E6A                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                            _CC2500_TxData 0AB2  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1606                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1D1C  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 128A                       _Mcu_Initialization 1EC0  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 1606  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1D6E                  __end_of_setPercentValue 0B78  
                 __end_of_getMain_LoadOK 1DFD                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 11D6                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0795  
                   ?_Flash_Memory_Unlock 0070                            ?_RF_RxDisable 0070  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1F74  
                   _setRF_Initialization 1D79                       _setMemory_LoopSave 1EF7  
                            _Switch_Main 109B                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1D58                  __end_of_getRF_KeyStatus 1E9D  
                      _setMain_Exception 08DB                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1F47  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1EC0                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1D42  
        _setDimmerLights_AdjControl$2409 0027                        getSw_KeyStatus@sw 0070  
                      __size_of_TMR1_ISR 0024            __size_of_getDimmerLights_Line 000B  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 138D  
          __size_of_setDimmerLights_Line 000C            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 1800                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1D9A               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 1654                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 128A                          ?_LedPointSelect 0070  
                              _Load_Main 02F8                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1D0B  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 2000          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1CE5                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E2  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0937                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1CBE                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D2                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1D38                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039         __end_of_getMain_All_Error_Status 12EF  
                       _CC2500_SIDLEMode 1CCD               __size_of_DimmerLights_Main 0030  
              __end_of_setRF_DimmerValue 12BC                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1EE4                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E8  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
          __end_of_setLoad_AH_AL_Restore 1FC3                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 0004  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00C8                           Load_Main@adjgo 002C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1CB1                                _getBuz_GO 1E7B  
    __end_of_Flash_Memory_Initialization 060E              _Flash_Memory_Initialization 0532  
                               ?___awdiv 0020                                __ptext100 1E3A  
                              __ptext101 1E2A                                __ptext110 14E5  
                              __ptext102 1D58                                __ptext111 11AC  
                              __ptext103 17A7                                __ptext120 1F32  
                              __ptext112 1FE1                                __ptext104 16A3  
                              __ptext121 1F0A                                __ptext113 10FB  
                              __ptext105 1CD1                                __ptext130 1430  
                              __ptext122 1571                                __ptext114 1D9A  
                              __ptext106 1CEA                                __ptext131 1D42  
                              __ptext123 1CB2                                __ptext115 0800  
                              __ptext107 1D4D                                __ptext116 1CC9  
                              __ptext108 1F47                                __ptext125 1161  
                              __ptext117 1CC5                                __ptext109 1CCD  
                               ?___ftadd 0041                                __ptext126 01B2  
                              __ptext118 1F74                                __ptext127 1D2E  
                              __ptext119 1CE5                                __ptext128 1DFD  
                              __ptext129 1CC1                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 004B                  __end_of_setRFSW_Control 16A3  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1CB5  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0020  
                     __end_of_TouchPower 107B                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 1161  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2345 0069  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 1571  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1E2A  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1D8F                      __end_of_setLED_Main 1322  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1CBE  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1CDD                          SwPointSelect@sw 0021  
                              clear_ram0 1CF6                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 15BB  
                              _setTxData 06D6      __end_of_DimmerLights_Initialization 1DEF  
            _DimmerLights_Initialization 1DE2                       _CC2500_ClearRXFIFO 1CC5  
                     _CC2500_ClearTXFIFO 1CC9           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1F32                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 122B                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1161  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1DD6  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0141  
                   __end_of_RF_RxDisable 1E1B                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1F8D                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1ED2                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0021                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E8                    __size_of_setTemp_Main 00A5  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1DCA                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 13F9                    _DlyOff_Initialization 1CEA  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1CE1                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C5E                       __end_of_getLoad_OK 1D0B  
                  _Switch_Initialization 1D25        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1430                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1F0A                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D1  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$3748 0021            _getMain_All_Error_Status$3757 0023  
               __end_of_getDimmer_LoadOK 1D13                      _Load_Initialization 07FB  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0DFE  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 111C                         ??_LedPointSelect 0020  
                               ___ftpack 0A51            __size_of_getMain_Lights_Count 0010  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002B  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 12EF  
             __end_of_setRF_DimmerLights 08DB                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 000A  
                   ?_Load_Initialization 0070                                 __ptext10 1CBB  
                               __ptext11 1CB1                                 __ptext20 1D25  
                               __ptext12 109B                                 __ptext21 1E5A  
                               __ptext13 0043                                 __ptext30 1468  
                               __ptext22 1066                                 __ptext14 1F1E  
                               __ptext31 14A5                                 __ptext23 1CB8  
                               __ptext15 1322                                 __ptext40 0AB2  
                               __ptext32 128A                                 __ptext24 060E  
                               __ptext16 1E9D                                 __ptext41 1CB5  
                               __ptext33 113E                                 __ptext25 0D6E  
                               __ptext17 1D8F                                 __ptext50 02F8  
                               __ptext42 1D79                                 __ptext34 0B78  
                               __ptext26 13C3                                 __ptext18 08DB  
                               __ptext51 1DEF                                 __ptext43 1EC0  
                               __ptext35 0F4C                                 __ptext27 1EF7  
                               __ptext19 1D84                                 __ptext60 1E6A  
                               __ptext52 1D0B                                 __ptext44 1D6E  
                               __ptext36 1EE4                                 __ptext28 09F1  
                               __ptext61 138D                                 __ptext53 1E4A  
                               __ptext45 1DD6                                 __ptext37 1E8C  
                               __ptext29 1654                                 __ptext70 0826  
                               __ptext62 1606                                 __ptext54 1D38  
                               __ptext46 1F5C                                 __ptext38 1E7B  
                               __ptext71 0795                                 __ptext63 1DBE  
                               __ptext55 07FB                                 __ptext47 1DCA  
                               __ptext39 1E0C                                 __ptext80 111C  
                               __ptext72 0CE5                                 __ptext64 0532  
                               __ptext56 1FA7                                 __ptext48 1CE1  
                               __ptext81 0A51                                 __ptext73 06D6  
                               __ptext65 1DB2                                 __ptext57 1CDD  
                               __ptext49 1CFC                                 __ptext90 1CB0  
                               __ptext82 1357                                 __ptext74 087F  
                               __ptext66 122B                                 __ptext58 12EF  
                               __ptext91 1CD5                                 __ptext83 1D63  
                               __ptext75 0B13                                 __ptext67 1D1C  
                               __ptext59 1CD9                                 __ptext92 0994  
                               __ptext84 1DA6                                 __ptext76 0C5E  
                               __ptext68 1F8D                                 __ptext93 16F7  
                               __ptext85 12BC                                 __ptext77 1D13  
                               __ptext69 125A                                 __ptext94 1528  
                               __ptext86 1200                                 __ptext78 0EA3  
                               __ptext95 107B                                 __ptext87 1D03  
                               __ptext79 043C                                 __ptext96 1FC3  
                               __ptext88 1DE2                                 __ptext97 0937  
                               __ptext89 1185                                 __ptext98 11D6  
                               __ptext99 1EAE                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D8F            __end_of_Dimmer_Initialization 1CB1  
           __end_of_setDimmerLights_Main 087F             __end_of_setDimmerLights_Line 1DB2  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 14A5  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1F1E                 __end_of_CC2500_SIDLEMode 1CD1  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1D58  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00E9  
              __size_of_setDimmerReClock 0004           setDimmerLights_AdjControl@idle 0026  
                     _CC2500_InitPATable 1FE1                 __end_of_setMemory_Modify 1EF7  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 06D6  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EB  
                               main@argv 00ED                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6545 0022                          _CC2500_PowerRST 14E5  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 1654  
                      ??_getPercentValue 005C                              _setLog_Code 13C3  
            __end_of_Flash_Memory_Unlock 1D25                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 10FB                       __end_of_setSw_Main 01B2  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 11D6  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1D42  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 11AC  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1185  
            __end_of_setDimmerLights_Adj 07FB                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1CB5  
   __size_of_setDimmerLights_IntrControl 0146                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1DBE                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1CD5  
    __size_of_setDimmerLights_IntrIOC_GO 0038      __size_of_setDimmerLights_ErrorClose 0058  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1CD9  
     __end_of_setDimmerLights_AdjControl 1357               _setDimmerLights_AdjControl 1322  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0937         __size_of_setControl_Lights_Table 0060  
                 __end_of_DelayTimejudge 1200     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 0826  
           __end_of_setSw_Initialization 1E6A                          _Timeout_Counter 1F32  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1E0C               __end_of_LED_Initialization 1CDD  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1CB2  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1CB8  
                  __end_of_CC2500_TxData 0B13                    _setLoad_AH_AL_Restore 1FA7  
                __end_of_CC2500_PowerRST 1528           getAll_DimmerLights_AdjGO@adjgo 0020  
