

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 03 15:08:24 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043  0000                     	;# 
  2044  0001                     	;# 
  2045  0002                     	;# 
  2046  0003                     	;# 
  2047  0004                     	;# 
  2048  0005                     	;# 
  2049  0006                     	;# 
  2050  0007                     	;# 
  2051  0008                     	;# 
  2052  0009                     	;# 
  2053  000A                     	;# 
  2054  000B                     	;# 
  2055  000C                     	;# 
  2056  000D                     	;# 
  2057  000E                     	;# 
  2058  0010                     	;# 
  2059  0011                     	;# 
  2060  0012                     	;# 
  2061  0015                     	;# 
  2062  0016                     	;# 
  2063  0016                     	;# 
  2064  0017                     	;# 
  2065  0018                     	;# 
  2066  0019                     	;# 
  2067  001A                     	;# 
  2068  001B                     	;# 
  2069  001C                     	;# 
  2070  008C                     	;# 
  2071  008D                     	;# 
  2072  008E                     	;# 
  2073  0090                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0095                     	;# 
  2077  0096                     	;# 
  2078  0097                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  010C                     	;# 
  2087  010D                     	;# 
  2088  010E                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  011D                     	;# 
  2092  018C                     	;# 
  2093  018D                     	;# 
  2094  018E                     	;# 
  2095  0191                     	;# 
  2096  0191                     	;# 
  2097  0192                     	;# 
  2098  0193                     	;# 
  2099  0193                     	;# 
  2100  0194                     	;# 
  2101  0195                     	;# 
  2102  0196                     	;# 
  2103  0197                     	;# 
  2104  0199                     	;# 
  2105  019A                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019C                     	;# 
  2111  019C                     	;# 
  2112  019D                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  020D                     	;# 
  2116  0210                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0291                     	;# 
  2133  0291                     	;# 
  2134  0292                     	;# 
  2135  0293                     	;# 
  2136  0298                     	;# 
  2137  0298                     	;# 
  2138  0299                     	;# 
  2139  029A                     	;# 
  2140  0394                     	;# 
  2141  0395                     	;# 
  2142  0396                     	;# 
  2143  0FE4                     	;# 
  2144  0FE5                     	;# 
  2145  0FE6                     	;# 
  2146  0FE7                     	;# 
  2147  0FE8                     	;# 
  2148  0FE9                     	;# 
  2149  0FEA                     	;# 
  2150  0FEB                     	;# 
  2151  0FED                     	;# 
  2152  0FEE                     	;# 
  2153  0FEF                     	;# 
  2154                           
  2155                           	psect	idataBANK4
  2156  1F9D                     __pidataBANK4:	
  2157                           
  2158                           ;initializer for __product
  2159  1F9D  3463               	retlw	99
  2160  1F9E  3402               	retlw	2
  2161  1F9F  3400               	retlw	0
  2162  1FA0  3400               	retlw	0
  2163  1FA1  3400               	retlw	0
  2164  1FA2  3400               	retlw	0
  2165  1FA3  3400               	retlw	0
  2166  1FA4  3400               	retlw	0
  2167  1FA5  3400               	retlw	0
  2168  1FA6  3400               	retlw	0
  2169  1FA7  3400               	retlw	0
  2170  1FA8  3400               	retlw	0
  2171  1FA9  34FF               	retlw	255
  2172  1FAA  34FF               	retlw	255
  2173  1FAB  34FF               	retlw	255
  2174  1FAC  3400               	retlw	0
  2175  1FAD  3400               	retlw	0
  2176  1FAE  3400               	retlw	0
  2177  1FAF  3400               	retlw	0
  2178  1FB0  3400               	retlw	0
  2179  1FB1  3400               	retlw	0
  2180  1FB2  3400               	retlw	0
  2181  1FB3  3400               	retlw	0
  2182  1FB4  3400               	retlw	0
  2183  1FB5  3400               	retlw	0
  2184  1FB6  3400               	retlw	0
  2185  1FB7  3400               	retlw	0
  2186  1FB8  3400               	retlw	0
  2187  1FB9  3400               	retlw	0
  2188  1FBA  3400               	retlw	0
  2189  1FBB  3400               	retlw	0
  2190  1FBC  3400               	retlw	0
  2191                           
  2192                           	psect	stringtext
  2193  1000                     __pstringtext:	
  2194  1000                     _CC2500_registers_address:	
  2195  1000  3403               	retlw	3
  2196  1001  3416               	retlw	22
  2197  1002  3417               	retlw	23
  2198  1003  341E               	retlw	30
  2199  1004  341F               	retlw	31
  2200  1005  3420               	retlw	32
  2201  1006  342A               	retlw	42
  2202  1007  342B               	retlw	43
  2203  1008  340B               	retlw	11
  2204  1009  340C               	retlw	12
  2205  100A  340D               	retlw	13
  2206  100B  340E               	retlw	14
  2207  100C  340F               	retlw	15
  2208  100D  3410               	retlw	16
  2209  100E  3411               	retlw	17
  2210  100F  3412               	retlw	18
  2211  1010  3413               	retlw	19
  2212  1011  3414               	retlw	20
  2213  1012  340A               	retlw	10
  2214  1013  3415               	retlw	21
  2215  1014  3421               	retlw	33
  2216  1015  3422               	retlw	34
  2217  1016  3418               	retlw	24
  2218  1017  3419               	retlw	25
  2219  1018  341A               	retlw	26
  2220  1019  341B               	retlw	27
  2221  101A  341C               	retlw	28
  2222  101B  341D               	retlw	29
  2223  101C  3423               	retlw	35
  2224  101D  3424               	retlw	36
  2225  101E  3425               	retlw	37
  2226  101F  3426               	retlw	38
  2227  1020  3429               	retlw	41
  2228  1021  342C               	retlw	44
  2229  1022  342D               	retlw	45
  2230  1023  342E               	retlw	46
  2231  1024  3400               	retlw	0
  2232  1025  3401               	retlw	1
  2233  1026  3402               	retlw	2
  2234  1027  3407               	retlw	7
  2235  1028  3408               	retlw	8
  2236  1029  3409               	retlw	9
  2237  102A  3406               	retlw	6
  2238  102B  3404               	retlw	4
  2239  102C  3405               	retlw	5
  2240  102D  3427               	retlw	39
  2241  102E  3428               	retlw	40
  2242  102F                     __end_of_CC2500_registers_address:	
  2243  102F                     _CC2500_rfSettings:	
  2244  102F  3407               	retlw	7
  2245  1030  3407               	retlw	7
  2246  1031  3430               	retlw	48
  2247  1032  3487               	retlw	135
  2248  1033  346B               	retlw	107
  2249  1034  34F8               	retlw	248
  2250  1035  347F               	retlw	127
  2251  1036  343F               	retlw	63
  2252  1037  3409               	retlw	9
  2253  1038  3400               	retlw	0
  2254  1039  345C               	retlw	92
  2255  103A  34A7               	retlw	167
  2256  103B  3462               	retlw	98
  2257  103C  3486               	retlw	134
  2258  103D  3483               	retlw	131
  2259  103E  3403               	retlw	3
  2260  103F  3422               	retlw	34
  2261  1040  34F8               	retlw	248
  2262  1041  3400               	retlw	0
  2263  1042  3444               	retlw	68
  2264  1043  34B6               	retlw	182
  2265  1044  3410               	retlw	16
  2266  1045  3418               	retlw	24
  2267  1046  341D               	retlw	29
  2268  1047  341C               	retlw	28
  2269  1048  34C7               	retlw	199
  2270  1049  3400               	retlw	0
  2271  104A  34B2               	retlw	178
  2272  104B  34EA               	retlw	234
  2273  104C  340A               	retlw	10
  2274  104D  3400               	retlw	0
  2275  104E  3411               	retlw	17
  2276  104F  3459               	retlw	89
  2277  1050  3488               	retlw	136
  2278  1051  3431               	retlw	49
  2279  1052  340B               	retlw	11
  2280  1053  342F               	retlw	47
  2281  1054  342E               	retlw	46
  2282  1055  3406               	retlw	6
  2283  1056  3404               	retlw	4
  2284  1057  3405               	retlw	5
  2285  1058  3400               	retlw	0
  2286  1059  3430               	retlw	48
  2287  105A  34D3               	retlw	211
  2288  105B  3491               	retlw	145
  2289  105C  3441               	retlw	65
  2290  105D  3400               	retlw	0
  2291  105E                     __end_of_CC2500_rfSettings:	
  2292  105E                     _CC2500_patable_vaule:	
  2293  105E  34FE               	retlw	254
  2294  105F  34FE               	retlw	254
  2295  1060  34FE               	retlw	254
  2296  1061  34FE               	retlw	254
  2297  1062  34FE               	retlw	254
  2298  1063  34FE               	retlw	254
  2299  1064  34FE               	retlw	254
  2300  1065  34FE               	retlw	254
  2301  1066                     __end_of_CC2500_patable_vaule:	
  2302                           
  2303                           	psect	nvBANK0
  2304  006E                     __pnvBANK0:	
  2305  006E                     _product:	
  2306  006E                     	ds	1
  2307  000C                     _PORTA	set	12
  2308  000D                     _PORTB	set	13
  2309  000E                     _PORTC	set	14
  2310  0018                     _T1CON	set	24
  2311  0017                     _TMR1H	set	23
  2312  0016                     _TMR1L	set	22
  2313  005F                     _GIE	set	95
  2314  005B                     _IOCIE	set	91
  2315  0058                     _IOCIF	set	88
  2316  005E                     _PEIE	set	94
  2317  0060                     _RA0	set	96
  2318  0064                     _RA4	set	100
  2319  0066                     _RA6	set	102
  2320  0067                     _RA7	set	103
  2321  0068                     _RB0	set	104
  2322  0069                     _RB1	set	105
  2323  006A                     _RB2	set	106
  2324  006B                     _RB3	set	107
  2325  006D                     _RB5	set	109
  2326  0070                     _RC0	set	112
  2327  0071                     _RC1	set	113
  2328  0073                     _RC3	set	115
  2329  0074                     _RC4	set	116
  2330  0075                     _RC5	set	117
  2331  0088                     _TMR1IF	set	136
  2332  009D                     _ADCON0	set	157
  2333  009E                     _ADCON1	set	158
  2334  009C                     _ADRESH	set	156
  2335  009B                     _ADRESL	set	155
  2336  0099                     _OSCCON	set	153
  2337  008C                     _TRISA	set	140
  2338  008D                     _TRISB	set	141
  2339  008E                     _TRISC	set	142
  2340  0097                     _WDTCON	set	151
  2341  04E9                     _GO_nDONE	set	1257
  2342  0488                     _TMR1IE	set	1160
  2343  0117                     _FVRCON	set	279
  2344  010C                     _LATA	set	268
  2345  010D                     _LATB	set	269
  2346  010E                     _LATC	set	270
  2347  018C                     _ANSELA	set	396
  2348  018D                     _ANSELB	set	397
  2349  018E                     _ANSELC	set	398
  2350  0192                     _PMADRH	set	402
  2351  0191                     _PMADRL	set	401
  2352  0196                     _PMCON2	set	406
  2353  0194                     _PMDATH	set	404
  2354  0193                     _PMDATL	set	403
  2355  0CAE                     _CFGS	set	3246
  2356  0CAC                     _FREE	set	3244
  2357  0CAD                     _LWLO	set	3245
  2358  0CA8                     _RD	set	3240
  2359  0CA9                     _WR	set	3241
  2360  0CAA                     _WREN	set	3242
  2361  1069                     _WPUB1	set	4201
  2362  106A                     _WPUB2	set	4202
  2363  0396                     _IOCBF	set	918
  2364  0395                     _IOCBN	set	917
  2365  0394                     _IOCBP	set	916
  2366  1CB2                     _IOCBF2	set	7346
  2367                           
  2368                           ; #config settings
  2369  0000                     
  2370                           	psect	cinit
  2371  0015                     start_initialization:	
  2372  0015                     __initialization:	
  2373                           
  2374                           ; Clear objects allocated to BITCOMMON
  2375  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2376                           
  2377                           ; Clear objects allocated to COMMON
  2378  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2379  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2380  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2381  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2382  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2383                           
  2384                           ; Clear objects allocated to BANK0
  2385  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK1
  2388  001C  30A0               	movlw	low __pbssBANK1
  2389  001D  0084               	movwf	4
  2390  001E  3000               	movlw	high __pbssBANK1
  2391  001F  0085               	movwf	5
  2392  0020  3048               	movlw	72
  2393  0021  319C  2416  3180   	fcall	clear_ram0
  2394                           
  2395                           ; Clear objects allocated to BANK2
  2396  0024  3020               	movlw	low __pbssBANK2
  2397  0025  0084               	movwf	4
  2398  0026  3001               	movlw	high __pbssBANK2
  2399  0027  0085               	movwf	5
  2400  0028  3050               	movlw	80
  2401  0029  319C  2416  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK3
  2404  002C  30A0               	movlw	low __pbssBANK3
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK3
  2407  002F  0085               	movwf	5
  2408  0030  3046               	movlw	70
  2409  0031  319C  2416  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Initialize objects allocated to BANK4
  2412  0034  309D               	movlw	low __pidataBANK4
  2413  0035  0084               	movwf	4
  2414  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2415  0037  0085               	movwf	5
  2416  0038  3020               	movlw	low __pdataBANK4
  2417  0039  0086               	movwf	6
  2418  003A  3002               	movlw	high __pdataBANK4
  2419  003B  0087               	movwf	7
  2420  003C  3020               	movlw	32
  2421  003D  319C  2410         	fcall	init_ram
  2422  003F                     end_of_initialization:	
  2423                           ;End of C runtime variable initialization code
  2424                           
  2425  003F                     __end_of__initialization:	
  2426  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2427  0040  0020               	movlb	0
  2428  0041  3195  2DE1         	ljmp	_main	;jump to C main() function
  2429                           
  2430                           	psect	bitbssCOMMON
  2431  03E8                     __pbitbssCOMMON:	
  2432  03E8                     _Receive_OK:	
  2433  03E8                     	ds	1
  2434  03E9                     _Transceive_OK:	
  2435  03E9                     	ds	1
  2436                           
  2437                           	psect	bssCOMMON
  2438  0078                     __pbssCOMMON:	
  2439  0078                     _DelayOff:	
  2440  0078                     	ds	1
  2441  0079                     _DimmerLightsIntr:	
  2442  0079                     	ds	1
  2443  007A                     _LED:	
  2444  007A                     	ds	1
  2445  007B                     _SPI0Buffer:	
  2446  007B                     	ds	1
  2447  007C                     _Sw:	
  2448  007C                     	ds	1
  2449                           
  2450                           	psect	bssBANK0
  2451  006F                     __pbssBANK0:	
  2452  006F                     _DimmerLights:	
  2453  006F                     	ds	1
  2454                           
  2455                           	psect	bssBANK1
  2456  00A0                     __pbssBANK1:	
  2457  00A0                     _myMain:	
  2458  00A0                     	ds	15
  2459  00AF                     _Buz1:	
  2460  00AF                     	ds	12
  2461  00BB                     _RF1:	
  2462  00BB                     	ds	12
  2463  00C7                     _Timer1:	
  2464  00C7                     	ds	3
  2465  00CA                     _WDT:	
  2466  00CA                     	ds	2
  2467  00CC                     _CRC:	
  2468  00CC                     	ds	1
  2469  00CD                     _DimmerLights11:	
  2470  00CD                     	ds	1
  2471  00CE                     _DimmerLightsIntrIOC:	
  2472  00CE                     	ds	1
  2473  00CF                     _RSSI:	
  2474  00CF                     	ds	1
  2475  00D0                     _Rx_Length:	
  2476  00D0                     	ds	1
  2477  00D1                     _SwDetect:	
  2478  00D1                     	ds	1
  2479  00D2                     _Tx_Length:	
  2480  00D2                     	ds	1
  2481  00D3                     _r_address:	
  2482  00D3                     	ds	1
  2483  00D4                     _r_data:	
  2484  00D4                     	ds	1
  2485  00D5                     _s_data:	
  2486  00D5                     	ds	1
  2487  00D6                     _Temp:	
  2488  00D6                     	ds	18
  2489                           
  2490                           	psect	bssBANK2
  2491  0120                     __pbssBANK2:	
  2492  0120                     _RF_Data:	
  2493  0120                     	ds	30
  2494  013E                     _Dimmer:	
  2495  013E                     	ds	3
  2496  0141                     _RF_Count:	
  2497  0141                     	ds	2
  2498  0143                     _Load:	
  2499  0143                     	ds	45
  2500                           
  2501                           	psect	bssBANK3
  2502  01A0                     __pbssBANK3:	
  2503  01A0                     _Memory:	
  2504  01A0                     	ds	37
  2505  01C5                     _DimmerLights1:	
  2506  01C5                     	ds	15
  2507  01D4                     _Sw1:	
  2508  01D4                     	ds	9
  2509  01DD                     _DlySw1:	
  2510  01DD                     	ds	5
  2511  01E2                     _VarErrLED:	
  2512  01E2                     	ds	4
  2513                           
  2514                           	psect	dataBANK4
  2515  0220                     __pdataBANK4:	
  2516  0220                     __product:	
  2517  0220                     	ds	32
  2518                           
  2519                           	psect	clrtext
  2520  1C16                     clear_ram0:	
  2521                           ;	Called with FSR0 containing the base address, and
  2522                           ;	WREG with the size to clear
  2523                           
  2524  1C16  0064               	clrwdt	;clear the watchdog before getting into this loop
  2525  1C17                     clrloop0:	
  2526  1C17  0180               	clrf	0	;clear RAM location pointed to by FSR
  2527  1C18  3101               	addfsr 0,1
  2528  1C19  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2529  1C1A  2C17               	goto	clrloop0	;have we reached the end yet?
  2530  1C1B  3400               	retlw	0	;all done for this memory range, return
  2531                           
  2532                           	psect	inittext
  2533  1C10                     init_ram:	
  2534  1C10  00FE               	movwf	126
  2535  1C11                     initloop:	
  2536  1C11  0012               	moviw fsr0++
  2537  1C12  001E               	movwi fsr1++
  2538  1C13  0BFE               	decfsz	126,f
  2539  1C14  2C11               	goto	initloop
  2540  1C15  3400               	retlw	0
  2541                           
  2542                           	psect	cstackBANK1
  2543  00E8                     __pcstackBANK1:	
  2544  00E8                     setRF_Main@loop_f:	
  2545                           
  2546                           ; 1 bytes @ 0x0
  2547  00E8                     	ds	1
  2548  00E9                     setRF_Main@Receive_OK:	
  2549                           
  2550                           ; 1 bytes @ 0x1
  2551  00E9                     	ds	1
  2552  00EA                     setRF_Main@error:	
  2553                           
  2554                           ; 1 bytes @ 0x2
  2555  00EA                     	ds	1
  2556  00EB                     ?_main:	
  2557  00EB                     main@argc:	
  2558                           ; 2 bytes @ 0x3
  2559                           
  2560                           
  2561                           ; 2 bytes @ 0x3
  2562  00EB                     	ds	2
  2563  00ED                     main@argv:	
  2564                           
  2565                           ; 2 bytes @ 0x5
  2566  00ED                     	ds	2
  2567                           
  2568                           	psect	cstackCOMMON
  2569  0070                     __pcstackCOMMON:	
  2570  0070                     ?_Timeout_Counter:	
  2571  0070                     ?_set_TimeoutCleared:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_CC2500_WriteByte:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_CC2500_WriteCommand:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_CC2500_ReadStatus:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_CC2500_ReadByte:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_CC2500_PowerRST:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_CC2500_InitSetREG:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_CC2500_InitPATable:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_CC2500_ClearTXFIFO:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_ClearRXFIFO:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_FrequencyCabr:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_SIDLEMode:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_DlyOff_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_DlyOff_Main:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setDimmerLights_ErrorClose:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setDimmerLights_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Dimmer_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setDimmerLights_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setDimmerLights_Line:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setTxData:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setLED_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setLED_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_Fosc_Set:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_IO_Set:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_TMR1_Set:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_ADC_Set:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_IOC_Set:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_WDT_Set:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_IOC_ISR:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_TMR1_ISR:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Flash_Memory_Write:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Flash_Memory_Modify:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_WDT_Clearing:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_myMain_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Temp_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_Load_Initialization:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Switch_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_RF_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_getLoad_AD:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_getTemp_AD:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_my_MainTimer:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Temp_Main:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Load_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Switch_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_RF_Main:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_setLoad_AH_AL_Restore:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setTemp_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setTemp_Main:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setRF_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setRF_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RF_RxDisable:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_getRxData:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setLog_Code:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_setControl_Lights_Table:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_setRFSW_Control:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setRFSW_AdjControl:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_setRF_DimmerValue:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_setSw_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setSw_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Buzzer_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_Buzzer_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_CC2500_TxData:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_CC2500_RxData:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_CC2500_PowerOnInitial:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_DelayOffPointSelect:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_DelayOff_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_DelayOff_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_DimmerIntrIOCPointSelect:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ??_DimmerIntrIOCPointSelect:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DimmerIntrPointSelect:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ??_DimmerIntrPointSelect:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setDimmerLights_IntrControl:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_DimmerLightsPointSelect:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_DimmerLights_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_DimmerLights_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setDimmerLights_SwOn:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setDimmerLights_SwOff:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setDimmerLights_AdjControl:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setDimmerLights_AdjRF:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_LedPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_LED_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_LED_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_Mcu_Initialization:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_ISR:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setDimmerReClock:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_Flash_Memory_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_Flash_Memory_Main:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_Flash_Memory_Unlock:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_Flash_Memory_Erasing:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setMemory_Modify:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setMemory_LoopSave:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_WDT_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_setMain_Exception:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_setRF_Learn:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_TouchPower:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_SwPointSelect:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_DelayTimejudge:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_getMain_All_Error_Status:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_getLoad_OK:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_getMain_LightsStatus:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_setPercentValue:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_getPercentValue:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_Flash_Memory_Read:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_getRF_KeyStatus:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_getSw_KeyStatus:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getDelayOff_GO:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDimmerLights_Status:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getAll_DimmerLights_AdjGO:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getDimmer_LoadOK:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Line:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getMain_Lights_Count:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getMain_LoadOK:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     getSw_KeyStatus@sw:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x0
  2915  0070                     	ds	1
  2916  0071                     DimmerIntrIOCPointSelect@lights:	
  2917  0071                     DimmerIntrPointSelect@lights:	
  2918                           ; 1 bytes @ 0x1
  2919                           
  2920                           
  2921                           ; 1 bytes @ 0x1
  2922  0071                     	ds	1
  2923  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2924  0072                     ??_setDimmerLights_IntrControl:	
  2925                           ; 0 bytes @ 0x2
  2926                           
  2927  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2928                           ; 0 bytes @ 0x2
  2929                           
  2930                           
  2931                           ; 1 bytes @ 0x2
  2932  0072                     	ds	1
  2933  0073                     ??_IOC_ISR:	
  2934  0073                     ??_setDimmerReClock:	
  2935                           ; 0 bytes @ 0x3
  2936                           
  2937                           
  2938                           ; 0 bytes @ 0x3
  2939  0073                     	ds	3
  2940  0076                     setDimmerLights_IntrControl@lights:	
  2941                           
  2942                           ; 1 bytes @ 0x6
  2943  0076                     	ds	1
  2944  0077                     ??_TMR1_ISR:	
  2945  0077                     ??_ISR:	
  2946                           ; 0 bytes @ 0x7
  2947                           
  2948                           
  2949                           ; 0 bytes @ 0x7
  2950  0077                     	ds	1
  2951                           
  2952                           	psect	cstackBANK0
  2953  0020                     __pcstackBANK0:	
  2954  0020                     ??_Timeout_Counter:	
  2955  0020                     ??_set_TimeoutCleared:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_CC2500_WriteByte:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_CC2500_ReadByte:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ?_DelayTime_1us:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_Dimmer_Initialization:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_getMain_All_Error_Status:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_getLoad_OK:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_setDimmerLights_Line:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ?_setRF_DimmerLights:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_setTxData:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_Fosc_Set:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_IO_Set:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_TMR1_Set:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_ADC_Set:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_IOC_Set:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_WDT_Set:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_Flash_Memory_Read:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?_setMemory_Data:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_Flash_Memory_Write:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_WDT_Clearing:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_myMain_Initialization:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_Temp_Initialization:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_setLoad_AH_AL_Restore:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_setTemp_Initialization:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_setRF_Initialization:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_getRF_KeyStatus:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_getSw_KeyStatus:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_Buzzer_Initialization:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_Buzzer_Main:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_DelayOffPointSelect:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_DimmerLightsPointSelect:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getAll_DimmerLights_AdjGO:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_getDimmer_LoadOK:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_getDimmerLights_Line:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_LedPointSelect:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_Flash_Memory_Unlock:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_Flash_Memory_Erasing:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setMemory_Modify:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_setMemory_LoopSave:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_WDT_Main:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_getMain_Lights_Count:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_setRF_Learn:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_TouchPower:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_SwPointSelect:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ?___bmul:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ?_getBuz_GO:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     ?_getAD:	
  3094                           ; 2 bytes @ 0x0
  3095                           
  3096  0020                     ?___awdiv:	
  3097                           ; 2 bytes @ 0x0
  3098                           
  3099  0020                     ?___ftpack:	
  3100                           ; 2 bytes @ 0x0
  3101                           
  3102  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3103                           ; 3 bytes @ 0x0
  3104                           
  3105  0020                     getDimmer_LoadOK@status:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0020                     setDimmerLights_Line@lights:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0020                     getDimmerLights_Line@line:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0020                     getAD@adcon1:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0020                     setMemory_Data@data:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     getMain_Lights_Count@count:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0020                     getLoad_OK@ok:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0020                     setRF_DimmerLights@on:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0020                     ___bmul@multiplicand:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     DelayTime_1us@count:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0020                     ___awdiv@divisor:	
  3136                           ; 2 bytes @ 0x0
  3137                           
  3138  0020                     ___ftpack@arg:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141                           
  3142                           ; 3 bytes @ 0x0
  3143  0020                     	ds	1
  3144  0021                     ??_setRF_DimmerLights:	
  3145  0021                     ??_setMemory_Data:	
  3146                           ; 0 bytes @ 0x1
  3147                           
  3148  0021                     ??_RF_Initialization:	
  3149                           ; 0 bytes @ 0x1
  3150                           
  3151  0021                     ??_Mcu_Initialization:	
  3152                           ; 0 bytes @ 0x1
  3153                           
  3154  0021                     ??_getMain_LoadOK:	
  3155                           ; 0 bytes @ 0x1
  3156                           
  3157  0021                     ??___bmul:	
  3158                           ; 0 bytes @ 0x1
  3159                           
  3160  0021                     CC2500_WriteByte@loop_a:	
  3161                           ; 0 bytes @ 0x1
  3162                           
  3163  0021                     CC2500_ReadByte@loop_b:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166  0021                     DelayOffPointSelect@sw:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0021                     DimmerLightsPointSelect@lights:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0021                     LedPointSelect@led:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0021                     Flash_Memory_Read@i:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0021                     Flash_Memory_Write@i:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0021                     setMemory_Modify@command:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184  0021                     setMemory_LoopSave@command:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187  0021                     getMain_Lights_Count@status2:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0021                     setLoad_AH_AL_Restore@i:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0021                     setRF_Learn@command:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0021                     getRF_KeyStatus@key:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0021                     SwPointSelect@sw:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     getSw_KeyStatus@status:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0021                     _getMain_All_Error_Status$3749:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208                           
  3209                           ; 2 bytes @ 0x1
  3210  0021                     	ds	1
  3211  0022                     ??_CC2500_WriteCommand:	
  3212  0022                     ??_CC2500_ReadStatus:	
  3213                           ; 0 bytes @ 0x2
  3214                           
  3215  0022                     ??_DelayTime_1us:	
  3216                           ; 0 bytes @ 0x2
  3217                           
  3218  0022                     ?_CC2500_WriteREG:	
  3219                           ; 0 bytes @ 0x2
  3220                           
  3221  0022                     ??_DlyOff_Initialization:	
  3222                           ; 0 bytes @ 0x2
  3223                           
  3224  0022                     ??_setDimmerLights_Initialization:	
  3225                           ; 0 bytes @ 0x2
  3226                           
  3227  0022                     ?_setDimmerLights_Trigger:	
  3228                           ; 0 bytes @ 0x2
  3229                           
  3230  0022                     ?_setDimmerLights_TriggerAdj:	
  3231                           ; 0 bytes @ 0x2
  3232                           
  3233  0022                     ?_setLED:	
  3234                           ; 0 bytes @ 0x2
  3235                           
  3236  0022                     ??_setLED_Main:	
  3237                           ; 0 bytes @ 0x2
  3238                           
  3239  0022                     ??_Load_Initialization:	
  3240                           ; 0 bytes @ 0x2
  3241                           
  3242  0022                     ??_getBuz_GO:	
  3243                           ; 0 bytes @ 0x2
  3244                           
  3245  0022                     ??_getDelayOff_GO:	
  3246                           ; 0 bytes @ 0x2
  3247                           
  3248  0022                     ??_getDimmerLights_Status:	
  3249                           ; 0 bytes @ 0x2
  3250                           
  3251  0022                     CC2500_WriteREG@value:	
  3252                           ; 0 bytes @ 0x2
  3253                           
  3254  0022                     DlyOff_Initialization@sw:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     getDelayOff_GO@sw:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     getDimmerLights_Status@lights:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     setDimmerLights_Trigger@command:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     setDimmerLights_TriggerAdj@command:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     setLED@command:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     Flash_Memory_Read@address:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     setMemory_Data@address:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278  0022                     getMain_Lights_Count@status3:	
  3279                           ; 1 bytes @ 0x2
  3280                           
  3281  0022                     getMain_LoadOK@ok:	
  3282                           ; 1 bytes @ 0x2
  3283                           
  3284  0022                     _getRF_KeyStatus$5493:	
  3285                           ; 1 bytes @ 0x2
  3286                           
  3287  0022                     _getSw_KeyStatus$6549:	
  3288                           ; 1 bytes @ 0x2
  3289                           
  3290  0022                     ___bmul@product:	
  3291                           ; 1 bytes @ 0x2
  3292                           
  3293  0022                     DelayTime_1us@i:	
  3294                           ; 1 bytes @ 0x2
  3295                           
  3296  0022                     ___awdiv@dividend:	
  3297                           ; 2 bytes @ 0x2
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x2
  3301  0022                     	ds	1
  3302  0023                     ??_CC2500_WriteREG:	
  3303  0023                     ??_setDimmerLights_Trigger:	
  3304                           ; 0 bytes @ 0x3
  3305                           
  3306  0023                     ??_setDimmerLights_TriggerAdj:	
  3307                           ; 0 bytes @ 0x3
  3308                           
  3309  0023                     ??_setLED:	
  3310                           ; 0 bytes @ 0x3
  3311                           
  3312  0023                     ??_DelayOff_Initialization:	
  3313                           ; 0 bytes @ 0x3
  3314                           
  3315  0023                     ??_getAD:	
  3316                           ; 0 bytes @ 0x3
  3317                           
  3318  0023                     CC2500_WriteCommand@command:	
  3319                           ; 0 bytes @ 0x3
  3320                           
  3321  0023                     CC2500_ReadStatus@status_addr:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0023                     getDelayOff_GO@go:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0023                     setDimmerLights_Initialization@lights:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     getDimmerLights_Status@status:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     setLED@led:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     getAD@adcon0:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339  0023                     Flash_Memory_Read@ret:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0023                     getMain_Lights_Count@status1:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0023                     setRF_DimmerLights@status:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0023                     ___bmul@multiplier:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0023                     ___ftpack@exp:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0023                     _getMain_All_Error_Status$3758:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0x3
  3359  0023                     	ds	1
  3360  0024                     ??_CC2500_ClearTXFIFO:	
  3361  0024                     ??_CC2500_ClearRXFIFO:	
  3362                           ; 0 bytes @ 0x4
  3363                           
  3364  0024                     ??_CC2500_SIDLEMode:	
  3365                           ; 0 bytes @ 0x4
  3366                           
  3367  0024                     ??_DelayTimejudge:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_getMain_LightsStatus:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_setLED_Initialization:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_Flash_Memory_Modify:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_getLoad_AD:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_getTemp_AD:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??_RF_RxDisable:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??_setSw_Initialization:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??_CC2500_TxData:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     ??_CC2500_RxData:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     ??_DimmerLights_Initialization:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ??___awdiv:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     CC2500_WriteREG@w_addr:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     setDimmerLights_Trigger@lights:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0024                     setDimmerLights_TriggerAdj@lights:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     setLED_Initialization@led:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     setLED_Main@led:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0024                     setRF_DimmerLights@lights:	
  3419                           ; 1 bytes @ 0x4
  3420                           
  3421  0024                     setSw_Initialization@sw:	
  3422                           ; 1 bytes @ 0x4
  3423                           
  3424  0024                     ___ftpack@sign:	
  3425                           ; 1 bytes @ 0x4
  3426                           
  3427  0024                     getBuz_GO@i:	
  3428                           ; 1 bytes @ 0x4
  3429                           
  3430  0024                     DelayTime_1us@j:	
  3431                           ; 2 bytes @ 0x4
  3432                           
  3433                           
  3434                           ; 2 bytes @ 0x4
  3435  0024                     	ds	1
  3436  0025                     ??_CC2500_InitSetREG:	
  3437  0025                     ??_CC2500_InitPATable:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0025                     ??_Switch_Initialization:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0025                     ??___ftpack:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     ??_setDimmerLights_AdjControl:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     ??_LED_Initialization:	
  3450                           ; 0 bytes @ 0x5
  3451                           
  3452  0025                     ??_LED_Main:	
  3453                           ; 0 bytes @ 0x5
  3454                           
  3455  0025                     CC2500_TxData@loop_e:	
  3456                           ; 0 bytes @ 0x5
  3457                           
  3458  0025                     CC2500_RxData@loop_f:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0025                     Flash_Memory_Modify@i:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0025                     getMain_LightsStatus@count:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     getMain_All_Error_Status@command:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0025                     getTemp_AD@channel:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473  0025                     ___awdiv@counter:	
  3474                           ; 1 bytes @ 0x5
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x5
  3478  0025                     	ds	1
  3479  0026                     ??_CC2500_PowerRST:	
  3480  0026                     ??_CC2500_FrequencyCabr:	
  3481                           ; 0 bytes @ 0x6
  3482                           
  3483  0026                     CC2500_InitSetREG@temp1:	
  3484                           ; 0 bytes @ 0x6
  3485                           
  3486  0026                     CC2500_InitPATable@temp:	
  3487                           ; 1 bytes @ 0x6
  3488                           
  3489  0026                     DelayTimejudge@i:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     setDimmerLights_AdjControl@idle:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     getMain_All_Error_Status@status:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     getLoad_AD@channel:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501  0026                     ___awdiv@sign:	
  3502                           ; 1 bytes @ 0x6
  3503                           
  3504  0026                     getMain_LightsStatus@i:	
  3505                           ; 1 bytes @ 0x6
  3506                           
  3507                           
  3508                           ; 2 bytes @ 0x6
  3509  0026                     	ds	1
  3510  0027                     CC2500_InitSetREG@temp2:	
  3511  0027                     CC2500_InitPATable@loop_d:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     DelayTimejudge@j:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517  0027                     _setDimmerLights_AdjControl$2409:	
  3518                           ; 1 bytes @ 0x7
  3519                           
  3520  0027                     getLoad_AD@k:	
  3521                           ; 1 bytes @ 0x7
  3522                           
  3523  0027                     ___awdiv@quotient:	
  3524                           ; 1 bytes @ 0x7
  3525                           
  3526                           
  3527                           ; 2 bytes @ 0x7
  3528  0027                     	ds	1
  3529  0028                     ?___awtoft:	
  3530  0028                     CC2500_InitSetREG@loop_c:	
  3531                           ; 3 bytes @ 0x8
  3532                           
  3533  0028                     DelayTimejudge@k:	
  3534                           ; 1 bytes @ 0x8
  3535                           
  3536  0028                     setDimmerLights_AdjControl@sw:	
  3537                           ; 1 bytes @ 0x8
  3538                           
  3539  0028                     getMain_LightsStatus@status:	
  3540                           ; 1 bytes @ 0x8
  3541                           
  3542  0028                     getLoad_AD@j:	
  3543                           ; 1 bytes @ 0x8
  3544                           
  3545  0028                     ___awtoft@c:	
  3546                           ; 1 bytes @ 0x8
  3547                           
  3548                           
  3549                           ; 2 bytes @ 0x8
  3550  0028                     	ds	1
  3551  0029                     ??_Load_Main:	
  3552  0029                     ?_setBuz:	
  3553                           ; 0 bytes @ 0x9
  3554                           
  3555  0029                     ??_CC2500_PowerOnInitial:	
  3556                           ; 0 bytes @ 0x9
  3557                           
  3558  0029                     ??_Flash_Memory_Main:	
  3559                           ; 0 bytes @ 0x9
  3560                           
  3561  0029                     DelayTimejudge@value:	
  3562                           ; 0 bytes @ 0x9
  3563                           
  3564  0029                     getLoad_AD@i:	
  3565                           ; 1 bytes @ 0x9
  3566                           
  3567  0029                     setBuz@time:	
  3568                           ; 1 bytes @ 0x9
  3569                           
  3570                           
  3571                           ; 2 bytes @ 0x9
  3572  0029                     	ds	1
  3573  002A                     ?_setDelayOff_GO:	
  3574  002A                     setDelayOff_GO@command:	
  3575                           ; 0 bytes @ 0xA
  3576                           
  3577                           
  3578                           ; 1 bytes @ 0xA
  3579  002A                     	ds	1
  3580  002B                     ??_setBuz:	
  3581  002B                     ??___awtoft:	
  3582                           ; 0 bytes @ 0xB
  3583                           
  3584  002B                     setDelayOff_GO@value:	
  3585                           ; 0 bytes @ 0xB
  3586                           
  3587  002B                     Load_Main@j:	
  3588                           ; 1 bytes @ 0xB
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0xB
  3592  002B                     	ds	1
  3593  002C                     ??_setDelayOff_GO:	
  3594  002C                     setBuz@count:	
  3595                           ; 0 bytes @ 0xC
  3596                           
  3597  002C                     Load_Main@adjgo:	
  3598                           ; 1 bytes @ 0xC
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0xC
  3602  002C                     	ds	1
  3603  002D                     ??_my_MainTimer:	
  3604  002D                     ??_setTemp_Main:	
  3605                           ; 0 bytes @ 0xD
  3606                           
  3607  002D                     ??_setLog_Code:	
  3608                           ; 0 bytes @ 0xD
  3609                           
  3610  002D                     ??_setDimmerLights_SwOn:	
  3611                           ; 0 bytes @ 0xD
  3612                           
  3613  002D                     _Load_Main$4108:	
  3614                           ; 0 bytes @ 0xD
  3615                           
  3616  002D                     ___awtoft@sign:	
  3617                           ; 1 bytes @ 0xD
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xD
  3621  002D                     	ds	1
  3622  002E                     ?___ftdiv:	
  3623  002E                     ?___ftmul:	
  3624                           ; 3 bytes @ 0xE
  3625                           
  3626  002E                     setDelayOff_GO@sw:	
  3627                           ; 3 bytes @ 0xE
  3628                           
  3629  002E                     setDimmerLights_SwOn@idle:	
  3630                           ; 1 bytes @ 0xE
  3631                           
  3632  002E                     Load_Main@error:	
  3633                           ; 1 bytes @ 0xE
  3634                           
  3635  002E                     ___ftdiv@f2:	
  3636                           ; 1 bytes @ 0xE
  3637                           
  3638  002E                     ___ftmul@f1:	
  3639                           ; 3 bytes @ 0xE
  3640                           
  3641                           
  3642                           ; 3 bytes @ 0xE
  3643  002E                     	ds	1
  3644  002F                     ??_Temp_Main:	
  3645  002F                     ??_setDimmerLights_SwOff:	
  3646                           ; 0 bytes @ 0xF
  3647                           
  3648  002F                     setDimmerLights_SwOn@sw:	
  3649                           ; 0 bytes @ 0xF
  3650                           
  3651  002F                     setDimmerLights_SwOff@command:	
  3652                           ; 1 bytes @ 0xF
  3653                           
  3654  002F                     Load_Main@i:	
  3655                           ; 1 bytes @ 0xF
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0xF
  3659  002F                     	ds	1
  3660  0030                     setDimmerLights_SwOff@sw:	
  3661                           
  3662                           ; 1 bytes @ 0x10
  3663  0030                     	ds	1
  3664  0031                     ??_setDimmerLights_ErrorClose:	
  3665  0031                     ??_setRFSW_Control:	
  3666                           ; 0 bytes @ 0x11
  3667                           
  3668  0031                     ??_setSw_Main:	
  3669                           ; 0 bytes @ 0x11
  3670                           
  3671  0031                     ___ftdiv@f1:	
  3672                           ; 0 bytes @ 0x11
  3673                           
  3674  0031                     ___ftmul@f2:	
  3675                           ; 3 bytes @ 0x11
  3676                           
  3677                           
  3678                           ; 3 bytes @ 0x11
  3679  0031                     	ds	1
  3680  0032                     setDimmerLights_ErrorClose@count:	
  3681  0032                     setRFSW_Control@status:	
  3682                           ; 1 bytes @ 0x12
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x12
  3686  0032                     	ds	1
  3687  0033                     setDimmerLights_ErrorClose@lights:	
  3688  0033                     setRFSW_Control@sw:	
  3689                           ; 1 bytes @ 0x13
  3690                           
  3691  0033                     setSw_Main@sw:	
  3692                           ; 1 bytes @ 0x13
  3693                           
  3694                           
  3695                           ; 1 bytes @ 0x13
  3696  0033                     	ds	1
  3697  0034                     ??___ftdiv:	
  3698  0034                     ??___ftmul:	
  3699                           ; 0 bytes @ 0x14
  3700                           
  3701  0034                     setDimmerLights_ErrorClose@i:	
  3702                           ; 0 bytes @ 0x14
  3703                           
  3704                           
  3705                           ; 2 bytes @ 0x14
  3706  0034                     	ds	2
  3707  0036                     ??_DlyOff_Main:	
  3708  0036                     ??_setMain_Exception:	
  3709                           ; 0 bytes @ 0x16
  3710                           
  3711                           
  3712                           ; 0 bytes @ 0x16
  3713  0036                     	ds	2
  3714  0038                     DlyOff_Main@sw:	
  3715  0038                     setMain_Exception@buz:	
  3716                           ; 1 bytes @ 0x18
  3717                           
  3718  0038                     ___ftdiv@cntr:	
  3719                           ; 1 bytes @ 0x18
  3720                           
  3721  0038                     ___ftmul@exp:	
  3722                           ; 1 bytes @ 0x18
  3723                           
  3724                           
  3725                           ; 1 bytes @ 0x18
  3726  0038                     	ds	1
  3727  0039                     ??_DelayOff_Main:	
  3728  0039                     _setMain_Exception$3733:	
  3729                           ; 0 bytes @ 0x19
  3730                           
  3731  0039                     ___ftdiv@f3:	
  3732                           ; 2 bytes @ 0x19
  3733                           
  3734  0039                     ___ftmul@f3_as_product:	
  3735                           ; 3 bytes @ 0x19
  3736                           
  3737                           
  3738                           ; 3 bytes @ 0x19
  3739  0039                     	ds	2
  3740  003B                     setMain_Exception@status:	
  3741                           
  3742                           ; 1 bytes @ 0x1B
  3743  003B                     	ds	1
  3744  003C                     setMain_Exception@command:	
  3745  003C                     ___ftdiv@exp:	
  3746                           ; 1 bytes @ 0x1C
  3747                           
  3748  003C                     ___ftmul@cntr:	
  3749                           ; 1 bytes @ 0x1C
  3750                           
  3751                           
  3752                           ; 1 bytes @ 0x1C
  3753  003C                     	ds	1
  3754  003D                     ??_Switch_Main:	
  3755  003D                     ___ftdiv@sign:	
  3756                           ; 0 bytes @ 0x1D
  3757                           
  3758  003D                     ___ftmul@sign:	
  3759                           ; 1 bytes @ 0x1D
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0x1D
  3763  003D                     	ds	1
  3764  003E                     ?___ftneg:	
  3765  003E                     Switch_Main@error:	
  3766                           ; 3 bytes @ 0x1E
  3767                           
  3768  003E                     ___ftneg@f1:	
  3769                           ; 1 bytes @ 0x1E
  3770                           
  3771                           
  3772                           ; 3 bytes @ 0x1E
  3773  003E                     	ds	3
  3774  0041                     ??___ftneg:	
  3775  0041                     ?___ftadd:	
  3776                           ; 0 bytes @ 0x21
  3777                           
  3778  0041                     ___ftadd@f1:	
  3779                           ; 3 bytes @ 0x21
  3780                           
  3781                           
  3782                           ; 3 bytes @ 0x21
  3783  0041                     	ds	3
  3784  0044                     ___ftadd@f2:	
  3785                           
  3786                           ; 3 bytes @ 0x24
  3787  0044                     	ds	3
  3788  0047                     ??___ftadd:	
  3789                           
  3790                           ; 0 bytes @ 0x27
  3791  0047                     	ds	4
  3792  004B                     ___ftadd@sign:	
  3793                           
  3794                           ; 1 bytes @ 0x2B
  3795  004B                     	ds	1
  3796  004C                     ___ftadd@exp2:	
  3797                           
  3798                           ; 1 bytes @ 0x2C
  3799  004C                     	ds	1
  3800  004D                     ___ftadd@exp1:	
  3801                           
  3802                           ; 1 bytes @ 0x2D
  3803  004D                     	ds	1
  3804  004E                     ?___fttol:	
  3805  004E                     ___fttol@f1:	
  3806                           ; 4 bytes @ 0x2E
  3807                           
  3808                           
  3809                           ; 3 bytes @ 0x2E
  3810  004E                     	ds	4
  3811  0052                     ??___fttol:	
  3812                           
  3813                           ; 0 bytes @ 0x32
  3814  0052                     	ds	4
  3815  0056                     ___fttol@sign1:	
  3816                           
  3817                           ; 1 bytes @ 0x36
  3818  0056                     	ds	1
  3819  0057                     ___fttol@lval:	
  3820                           
  3821                           ; 4 bytes @ 0x37
  3822  0057                     	ds	4
  3823  005B                     ___fttol@exp1:	
  3824                           
  3825                           ; 1 bytes @ 0x3B
  3826  005B                     	ds	1
  3827  005C                     ??_setPercentValue:	
  3828  005C                     ??_getPercentValue:	
  3829                           ; 0 bytes @ 0x3C
  3830                           
  3831                           
  3832                           ; 0 bytes @ 0x3C
  3833  005C                     	ds	2
  3834  005E                     getPercentValue@value:	
  3835  005E                     setPercentValue@value:	
  3836                           ; 1 bytes @ 0x3E
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x3E
  3840  005E                     	ds	1
  3841  005F                     getPercentValue@i:	
  3842  005F                     setPercentValue@i:	
  3843                           ; 3 bytes @ 0x3F
  3844                           
  3845                           
  3846                           ; 3 bytes @ 0x3F
  3847  005F                     	ds	3
  3848  0062                     ?_setDimmerLights:	
  3849  0062                     ?_setDimmerLights_Adj:	
  3850                           ; 0 bytes @ 0x42
  3851                           
  3852  0062                     ??_setDimmerLights_AdjRF:	
  3853                           ; 0 bytes @ 0x42
  3854                           
  3855  0062                     ??_Flash_Memory_Initialization:	
  3856                           ; 0 bytes @ 0x42
  3857                           
  3858  0062                     setDimmerLights@status:	
  3859                           ; 0 bytes @ 0x42
  3860                           
  3861  0062                     setDimmerLights_Adj@status:	
  3862                           ; 1 bytes @ 0x42
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0x42
  3866  0062                     	ds	1
  3867  0063                     ??_setDimmerLights:	
  3868  0063                     ??_setDimmerLights_Adj:	
  3869                           ; 0 bytes @ 0x43
  3870                           
  3871  0063                     setDimmerLights_AdjRF@lights:	
  3872                           ; 0 bytes @ 0x43
  3873                           
  3874  0063                     Flash_Memory_Initialization@i:	
  3875                           ; 1 bytes @ 0x43
  3876                           
  3877                           
  3878                           ; 1 bytes @ 0x43
  3879  0063                     	ds	1
  3880  0064                     ??_setRF_DimmerValue:	
  3881                           
  3882                           ; 0 bytes @ 0x44
  3883  0064                     	ds	1
  3884  0065                     setDimmerLights@lights:	
  3885  0065                     setDimmerLights_Adj@lights:	
  3886                           ; 1 bytes @ 0x45
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x45
  3890  0065                     	ds	1
  3891  0066                     ??_setDimmerLights_Main:	
  3892  0066                     setDimmerLights_Main@lights:	
  3893                           ; 0 bytes @ 0x46
  3894                           
  3895  0066                     setRF_DimmerValue@lights:	
  3896                           ; 1 bytes @ 0x46
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x46
  3900  0066                     	ds	1
  3901  0067                     ??_setRFSW_AdjControl:	
  3902  0067                     ??_DimmerLights_Main:	
  3903                           ; 0 bytes @ 0x47
  3904                           
  3905                           
  3906                           ; 0 bytes @ 0x47
  3907  0067                     	ds	2
  3908  0069                     setRFSW_AdjControl@status:	
  3909  0069                     _DimmerLights_Main$2345:	
  3910                           ; 1 bytes @ 0x49
  3911                           
  3912                           
  3913                           ; 2 bytes @ 0x49
  3914  0069                     	ds	1
  3915  006A                     setRFSW_AdjControl@sw:	
  3916                           
  3917                           ; 1 bytes @ 0x4A
  3918  006A                     	ds	1
  3919  006B                     ??_getRxData:	
  3920  006B                     ??_setControl_Lights_Table:	
  3921                           ; 0 bytes @ 0x4B
  3922                           
  3923                           
  3924                           ; 0 bytes @ 0x4B
  3925  006B                     	ds	1
  3926  006C                     getRxData@error:	
  3927                           
  3928                           ; 1 bytes @ 0x4C
  3929  006C                     	ds	1
  3930  006D                     ??_setRF_Main:	
  3931                           
  3932                           ; 0 bytes @ 0x4D
  3933  006D                     	ds	1
  3934  006E                     ??_RF_Main:	
  3935  006E                     ??_main:	
  3936                           ; 0 bytes @ 0x4E
  3937                           
  3938                           
  3939                           	psect	maintext
  3940  15E1                     __pmaintext:	
  3941                           ; 0 bytes @ 0x4E
  3942 ;;
  3943 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3944 ;;
  3945 ;; *************** function _main *****************
  3946 ;; Defined at:
  3947 ;;		line 7 in file "../src/Main_B1.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  argc            2    3[BANK1 ] int 
  3950 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  2    3[BANK1 ] int 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 17F/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3962 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;Total ram usage:        4 bytes
  3967 ;; Hardware stack levels required when called:   15
  3968 ;; This function calls:
  3969 ;;		_Buzzer_Initialization
  3970 ;;		_Buzzer_Main
  3971 ;;		_CC2500_PowerOnInitial
  3972 ;;		_DelayOff_Initialization
  3973 ;;		_DelayOff_Main
  3974 ;;		_DimmerLights_Initialization
  3975 ;;		_DimmerLights_Main
  3976 ;;		_Flash_Memory_Initialization
  3977 ;;		_Flash_Memory_Main
  3978 ;;		_LED_Initialization
  3979 ;;		_LED_Main
  3980 ;;		_Load_Initialization
  3981 ;;		_Load_Main
  3982 ;;		_Mcu_Initialization
  3983 ;;		_RF_Initialization
  3984 ;;		_RF_Main
  3985 ;;		_Switch_Initialization
  3986 ;;		_Switch_Main
  3987 ;;		_Temp_Initialization
  3988 ;;		_Temp_Main
  3989 ;;		_WDT_Main
  3990 ;;		_getLoad_AD
  3991 ;;		_getTemp_AD
  3992 ;;		_myMain_Initialization
  3993 ;;		_my_MainTimer
  3994 ;; This function is called by:
  3995 ;;		Startup code after reset
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _main
  4001  15E1                     _main:	
  4002                           
  4003                           ;Main_B1.c: 8: myMain_Initialization();
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4007  15E1  3190  2066  3195   	fcall	_myMain_Initialization
  4008                           
  4009                           ;Main_B1.c: 9: Mcu_Initialization();
  4010  15E4  319D  25D1  3195   	fcall	_Mcu_Initialization
  4011                           
  4012                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4013  15E7  3186  2611  3195   	fcall	_Flash_Memory_Initialization
  4014                           
  4015                           ;Main_B1.c: 11: LED_Initialization();
  4016  15EA  319B  23F4  3195   	fcall	_LED_Initialization
  4017                           
  4018                           ;Main_B1.c: 12: Buzzer_Initialization();
  4019  15ED  319B  23CD  3195   	fcall	_Buzzer_Initialization
  4020                           
  4021                           ;Main_B1.c: 14: ;;
  4022                           ;Main_B1.c: 15: Temp_Initialization();
  4023  15F0  319B  23D6  3195   	fcall	_Temp_Initialization
  4024                           
  4025                           ;Main_B1.c: 16: Load_Initialization();
  4026  15F3  319C  2405  3195   	fcall	_Load_Initialization
  4027                           
  4028                           ;Main_B1.c: 17: ;;
  4029                           ;Main_B1.c: 18: DelayOff_Initialization();
  4030  15F6  319B  23EC  3195   	fcall	_DelayOff_Initialization
  4031                           
  4032                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4033  15F9  319D  2502  3195   	fcall	_DimmerLights_Initialization
  4034                           
  4035                           ;Main_B1.c: 21: ;;
  4036                           ;Main_B1.c: 22: ;;
  4037                           ;Main_B1.c: 23: ;;
  4038                           ;Main_B1.c: 24: Switch_Initialization();
  4039  15FC  319C  2445  3195   	fcall	_Switch_Initialization
  4040                           
  4041                           ;Main_B1.c: 25: RF_Initialization();
  4042  15FF  319B  23D0  3195   	fcall	_RF_Initialization
  4043                           
  4044                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4045  1602  319E  2658  3195   	fcall	_CC2500_PowerOnInitial
  4046  1605                     l7928:	
  4047                           ;Main_B1.c: 27: ;;
  4048                           ;Main_B1.c: 28: ;;
  4049                           ;Main_B1.c: 30: while (1) {
  4050                           
  4051                           
  4052                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4053  1605  0021               	movlb	1	; select bank1
  4054  1606  1C20               	btfss	_myMain^(0+128),0
  4055  1607  2E10               	goto	l7932
  4056                           
  4057                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4058  1608  3005               	movlw	5
  4059  1609  318B  23C7  3195   	fcall	_getLoad_AD
  4060                           
  4061                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4062  160C  3009               	movlw	9
  4063  160D  3193  2378  3195   	fcall	_getTemp_AD
  4064  1610                     l7932:	
  4065                           
  4066                           ;Main_B1.c: 57: }
  4067                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4068  1610  0021               	movlb	1	; select bank1
  4069  1611  1C47               	btfss	_Timer1^(0+128),0
  4070  1612  2E05               	goto	l7928
  4071                           
  4072                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4073  1613  1047               	bcf	_Timer1^(0+128),0
  4074                           
  4075                           ;Main_B1.c: 95: my_MainTimer();
  4076  1614  3189  210B  3195   	fcall	_my_MainTimer
  4077                           
  4078                           ;Main_B1.c: 96: WDT_Main();
  4079  1617  319D  25E3  3195   	fcall	_WDT_Main
  4080                           
  4081                           ;Main_B1.c: 97: ;;
  4082                           ;Main_B1.c: 98: ;;
  4083                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4084  161A  0021               	movlb	1	; select bank1
  4085  161B  1C20               	btfss	_myMain^(0+128),0
  4086  161C  2E05               	goto	l7928
  4087                           
  4088                           ;Main_B1.c: 100: Flash_Memory_Main();
  4089  161D  3193  230C  3195   	fcall	_Flash_Memory_Main
  4090                           
  4091                           ;Main_B1.c: 102: LED_Main();
  4092  1620  319B  23F8  3195   	fcall	_LED_Main
  4093                           
  4094                           ;Main_B1.c: 103: Buzzer_Main();
  4095  1623  3194  24F0  3195   	fcall	_Buzzer_Main
  4096                           
  4097                           ;Main_B1.c: 105: ;;
  4098                           ;Main_B1.c: 106: Temp_Main();
  4099  1626  319B  23D9  3195   	fcall	_Temp_Main
  4100                           
  4101                           ;Main_B1.c: 107: Load_Main();
  4102  1629  3182  22F8  3195   	fcall	_Load_Main
  4103                           
  4104                           ;Main_B1.c: 108: ;;
  4105                           ;Main_B1.c: 110: ;;
  4106                           ;Main_B1.c: 111: DimmerLights_Main();
  4107  162C  3191  21D9  3195   	fcall	_DimmerLights_Main
  4108                           
  4109                           ;Main_B1.c: 112: Switch_Main();
  4110  162F  319F  275D  3195   	fcall	_Switch_Main
  4111                           
  4112                           ;Main_B1.c: 113: ;;
  4113                           ;Main_B1.c: 114: ;;
  4114                           ;Main_B1.c: 116: RF_Main();
  4115  1632  319B  23D3  3195   	fcall	_RF_Main
  4116                           
  4117                           ;Main_B1.c: 117: DelayOff_Main();
  4118  1635  319B  23F0  3195   	fcall	_DelayOff_Main
  4119                           
  4120                           ;Main_B1.c: 118: ;;
  4121                           ;Main_B1.c: 119: ;;
  4122  1638  2E05               	goto	l7928
  4123  1639                     __end_of_main:	
  4124                           ;Main_B1.c: 126: }
  4125                           ;Main_B1.c: 127: }
  4126                           ;Main_B1.c: 161: }
  4127                           ;Main_B1.c: 162: return (0);
  4128                           ;	Return value of _main is never used
  4129                           
  4130                           
  4131                           	psect	text1
  4132  090B                     __ptext1:	
  4133 ;; *************** function _my_MainTimer *****************
  4134 ;; Defined at:
  4135 ;;		line 181 in file "../src/Main_B1.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;		None               void
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    7
  4156 ;; This function calls:
  4157 ;;		_setBuz
  4158 ;;		_setTxData
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _my_MainTimer
  4166  090B                     _my_MainTimer:	
  4167                           
  4168                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4172  090B  0021               	movlb	1	; select bank1
  4173  090C  1820               	btfsc	_myMain^(0+128),0
  4174  090D  292D               	goto	l7666
  4175                           
  4176                           ;Main_B1.c: 184: myMain.PowerCount++;
  4177  090E  3001               	movlw	1
  4178  090F  07A1               	addwf	(_myMain^(0+128)+1),f
  4179  0910  3000               	movlw	0
  4180  0911  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4181                           
  4182                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  4183  0912  3001               	movlw	1
  4184  0913  3EA0               	addlw	_myMain& (0+255)
  4185  0914  0086               	movwf	6
  4186  0915  0187               	clrf	7
  4187  0916  3F40               	moviw [0]fsr1
  4188  0917  3A96               	xorlw	150
  4189  0918  1D03               	skipz
  4190  0919  291C               	goto	u7545
  4191  091A  3F41               	moviw [1]fsr1
  4192  091B  3A00               	xorlw	0
  4193  091C                     u7545:	
  4194  091C  1D03               	skipz
  4195  091D  2956               	goto	l7682
  4196                           
  4197                           ;Main_B1.c: 186: {
  4198                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  4199  091E  01A1               	clrf	(_myMain^(0+128)+1)
  4200  091F  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4201                           
  4202                           ;Main_B1.c: 188: myMain.PowerON = 1;
  4203  0920  1420               	bsf	_myMain^(0+128),0
  4204                           
  4205                           ;Main_B1.c: 193: setBuz(3, 50);
  4206  0921  3032               	movlw	50
  4207  0922  0020               	movlb	0	; select bank0
  4208  0923  00A9               	movwf	setBuz@time
  4209  0924  3000               	movlw	0
  4210  0925  00AA               	movwf	setBuz@time+1
  4211  0926  3003               	movlw	3
  4212  0927  3196  2639  3189   	fcall	_setBuz
  4213                           
  4214                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  4215  092A  0021               	movlb	1	; select bank1
  4216  092B  1620               	bsf	_myMain^(0+128),4
  4217                           
  4218                           ;Main_B1.c: 203: }
  4219                           ;Main_B1.c: 204: } else {
  4220  092C  2956               	goto	l7682
  4221  092D                     l7666:	
  4222                           
  4223                           ;Main_B1.c: 205: myMain.PowerCount++;
  4224  092D  3001               	movlw	1
  4225  092E  07A1               	addwf	(_myMain^(0+128)+1),f
  4226  092F  3000               	movlw	0
  4227  0930  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4228                           
  4229                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  4230  0931  3001               	movlw	1
  4231  0932  3EA0               	addlw	_myMain& (0+255)
  4232  0933  0086               	movwf	6
  4233  0934  0187               	clrf	7
  4234  0935  3F40               	moviw [0]fsr1
  4235  0936  3A64               	xorlw	100
  4236  0937  1D03               	skipz
  4237  0938  293B               	goto	u7555
  4238  0939  3F41               	moviw [1]fsr1
  4239  093A  3A00               	xorlw	0
  4240  093B                     u7555:	
  4241  093B  1D03               	skipz
  4242  093C  293F               	goto	l7672
  4243                           
  4244                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  4245  093D  01A1               	clrf	(_myMain^(0+128)+1)
  4246  093E  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4247  093F                     l7672:	
  4248                           
  4249                           ;Main_B1.c: 215: }
  4250                           ;Main_B1.c: 223: myMain.Count1++;
  4251  093F  3001               	movlw	1
  4252  0940  07A5               	addwf	(_myMain^(0+128)+5),f
  4253  0941  3000               	movlw	0
  4254  0942  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4255                           
  4256                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  4257  0943  3005               	movlw	5
  4258  0944  3EA0               	addlw	_myMain& (0+255)
  4259  0945  0086               	movwf	6
  4260  0946  0187               	clrf	7
  4261  0947  3F40               	moviw [0]fsr1
  4262  0948  3A64               	xorlw	100
  4263  0949  1D03               	skipz
  4264  094A  294D               	goto	u7565
  4265  094B  3F41               	moviw [1]fsr1
  4266  094C  3A00               	xorlw	0
  4267  094D                     u7565:	
  4268  094D  1D03               	skipz
  4269  094E  2956               	goto	l7682
  4270                           
  4271                           ;Main_B1.c: 225: {
  4272                           ;Main_B1.c: 226: myMain.Count1 = 0;
  4273  094F  01A5               	clrf	(_myMain^(0+128)+5)
  4274  0950  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4275                           
  4276                           ;Main_B1.c: 238: if (myMain.Flag) {
  4277  0951  1CA0               	btfss	_myMain^(0+128),1
  4278  0952  2955               	goto	l1385
  4279                           
  4280                           ;Main_B1.c: 239: myMain.Flag = 0;
  4281  0953  10A0               	bcf	_myMain^(0+128),1
  4282                           
  4283                           ;Main_B1.c: 248: } else {
  4284  0954  2956               	goto	l7682
  4285  0955                     l1385:	
  4286                           
  4287                           ;Main_B1.c: 249: myMain.Flag = 1;
  4288  0955  14A0               	bsf	_myMain^(0+128),1
  4289  0956                     l7682:	
  4290                           
  4291                           ;Main_B1.c: 258: }
  4292                           ;Main_B1.c: 259: }
  4293                           ;Main_B1.c: 261: }
  4294                           ;Main_B1.c: 263: myMain.Count2++;
  4295  0956  3001               	movlw	1
  4296  0957  07A7               	addwf	(_myMain^(0+128)+7),f
  4297  0958  3000               	movlw	0
  4298  0959  3DA8               	addwfc	((_myMain+1)^(0+128)+7),f
  4299                           
  4300                           ;Main_B1.c: 264: if (myMain.Count2 == 100) {
  4301  095A  3007               	movlw	7
  4302  095B  3EA0               	addlw	_myMain& (0+255)
  4303  095C  0086               	movwf	6
  4304  095D  0187               	clrf	7
  4305  095E  3F40               	moviw [0]fsr1
  4306  095F  3A64               	xorlw	100
  4307  0960  1D03               	skipz
  4308  0961  2964               	goto	u7585
  4309  0962  3F41               	moviw [1]fsr1
  4310  0963  3A00               	xorlw	0
  4311  0964                     u7585:	
  4312  0964  1D03               	skipz
  4313  0965  0008               	return
  4314                           
  4315                           ;Main_B1.c: 265: myMain.Count2 = 0;
  4316  0966  01A7               	clrf	(_myMain^(0+128)+7)
  4317  0967  01A8               	clrf	((_myMain+1)^(0+128)+7)
  4318                           
  4319                           ;Main_B1.c: 267: setTxData();
  4320  0968  3186  26ED         	fcall	_setTxData
  4321  096A  0008               	return
  4322  096B                     __end_of_my_MainTimer:	
  4323                           
  4324                           	psect	text2
  4325  1066                     __ptext2:	
  4326 ;; *************** function _myMain_Initialization *****************
  4327 ;; Defined at:
  4328 ;;		line 168 in file "../src/Main_B1.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;		None
  4333 ;; Return value:  Size  Location     Type
  4334 ;;		None               void
  4335 ;; Registers used:
  4336 ;;		wreg, fsr1l, fsr1h
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;Total ram usage:        1 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    5
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _myMain_Initialization
  4358  1066                     _myMain_Initialization:	
  4359                           
  4360                           ;Main_B1.c: 170: product = &_product;
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4364  1066  3020               	movlw	__product& (0+255)
  4365  1067  0020               	movlb	0	; select bank0
  4366  1068  00A0               	movwf	??_myMain_Initialization
  4367  1069  0820               	movf	??_myMain_Initialization,w
  4368  106A  00EE               	movwf	_product
  4369                           
  4370                           ;Main_B1.c: 171: product->Data[20] = 209;
  4371  106B  30D1               	movlw	209
  4372  106C  00A0               	movwf	??_myMain_Initialization
  4373  106D  086E               	movf	_product,w
  4374  106E  3E14               	addlw	20
  4375  106F  0086               	movwf	6
  4376  1070  3002               	movlw	2	; select bank4/5
  4377  1071  0087               	movwf	7
  4378  1072  0820               	movf	??_myMain_Initialization,w
  4379  1073  0081               	movwf	1
  4380  1074  0008               	return
  4381  1075                     __end_of_myMain_Initialization:	
  4382                           
  4383                           	psect	text3
  4384  1378                     __ptext3:	
  4385 ;; *************** function _getTemp_AD *****************
  4386 ;; Defined at:
  4387 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  channel         1    wreg     unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  channel         1    5[BANK0 ] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;		None               void
  4394 ;; Registers used:
  4395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;Total ram usage:        2 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    7
  4408 ;; This function calls:
  4409 ;;		_getAD
  4410 ;; This function is called by:
  4411 ;;		_main
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function _getTemp_AD
  4417  1378                     _getTemp_AD:	
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4421                           ;getTemp_AD@channel stored from wreg
  4422  1378  0020               	movlb	0	; select bank0
  4423  1379  00A5               	movwf	getTemp_AD@channel
  4424                           
  4425                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4426  137A  0021               	movlb	1	; select bank1
  4427  137B  1D56               	btfss	_Temp^(0+128),2
  4428  137C  0008               	return
  4429                           
  4430                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4431  137D  1656               	bsf	_Temp^(0+128),4
  4432                           
  4433                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4434  137E  30F0               	movlw	240
  4435  137F  0020               	movlb	0	; select bank0
  4436  1380  00A4               	movwf	??_getTemp_AD
  4437  1381  0824               	movf	??_getTemp_AD,w
  4438  1382  00A0               	movwf	getAD@adcon1
  4439  1383  0825               	movf	getTemp_AD@channel,w
  4440  1384  319F  277D  3193   	fcall	_getAD
  4441  1387  0020               	movlb	0	; select bank0
  4442  1388  0821               	movf	?_getAD+1,w
  4443  1389  0021               	movlb	1	; select bank1
  4444  138A  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4445  138B  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4446  138C  0020               	movlb	0	; select bank0
  4447  138D  0820               	movf	?_getAD,w
  4448  138E  0021               	movlb	1	; select bank1
  4449  138F  01E2               	clrf	(_Temp^(0+128)+12)
  4450  1390  07E2               	addwf	(_Temp^(0+128)+12),f
  4451                           
  4452                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4453  1391  0863               	movf	((_Temp+1)^(0+128)+12),w
  4454  1392  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4455  1393  1D03               	skipz
  4456  1394  2B97               	goto	u7515
  4457  1395  0862               	movf	(_Temp^(0+128)+12),w
  4458  1396  025E               	subwf	(_Temp^(0+128)+8),w
  4459  1397                     u7515:	
  4460  1397  1803               	skipnc
  4461  1398  2BA0               	goto	l7648
  4462                           
  4463                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4464  1399  0863               	movf	((_Temp+1)^(0+128)+12),w
  4465  139A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4466  139B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4467  139C  0862               	movf	(_Temp^(0+128)+12),w
  4468  139D  01DE               	clrf	(_Temp^(0+128)+8)
  4469  139E  07DE               	addwf	(_Temp^(0+128)+8),f
  4470                           
  4471                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4472  139F  0008               	return
  4473  13A0                     l7648:	
  4474  13A0  0863               	movf	((_Temp+1)^(0+128)+12),w
  4475  13A1  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4476  13A2  1D03               	skipz
  4477  13A3  2BA6               	goto	u7525
  4478  13A4  0862               	movf	(_Temp^(0+128)+12),w
  4479  13A5  0260               	subwf	(_Temp^(0+128)+10),w
  4480  13A6                     u7525:	
  4481  13A6  1803               	skipnc
  4482  13A7  0008               	return
  4483                           
  4484                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4485  13A8  0863               	movf	((_Temp+1)^(0+128)+12),w
  4486  13A9  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4487  13AA  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4488  13AB  0862               	movf	(_Temp^(0+128)+12),w
  4489  13AC  01E0               	clrf	(_Temp^(0+128)+10)
  4490  13AD  07E0               	addwf	(_Temp^(0+128)+10),f
  4491  13AE  0008               	return
  4492  13AF                     __end_of_getTemp_AD:	
  4493                           
  4494                           	psect	text4
  4495  0BC7                     __ptext4:	
  4496 ;; *************** function _getLoad_AD *****************
  4497 ;; Defined at:
  4498 ;;		line 15 in file "../src/OverLoad_B1.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  channel         1    wreg     unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  channel         1    6[BANK0 ] unsigned char 
  4503 ;;  i               1    9[BANK0 ] unsigned char 
  4504 ;;  j               1    8[BANK0 ] unsigned char 
  4505 ;;  k               1    7[BANK0 ] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    7
  4522 ;; This function calls:
  4523 ;;		_getAD
  4524 ;; This function is called by:
  4525 ;;		_main
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _getLoad_AD
  4531  0BC7                     _getLoad_AD:	
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4535                           ;getLoad_AD@channel stored from wreg
  4536  0BC7  0020               	movlb	0	; select bank0
  4537  0BC8  00A6               	movwf	getLoad_AD@channel
  4538                           
  4539                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4540  0BC9  01A9               	clrf	getLoad_AD@i
  4541  0BCA  01A8               	clrf	getLoad_AD@j
  4542  0BCB  01A7               	clrf	getLoad_AD@k
  4543                           
  4544                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4545  0BCC  0022               	movlb	2	; select bank2
  4546  0BCD  1E43               	btfss	_Load^(0+256),4
  4547  0BCE  0008               	return
  4548                           
  4549                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4550  0BCF  30F3               	movlw	243
  4551  0BD0  0020               	movlb	0	; select bank0
  4552  0BD1  00A4               	movwf	??_getLoad_AD
  4553  0BD2  0824               	movf	??_getLoad_AD,w
  4554  0BD3  00A0               	movwf	getAD@adcon1
  4555  0BD4  0826               	movf	getLoad_AD@channel,w
  4556  0BD5  319F  277D  318B   	fcall	_getAD
  4557  0BD8  0020               	movlb	0	; select bank0
  4558  0BD9  0821               	movf	?_getAD+1,w
  4559  0BDA  0022               	movlb	2	; select bank2
  4560  0BDB  01E5               	clrf	((_Load+1)^(0+256)+33)
  4561  0BDC  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4562  0BDD  0020               	movlb	0	; select bank0
  4563  0BDE  0820               	movf	?_getAD,w
  4564  0BDF  0022               	movlb	2	; select bank2
  4565  0BE0  01E4               	clrf	(_Load^(0+256)+33)
  4566  0BE1  07E4               	addwf	(_Load^(0+256)+33),f
  4567                           
  4568                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4569  0BE2  0020               	movlb	0	; select bank0
  4570  0BE3  01A9               	clrf	getLoad_AD@i
  4571  0BE4  3004               	movlw	4
  4572  0BE5  0229               	subwf	getLoad_AD@i,w
  4573  0BE6  1803               	btfsc	3,0
  4574  0BE7  2C15               	goto	l7618
  4575  0BE8                     l7606:	
  4576                           
  4577                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4578  0BE8  3529               	lslf	getLoad_AD@i,w
  4579  0BE9  3E4E               	addlw	(_Load+11)& (0+255)
  4580  0BEA  0086               	movwf	6
  4581  0BEB  3001               	movlw	1	; select bank2/3
  4582  0BEC  0087               	movwf	7
  4583  0BED  3F40               	moviw [0]fsr1
  4584  0BEE  00A4               	movwf	??_getLoad_AD
  4585  0BEF  3F41               	moviw [1]fsr1
  4586  0BF0  00A5               	movwf	??_getLoad_AD+1
  4587  0BF1  0022               	movlb	2	; select bank2
  4588  0BF2  0865               	movf	((_Load+1)^(0+256)+33),w
  4589  0BF3  0020               	movlb	0	; select bank0
  4590  0BF4  0225               	subwf	??_getLoad_AD+1,w
  4591  0BF5  1D03               	skipz
  4592  0BF6  2BFB               	goto	u7425
  4593  0BF7  0022               	movlb	2	; select bank2
  4594  0BF8  0864               	movf	(_Load^(0+256)+33),w
  4595  0BF9  0020               	movlb	0	; select bank0
  4596  0BFA  0224               	subwf	??_getLoad_AD,w
  4597  0BFB                     u7425:	
  4598  0BFB  1803               	skipnc
  4599  0BFC  2C0D               	goto	l7614
  4600  0BFD  08A8               	movf	getLoad_AD@j,f
  4601  0BFE  1D03               	skipz
  4602  0BFF  2C0D               	goto	l7614
  4603                           
  4604                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4605  0C00  3529               	lslf	getLoad_AD@i,w
  4606  0C01  3E4E               	addlw	(_Load+11)& (0+255)
  4607  0C02  0086               	movwf	6
  4608  0C03  3001               	movlw	1	; select bank2/3
  4609  0C04  0087               	movwf	7
  4610  0C05  0022               	movlb	2	; select bank2
  4611  0C06  0864               	movf	(_Load^(0+256)+33),w
  4612  0C07  3FC0               	movwi [0]fsr1
  4613  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4614  0C09  3FC1               	movwi [1]fsr1
  4615                           
  4616                           ;OverLoad_B1.c: 24: j = 1;
  4617  0C0A  0020               	movlb	0	; select bank0
  4618  0C0B  01A8               	clrf	getLoad_AD@j
  4619  0C0C  0AA8               	incf	getLoad_AD@j,f
  4620  0C0D                     l7614:	
  4621  0C0D  3001               	movlw	1
  4622  0C0E  00A4               	movwf	??_getLoad_AD
  4623  0C0F  0824               	movf	??_getLoad_AD,w
  4624  0C10  07A9               	addwf	getLoad_AD@i,f
  4625  0C11  3004               	movlw	4
  4626  0C12  0229               	subwf	getLoad_AD@i,w
  4627  0C13  1C03               	skipc
  4628  0C14  2BE8               	goto	l7606
  4629  0C15                     l7618:	
  4630                           
  4631                           ;OverLoad_B1.c: 25: }
  4632                           ;OverLoad_B1.c: 26: }
  4633                           ;OverLoad_B1.c: 27: if (j == 0) {
  4634  0C15  08A8               	movf	getLoad_AD@j,f
  4635  0C16  1D03               	skipz
  4636  0C17  0008               	return
  4637                           
  4638                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4639  0C18  01A9               	clrf	getLoad_AD@i
  4640  0C19                     L1:	
  4641  0C19  3004               	movlw	4
  4642  0C1A  0229               	subwf	getLoad_AD@i,w
  4643  0C1B  1803               	btfsc	3,0
  4644  0C1C  0008               	return
  4645                           
  4646                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4647  0C1D  3529               	lslf	getLoad_AD@i,w
  4648  0C1E  3E58               	addlw	(_Load+21)& (0+255)
  4649  0C1F  0086               	movwf	6
  4650  0C20  3001               	movlw	1	; select bank2/3
  4651  0C21  0087               	movwf	7
  4652  0C22  3F40               	moviw [0]fsr1
  4653  0C23  00A4               	movwf	??_getLoad_AD
  4654  0C24  3F41               	moviw [1]fsr1
  4655  0C25  00A5               	movwf	??_getLoad_AD+1
  4656  0C26  0825               	movf	??_getLoad_AD+1,w
  4657  0C27  0022               	movlb	2	; select bank2
  4658  0C28  0265               	subwf	((_Load+1)^(0+256)+33),w
  4659  0C29  1D03               	skipz
  4660  0C2A  2C2F               	goto	u7475
  4661  0C2B  0020               	movlb	0	; select bank0
  4662  0C2C  0824               	movf	??_getLoad_AD,w
  4663  0C2D  0022               	movlb	2	; select bank2
  4664  0C2E  0264               	subwf	(_Load^(0+256)+33),w
  4665  0C2F                     u7475:	
  4666  0C2F  1803               	skipnc
  4667  0C30  2C42               	goto	l7634
  4668  0C31  0020               	movlb	0	; select bank0
  4669  0C32  08A7               	movf	getLoad_AD@k,f
  4670  0C33  1D03               	skipz
  4671  0C34  2C42               	goto	l7634
  4672                           
  4673                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4674  0C35  3529               	lslf	getLoad_AD@i,w
  4675  0C36  3E58               	addlw	(_Load+21)& (0+255)
  4676  0C37  0086               	movwf	6
  4677  0C38  3001               	movlw	1	; select bank2/3
  4678  0C39  0087               	movwf	7
  4679  0C3A  0022               	movlb	2	; select bank2
  4680  0C3B  0864               	movf	(_Load^(0+256)+33),w
  4681  0C3C  3FC0               	movwi [0]fsr1
  4682  0C3D  0865               	movf	((_Load+1)^(0+256)+33),w
  4683  0C3E  3FC1               	movwi [1]fsr1
  4684                           
  4685                           ;OverLoad_B1.c: 31: k = 1;
  4686  0C3F  0020               	movlb	0	; select bank0
  4687  0C40  01A7               	clrf	getLoad_AD@k
  4688  0C41  0AA7               	incf	getLoad_AD@k,f
  4689  0C42                     l7634:	
  4690  0C42  3001               	movlw	1
  4691  0C43  0020               	movlb	0	; select bank0
  4692  0C44  00A4               	movwf	??_getLoad_AD
  4693  0C45  0824               	movf	??_getLoad_AD,w
  4694  0C46  07A9               	addwf	getLoad_AD@i,f
  4695  0C47  2C19               	goto	L1
  4696  0C48                     __end_of_getLoad_AD:	
  4697                           
  4698                           	psect	text5
  4699  1F7D                     __ptext5:	
  4700 ;; *************** function _getAD *****************
  4701 ;; Defined at:
  4702 ;;		line 455 in file "../src/MCU_B1.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  adcon0          1    wreg     unsigned char 
  4705 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  2    0[BANK0 ] int 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        4 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    6
  4724 ;; This function calls:
  4725 ;;		_Timeout_Counter
  4726 ;;		_set_TimeoutCleared
  4727 ;; This function is called by:
  4728 ;;		_getLoad_AD
  4729 ;;		_getTemp_AD
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _getAD
  4735  1F7D                     _getAD:	
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4739                           ;getAD@adcon0 stored from wreg
  4740  1F7D  0020               	movlb	0	; select bank0
  4741  1F7E  00A3               	movwf	getAD@adcon0
  4742                           
  4743                           ;MCU_B1.c: 456: ADCON0 = adcon0;
  4744  1F7F  0823               	movf	getAD@adcon0,w
  4745  1F80  0021               	movlb	1	; select bank1
  4746  1F81  009D               	movwf	29	;volatile
  4747                           
  4748                           ;MCU_B1.c: 457: ADCON1 = adcon1;
  4749  1F82  0020               	movlb	0	; select bank0
  4750  1F83  0820               	movf	getAD@adcon1,w
  4751  1F84  0021               	movlb	1	; select bank1
  4752  1F85  009E               	movwf	30	;volatile
  4753                           
  4754                           ;MCU_B1.c: 458: GO_nDONE = 1;
  4755  1F86  149D               	bsf	29,1	;volatile
  4756                           
  4757                           ;MCU_B1.c: 459: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4758  1F87  2F8B               	goto	l7020
  4759  1F88                     l7018:	
  4760                           
  4761                           ;MCU_B1.c: 460: Timeout_Counter();
  4762  1F88  319E  2643  319F   	fcall	_Timeout_Counter
  4763  1F8B                     l7020:	
  4764  1F8B  0021               	movlb	1	; select bank1
  4765  1F8C  1C9D               	btfss	29,1	;volatile
  4766  1F8D  2F90               	goto	l7024
  4767  1F8E  1D2C               	btfss	(_myMain^(0+128)+12),2
  4768  1F8F  2F88               	goto	l7018
  4769  1F90                     l7024:	
  4770                           
  4771                           ;MCU_B1.c: 461: };
  4772                           ;MCU_B1.c: 462: set_TimeoutCleared();
  4773  1F90  319C  2400         	fcall	_set_TimeoutCleared
  4774                           
  4775                           ;MCU_B1.c: 463: return ((ADRESH*256)+ADRESL);
  4776  1F92  0021               	movlb	1	; select bank1
  4777  1F93  081C               	movf	28,w	;volatile
  4778  1F94  0020               	movlb	0	; select bank0
  4779  1F95  01A1               	clrf	?_getAD+1
  4780  1F96  07A1               	addwf	?_getAD+1,f
  4781  1F97  0021               	movlb	1	; select bank1
  4782  1F98  081B               	movf	27,w	;volatile
  4783  1F99  0020               	movlb	0	; select bank0
  4784  1F9A  01A0               	clrf	?_getAD
  4785  1F9B  07A0               	addwf	?_getAD,f
  4786  1F9C  0008               	return
  4787  1F9D                     __end_of_getAD:	
  4788                           
  4789                           	psect	text6
  4790  1DE3                     __ptext6:	
  4791 ;; *************** function _WDT_Main *****************
  4792 ;; Defined at:
  4793 ;;		line 1058 in file "../src/MCU_B1.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        1 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    6
  4814 ;; This function calls:
  4815 ;;		_WDT_Clearing
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _WDT_Main
  4823  1DE3                     _WDT_Main:	
  4824                           
  4825                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4829  1DE3  0021               	movlb	1	; select bank1
  4830  1DE4  1C4A               	btfss	_WDT^(0+128),0
  4831  1DE5  0008               	return
  4832                           
  4833                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  4834  1DE6  3001               	movlw	1
  4835  1DE7  02CB               	subwf	(_WDT^(0+128)+1),f
  4836  1DE8  084B               	movf	(_WDT^(0+128)+1),w
  4837  1DE9  3AFF               	xorlw	255
  4838  1DEA  1903               	skipnz
  4839  1DEB  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  4842  1DEC  3064               	movlw	100
  4843  1DED  0020               	movlb	0	; select bank0
  4844  1DEE  00A0               	movwf	??_WDT_Main
  4845  1DEF  0820               	movf	??_WDT_Main,w
  4846  1DF0  0021               	movlb	1	; select bank1
  4847  1DF1  00CB               	movwf	(_WDT^(0+128)+1)
  4848                           
  4849                           ;MCU_B1.c: 1062: WDT_Clearing();
  4850  1DF2  3180  2002         	fcall	_WDT_Clearing
  4851  1DF4  0008               	return
  4852  1DF5                     __end_of_WDT_Main:	
  4853                           
  4854                           	psect	text7
  4855  0002                     __ptext7:	
  4856 ;; *************** function _WDT_Clearing *****************
  4857 ;; Defined at:
  4858 ;;		line 1068 in file "../src/MCU_B1.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;		None               void
  4865 ;; Registers used:
  4866 ;;		None
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    5
  4879 ;; This function calls:
  4880 ;;		Nothing
  4881 ;; This function is called by:
  4882 ;;		_WDT_Main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _WDT_Clearing
  4888  0002                     _WDT_Clearing:	
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _WDT_Clearing: []
  4892  0002  0064               	clrwdt	;# 
  4893  0003  0008               	return
  4894  0004                     __end_of_WDT_Clearing:	
  4895                           
  4896                           	psect	text8
  4897  1BD9                     __ptext8:	
  4898 ;; *************** function _Temp_Main *****************
  4899 ;; Defined at:
  4900 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    8
  4921 ;; This function calls:
  4922 ;;		_setTemp_Main
  4923 ;; This function is called by:
  4924 ;;		_main
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function _Temp_Main
  4930  1BD9                     _Temp_Main:	
  4931                           
  4932                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4936  1BD9  318F  2745         	fcall	_setTemp_Main
  4937  1BDB  0008               	return
  4938  1BDC                     __end_of_Temp_Main:	
  4939                           
  4940                           	psect	text9
  4941  0F45                     __ptext9:	
  4942 ;; *************** function _setTemp_Main *****************
  4943 ;; Defined at:
  4944 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;		None               void
  4951 ;; Registers used:
  4952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;Total ram usage:        2 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:    7
  4965 ;; This function calls:
  4966 ;;		_getMain_All_Error_Status
  4967 ;;		_setBuz
  4968 ;; This function is called by:
  4969 ;;		_Temp_Main
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _setTemp_Main
  4975  0F45                     _setTemp_Main:	
  4976                           
  4977                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4978                           
  4979                           ;incstack = 0
  4980                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4981  0F45  0021               	movlb	1	; select bank1
  4982  0F46  1C56               	btfss	_Temp^(0+128),0
  4983  0F47  2FFC               	goto	l1689
  4984                           
  4985                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4986  0F48  1956               	btfsc	_Temp^(0+128),2
  4987  0F49  2F59               	goto	l7128
  4988                           
  4989                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4990  0F4A  3001               	movlw	1
  4991  0F4B  07D7               	addwf	(_Temp^(0+128)+1),f
  4992  0F4C  3000               	movlw	0
  4993  0F4D  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4994                           
  4995                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4996  0F4E  3001               	movlw	1
  4997  0F4F  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4998  0F50  30F4               	movlw	244
  4999  0F51  1903               	skipnz
  5000  0F52  0257               	subwf	(_Temp^(0+128)+1),w
  5001  0F53  1C03               	skipc
  5002  0F54  0008               	return
  5003                           
  5004                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5005  0F55  01D7               	clrf	(_Temp^(0+128)+1)
  5006  0F56  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5007                           
  5008                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5009  0F57  1556               	bsf	_Temp^(0+128),2
  5010                           
  5011                           ;OverTemperature_B1.c: 64: }
  5012                           ;OverTemperature_B1.c: 65: } else {
  5013  0F58  0008               	return
  5014  0F59                     l7128:	
  5015                           
  5016                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5017  0F59  3002               	movlw	2
  5018  0F5A  3192  223B  318F   	fcall	_getMain_All_Error_Status
  5019  0F5D  3800               	iorlw	0
  5020  0F5E  1D03               	skipz
  5021  0F5F  0008               	return
  5022                           
  5023                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5024  0F60  3001               	movlw	1
  5025  0F61  0021               	movlb	1	; select bank1
  5026  0F62  07D7               	addwf	(_Temp^(0+128)+1),f
  5027  0F63  3000               	movlw	0
  5028  0F64  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5029                           
  5030                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5031  0F65  3000               	movlw	0
  5032  0F66  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5033  0F67  3005               	movlw	5
  5034  0F68  1903               	skipnz
  5035  0F69  0257               	subwf	(_Temp^(0+128)+1),w
  5036  0F6A  1C03               	skipc
  5037  0F6B  0008               	return
  5038                           
  5039                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5040  0F6C  01D7               	clrf	(_Temp^(0+128)+1)
  5041  0F6D  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5042                           
  5043                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5044  0F6E  1E56               	btfss	_Temp^(0+128),4
  5045  0F6F  0008               	return
  5046                           
  5047                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5048  0F70  1156               	bcf	_Temp^(0+128),2
  5049                           
  5050                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5051  0F71  300A               	movlw	10
  5052  0F72  3ED6               	addlw	_Temp& (0+255)
  5053  0F73  0086               	movwf	6
  5054  0F74  0187               	clrf	7
  5055  0F75  3008               	movlw	8
  5056  0F76  3ED6               	addlw	_Temp& (0+255)
  5057  0F77  0084               	movwf	4
  5058  0F78  0185               	clrf	5
  5059  0F79  3F40               	moviw [0]fsr1
  5060  0F7A  0700               	addwf	0,w
  5061  0F7B  0020               	movlb	0	; select bank0
  5062  0F7C  00AD               	movwf	??_setTemp_Main
  5063  0F7D  3101               	addfsr 0,1
  5064  0F7E  3F41               	moviw [1]fsr1
  5065  0F7F  3D00               	addwfc	0,w
  5066  0F80  00AE               	movwf	??_setTemp_Main+1
  5067  0F81  36AE               	lsrf	??_setTemp_Main+1,f
  5068  0F82  0CAD               	rrf	??_setTemp_Main,f
  5069  0F83  082D               	movf	??_setTemp_Main,w
  5070  0F84  0021               	movlb	1	; select bank1
  5071  0F85  00DC               	movwf	(_Temp^(0+128)+6)
  5072  0F86  0020               	movlb	0	; select bank0
  5073  0F87  082E               	movf	??_setTemp_Main+1,w
  5074  0F88  0021               	movlb	1	; select bank1
  5075  0F89  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5076                           
  5077                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5078  0F8A  30C7               	movlw	199
  5079  0F8B  00E4               	movwf	(_Temp^(0+128)+14)
  5080  0F8C  3001               	movlw	1
  5081  0F8D  00E5               	movwf	(_Temp^(0+128)+15)
  5082                           
  5083                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5084  0F8E  309F               	movlw	159
  5085  0F8F  00E6               	movwf	(_Temp^(0+128)+16)
  5086  0F90  3001               	movlw	1
  5087  0F91  00E7               	movwf	(_Temp^(0+128)+17)
  5088                           
  5089                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5090  0F92  1CD6               	btfss	_Temp^(0+128),1
  5091  0F93  2FB4               	goto	l7160
  5092                           
  5093                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5094  0F94  0865               	movf	((_Temp+1)^(0+128)+14),w
  5095  0F95  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5096  0F96  1D03               	skipz
  5097  0F97  2F9A               	goto	u6625
  5098  0F98  0864               	movf	(_Temp^(0+128)+14),w
  5099  0F99  025C               	subwf	(_Temp^(0+128)+6),w
  5100  0F9A                     u6625:	
  5101  0F9A  1C03               	skipc
  5102  0F9B  2FB2               	goto	l7158
  5103                           
  5104                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5105  0F9C  3001               	movlw	1
  5106  0F9D  0020               	movlb	0	; select bank0
  5107  0F9E  00AD               	movwf	??_setTemp_Main
  5108  0F9F  082D               	movf	??_setTemp_Main,w
  5109  0FA0  0021               	movlb	1	; select bank1
  5110  0FA1  07D9               	addwf	(_Temp^(0+128)+3),f
  5111                           
  5112                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5113  0FA2  3003               	movlw	3
  5114  0FA3  0259               	subwf	(_Temp^(0+128)+3),w
  5115  0FA4  1C03               	skipc
  5116  0FA5  2FCA               	goto	l7172
  5117                           
  5118                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5119  0FA6  01D9               	clrf	(_Temp^(0+128)+3)
  5120                           
  5121                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5122  0FA7  10D6               	bcf	_Temp^(0+128),1
  5123                           
  5124                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5125  0FA8  3064               	movlw	100
  5126  0FA9  0020               	movlb	0	; select bank0
  5127  0FAA  00A9               	movwf	setBuz@time
  5128  0FAB  3000               	movlw	0
  5129  0FAC  00AA               	movwf	setBuz@time+1
  5130  0FAD  3002               	movlw	2
  5131  0FAE  3196  2639  318F   	fcall	_setBuz
  5132                           
  5133                           ;OverTemperature_B1.c: 96: }
  5134                           ;OverTemperature_B1.c: 97: } else {
  5135  0FB1  2FCA               	goto	l7172
  5136  0FB2                     l7158:	
  5137                           
  5138                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5139  0FB2  0021               	movlb	1	; select bank1
  5140  0FB3  2FC9               	goto	l7170
  5141  0FB4                     l7160:	
  5142                           ;OverTemperature_B1.c: 99: }
  5143                           ;OverTemperature_B1.c: 100: } else {
  5144                           
  5145                           
  5146                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5147  0FB4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5148  0FB5  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5149  0FB6  1D03               	skipz
  5150  0FB7  2FBA               	goto	u6645
  5151  0FB8  085C               	movf	(_Temp^(0+128)+6),w
  5152  0FB9  0266               	subwf	(_Temp^(0+128)+16),w
  5153  0FBA                     u6645:	
  5154  0FBA  1C03               	skipc
  5155  0FBB  2FC9               	goto	l7170
  5156                           
  5157                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5158  0FBC  3001               	movlw	1
  5159  0FBD  0020               	movlb	0	; select bank0
  5160  0FBE  00AD               	movwf	??_setTemp_Main
  5161  0FBF  082D               	movf	??_setTemp_Main,w
  5162  0FC0  0021               	movlb	1	; select bank1
  5163  0FC1  07D9               	addwf	(_Temp^(0+128)+3),f
  5164                           
  5165                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5166  0FC2  3003               	movlw	3
  5167  0FC3  0259               	subwf	(_Temp^(0+128)+3),w
  5168  0FC4  1C03               	skipc
  5169  0FC5  2FCA               	goto	l7172
  5170                           
  5171                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5172  0FC6  01D9               	clrf	(_Temp^(0+128)+3)
  5173                           
  5174                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5175  0FC7  14D6               	bsf	_Temp^(0+128),1
  5176                           
  5177                           ;OverTemperature_B1.c: 106: }
  5178                           ;OverTemperature_B1.c: 107: } else {
  5179  0FC8  2FCA               	goto	l7172
  5180  0FC9                     l7170:	
  5181                           
  5182                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5183  0FC9  01D9               	clrf	(_Temp^(0+128)+3)
  5184  0FCA                     l7172:	
  5185                           
  5186                           ;OverTemperature_B1.c: 109: }
  5187                           ;OverTemperature_B1.c: 110: }
  5188                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5189  0FCA  0021               	movlb	1	; select bank1
  5190  0FCB  085D               	movf	((_Temp+1)^(0+128)+6),w
  5191  0FCC  0020               	movlb	0	; select bank0
  5192  0FCD  00AD               	movwf	??_setTemp_Main
  5193  0FCE  086E               	movf	_product,w
  5194  0FCF  3E18               	addlw	24
  5195  0FD0  0086               	movwf	6
  5196  0FD1  3002               	movlw	2	; select bank4/5
  5197  0FD2  0087               	movwf	7
  5198  0FD3  082D               	movf	??_setTemp_Main,w
  5199  0FD4  0081               	movwf	1
  5200                           
  5201                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5202  0FD5  0021               	movlb	1	; select bank1
  5203  0FD6  085C               	movf	(_Temp^(0+128)+6),w
  5204  0FD7  0020               	movlb	0	; select bank0
  5205  0FD8  00AD               	movwf	??_setTemp_Main
  5206  0FD9  086E               	movf	_product,w
  5207  0FDA  3E19               	addlw	25
  5208  0FDB  0086               	movwf	6
  5209  0FDC  3002               	movlw	2	; select bank4/5
  5210  0FDD  0087               	movwf	7
  5211  0FDE  082D               	movf	??_setTemp_Main,w
  5212  0FDF  0081               	movwf	1
  5213                           
  5214                           ;OverTemperature_B1.c: 115: product->Data[2]=Temp.AD >> 8;
  5215  0FE0  0021               	movlb	1	; select bank1
  5216  0FE1  085D               	movf	((_Temp+1)^(0+128)+6),w
  5217  0FE2  0020               	movlb	0	; select bank0
  5218  0FE3  00AD               	movwf	??_setTemp_Main
  5219  0FE4  086E               	movf	_product,w
  5220  0FE5  3E02               	addlw	2
  5221  0FE6  0086               	movwf	6
  5222  0FE7  3002               	movlw	2	; select bank4/5
  5223  0FE8  0087               	movwf	7
  5224  0FE9  082D               	movf	??_setTemp_Main,w
  5225  0FEA  0081               	movwf	1
  5226                           
  5227                           ;OverTemperature_B1.c: 116: product->Data[3]=Temp.AD;
  5228  0FEB  0021               	movlb	1	; select bank1
  5229  0FEC  085C               	movf	(_Temp^(0+128)+6),w
  5230  0FED  0020               	movlb	0	; select bank0
  5231  0FEE  00AD               	movwf	??_setTemp_Main
  5232  0FEF  086E               	movf	_product,w
  5233  0FF0  3E03               	addlw	3
  5234  0FF1  0086               	movwf	6
  5235  0FF2  3002               	movlw	2	; select bank4/5
  5236  0FF3  0087               	movwf	7
  5237  0FF4  082D               	movf	??_setTemp_Main,w
  5238  0FF5  0081               	movwf	1
  5239                           
  5240                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5241  0FF6  0021               	movlb	1	; select bank1
  5242  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5243  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5244                           
  5245                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5246  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5247  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5248                           
  5249                           ;OverTemperature_B1.c: 120: }
  5250                           ;OverTemperature_B1.c: 121: }
  5251                           ;OverTemperature_B1.c: 122: }
  5252                           ;OverTemperature_B1.c: 123: }
  5253                           ;OverTemperature_B1.c: 124: } else {
  5254  0FFB  0008               	return
  5255  0FFC                     l1689:	
  5256                           
  5257                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5258  0FFC  1C20               	btfss	_myMain^(0+128),0
  5259  0FFD  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5262  0FFE  1456               	bsf	_Temp^(0+128),0
  5263  0FFF  0008               	return
  5264  1000                     __end_of_setTemp_Main:	
  5265                           
  5266                           	psect	text10
  5267  1BD6                     __ptext10:	
  5268 ;; *************** function _Temp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    6
  5291 ;; This function calls:
  5292 ;;		_setTemp_Initialization
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _Temp_Initialization
  5300  1BD6                     _Temp_Initialization:	
  5301                           
  5302                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5306  1BD6  319B  23CC         	fcall	_setTemp_Initialization
  5307  1BD8  0008               	return
  5308  1BD9                     __end_of_Temp_Initialization:	
  5309                           
  5310                           	psect	text11
  5311  1BCC                     __ptext11:	
  5312 ;; *************** function _setTemp_Initialization *****************
  5313 ;; Defined at:
  5314 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Temp_Initialization
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _setTemp_Initialization
  5344  1BCC                     _setTemp_Initialization:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _setTemp_Initialization: []
  5348  1BCC  0008               	return
  5349  1BCD                     __end_of_setTemp_Initialization:	
  5350                           
  5351                           	psect	text12
  5352  1F5D                     __ptext12:	
  5353 ;; *************** function _Switch_Main *****************
  5354 ;; Defined at:
  5355 ;;		line 72 in file "../src/Switch_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  error           1   30[BANK0 ] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        2 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   11
  5376 ;; This function calls:
  5377 ;;		_TouchPower
  5378 ;;		_getMain_All_Error_Status
  5379 ;;		_setMain_Exception
  5380 ;;		_setSw_Main
  5381 ;; This function is called by:
  5382 ;;		_main
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function _Switch_Main
  5388  1F5D                     _Switch_Main:	
  5389                           
  5390                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5391                           
  5392                           ;incstack = 0
  5393                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5394  1F5D  3000               	movlw	0
  5395  1F5E  3192  223B  319F   	fcall	_getMain_All_Error_Status
  5396  1F61  0020               	movlb	0	; select bank0
  5397  1F62  00BD               	movwf	??_Switch_Main
  5398  1F63  083D               	movf	??_Switch_Main,w
  5399  1F64  00BE               	movwf	Switch_Main@error
  5400                           
  5401                           ;Switch_B1.c: 74: if (error != 0) {
  5402  1F65  083E               	movf	Switch_Main@error,w
  5403  1F66  1903               	btfsc	3,2
  5404  1F67  2F6D               	goto	l2385
  5405                           
  5406                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5407  1F68  0021               	movlb	1	; select bank1
  5408  1F69  1851               	btfsc	_SwDetect^(0+128),0
  5409  1F6A  2F76               	goto	l7852
  5410                           
  5411                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5412  1F6B  1451               	bsf	_SwDetect^(0+128),0
  5413  1F6C  2F71               	goto	L2
  5414  1F6D                     l2385:	
  5415                           ;Switch_B1.c: 80: }
  5416                           ;Switch_B1.c: 81: } else {
  5417                           
  5418                           ;Switch_B1.c: 78: setMain_Exception(error);
  5419                           
  5420                           
  5421                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5422  1F6D  0021               	movlb	1	; select bank1
  5423  1F6E  1C51               	btfss	_SwDetect^(0+128),0
  5424  1F6F  2F76               	goto	l7852
  5425                           
  5426                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5427  1F70  1051               	bcf	_SwDetect^(0+128),0
  5428  1F71                     L2:	
  5429                           
  5430                           ;Switch_B1.c: 85: setMain_Exception(error);
  5431  1F71  0020               	movlb	0	; select bank0
  5432  1F72  083E               	movf	Switch_Main@error,w
  5433  1F73  3197  2747  319F   	fcall	_setMain_Exception
  5434  1F76                     l7852:	
  5435                           
  5436                           ;Switch_B1.c: 87: }
  5437                           ;Switch_B1.c: 88: }
  5438                           ;Switch_B1.c: 91: setSw_Main(1);
  5439  1F76  3001               	movlw	1
  5440  1F77  3180  2043  319F   	fcall	_setSw_Main
  5441                           
  5442                           ;Switch_B1.c: 103: TouchPower();
  5443  1F7A  319E  266D         	fcall	_TouchPower
  5444  1F7C  0008               	return
  5445  1F7D                     __end_of_Switch_Main:	
  5446                           
  5447                           	psect	text13
  5448  0043                     __ptext13:	
  5449 ;; *************** function _setSw_Main *****************
  5450 ;; Defined at:
  5451 ;;		line 137 in file "../src/Switch_B1.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  sw              1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  sw              1   19[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;Total ram usage:        3 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    9
  5472 ;; This function calls:
  5473 ;;		_SwPointSelect
  5474 ;;		_getSw_KeyStatus
  5475 ;;		_setBuz
  5476 ;;		_setDimmerLights_AdjControl
  5477 ;;		_setDimmerLights_SwOff
  5478 ;;		_setDimmerLights_SwOn
  5479 ;;		_setRF_Learn
  5480 ;; This function is called by:
  5481 ;;		_Switch_Main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _setSw_Main
  5487  0043                     _setSw_Main:	
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5491                           ;setSw_Main@sw stored from wreg
  5492  0043  0020               	movlb	0	; select bank0
  5493  0044  00B3               	movwf	setSw_Main@sw
  5494                           
  5495                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5496  0045  0833               	movf	setSw_Main@sw,w
  5497  0046  319C  24AF  3180   	fcall	_SwPointSelect
  5498                           
  5499                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5500  0049  087C               	movf	_Sw,w
  5501  004A  0086               	movwf	6
  5502  004B  3001               	movlw	1	; select bank2/3
  5503  004C  0087               	movwf	7
  5504  004D  1C01               	btfss	1,0
  5505  004E  29A9               	goto	l2395
  5506                           
  5507                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5508  004F  0021               	movlb	1	; select bank1
  5509  0050  1851               	btfsc	_SwDetect^(0+128),0
  5510  0051  286D               	goto	l7316
  5511                           
  5512                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5513  0052  0A7C               	incf	_Sw,w
  5514  0053  0086               	movwf	6
  5515  0054  3001               	movlw	1	; select bank2/3
  5516  0055  0087               	movwf	7
  5517  0056  1081               	bcf	1,1
  5518                           
  5519                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5520  0057  0020               	movlb	0	; select bank0
  5521  0058  0833               	movf	setSw_Main@sw,w
  5522  0059  319D  25AE  3180   	fcall	_getSw_KeyStatus
  5523  005C  3A01               	xorlw	1
  5524  005D  3000               	movlw	0
  5525  005E  1903               	skipnz
  5526  005F  3001               	movlw	1
  5527  0060  0020               	movlb	0	; select bank0
  5528  0061  00B1               	movwf	??_setSw_Main
  5529  0062  087C               	movf	_Sw,w
  5530  0063  0086               	movwf	6
  5531  0064  3001               	movlw	1	; select bank2/3
  5532  0065  0087               	movwf	7
  5533  0066  0DB1               	rlf	??_setSw_Main,f
  5534  0067  0801               	movf	1,w
  5535  0068  0631               	xorwf	??_setSw_Main,w
  5536  0069  39FD               	andlw	-3
  5537  006A  0631               	xorwf	??_setSw_Main,w
  5538  006B  0081               	movwf	1
  5539                           
  5540                           ;Switch_B1.c: 143: } else {
  5541  006C  2882               	goto	l2397
  5542  006D                     l7316:	
  5543                           
  5544                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5545  006D  0A7C               	incf	_Sw,w
  5546  006E  0086               	movwf	6
  5547  006F  3001               	movlw	1	; select bank2/3
  5548  0070  0087               	movwf	7
  5549  0071  1881               	btfsc	1,1
  5550  0072  2882               	goto	l2397
  5551                           
  5552                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5553  0073  0A7C               	incf	_Sw,w
  5554  0074  0086               	movwf	6
  5555  0075  3001               	movlw	1	; select bank2/3
  5556  0076  0087               	movwf	7
  5557  0077  1481               	bsf	1,1
  5558                           
  5559                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5560  0078  087C               	movf	_Sw,w
  5561  0079  0086               	movwf	6
  5562  007A  3001               	movlw	1	; select bank2/3
  5563  007B  0087               	movwf	7
  5564  007C  1081               	bcf	1,1
  5565                           
  5566                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5567  007D  087C               	movf	_Sw,w
  5568  007E  0086               	movwf	6
  5569  007F  3001               	movlw	1	; select bank2/3
  5570  0080  0087               	movwf	7
  5571  0081  1501               	bsf	1,2
  5572  0082                     l2397:	
  5573                           
  5574                           ;Switch_B1.c: 148: }
  5575                           ;Switch_B1.c: 149: }
  5576                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5577  0082  087C               	movf	_Sw,w
  5578  0083  0086               	movwf	6
  5579  0084  3001               	movlw	1	; select bank2/3
  5580  0085  0087               	movwf	7
  5581  0086  1C81               	btfss	1,1
  5582  0087  2952               	goto	l7366
  5583                           
  5584                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5585  0088  087C               	movf	_Sw,w
  5586  0089  0086               	movwf	6
  5587  008A  3001               	movlw	1	; select bank2/3
  5588  008B  0087               	movwf	7
  5589  008C  1901               	btfsc	1,2
  5590  008D  28B0               	goto	l7332
  5591                           
  5592                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5593  008E  3001               	movlw	1
  5594  008F  0020               	movlb	0	; select bank0
  5595  0090  00B1               	movwf	??_setSw_Main
  5596  0091  087C               	movf	_Sw,w
  5597  0092  3E02               	addlw	2
  5598  0093  0086               	movwf	6
  5599  0094  3001               	movlw	1	; select bank2/3
  5600  0095  0087               	movwf	7
  5601  0096  0831               	movf	??_setSw_Main,w
  5602  0097  0781               	addwf	1,f
  5603                           
  5604                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5605  0098  087C               	movf	_Sw,w
  5606  0099  3E02               	addlw	2
  5607  009A  0086               	movwf	6
  5608  009B  3001               	movlw	1	; select bank2/3
  5609  009C  0087               	movwf	7
  5610  009D  3005               	movlw	5
  5611  009E  0201               	subwf	1,w
  5612  009F  1C03               	skipc
  5613  00A0  0008               	return
  5614                           
  5615                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5616  00A1  087C               	movf	_Sw,w
  5617  00A2  3E02               	addlw	2
  5618  00A3  0086               	movwf	6
  5619  00A4  3001               	movlw	1	; select bank2/3
  5620  00A5  0087               	movwf	7
  5621  00A6  0181               	clrf	1
  5622                           
  5623                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5624  00A7  087C               	movf	_Sw,w
  5625  00A8  0086               	movwf	6
  5626  00A9  3001               	movlw	1	; select bank2/3
  5627  00AA  0087               	movwf	7
  5628  00AB  1501               	bsf	1,2
  5629                           
  5630                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5631  00AC  0833               	movf	setSw_Main@sw,w
  5632  00AD  3193  23E7         	fcall	_setDimmerLights_SwOn
  5633                           
  5634                           ;Switch_B1.c: 162: }
  5635                           ;Switch_B1.c: 163: } else {
  5636  00AF  0008               	return
  5637  00B0                     l7332:	
  5638                           
  5639                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5640  00B0  087C               	movf	_Sw,w
  5641  00B1  0086               	movwf	6
  5642  00B2  3001               	movlw	1	; select bank2/3
  5643  00B3  0087               	movwf	7
  5644  00B4  1981               	btfsc	1,3
  5645  00B5  28E2               	goto	l7342
  5646                           
  5647                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5648  00B6  087C               	movf	_Sw,w
  5649  00B7  3E03               	addlw	3
  5650  00B8  0086               	movwf	6
  5651  00B9  3001               	movlw	1	; select bank2/3
  5652  00BA  0087               	movwf	7
  5653  00BB  3001               	movlw	1
  5654  00BC  0781               	addwf	1,f
  5655  00BD  3141               	addfsr 1,1
  5656  00BE  1803               	skipnc
  5657  00BF  0A81               	incf	1,f
  5658                           
  5659                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5660  00C0  087C               	movf	_Sw,w
  5661  00C1  3E03               	addlw	3
  5662  00C2  0086               	movwf	6
  5663  00C3  3001               	movlw	1	; select bank2/3
  5664  00C4  0087               	movwf	7
  5665  00C5  3F40               	moviw [0]fsr1
  5666  00C6  0020               	movlb	0	; select bank0
  5667  00C7  00B1               	movwf	??_setSw_Main
  5668  00C8  3F41               	moviw [1]fsr1
  5669  00C9  00B2               	movwf	??_setSw_Main+1
  5670  00CA  3000               	movlw	0
  5671  00CB  0232               	subwf	??_setSw_Main+1,w
  5672  00CC  3096               	movlw	150
  5673  00CD  1903               	skipnz
  5674  00CE  0231               	subwf	??_setSw_Main,w
  5675  00CF  1C03               	skipc
  5676  00D0  0008               	return
  5677                           
  5678                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5679  00D1  087C               	movf	_Sw,w
  5680  00D2  3E03               	addlw	3
  5681  00D3  0086               	movwf	6
  5682  00D4  3001               	movlw	1	; select bank2/3
  5683  00D5  0087               	movwf	7
  5684  00D6  3000               	movlw	0
  5685  00D7  3FC0               	movwi [0]fsr1
  5686  00D8  3FC1               	movwi [1]fsr1
  5687                           
  5688                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5689  00D9  087C               	movf	_Sw,w
  5690  00DA  0086               	movwf	6
  5691  00DB  3001               	movlw	1	; select bank2/3
  5692  00DC  0087               	movwf	7
  5693  00DD  1581               	bsf	1,3
  5694                           
  5695                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5696  00DE  0833               	movf	setSw_Main@sw,w
  5697  00DF  3192  22A1         	fcall	_setDimmerLights_AdjControl
  5698                           
  5699                           ;Switch_B1.c: 174: }
  5700                           ;Switch_B1.c: 175: } else {
  5701  00E1  0008               	return
  5702  00E2                     l7342:	
  5703                           
  5704                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5705  00E2  087C               	movf	_Sw,w
  5706  00E3  0086               	movwf	6
  5707  00E4  3001               	movlw	1	; select bank2/3
  5708  00E5  0087               	movwf	7
  5709  00E6  1A01               	btfsc	1,4
  5710  00E7  2920               	goto	l7356
  5711                           
  5712                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5713  00E8  087C               	movf	_Sw,w
  5714  00E9  3E05               	addlw	5
  5715  00EA  0086               	movwf	6
  5716  00EB  3001               	movlw	1	; select bank2/3
  5717  00EC  0087               	movwf	7
  5718  00ED  3001               	movlw	1
  5719  00EE  0781               	addwf	1,f
  5720  00EF  3141               	addfsr 1,1
  5721  00F0  1803               	skipnc
  5722  00F1  0A81               	incf	1,f
  5723                           
  5724                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5725  00F2  087C               	movf	_Sw,w
  5726  00F3  3E05               	addlw	5
  5727  00F4  0086               	movwf	6
  5728  00F5  3001               	movlw	1	; select bank2/3
  5729  00F6  0087               	movwf	7
  5730  00F7  3F40               	moviw [0]fsr1
  5731  00F8  0020               	movlb	0	; select bank0
  5732  00F9  00B1               	movwf	??_setSw_Main
  5733  00FA  3F41               	moviw [1]fsr1
  5734  00FB  00B2               	movwf	??_setSw_Main+1
  5735  00FC  3000               	movlw	0
  5736  00FD  0232               	subwf	??_setSw_Main+1,w
  5737  00FE  3096               	movlw	150
  5738  00FF  1903               	skipnz
  5739  0100  0231               	subwf	??_setSw_Main,w
  5740  0101  1C03               	skipc
  5741  0102  0008               	return
  5742                           
  5743                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5744  0103  087C               	movf	_Sw,w
  5745  0104  3E05               	addlw	5
  5746  0105  0086               	movwf	6
  5747  0106  3001               	movlw	1	; select bank2/3
  5748  0107  0087               	movwf	7
  5749  0108  3000               	movlw	0
  5750  0109  3FC0               	movwi [0]fsr1
  5751  010A  3FC1               	movwi [1]fsr1
  5752                           
  5753                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5754  010B  087C               	movf	_Sw,w
  5755  010C  0086               	movwf	6
  5756  010D  3001               	movlw	1	; select bank2/3
  5757  010E  0087               	movwf	7
  5758  010F  1601               	bsf	1,4
  5759                           
  5760                           ;Switch_B1.c: 183: setRF_Learn(1);
  5761  0110  3001               	movlw	1
  5762  0111  319E  262F  3180   	fcall	_setRF_Learn
  5763                           
  5764                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5765  0114  0021               	movlb	1	; select bank1
  5766  0115  1EA0               	btfss	_myMain^(0+128),5
  5767  0116  0008               	return
  5768                           
  5769                           ;Switch_B1.c: 186: setBuz(2, 100);
  5770  0117  3064               	movlw	100
  5771  0118  0020               	movlb	0	; select bank0
  5772  0119  00A9               	movwf	setBuz@time
  5773  011A  3000               	movlw	0
  5774  011B  00AA               	movwf	setBuz@time+1
  5775  011C  3002               	movlw	2
  5776  011D  3196  2639         	fcall	_setBuz
  5777                           
  5778                           ;Switch_B1.c: 187: }
  5779                           ;Switch_B1.c: 189: }
  5780                           ;Switch_B1.c: 190: } else {
  5781  011F  0008               	return
  5782  0120                     l7356:	
  5783                           
  5784                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5785  0120  087C               	movf	_Sw,w
  5786  0121  0086               	movwf	6
  5787  0122  3001               	movlw	1	; select bank2/3
  5788  0123  0087               	movwf	7
  5789  0124  1A81               	btfsc	1,5
  5790  0125  0008               	return
  5791                           
  5792                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5793  0126  087C               	movf	_Sw,w
  5794  0127  3E07               	addlw	7
  5795  0128  0086               	movwf	6
  5796  0129  3001               	movlw	1	; select bank2/3
  5797  012A  0087               	movwf	7
  5798  012B  3001               	movlw	1
  5799  012C  0781               	addwf	1,f
  5800  012D  3141               	addfsr 1,1
  5801  012E  1803               	skipnc
  5802  012F  0A81               	incf	1,f
  5803                           
  5804                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5805  0130  087C               	movf	_Sw,w
  5806  0131  3E07               	addlw	7
  5807  0132  0086               	movwf	6
  5808  0133  3001               	movlw	1	; select bank2/3
  5809  0134  0087               	movwf	7
  5810  0135  3F40               	moviw [0]fsr1
  5811  0136  0020               	movlb	0	; select bank0
  5812  0137  00B1               	movwf	??_setSw_Main
  5813  0138  3F41               	moviw [1]fsr1
  5814  0139  00B2               	movwf	??_setSw_Main+1
  5815  013A  3001               	movlw	1
  5816  013B  0232               	subwf	??_setSw_Main+1,w
  5817  013C  302C               	movlw	44
  5818  013D  1903               	skipnz
  5819  013E  0231               	subwf	??_setSw_Main,w
  5820  013F  1C03               	skipc
  5821  0140  0008               	return
  5822                           
  5823                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5824  0141  087C               	movf	_Sw,w
  5825  0142  3E07               	addlw	7
  5826  0143  0086               	movwf	6
  5827  0144  3001               	movlw	1	; select bank2/3
  5828  0145  0087               	movwf	7
  5829  0146  3000               	movlw	0
  5830  0147  3FC0               	movwi [0]fsr1
  5831  0148  3FC1               	movwi [1]fsr1
  5832                           
  5833                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5834  0149  087C               	movf	_Sw,w
  5835  014A  0086               	movwf	6
  5836  014B  3001               	movlw	1	; select bank2/3
  5837  014C  0087               	movwf	7
  5838  014D  1681               	bsf	1,5
  5839                           
  5840                           ;Switch_B1.c: 198: setRF_Learn(0);
  5841  014E  3000               	movlw	0
  5842  014F  319E  262F         	fcall	_setRF_Learn
  5843                           
  5844                           ;Switch_B1.c: 201: }
  5845                           ;Switch_B1.c: 202: }
  5846                           ;Switch_B1.c: 203: }
  5847                           ;Switch_B1.c: 204: }
  5848                           ;Switch_B1.c: 205: }
  5849                           ;Switch_B1.c: 206: } else {
  5850  0151  0008               	return
  5851  0152                     l7366:	
  5852                           
  5853                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5854  0152  087C               	movf	_Sw,w
  5855  0153  0086               	movwf	6
  5856  0154  3001               	movlw	1	; select bank2/3
  5857  0155  0087               	movwf	7
  5858  0156  1D01               	btfss	1,2
  5859  0157  0008               	return
  5860                           
  5861                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5862  0158  3001               	movlw	1
  5863  0159  0020               	movlb	0	; select bank0
  5864  015A  00B1               	movwf	??_setSw_Main
  5865  015B  087C               	movf	_Sw,w
  5866  015C  3E02               	addlw	2
  5867  015D  0086               	movwf	6
  5868  015E  3001               	movlw	1	; select bank2/3
  5869  015F  0087               	movwf	7
  5870  0160  0831               	movf	??_setSw_Main,w
  5871  0161  0781               	addwf	1,f
  5872                           
  5873                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5874  0162  087C               	movf	_Sw,w
  5875  0163  3E02               	addlw	2
  5876  0164  0086               	movwf	6
  5877  0165  3001               	movlw	1	; select bank2/3
  5878  0166  0087               	movwf	7
  5879  0167  3005               	movlw	5
  5880  0168  0201               	subwf	1,w
  5881  0169  1C03               	skipc
  5882  016A  0008               	return
  5883                           
  5884                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5885  016B  087C               	movf	_Sw,w
  5886  016C  3E02               	addlw	2
  5887  016D  0086               	movwf	6
  5888  016E  3001               	movlw	1	; select bank2/3
  5889  016F  0087               	movwf	7
  5890  0170  0181               	clrf	1
  5891                           
  5892                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5893  0171  087C               	movf	_Sw,w
  5894  0172  0086               	movwf	6
  5895  0173  3001               	movlw	1	; select bank2/3
  5896  0174  0087               	movwf	7
  5897  0175  1101               	bcf	1,2
  5898                           
  5899                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5900  0176  087C               	movf	_Sw,w
  5901  0177  3E03               	addlw	3
  5902  0178  0086               	movwf	6
  5903  0179  3001               	movlw	1	; select bank2/3
  5904  017A  0087               	movwf	7
  5905  017B  3000               	movlw	0
  5906  017C  3FC0               	movwi [0]fsr1
  5907  017D  3FC1               	movwi [1]fsr1
  5908                           
  5909                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5910  017E  087C               	movf	_Sw,w
  5911  017F  0086               	movwf	6
  5912  0180  3001               	movlw	1	; select bank2/3
  5913  0181  0087               	movwf	7
  5914  0182  1181               	bcf	1,3
  5915                           
  5916                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5917  0183  087C               	movf	_Sw,w
  5918  0184  3E05               	addlw	5
  5919  0185  0086               	movwf	6
  5920  0186  3001               	movlw	1	; select bank2/3
  5921  0187  0087               	movwf	7
  5922  0188  3000               	movlw	0
  5923  0189  3FC0               	movwi [0]fsr1
  5924  018A  3FC1               	movwi [1]fsr1
  5925                           
  5926                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5927  018B  087C               	movf	_Sw,w
  5928  018C  0086               	movwf	6
  5929  018D  3001               	movlw	1	; select bank2/3
  5930  018E  0087               	movwf	7
  5931  018F  1201               	bcf	1,4
  5932                           
  5933                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5934  0190  087C               	movf	_Sw,w
  5935  0191  3E07               	addlw	7
  5936  0192  0086               	movwf	6
  5937  0193  3001               	movlw	1	; select bank2/3
  5938  0194  0087               	movwf	7
  5939  0195  3000               	movlw	0
  5940  0196  3FC0               	movwi [0]fsr1
  5941  0197  3FC1               	movwi [1]fsr1
  5942                           
  5943                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5944  0198  087C               	movf	_Sw,w
  5945  0199  0086               	movwf	6
  5946  019A  3001               	movlw	1	; select bank2/3
  5947  019B  0087               	movwf	7
  5948  019C  1281               	bcf	1,5
  5949                           
  5950                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5951  019D  0021               	movlb	1	; select bank1
  5952  019E  1851               	btfsc	_SwDetect^(0+128),0
  5953  019F  29A5               	goto	l7392
  5954                           
  5955                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5956  01A0  0020               	movlb	0	; select bank0
  5957  01A1  0833               	movf	setSw_Main@sw,w
  5958  01A2  3194  24A7  3180   	fcall	_setDimmerLights_SwOff
  5959  01A5                     l7392:	
  5960                           
  5961                           ;Switch_B1.c: 221: }
  5962                           ;Switch_B1.c: 224: setRF_Learn(0);
  5963  01A5  3000               	movlw	0
  5964  01A6  319E  262F         	fcall	_setRF_Learn
  5965                           
  5966                           ;Switch_B1.c: 226: }
  5967                           ;Switch_B1.c: 227: }
  5968                           ;Switch_B1.c: 228: }
  5969                           ;Switch_B1.c: 229: } else {
  5970  01A8  0008               	return
  5971  01A9                     l2395:	
  5972                           
  5973                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5974  01A9  0021               	movlb	1	; select bank1
  5975  01AA  1C20               	btfss	_myMain^(0+128),0
  5976  01AB  0008               	return
  5977                           
  5978                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5979  01AC  087C               	movf	_Sw,w
  5980  01AD  0086               	movwf	6
  5981  01AE  3001               	movlw	1	; select bank2/3
  5982  01AF  0087               	movwf	7
  5983  01B0  1401               	bsf	1,0
  5984  01B1  0008               	return
  5985  01B2                     __end_of_setSw_Main:	
  5986                           
  5987                           	psect	text14
  5988  1E2F                     __ptext14:	
  5989 ;; *************** function _setRF_Learn *****************
  5990 ;; Defined at:
  5991 ;;		line 23 in file "../src/RF_Control_B1.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  command         1    wreg     unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  command         1    1[BANK0 ] unsigned char 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;		None               void
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;Total ram usage:        2 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    5
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_setSw_Main
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           
  6020                           ;psect for function _setRF_Learn
  6021  1E2F                     _setRF_Learn:	
  6022                           
  6023                           ;incstack = 0
  6024                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6025                           ;setRF_Learn@command stored from wreg
  6026  1E2F  0020               	movlb	0	; select bank0
  6027  1E30  00A1               	movwf	setRF_Learn@command
  6028                           
  6029                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6030  1E31  0821               	movf	setRF_Learn@command,w
  6031  1E32  3A01               	xorlw	1
  6032  1E33  3000               	movlw	0
  6033  1E34  1903               	skipnz
  6034  1E35  3001               	movlw	1
  6035  1E36  00A0               	movwf	??_setRF_Learn
  6036  1E37  0EA0               	swapf	??_setRF_Learn,f
  6037  1E38  0DA0               	rlf	??_setRF_Learn,f
  6038  1E39  0DA0               	rlf	??_setRF_Learn,f
  6039  1E3A  0021               	movlb	1	; select bank1
  6040  1E3B  083B               	movf	_RF1^(0+128),w
  6041  1E3C  0020               	movlb	0	; select bank0
  6042  1E3D  0620               	xorwf	??_setRF_Learn,w
  6043  1E3E  39BF               	andlw	-65
  6044  1E3F  0620               	xorwf	??_setRF_Learn,w
  6045  1E40  0021               	movlb	1	; select bank1
  6046  1E41  00BB               	movwf	_RF1^(0+128)
  6047  1E42  0008               	return
  6048  1E43                     __end_of_setRF_Learn:	
  6049                           
  6050                           	psect	text15
  6051  12A1                     __ptext15:	
  6052 ;; *************** function _setDimmerLights_AdjControl *****************
  6053 ;; Defined at:
  6054 ;;		line 546 in file "../src/Dimmer_B1.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  sw              1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  sw              1    8[BANK0 ] unsigned char 
  6059 ;;  idle            1    6[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;		None               void
  6062 ;; Registers used:
  6063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;Total ram usage:        4 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    7
  6076 ;; This function calls:
  6077 ;;		_DimmerLightsPointSelect
  6078 ;;		_getAll_DimmerLights_AdjGO
  6079 ;;		_setDimmerLights_TriggerAdj
  6080 ;; This function is called by:
  6081 ;;		_setSw_Main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _setDimmerLights_AdjControl
  6087  12A1                     _setDimmerLights_AdjControl:	
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6091                           ;setDimmerLights_AdjControl@sw stored from wreg
  6092  12A1  0020               	movlb	0	; select bank0
  6093  12A2  00A8               	movwf	setDimmerLights_AdjControl@sw
  6094                           
  6095                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6096  12A3  0828               	movf	setDimmerLights_AdjControl@sw,w
  6097  12A4  319C  2478  3192   	fcall	_DimmerLightsPointSelect
  6098                           
  6099                           ;Dimmer_B1.c: 548: char idle = 0;
  6100  12A7  0020               	movlb	0	; select bank0
  6101  12A8  01A6               	clrf	setDimmerLights_AdjControl@idle
  6102                           
  6103                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6104  12A9  01A7               	clrf	_setDimmerLights_AdjControl$2409
  6105  12AA  319C  2458  3192   	fcall	_getAll_DimmerLights_AdjGO
  6106  12AD  3A01               	xorlw	1
  6107  12AE  1D03               	skipz
  6108  12AF  2AB6               	goto	l6534
  6109  12B0  0022               	movlb	2	; select bank2
  6110  12B1  1CBE               	btfss	_Dimmer^(0+256),1
  6111  12B2  2AB6               	goto	l6534
  6112  12B3  0020               	movlb	0	; select bank0
  6113  12B4  01A7               	clrf	_setDimmerLights_AdjControl$2409
  6114  12B5  0AA7               	incf	_setDimmerLights_AdjControl$2409,f
  6115  12B6                     l6534:	
  6116  12B6  0020               	movlb	0	; select bank0
  6117  12B7  0827               	movf	_setDimmerLights_AdjControl$2409,w
  6118  12B8  00A5               	movwf	??_setDimmerLights_AdjControl
  6119  12B9  0825               	movf	??_setDimmerLights_AdjControl,w
  6120  12BA  00A6               	movwf	setDimmerLights_AdjControl@idle
  6121                           
  6122                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6123  12BB  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6124  12BC  1D03               	skipz
  6125  12BD  0008               	return
  6126                           
  6127                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6128  12BE  086F               	movf	_DimmerLights,w
  6129  12BF  3E09               	addlw	9
  6130  12C0  0086               	movwf	6
  6131  12C1  3001               	movlw	1	; select bank2/3
  6132  12C2  0087               	movwf	7
  6133  12C3  1F01               	btfss	1,6
  6134  12C4  0008               	return
  6135                           
  6136                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6137  12C5  086F               	movf	_DimmerLights,w
  6138  12C6  3E09               	addlw	9
  6139  12C7  0086               	movwf	6
  6140  12C8  3001               	movlw	1	; select bank2/3
  6141  12C9  0087               	movwf	7
  6142  12CA  1781               	bsf	1,7
  6143                           
  6144                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6145  12CB  086F               	movf	_DimmerLights,w
  6146  12CC  0086               	movwf	6
  6147  12CD  3001               	movlw	1	; select bank2/3
  6148  12CE  0087               	movwf	7
  6149  12CF  1681               	bsf	1,5
  6150                           
  6151                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6152  12D0  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6153  12D1  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6154  12D2  0828               	movf	setDimmerLights_AdjControl@sw,w
  6155  12D3  319F  273D         	fcall	_setDimmerLights_TriggerAdj
  6156  12D5  0008               	return
  6157  12D6                     __end_of_setDimmerLights_AdjControl:	
  6158                           
  6159                           	psect	text16
  6160  1DAE                     __ptext16:	
  6161 ;; *************** function _getSw_KeyStatus *****************
  6162 ;; Defined at:
  6163 ;;		line 237 in file "../src/Switch_B1.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  sw              1    wreg     unsigned char 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  sw              1    0[COMMON] unsigned char 
  6168 ;;  status          1    1[BANK0 ] unsigned char 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      unsigned char 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;Total ram usage:        3 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    5
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_setSw_Main
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function _getSw_KeyStatus
  6194  1DAE                     _getSw_KeyStatus:	
  6195                           
  6196                           ;Switch_B1.c: 238: char status = 0;
  6197                           
  6198                           ;incstack = 0
  6199                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6200  1DAE  0020               	movlb	0	; select bank0
  6201  1DAF  01A1               	clrf	getSw_KeyStatus@status
  6202                           
  6203                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6204  1DB0  01A2               	clrf	_getSw_KeyStatus$6549
  6205  1DB1  0AA2               	incf	_getSw_KeyStatus$6549,f
  6206  1DB2  1F0C               	btfss	12,6	;volatile
  6207  1DB3  1A0C               	btfsc	12,4	;volatile
  6208  1DB4  2DB9               	goto	l6732
  6209  1DB5  1C0C               	btfss	12,0	;volatile
  6210  1DB6  1B8C               	btfsc	12,7	;volatile
  6211  1DB7  2DB9               	goto	l6732
  6212  1DB8  01A2               	clrf	_getSw_KeyStatus$6549
  6213  1DB9                     l6732:	
  6214  1DB9  0822               	movf	_getSw_KeyStatus$6549,w
  6215  1DBA  00A0               	movwf	??_getSw_KeyStatus
  6216  1DBB  0820               	movf	??_getSw_KeyStatus,w
  6217  1DBC  00A1               	movwf	getSw_KeyStatus@status
  6218                           
  6219                           ;Switch_B1.c: 261: return status;
  6220  1DBD  0821               	movf	getSw_KeyStatus@status,w
  6221  1DBE  0008               	return
  6222  1DBF                     __end_of_getSw_KeyStatus:	
  6223                           
  6224                           	psect	text17
  6225  1CAF                     __ptext17:	
  6226 ;; *************** function _SwPointSelect *****************
  6227 ;; Defined at:
  6228 ;;		line 25 in file "../src/Switch_B1.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  sw              1    wreg     unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  sw              1    1[BANK0 ] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;		None               void
  6235 ;; Registers used:
  6236 ;;		wreg
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;Total ram usage:        2 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    5
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_setSw_Main
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function _SwPointSelect
  6258  1CAF                     _SwPointSelect:	
  6259                           
  6260                           ;incstack = 0
  6261                           ; Regs used in _SwPointSelect: [wreg]
  6262                           ;SwPointSelect@sw stored from wreg
  6263  1CAF  0020               	movlb	0	; select bank0
  6264  1CB0  00A1               	movwf	SwPointSelect@sw
  6265                           
  6266                           ;Switch_B1.c: 28: if (sw == 1) {
  6267  1CB1  0821               	movf	SwPointSelect@sw,w
  6268  1CB2  3A01               	xorlw	1
  6269  1CB3  1D03               	skipz
  6270  1CB4  0008               	return
  6271                           
  6272                           ;Switch_B1.c: 29: Sw = &Sw1;
  6273  1CB5  30D4               	movlw	_Sw1& (0+255)
  6274  1CB6  00A0               	movwf	??_SwPointSelect
  6275  1CB7  0820               	movf	??_SwPointSelect,w
  6276  1CB8  00FC               	movwf	_Sw
  6277  1CB9  0008               	return
  6278  1CBA                     __end_of_SwPointSelect:	
  6279                           
  6280                           	psect	text18
  6281  1747                     __ptext18:	
  6282 ;; *************** function _setMain_Exception *****************
  6283 ;; Defined at:
  6284 ;;		line 289 in file "../src/Main_B1.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  command         1    wreg     unsigned char 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  command         1   28[BANK0 ] unsigned char 
  6289 ;;  status          1   27[BANK0 ] unsigned char 
  6290 ;;  buz             1   24[BANK0 ] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:        7 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:   10
  6307 ;; This function calls:
  6308 ;;		_getDimmerLights_Line
  6309 ;;		_getMain_LightsStatus
  6310 ;;		_setBuz
  6311 ;;		_setDimmerLights_ErrorClose
  6312 ;;		_setLED
  6313 ;; This function is called by:
  6314 ;;		_Switch_Main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _setMain_Exception
  6320  1747                     _setMain_Exception:	
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6324                           ;setMain_Exception@command stored from wreg
  6325  1747  0020               	movlb	0	; select bank0
  6326  1748  00BC               	movwf	setMain_Exception@command
  6327                           
  6328                           ;Main_B1.c: 290: char status = 0, buz = 0;
  6329  1749  01BB               	clrf	setMain_Exception@status
  6330  174A  01B8               	clrf	setMain_Exception@buz
  6331                           
  6332                           ;Main_B1.c: 307: status = command == 3 ? getDimmerLights_Line() : 255;
  6333  174B  083C               	movf	setMain_Exception@command,w
  6334  174C  3A03               	xorlw	3
  6335  174D  1903               	skipnz
  6336  174E  2F53               	goto	l7062
  6337  174F  30FF               	movlw	255
  6338  1750  00B9               	movwf	_setMain_Exception$3733
  6339  1751  3000               	movlw	0
  6340  1752  2F5C               	goto	L3
  6341  1753                     l7062:	
  6342  1753  319C  24A4  3197   	fcall	_getDimmerLights_Line
  6343  1756  0020               	movlb	0	; select bank0
  6344  1757  00B6               	movwf	??_setMain_Exception
  6345  1758  01B7               	clrf	??_setMain_Exception+1
  6346  1759  0836               	movf	??_setMain_Exception,w
  6347  175A  00B9               	movwf	_setMain_Exception$3733
  6348  175B  0837               	movf	??_setMain_Exception+1,w
  6349  175C                     L3:	
  6350  175C  00BA               	movwf	_setMain_Exception$3733+1
  6351  175D  0839               	movf	_setMain_Exception$3733,w
  6352  175E  00B6               	movwf	??_setMain_Exception
  6353  175F  0836               	movf	??_setMain_Exception,w
  6354  1760  00BB               	movwf	setMain_Exception@status
  6355                           
  6356                           ;Main_B1.c: 309: if (command == 0) {
  6357  1761  08BC               	movf	setMain_Exception@command,f
  6358  1762  1D03               	skipz
  6359  1763  2F66               	goto	l7070
  6360                           
  6361                           ;Main_B1.c: 310: setLED(99, 10);
  6362  1764  300A               	movlw	10
  6363  1765  2F68               	goto	L4
  6364  1766                     l7070:	
  6365                           ;Main_B1.c: 311: } else {
  6366                           
  6367                           
  6368                           ;Main_B1.c: 312: setLED(99, 11);
  6369  1766  300B               	movlw	11
  6370  1767  0020               	movlb	0	; select bank0
  6371  1768                     L4:	
  6372  1768  00B6               	movwf	??_setMain_Exception
  6373  1769  0836               	movf	??_setMain_Exception,w
  6374  176A  00A2               	movwf	setLED@command
  6375  176B  3063               	movlw	99
  6376  176C  3192  22D6  3197   	fcall	_setLED
  6377                           
  6378                           ;Main_B1.c: 313: }
  6379                           ;Main_B1.c: 315: if (command != 0) {
  6380  176F  0020               	movlb	0	; select bank0
  6381  1770  083C               	movf	setMain_Exception@command,w
  6382  1771  1903               	btfsc	3,2
  6383  1772  0008               	return
  6384                           
  6385                           ;Main_B1.c: 316: switch (command) {
  6386  1773  2F94               	goto	l7086
  6387  1774                     l7076:	
  6388                           ;Main_B1.c: 317: case 2:
  6389                           
  6390                           
  6391                           ;Main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6392  1774  3191  217F  3197   	fcall	_getMain_LightsStatus
  6393  1777  3A01               	xorlw	1
  6394  1778  1D03               	skipz
  6395  1779  2F9D               	goto	l7088
  6396                           
  6397                           ;Main_B1.c: 319: setBuz(10, 300);
  6398  177A  302C               	movlw	44
  6399  177B  0020               	movlb	0	; select bank0
  6400  177C  00A9               	movwf	setBuz@time
  6401  177D  3001               	movlw	1
  6402  177E  00AA               	movwf	setBuz@time+1
  6403  177F  300A               	movlw	10
  6404  1780  3196  2639  3197   	fcall	_setBuz
  6405                           
  6406                           ;Main_B1.c: 320: }
  6407                           ;Main_B1.c: 321: break;
  6408  1783  2F9D               	goto	l7088
  6409  1784                     l7080:	
  6410                           ;Main_B1.c: 322: case 3:
  6411                           
  6412                           
  6413                           ;Main_B1.c: 323: if (getMain_LightsStatus() == 1) {
  6414  1784  3191  217F  3197   	fcall	_getMain_LightsStatus
  6415  1787  3A01               	xorlw	1
  6416  1788  1D03               	skipz
  6417  1789  2F9D               	goto	l7088
  6418                           
  6419                           ;Main_B1.c: 324: setBuz(5, 300);
  6420  178A  302C               	movlw	44
  6421  178B  0020               	movlb	0	; select bank0
  6422  178C  00A9               	movwf	setBuz@time
  6423  178D  3001               	movlw	1
  6424  178E  00AA               	movwf	setBuz@time+1
  6425  178F  3005               	movlw	5
  6426  1790  3196  2639  3197   	fcall	_setBuz
  6427                           
  6428                           ;Main_B1.c: 327: }
  6429                           
  6430                           ;Main_B1.c: 325: }
  6431                           ;Main_B1.c: 326: break;
  6432  1793  2F9D               	goto	l7088
  6433  1794                     l7086:	
  6434  1794  0020               	movlb	0	; select bank0
  6435  1795  083C               	movf	setMain_Exception@command,w
  6436                           
  6437                           ; Switch size 1, requested type "space"
  6438                           ; Number of cases is 2, Range of values is 2 to 3
  6439                           ; switch strategies available:
  6440                           ; Name         Instructions Cycles
  6441                           ; simple_byte            7     4 (average)
  6442                           ; direct_byte           13     9 (fixed)
  6443                           ; jumptable            263     9 (fixed)
  6444                           ;	Chosen strategy is simple_byte
  6445  1796  3A02               	xorlw	2	; case 2
  6446  1797  1903               	skipnz
  6447  1798  2F74               	goto	l7076
  6448  1799  3A01               	xorlw	1	; case 3
  6449  179A  1903               	skipnz
  6450  179B  2F84               	goto	l7080
  6451  179C  2F9D               	goto	l7088
  6452  179D                     l7088:	
  6453                           
  6454                           ;Main_B1.c: 328: setDimmerLights_ErrorClose(status);
  6455  179D  0020               	movlb	0	; select bank0
  6456  179E  083B               	movf	setMain_Exception@status,w
  6457  179F  3195  2589         	fcall	_setDimmerLights_ErrorClose
  6458  17A1  0020               	movlb	0	; select bank0
  6459  17A2  0008               	return
  6460  17A3                     __end_of_setMain_Exception:	
  6461                           
  6462                           	psect	text19
  6463  1CA4                     __ptext19:	
  6464 ;; *************** function _getDimmerLights_Line *****************
  6465 ;; Defined at:
  6466 ;;		line 695 in file "../src/Dimmer_B1.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  line            1    0[BANK0 ] unsigned char 
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      unsigned char 
  6473 ;; Registers used:
  6474 ;;		wreg, status,2
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        1 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    5
  6487 ;; This function calls:
  6488 ;;		Nothing
  6489 ;; This function is called by:
  6490 ;;		_setMain_Exception
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _getDimmerLights_Line
  6496  1CA4                     _getDimmerLights_Line:	
  6497                           
  6498                           ;Dimmer_B1.c: 696: char line = 0;
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6502  1CA4  0020               	movlb	0	; select bank0
  6503  1CA5  01A0               	clrf	getDimmerLights_Line@line
  6504                           
  6505                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6506  1CA6  0023               	movlb	3	; select bank3
  6507  1CA7  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6508  1CA8  2CAC               	goto	l6556
  6509                           
  6510                           ;Dimmer_B1.c: 699: line = 1;
  6511  1CA9  0020               	movlb	0	; select bank0
  6512  1CAA  01A0               	clrf	getDimmerLights_Line@line
  6513  1CAB  0AA0               	incf	getDimmerLights_Line@line,f
  6514  1CAC                     l6556:	
  6515                           
  6516                           ;Dimmer_B1.c: 700: }
  6517                           ;Dimmer_B1.c: 712: return line;
  6518  1CAC  0020               	movlb	0	; select bank0
  6519  1CAD  0820               	movf	getDimmerLights_Line@line,w
  6520  1CAE  0008               	return
  6521  1CAF                     __end_of_getDimmerLights_Line:	
  6522                           
  6523                           	psect	text20
  6524  1C45                     __ptext20:	
  6525 ;; *************** function _Switch_Initialization *****************
  6526 ;; Defined at:
  6527 ;;		line 46 in file "../src/Switch_B1.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;		None               void
  6534 ;; Registers used:
  6535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    8
  6548 ;; This function calls:
  6549 ;;		_TouchPower
  6550 ;;		_setSw_Initialization
  6551 ;; This function is called by:
  6552 ;;		_main
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           
  6557                           ;psect for function _Switch_Initialization
  6558  1C45                     _Switch_Initialization:	
  6559                           
  6560                           ;Switch_B1.c: 47: TouchPower();
  6561                           
  6562                           ;incstack = 0
  6563                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6564  1C45  319E  266D  319C   	fcall	_TouchPower
  6565                           
  6566                           ;Switch_B1.c: 49: WPUB1 = 0;
  6567  1C48  0024               	movlb	4	; select bank4
  6568  1C49  108D               	bcf	13,1	;volatile
  6569                           
  6570                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6571  1C4A  3001               	movlw	1
  6572  1C4B  319D  256B         	fcall	_setSw_Initialization
  6573  1C4D  0008               	return
  6574  1C4E                     __end_of_Switch_Initialization:	
  6575                           
  6576                           	psect	text21
  6577  1D6B                     __ptext21:	
  6578 ;; *************** function _setSw_Initialization *****************
  6579 ;; Defined at:
  6580 ;;		line 109 in file "../src/Switch_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  sw              1    wreg     unsigned char 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  sw              1    4[BANK0 ] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;Total ram usage:        1 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    7
  6601 ;; This function calls:
  6602 ;;		_setLED
  6603 ;; This function is called by:
  6604 ;;		_Switch_Initialization
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           
  6609                           ;psect for function _setSw_Initialization
  6610  1D6B                     _setSw_Initialization:	
  6611                           
  6612                           ;incstack = 0
  6613                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6614                           ;setSw_Initialization@sw stored from wreg
  6615  1D6B  0020               	movlb	0	; select bank0
  6616  1D6C  00A4               	movwf	setSw_Initialization@sw
  6617                           
  6618                           ;Switch_B1.c: 110: setLED(sw, 1);
  6619  1D6D  01A2               	clrf	setLED@command
  6620  1D6E  0AA2               	incf	setLED@command,f
  6621  1D6F  0824               	movf	setSw_Initialization@sw,w
  6622  1D70  3192  22D6  319D   	fcall	_setLED
  6623                           
  6624                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6625  1D73  0020               	movlb	0	; select bank0
  6626  1D74  01A2               	clrf	setLED@command
  6627  1D75  0AA2               	incf	setLED@command,f
  6628  1D76  0824               	movf	setSw_Initialization@sw,w
  6629  1D77  3E01               	addlw	1
  6630  1D78  3192  22D6         	fcall	_setLED
  6631  1D7A  0008               	return
  6632  1D7B                     __end_of_setSw_Initialization:	
  6633                           
  6634                           	psect	text22
  6635  1E6D                     __ptext22:	
  6636 ;; *************** function _TouchPower *****************
  6637 ;; Defined at:
  6638 ;;		line 10 in file "../src/Switch_B1.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;		None               void
  6645 ;; Registers used:
  6646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        0 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    6
  6659 ;; This function calls:
  6660 ;;		_Timeout_Counter
  6661 ;;		_set_TimeoutCleared
  6662 ;; This function is called by:
  6663 ;;		_Switch_Initialization
  6664 ;;		_Switch_Main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _TouchPower
  6670  1E6D                     _TouchPower:	
  6671                           
  6672                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6676  1E6D  0020               	movlb	0	; select bank0
  6677  1E6E  180D               	btfsc	13,0	;volatile
  6678  1E6F  0008               	return
  6679                           
  6680                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6681  1E70  0021               	movlb	1	; select bank1
  6682  1E71  1C20               	btfss	_myMain^(0+128),0
  6683  1E72  0008               	return
  6684  1E73  2E79               	goto	l7298
  6685  1E74                     l2371:	
  6686                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6687                           
  6688                           
  6689                           ;Switch_B1.c: 14: RB0 = 1;
  6690  1E74  0020               	movlb	0	; select bank0
  6691  1E75  140D               	bsf	13,0	;volatile
  6692                           
  6693                           ;Switch_B1.c: 15: Timeout_Counter();
  6694  1E76  319E  2643  319E   	fcall	_Timeout_Counter
  6695  1E79                     l7298:	
  6696  1E79  0020               	movlb	0	; select bank0
  6697  1E7A  180D               	btfsc	13,0	;volatile
  6698  1E7B  2E7F               	goto	l7302
  6699  1E7C  0021               	movlb	1	; select bank1
  6700  1E7D  1D2C               	btfss	(_myMain^(0+128)+12),2
  6701  1E7E  2E74               	goto	l2371
  6702  1E7F                     l7302:	
  6703                           
  6704                           ;Switch_B1.c: 16: }
  6705                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6706  1E7F  319C  2400         	fcall	_set_TimeoutCleared
  6707  1E81  0008               	return
  6708  1E82                     __end_of_TouchPower:	
  6709                           
  6710                           	psect	text23
  6711  1BD3                     __ptext23:	
  6712 ;; *************** function _RF_Main *****************
  6713 ;; Defined at:
  6714 ;;		line 16 in file "../src/RF_Control_B1.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;		None               void
  6721 ;; Registers used:
  6722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:   14
  6735 ;; This function calls:
  6736 ;;		_setRF_Main
  6737 ;; This function is called by:
  6738 ;;		_main
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _RF_Main
  6744  1BD3                     _RF_Main:	
  6745                           
  6746                           ;RF_Control_B1.c: 18: setRF_Main();
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6750  1BD3  3185  2532         	fcall	_setRF_Main
  6751  1BD5  0008               	return
  6752  1BD6                     __end_of_RF_Main:	
  6753                           
  6754                           	psect	text24
  6755  0532                     __ptext24:	
  6756 ;; *************** function _setRF_Main *****************
  6757 ;; Defined at:
  6758 ;;		line 52 in file "../src/RF_Control_B1.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  error           1    2[BANK1 ] unsigned char 
  6763 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6764 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;		None               void
  6767 ;; Registers used:
  6768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;Total ram usage:        4 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:   13
  6781 ;; This function calls:
  6782 ;;		_CC2500_RxData
  6783 ;;		_CC2500_TxData
  6784 ;;		_CC2500_WriteCommand
  6785 ;;		_RF_RxDisable
  6786 ;;		_getBuz_GO
  6787 ;;		_getMain_All_Error_Status
  6788 ;;		_getRF_KeyStatus
  6789 ;;		_getRxData
  6790 ;; This function is called by:
  6791 ;;		_RF_Main
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _setRF_Main
  6797  0532                     _setRF_Main:	
  6798                           
  6799                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6803  0532  0021               	movlb	1	; select bank1
  6804  0533  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6805  0534  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6806  0535  01EA               	clrf	setRF_Main@error^(0+128)
  6807                           
  6808                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6809  0536  1C3B               	btfss	_RF1^(0+128),0
  6810  0537  2E0D               	goto	l2006
  6811                           
  6812                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6813  0538  319D  258C  3185   	fcall	_getBuz_GO
  6814  053B  0020               	movlb	0	; select bank0
  6815  053C  0821               	movf	?_getBuz_GO+1,w
  6816  053D  0420               	iorwf	?_getBuz_GO,w
  6817  053E  1D03               	skipz
  6818  053F  0008               	return
  6819                           
  6820                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6821  0540  3000               	movlw	0
  6822  0541  3192  223B  3185   	fcall	_getMain_All_Error_Status
  6823  0544  3800               	iorlw	0
  6824  0545  1D03               	skipz
  6825  0546  2D5B               	goto	l2008
  6826                           
  6827                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6828  0547  319D  259D  3185   	fcall	_getRF_KeyStatus
  6829  054A  3A01               	xorlw	1
  6830  054B  3000               	movlw	0
  6831  054C  1903               	skipnz
  6832  054D  3001               	movlw	1
  6833  054E  0020               	movlb	0	; select bank0
  6834  054F  00ED               	movwf	??_setRF_Main
  6835  0550  0CED               	rrf	??_setRF_Main,f
  6836  0551  0CED               	rrf	??_setRF_Main,f
  6837  0552  0021               	movlb	1	; select bank1
  6838  0553  083B               	movf	_RF1^(0+128),w
  6839  0554  0020               	movlb	0	; select bank0
  6840  0555  066D               	xorwf	??_setRF_Main,w
  6841  0556  397F               	andlw	-129
  6842  0557  066D               	xorwf	??_setRF_Main,w
  6843  0558  0021               	movlb	1	; select bank1
  6844  0559  00BB               	movwf	_RF1^(0+128)
  6845                           
  6846                           ;RF_Control_B1.c: 65: } else {
  6847  055A  2D5D               	goto	l2009
  6848  055B                     l2008:	
  6849                           
  6850                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6851  055B  0021               	movlb	1	; select bank1
  6852  055C  13BB               	bcf	_RF1^(0+128),7
  6853  055D                     l2009:	
  6854                           
  6855                           ;RF_Control_B1.c: 70: }
  6856                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6857  055D  1BBB               	btfsc	_RF1^(0+128),7
  6858  055E  1B3B               	btfsc	_RF1^(0+128),6
  6859  055F  2D65               	goto	l2010
  6860                           
  6861                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6862  0560  01BD               	clrf	(_RF1^(0+128)+2)
  6863  0561  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6864                           
  6865                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6866  0562  14BC               	bsf	(_RF1^(0+128)+1),1
  6867                           
  6868                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6869  0563  11BB               	bcf	_RF1^(0+128),3
  6870                           
  6871                           ;RF_Control_B1.c: 76: } else {
  6872  0564  0008               	return
  6873  0565                     l2010:	
  6874                           
  6875                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6876  0565  18BC               	btfsc	(_RF1^(0+128)+1),1
  6877  0566  1B3B               	btfsc	_RF1^(0+128),6
  6878  0567  2D7C               	goto	l7214
  6879                           
  6880                           ;RF_Control_B1.c: 78: RF1.Count++;
  6881  0568  3001               	movlw	1
  6882  0569  07BD               	addwf	(_RF1^(0+128)+2),f
  6883  056A  3000               	movlw	0
  6884  056B  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6885                           
  6886                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6887  056C  3002               	movlw	2
  6888  056D  3EBB               	addlw	_RF1& (0+255)
  6889  056E  0086               	movwf	6
  6890  056F  0187               	clrf	7
  6891  0570  3F40               	moviw [0]fsr1
  6892  0571  0642               	xorwf	(_RF1^(0+128)+7),w
  6893  0572  1D03               	skipz
  6894  0573  2D76               	goto	u6745
  6895  0574  3F41               	moviw [1]fsr1
  6896  0575  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6897  0576                     u6745:	
  6898  0576  1D03               	skipz
  6899  0577  2DDA               	goto	l7266
  6900                           
  6901                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6902  0578  01BD               	clrf	(_RF1^(0+128)+2)
  6903  0579  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6904                           
  6905                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6906  057A  10BC               	bcf	(_RF1^(0+128)+1),1
  6907                           
  6908                           ;RF_Control_B1.c: 82: }
  6909                           ;RF_Control_B1.c: 83: } else {
  6910  057B  2DDA               	goto	l7266
  6911  057C                     l7214:	
  6912                           
  6913                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6914  057C  01BD               	clrf	(_RF1^(0+128)+2)
  6915  057D  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6916                           
  6917                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6918  057E  10BC               	bcf	(_RF1^(0+128)+1),1
  6919                           
  6920                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6921  057F  193B               	btfsc	_RF1^(0+128),2
  6922  0580  1B3B               	btfsc	_RF1^(0+128),6
  6923  0581  2D90               	goto	l2015
  6924                           
  6925                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6926  0582  113B               	bcf	_RF1^(0+128),2
  6927                           
  6928                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6929  0583  11BB               	bcf	_RF1^(0+128),3
  6930                           
  6931                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6932  0584  10BB               	bcf	_RF1^(0+128),1
  6933                           
  6934                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6935  0585  300A               	movlw	10
  6936  0586  00C2               	movwf	(_RF1^(0+128)+7)
  6937  0587  3000               	movlw	0
  6938  0588  00C3               	movwf	(_RF1^(0+128)+8)
  6939                           
  6940                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6941  0589  319D  252C  3185   	fcall	_RF_RxDisable
  6942                           
  6943                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6944  058C  3189  21CC  3185   	fcall	_CC2500_TxData
  6945                           
  6946                           ;RF_Control_B1.c: 106: } else {
  6947  058F  2DDA               	goto	l7266
  6948  0590                     l2015:	
  6949                           
  6950                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6951  0590  1DBB               	btfss	_RF1^(0+128),3
  6952  0591  2DC9               	goto	l2017
  6953                           
  6954                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6955  0592  318B  235D  3185   	fcall	_CC2500_RxData
  6956                           
  6957                           ;RF_Control_B1.c: 111: if (RF1.ReceiveGO == 1) {
  6958  0595  0021               	movlb	1	; select bank1
  6959  0596  1CBB               	btfss	_RF1^(0+128),1
  6960  0597  2DDA               	goto	l7266
  6961                           
  6962                           ;RF_Control_B1.c: 112: RF1.ReceiveGO = 0;
  6963  0598  10BB               	bcf	_RF1^(0+128),1
  6964                           
  6965                           ;RF_Control_B1.c: 113: RF1.Correction = 0;
  6966  0599  12BC               	bcf	(_RF1^(0+128)+1),5
  6967                           
  6968                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6969  059A  01C5               	clrf	(_RF1^(0+128)+10)
  6970  059B  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6971                           
  6972                           ;RF_Control_B1.c: 125: getRxData();
  6973  059C  318D  2558  3185   	fcall	_getRxData
  6974                           
  6975                           ;RF_Control_B1.c: 126: RF1.Run = 1;
  6976  059F  0021               	movlb	1	; select bank1
  6977  05A0  14BC               	bsf	(_RF1^(0+128)+1),1
  6978                           
  6979                           ;RF_Control_B1.c: 128: if (RF1.Checked == 1) {
  6980  05A1  1DBC               	btfss	(_RF1^(0+128)+1),3
  6981  05A2  2DB0               	goto	l7250
  6982                           
  6983                           ;RF_Control_B1.c: 129: if (RF1.RunTime > 10) {
  6984  05A3  3000               	movlw	0
  6985  05A4  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6986  05A5  300B               	movlw	11
  6987  05A6  1903               	skipnz
  6988  05A7  0242               	subwf	(_RF1^(0+128)+7),w
  6989  05A8  1C03               	skipc
  6990  05A9  2DAE               	goto	l7248
  6991                           
  6992                           ;RF_Control_B1.c: 130: RF1.RunTime = 10;
  6993  05AA  300A               	movlw	10
  6994  05AB  00C2               	movwf	(_RF1^(0+128)+7)
  6995  05AC  3000               	movlw	0
  6996  05AD  00C3               	movwf	(_RF1^(0+128)+8)
  6997  05AE                     l7248:	
  6998                           
  6999                           ;RF_Control_B1.c: 131: }
  7000                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  7001  05AE  01BF               	clrf	(_RF1^(0+128)+4)
  7002                           
  7003                           ;RF_Control_B1.c: 133: } else {
  7004  05AF  2DDA               	goto	l7266
  7005  05B0                     l7250:	
  7006                           
  7007                           ;RF_Control_B1.c: 134: RF1.CheckCount++;
  7008  05B0  3001               	movlw	1
  7009  05B1  0020               	movlb	0	; select bank0
  7010  05B2  00ED               	movwf	??_setRF_Main
  7011  05B3  086D               	movf	??_setRF_Main,w
  7012  05B4  0021               	movlb	1	; select bank1
  7013  05B5  07BF               	addwf	(_RF1^(0+128)+4),f
  7014                           
  7015                           ;RF_Control_B1.c: 135: if (RF1.CheckCount == 2) {
  7016  05B6  083F               	movf	(_RF1^(0+128)+4),w
  7017  05B7  3A02               	xorlw	2
  7018  05B8  1D03               	skipz
  7019  05B9  2DDA               	goto	l7266
  7020                           
  7021                           ;RF_Control_B1.c: 136: RF1.CheckCount = 0;
  7022  05BA  01BF               	clrf	(_RF1^(0+128)+4)
  7023                           
  7024                           ;RF_Control_B1.c: 137: RF1.CheckedCounter = 0;
  7025  05BB  01C0               	clrf	(_RF1^(0+128)+5)
  7026  05BC  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7027                           
  7028                           ;RF_Control_B1.c: 138: if (RF1.RunTime < 200) {
  7029  05BD  3000               	movlw	0
  7030  05BE  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7031  05BF  30C8               	movlw	200
  7032  05C0  1903               	skipnz
  7033  05C1  0242               	subwf	(_RF1^(0+128)+7),w
  7034  05C2  1803               	skipnc
  7035  05C3  2DDA               	goto	l7266
  7036                           
  7037                           ;RF_Control_B1.c: 139: RF1.RunTime += 10;
  7038  05C4  300A               	movlw	10
  7039  05C5  07C2               	addwf	(_RF1^(0+128)+7),f
  7040  05C6  3000               	movlw	0
  7041  05C7  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7042                           
  7043                           ;RF_Control_B1.c: 140: }
  7044                           ;RF_Control_B1.c: 141: }
  7045                           ;RF_Control_B1.c: 142: }
  7046                           ;RF_Control_B1.c: 143: }
  7047                           ;RF_Control_B1.c: 144: } else {
  7048  05C8  2DDA               	goto	l7266
  7049  05C9                     l2017:	
  7050                           
  7051                           ;RF_Control_B1.c: 146: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7052  05C9  1DBB               	btfss	_RF1^(0+128),3
  7053  05CA  18BB               	btfsc	_RF1^(0+128),1
  7054  05CB  2DDA               	goto	l7266
  7055                           
  7056                           ;RF_Control_B1.c: 147: RF1.RxStatus = 1;
  7057  05CC  15BB               	bsf	_RF1^(0+128),3
  7058                           
  7059                           ;RF_Control_B1.c: 148: RF1.Correction = 1;
  7060  05CD  16BC               	bsf	(_RF1^(0+128)+1),5
  7061                           
  7062                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x36);
  7063  05CE  3036               	movlw	54
  7064  05CF  319E  26B1  3185   	fcall	_CC2500_WriteCommand
  7065                           
  7066                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x3A);
  7067  05D2  303A               	movlw	58
  7068  05D3  319E  26B1  3185   	fcall	_CC2500_WriteCommand
  7069                           
  7070                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x34);
  7071  05D6  3034               	movlw	52
  7072  05D7  319E  26B1  3185   	fcall	_CC2500_WriteCommand
  7073  05DA                     l7266:	
  7074                           
  7075                           ;RF_Control_B1.c: 154: }
  7076                           ;RF_Control_B1.c: 156: }
  7077                           ;RF_Control_B1.c: 157: }
  7078                           ;RF_Control_B1.c: 158: }
  7079                           ;RF_Control_B1.c: 159: if (RF1.RxStatus == 1) {
  7080  05DA  0021               	movlb	1	; select bank1
  7081  05DB  1DBB               	btfss	_RF1^(0+128),3
  7082  05DC  2DFB               	goto	l7278
  7083                           
  7084                           ;RF_Control_B1.c: 160: RF1.CheckedCounter++;
  7085  05DD  3001               	movlw	1
  7086  05DE  07C0               	addwf	(_RF1^(0+128)+5),f
  7087  05DF  3000               	movlw	0
  7088  05E0  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7089                           
  7090                           ;RF_Control_B1.c: 161: if (RF1.CheckedCounter == 100) {
  7091  05E1  3005               	movlw	5
  7092  05E2  3EBB               	addlw	_RF1& (0+255)
  7093  05E3  0086               	movwf	6
  7094  05E4  0187               	clrf	7
  7095  05E5  3F40               	moviw [0]fsr1
  7096  05E6  3A64               	xorlw	100
  7097  05E7  1D03               	skipz
  7098  05E8  2DEB               	goto	u6865
  7099  05E9  3F41               	moviw [1]fsr1
  7100  05EA  3A00               	xorlw	0
  7101  05EB                     u6865:	
  7102  05EB  1D03               	skipz
  7103  05EC  2DFB               	goto	l7278
  7104                           
  7105                           ;RF_Control_B1.c: 162: RF1.CheckedCounter = 0;
  7106  05ED  01C0               	clrf	(_RF1^(0+128)+5)
  7107  05EE  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7108                           
  7109                           ;RF_Control_B1.c: 163: RF1.CheckCount = 0;
  7110  05EF  01BF               	clrf	(_RF1^(0+128)+4)
  7111                           
  7112                           ;RF_Control_B1.c: 164: if (RF1.RunTime > 10) {
  7113  05F0  3000               	movlw	0
  7114  05F1  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7115  05F2  300B               	movlw	11
  7116  05F3  1903               	skipnz
  7117  05F4  0242               	subwf	(_RF1^(0+128)+7),w
  7118  05F5  1C03               	skipc
  7119  05F6  2DFB               	goto	l7278
  7120                           
  7121                           ;RF_Control_B1.c: 165: RF1.RunTime -= 10;
  7122  05F7  300A               	movlw	10
  7123  05F8  02C2               	subwf	(_RF1^(0+128)+7),f
  7124  05F9  3000               	movlw	0
  7125  05FA  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7126  05FB                     l7278:	
  7127                           
  7128                           ;RF_Control_B1.c: 166: }
  7129                           ;RF_Control_B1.c: 167: }
  7130                           ;RF_Control_B1.c: 168: }
  7131                           ;RF_Control_B1.c: 169: if (RF1.Correction == 1) {
  7132  05FB  1EBC               	btfss	(_RF1^(0+128)+1),5
  7133  05FC  0008               	return
  7134                           
  7135                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter++;
  7136  05FD  3001               	movlw	1
  7137  05FE  07C5               	addwf	(_RF1^(0+128)+10),f
  7138  05FF  3000               	movlw	0
  7139  0600  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7140                           
  7141                           ;RF_Control_B1.c: 171: if (RF1.CorrectionCounter >= 30000) {
  7142  0601  3075               	movlw	117
  7143  0602  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7144  0603  3030               	movlw	48
  7145  0604  1903               	skipnz
  7146  0605  0245               	subwf	(_RF1^(0+128)+10),w
  7147  0606  1C03               	skipc
  7148  0607  0008               	return
  7149                           
  7150                           ;RF_Control_B1.c: 172: RF1.CorrectionCounter = 0;
  7151  0608  01C5               	clrf	(_RF1^(0+128)+10)
  7152  0609  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7153                           
  7154                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  7155  060A  11BB               	bcf	_RF1^(0+128),3
  7156                           
  7157                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  7158  060B  10BB               	bcf	_RF1^(0+128),1
  7159                           
  7160                           ;RF_Control_B1.c: 175: }
  7161                           ;RF_Control_B1.c: 176: }
  7162                           ;RF_Control_B1.c: 177: }
  7163                           ;RF_Control_B1.c: 178: }
  7164                           ;RF_Control_B1.c: 185: } else {
  7165  060C  0008               	return
  7166  060D                     l2006:	
  7167                           
  7168                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7169  060D  1C20               	btfss	_myMain^(0+128),0
  7170  060E  0008               	return
  7171                           
  7172                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7173  060F  143B               	bsf	_RF1^(0+128),0
  7174  0610  0008               	return
  7175  0611                     __end_of_setRF_Main:	
  7176                           
  7177                           	psect	text25
  7178  0D58                     __ptext25:	
  7179 ;; *************** function _getRxData *****************
  7180 ;; Defined at:
  7181 ;;		line 281 in file "../src/RF_Control_B1.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  error           1   76[BANK0 ] unsigned char 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;Total ram usage:        2 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:   12
  7202 ;; This function calls:
  7203 ;;		_getMain_All_Error_Status
  7204 ;;		_setControl_Lights_Table
  7205 ;;		_setLog_Code
  7206 ;;		_setTxData
  7207 ;; This function is called by:
  7208 ;;		_setRF_Main
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           
  7213                           ;psect for function _getRxData
  7214  0D58                     _getRxData:	
  7215                           
  7216                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7217                           
  7218                           ;incstack = 0
  7219                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7220  0D58  3000               	movlw	0
  7221  0D59  3192  223B  318D   	fcall	_getMain_All_Error_Status
  7222  0D5C  0020               	movlb	0	; select bank0
  7223  0D5D  00EB               	movwf	??_getRxData
  7224  0D5E  086B               	movf	??_getRxData,w
  7225  0D5F  00EC               	movwf	getRxData@error
  7226                           
  7227                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7228  0D60  0022               	movlb	2	; select bank2
  7229  0D61  0820               	movf	_RF_Data^(0+256),w
  7230  0D62  3AAA               	xorlw	170
  7231  0D63  1D03               	skipz
  7232  0D64  2D7B               	goto	l6668
  7233  0D65  0821               	movf	(_RF_Data^(0+256)+1),w
  7234  0D66  3A01               	xorlw	1
  7235  0D67  1D03               	skipz
  7236  0D68  2D7B               	goto	l6668
  7237                           
  7238                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7239  0D69  3055               	movlw	85
  7240  0D6A  0020               	movlb	0	; select bank0
  7241  0D6B  00EB               	movwf	??_getRxData
  7242  0D6C  086E               	movf	_product,w
  7243  0D6D  3E02               	addlw	2
  7244  0D6E  0086               	movwf	6
  7245  0D6F  3002               	movlw	2	; select bank4/5
  7246  0D70  0087               	movwf	7
  7247  0D71  086B               	movf	??_getRxData,w
  7248  0D72  0081               	movwf	1
  7249                           
  7250                           ;RF_Control_B1.c: 286: setTxData();
  7251  0D73  3186  26ED         	fcall	_setTxData
  7252                           
  7253                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7254  0D75  300A               	movlw	10
  7255  0D76  0021               	movlb	1	; select bank1
  7256  0D77  00C2               	movwf	(_RF1^(0+128)+7)
  7257  0D78  3000               	movlw	0
  7258  0D79  00C3               	movwf	(_RF1^(0+128)+8)
  7259                           
  7260                           ;RF_Control_B1.c: 293: } else {
  7261  0D7A  0008               	return
  7262  0D7B                     l6668:	
  7263                           
  7264                           ;RF_Control_B1.c: 295: if (error == 0) {
  7265  0D7B  0020               	movlb	0	; select bank0
  7266  0D7C  08EC               	movf	getRxData@error,f
  7267  0D7D  1D03               	skipz
  7268  0D7E  0008               	return
  7269                           
  7270                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7271  0D7F  0021               	movlb	1	; select bank1
  7272  0D80  1F3B               	btfss	_RF1^(0+128),6
  7273  0D81  2D92               	goto	l6680
  7274                           
  7275                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7276  0D82  0022               	movlb	2	; select bank2
  7277  0D83  08A0               	movf	_RF_Data^(0+256),f
  7278  0D84  1D03               	skipz
  7279  0D85  2D8F               	goto	l2059
  7280  0D86  0821               	movf	(_RF_Data^(0+256)+1),w
  7281  0D87  3A64               	xorlw	100
  7282  0D88  1D03               	skipz
  7283  0D89  2D8F               	goto	l2059
  7284                           
  7285                           ;RF_Control_B1.c: 298: setLog_Code();
  7286  0D8A  3193  2342         	fcall	_setLog_Code
  7287                           
  7288                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7289  0D8C  0021               	movlb	1	; select bank1
  7290  0D8D  15BC               	bsf	(_RF1^(0+128)+1),3
  7291                           
  7292                           ;RF_Control_B1.c: 300: } else {
  7293  0D8E  0008               	return
  7294  0D8F                     l2059:	
  7295                           
  7296                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7297  0D8F  0021               	movlb	1	; select bank1
  7298  0D90  11BC               	bcf	(_RF1^(0+128)+1),3
  7299                           
  7300                           ;RF_Control_B1.c: 302: }
  7301                           ;RF_Control_B1.c: 303: } else {
  7302  0D91  0008               	return
  7303  0D92                     l6680:	
  7304                           
  7305                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7306  0D92  0022               	movlb	2	; select bank2
  7307  0D93  08A0               	movf	_RF_Data^(0+256),f
  7308  0D94  1D03               	skipz
  7309  0D95  2DD0               	goto	l6702
  7310  0D96  0821               	movf	(_RF_Data^(0+256)+1),w
  7311  0D97  3A02               	xorlw	2
  7312  0D98  1D03               	skipz
  7313  0D99  2DD0               	goto	l6702
  7314                           
  7315                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7316  0D9A  082C               	movf	(_RF_Data^(0+256)+12),w
  7317  0D9B  3AFF               	xorlw	255
  7318  0D9C  1D03               	skipz
  7319  0D9D  2DAA               	goto	l6692
  7320  0D9E  082D               	movf	(_RF_Data^(0+256)+13),w
  7321  0D9F  3AFF               	xorlw	255
  7322  0DA0  1D03               	skipz
  7323  0DA1  2DAA               	goto	l6692
  7324  0DA2  082E               	movf	(_RF_Data^(0+256)+14),w
  7325  0DA3  3AFF               	xorlw	255
  7326  0DA4  1D03               	skipz
  7327  0DA5  2DAA               	goto	l6692
  7328                           
  7329                           ;RF_Control_B1.c: 307: __nop();
  7330  0DA6  0000               	nop
  7331                           
  7332                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7333  0DA7  0021               	movlb	1	; select bank1
  7334  0DA8  11BC               	bcf	(_RF1^(0+128)+1),3
  7335                           
  7336                           ;RF_Control_B1.c: 309: } else {
  7337  0DA9  0008               	return
  7338  0DAA                     l6692:	
  7339                           
  7340                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7341  0DAA  0020               	movlb	0	; select bank0
  7342  0DAB  086E               	movf	_product,w
  7343  0DAC  3E0C               	addlw	12
  7344  0DAD  0086               	movwf	6
  7345  0DAE  3002               	movlw	2	; select bank4/5
  7346  0DAF  0087               	movwf	7
  7347  0DB0  0022               	movlb	2	; select bank2
  7348  0DB1  082C               	movf	(_RF_Data^(0+256)+12),w
  7349  0DB2  0601               	xorwf	1,w
  7350  0DB3  1D03               	skipz
  7351  0DB4  0008               	return
  7352  0DB5  0020               	movlb	0	; select bank0
  7353  0DB6  086E               	movf	_product,w
  7354  0DB7  3E0D               	addlw	13
  7355  0DB8  0086               	movwf	6
  7356  0DB9  3002               	movlw	2	; select bank4/5
  7357  0DBA  0087               	movwf	7
  7358  0DBB  0022               	movlb	2	; select bank2
  7359  0DBC  082D               	movf	(_RF_Data^(0+256)+13),w
  7360  0DBD  0601               	xorwf	1,w
  7361  0DBE  1D03               	skipz
  7362  0DBF  0008               	return
  7363  0DC0  0020               	movlb	0	; select bank0
  7364  0DC1  086E               	movf	_product,w
  7365  0DC2  3E0E               	addlw	14
  7366  0DC3  0086               	movwf	6
  7367  0DC4  3002               	movlw	2	; select bank4/5
  7368  0DC5  0087               	movwf	7
  7369  0DC6  0022               	movlb	2	; select bank2
  7370  0DC7  082E               	movf	(_RF_Data^(0+256)+14),w
  7371  0DC8  0601               	xorwf	1,w
  7372  0DC9  1D03               	skipz
  7373  0DCA  0008               	return
  7374                           
  7375                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7376  0DCB  3188  20AB         	fcall	_setControl_Lights_Table
  7377                           
  7378                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7379  0DCD  0021               	movlb	1	; select bank1
  7380  0DCE  15BC               	bsf	(_RF1^(0+128)+1),3
  7381                           
  7382                           ;RF_Control_B1.c: 313: }
  7383                           ;RF_Control_B1.c: 314: }
  7384                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7385  0DCF  0008               	return
  7386  0DD0                     l6702:	
  7387  0DD0  0022               	movlb	2	; select bank2
  7388  0DD1  0820               	movf	_RF_Data^(0+256),w
  7389  0DD2  3AFF               	xorlw	255
  7390  0DD3  1D03               	skipz
  7391  0DD4  2DDB               	goto	l6708
  7392  0DD5  0821               	movf	(_RF_Data^(0+256)+1),w
  7393  0DD6  3A02               	xorlw	2
  7394  0DD7  1D03               	skipz
  7395  0DD8  2DDB               	goto	l6708
  7396                           
  7397                           ;RF_Control_B1.c: 316: __nop();
  7398  0DD9  0000               	nop
  7399                           
  7400                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7401  0DDA  0008               	return
  7402  0DDB                     l6708:	
  7403  0DDB  0022               	movlb	2	; select bank2
  7404  0DDC  08A0               	movf	_RF_Data^(0+256),f
  7405  0DDD  1D03               	skipz
  7406  0DDE  2DE5               	goto	l2069
  7407  0DDF  0821               	movf	(_RF_Data^(0+256)+1),w
  7408  0DE0  3A65               	xorlw	101
  7409  0DE1  1D03               	skipz
  7410  0DE2  2DE5               	goto	l2069
  7411                           
  7412                           ;RF_Control_B1.c: 318: __nop();
  7413  0DE3  0000               	nop
  7414                           
  7415                           ;RF_Control_B1.c: 319: } else {
  7416  0DE4  0008               	return
  7417  0DE5                     l2069:	
  7418                           
  7419                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7420  0DE5  0021               	movlb	1	; select bank1
  7421  0DE6  11BC               	bcf	(_RF1^(0+128)+1),3
  7422                           
  7423                           ;RF_Control_B1.c: 328: ;
  7424                           
  7425                           ;RF_Control_B1.c: 321: }
  7426                           ;RF_Control_B1.c: 326: }
  7427                           ;RF_Control_B1.c: 327: } else {
  7428  0DE7  0008               	return
  7429  0DE8                     __end_of_getRxData:	
  7430                           
  7431                           	psect	text26
  7432  1342                     __ptext26:	
  7433 ;; *************** function _setLog_Code *****************
  7434 ;; Defined at:
  7435 ;;		line 334 in file "../src/RF_Control_B1.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;		None               void
  7442 ;; Registers used:
  7443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;Total ram usage:        1 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    7
  7456 ;; This function calls:
  7457 ;;		_setBuz
  7458 ;;		_setMemory_LoopSave
  7459 ;;		_setMemory_Modify
  7460 ;; This function is called by:
  7461 ;;		_getRxData
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _setLog_Code
  7467  1342                     _setLog_Code:	
  7468                           
  7469                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7473  1342  0021               	movlb	1	; select bank1
  7474  1343  133B               	bcf	_RF1^(0+128),6
  7475                           
  7476                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7477  1344  0022               	movlb	2	; select bank2
  7478  1345  082C               	movf	(_RF_Data^(0+256)+12),w
  7479  1346  0020               	movlb	0	; select bank0
  7480  1347  00AD               	movwf	??_setLog_Code
  7481  1348  086E               	movf	_product,w
  7482  1349  3E0C               	addlw	12
  7483  134A  0086               	movwf	6
  7484  134B  3002               	movlw	2	; select bank4/5
  7485  134C  0087               	movwf	7
  7486  134D  082D               	movf	??_setLog_Code,w
  7487  134E  0081               	movwf	1
  7488                           
  7489                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7490  134F  0022               	movlb	2	; select bank2
  7491  1350  082D               	movf	(_RF_Data^(0+256)+13),w
  7492  1351  0020               	movlb	0	; select bank0
  7493  1352  00AD               	movwf	??_setLog_Code
  7494  1353  086E               	movf	_product,w
  7495  1354  3E0D               	addlw	13
  7496  1355  0086               	movwf	6
  7497  1356  3002               	movlw	2	; select bank4/5
  7498  1357  0087               	movwf	7
  7499  1358  082D               	movf	??_setLog_Code,w
  7500  1359  0081               	movwf	1
  7501                           
  7502                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7503  135A  0022               	movlb	2	; select bank2
  7504  135B  082E               	movf	(_RF_Data^(0+256)+14),w
  7505  135C  0020               	movlb	0	; select bank0
  7506  135D  00AD               	movwf	??_setLog_Code
  7507  135E  086E               	movf	_product,w
  7508  135F  3E0E               	addlw	14
  7509  1360  0086               	movwf	6
  7510  1361  3002               	movlw	2	; select bank4/5
  7511  1362  0087               	movwf	7
  7512  1363  082D               	movf	??_setLog_Code,w
  7513  1364  0081               	movwf	1
  7514                           
  7515                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7516  1365  3064               	movlw	100
  7517  1366  00A9               	movwf	setBuz@time
  7518  1367  3000               	movlw	0
  7519  1368  00AA               	movwf	setBuz@time+1
  7520  1369  3001               	movlw	1
  7521  136A  3196  2639  3193   	fcall	_setBuz
  7522                           
  7523                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7524  136D  0021               	movlb	1	; select bank1
  7525  136E  1EA0               	btfss	_myMain^(0+128),5
  7526  136F  2B74               	goto	l2075
  7527                           
  7528                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7529  1370  3001               	movlw	1
  7530  1371  319E  2608  3193   	fcall	_setMemory_LoopSave
  7531  1374                     l2075:	
  7532                           
  7533                           ;RF_Control_B1.c: 342: }
  7534                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7535  1374  3001               	movlw	1
  7536  1375  319D  25F5         	fcall	_setMemory_Modify
  7537  1377  0008               	return
  7538  1378                     __end_of_setLog_Code:	
  7539                           
  7540                           	psect	text27
  7541  1E08                     __ptext27:	
  7542 ;; *************** function _setMemory_LoopSave *****************
  7543 ;; Defined at:
  7544 ;;		line 1031 in file "../src/MCU_B1.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  command         1    wreg     unsigned char 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  command         1    1[BANK0 ] unsigned char 
  7549 ;; Return value:  Size  Location     Type
  7550 ;;		None               void
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;Total ram usage:        2 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    5
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		_setLog_Code
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           
  7573                           ;psect for function _setMemory_LoopSave
  7574  1E08                     _setMemory_LoopSave:	
  7575                           
  7576                           ;incstack = 0
  7577                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7578                           ;setMemory_LoopSave@command stored from wreg
  7579  1E08  0020               	movlb	0	; select bank0
  7580  1E09  00A1               	movwf	setMemory_LoopSave@command
  7581                           
  7582                           ;MCU_B1.c: 1032: Memory.LoopSave = command == 1 ? 1 : 0;
  7583  1E0A  0821               	movf	setMemory_LoopSave@command,w
  7584  1E0B  3A01               	xorlw	1
  7585  1E0C  3000               	movlw	0
  7586  1E0D  1903               	skipnz
  7587  1E0E  3001               	movlw	1
  7588  1E0F  00A0               	movwf	??_setMemory_LoopSave
  7589  1E10  0DA0               	rlf	??_setMemory_LoopSave,f
  7590  1E11  0DA0               	rlf	??_setMemory_LoopSave,f
  7591  1E12  0023               	movlb	3	; select bank3
  7592  1E13  0844               	movf	(_Memory^(0+384)+36),w
  7593  1E14  0020               	movlb	0	; select bank0
  7594  1E15  0620               	xorwf	??_setMemory_LoopSave,w
  7595  1E16  39FB               	andlw	-5
  7596  1E17  0620               	xorwf	??_setMemory_LoopSave,w
  7597  1E18  0023               	movlb	3	; select bank3
  7598  1E19  00C4               	movwf	(_Memory^(0+384)+36)
  7599  1E1A  0008               	return
  7600  1E1B                     __end_of_setMemory_LoopSave:	
  7601                           
  7602                           	psect	text28
  7603  08AB                     __ptext28:	
  7604 ;; *************** function _setControl_Lights_Table *****************
  7605 ;; Defined at:
  7606 ;;		line 347 in file "../src/RF_Control_B1.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;		None               void
  7613 ;; Registers used:
  7614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;Total ram usage:        0 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:   11
  7627 ;; This function calls:
  7628 ;;		_setBuz
  7629 ;;		_setDimmerLights_ErrorClose
  7630 ;;		_setRFSW_AdjControl
  7631 ;;		_setRFSW_Control
  7632 ;;		_setTxData
  7633 ;; This function is called by:
  7634 ;;		_getRxData
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _setControl_Lights_Table
  7640  08AB                     _setControl_Lights_Table:	
  7641                           
  7642                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7646  08AB  28EF               	goto	l6290
  7647  08AC                     l6268:	
  7648                           ;RF_Control_B1.c: 349: case 0x00:
  7649                           
  7650                           
  7651                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7652  08AC  30FF               	movlw	255
  7653  08AD  3195  2589  3188   	fcall	_setDimmerLights_ErrorClose
  7654                           
  7655                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7656  08B0  0020               	movlb	0	; select bank0
  7657  08B1  086E               	movf	_product,w
  7658  08B2  3E09               	addlw	9
  7659  08B3  0086               	movwf	6
  7660  08B4  3002               	movlw	2	; select bank4/5
  7661  08B5  0087               	movwf	7
  7662  08B6  0181               	clrf	1
  7663                           
  7664                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7665  08B7  086E               	movf	_product,w
  7666  08B8  3E0B               	addlw	11
  7667  08B9  0086               	movwf	6
  7668  08BA  3002               	movlw	2	; select bank4/5
  7669  08BB  0087               	movwf	7
  7670  08BC  0181               	clrf	1
  7671                           
  7672                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7673  08BD  086E               	movf	_product,w
  7674  08BE  3E0F               	addlw	15
  7675  08BF  0086               	movwf	6
  7676  08C0  3002               	movlw	2	; select bank4/5
  7677  08C1  0087               	movwf	7
  7678  08C2  0181               	clrf	1
  7679                           
  7680                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7681  08C3  086E               	movf	_product,w
  7682  08C4  3E11               	addlw	17
  7683  08C5  0086               	movwf	6
  7684  08C6  3002               	movlw	2	; select bank4/5
  7685  08C7  0087               	movwf	7
  7686  08C8  0181               	clrf	1
  7687                           
  7688                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7689  08C9  3064               	movlw	100
  7690  08CA  00A9               	movwf	setBuz@time
  7691  08CB  3000               	movlw	0
  7692  08CC  00AA               	movwf	setBuz@time+1
  7693  08CD  3001               	movlw	1
  7694  08CE  3196  2639         	fcall	_setBuz
  7695                           
  7696                           ;RF_Control_B1.c: 359: break;
  7697  08D0  0008               	return
  7698  08D1                     l6280:	
  7699                           ;RF_Control_B1.c: 360: case 0x20:
  7700                           
  7701                           
  7702                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7703  08D1  0020               	movlb	0	; select bank0
  7704  08D2  086E               	movf	_product,w
  7705  08D3  3E09               	addlw	9
  7706  08D4  0086               	movwf	6
  7707  08D5  3002               	movlw	2	; select bank4/5
  7708  08D6  0087               	movwf	7
  7709  08D7  0181               	clrf	1
  7710                           
  7711                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7712  08D8  086E               	movf	_product,w
  7713  08D9  3E0B               	addlw	11
  7714  08DA  0086               	movwf	6
  7715  08DB  3002               	movlw	2	; select bank4/5
  7716  08DC  0087               	movwf	7
  7717  08DD  0181               	clrf	1
  7718                           
  7719                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7720  08DE  086E               	movf	_product,w
  7721  08DF  3E11               	addlw	17
  7722  08E0  0086               	movwf	6
  7723  08E1  3002               	movlw	2	; select bank4/5
  7724  08E2  0087               	movwf	7
  7725  08E3  0181               	clrf	1
  7726                           
  7727                           ;RF_Control_B1.c: 364: setTxData();
  7728  08E4  3186  26ED         	fcall	_setTxData
  7729                           
  7730                           ;RF_Control_B1.c: 365: break;
  7731  08E6  0008               	return
  7732  08E7                     l6284:	
  7733                           ;RF_Control_B1.c: 366: case 0x01:
  7734                           
  7735                           
  7736                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7737  08E7  3001               	movlw	1
  7738  08E8  3195  253A         	fcall	_setRFSW_Control
  7739                           
  7740                           ;RF_Control_B1.c: 380: break;
  7741                           
  7742                           ;RF_Control_B1.c: 376: case 0x03:
  7743                           
  7744                           ;RF_Control_B1.c: 375: break;
  7745                           
  7746                           ;RF_Control_B1.c: 371: case 0x02:
  7747                           
  7748                           ;RF_Control_B1.c: 370: break;
  7749  08EA  0008               	return
  7750  08EB                     l6286:	
  7751                           ;RF_Control_B1.c: 381: case 0x11:
  7752                           
  7753                           
  7754                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7755  08EB  3001               	movlw	1
  7756  08EC  3194  2424         	fcall	_setRFSW_AdjControl
  7757                           
  7758                           ;RF_Control_B1.c: 402: }
  7759                           
  7760                           ;RF_Control_B1.c: 401: break;
  7761                           
  7762                           ;RF_Control_B1.c: 395: case 0x31:
  7763                           
  7764                           ;RF_Control_B1.c: 394: break;
  7765                           
  7766                           ;RF_Control_B1.c: 388: case 0x21:
  7767                           
  7768                           ;RF_Control_B1.c: 387: break;
  7769  08EE  0008               	return
  7770  08EF                     l6290:	
  7771  08EF  0022               	movlb	2	; select bank2
  7772  08F0  082F               	movf	(_RF_Data^(0+256)+15),w
  7773                           
  7774                           ; Switch size 1, requested type "space"
  7775                           ; Number of cases is 8, Range of values is 0 to 49
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           25    13 (average)
  7779                           ; direct_byte          106     6 (fixed)
  7780                           ; jumptable            260     6 (fixed)
  7781                           ;	Chosen strategy is simple_byte
  7782  08F1  3A00               	xorlw	0	; case 0
  7783  08F2  1903               	skipnz
  7784  08F3  28AC               	goto	l6268
  7785  08F4  3A01               	xorlw	1	; case 1
  7786  08F5  1903               	skipnz
  7787  08F6  28E7               	goto	l6284
  7788  08F7  3A03               	xorlw	3	; case 2
  7789  08F8  1903               	skipnz
  7790  08F9  290A               	goto	l2089
  7791  08FA  3A01               	xorlw	1	; case 3
  7792  08FB  1903               	skipnz
  7793  08FC  290A               	goto	l2089
  7794  08FD  3A12               	xorlw	18	; case 17
  7795  08FE  1903               	skipnz
  7796  08FF  28EB               	goto	l6286
  7797  0900  3A31               	xorlw	49	; case 32
  7798  0901  1903               	skipnz
  7799  0902  28D1               	goto	l6280
  7800  0903  3A01               	xorlw	1	; case 33
  7801  0904  1903               	skipnz
  7802  0905  290A               	goto	l2089
  7803  0906  3A10               	xorlw	16	; case 49
  7804  0907  1903               	skipnz
  7805  0908  290A               	goto	l2089
  7806  0909  290A               	goto	l2089
  7807  090A                     l2089:	
  7808  090A  0008               	return
  7809  090B                     __end_of_setControl_Lights_Table:	
  7810                           
  7811                           	psect	text29
  7812  153A                     __ptext29:	
  7813 ;; *************** function _setRFSW_Control *****************
  7814 ;; Defined at:
  7815 ;;		line 429 in file "../src/RF_Control_B1.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  sw              1    wreg     unsigned char 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  sw              1   19[BANK0 ] unsigned char 
  7820 ;;  status          1   18[BANK0 ] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;		None               void
  7823 ;; Registers used:
  7824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        3 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    9
  7837 ;; This function calls:
  7838 ;;		_getDelayOff_GO
  7839 ;;		_getDimmerLights_Status
  7840 ;;		_setBuz
  7841 ;;		_setDelayOff_GO
  7842 ;;		_setDimmerLights_SwOff
  7843 ;;		_setDimmerLights_SwOn
  7844 ;;		_setRF_DimmerLights
  7845 ;;		_setTxData
  7846 ;; This function is called by:
  7847 ;;		_setControl_Lights_Table
  7848 ;; This function uses a non-reentrant model
  7849 ;;
  7850                           
  7851                           
  7852                           ;psect for function _setRFSW_Control
  7853  153A                     _setRFSW_Control:	
  7854                           
  7855                           ;incstack = 0
  7856                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7857                           ;setRFSW_Control@sw stored from wreg
  7858  153A  0020               	movlb	0	; select bank0
  7859  153B  00B3               	movwf	setRFSW_Control@sw
  7860                           
  7861                           ;RF_Control_B1.c: 430: char status = 0;
  7862  153C  01B2               	clrf	setRFSW_Control@status
  7863                           
  7864                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7865  153D  0022               	movlb	2	; select bank2
  7866  153E  0830               	movf	(_RF_Data^(0+256)+16),w
  7867  153F  3A80               	xorlw	128
  7868  1540  1D03               	skipz
  7869  1541  2D6D               	goto	l6122
  7870                           
  7871                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7872  1542  0020               	movlb	0	; select bank0
  7873  1543  01AA               	clrf	setDelayOff_GO@command
  7874  1544  0AAA               	incf	setDelayOff_GO@command,f
  7875  1545  0022               	movlb	2	; select bank2
  7876  1546  0831               	movf	(_RF_Data^(0+256)+17),w
  7877  1547  0020               	movlb	0	; select bank0
  7878  1548  00B1               	movwf	??_setRFSW_Control
  7879  1549  0831               	movf	??_setRFSW_Control,w
  7880  154A  00AB               	movwf	setDelayOff_GO@value
  7881  154B  0833               	movf	setRFSW_Control@sw,w
  7882  154C  3197  27A3  3195   	fcall	_setDelayOff_GO
  7883                           
  7884                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7885  154F  0020               	movlb	0	; select bank0
  7886  1550  0833               	movf	setRFSW_Control@sw,w
  7887  1551  319D  253B  3195   	fcall	_getDimmerLights_Status
  7888  1554  3A01               	xorlw	1
  7889  1555  1D03               	skipz
  7890  1556  2D7C               	goto	l6126
  7891                           
  7892                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7893  1557  3064               	movlw	100
  7894  1558  0020               	movlb	0	; select bank0
  7895  1559  00A9               	movwf	setBuz@time
  7896  155A  3000               	movlw	0
  7897  155B  00AA               	movwf	setBuz@time+1
  7898  155C  3001               	movlw	1
  7899  155D  3196  2639  3195   	fcall	_setBuz
  7900                           
  7901                           ;RF_Control_B1.c: 437: status = 1;
  7902  1560  0020               	movlb	0	; select bank0
  7903  1561  01B2               	clrf	setRFSW_Control@status
  7904  1562  0AB2               	incf	setRFSW_Control@status,f
  7905                           
  7906                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7907  1563  01A0               	clrf	setRF_DimmerLights@on
  7908  1564  0AA0               	incf	setRF_DimmerLights@on,f
  7909  1565  0833               	movf	setRFSW_Control@sw,w
  7910  1566  3196  26EB  3195   	fcall	_setRF_DimmerLights
  7911                           
  7912                           ;RF_Control_B1.c: 439: setTxData();
  7913  1569  3186  26ED  3195   	fcall	_setTxData
  7914                           
  7915                           ;RF_Control_B1.c: 441: }
  7916                           ;RF_Control_B1.c: 442: } else {
  7917  156C  2D7C               	goto	l6126
  7918  156D                     l6122:	
  7919                           
  7920                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7921  156D  0020               	movlb	0	; select bank0
  7922  156E  0833               	movf	setRFSW_Control@sw,w
  7923  156F  319D  254B  3195   	fcall	_getDelayOff_GO
  7924  1572  3A01               	xorlw	1
  7925  1573  1D03               	skipz
  7926  1574  2D7C               	goto	l6126
  7927                           
  7928                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7929  1575  0020               	movlb	0	; select bank0
  7930  1576  01AA               	clrf	setDelayOff_GO@command
  7931  1577  01AB               	clrf	setDelayOff_GO@value
  7932  1578  0833               	movf	setRFSW_Control@sw,w
  7933  1579  3197  27A3  3195   	fcall	_setDelayOff_GO
  7934  157C                     l6126:	
  7935                           
  7936                           ;RF_Control_B1.c: 446: }
  7937                           ;RF_Control_B1.c: 448: }
  7938                           ;RF_Control_B1.c: 449: if (status == 0) {
  7939  157C  0020               	movlb	0	; select bank0
  7940  157D  08B2               	movf	setRFSW_Control@status,f
  7941  157E  1D03               	skipz
  7942  157F  0008               	return
  7943                           
  7944                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7945  1580  0833               	movf	setRFSW_Control@sw,w
  7946  1581  3193  23E7  3195   	fcall	_setDimmerLights_SwOn
  7947                           
  7948                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7949  1584  0020               	movlb	0	; select bank0
  7950  1585  0833               	movf	setRFSW_Control@sw,w
  7951  1586  3194  24A7         	fcall	_setDimmerLights_SwOff
  7952  1588  0008               	return
  7953  1589                     __end_of_setRFSW_Control:	
  7954                           
  7955                           	psect	text30
  7956  13E7                     __ptext30:	
  7957 ;; *************** function _setDimmerLights_SwOn *****************
  7958 ;; Defined at:
  7959 ;;		line 505 in file "../src/Dimmer_B1.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  sw              1    wreg     unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  sw              1   15[BANK0 ] unsigned char 
  7964 ;;  idle            1   14[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;		None               void
  7967 ;; Registers used:
  7968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:        3 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    7
  7981 ;; This function calls:
  7982 ;;		_DimmerLightsPointSelect
  7983 ;;		_getAll_DimmerLights_AdjGO
  7984 ;;		_setBuz
  7985 ;;		_setDimmerLights_Trigger
  7986 ;; This function is called by:
  7987 ;;		_setRFSW_Control
  7988 ;;		_setSw_Main
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _setDimmerLights_SwOn
  7994  13E7                     _setDimmerLights_SwOn:	
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7998                           ;setDimmerLights_SwOn@sw stored from wreg
  7999  13E7  0020               	movlb	0	; select bank0
  8000  13E8  00AF               	movwf	setDimmerLights_SwOn@sw
  8001                           
  8002                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  8003  13E9  082F               	movf	setDimmerLights_SwOn@sw,w
  8004  13EA  319C  2478  3193   	fcall	_DimmerLightsPointSelect
  8005                           
  8006                           ;Dimmer_B1.c: 507: char idle = 0;
  8007  13ED  0020               	movlb	0	; select bank0
  8008  13EE  01AE               	clrf	setDimmerLights_SwOn@idle
  8009                           
  8010                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8011  13EF  319C  2458  3193   	fcall	_getAll_DimmerLights_AdjGO
  8012  13F2  3A01               	xorlw	1
  8013  13F3  3000               	movlw	0
  8014  13F4  1903               	skipnz
  8015  13F5  3001               	movlw	1
  8016  13F6  0020               	movlb	0	; select bank0
  8017  13F7  00AD               	movwf	??_setDimmerLights_SwOn
  8018  13F8  082D               	movf	??_setDimmerLights_SwOn,w
  8019  13F9  00AE               	movwf	setDimmerLights_SwOn@idle
  8020                           
  8021                           ;Dimmer_B1.c: 511: if (idle == 0) {
  8022  13FA  08AE               	movf	setDimmerLights_SwOn@idle,f
  8023  13FB  1D03               	skipz
  8024  13FC  0008               	return
  8025                           
  8026                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  8027  13FD  086F               	movf	_DimmerLights,w
  8028  13FE  3E09               	addlw	9
  8029  13FF  0086               	movwf	6
  8030  1400  3001               	movlw	1	; select bank2/3
  8031  1401  0087               	movwf	7
  8032  1402  1701               	bsf	1,6
  8033                           
  8034                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8035  1403  3064               	movlw	100
  8036  1404  00A9               	movwf	setBuz@time
  8037  1405  3000               	movlw	0
  8038  1406  00AA               	movwf	setBuz@time+1
  8039  1407  3001               	movlw	1
  8040  1408  3196  2639  3193   	fcall	_setBuz
  8041                           
  8042                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8043  140B  0020               	movlb	0	; select bank0
  8044  140C  086F               	movf	_DimmerLights,w
  8045  140D  0086               	movwf	6
  8046  140E  3001               	movlw	1	; select bank2/3
  8047  140F  0087               	movwf	7
  8048  1410  1A81               	btfsc	1,5
  8049  1411  2C1D               	goto	l5934
  8050                           
  8051                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8052  1412  086F               	movf	_DimmerLights,w
  8053  1413  0086               	movwf	6
  8054  1414  3001               	movlw	1	; select bank2/3
  8055  1415  0087               	movwf	7
  8056  1416  1681               	bsf	1,5
  8057                           
  8058                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8059  1417  01A2               	clrf	setDimmerLights_Trigger@command
  8060  1418  0AA2               	incf	setDimmerLights_Trigger@command,f
  8061  1419  082F               	movf	setDimmerLights_SwOn@sw,w
  8062  141A  319F  2700         	fcall	_setDimmerLights_Trigger
  8063                           
  8064                           ;Dimmer_B1.c: 517: } else {
  8065  141C  0008               	return
  8066  141D                     l5934:	
  8067                           
  8068                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8069  141D  0020               	movlb	0	; select bank0
  8070  141E  086F               	movf	_DimmerLights,w
  8071  141F  0086               	movwf	6
  8072  1420  3001               	movlw	1	; select bank2/3
  8073  1421  0087               	movwf	7
  8074  1422  1281               	bcf	1,5
  8075  1423  0008               	return
  8076  1424                     __end_of_setDimmerLights_SwOn:	
  8077                           
  8078                           	psect	text31
  8079  1424                     __ptext31:	
  8080 ;; *************** function _setRFSW_AdjControl *****************
  8081 ;; Defined at:
  8082 ;;		line 458 in file "../src/RF_Control_B1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  sw              1    wreg     unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  sw              1   74[BANK0 ] unsigned char 
  8087 ;;  status          1   73[BANK0 ] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;Total ram usage:        4 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:   10
  8104 ;; This function calls:
  8105 ;;		_getDimmerLights_Status
  8106 ;;		_setMemory_Modify
  8107 ;;		_setRF_DimmerValue
  8108 ;;		_setTxData
  8109 ;; This function is called by:
  8110 ;;		_setControl_Lights_Table
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function _setRFSW_AdjControl
  8116  1424                     _setRFSW_AdjControl:	
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8120                           ;setRFSW_AdjControl@sw stored from wreg
  8121  1424  0020               	movlb	0	; select bank0
  8122  1425  00EA               	movwf	setRFSW_AdjControl@sw
  8123                           
  8124                           ;RF_Control_B1.c: 459: char status = 0;
  8125  1426  01E9               	clrf	setRFSW_AdjControl@status
  8126                           
  8127                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8128  1427  086A               	movf	setRFSW_AdjControl@sw,w
  8129  1428  319D  253B  3194   	fcall	_getDimmerLights_Status
  8130  142B  0020               	movlb	0	; select bank0
  8131  142C  00E7               	movwf	??_setRFSW_AdjControl
  8132  142D  0867               	movf	??_setRFSW_AdjControl,w
  8133  142E  00E9               	movwf	setRFSW_AdjControl@status
  8134                           
  8135                           ;RF_Control_B1.c: 464: if (status == 1) {
  8136  142F  0869               	movf	setRFSW_AdjControl@status,w
  8137  1430  3A01               	xorlw	1
  8138  1431  1D03               	skipz
  8139  1432  2C3D               	goto	l6140
  8140                           
  8141                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8142  1433  3001               	movlw	1
  8143  1434  319D  25F5  3194   	fcall	_setMemory_Modify
  8144                           
  8145                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8146  1437  0020               	movlb	0	; select bank0
  8147  1438  086A               	movf	setRFSW_AdjControl@sw,w
  8148  1439  3192  2209  3194   	fcall	_setRF_DimmerValue
  8149                           
  8150                           ;RF_Control_B1.c: 467: } else {
  8151  143C  2C4F               	goto	l2101
  8152  143D                     l6140:	
  8153                           
  8154                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8155  143D  0020               	movlb	0	; select bank0
  8156  143E  086A               	movf	setRFSW_AdjControl@sw,w
  8157  143F  3E14               	addlw	20
  8158  1440  076E               	addwf	_product,w
  8159  1441  00E7               	movwf	??_setRFSW_AdjControl
  8160  1442  0867               	movf	??_setRFSW_AdjControl,w
  8161  1443  0086               	movwf	6
  8162  1444  3002               	movlw	2	; select bank4/5
  8163  1445  0087               	movwf	7
  8164  1446  0801               	movf	1,w
  8165  1447  00E8               	movwf	??_setRFSW_AdjControl+1
  8166  1448  086E               	movf	_product,w
  8167  1449  3E09               	addlw	9
  8168  144A  0086               	movwf	6
  8169  144B  3002               	movlw	2	; select bank4/5
  8170  144C  0087               	movwf	7
  8171  144D  0868               	movf	??_setRFSW_AdjControl+1,w
  8172  144E  0081               	movwf	1
  8173  144F                     l2101:	
  8174                           
  8175                           ;RF_Control_B1.c: 469: }
  8176                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8177  144F  0020               	movlb	0	; select bank0
  8178  1450  086A               	movf	setRFSW_AdjControl@sw,w
  8179  1451  3E1A               	addlw	26
  8180  1452  076E               	addwf	_product,w
  8181  1453  00E7               	movwf	??_setRFSW_AdjControl
  8182  1454  0867               	movf	??_setRFSW_AdjControl,w
  8183  1455  0086               	movwf	6
  8184  1456  3002               	movlw	2	; select bank4/5
  8185  1457  0087               	movwf	7
  8186  1458  0801               	movf	1,w
  8187  1459  00E8               	movwf	??_setRFSW_AdjControl+1
  8188  145A  086E               	movf	_product,w
  8189  145B  3E11               	addlw	17
  8190  145C  0086               	movwf	6
  8191  145D  3002               	movlw	2	; select bank4/5
  8192  145E  0087               	movwf	7
  8193  145F  0868               	movf	??_setRFSW_AdjControl+1,w
  8194  1460  0081               	movwf	1
  8195                           
  8196                           ;RF_Control_B1.c: 471: setTxData();
  8197  1461  3186  26ED         	fcall	_setTxData
  8198  1463  0008               	return
  8199  1464                     __end_of_setRFSW_AdjControl:	
  8200                           
  8201                           	psect	text32
  8202  1209                     __ptext32:	
  8203 ;; *************** function _setRF_DimmerValue *****************
  8204 ;; Defined at:
  8205 ;;		line 476 in file "../src/RF_Control_B1.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  lights          1    wreg     unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  lights          1   70[BANK0 ] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;		None               void
  8212 ;; Registers used:
  8213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;Total ram usage:        3 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    9
  8226 ;; This function calls:
  8227 ;;		_setDimmerLights_AdjRF
  8228 ;; This function is called by:
  8229 ;;		_setRFSW_AdjControl
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function _setRF_DimmerValue
  8235  1209                     _setRF_DimmerValue:	
  8236                           
  8237                           ;incstack = 0
  8238                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8239                           ;setRF_DimmerValue@lights stored from wreg
  8240  1209  0020               	movlb	0	; select bank0
  8241  120A  00E6               	movwf	setRF_DimmerValue@lights
  8242                           
  8243                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8244  120B  3065               	movlw	101
  8245  120C  0022               	movlb	2	; select bank2
  8246  120D  0229               	subwf	(_RF_Data^(0+256)+9),w
  8247  120E  1C03               	skipc
  8248  120F  2A16               	goto	l6022
  8249                           
  8250                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8251  1210  3064               	movlw	100
  8252  1211  0020               	movlb	0	; select bank0
  8253  1212  00E4               	movwf	??_setRF_DimmerValue
  8254  1213  0864               	movf	??_setRF_DimmerValue,w
  8255  1214  0022               	movlb	2	; select bank2
  8256  1215  00A9               	movwf	(_RF_Data^(0+256)+9)
  8257  1216                     l6022:	
  8258                           
  8259                           ;RF_Control_B1.c: 479: }
  8260                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8261  1216  0829               	movf	(_RF_Data^(0+256)+9),w
  8262  1217  0020               	movlb	0	; select bank0
  8263  1218  00E4               	movwf	??_setRF_DimmerValue
  8264  1219  086E               	movf	_product,w
  8265  121A  3E09               	addlw	9
  8266  121B  0086               	movwf	6
  8267  121C  3002               	movlw	2	; select bank4/5
  8268  121D  0087               	movwf	7
  8269  121E  0864               	movf	??_setRF_DimmerValue,w
  8270  121F  0081               	movwf	1
  8271                           
  8272                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8273  1220  0866               	movf	setRF_DimmerValue@lights,w
  8274  1221  00E4               	movwf	??_setRF_DimmerValue
  8275  1222  086E               	movf	_product,w
  8276  1223  3E0B               	addlw	11
  8277  1224  0086               	movwf	6
  8278  1225  3002               	movlw	2	; select bank4/5
  8279  1226  0087               	movwf	7
  8280  1227  0864               	movf	??_setRF_DimmerValue,w
  8281  1228  0081               	movwf	1
  8282                           
  8283                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8284  1229  0022               	movlb	2	; select bank2
  8285  122A  0829               	movf	(_RF_Data^(0+256)+9),w
  8286  122B  0020               	movlb	0	; select bank0
  8287  122C  00E4               	movwf	??_setRF_DimmerValue
  8288  122D  0866               	movf	setRF_DimmerValue@lights,w
  8289  122E  3E14               	addlw	20
  8290  122F  076E               	addwf	_product,w
  8291  1230  00E5               	movwf	??_setRF_DimmerValue+1
  8292  1231  0865               	movf	??_setRF_DimmerValue+1,w
  8293  1232  0086               	movwf	6
  8294  1233  3002               	movlw	2	; select bank4/5
  8295  1234  0087               	movwf	7
  8296  1235  0864               	movf	??_setRF_DimmerValue,w
  8297  1236  0081               	movwf	1
  8298                           
  8299                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8300  1237  0866               	movf	setRF_DimmerValue@lights,w
  8301  1238  3190  2097         	fcall	_setDimmerLights_AdjRF
  8302  123A  0008               	return
  8303  123B                     __end_of_setRF_DimmerValue:	
  8304                           
  8305                           	psect	text33
  8306  1097                     __ptext33:	
  8307 ;; *************** function _setDimmerLights_AdjRF *****************
  8308 ;; Defined at:
  8309 ;;		line 746 in file "../src/Dimmer_B1.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  lights          1    wreg     unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  lights          1   67[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;		None               void
  8316 ;; Registers used:
  8317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;Total ram usage:        2 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    8
  8330 ;; This function calls:
  8331 ;;		_DimmerLightsPointSelect
  8332 ;;		_getPercentValue
  8333 ;; This function is called by:
  8334 ;;		_setRF_DimmerValue
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _setDimmerLights_AdjRF
  8340  1097                     _setDimmerLights_AdjRF:	
  8341                           
  8342                           ;incstack = 0
  8343                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8344                           ;setDimmerLights_AdjRF@lights stored from wreg
  8345  1097  0020               	movlb	0	; select bank0
  8346  1098  00E3               	movwf	setDimmerLights_AdjRF@lights
  8347                           
  8348                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8349  1099  0863               	movf	setDimmerLights_AdjRF@lights,w
  8350  109A  319C  2478  3190   	fcall	_DimmerLightsPointSelect
  8351                           
  8352                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8353  109D  0020               	movlb	0	; select bank0
  8354  109E  086F               	movf	_DimmerLights,w
  8355  109F  0086               	movwf	6
  8356  10A0  3001               	movlw	1	; select bank2/3
  8357  10A1  0087               	movwf	7
  8358  10A2  1501               	bsf	1,2
  8359                           
  8360                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8361  10A3  086F               	movf	_DimmerLights,w
  8362  10A4  0086               	movwf	6
  8363  10A5  3001               	movlw	1	; select bank2/3
  8364  10A6  0087               	movwf	7
  8365  10A7  1481               	bsf	1,1
  8366                           
  8367                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8368  10A8  086E               	movf	_product,w
  8369  10A9  3E09               	addlw	9
  8370  10AA  0086               	movwf	6
  8371  10AB  3002               	movlw	2	; select bank4/5
  8372  10AC  0087               	movwf	7
  8373  10AD  0801               	movf	1,w
  8374  10AE  318A  2292         	fcall	_getPercentValue
  8375  10B0  0020               	movlb	0	; select bank0
  8376  10B1  00E2               	movwf	??_setDimmerLights_AdjRF
  8377  10B2  086F               	movf	_DimmerLights,w
  8378  10B3  3E05               	addlw	5
  8379  10B4  0086               	movwf	6
  8380  10B5  3001               	movlw	1	; select bank2/3
  8381  10B6  0087               	movwf	7
  8382  10B7  0862               	movf	??_setDimmerLights_AdjRF,w
  8383  10B8  0081               	movwf	1
  8384  10B9  0008               	return
  8385  10BA                     __end_of_setDimmerLights_AdjRF:	
  8386                           
  8387                           	psect	text34
  8388  0A92                     __ptext34:	
  8389 ;; *************** function _getPercentValue *****************
  8390 ;; Defined at:
  8391 ;;		line 858 in file "../src/Dimmer_B1.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  value           1    wreg     unsigned char 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;  value           1   62[BANK0 ] unsigned char 
  8396 ;;  i               3   63[BANK0 ] float 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      unsigned char 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        6 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    7
  8413 ;; This function calls:
  8414 ;;		___awtoft
  8415 ;;		___ftadd
  8416 ;;		___ftdiv
  8417 ;;		___ftmul
  8418 ;;		___ftneg
  8419 ;;		___fttol
  8420 ;; This function is called by:
  8421 ;;		_setDimmerLights_AdjRF
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           
  8426                           ;psect for function _getPercentValue
  8427  0A92                     _getPercentValue:	
  8428                           
  8429                           ;incstack = 0
  8430                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8431                           ;getPercentValue@value stored from wreg
  8432  0A92  0020               	movlb	0	; select bank0
  8433  0A93  00DE               	movwf	getPercentValue@value
  8434                           
  8435                           ;Dimmer_B1.c: 866: float i = ((char)(90*0.8)) - ((char)(15*0.8));
  8436  0A94  3000               	movlw	0
  8437  0A95  00DF               	movwf	getPercentValue@i
  8438  0A96  3070               	movlw	112
  8439  0A97  00E0               	movwf	getPercentValue@i+1
  8440  0A98  3042               	movlw	66
  8441  0A99  00E1               	movwf	getPercentValue@i+2
  8442                           
  8443                           ;Dimmer_B1.c: 867: i /= 100;
  8444  0A9A  3000               	movlw	0
  8445  0A9B  00AE               	movwf	___ftdiv@f2
  8446  0A9C  30C8               	movlw	200
  8447  0A9D  00AF               	movwf	___ftdiv@f2+1
  8448  0A9E  3042               	movlw	66
  8449  0A9F  00B0               	movwf	___ftdiv@f2+2
  8450  0AA0  085F               	movf	getPercentValue@i,w
  8451  0AA1  00B1               	movwf	___ftdiv@f1
  8452  0AA2  0860               	movf	getPercentValue@i+1,w
  8453  0AA3  00B2               	movwf	___ftdiv@f1+1
  8454  0AA4  0861               	movf	getPercentValue@i+2,w
  8455  0AA5  00B3               	movwf	___ftdiv@f1+2
  8456  0AA6  318D  25E8  318A   	fcall	___ftdiv
  8457  0AA9  0020               	movlb	0	; select bank0
  8458  0AAA  082E               	movf	?___ftdiv,w
  8459  0AAB  00DF               	movwf	getPercentValue@i
  8460  0AAC  082F               	movf	?___ftdiv+1,w
  8461  0AAD  00E0               	movwf	getPercentValue@i+1
  8462  0AAE  0830               	movf	?___ftdiv+2,w
  8463  0AAF  00E1               	movwf	getPercentValue@i+2
  8464                           
  8465                           ;Dimmer_B1.c: 869: return (char) (((char)(90*0.8)) - ((100 - value) * i));
  8466  0AB0  085E               	movf	getPercentValue@value,w
  8467  0AB1  00DC               	movwf	??_getPercentValue
  8468  0AB2  01DD               	clrf	??_getPercentValue+1
  8469  0AB3  09DC               	comf	??_getPercentValue,f
  8470  0AB4  09DD               	comf	??_getPercentValue+1,f
  8471  0AB5  0ADC               	incf	??_getPercentValue,f
  8472  0AB6  1903               	skipnz
  8473  0AB7  0ADD               	incf	??_getPercentValue+1,f
  8474  0AB8  085C               	movf	??_getPercentValue,w
  8475  0AB9  3E64               	addlw	100
  8476  0ABA  00A8               	movwf	___awtoft@c
  8477  0ABB  3000               	movlw	0
  8478  0ABC  3D5D               	addwfc	??_getPercentValue+1,w
  8479  0ABD  00A9               	movwf	___awtoft@c+1
  8480  0ABE  319F  27DE  318A   	fcall	___awtoft
  8481  0AC1  0020               	movlb	0	; select bank0
  8482  0AC2  0828               	movf	?___awtoft,w
  8483  0AC3  00B1               	movwf	___ftmul@f2
  8484  0AC4  0829               	movf	?___awtoft+1,w
  8485  0AC5  00B2               	movwf	___ftmul@f2+1
  8486  0AC6  082A               	movf	?___awtoft+2,w
  8487  0AC7  00B3               	movwf	___ftmul@f2+2
  8488  0AC8  085F               	movf	getPercentValue@i,w
  8489  0AC9  00AE               	movwf	___ftmul@f1
  8490  0ACA  0860               	movf	getPercentValue@i+1,w
  8491  0ACB  00AF               	movwf	___ftmul@f1+1
  8492  0ACC  0861               	movf	getPercentValue@i+2,w
  8493  0ACD  00B0               	movwf	___ftmul@f1+2
  8494  0ACE  318E  2691  318A   	fcall	___ftmul
  8495  0AD1  0020               	movlb	0	; select bank0
  8496  0AD2  082E               	movf	?___ftmul,w
  8497  0AD3  00BE               	movwf	___ftneg@f1
  8498  0AD4  082F               	movf	?___ftmul+1,w
  8499  0AD5  00BF               	movwf	___ftneg@f1+1
  8500  0AD6  0830               	movf	?___ftmul+2,w
  8501  0AD7  00C0               	movwf	___ftneg@f1+2
  8502  0AD8  319C  2433  318A   	fcall	___ftneg
  8503  0ADB  0020               	movlb	0	; select bank0
  8504  0ADC  083E               	movf	?___ftneg,w
  8505  0ADD  00C4               	movwf	___ftadd@f2
  8506  0ADE  083F               	movf	?___ftneg+1,w
  8507  0ADF  00C5               	movwf	___ftadd@f2+1
  8508  0AE0  0840               	movf	?___ftneg+2,w
  8509  0AE1  00C6               	movwf	___ftadd@f2+2
  8510  0AE2  3000               	movlw	0
  8511  0AE3  00C1               	movwf	___ftadd@f1
  8512  0AE4  3090               	movlw	144
  8513  0AE5  00C2               	movwf	___ftadd@f1+1
  8514  0AE6  3042               	movlw	66
  8515  0AE7  00C3               	movwf	___ftadd@f1+2
  8516  0AE8  3184  243C  318A   	fcall	___ftadd
  8517  0AEB  0020               	movlb	0	; select bank0
  8518  0AEC  0841               	movf	?___ftadd,w
  8519  0AED  00CE               	movwf	___fttol@f1
  8520  0AEE  0842               	movf	?___ftadd+1,w
  8521  0AEF  00CF               	movwf	___fttol@f1+1
  8522  0AF0  0843               	movf	?___ftadd+2,w
  8523  0AF1  00D0               	movwf	___fttol@f1+2
  8524  0AF2  318C  2448         	fcall	___fttol
  8525  0AF4  0020               	movlb	0	; select bank0
  8526  0AF5  084E               	movf	?___fttol,w
  8527  0AF6  0008               	return
  8528  0AF7                     __end_of_getPercentValue:	
  8529                           
  8530                           	psect	text35
  8531  0E91                     __ptext35:	
  8532 ;; *************** function ___ftmul *****************
  8533 ;; Defined at:
  8534 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  f1              3   14[BANK0 ] float 
  8537 ;;  f2              3   17[BANK0 ] float 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8540 ;;  sign            1   29[BANK0 ] unsigned char 
  8541 ;;  cntr            1   28[BANK0 ] unsigned char 
  8542 ;;  exp             1   24[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  3   14[BANK0 ] float 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:       16 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    6
  8559 ;; This function calls:
  8560 ;;		___ftpack
  8561 ;; This function is called by:
  8562 ;;		_getPercentValue
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function ___ftmul
  8568  0E91                     ___ftmul:	
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8572  0E91  0020               	movlb	0	; select bank0
  8573  0E92  082E               	movf	___ftmul@f1,w
  8574  0E93  00B4               	movwf	??___ftmul
  8575  0E94  082F               	movf	___ftmul@f1+1,w
  8576  0E95  00B5               	movwf	??___ftmul+1
  8577  0E96  0830               	movf	___ftmul@f1+2,w
  8578  0E97  00B6               	movwf	??___ftmul+2
  8579  0E98  1003               	clrc
  8580  0E99  0D35               	rlf	??___ftmul+1,w
  8581  0E9A  0D36               	rlf	??___ftmul+2,w
  8582  0E9B  00B7               	movwf	??___ftmul+3
  8583  0E9C  0837               	movf	??___ftmul+3,w
  8584  0E9D  00B8               	movwf	___ftmul@exp
  8585  0E9E  08B8               	movf	___ftmul@exp,f
  8586  0E9F  1D03               	skipz
  8587  0EA0  2EA8               	goto	l5652
  8588  0EA1  3000               	movlw	0
  8589  0EA2  00AE               	movwf	?___ftmul
  8590  0EA3  3000               	movlw	0
  8591  0EA4  00AF               	movwf	?___ftmul+1
  8592  0EA5  3000               	movlw	0
  8593  0EA6  00B0               	movwf	?___ftmul+2
  8594  0EA7  0008               	return
  8595  0EA8                     l5652:	
  8596  0EA8  0831               	movf	___ftmul@f2,w
  8597  0EA9  00B4               	movwf	??___ftmul
  8598  0EAA  0832               	movf	___ftmul@f2+1,w
  8599  0EAB  00B5               	movwf	??___ftmul+1
  8600  0EAC  0833               	movf	___ftmul@f2+2,w
  8601  0EAD  00B6               	movwf	??___ftmul+2
  8602  0EAE  1003               	clrc
  8603  0EAF  0D35               	rlf	??___ftmul+1,w
  8604  0EB0  0D36               	rlf	??___ftmul+2,w
  8605  0EB1  00B7               	movwf	??___ftmul+3
  8606  0EB2  0837               	movf	??___ftmul+3,w
  8607  0EB3  00BD               	movwf	___ftmul@sign
  8608  0EB4  08BD               	movf	___ftmul@sign,f
  8609  0EB5  1D03               	skipz
  8610  0EB6  2EBE               	goto	l5658
  8611  0EB7  3000               	movlw	0
  8612  0EB8  00AE               	movwf	?___ftmul
  8613  0EB9  3000               	movlw	0
  8614  0EBA  00AF               	movwf	?___ftmul+1
  8615  0EBB  3000               	movlw	0
  8616  0EBC  00B0               	movwf	?___ftmul+2
  8617  0EBD  0008               	return
  8618  0EBE                     l5658:	
  8619  0EBE  083D               	movf	___ftmul@sign,w
  8620  0EBF  3E7B               	addlw	123
  8621  0EC0  00B4               	movwf	??___ftmul
  8622  0EC1  0834               	movf	??___ftmul,w
  8623  0EC2  07B8               	addwf	___ftmul@exp,f
  8624  0EC3  082E               	movf	___ftmul@f1,w
  8625  0EC4  00B4               	movwf	??___ftmul
  8626  0EC5  082F               	movf	___ftmul@f1+1,w
  8627  0EC6  00B5               	movwf	??___ftmul+1
  8628  0EC7  0830               	movf	___ftmul@f1+2,w
  8629  0EC8  00B6               	movwf	??___ftmul+2
  8630  0EC9  3010               	movlw	16
  8631  0ECA                     u4465:	
  8632  0ECA  36B6               	lsrf	??___ftmul+2,f
  8633  0ECB  0CB5               	rrf	??___ftmul+1,f
  8634  0ECC  0CB4               	rrf	??___ftmul,f
  8635  0ECD  0B89               	decfsz	9,f
  8636  0ECE  2ECA               	goto	u4465
  8637  0ECF  0834               	movf	??___ftmul,w
  8638  0ED0  00B7               	movwf	??___ftmul+3
  8639  0ED1  0837               	movf	??___ftmul+3,w
  8640  0ED2  00BD               	movwf	___ftmul@sign
  8641  0ED3  0831               	movf	___ftmul@f2,w
  8642  0ED4  00B4               	movwf	??___ftmul
  8643  0ED5  0832               	movf	___ftmul@f2+1,w
  8644  0ED6  00B5               	movwf	??___ftmul+1
  8645  0ED7  0833               	movf	___ftmul@f2+2,w
  8646  0ED8  00B6               	movwf	??___ftmul+2
  8647  0ED9  3010               	movlw	16
  8648  0EDA                     u4475:	
  8649  0EDA  36B6               	lsrf	??___ftmul+2,f
  8650  0EDB  0CB5               	rrf	??___ftmul+1,f
  8651  0EDC  0CB4               	rrf	??___ftmul,f
  8652  0EDD  0B89               	decfsz	9,f
  8653  0EDE  2EDA               	goto	u4475
  8654  0EDF  0834               	movf	??___ftmul,w
  8655  0EE0  00B7               	movwf	??___ftmul+3
  8656  0EE1  0837               	movf	??___ftmul+3,w
  8657  0EE2  06BD               	xorwf	___ftmul@sign,f
  8658  0EE3  3080               	movlw	128
  8659  0EE4  00B4               	movwf	??___ftmul
  8660  0EE5  0834               	movf	??___ftmul,w
  8661  0EE6  05BD               	andwf	___ftmul@sign,f
  8662  0EE7  17AF               	bsf	___ftmul@f1+1,7
  8663  0EE8  17B2               	bsf	___ftmul@f2+1,7
  8664  0EE9  30FF               	movlw	255
  8665  0EEA  05B1               	andwf	___ftmul@f2,f
  8666  0EEB  30FF               	movlw	255
  8667  0EEC  05B2               	andwf	___ftmul@f2+1,f
  8668  0EED  3000               	movlw	0
  8669  0EEE  05B3               	andwf	___ftmul@f2+2,f
  8670  0EEF  3000               	movlw	0
  8671  0EF0  00B9               	movwf	___ftmul@f3_as_product
  8672  0EF1  3000               	movlw	0
  8673  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
  8674  0EF3  3000               	movlw	0
  8675  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
  8676  0EF5  3007               	movlw	7
  8677  0EF6  00B4               	movwf	??___ftmul
  8678  0EF7  0834               	movf	??___ftmul,w
  8679  0EF8  00BC               	movwf	___ftmul@cntr
  8680  0EF9                     l5670:	
  8681  0EF9  1C2E               	btfss	___ftmul@f1,0
  8682  0EFA  2F01               	goto	l5674
  8683  0EFB  0831               	movf	___ftmul@f2,w
  8684  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
  8685  0EFD  0832               	movf	___ftmul@f2+1,w
  8686  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8687  0EFF  0833               	movf	___ftmul@f2+2,w
  8688  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8689  0F01                     l5674:	
  8690  0F01  3001               	movlw	1
  8691  0F02                     u4495:	
  8692  0F02  36B0               	lsrf	___ftmul@f1+2,f
  8693  0F03  0CAF               	rrf	___ftmul@f1+1,f
  8694  0F04  0CAE               	rrf	___ftmul@f1,f
  8695  0F05  0B89               	decfsz	9,f
  8696  0F06  2F02               	goto	u4495
  8697  0F07  3001               	movlw	1
  8698  0F08                     u4505:	
  8699  0F08  35B1               	lslf	___ftmul@f2,f
  8700  0F09  0DB2               	rlf	___ftmul@f2+1,f
  8701  0F0A  0DB3               	rlf	___ftmul@f2+2,f
  8702  0F0B  0B89               	decfsz	9,f
  8703  0F0C  2F08               	goto	u4505
  8704  0F0D  3001               	movlw	1
  8705  0F0E  02BC               	subwf	___ftmul@cntr,f
  8706  0F0F  1D03               	btfss	3,2
  8707  0F10  2EF9               	goto	l5670
  8708  0F11  3009               	movlw	9
  8709  0F12  00B4               	movwf	??___ftmul
  8710  0F13  0834               	movf	??___ftmul,w
  8711  0F14  00BC               	movwf	___ftmul@cntr
  8712  0F15                     l5682:	
  8713  0F15  1C2E               	btfss	___ftmul@f1,0
  8714  0F16  2F1D               	goto	l5686
  8715  0F17  0831               	movf	___ftmul@f2,w
  8716  0F18  07B9               	addwf	___ftmul@f3_as_product,f
  8717  0F19  0832               	movf	___ftmul@f2+1,w
  8718  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8719  0F1B  0833               	movf	___ftmul@f2+2,w
  8720  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8721  0F1D                     l5686:	
  8722  0F1D  3001               	movlw	1
  8723  0F1E                     u4535:	
  8724  0F1E  36B0               	lsrf	___ftmul@f1+2,f
  8725  0F1F  0CAF               	rrf	___ftmul@f1+1,f
  8726  0F20  0CAE               	rrf	___ftmul@f1,f
  8727  0F21  0B89               	decfsz	9,f
  8728  0F22  2F1E               	goto	u4535
  8729  0F23  3001               	movlw	1
  8730  0F24                     u4545:	
  8731  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8732  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8733  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
  8734  0F27  0B89               	decfsz	9,f
  8735  0F28  2F24               	goto	u4545
  8736  0F29  3001               	movlw	1
  8737  0F2A  02BC               	subwf	___ftmul@cntr,f
  8738  0F2B  1D03               	btfss	3,2
  8739  0F2C  2F15               	goto	l5682
  8740  0F2D  0839               	movf	___ftmul@f3_as_product,w
  8741  0F2E  00A0               	movwf	___ftpack@arg
  8742  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
  8743  0F30  00A1               	movwf	___ftpack@arg+1
  8744  0F31  083B               	movf	___ftmul@f3_as_product+2,w
  8745  0F32  00A2               	movwf	___ftpack@arg+2
  8746  0F33  0838               	movf	___ftmul@exp,w
  8747  0F34  00B4               	movwf	??___ftmul
  8748  0F35  0834               	movf	??___ftmul,w
  8749  0F36  00A3               	movwf	___ftpack@exp
  8750  0F37  083D               	movf	___ftmul@sign,w
  8751  0F38  00B5               	movwf	??___ftmul+1
  8752  0F39  0835               	movf	??___ftmul+1,w
  8753  0F3A  00A4               	movwf	___ftpack@sign
  8754  0F3B  3189  216B         	fcall	___ftpack
  8755  0F3D  0020               	movlb	0	; select bank0
  8756  0F3E  0820               	movf	?___ftpack,w
  8757  0F3F  00AE               	movwf	?___ftmul
  8758  0F40  0821               	movf	?___ftpack+1,w
  8759  0F41  00AF               	movwf	?___ftmul+1
  8760  0F42  0822               	movf	?___ftpack+2,w
  8761  0F43  00B0               	movwf	?___ftmul+2
  8762  0F44  0008               	return
  8763  0F45                     __end_of___ftmul:	
  8764                           
  8765                           	psect	text36
  8766  1DF5                     __ptext36:	
  8767 ;; *************** function _setMemory_Modify *****************
  8768 ;; Defined at:
  8769 ;;		line 1025 in file "../src/MCU_B1.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  command         1    wreg     unsigned char 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  command         1    1[BANK0 ] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        2 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    5
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_setLog_Code
  8794 ;;		_setRFSW_AdjControl
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           
  8799                           ;psect for function _setMemory_Modify
  8800  1DF5                     _setMemory_Modify:	
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8804                           ;setMemory_Modify@command stored from wreg
  8805  1DF5  0020               	movlb	0	; select bank0
  8806  1DF6  00A1               	movwf	setMemory_Modify@command
  8807                           
  8808                           ;MCU_B1.c: 1026: Memory.Modify = command == 1 ? 1 : 0;
  8809  1DF7  0821               	movf	setMemory_Modify@command,w
  8810  1DF8  3A01               	xorlw	1
  8811  1DF9  3000               	movlw	0
  8812  1DFA  1903               	skipnz
  8813  1DFB  3001               	movlw	1
  8814  1DFC  00A0               	movwf	??_setMemory_Modify
  8815  1DFD  0023               	movlb	3	; select bank3
  8816  1DFE  0844               	movf	(_Memory^(0+384)+36),w
  8817  1DFF  0020               	movlb	0	; select bank0
  8818  1E00  0620               	xorwf	??_setMemory_Modify,w
  8819  1E01  39FE               	andlw	-2
  8820  1E02  0620               	xorwf	??_setMemory_Modify,w
  8821  1E03  0023               	movlb	3	; select bank3
  8822  1E04  00C4               	movwf	(_Memory^(0+384)+36)
  8823                           
  8824                           ;MCU_B1.c: 1027: Memory.Time = 0;
  8825  1E05  01C2               	clrf	(_Memory^(0+384)+34)
  8826  1E06  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8827  1E07  0008               	return
  8828  1E08                     __end_of_setMemory_Modify:	
  8829                           
  8830                           	psect	text37
  8831  1D9D                     __ptext37:	
  8832 ;; *************** function _getRF_KeyStatus *****************
  8833 ;; Defined at:
  8834 ;;		line 193 in file "../src/RF_Control_B1.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;		None
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  key             1    1[BANK0 ] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  1    wreg      unsigned char 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;Total ram usage:        3 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    5
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_setRF_Main
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _getRF_KeyStatus
  8864  1D9D                     _getRF_KeyStatus:	
  8865                           
  8866                           ;RF_Control_B1.c: 194: char key = 0;
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8870  1D9D  0020               	movlb	0	; select bank0
  8871  1D9E  01A1               	clrf	getRF_KeyStatus@key
  8872                           
  8873                           ;RF_Control_B1.c: 204: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8874  1D9F  01A2               	clrf	_getRF_KeyStatus$5493
  8875  1DA0  0AA2               	incf	_getRF_KeyStatus$5493,f
  8876  1DA1  1F0C               	btfss	12,6	;volatile
  8877  1DA2  1A0C               	btfsc	12,4	;volatile
  8878  1DA3  2DA8               	goto	l6644
  8879  1DA4  1C0C               	btfss	12,0	;volatile
  8880  1DA5  1B8C               	btfsc	12,7	;volatile
  8881  1DA6  2DA8               	goto	l6644
  8882  1DA7  01A2               	clrf	_getRF_KeyStatus$5493
  8883  1DA8                     l6644:	
  8884  1DA8  0822               	movf	_getRF_KeyStatus$5493,w
  8885  1DA9  00A0               	movwf	??_getRF_KeyStatus
  8886  1DAA  0820               	movf	??_getRF_KeyStatus,w
  8887  1DAB  00A1               	movwf	getRF_KeyStatus@key
  8888                           
  8889                           ;RF_Control_B1.c: 206: return key;
  8890  1DAC  0821               	movf	getRF_KeyStatus@key,w
  8891  1DAD  0008               	return
  8892  1DAE                     __end_of_getRF_KeyStatus:	
  8893                           
  8894                           	psect	text38
  8895  1D8C                     __ptext38:	
  8896 ;; *************** function _getBuz_GO *****************
  8897 ;; Defined at:
  8898 ;;		line 82 in file "../src/Buzzer_B1.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  i               2    4[BANK0 ] int 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  2    0[BANK0 ] int 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;Total ram usage:        6 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    5
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_setRF_Main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _getBuz_GO
  8928  1D8C                     _getBuz_GO:	
  8929                           
  8930                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8934  1D8C  0021               	movlb	1	; select bank1
  8935  1D8D  0C2F               	rrf	_Buz1^(0+128),w
  8936  1D8E  3901               	andlw	1
  8937  1D8F  0020               	movlb	0	; select bank0
  8938  1D90  00A2               	movwf	??_getBuz_GO
  8939  1D91  01A3               	clrf	??_getBuz_GO+1
  8940  1D92  0822               	movf	??_getBuz_GO,w
  8941  1D93  00A4               	movwf	getBuz_GO@i
  8942  1D94  0823               	movf	??_getBuz_GO+1,w
  8943  1D95  00A5               	movwf	getBuz_GO@i+1
  8944                           
  8945                           ;Buzzer_B1.c: 84: return i;
  8946  1D96  0825               	movf	getBuz_GO@i+1,w
  8947  1D97  01A1               	clrf	?_getBuz_GO+1
  8948  1D98  07A1               	addwf	?_getBuz_GO+1,f
  8949  1D99  0824               	movf	getBuz_GO@i,w
  8950  1D9A  01A0               	clrf	?_getBuz_GO
  8951  1D9B  07A0               	addwf	?_getBuz_GO,f
  8952  1D9C  0008               	return
  8953  1D9D                     __end_of_getBuz_GO:	
  8954                           
  8955                           	psect	text39
  8956  1D2C                     __ptext39:	
  8957 ;; *************** function _RF_RxDisable *****************
  8958 ;; Defined at:
  8959 ;;		line 268 in file "../src/RF_Control_B1.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;		None               void
  8966 ;; Registers used:
  8967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    7
  8980 ;; This function calls:
  8981 ;;		_CC2500_WriteCommand
  8982 ;; This function is called by:
  8983 ;;		_setRF_Main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _RF_RxDisable
  8989  1D2C                     _RF_RxDisable:	
  8990                           
  8991                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8995  1D2C  0021               	movlb	1	; select bank1
  8996  1D2D  18BB               	btfsc	_RF1^(0+128),1
  8997  1D2E  2D31               	goto	l2051
  8998  1D2F  1DBB               	btfss	_RF1^(0+128),3
  8999  1D30  0008               	return
  9000  1D31                     l2051:	
  9001                           
  9002                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  9003  1D31  11BB               	bcf	_RF1^(0+128),3
  9004                           
  9005                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  9006  1D32  10BB               	bcf	_RF1^(0+128),1
  9007                           
  9008                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  9009  1D33  3036               	movlw	54
  9010  1D34  319E  26B1  319D   	fcall	_CC2500_WriteCommand
  9011                           
  9012                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  9013  1D37  303A               	movlw	58
  9014  1D38  319E  26B1         	fcall	_CC2500_WriteCommand
  9015  1D3A  0008               	return
  9016  1D3B                     __end_of_RF_RxDisable:	
  9017                           
  9018                           	psect	text40
  9019  09CC                     __ptext40:	
  9020 ;; *************** function _CC2500_TxData *****************
  9021 ;; Defined at:
  9022 ;;		line 32 in file "../src/CC2500_B1.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;		None               void
  9029 ;; Registers used:
  9030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        2 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    7
  9043 ;; This function calls:
  9044 ;;		_CC2500_WriteByte
  9045 ;;		_CC2500_WriteCommand
  9046 ;;		_Timeout_Counter
  9047 ;;		_set_TimeoutCleared
  9048 ;; This function is called by:
  9049 ;;		_setRF_Main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _CC2500_TxData
  9055  09CC                     _CC2500_TxData:	
  9056                           
  9057                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9058                           ;CC2500_B1.c: 35: RC0 = 0;
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9062  09CC  0020               	movlb	0	; select bank0
  9063  09CD  100E               	bcf	14,0	;volatile
  9064                           
  9065                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9066  09CE  307F               	movlw	127
  9067  09CF  00A4               	movwf	??_CC2500_TxData
  9068  09D0  0824               	movf	??_CC2500_TxData,w
  9069  09D1  00FB               	movwf	_SPI0Buffer
  9070                           
  9071                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9072  09D2  29D6               	goto	l6302
  9073  09D3                     l6300:	
  9074                           
  9075                           ;CC2500_B1.c: 38: Timeout_Counter();
  9076  09D3  319E  2643  3189   	fcall	_Timeout_Counter
  9077  09D6                     l6302:	
  9078  09D6  0020               	movlb	0	; select bank0
  9079  09D7  1E8E               	btfss	14,5	;volatile
  9080  09D8  29DC               	goto	l6306
  9081  09D9  0021               	movlb	1	; select bank1
  9082  09DA  1D2C               	btfss	(_myMain^(0+128)+12),2
  9083  09DB  29D3               	goto	l6300
  9084  09DC                     l6306:	
  9085                           
  9086                           ;CC2500_B1.c: 39: };
  9087                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9088  09DC  319C  2400  3189   	fcall	_set_TimeoutCleared
  9089                           
  9090                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9091  09DF  319E  261B  3189   	fcall	_CC2500_WriteByte
  9092                           
  9093                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9094  09E2  0021               	movlb	1	; select bank1
  9095  09E3  0852               	movf	_Tx_Length^(0+128),w
  9096  09E4  0020               	movlb	0	; select bank0
  9097  09E5  00A4               	movwf	??_CC2500_TxData
  9098  09E6  0824               	movf	??_CC2500_TxData,w
  9099  09E7  00FB               	movwf	_SPI0Buffer
  9100                           
  9101                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9102  09E8  319E  261B  3189   	fcall	_CC2500_WriteByte
  9103                           
  9104                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9105  09EB  0020               	movlb	0	; select bank0
  9106  09EC  01A5               	clrf	CC2500_TxData@loop_e
  9107  09ED                     l6320:	
  9108  09ED  0021               	movlb	1	; select bank1
  9109  09EE  0852               	movf	_Tx_Length^(0+128),w
  9110  09EF  0020               	movlb	0	; select bank0
  9111  09F0  0225               	subwf	CC2500_TxData@loop_e,w
  9112  09F1  1803               	btfsc	3,0
  9113  09F2  2A05               	goto	l231
  9114                           
  9115                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9116  09F3  0825               	movf	CC2500_TxData@loop_e,w
  9117  09F4  3E20               	addlw	_RF_Data& (0+255)
  9118  09F5  0086               	movwf	6
  9119  09F6  3001               	movlw	1	; select bank2/3
  9120  09F7  0087               	movwf	7
  9121  09F8  0801               	movf	1,w
  9122  09F9  00A4               	movwf	??_CC2500_TxData
  9123  09FA  0824               	movf	??_CC2500_TxData,w
  9124  09FB  00FB               	movwf	_SPI0Buffer
  9125                           
  9126                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9127  09FC  319E  261B  3189   	fcall	_CC2500_WriteByte
  9128  09FF  3001               	movlw	1
  9129  0A00  0020               	movlb	0	; select bank0
  9130  0A01  00A4               	movwf	??_CC2500_TxData
  9131  0A02  0824               	movf	??_CC2500_TxData,w
  9132  0A03  07A5               	addwf	CC2500_TxData@loop_e,f
  9133  0A04  29ED               	goto	l6320
  9134  0A05                     l231:	
  9135                           
  9136                           ;CC2500_B1.c: 48: }
  9137                           ;CC2500_B1.c: 49: RC0 = 1;
  9138  0A05  140E               	bsf	14,0	;volatile
  9139                           
  9140                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9141  0A06  3035               	movlw	53
  9142  0A07  319E  26B1  3189   	fcall	_CC2500_WriteCommand
  9143                           
  9144                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9145  0A0A  2A0E               	goto	l6326
  9146  0A0B                     l6324:	
  9147                           
  9148                           ;CC2500_B1.c: 52: Timeout_Counter();
  9149  0A0B  319E  2643  3189   	fcall	_Timeout_Counter
  9150  0A0E                     l6326:	
  9151  0A0E  0020               	movlb	0	; select bank0
  9152  0A0F  188E               	btfsc	14,1	;volatile
  9153  0A10  2A14               	goto	l6330
  9154  0A11  0021               	movlb	1	; select bank1
  9155  0A12  1D2C               	btfss	(_myMain^(0+128)+12),2
  9156  0A13  2A0B               	goto	l6324
  9157  0A14                     l6330:	
  9158                           
  9159                           ;CC2500_B1.c: 53: };
  9160                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9161  0A14  319C  2400  3189   	fcall	_set_TimeoutCleared
  9162                           
  9163                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9164  0A17  2A1B               	goto	l6334
  9165  0A18                     l6332:	
  9166                           
  9167                           ;CC2500_B1.c: 57: Timeout_Counter();
  9168  0A18  319E  2643  3189   	fcall	_Timeout_Counter
  9169  0A1B                     l6334:	
  9170  0A1B  0020               	movlb	0	; select bank0
  9171  0A1C  1C8E               	btfss	14,1	;volatile
  9172  0A1D  2A21               	goto	l6338
  9173  0A1E  0021               	movlb	1	; select bank1
  9174  0A1F  1D2C               	btfss	(_myMain^(0+128)+12),2
  9175  0A20  2A18               	goto	l6332
  9176  0A21                     l6338:	
  9177                           
  9178                           ;CC2500_B1.c: 58: };
  9179                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9180  0A21  319C  2400  3189   	fcall	_set_TimeoutCleared
  9181                           
  9182                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9183  0A24  3036               	movlw	54
  9184  0A25  319E  26B1  3189   	fcall	_CC2500_WriteCommand
  9185                           
  9186                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9187  0A28  303B               	movlw	59
  9188  0A29  319E  26B1         	fcall	_CC2500_WriteCommand
  9189                           
  9190                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9191  0A2B  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9192  0A2C  0008               	return
  9193  0A2D                     __end_of_CC2500_TxData:	
  9194                           
  9195                           	psect	text41
  9196  0B5D                     __ptext41:	
  9197 ;; *************** function _CC2500_RxData *****************
  9198 ;; Defined at:
  9199 ;;		line 70 in file "../src/CC2500_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;		None               void
  9206 ;; Registers used:
  9207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        2 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    7
  9220 ;; This function calls:
  9221 ;;		_CC2500_ReadByte
  9222 ;;		_CC2500_ReadStatus
  9223 ;;		_CC2500_WriteByte
  9224 ;;		_Timeout_Counter
  9225 ;;		_set_TimeoutCleared
  9226 ;; This function is called by:
  9227 ;;		_setRF_Main
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _CC2500_RxData
  9233  0B5D                     _CC2500_RxData:	
  9234                           
  9235                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9236                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9240  0B5D  0020               	movlb	0	; select bank0
  9241  0B5E  188E               	btfsc	14,1	;volatile
  9242  0B5F  2B64               	goto	l6352
  9243  0B60  2B6D               	goto	l6358
  9244  0B61                     l6350:	
  9245                           ;CC2500_B1.c: 76: {
  9246                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9247                           
  9248                           
  9249                           ;CC2500_B1.c: 78: Timeout_Counter();
  9250  0B61  319E  2643  318B   	fcall	_Timeout_Counter
  9251  0B64                     l6352:	
  9252  0B64  0020               	movlb	0	; select bank0
  9253  0B65  1C8E               	btfss	14,1	;volatile
  9254  0B66  2B6A               	goto	l6356
  9255  0B67  0021               	movlb	1	; select bank1
  9256  0B68  1D2C               	btfss	(_myMain^(0+128)+12),2
  9257  0B69  2B61               	goto	l6350
  9258  0B6A                     l6356:	
  9259                           
  9260                           ;CC2500_B1.c: 79: };
  9261                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9262  0B6A  319C  2400  318B   	fcall	_set_TimeoutCleared
  9263  0B6D                     l6358:	
  9264                           
  9265                           ;CC2500_B1.c: 81: }
  9266                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9267  0B6D  303B               	movlw	59
  9268  0B6E  3190  2075  318B   	fcall	_CC2500_ReadStatus
  9269                           
  9270                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9271  0B71  0021               	movlb	1	; select bank1
  9272  0B72  0855               	movf	_s_data^(0+128),w
  9273  0B73  1903               	btfsc	3,2
  9274  0B74  0008               	return
  9275                           
  9276                           ;CC2500_B1.c: 86: RC0 = 0;
  9277  0B75  0020               	movlb	0	; select bank0
  9278  0B76  100E               	bcf	14,0	;volatile
  9279                           
  9280                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9281  0B77  30FF               	movlw	255
  9282  0B78  00A4               	movwf	??_CC2500_RxData
  9283  0B79  0824               	movf	??_CC2500_RxData,w
  9284  0B7A  00FB               	movwf	_SPI0Buffer
  9285                           
  9286                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9287  0B7B  2B7F               	goto	l6368
  9288  0B7C                     l6366:	
  9289                           
  9290                           ;CC2500_B1.c: 89: Timeout_Counter();
  9291  0B7C  319E  2643  318B   	fcall	_Timeout_Counter
  9292  0B7F                     l6368:	
  9293  0B7F  0020               	movlb	0	; select bank0
  9294  0B80  1E8E               	btfss	14,5	;volatile
  9295  0B81  2B85               	goto	l6372
  9296  0B82  0021               	movlb	1	; select bank1
  9297  0B83  1D2C               	btfss	(_myMain^(0+128)+12),2
  9298  0B84  2B7C               	goto	l6366
  9299  0B85                     l6372:	
  9300                           
  9301                           ;CC2500_B1.c: 90: };
  9302                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9303  0B85  319C  2400  318B   	fcall	_set_TimeoutCleared
  9304                           
  9305                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9306  0B88  319E  261B  318B   	fcall	_CC2500_WriteByte
  9307                           
  9308                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9309  0B8B  319E  2682  318B   	fcall	_CC2500_ReadByte
  9310                           
  9311                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9312  0B8E  087B               	movf	_SPI0Buffer,w
  9313  0B8F  0020               	movlb	0	; select bank0
  9314  0B90  00A4               	movwf	??_CC2500_RxData
  9315  0B91  0824               	movf	??_CC2500_RxData,w
  9316  0B92  0021               	movlb	1	; select bank1
  9317  0B93  00D0               	movwf	_Rx_Length^(0+128)
  9318                           
  9319                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9320  0B94  0020               	movlb	0	; select bank0
  9321  0B95  01A5               	clrf	CC2500_RxData@loop_f
  9322  0B96                     l6388:	
  9323  0B96  0021               	movlb	1	; select bank1
  9324  0B97  0850               	movf	_Rx_Length^(0+128),w
  9325  0B98  0020               	movlb	0	; select bank0
  9326  0B99  0225               	subwf	CC2500_RxData@loop_f,w
  9327  0B9A  1803               	btfsc	3,0
  9328  0B9B  2BAE               	goto	l6390
  9329                           
  9330                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9331  0B9C  319E  2682  318B   	fcall	_CC2500_ReadByte
  9332                           
  9333                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9334  0B9F  087B               	movf	_SPI0Buffer,w
  9335  0BA0  0020               	movlb	0	; select bank0
  9336  0BA1  00A4               	movwf	??_CC2500_RxData
  9337  0BA2  0825               	movf	CC2500_RxData@loop_f,w
  9338  0BA3  3E20               	addlw	_RF_Data& (0+255)
  9339  0BA4  0086               	movwf	6
  9340  0BA5  3001               	movlw	1	; select bank2/3
  9341  0BA6  0087               	movwf	7
  9342  0BA7  0824               	movf	??_CC2500_RxData,w
  9343  0BA8  0081               	movwf	1
  9344  0BA9  3001               	movlw	1
  9345  0BAA  00A4               	movwf	??_CC2500_RxData
  9346  0BAB  0824               	movf	??_CC2500_RxData,w
  9347  0BAC  07A5               	addwf	CC2500_RxData@loop_f,f
  9348  0BAD  2B96               	goto	l6388
  9349  0BAE                     l6390:	
  9350                           
  9351                           ;CC2500_B1.c: 99: }
  9352                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9353  0BAE  319E  2682  318B   	fcall	_CC2500_ReadByte
  9354                           
  9355                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9356  0BB1  087B               	movf	_SPI0Buffer,w
  9357  0BB2  0020               	movlb	0	; select bank0
  9358  0BB3  00A4               	movwf	??_CC2500_RxData
  9359  0BB4  0824               	movf	??_CC2500_RxData,w
  9360  0BB5  0021               	movlb	1	; select bank1
  9361  0BB6  00CF               	movwf	_RSSI^(0+128)
  9362                           
  9363                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9364  0BB7  319E  2682         	fcall	_CC2500_ReadByte
  9365                           
  9366                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9367  0BB9  087B               	movf	_SPI0Buffer,w
  9368  0BBA  0020               	movlb	0	; select bank0
  9369  0BBB  00A4               	movwf	??_CC2500_RxData
  9370  0BBC  0824               	movf	??_CC2500_RxData,w
  9371  0BBD  0021               	movlb	1	; select bank1
  9372  0BBE  00CC               	movwf	_CRC^(0+128)
  9373                           
  9374                           ;CC2500_B1.c: 104: RC0 = 1;
  9375  0BBF  0020               	movlb	0	; select bank0
  9376  0BC0  140E               	bsf	14,0	;volatile
  9377                           
  9378                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9379  0BC1  0021               	movlb	1	; select bank1
  9380  0BC2  1BCC               	btfsc	_CRC^(0+128),7
  9381                           
  9382                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9383  0BC3  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9384                           
  9385                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9386  0BC4  11BB               	bcf	_RF1^(0+128),3
  9387                           
  9388                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9389  0BC5  14BB               	bsf	_RF1^(0+128),1
  9390  0BC6  0008               	return
  9391  0BC7                     __end_of_CC2500_RxData:	
  9392                           
  9393                           	psect	text42
  9394  1075                     __ptext42:	
  9395 ;; *************** function _CC2500_ReadStatus *****************
  9396 ;; Defined at:
  9397 ;;		line 301 in file "../src/CC2500_B1.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  status_addr     1    wreg     unsigned char 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;		None               void
  9404 ;; Registers used:
  9405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;Total ram usage:        2 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    6
  9418 ;; This function calls:
  9419 ;;		_CC2500_ReadByte
  9420 ;;		_CC2500_WriteByte
  9421 ;;		_Timeout_Counter
  9422 ;;		_set_TimeoutCleared
  9423 ;; This function is called by:
  9424 ;;		_CC2500_RxData
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           
  9429                           ;psect for function _CC2500_ReadStatus
  9430  1075                     _CC2500_ReadStatus:	
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9434                           ;CC2500_ReadStatus@status_addr stored from wreg
  9435  1075  0020               	movlb	0	; select bank0
  9436  1076  00A3               	movwf	CC2500_ReadStatus@status_addr
  9437                           
  9438                           ;CC2500_B1.c: 302: RC0 = 0;
  9439  1077  100E               	bcf	14,0	;volatile
  9440                           
  9441                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9442  1078  0823               	movf	CC2500_ReadStatus@status_addr,w
  9443  1079  3EC0               	addlw	192
  9444  107A  00A2               	movwf	??_CC2500_ReadStatus
  9445  107B  0822               	movf	??_CC2500_ReadStatus,w
  9446  107C  00FB               	movwf	_SPI0Buffer
  9447                           
  9448                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9449  107D  2881               	goto	l6166
  9450  107E                     l6164:	
  9451                           
  9452                           ;CC2500_B1.c: 306: Timeout_Counter();
  9453  107E  319E  2643  3190   	fcall	_Timeout_Counter
  9454  1081                     l6166:	
  9455  1081  0020               	movlb	0	; select bank0
  9456  1082  1E8E               	btfss	14,5	;volatile
  9457  1083  2887               	goto	l6170
  9458  1084  0021               	movlb	1	; select bank1
  9459  1085  1D2C               	btfss	(_myMain^(0+128)+12),2
  9460  1086  287E               	goto	l6164
  9461  1087                     l6170:	
  9462                           
  9463                           ;CC2500_B1.c: 307: };
  9464                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9465  1087  319C  2400  3190   	fcall	_set_TimeoutCleared
  9466                           
  9467                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9468  108A  319E  261B  3190   	fcall	_CC2500_WriteByte
  9469                           
  9470                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9471  108D  319E  2682         	fcall	_CC2500_ReadByte
  9472                           
  9473                           ;CC2500_B1.c: 312: RC0 = 1;
  9474  108F  0020               	movlb	0	; select bank0
  9475  1090  140E               	bsf	14,0	;volatile
  9476                           
  9477                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9478  1091  087B               	movf	_SPI0Buffer,w
  9479  1092  00A2               	movwf	??_CC2500_ReadStatus
  9480  1093  0822               	movf	??_CC2500_ReadStatus,w
  9481  1094  0021               	movlb	1	; select bank1
  9482  1095  00D5               	movwf	_s_data^(0+128)
  9483  1096  0008               	return
  9484  1097                     __end_of_CC2500_ReadStatus:	
  9485                           
  9486                           	psect	text43
  9487  1E82                     __ptext43:	
  9488 ;; *************** function _CC2500_ReadByte *****************
  9489 ;; Defined at:
  9490 ;;		line 235 in file "../src/CC2500_B1.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        2 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    5
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_CC2500_RxData
  9515 ;;		_CC2500_ReadStatus
  9516 ;;		_CC2500_ReadREG
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           
  9521                           ;psect for function _CC2500_ReadByte
  9522  1E82                     _CC2500_ReadByte:	
  9523                           
  9524                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9525                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9526                           
  9527                           ;incstack = 0
  9528                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9529  1E82  0020               	movlb	0	; select bank0
  9530  1E83  01A1               	clrf	CC2500_ReadByte@loop_b
  9531  1E84                     L5:	
  9532  1E84  3008               	movlw	8
  9533  1E85  0221               	subwf	CC2500_ReadByte@loop_b,w
  9534  1E86  1803               	btfsc	3,0
  9535  1E87  0008               	return
  9536                           
  9537                           ;CC2500_B1.c: 238: RC3 = 1;
  9538  1E88  158E               	bsf	14,3	;volatile
  9539                           
  9540                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9541  1E89  1003               	clrc
  9542  1E8A  0DFB               	rlf	_SPI0Buffer,f
  9543                           
  9544                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9545  1E8B  1E8E               	btfss	14,5	;volatile
  9546  1E8C  2E8F               	goto	l6070
  9547                           
  9548                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9549  1E8D  147B               	bsf	_SPI0Buffer,0
  9550  1E8E  2E93               	goto	l6072
  9551  1E8F                     l6070:	
  9552                           
  9553                           ;CC2500_B1.c: 242: else
  9554                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9555  1E8F  30FE               	movlw	254
  9556  1E90  00A0               	movwf	??_CC2500_ReadByte
  9557  1E91  0820               	movf	??_CC2500_ReadByte,w
  9558  1E92  05FB               	andwf	_SPI0Buffer,f
  9559  1E93                     l6072:	
  9560                           
  9561                           ;CC2500_B1.c: 244: RC3 = 0;
  9562  1E93  118E               	bcf	14,3	;volatile
  9563  1E94  3001               	movlw	1
  9564  1E95  00A0               	movwf	??_CC2500_ReadByte
  9565  1E96  0820               	movf	??_CC2500_ReadByte,w
  9566  1E97  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9567  1E98  2E84               	goto	L5
  9568  1E99                     __end_of_CC2500_ReadByte:	
  9569                           
  9570                           	psect	text44
  9571  1BD0                     __ptext44:	
  9572 ;; *************** function _RF_Initialization *****************
  9573 ;; Defined at:
  9574 ;;		line 9 in file "../src/RF_Control_B1.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;		None
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;		None
  9579 ;; Return value:  Size  Location     Type
  9580 ;;		None               void
  9581 ;; Registers used:
  9582 ;;		wreg, status,2, status,0, pclath, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;Total ram usage:        0 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    6
  9595 ;; This function calls:
  9596 ;;		_setRF_Initialization
  9597 ;; This function is called by:
  9598 ;;		_main
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _RF_Initialization
  9604  1BD0                     _RF_Initialization:	
  9605                           
  9606                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9607                           
  9608                           ;incstack = 0
  9609                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9610  1BD0  319C  2499         	fcall	_setRF_Initialization
  9611  1BD2  0008               	return
  9612  1BD3                     __end_of_RF_Initialization:	
  9613                           
  9614                           	psect	text45
  9615  1C99                     __ptext45:	
  9616 ;; *************** function _setRF_Initialization *****************
  9617 ;; Defined at:
  9618 ;;		line 43 in file "../src/RF_Control_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        1 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    5
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_RF_Initialization
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _setRF_Initialization
  9648  1C99                     _setRF_Initialization:	
  9649                           
  9650                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _setRF_Initialization: [wreg]
  9654  1C99  3015               	movlw	21
  9655  1C9A  0020               	movlb	0	; select bank0
  9656  1C9B  00A0               	movwf	??_setRF_Initialization
  9657  1C9C  0820               	movf	??_setRF_Initialization,w
  9658  1C9D  0021               	movlb	1	; select bank1
  9659  1C9E  00D2               	movwf	_Tx_Length^(0+128)
  9660                           
  9661                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9662  1C9F  300A               	movlw	10
  9663  1CA0  00C2               	movwf	(_RF1^(0+128)+7)
  9664  1CA1  3000               	movlw	0
  9665  1CA2  00C3               	movwf	(_RF1^(0+128)+8)
  9666  1CA3  0008               	return
  9667  1CA4                     __end_of_setRF_Initialization:	
  9668                           
  9669                           	psect	text46
  9670  1DD1                     __ptext46:	
  9671 ;; *************** function _Mcu_Initialization *****************
  9672 ;; Defined at:
  9673 ;;		line 30 in file "../src/MCU_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        0 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    6
  9694 ;; This function calls:
  9695 ;;		_ADC_Set
  9696 ;;		_Fosc_Set
  9697 ;;		_IOC_Set
  9698 ;;		_IO_Set
  9699 ;;		_TMR1_Set
  9700 ;;		_WDT_Set
  9701 ;; This function is called by:
  9702 ;;		_main
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           
  9707                           ;psect for function _Mcu_Initialization
  9708  1DD1                     _Mcu_Initialization:	
  9709                           
  9710                           ;MCU_B1.c: 32: Fosc_Set();
  9711                           
  9712                           ;incstack = 0
  9713                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9714  1DD1  319B  23FC  319D   	fcall	_Fosc_Set
  9715                           
  9716                           ;MCU_B1.c: 34: IO_Set();
  9717  1DD4  319E  2699  319D   	fcall	_IO_Set
  9718                           
  9719                           ;MCU_B1.c: 36: ;;
  9720                           ;MCU_B1.c: 38: TMR1_Set();
  9721  1DD7  319C  24F6  319D   	fcall	_TMR1_Set
  9722                           
  9723                           ;MCU_B1.c: 40: ADC_Set();
  9724  1DDA  319C  241C  319D   	fcall	_ADC_Set
  9725                           
  9726                           ;MCU_B1.c: 42: ;;
  9727                           ;MCU_B1.c: 44: ;;
  9728                           ;MCU_B1.c: 46: IOC_Set();
  9729  1DDD  319C  24EA  319D   	fcall	_IOC_Set
  9730                           
  9731                           ;MCU_B1.c: 48: ;;
  9732                           ;MCU_B1.c: 50: ;;
  9733                           ;MCU_B1.c: 52: WDT_Set();
  9734  1DE0  319C  248E         	fcall	_WDT_Set
  9735  1DE2  0008               	return
  9736  1DE3                     __end_of_Mcu_Initialization:	
  9737                           
  9738                           	psect	text47
  9739  1C8E                     __ptext47:	
  9740 ;; *************** function _WDT_Set *****************
  9741 ;; Defined at:
  9742 ;;		line 1044 in file "../src/MCU_B1.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;		None
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;		None
  9747 ;; Return value:  Size  Location     Type
  9748 ;;		None               void
  9749 ;; Registers used:
  9750 ;;		wreg
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        1 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    5
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_Mcu_Initialization
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _WDT_Set
  9772  1C8E                     _WDT_Set:	
  9773                           
  9774                           ;MCU_B1.c: 1051: WDTCON = 0b00010111;;
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _WDT_Set: [wreg]
  9778  1C8E  3017               	movlw	23
  9779  1C8F  0021               	movlb	1	; select bank1
  9780  1C90  0097               	movwf	23	;volatile
  9781                           
  9782                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  9783  1C91  144A               	bsf	_WDT^(0+128),0
  9784                           
  9785                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  9786  1C92  300A               	movlw	10
  9787  1C93  0020               	movlb	0	; select bank0
  9788  1C94  00A0               	movwf	??_WDT_Set
  9789  1C95  0820               	movf	??_WDT_Set,w
  9790  1C96  0021               	movlb	1	; select bank1
  9791  1C97  00CB               	movwf	(_WDT^(0+128)+1)
  9792  1C98  0008               	return
  9793  1C99                     __end_of_WDT_Set:	
  9794                           
  9795                           	psect	text48
  9796  1CF6                     __ptext48:	
  9797 ;; *************** function _TMR1_Set *****************
  9798 ;; Defined at:
  9799 ;;		line 199 in file "../src/MCU_B1.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;		None               void
  9806 ;; Registers used:
  9807 ;;		wreg
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;Total ram usage:        0 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    5
  9820 ;; This function calls:
  9821 ;;		Nothing
  9822 ;; This function is called by:
  9823 ;;		_Mcu_Initialization
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           
  9828                           ;psect for function _TMR1_Set
  9829  1CF6                     _TMR1_Set:	
  9830                           
  9831                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9832                           
  9833                           ;incstack = 0
  9834                           ; Regs used in _TMR1_Set: [wreg]
  9835  1CF6  3041               	movlw	65
  9836  1CF7  0020               	movlb	0	; select bank0
  9837  1CF8  0098               	movwf	24	;volatile
  9838                           
  9839                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9840  1CF9  30FA               	movlw	250
  9841  1CFA  0097               	movwf	23	;volatile
  9842                           
  9843                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9844  1CFB  3038               	movlw	56
  9845  1CFC  0096               	movwf	22	;volatile
  9846                           
  9847                           ;MCU_B1.c: 203: TMR1IE = 1;
  9848  1CFD  0021               	movlb	1	; select bank1
  9849  1CFE  1411               	bsf	17,0	;volatile
  9850                           
  9851                           ;MCU_B1.c: 204: PEIE = 1;
  9852  1CFF  170B               	bsf	11,6	;volatile
  9853                           
  9854                           ;MCU_B1.c: 205: GIE = 1;
  9855  1D00  178B               	bsf	11,7	;volatile
  9856  1D01  0008               	return
  9857  1D02                     __end_of_TMR1_Set:	
  9858                           
  9859                           	psect	text49
  9860  1E99                     __ptext49:	
  9861 ;; *************** function _IO_Set *****************
  9862 ;; Defined at:
  9863 ;;		line 60 in file "../src/MCU_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;		None               void
  9870 ;; Registers used:
  9871 ;;		wreg, status,2
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        0 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		Nothing
  9886 ;; This function is called by:
  9887 ;;		_Mcu_Initialization
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _IO_Set
  9893  1E99                     _IO_Set:	
  9894                           
  9895                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in _IO_Set: [wreg+status,2]
  9899  1E99  30F7               	movlw	247
  9900  1E9A  0021               	movlb	1	; select bank1
  9901  1E9B  008C               	movwf	12	;volatile
  9902                           
  9903                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9904  1E9C  3004               	movlw	4
  9905  1E9D  008D               	movwf	13	;volatile
  9906                           
  9907                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9908  1E9E  3026               	movlw	38
  9909  1E9F  008E               	movwf	14	;volatile
  9910                           
  9911                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9912  1EA0  0022               	movlb	2	; select bank2
  9913  1EA1  018C               	clrf	12	;volatile
  9914                           
  9915                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9916  1EA2  018D               	clrf	13	;volatile
  9917                           
  9918                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9919  1EA3  018E               	clrf	14	;volatile
  9920                           
  9921                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9922  1EA4  300E               	movlw	14
  9923  1EA5  0023               	movlb	3	; select bank3
  9924  1EA6  008C               	movwf	12	;volatile
  9925                           
  9926                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9927  1EA7  018D               	clrf	13	;volatile
  9928                           
  9929                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9930  1EA8  018E               	clrf	14	;volatile
  9931                           
  9932                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9933  1EA9  30F7               	movlw	247
  9934  1EAA  0020               	movlb	0	; select bank0
  9935  1EAB  008C               	movwf	12	;volatile
  9936                           
  9937                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9938  1EAC  3004               	movlw	4
  9939  1EAD  008D               	movwf	13	;volatile
  9940                           
  9941                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9942  1EAE  3026               	movlw	38
  9943  1EAF  008E               	movwf	14	;volatile
  9944  1EB0  0008               	return
  9945  1EB1                     __end_of_IO_Set:	
  9946                           
  9947                           	psect	text50
  9948  1CEA                     __ptext50:	
  9949 ;; *************** function _IOC_Set *****************
  9950 ;; Defined at:
  9951 ;;		line 366 in file "../src/MCU_B1.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;		None
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;		None               void
  9958 ;; Registers used:
  9959 ;;		wreg, status,2
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        0 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    5
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_Mcu_Initialization
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           
  9980                           ;psect for function _IOC_Set
  9981  1CEA                     _IOC_Set:	
  9982                           
  9983                           ;MCU_B1.c: 367: WPUB2 = 0;
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _IOC_Set: [wreg+status,2]
  9987  1CEA  0024               	movlb	4	; select bank4
  9988  1CEB  110D               	bcf	13,2	;volatile
  9989                           
  9990                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9991  1CEC  0027               	movlb	7	; select bank7
  9992  1CED  0194               	clrf	20	;volatile
  9993                           
  9994                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9995  1CEE  3004               	movlw	4
  9996  1CEF  0095               	movwf	21	;volatile
  9997                           
  9998                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9999  1CF0  0196               	clrf	22	;volatile
 10000                           
 10001                           ;MCU_B1.c: 394: IOCIE = 1;
 10002  1CF1  158B               	bsf	11,3	;volatile
 10003                           
 10004                           ;MCU_B1.c: 395: IOCIF = 0;
 10005  1CF2  100B               	bcf	11,0	;volatile
 10006                           
 10007                           ;MCU_B1.c: 396: PEIE = 1;
 10008  1CF3  170B               	bsf	11,6	;volatile
 10009                           
 10010                           ;MCU_B1.c: 397: GIE = 1;
 10011  1CF4  178B               	bsf	11,7	;volatile
 10012  1CF5  0008               	return
 10013  1CF6                     __end_of_IOC_Set:	
 10014                           
 10015                           	psect	text51
 10016  1BFC                     __ptext51:	
 10017 ;; *************** function _Fosc_Set *****************
 10018 ;; Defined at:
 10019 ;;		line 56 in file "../src/MCU_B1.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;		None               void
 10026 ;; Registers used:
 10027 ;;		wreg
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;Total ram usage:        0 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    5
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_Mcu_Initialization
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function _Fosc_Set
 10049  1BFC                     _Fosc_Set:	
 10050                           
 10051                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in _Fosc_Set: [wreg]
 10055  1BFC  3078               	movlw	120
 10056  1BFD  0021               	movlb	1	; select bank1
 10057  1BFE  0099               	movwf	25	;volatile
 10058  1BFF  0008               	return
 10059  1C00                     __end_of_Fosc_Set:	
 10060                           
 10061                           	psect	text52
 10062  1C1C                     __ptext52:	
 10063 ;; *************** function _ADC_Set *****************
 10064 ;; Defined at:
 10065 ;;		line 421 in file "../src/MCU_B1.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    5
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_Mcu_Initialization
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _ADC_Set
 10095  1C1C                     _ADC_Set:	
 10096                           
 10097                           ;MCU_B1.c: 422: ADCON1 = 0xf3;
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _ADC_Set: [wreg]
 10101  1C1C  30F3               	movlw	243
 10102  1C1D  0021               	movlb	1	; select bank1
 10103  1C1E  009E               	movwf	30	;volatile
 10104                           
 10105                           ;MCU_B1.c: 423: FVRCON = 0xc1;
 10106  1C1F  30C1               	movlw	193
 10107  1C20  0022               	movlb	2	; select bank2
 10108  1C21  0097               	movwf	23	;volatile
 10109  1C22  0008               	return
 10110  1C23                     __end_of_ADC_Set:	
 10111                           
 10112                           	psect	text53
 10113  02F8                     __ptext53:	
 10114 ;; *************** function _Load_Main *****************
 10115 ;; Defined at:
 10116 ;;		line 39 in file "../src/OverLoad_B1.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;  i               1   15[BANK0 ] unsigned char 
 10121 ;;  error           1   14[BANK0 ] unsigned char 
 10122 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10123 ;;  j               1   11[BANK0 ] unsigned char 
 10124 ;; Return value:  Size  Location     Type
 10125 ;;		None               void
 10126 ;; Registers used:
 10127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10128 ;; Tracked objects:
 10129 ;;		On entry : 0/0
 10130 ;;		On exit  : 0/0
 10131 ;;		Unchanged: 0/0
 10132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;Total ram usage:        7 bytes
 10138 ;; Hardware stack levels used:    1
 10139 ;; Hardware stack levels required when called:    8
 10140 ;; This function calls:
 10141 ;;		_getAll_DimmerLights_AdjGO
 10142 ;;		_getMain_All_Error_Status
 10143 ;;		_getMain_LightsStatus
 10144 ;;		_getMain_Lights_Count
 10145 ;;		_getMain_LoadOK
 10146 ;;		_setLoad_AH_AL_Restore
 10147 ;; This function is called by:
 10148 ;;		_main
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _Load_Main
 10154  02F8                     _Load_Main:	
 10155                           
 10156                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10160  02F8  0020               	movlb	0	; select bank0
 10161  02F9  01AF               	clrf	Load_Main@i
 10162  02FA  01AB               	clrf	Load_Main@j
 10163  02FB  3000               	movlw	0
 10164  02FC  3192  223B  3182   	fcall	_getMain_All_Error_Status
 10165  02FF  0020               	movlb	0	; select bank0
 10166  0300  00A9               	movwf	??_Load_Main
 10167  0301  0829               	movf	??_Load_Main,w
 10168  0302  00AE               	movwf	Load_Main@error
 10169  0303  01AC               	clrf	Load_Main@adjgo
 10170                           
 10171                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10172  0304  0022               	movlb	2	; select bank2
 10173  0305  1C43               	btfss	_Load^(0+256),0
 10174  0306  2C36               	goto	l1544
 10175                           
 10176                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10177  0307  319C  2458  3182   	fcall	_getAll_DimmerLights_AdjGO
 10178  030A  0020               	movlb	0	; select bank0
 10179  030B  00A9               	movwf	??_Load_Main
 10180  030C  0829               	movf	??_Load_Main,w
 10181  030D  00AC               	movwf	Load_Main@adjgo
 10182                           
 10183                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10184  030E  01AD               	clrf	_Load_Main$4108
 10185  030F  3191  217F  3182   	fcall	_getMain_LightsStatus
 10186  0312  3A01               	xorlw	1
 10187  0313  1D03               	skipz
 10188  0314  2B1E               	goto	l7712
 10189  0315  0020               	movlb	0	; select bank0
 10190  0316  08AE               	movf	Load_Main@error,f
 10191  0317  1D03               	skipz
 10192  0318  2B1E               	goto	l7712
 10193  0319  08AC               	movf	Load_Main@adjgo,f
 10194  031A  1D03               	skipz
 10195  031B  2B1E               	goto	l7712
 10196  031C  01AD               	clrf	_Load_Main$4108
 10197  031D  0AAD               	incf	_Load_Main$4108,f
 10198  031E                     l7712:	
 10199  031E  0020               	movlb	0	; select bank0
 10200  031F  082D               	movf	_Load_Main$4108,w
 10201  0320  0022               	movlb	2	; select bank2
 10202  0321  10C3               	bcf	_Load^(0+256),1
 10203  0322  1D03               	skipz
 10204  0323  14C3               	bsf	_Load^(0+256),1
 10205                           
 10206                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10207  0324  319D  250F  3182   	fcall	_getMain_LoadOK
 10208  0327  3A01               	xorlw	1
 10209  0328  1D03               	skipz
 10210  0329  2B2F               	goto	l1547
 10211  032A  0022               	movlb	2	; select bank2
 10212  032B  19C3               	btfsc	_Load^(0+256),3
 10213  032C  2B2F               	goto	l1547
 10214                           
 10215                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10216  032D  15C3               	bsf	_Load^(0+256),3
 10217                           
 10218                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10219  032E  13C3               	bcf	_Load^(0+256),7
 10220  032F                     l1547:	
 10221                           
 10222                           ;OverLoad_B1.c: 51: }
 10223                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10224  032F  0022               	movlb	2	; select bank2
 10225  0330  1CC3               	btfss	_Load^(0+256),1
 10226  0331  2C06               	goto	l1548
 10227                           
 10228                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10229  0332  1543               	bsf	_Load^(0+256),2
 10230                           
 10231                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10232  0333  1E43               	btfss	_Load^(0+256),4
 10233  0334  2C04               	goto	l1549
 10234                           
 10235                           ;OverLoad_B1.c: 58: Load.Time++;
 10236  0335  3001               	movlw	1
 10237  0336  07C4               	addwf	(_Load^(0+256)+1),f
 10238  0337  3000               	movlw	0
 10239  0338  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10240                           
 10241                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10242  0339  3000               	movlw	0
 10243  033A  0245               	subwf	((_Load+1)^(0+256)+1),w
 10244  033B  3005               	movlw	5
 10245  033C  1903               	skipnz
 10246  033D  0244               	subwf	(_Load^(0+256)+1),w
 10247  033E  1C03               	skipc
 10248  033F  0008               	return
 10249                           
 10250                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10251  0340  01C4               	clrf	(_Load^(0+256)+1)
 10252  0341  01C5               	clrf	((_Load+1)^(0+256)+1)
 10253                           
 10254                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10255  0342  1243               	bcf	_Load^(0+256),4
 10256                           
 10257                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10258  0343  0020               	movlb	0	; select bank0
 10259  0344  01AF               	clrf	Load_Main@i
 10260  0345  3004               	movlw	4
 10261  0346  022F               	subwf	Load_Main@i,w
 10262  0347  1803               	btfsc	3,0
 10263  0348  2B73               	goto	l7738
 10264  0349                     l7732:	
 10265                           
 10266                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10267  0349  352F               	lslf	Load_Main@i,w
 10268  034A  3E4E               	addlw	(_Load+11)& (0+255)
 10269  034B  0086               	movwf	6
 10270  034C  3001               	movlw	1	; select bank2/3
 10271  034D  0087               	movwf	7
 10272  034E  3F40               	moviw [0]fsr1
 10273  034F  00A9               	movwf	??_Load_Main
 10274  0350  3F41               	moviw [1]fsr1
 10275  0351  00AA               	movwf	??_Load_Main+1
 10276  0352  0829               	movf	??_Load_Main,w
 10277  0353  0022               	movlb	2	; select bank2
 10278  0354  07C8               	addwf	(_Load^(0+256)+5),f
 10279  0355  0020               	movlb	0	; select bank0
 10280  0356  082A               	movf	??_Load_Main+1,w
 10281  0357  0022               	movlb	2	; select bank2
 10282  0358  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10283                           
 10284                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10285  0359  0020               	movlb	0	; select bank0
 10286  035A  352F               	lslf	Load_Main@i,w
 10287  035B  3E58               	addlw	(_Load+21)& (0+255)
 10288  035C  0086               	movwf	6
 10289  035D  3001               	movlw	1	; select bank2/3
 10290  035E  0087               	movwf	7
 10291  035F  3F40               	moviw [0]fsr1
 10292  0360  00A9               	movwf	??_Load_Main
 10293  0361  3F41               	moviw [1]fsr1
 10294  0362  00AA               	movwf	??_Load_Main+1
 10295  0363  0829               	movf	??_Load_Main,w
 10296  0364  0022               	movlb	2	; select bank2
 10297  0365  07CA               	addwf	(_Load^(0+256)+7),f
 10298  0366  0020               	movlb	0	; select bank0
 10299  0367  082A               	movf	??_Load_Main+1,w
 10300  0368  0022               	movlb	2	; select bank2
 10301  0369  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10302  036A  3001               	movlw	1
 10303  036B  0020               	movlb	0	; select bank0
 10304  036C  00A9               	movwf	??_Load_Main
 10305  036D  0829               	movf	??_Load_Main,w
 10306  036E  07AF               	addwf	Load_Main@i,f
 10307  036F  3004               	movlw	4
 10308  0370  022F               	subwf	Load_Main@i,w
 10309  0371  1C03               	skipc
 10310  0372  2B49               	goto	l7732
 10311  0373                     l7738:	
 10312                           
 10313                           ;OverLoad_B1.c: 66: }
 10314                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10315  0373  3002               	movlw	2
 10316  0374  0022               	movlb	2	; select bank2
 10317  0375                     u7705:	
 10318  0375  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10319  0376  0CC8               	rrf	(_Load^(0+256)+5),f
 10320  0377  0B89               	decfsz	9,f
 10321  0378  2B75               	goto	u7705
 10322                           
 10323                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10324  0379  3002               	movlw	2
 10325  037A                     u7715:	
 10326  037A  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10327  037B  0CCA               	rrf	(_Load^(0+256)+7),f
 10328  037C  0B89               	decfsz	9,f
 10329  037D  2B7A               	goto	u7715
 10330                           
 10331                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10332  037E  319E  26E4  3182   	fcall	_setLoad_AH_AL_Restore
 10333                           
 10334                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10335  0381  0022               	movlb	2	; select bank2
 10336  0382  0849               	movf	((_Load+1)^(0+256)+5),w
 10337  0383  024B               	subwf	((_Load+1)^(0+256)+7),w
 10338  0384  1D03               	skipz
 10339  0385  2B88               	goto	u7725
 10340  0386  0848               	movf	(_Load^(0+256)+5),w
 10341  0387  024A               	subwf	(_Load^(0+256)+7),w
 10342  0388                     u7725:	
 10343  0388  1803               	skipnc
 10344  0389  0008               	return
 10345                           
 10346                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10347  038A  3005               	movlw	5
 10348  038B  3E43               	addlw	_Load& (0+255)
 10349  038C  0086               	movwf	6
 10350  038D  3001               	movlw	1	; select bank2/3
 10351  038E  0087               	movwf	7
 10352  038F  094A               	comf	(_Load^(0+256)+7),w
 10353  0390  0020               	movlb	0	; select bank0
 10354  0391  00A9               	movwf	??_Load_Main
 10355  0392  0022               	movlb	2	; select bank2
 10356  0393  094B               	comf	((_Load+1)^(0+256)+7),w
 10357  0394  0020               	movlb	0	; select bank0
 10358  0395  00AA               	movwf	??_Load_Main+1
 10359  0396  0AA9               	incf	??_Load_Main,f
 10360  0397  1903               	skipnz
 10361  0398  0AAA               	incf	??_Load_Main+1,f
 10362  0399  3F40               	moviw [0]fsr1
 10363  039A  0729               	addwf	??_Load_Main,w
 10364  039B  0022               	movlb	2	; select bank2
 10365  039C  00E2               	movwf	(_Load^(0+256)+31)
 10366  039D  3F41               	moviw [1]fsr1
 10367  039E  0020               	movlb	0	; select bank0
 10368  039F  3D2A               	addwfc	??_Load_Main+1,w
 10369  03A0  0022               	movlb	2	; select bank2
 10370  03A1  00E3               	movwf	(_Load^(0+256)+32)
 10371                           
 10372                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10373  03A2  01C8               	clrf	(_Load^(0+256)+5)
 10374  03A3  01C9               	clrf	((_Load+1)^(0+256)+5)
 10375                           
 10376                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10377  03A4  01CA               	clrf	(_Load^(0+256)+7)
 10378  03A5  01CB               	clrf	((_Load+1)^(0+256)+7)
 10379                           
 10380                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10381  03A6  319D  255B  3182   	fcall	_getMain_Lights_Count
 10382  03A9  0020               	movlb	0	; select bank0
 10383  03AA  00A9               	movwf	??_Load_Main
 10384  03AB  0829               	movf	??_Load_Main,w
 10385  03AC  0022               	movlb	2	; select bank2
 10386  03AD  00EE               	movwf	(_Load^(0+256)+43)
 10387                           
 10388                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10389  03AE  1DC3               	btfss	_Load^(0+256),3
 10390  03AF  2BD5               	goto	l7770
 10391                           
 10392                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10393  03B0  3002               	movlw	2
 10394  03B1  026C               	subwf	(_Load^(0+256)+41),w
 10395  03B2  1803               	skipnc
 10396  03B3  2BD5               	goto	l7770
 10397                           
 10398                           ;OverLoad_B1.c: 79: Load.Count++;
 10399  03B4  3001               	movlw	1
 10400  03B5  0020               	movlb	0	; select bank0
 10401  03B6  00A9               	movwf	??_Load_Main
 10402  03B7  0829               	movf	??_Load_Main,w
 10403  03B8  0022               	movlb	2	; select bank2
 10404  03B9  07EC               	addwf	(_Load^(0+256)+41),f
 10405                           
 10406                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10407  03BA  086C               	movf	(_Load^(0+256)+41),w
 10408  03BB  3A01               	xorlw	1
 10409  03BC  1D03               	skipz
 10410  03BD  2BC2               	goto	l7762
 10411                           
 10412                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*57);
 10413  03BE  3074               	movlw	116
 10414  03BF  00E8               	movwf	(_Load^(0+256)+37)
 10415  03C0  3004               	movlw	4
 10416  03C1  2BCD               	goto	L6
 10417  03C2                     l7762:	
 10418                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10419                           
 10420  03C2  086C               	movf	(_Load^(0+256)+41),w
 10421  03C3  3A02               	xorlw	2
 10422  03C4  1D03               	skipz
 10423  03C5  2BD5               	goto	l7770
 10424                           
 10425                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10426  03C6  086E               	movf	(_Load^(0+256)+43),w
 10427  03C7  3A01               	xorlw	1
 10428  03C8  1D03               	skipz
 10429  03C9  2BCF               	goto	l7768
 10430                           
 10431                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*57);
 10432  03CA  3066               	movlw	102
 10433  03CB  00E8               	movwf	(_Load^(0+256)+37)
 10434  03CC  3000               	movlw	0
 10435  03CD                     L6:	
 10436  03CD  00E9               	movwf	(_Load^(0+256)+38)
 10437                           
 10438                           ;OverLoad_B1.c: 85: } else {
 10439  03CE  2BD5               	goto	l7770
 10440  03CF                     l7768:	
 10441                           
 10442                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10443  03CF  084C               	movf	(_Load^(0+256)+9),w
 10444  03D0  3E66               	addlw	102
 10445  03D1  00E8               	movwf	(_Load^(0+256)+37)
 10446  03D2  3000               	movlw	0
 10447  03D3  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10448  03D4  00E9               	movwf	((_Load+1)^(0+256)+37)
 10449  03D5                     l7770:	
 10450                           
 10451                           ;OverLoad_B1.c: 87: }
 10452                           ;OverLoad_B1.c: 88: }
 10453                           ;OverLoad_B1.c: 89: }
 10454                           ;OverLoad_B1.c: 90: }
 10455                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10456  03D5  0869               	movf	((_Load+1)^(0+256)+37),w
 10457  03D6  0263               	subwf	((_Load+1)^(0+256)+31),w
 10458  03D7  1D03               	skipz
 10459  03D8  2BDB               	goto	u7785
 10460  03D9  0868               	movf	(_Load^(0+256)+37),w
 10461  03DA  0262               	subwf	(_Load^(0+256)+31),w
 10462  03DB                     u7785:	
 10463  03DB  1C03               	skipc
 10464  03DC  2BEA               	goto	l7780
 10465                           
 10466                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10467  03DD  3001               	movlw	1
 10468  03DE  0020               	movlb	0	; select bank0
 10469  03DF  00A9               	movwf	??_Load_Main
 10470  03E0  0829               	movf	??_Load_Main,w
 10471  03E1  0022               	movlb	2	; select bank2
 10472  03E2  07ED               	addwf	(_Load^(0+256)+42),f
 10473                           
 10474                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10475  03E3  3003               	movlw	3
 10476  03E4  026D               	subwf	(_Load^(0+256)+42),w
 10477  03E5  1C03               	skipc
 10478  03E6  0008               	return
 10479                           
 10480                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10481  03E7  01ED               	clrf	(_Load^(0+256)+42)
 10482                           
 10483                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10484  03E8  16C3               	bsf	_Load^(0+256),5
 10485                           
 10486                           ;OverLoad_B1.c: 109: }
 10487                           ;OverLoad_B1.c: 110: } else {
 10488  03E9  0008               	return
 10489  03EA                     l7780:	
 10490                           
 10491                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10492  03EA  01ED               	clrf	(_Load^(0+256)+42)
 10493                           
 10494                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10495  03EB  1DC3               	btfss	_Load^(0+256),3
 10496  03EC  0008               	return
 10497                           
 10498                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10499  03ED  1BC3               	btfsc	_Load^(0+256),7
 10500  03EE  0008               	return
 10501                           
 10502                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10503  03EF  3001               	movlw	1
 10504  03F0  0020               	movlb	0	; select bank0
 10505  03F1  00A9               	movwf	??_Load_Main
 10506  03F2  0829               	movf	??_Load_Main,w
 10507  03F3  0022               	movlb	2	; select bank2
 10508  03F4  07EF               	addwf	(_Load^(0+256)+44),f
 10509                           
 10510                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10511  03F5  3003               	movlw	3
 10512  03F6  026F               	subwf	(_Load^(0+256)+44),w
 10513  03F7  1C03               	skipc
 10514  03F8  0008               	return
 10515                           
 10516                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10517  03F9  01EF               	clrf	(_Load^(0+256)+44)
 10518                           
 10519                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10520  03FA  17C3               	bsf	_Load^(0+256),7
 10521                           
 10522                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10523  03FB  11C3               	bcf	_Load^(0+256),3
 10524                           
 10525                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10526  03FC  01EC               	clrf	(_Load^(0+256)+41)
 10527                           
 10528                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10529  03FD  0863               	movf	((_Load+1)^(0+256)+31),w
 10530  03FE  01CD               	clrf	((_Load+1)^(0+256)+9)
 10531  03FF  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10532  0400  0862               	movf	(_Load^(0+256)+31),w
 10533  0401  01CC               	clrf	(_Load^(0+256)+9)
 10534  0402  07CC               	addwf	(_Load^(0+256)+9),f
 10535                           
 10536                           ;OverLoad_B1.c: 130: }
 10537                           ;OverLoad_B1.c: 131: }
 10538                           ;OverLoad_B1.c: 132: }
 10539                           ;OverLoad_B1.c: 133: }
 10540                           ;OverLoad_B1.c: 134: }
 10541                           ;OverLoad_B1.c: 135: }
 10542                           ;OverLoad_B1.c: 136: } else {
 10543  0403  0008               	return
 10544  0404                     l1549:	
 10545                           
 10546                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10547  0404  1643               	bsf	_Load^(0+256),4
 10548                           
 10549                           ;OverLoad_B1.c: 138: }
 10550                           ;OverLoad_B1.c: 139: } else {
 10551  0405  0008               	return
 10552  0406                     l1548:	
 10553                           
 10554                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10555  0406  1D43               	btfss	_Load^(0+256),2
 10556  0407  2C24               	goto	l7828
 10557  0408  0020               	movlb	0	; select bank0
 10558  0409  082E               	movf	Load_Main@error,w
 10559  040A  3A03               	xorlw	3
 10560  040B  1903               	skipnz
 10561  040C  2C24               	goto	l7828
 10562                           
 10563                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10564  040D  0022               	movlb	2	; select bank2
 10565  040E  1143               	bcf	_Load^(0+256),2
 10566                           
 10567                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10568  040F  01C4               	clrf	(_Load^(0+256)+1)
 10569  0410  01C5               	clrf	((_Load+1)^(0+256)+1)
 10570                           
 10571                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10572  0411  1243               	bcf	_Load^(0+256),4
 10573                           
 10574                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10575  0412  319E  26E4  3182   	fcall	_setLoad_AH_AL_Restore
 10576                           
 10577                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10578  0415  0022               	movlb	2	; select bank2
 10579  0416  01EC               	clrf	(_Load^(0+256)+41)
 10580                           
 10581                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10582  0417  01ED               	clrf	(_Load^(0+256)+42)
 10583                           
 10584                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10585  0418  01EF               	clrf	(_Load^(0+256)+44)
 10586                           
 10587                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10588  0419  01C8               	clrf	(_Load^(0+256)+5)
 10589  041A  01C9               	clrf	((_Load+1)^(0+256)+5)
 10590                           
 10591                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10592  041B  01CA               	clrf	(_Load^(0+256)+7)
 10593  041C  01CB               	clrf	((_Load+1)^(0+256)+7)
 10594                           
 10595                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10596  041D  01E2               	clrf	(_Load^(0+256)+31)
 10597  041E  01E3               	clrf	((_Load+1)^(0+256)+31)
 10598                           
 10599                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10600  041F  01E8               	clrf	(_Load^(0+256)+37)
 10601  0420  01E9               	clrf	((_Load+1)^(0+256)+37)
 10602                           
 10603                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10604  0421  01EE               	clrf	(_Load^(0+256)+43)
 10605                           
 10606                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10607  0422  11C3               	bcf	_Load^(0+256),3
 10608                           
 10609                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10610  0423  17C3               	bsf	_Load^(0+256),7
 10611  0424                     l7828:	
 10612                           
 10613                           ;OverLoad_B1.c: 164: }
 10614                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10615  0424  0022               	movlb	2	; select bank2
 10616  0425  1EC3               	btfss	_Load^(0+256),5
 10617  0426  0008               	return
 10618                           
 10619                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10620  0427  3001               	movlw	1
 10621  0428  07C6               	addwf	(_Load^(0+256)+3),f
 10622  0429  3000               	movlw	0
 10623  042A  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10624                           
 10625                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10626  042B  3003               	movlw	3
 10627  042C  0247               	subwf	((_Load+1)^(0+256)+3),w
 10628  042D  30E8               	movlw	232
 10629  042E  1903               	skipnz
 10630  042F  0246               	subwf	(_Load^(0+256)+3),w
 10631  0430  1C03               	skipc
 10632  0431  0008               	return
 10633                           
 10634                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10635  0432  01C6               	clrf	(_Load^(0+256)+3)
 10636  0433  01C7               	clrf	((_Load+1)^(0+256)+3)
 10637                           
 10638                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10639  0434  12C3               	bcf	_Load^(0+256),5
 10640                           
 10641                           ;OverLoad_B1.c: 176: }
 10642                           ;OverLoad_B1.c: 177: }
 10643                           ;OverLoad_B1.c: 178: }
 10644                           ;OverLoad_B1.c: 179: } else {
 10645  0435  0008               	return
 10646  0436                     l1544:	
 10647                           
 10648                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10649  0436  0021               	movlb	1	; select bank1
 10650  0437  1C20               	btfss	_myMain^(0+128),0
 10651  0438  0008               	return
 10652                           
 10653                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10654  0439  0022               	movlb	2	; select bank2
 10655  043A  1443               	bsf	_Load^(0+256),0
 10656  043B  0008               	return
 10657  043C                     __end_of_Load_Main:	
 10658                           
 10659                           	psect	text54
 10660  1D0F                     __ptext54:	
 10661 ;; *************** function _getMain_LoadOK *****************
 10662 ;; Defined at:
 10663 ;;		line 447 in file "../src/Main_B1.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  ok              1    2[BANK0 ] unsigned char 
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      unsigned char 
 10670 ;; Registers used:
 10671 ;;		wreg, status,2, pclath, cstack
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;Total ram usage:        2 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    6
 10684 ;; This function calls:
 10685 ;;		_getDimmer_LoadOK
 10686 ;; This function is called by:
 10687 ;;		_Load_Main
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function _getMain_LoadOK
 10693  1D0F                     _getMain_LoadOK:	
 10694                           
 10695                           ;Main_B1.c: 448: char ok = 0;
 10696                           
 10697                           ;incstack = 0
 10698                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10699  1D0F  0020               	movlb	0	; select bank0
 10700  1D10  01A2               	clrf	getMain_LoadOK@ok
 10701                           
 10702                           ;Main_B1.c: 454: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10703  1D11  319C  242B         	fcall	_getDimmer_LoadOK
 10704  1D13  3A01               	xorlw	1
 10705  1D14  3000               	movlw	0
 10706  1D15  1903               	skipnz
 10707  1D16  3001               	movlw	1
 10708  1D17  0020               	movlb	0	; select bank0
 10709  1D18  00A1               	movwf	??_getMain_LoadOK
 10710  1D19  0821               	movf	??_getMain_LoadOK,w
 10711  1D1A  00A2               	movwf	getMain_LoadOK@ok
 10712                           
 10713                           ;Main_B1.c: 456: return ok;
 10714  1D1B  0822               	movf	getMain_LoadOK@ok,w
 10715  1D1C  0008               	return
 10716  1D1D                     __end_of_getMain_LoadOK:	
 10717                           
 10718                           	psect	text55
 10719  1C2B                     __ptext55:	
 10720 ;; *************** function _getDimmer_LoadOK *****************
 10721 ;; Defined at:
 10722 ;;		line 599 in file "../src/Dimmer_B1.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;		None
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  status          1    0[BANK0 ] unsigned char 
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      unsigned char 
 10729 ;; Registers used:
 10730 ;;		wreg, status,2
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:        1 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    5
 10743 ;; This function calls:
 10744 ;;		Nothing
 10745 ;; This function is called by:
 10746 ;;		_getMain_LoadOK
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           
 10751                           ;psect for function _getDimmer_LoadOK
 10752  1C2B                     _getDimmer_LoadOK:	
 10753                           
 10754                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10755                           
 10756                           ;incstack = 0
 10757                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10758  1C2B  3000               	movlw	0
 10759  1C2C  0022               	movlb	2	; select bank2
 10760  1C2D  18BE               	btfsc	_Dimmer^(0+256),1
 10761  1C2E  3001               	movlw	1
 10762  1C2F  0020               	movlb	0	; select bank0
 10763  1C30  00A0               	movwf	getDimmer_LoadOK@status
 10764                           
 10765                           ;Dimmer_B1.c: 601: return status;
 10766  1C31  0820               	movf	getDimmer_LoadOK@status,w
 10767  1C32  0008               	return
 10768  1C33                     __end_of_getDimmer_LoadOK:	
 10769                           
 10770                           	psect	text56
 10771  1D5B                     __ptext56:	
 10772 ;; *************** function _getMain_Lights_Count *****************
 10773 ;; Defined at:
 10774 ;;		line 417 in file "../src/Main_B1.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  status1         1    3[BANK0 ] unsigned char 
 10779 ;;  status3         1    2[BANK0 ] unsigned char 
 10780 ;;  status2         1    1[BANK0 ] unsigned char 
 10781 ;;  count           1    0[BANK0 ] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      unsigned char 
 10784 ;; Registers used:
 10785 ;;		wreg, status,2, status,0
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;Total ram usage:        4 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    5
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_Load_Main
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           
 10806                           ;psect for function _getMain_Lights_Count
 10807  1D5B                     _getMain_Lights_Count:	
 10808                           
 10809                           ;Main_B1.c: 418: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10810                           
 10811                           ;incstack = 0
 10812                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10813  1D5B  0020               	movlb	0	; select bank0
 10814  1D5C  01A3               	clrf	getMain_Lights_Count@status1
 10815  1D5D  01A1               	clrf	getMain_Lights_Count@status2
 10816  1D5E  01A2               	clrf	getMain_Lights_Count@status3
 10817  1D5F  01A0               	clrf	getMain_Lights_Count@count
 10818                           
 10819                           ;Main_B1.c: 422: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10820  1D60  3000               	movlw	0
 10821  1D61  0023               	movlb	3	; select bank3
 10822  1D62  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10823  1D63  3001               	movlw	1
 10824  1D64  0020               	movlb	0	; select bank0
 10825  1D65  00A3               	movwf	getMain_Lights_Count@status1
 10826                           
 10827                           ;Main_B1.c: 443: return count = (status1 + status2 + status3);
 10828  1D66  0823               	movf	getMain_Lights_Count@status1,w
 10829  1D67  0721               	addwf	getMain_Lights_Count@status2,w
 10830  1D68  0722               	addwf	getMain_Lights_Count@status3,w
 10831  1D69  00A0               	movwf	getMain_Lights_Count@count
 10832  1D6A  0008               	return
 10833  1D6B                     __end_of_getMain_Lights_Count:	
 10834                           
 10835                           	psect	text57
 10836  1C58                     __ptext57:	
 10837 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10838 ;; Defined at:
 10839 ;;		line 490 in file "../src/Dimmer_B1.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  1    wreg      unsigned char 
 10846 ;; Registers used:
 10847 ;;		wreg, status,2
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        1 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    5
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_setDimmerLights_SwOn
 10864 ;;		_setDimmerLights_AdjControl
 10865 ;;		_Load_Main
 10866 ;; This function uses a non-reentrant model
 10867 ;;
 10868                           
 10869                           
 10870                           ;psect for function _getAll_DimmerLights_AdjGO
 10871  1C58                     _getAll_DimmerLights_AdjGO:	
 10872                           
 10873                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10874                           
 10875                           ;incstack = 0
 10876                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10877  1C58  0020               	movlb	0	; select bank0
 10878  1C59  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10879                           
 10880                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10881  1C5A  3000               	movlw	0
 10882  1C5B  0023               	movlb	3	; select bank3
 10883  1C5C  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10884  1C5D  3001               	movlw	1
 10885  1C5E  0020               	movlb	0	; select bank0
 10886  1C5F  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10887                           
 10888                           ;Dimmer_B1.c: 501: return adjgo;
 10889  1C60  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10890  1C61  0008               	return
 10891  1C62                     __end_of_getAll_DimmerLights_AdjGO:	
 10892                           
 10893                           	psect	text58
 10894  1C05                     __ptext58:	
 10895 ;; *************** function _Load_Initialization *****************
 10896 ;; Defined at:
 10897 ;;		line 9 in file "../src/OverLoad_B1.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;		None
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;		None               void
 10904 ;; Registers used:
 10905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;Total ram usage:        0 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    6
 10918 ;; This function calls:
 10919 ;;		_setLoad_AH_AL_Restore
 10920 ;; This function is called by:
 10921 ;;		_main
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           
 10926                           ;psect for function _Load_Initialization
 10927  1C05                     _Load_Initialization:	
 10928                           
 10929                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10930                           
 10931                           ;incstack = 0
 10932                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10933  1C05  0022               	movlb	2	; select bank2
 10934  1C06  17C3               	bsf	_Load^(0+256),7
 10935                           
 10936                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10937  1C07  319E  26E4         	fcall	_setLoad_AH_AL_Restore
 10938  1C09  0008               	return
 10939  1C0A                     __end_of_Load_Initialization:	
 10940                           
 10941                           	psect	text59
 10942  1EE4                     __ptext59:	
 10943 ;; *************** function _setLoad_AH_AL_Restore *****************
 10944 ;; Defined at:
 10945 ;;		line 207 in file "../src/OverLoad_B1.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  i               1    1[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;		None               void
 10952 ;; Registers used:
 10953 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        2 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    5
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		_Load_Initialization
 10970 ;;		_Load_Main
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           
 10975                           ;psect for function _setLoad_AH_AL_Restore
 10976  1EE4                     _setLoad_AH_AL_Restore:	
 10977                           
 10978                           ;OverLoad_B1.c: 208: char i;
 10979                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10983  1EE4  0020               	movlb	0	; select bank0
 10984  1EE5  01A1               	clrf	setLoad_AH_AL_Restore@i
 10985  1EE6                     L7:	
 10986  1EE6  3005               	movlw	5
 10987  1EE7  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10988  1EE8  1803               	btfsc	3,0
 10989  1EE9  0008               	return
 10990                           
 10991                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 10992  1EEA  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10993  1EEB  3E4E               	addlw	(_Load+11)& (0+255)
 10994  1EEC  0086               	movwf	6
 10995  1EED  3001               	movlw	1	; select bank2/3
 10996  1EEE  0087               	movwf	7
 10997  1EEF  3000               	movlw	0
 10998  1EF0  3FC0               	movwi [0]fsr1
 10999  1EF1  3FC1               	movwi [1]fsr1
 11000                           
 11001                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 11002  1EF2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11003  1EF3  3E58               	addlw	(_Load+21)& (0+255)
 11004  1EF4  0086               	movwf	6
 11005  1EF5  3001               	movlw	1	; select bank2/3
 11006  1EF6  0087               	movwf	7
 11007  1EF7  30FF               	movlw	255
 11008  1EF8  3FC0               	movwi [0]fsr1
 11009  1EF9  30FF               	movlw	255
 11010  1EFA  3FC1               	movwi [1]fsr1
 11011  1EFB  3001               	movlw	1
 11012  1EFC  00A0               	movwf	??_setLoad_AH_AL_Restore
 11013  1EFD  0820               	movf	??_setLoad_AH_AL_Restore,w
 11014  1EFE  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11015  1EFF  2EE6               	goto	L7
 11016  1F00                     __end_of_setLoad_AH_AL_Restore:	
 11017                           
 11018                           	psect	text60
 11019  1BF8                     __ptext60:	
 11020 ;; *************** function _LED_Main *****************
 11021 ;; Defined at:
 11022 ;;		line 47 in file "../src/LED_B1.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;		None
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;		None
 11027 ;; Return value:  Size  Location     Type
 11028 ;;		None               void
 11029 ;; Registers used:
 11030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:        0 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    7
 11043 ;; This function calls:
 11044 ;;		_setLED_Main
 11045 ;; This function is called by:
 11046 ;;		_main
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           
 11051                           ;psect for function _LED_Main
 11052  1BF8                     _LED_Main:	
 11053                           
 11054                           ;LED_B1.c: 62: setLED_Main(99);
 11055                           
 11056                           ;incstack = 0
 11057                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11058  1BF8  3063               	movlw	99
 11059  1BF9  3192  226E         	fcall	_setLED_Main
 11060  1BFB  0008               	return
 11061  1BFC                     __end_of_LED_Main:	
 11062                           
 11063                           	psect	text61
 11064  126E                     __ptext61:	
 11065 ;; *************** function _setLED_Main *****************
 11066 ;; Defined at:
 11067 ;;		line 221 in file "../src/LED_B1.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  led             1    wreg     unsigned char 
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  led             1    4[BANK0 ] unsigned char 
 11072 ;; Return value:  Size  Location     Type
 11073 ;;		None               void
 11074 ;; Registers used:
 11075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11076 ;; Tracked objects:
 11077 ;;		On entry : 0/0
 11078 ;;		On exit  : 0/0
 11079 ;;		Unchanged: 0/0
 11080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;Total ram usage:        3 bytes
 11086 ;; Hardware stack levels used:    1
 11087 ;; Hardware stack levels required when called:    6
 11088 ;; This function calls:
 11089 ;;		_LedPointSelect
 11090 ;; This function is called by:
 11091 ;;		_LED_Main
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           
 11096                           ;psect for function _setLED_Main
 11097  126E                     _setLED_Main:	
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11101                           ;setLED_Main@led stored from wreg
 11102  126E  0020               	movlb	0	; select bank0
 11103  126F  00A4               	movwf	setLED_Main@led
 11104                           
 11105                           ;LED_B1.c: 222: LedPointSelect(led);
 11106  1270  0824               	movf	setLED_Main@led,w
 11107  1271  319C  2483  3192   	fcall	_LedPointSelect
 11108                           
 11109                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11110  1274  087A               	movf	_LED,w
 11111  1275  0086               	movwf	6
 11112  1276  3001               	movlw	1	; select bank2/3
 11113  1277  0087               	movwf	7
 11114  1278  1C81               	btfss	1,1
 11115  1279  0008               	return
 11116                           
 11117                           ;LED_B1.c: 224: LED->Time++;
 11118  127A  0A7A               	incf	_LED,w
 11119  127B  0086               	movwf	6
 11120  127C  3001               	movlw	1	; select bank2/3
 11121  127D  0087               	movwf	7
 11122  127E  3001               	movlw	1
 11123  127F  0781               	addwf	1,f
 11124  1280  3141               	addfsr 1,1
 11125  1281  1803               	skipnc
 11126  1282  0A81               	incf	1,f
 11127                           
 11128                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11129  1283  0A7A               	incf	_LED,w
 11130  1284  0086               	movwf	6
 11131  1285  3001               	movlw	1	; select bank2/3
 11132  1286  0087               	movwf	7
 11133  1287  3F40               	moviw [0]fsr1
 11134  1288  0020               	movlb	0	; select bank0
 11135  1289  00A2               	movwf	??_setLED_Main
 11136  128A  3F41               	moviw [1]fsr1
 11137  128B  00A3               	movwf	??_setLED_Main+1
 11138  128C  3000               	movlw	0
 11139  128D  0223               	subwf	??_setLED_Main+1,w
 11140  128E  3032               	movlw	50
 11141  128F  1903               	skipnz
 11142  1290  0222               	subwf	??_setLED_Main,w
 11143  1291  1C03               	skipc
 11144  1292  0008               	return
 11145                           
 11146                           ;LED_B1.c: 226: LED->Time = 0;
 11147  1293  0A7A               	incf	_LED,w
 11148  1294  0086               	movwf	6
 11149  1295  3001               	movlw	1	; select bank2/3
 11150  1296  0087               	movwf	7
 11151  1297  3000               	movlw	0
 11152  1298  3FC0               	movwi [0]fsr1
 11153  1299  3FC1               	movwi [1]fsr1
 11154                           
 11155                           ;LED_B1.c: 243: if (led == 99) {
 11156  129A  0824               	movf	setLED_Main@led,w
 11157  129B  3A63               	xorlw	99
 11158  129C  1D03               	skipz
 11159  129D  0008               	return
 11160                           
 11161                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11162  129E  3020               	movlw	32
 11163  129F  068D               	xorwf	13,f
 11164  12A0  0008               	return
 11165  12A1                     __end_of_setLED_Main:	
 11166                           
 11167                           	psect	text62
 11168  1BF4                     __ptext62:	
 11169 ;; *************** function _LED_Initialization *****************
 11170 ;; Defined at:
 11171 ;;		line 31 in file "../src/LED_B1.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;		None
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;		None
 11176 ;; Return value:  Size  Location     Type
 11177 ;;		None               void
 11178 ;; Registers used:
 11179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;Total ram usage:        0 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    8
 11192 ;; This function calls:
 11193 ;;		_setLED_Initialization
 11194 ;; This function is called by:
 11195 ;;		_main
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           
 11200                           ;psect for function _LED_Initialization
 11201  1BF4                     _LED_Initialization:	
 11202                           
 11203                           ;LED_B1.c: 42: setLED_Initialization(99);
 11204                           
 11205                           ;incstack = 0
 11206                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11207  1BF4  3063               	movlw	99
 11208  1BF5  319D  257B         	fcall	_setLED_Initialization
 11209  1BF7  0008               	return
 11210  1BF8                     __end_of_LED_Initialization:	
 11211                           
 11212                           	psect	text63
 11213  1D7B                     __ptext63:	
 11214 ;; *************** function _setLED_Initialization *****************
 11215 ;; Defined at:
 11216 ;;		line 69 in file "../src/LED_B1.c"
 11217 ;; Parameters:    Size  Location     Type
 11218 ;;  led             1    wreg     unsigned char 
 11219 ;; Auto vars:     Size  Location     Type
 11220 ;;  led             1    4[BANK0 ] unsigned char 
 11221 ;; Return value:  Size  Location     Type
 11222 ;;		None               void
 11223 ;; Registers used:
 11224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11225 ;; Tracked objects:
 11226 ;;		On entry : 0/0
 11227 ;;		On exit  : 0/0
 11228 ;;		Unchanged: 0/0
 11229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;Total ram usage:        1 bytes
 11235 ;; Hardware stack levels used:    1
 11236 ;; Hardware stack levels required when called:    7
 11237 ;; This function calls:
 11238 ;;		_LedPointSelect
 11239 ;;		_setLED
 11240 ;; This function is called by:
 11241 ;;		_LED_Initialization
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           
 11246                           ;psect for function _setLED_Initialization
 11247  1D7B                     _setLED_Initialization:	
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11251                           ;setLED_Initialization@led stored from wreg
 11252  1D7B  0020               	movlb	0	; select bank0
 11253  1D7C  00A4               	movwf	setLED_Initialization@led
 11254                           
 11255                           ;LED_B1.c: 70: LedPointSelect(led);
 11256  1D7D  0824               	movf	setLED_Initialization@led,w
 11257  1D7E  319C  2483  319D   	fcall	_LedPointSelect
 11258                           
 11259                           ;LED_B1.c: 71: LED->Enable = 1;
 11260  1D81  087A               	movf	_LED,w
 11261  1D82  0086               	movwf	6
 11262  1D83  3001               	movlw	1	; select bank2/3
 11263  1D84  0087               	movwf	7
 11264  1D85  1401               	bsf	1,0
 11265                           
 11266                           ;LED_B1.c: 72: setLED(led, 0);
 11267  1D86  0020               	movlb	0	; select bank0
 11268  1D87  01A2               	clrf	setLED@command
 11269  1D88  0824               	movf	setLED_Initialization@led,w
 11270  1D89  3192  22D6         	fcall	_setLED
 11271  1D8B  0008               	return
 11272  1D8C                     __end_of_setLED_Initialization:	
 11273                           
 11274                           	psect	text64
 11275  130C                     __ptext64:	
 11276 ;; *************** function _Flash_Memory_Main *****************
 11277 ;; Defined at:
 11278 ;;		line 926 in file "../src/MCU_B1.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;		None
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        1 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    8
 11299 ;; This function calls:
 11300 ;;		_Flash_Memory_Modify
 11301 ;;		_getMain_LightsStatus
 11302 ;; This function is called by:
 11303 ;;		_main
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _Flash_Memory_Main
 11309  130C                     _Flash_Memory_Main:	
 11310                           
 11311                           ;MCU_B1.c: 927: if (Memory.Modify == 1) {
 11312                           
 11313                           ;incstack = 0
 11314                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11315  130C  0023               	movlb	3	; select bank3
 11316  130D  1C44               	btfss	(_Memory^(0+384)+36),0
 11317  130E  0008               	return
 11318                           
 11319                           ;MCU_B1.c: 928: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11320  130F  3191  217F  3193   	fcall	_getMain_LightsStatus
 11321  1312  3A00               	xorlw	0
 11322  1313  3000               	movlw	0
 11323  1314  1903               	skipnz
 11324  1315  3001               	movlw	1
 11325  1316  0020               	movlb	0	; select bank0
 11326  1317  00A9               	movwf	??_Flash_Memory_Main
 11327  1318  0DA9               	rlf	??_Flash_Memory_Main,f
 11328  1319  0023               	movlb	3	; select bank3
 11329  131A  0844               	movf	(_Memory^(0+384)+36),w
 11330  131B  0020               	movlb	0	; select bank0
 11331  131C  0629               	xorwf	??_Flash_Memory_Main,w
 11332  131D  39FD               	andlw	-3
 11333  131E  0629               	xorwf	??_Flash_Memory_Main,w
 11334  131F  0023               	movlb	3	; select bank3
 11335  1320  00C4               	movwf	(_Memory^(0+384)+36)
 11336                           
 11337                           ;MCU_B1.c: 929: if (Memory.GO == 1) {
 11338  1321  1CC4               	btfss	(_Memory^(0+384)+36),1
 11339  1322  2B3C               	goto	l1183
 11340                           
 11341                           ;MCU_B1.c: 930: Memory.Runtime = 1;
 11342  1323  15C4               	bsf	(_Memory^(0+384)+36),3
 11343                           
 11344                           ;MCU_B1.c: 931: Memory.Time++;
 11345  1324  3001               	movlw	1
 11346  1325  07C2               	addwf	(_Memory^(0+384)+34),f
 11347  1326  3000               	movlw	0
 11348  1327  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11349                           
 11350                           ;MCU_B1.c: 932: if (Memory.Time == 25) {
 11351  1328  3022               	movlw	34
 11352  1329  3EA0               	addlw	_Memory& (0+255)
 11353  132A  0086               	movwf	6
 11354  132B  3001               	movlw	1	; select bank3/4
 11355  132C  0087               	movwf	7
 11356  132D  3F40               	moviw [0]fsr1
 11357  132E  3A19               	xorlw	25
 11358  132F  1D03               	skipz
 11359  1330  2B33               	goto	u7365
 11360  1331  3F41               	moviw [1]fsr1
 11361  1332  3A00               	xorlw	0
 11362  1333                     u7365:	
 11363  1333  1D03               	skipz
 11364  1334  0008               	return
 11365                           
 11366                           ;MCU_B1.c: 933: Memory.Time = 0;
 11367  1335  01C2               	clrf	(_Memory^(0+384)+34)
 11368  1336  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11369                           
 11370                           ;MCU_B1.c: 934: Memory.Modify = 0;
 11371  1337  1044               	bcf	(_Memory^(0+384)+36),0
 11372                           
 11373                           ;MCU_B1.c: 935: Memory.GO = 0;
 11374  1338  10C4               	bcf	(_Memory^(0+384)+36),1
 11375                           
 11376                           ;MCU_B1.c: 936: Flash_Memory_Modify();
 11377  1339  3188  2000         	fcall	_Flash_Memory_Modify
 11378                           
 11379                           ;MCU_B1.c: 937: }
 11380                           ;MCU_B1.c: 938: } else {
 11381  133B  0008               	return
 11382  133C                     l1183:	
 11383                           
 11384                           ;MCU_B1.c: 939: if (Memory.Runtime == 1) {
 11385  133C  1DC4               	btfss	(_Memory^(0+384)+36),3
 11386  133D  0008               	return
 11387                           
 11388                           ;MCU_B1.c: 940: Memory.Runtime = 0;
 11389  133E  11C4               	bcf	(_Memory^(0+384)+36),3
 11390                           
 11391                           ;MCU_B1.c: 941: Memory.Time = 0;
 11392  133F  01C2               	clrf	(_Memory^(0+384)+34)
 11393  1340  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11394  1341  0008               	return
 11395  1342                     __end_of_Flash_Memory_Main:	
 11396                           
 11397                           	psect	text65
 11398  0800                     __ptext65:	
 11399 ;; *************** function _Flash_Memory_Modify *****************
 11400 ;; Defined at:
 11401 ;;		line 999 in file "../src/MCU_B1.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;		None
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;  i               1    5[BANK0 ] unsigned char 
 11406 ;; Return value:  Size  Location     Type
 11407 ;;		None               void
 11408 ;; Registers used:
 11409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;Total ram usage:        2 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:    7
 11422 ;; This function calls:
 11423 ;;		_Flash_Memory_Erasing
 11424 ;;		_Flash_Memory_Read
 11425 ;;		_Flash_Memory_Write
 11426 ;;		_setMemory_Data
 11427 ;; This function is called by:
 11428 ;;		_Flash_Memory_Main
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           
 11433                           ;psect for function _Flash_Memory_Modify
 11434  0800                     _Flash_Memory_Modify:	
 11435                           
 11436                           ;MCU_B1.c: 1000: char i = 0;
 11437                           
 11438                           ;incstack = 0
 11439                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11440  0800  0020               	movlb	0	; select bank0
 11441  0801  01A5               	clrf	Flash_Memory_Modify@i
 11442                           
 11443                           ;MCU_B1.c: 1001: for (i = 0; i < 32; i++) {
 11444  0802  01A5               	clrf	Flash_Memory_Modify@i
 11445  0803  3020               	movlw	32
 11446  0804  0225               	subwf	Flash_Memory_Modify@i,w
 11447  0805  1803               	btfsc	3,0
 11448  0806  281C               	goto	l7042
 11449  0807                     l7036:	
 11450                           
 11451                           ;MCU_B1.c: 1002: Memory.Data[i] = Flash_Memory_Read(i);
 11452  0807  0825               	movf	Flash_Memory_Modify@i,w
 11453  0808  319E  26CA  3188   	fcall	_Flash_Memory_Read
 11454  080B  0020               	movlb	0	; select bank0
 11455  080C  00A4               	movwf	??_Flash_Memory_Modify
 11456  080D  0825               	movf	Flash_Memory_Modify@i,w
 11457  080E  3EA0               	addlw	_Memory& (0+255)
 11458  080F  0086               	movwf	6
 11459  0810  3001               	movlw	1	; select bank3/4
 11460  0811  0087               	movwf	7
 11461  0812  0824               	movf	??_Flash_Memory_Modify,w
 11462  0813  0081               	movwf	1
 11463  0814  3001               	movlw	1
 11464  0815  00A4               	movwf	??_Flash_Memory_Modify
 11465  0816  0824               	movf	??_Flash_Memory_Modify,w
 11466  0817  07A5               	addwf	Flash_Memory_Modify@i,f
 11467  0818  3020               	movlw	32
 11468  0819  0225               	subwf	Flash_Memory_Modify@i,w
 11469  081A  1C03               	skipc
 11470  081B  2807               	goto	l7036
 11471  081C                     l7042:	
 11472                           
 11473                           ;MCU_B1.c: 1003: }
 11474                           ;MCU_B1.c: 1004: setMemory_Data(0, product->Data[12]);
 11475  081C  086E               	movf	_product,w
 11476  081D  0086               	movwf	6
 11477  081E  3002               	movlw	2	; select bank4/5
 11478  081F  0087               	movwf	7
 11479  0820  3002               	movlw	2	; select bank4/5
 11480  0821  3F4C               	moviw [12]fsr1
 11481  0822  00A0               	movwf	setMemory_Data@data
 11482  0823  3000               	movlw	0
 11483  0824  319C  24D2  3188   	fcall	_setMemory_Data
 11484                           
 11485                           ;MCU_B1.c: 1005: setMemory_Data(1, product->Data[13]);
 11486  0827  0020               	movlb	0	; select bank0
 11487  0828  086E               	movf	_product,w
 11488  0829  0086               	movwf	6
 11489  082A  3002               	movlw	2	; select bank4/5
 11490  082B  0087               	movwf	7
 11491  082C  3002               	movlw	2	; select bank4/5
 11492  082D  3F4D               	moviw [13]fsr1
 11493  082E  00A0               	movwf	setMemory_Data@data
 11494  082F  3001               	movlw	1
 11495  0830  319C  24D2  3188   	fcall	_setMemory_Data
 11496                           
 11497                           ;MCU_B1.c: 1006: setMemory_Data(2, product->Data[14]);
 11498  0833  0020               	movlb	0	; select bank0
 11499  0834  086E               	movf	_product,w
 11500  0835  0086               	movwf	6
 11501  0836  3002               	movlw	2	; select bank4/5
 11502  0837  0087               	movwf	7
 11503  0838  3002               	movlw	2	; select bank4/5
 11504  0839  3F4E               	moviw [14]fsr1
 11505  083A  00A0               	movwf	setMemory_Data@data
 11506  083B  3002               	movlw	2
 11507  083C  319C  24D2  3188   	fcall	_setMemory_Data
 11508                           
 11509                           ;MCU_B1.c: 1012: if (Memory.LoopSave == 1) {
 11510  083F  0023               	movlb	3	; select bank3
 11511  0840  1D44               	btfss	(_Memory^(0+384)+36),2
 11512  0841  2846               	goto	l1206
 11513                           
 11514                           ;MCU_B1.c: 1013: Memory.LoopSave = 0;
 11515  0842  1144               	bcf	(_Memory^(0+384)+36),2
 11516                           
 11517                           ;MCU_B1.c: 1014: myMain.FirstOpen = 0;
 11518  0843  0021               	movlb	1	; select bank1
 11519  0844  11A0               	bcf	_myMain^(0+128),3
 11520                           
 11521                           ;MCU_B1.c: 1015: myMain.First = 0;
 11522  0845  12A0               	bcf	_myMain^(0+128),5
 11523  0846                     l1206:	
 11524                           
 11525                           ;MCU_B1.c: 1017: }
 11526                           ;MCU_B1.c: 1018: GIE = 0;
 11527  0846  138B               	bcf	11,7	;volatile
 11528                           
 11529                           ;MCU_B1.c: 1019: Flash_Memory_Erasing();
 11530  0847  319C  24DE  3188   	fcall	_Flash_Memory_Erasing
 11531                           
 11532                           ;MCU_B1.c: 1020: Flash_Memory_Write();
 11533  084A  3191  21AA         	fcall	_Flash_Memory_Write
 11534                           
 11535                           ;MCU_B1.c: 1021: GIE = 1;
 11536  084C  178B               	bsf	11,7	;volatile
 11537  084D  0008               	return
 11538  084E                     __end_of_Flash_Memory_Modify:	
 11539                           
 11540                           	psect	text66
 11541  1CDE                     __ptext66:	
 11542 ;; *************** function _Flash_Memory_Erasing *****************
 11543 ;; Defined at:
 11544 ;;		line 988 in file "../src/MCU_B1.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;		None
 11549 ;; Return value:  Size  Location     Type
 11550 ;;		None               void
 11551 ;; Registers used:
 11552 ;;		wreg, status,2, status,0, pclath, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    6
 11565 ;; This function calls:
 11566 ;;		_Flash_Memory_Unlock
 11567 ;; This function is called by:
 11568 ;;		_Flash_Memory_Modify
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           
 11573                           ;psect for function _Flash_Memory_Erasing
 11574  1CDE                     _Flash_Memory_Erasing:	
 11575                           
 11576                           ;MCU_B1.c: 989: CFGS = 0;
 11577                           
 11578                           ;incstack = 0
 11579                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11580  1CDE  0023               	movlb	3	; select bank3
 11581  1CDF  1315               	bcf	21,6	;volatile
 11582                           
 11583                           ;MCU_B1.c: 990: PMADRH = 0x30;
 11584  1CE0  3030               	movlw	48
 11585  1CE1  0092               	movwf	18	;volatile
 11586                           
 11587                           ;MCU_B1.c: 991: PMADRL = 0x00;
 11588  1CE2  0191               	clrf	17	;volatile
 11589                           
 11590                           ;MCU_B1.c: 992: FREE = 1;
 11591  1CE3  1615               	bsf	21,4	;volatile
 11592                           
 11593                           ;MCU_B1.c: 993: WREN = 1;
 11594  1CE4  1515               	bsf	21,2	;volatile
 11595                           
 11596                           ;MCU_B1.c: 994: Flash_Memory_Unlock();
 11597  1CE5  319C  243C         	fcall	_Flash_Memory_Unlock
 11598                           
 11599                           ;MCU_B1.c: 995: WREN = 0;
 11600  1CE7  0023               	movlb	3	; select bank3
 11601  1CE8  1115               	bcf	21,2	;volatile
 11602  1CE9  0008               	return
 11603  1CEA                     __end_of_Flash_Memory_Erasing:	
 11604                           
 11605                           	psect	text67
 11606  0611                     __ptext67:	
 11607 ;; *************** function _Flash_Memory_Initialization *****************
 11608 ;; Defined at:
 11609 ;;		line 885 in file "../src/MCU_B1.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;		None
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  i               1   67[BANK0 ] unsigned char 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;		None               void
 11616 ;; Registers used:
 11617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;Total ram usage:        2 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    8
 11630 ;; This function calls:
 11631 ;;		_Flash_Memory_Read
 11632 ;;		_Flash_Memory_Write
 11633 ;;		_setMemory_Data
 11634 ;;		_setPercentValue
 11635 ;; This function is called by:
 11636 ;;		_main
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           
 11641                           ;psect for function _Flash_Memory_Initialization
 11642  0611                     _Flash_Memory_Initialization:	
 11643                           
 11644                           ;MCU_B1.c: 886: char i = 0;
 11645                           
 11646                           ;incstack = 0
 11647                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11648  0611  0020               	movlb	0	; select bank0
 11649  0612  01E3               	clrf	Flash_Memory_Initialization@i
 11650                           
 11651                           ;MCU_B1.c: 887: if (Flash_Memory_Read(31) == 0xaa) {
 11652  0613  301F               	movlw	31
 11653  0614  319E  26CA  3186   	fcall	_Flash_Memory_Read
 11654  0617  3AAA               	xorlw	170
 11655  0618  1D03               	skipz
 11656  0619  2E83               	goto	l7514
 11657                           
 11658                           ;MCU_B1.c: 888: product->Data[12] = Flash_Memory_Read(0);
 11659  061A  3000               	movlw	0
 11660  061B  319E  26CA  3186   	fcall	_Flash_Memory_Read
 11661  061E  0020               	movlb	0	; select bank0
 11662  061F  00E2               	movwf	??_Flash_Memory_Initialization
 11663  0620  086E               	movf	_product,w
 11664  0621  3E0C               	addlw	12
 11665  0622  0086               	movwf	6
 11666  0623  3002               	movlw	2	; select bank4/5
 11667  0624  0087               	movwf	7
 11668  0625  0862               	movf	??_Flash_Memory_Initialization,w
 11669  0626  0081               	movwf	1
 11670                           
 11671                           ;MCU_B1.c: 889: product->Data[13] = Flash_Memory_Read(1);
 11672  0627  3001               	movlw	1
 11673  0628  319E  26CA  3186   	fcall	_Flash_Memory_Read
 11674  062B  0020               	movlb	0	; select bank0
 11675  062C  00E2               	movwf	??_Flash_Memory_Initialization
 11676  062D  086E               	movf	_product,w
 11677  062E  3E0D               	addlw	13
 11678  062F  0086               	movwf	6
 11679  0630  3002               	movlw	2	; select bank4/5
 11680  0631  0087               	movwf	7
 11681  0632  0862               	movf	??_Flash_Memory_Initialization,w
 11682  0633  0081               	movwf	1
 11683                           
 11684                           ;MCU_B1.c: 890: product->Data[14] = Flash_Memory_Read(2);
 11685  0634  3002               	movlw	2
 11686  0635  319E  26CA  3186   	fcall	_Flash_Memory_Read
 11687  0638  0020               	movlb	0	; select bank0
 11688  0639  00E2               	movwf	??_Flash_Memory_Initialization
 11689  063A  086E               	movf	_product,w
 11690  063B  3E0E               	addlw	14
 11691  063C  0086               	movwf	6
 11692  063D  3002               	movlw	2	; select bank4/5
 11693  063E  0087               	movwf	7
 11694  063F  0862               	movf	??_Flash_Memory_Initialization,w
 11695  0640  0081               	movwf	1
 11696                           
 11697                           ;MCU_B1.c: 896: i = setPercentValue(((char)(90*0.8)));
 11698  0641  3048               	movlw	72
 11699  0642  318A  222D  3186   	fcall	_setPercentValue
 11700  0645  0020               	movlb	0	; select bank0
 11701  0646  00E2               	movwf	??_Flash_Memory_Initialization
 11702  0647  0862               	movf	??_Flash_Memory_Initialization,w
 11703  0648  00E3               	movwf	Flash_Memory_Initialization@i
 11704                           
 11705                           ;MCU_B1.c: 897: product->Data[21] = i;
 11706  0649  0863               	movf	Flash_Memory_Initialization@i,w
 11707  064A  00E2               	movwf	??_Flash_Memory_Initialization
 11708  064B  086E               	movf	_product,w
 11709  064C  3E15               	addlw	21
 11710  064D  0086               	movwf	6
 11711  064E  3002               	movlw	2	; select bank4/5
 11712  064F  0087               	movwf	7
 11713  0650  0862               	movf	??_Flash_Memory_Initialization,w
 11714  0651  0081               	movwf	1
 11715                           
 11716                           ;MCU_B1.c: 898: product->Data[22] = i;
 11717  0652  0863               	movf	Flash_Memory_Initialization@i,w
 11718  0653  00E2               	movwf	??_Flash_Memory_Initialization
 11719  0654  086E               	movf	_product,w
 11720  0655  3E16               	addlw	22
 11721  0656  0086               	movwf	6
 11722  0657  3002               	movlw	2	; select bank4/5
 11723  0658  0087               	movwf	7
 11724  0659  0862               	movf	??_Flash_Memory_Initialization,w
 11725  065A  0081               	movwf	1
 11726                           
 11727                           ;MCU_B1.c: 899: product->Data[23] = i;
 11728  065B  0863               	movf	Flash_Memory_Initialization@i,w
 11729  065C  00E2               	movwf	??_Flash_Memory_Initialization
 11730  065D  086E               	movf	_product,w
 11731  065E  3E17               	addlw	23
 11732  065F  0086               	movwf	6
 11733  0660  3002               	movlw	2	; select bank4/5
 11734  0661  0087               	movwf	7
 11735  0662  0862               	movf	??_Flash_Memory_Initialization,w
 11736  0663  0081               	movwf	1
 11737                           
 11738                           ;MCU_B1.c: 901: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11739  0664  086E               	movf	_product,w
 11740  0665  3E0C               	addlw	12
 11741  0666  0086               	movwf	6
 11742  0667  3002               	movlw	2	; select bank4/5
 11743  0668  0087               	movwf	7
 11744  0669  0801               	movf	1,w
 11745  066A  3AFF               	xorlw	255
 11746  066B  1D03               	skipz
 11747  066C  0008               	return
 11748  066D  086E               	movf	_product,w
 11749  066E  3E0D               	addlw	13
 11750  066F  0086               	movwf	6
 11751  0670  3002               	movlw	2	; select bank4/5
 11752  0671  0087               	movwf	7
 11753  0672  0801               	movf	1,w
 11754  0673  3AFF               	xorlw	255
 11755  0674  1D03               	skipz
 11756  0675  0008               	return
 11757  0676  086E               	movf	_product,w
 11758  0677  3E0E               	addlw	14
 11759  0678  0086               	movwf	6
 11760  0679  3002               	movlw	2	; select bank4/5
 11761  067A  0087               	movwf	7
 11762  067B  0801               	movf	1,w
 11763  067C  3AFF               	xorlw	255
 11764  067D  1D03               	skipz
 11765  067E  0008               	return
 11766                           
 11767                           ;MCU_B1.c: 902: myMain.FirstOpen = 1;
 11768  067F  0021               	movlb	1	; select bank1
 11769  0680  15A0               	bsf	_myMain^(0+128),3
 11770                           
 11771                           ;MCU_B1.c: 903: myMain.First = 1;
 11772  0681  16A0               	bsf	_myMain^(0+128),5
 11773                           
 11774                           ;MCU_B1.c: 904: }
 11775                           ;MCU_B1.c: 905: } else {
 11776  0682  0008               	return
 11777  0683                     l7514:	
 11778                           
 11779                           ;MCU_B1.c: 906: i = setPercentValue(((char)(90*0.8)));
 11780  0683  3048               	movlw	72
 11781  0684  318A  222D  3186   	fcall	_setPercentValue
 11782  0687  0020               	movlb	0	; select bank0
 11783  0688  00E2               	movwf	??_Flash_Memory_Initialization
 11784  0689  0862               	movf	??_Flash_Memory_Initialization,w
 11785  068A  00E3               	movwf	Flash_Memory_Initialization@i
 11786                           
 11787                           ;MCU_B1.c: 907: setMemory_Data(0, 0xff);
 11788  068B  30FF               	movlw	255
 11789  068C  00E2               	movwf	??_Flash_Memory_Initialization
 11790  068D  0862               	movf	??_Flash_Memory_Initialization,w
 11791  068E  00A0               	movwf	setMemory_Data@data
 11792  068F  3000               	movlw	0
 11793  0690  319C  24D2  3186   	fcall	_setMemory_Data
 11794                           
 11795                           ;MCU_B1.c: 908: setMemory_Data(1, 0xff);
 11796  0693  30FF               	movlw	255
 11797  0694  0020               	movlb	0	; select bank0
 11798  0695  00E2               	movwf	??_Flash_Memory_Initialization
 11799  0696  0862               	movf	??_Flash_Memory_Initialization,w
 11800  0697  00A0               	movwf	setMemory_Data@data
 11801  0698  3001               	movlw	1
 11802  0699  319C  24D2  3186   	fcall	_setMemory_Data
 11803                           
 11804                           ;MCU_B1.c: 909: setMemory_Data(2, 0xff);
 11805  069C  30FF               	movlw	255
 11806  069D  0020               	movlb	0	; select bank0
 11807  069E  00E2               	movwf	??_Flash_Memory_Initialization
 11808  069F  0862               	movf	??_Flash_Memory_Initialization,w
 11809  06A0  00A0               	movwf	setMemory_Data@data
 11810  06A1  3002               	movlw	2
 11811  06A2  319C  24D2  3186   	fcall	_setMemory_Data
 11812                           
 11813                           ;MCU_B1.c: 910: setMemory_Data(3, 0xff);
 11814  06A5  30FF               	movlw	255
 11815  06A6  0020               	movlb	0	; select bank0
 11816  06A7  00E2               	movwf	??_Flash_Memory_Initialization
 11817  06A8  0862               	movf	??_Flash_Memory_Initialization,w
 11818  06A9  00A0               	movwf	setMemory_Data@data
 11819  06AA  3003               	movlw	3
 11820  06AB  319C  24D2  3186   	fcall	_setMemory_Data
 11821                           
 11822                           ;MCU_B1.c: 911: setMemory_Data(4, 0xff);
 11823  06AE  30FF               	movlw	255
 11824  06AF  0020               	movlb	0	; select bank0
 11825  06B0  00E2               	movwf	??_Flash_Memory_Initialization
 11826  06B1  0862               	movf	??_Flash_Memory_Initialization,w
 11827  06B2  00A0               	movwf	setMemory_Data@data
 11828  06B3  3004               	movlw	4
 11829  06B4  319C  24D2  3186   	fcall	_setMemory_Data
 11830                           
 11831                           ;MCU_B1.c: 912: setMemory_Data(5, 0xff);
 11832  06B7  30FF               	movlw	255
 11833  06B8  0020               	movlb	0	; select bank0
 11834  06B9  00E2               	movwf	??_Flash_Memory_Initialization
 11835  06BA  0862               	movf	??_Flash_Memory_Initialization,w
 11836  06BB  00A0               	movwf	setMemory_Data@data
 11837  06BC  3005               	movlw	5
 11838  06BD  319C  24D2  3186   	fcall	_setMemory_Data
 11839                           
 11840                           ;MCU_B1.c: 913: setMemory_Data(31, 0xaa);
 11841  06C0  30AA               	movlw	170
 11842  06C1  0020               	movlb	0	; select bank0
 11843  06C2  00E2               	movwf	??_Flash_Memory_Initialization
 11844  06C3  0862               	movf	??_Flash_Memory_Initialization,w
 11845  06C4  00A0               	movwf	setMemory_Data@data
 11846  06C5  301F               	movlw	31
 11847  06C6  319C  24D2  3186   	fcall	_setMemory_Data
 11848                           
 11849                           ;MCU_B1.c: 914: product->Data[21] = i;
 11850  06C9  0020               	movlb	0	; select bank0
 11851  06CA  0863               	movf	Flash_Memory_Initialization@i,w
 11852  06CB  00E2               	movwf	??_Flash_Memory_Initialization
 11853  06CC  086E               	movf	_product,w
 11854  06CD  3E15               	addlw	21
 11855  06CE  0086               	movwf	6
 11856  06CF  3002               	movlw	2	; select bank4/5
 11857  06D0  0087               	movwf	7
 11858  06D1  0862               	movf	??_Flash_Memory_Initialization,w
 11859  06D2  0081               	movwf	1
 11860                           
 11861                           ;MCU_B1.c: 915: product->Data[22] = i;
 11862  06D3  0863               	movf	Flash_Memory_Initialization@i,w
 11863  06D4  00E2               	movwf	??_Flash_Memory_Initialization
 11864  06D5  086E               	movf	_product,w
 11865  06D6  3E16               	addlw	22
 11866  06D7  0086               	movwf	6
 11867  06D8  3002               	movlw	2	; select bank4/5
 11868  06D9  0087               	movwf	7
 11869  06DA  0862               	movf	??_Flash_Memory_Initialization,w
 11870  06DB  0081               	movwf	1
 11871                           
 11872                           ;MCU_B1.c: 916: product->Data[23] = i;
 11873  06DC  0863               	movf	Flash_Memory_Initialization@i,w
 11874  06DD  00E2               	movwf	??_Flash_Memory_Initialization
 11875  06DE  086E               	movf	_product,w
 11876  06DF  3E17               	addlw	23
 11877  06E0  0086               	movwf	6
 11878  06E1  3002               	movlw	2	; select bank4/5
 11879  06E2  0087               	movwf	7
 11880  06E3  0862               	movf	??_Flash_Memory_Initialization,w
 11881  06E4  0081               	movwf	1
 11882                           
 11883                           ;MCU_B1.c: 917: GIE = 0;
 11884  06E5  138B               	bcf	11,7	;volatile
 11885                           
 11886                           ;MCU_B1.c: 918: Flash_Memory_Write();
 11887  06E6  3191  21AA         	fcall	_Flash_Memory_Write
 11888                           
 11889                           ;MCU_B1.c: 919: GIE = 1;
 11890  06E8  178B               	bsf	11,7	;volatile
 11891                           
 11892                           ;MCU_B1.c: 920: myMain.FirstOpen = 1;
 11893  06E9  0021               	movlb	1	; select bank1
 11894  06EA  15A0               	bsf	_myMain^(0+128),3
 11895                           
 11896                           ;MCU_B1.c: 921: myMain.First = 1;
 11897  06EB  16A0               	bsf	_myMain^(0+128),5
 11898  06EC  0008               	return
 11899  06ED                     __end_of_Flash_Memory_Initialization:	
 11900                           
 11901                           	psect	text68
 11902  1CD2                     __ptext68:	
 11903 ;; *************** function _setMemory_Data *****************
 11904 ;; Defined at:
 11905 ;;		line 1036 in file "../src/MCU_B1.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  address         1    wreg     unsigned char 
 11908 ;;  data            1    0[BANK0 ] unsigned char 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  address         1    2[BANK0 ] unsigned char 
 11911 ;; Return value:  Size  Location     Type
 11912 ;;		None               void
 11913 ;; Registers used:
 11914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11915 ;; Tracked objects:
 11916 ;;		On entry : 0/0
 11917 ;;		On exit  : 0/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;Total ram usage:        3 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    5
 11927 ;; This function calls:
 11928 ;;		Nothing
 11929 ;; This function is called by:
 11930 ;;		_Flash_Memory_Initialization
 11931 ;;		_Flash_Memory_Modify
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           
 11936                           ;psect for function _setMemory_Data
 11937  1CD2                     _setMemory_Data:	
 11938                           
 11939                           ;incstack = 0
 11940                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11941                           ;setMemory_Data@address stored from wreg
 11942  1CD2  0020               	movlb	0	; select bank0
 11943  1CD3  00A2               	movwf	setMemory_Data@address
 11944                           
 11945                           ;MCU_B1.c: 1037: Memory.Data[address] = data;
 11946  1CD4  0820               	movf	setMemory_Data@data,w
 11947  1CD5  00A1               	movwf	??_setMemory_Data
 11948  1CD6  0822               	movf	setMemory_Data@address,w
 11949  1CD7  3EA0               	addlw	_Memory& (0+255)
 11950  1CD8  0086               	movwf	6
 11951  1CD9  3001               	movlw	1	; select bank3/4
 11952  1CDA  0087               	movwf	7
 11953  1CDB  0821               	movf	??_setMemory_Data,w
 11954  1CDC  0081               	movwf	1
 11955  1CDD  0008               	return
 11956  1CDE                     __end_of_setMemory_Data:	
 11957                           
 11958                           	psect	text69
 11959  11AA                     __ptext69:	
 11960 ;; *************** function _Flash_Memory_Write *****************
 11961 ;; Defined at:
 11962 ;;		line 969 in file "../src/MCU_B1.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;		None
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  i               1    1[BANK0 ] unsigned char 
 11967 ;; Return value:  Size  Location     Type
 11968 ;;		None               void
 11969 ;; Registers used:
 11970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11971 ;; Tracked objects:
 11972 ;;		On entry : 0/0
 11973 ;;		On exit  : 0/0
 11974 ;;		Unchanged: 0/0
 11975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;Total ram usage:        2 bytes
 11981 ;; Hardware stack levels used:    1
 11982 ;; Hardware stack levels required when called:    6
 11983 ;; This function calls:
 11984 ;;		_Flash_Memory_Unlock
 11985 ;; This function is called by:
 11986 ;;		_Flash_Memory_Initialization
 11987 ;;		_Flash_Memory_Modify
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           
 11992                           ;psect for function _Flash_Memory_Write
 11993  11AA                     _Flash_Memory_Write:	
 11994                           
 11995                           ;MCU_B1.c: 970: char i = 0;
 11996                           
 11997                           ;incstack = 0
 11998                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11999  11AA  0020               	movlb	0	; select bank0
 12000  11AB  01A1               	clrf	Flash_Memory_Write@i
 12001                           
 12002                           ;MCU_B1.c: 971: CFGS = 0;
 12003  11AC  0023               	movlb	3	; select bank3
 12004  11AD  1315               	bcf	21,6	;volatile
 12005                           
 12006                           ;MCU_B1.c: 972: PMADRH = 0x30;
 12007  11AE  3030               	movlw	48
 12008  11AF  0092               	movwf	18	;volatile
 12009                           
 12010                           ;MCU_B1.c: 973: PMDATH = 0;
 12011  11B0  0194               	clrf	20	;volatile
 12012                           
 12013                           ;MCU_B1.c: 974: FREE = 0;
 12014  11B1  1215               	bcf	21,4	;volatile
 12015                           
 12016                           ;MCU_B1.c: 975: LWLO = 1;
 12017  11B2  1695               	bsf	21,5	;volatile
 12018                           
 12019                           ;MCU_B1.c: 976: WREN = 1;
 12020  11B3  1515               	bsf	21,2	;volatile
 12021                           
 12022                           ;MCU_B1.c: 977: for (i = 0; i < 32; i++) {
 12023  11B4  0020               	movlb	0	; select bank0
 12024  11B5  01A1               	clrf	Flash_Memory_Write@i
 12025  11B6  3020               	movlw	32
 12026  11B7  0221               	subwf	Flash_Memory_Write@i,w
 12027  11B8  1803               	btfsc	3,0
 12028  11B9  29D2               	goto	l1197
 12029  11BA                     l6600:	
 12030                           
 12031                           ;MCU_B1.c: 978: PMADRL = i;
 12032  11BA  0821               	movf	Flash_Memory_Write@i,w
 12033  11BB  0023               	movlb	3	; select bank3
 12034  11BC  0091               	movwf	17	;volatile
 12035                           
 12036                           ;MCU_B1.c: 979: PMDATL = Memory.Data[i];
 12037  11BD  0020               	movlb	0	; select bank0
 12038  11BE  0821               	movf	Flash_Memory_Write@i,w
 12039  11BF  3EA0               	addlw	_Memory& (0+255)
 12040  11C0  0086               	movwf	6
 12041  11C1  3001               	movlw	1	; select bank3/4
 12042  11C2  0087               	movwf	7
 12043  11C3  0801               	movf	1,w
 12044  11C4  0023               	movlb	3	; select bank3
 12045  11C5  0093               	movwf	19	;volatile
 12046                           
 12047                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 12048  11C6  319C  243C  3191   	fcall	_Flash_Memory_Unlock
 12049  11C9  3001               	movlw	1
 12050  11CA  0020               	movlb	0	; select bank0
 12051  11CB  00A0               	movwf	??_Flash_Memory_Write
 12052  11CC  0820               	movf	??_Flash_Memory_Write,w
 12053  11CD  07A1               	addwf	Flash_Memory_Write@i,f
 12054  11CE  3020               	movlw	32
 12055  11CF  0221               	subwf	Flash_Memory_Write@i,w
 12056  11D0  1C03               	skipc
 12057  11D1  29BA               	goto	l6600
 12058  11D2                     l1197:	
 12059                           
 12060                           ;MCU_B1.c: 981: }
 12061                           ;MCU_B1.c: 982: LWLO = 0;
 12062  11D2  0023               	movlb	3	; select bank3
 12063  11D3  1295               	bcf	21,5	;volatile
 12064                           
 12065                           ;MCU_B1.c: 983: Flash_Memory_Unlock();
 12066  11D4  319C  243C         	fcall	_Flash_Memory_Unlock
 12067                           
 12068                           ;MCU_B1.c: 984: WREN = 0;
 12069  11D6  0023               	movlb	3	; select bank3
 12070  11D7  1115               	bcf	21,2	;volatile
 12071  11D8  0008               	return
 12072  11D9                     __end_of_Flash_Memory_Write:	
 12073                           
 12074                           	psect	text70
 12075  1C3C                     __ptext70:	
 12076 ;; *************** function _Flash_Memory_Unlock *****************
 12077 ;; Defined at:
 12078 ;;		line 948 in file "../src/MCU_B1.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;		None
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;		None
 12083 ;; Return value:  Size  Location     Type
 12084 ;;		None               void
 12085 ;; Registers used:
 12086 ;;		wreg
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;Total ram usage:        0 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    5
 12099 ;; This function calls:
 12100 ;;		Nothing
 12101 ;; This function is called by:
 12102 ;;		_Flash_Memory_Write
 12103 ;;		_Flash_Memory_Erasing
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           
 12108                           ;psect for function _Flash_Memory_Unlock
 12109  1C3C                     _Flash_Memory_Unlock:	
 12110                           
 12111                           ;MCU_B1.c: 949: PMCON2 = 0x55;
 12112                           
 12113                           ;incstack = 0
 12114                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12115  1C3C  3055               	movlw	85
 12116  1C3D  0023               	movlb	3	; select bank3
 12117  1C3E  0096               	movwf	22	;volatile
 12118                           
 12119                           ;MCU_B1.c: 950: PMCON2 = 0xaa;
 12120  1C3F  30AA               	movlw	170
 12121  1C40  0096               	movwf	22	;volatile
 12122                           
 12123                           ;MCU_B1.c: 951: WR = 1;
 12124  1C41  1495               	bsf	21,1	;volatile
 12125                           
 12126                           ;MCU_B1.c: 952: __nop();
 12127  1C42  0000               	nop
 12128                           
 12129                           ;MCU_B1.c: 953: __nop();
 12130  1C43  0000               	nop
 12131  1C44  0008               	return
 12132  1C45                     __end_of_Flash_Memory_Unlock:	
 12133                           
 12134                           	psect	text71
 12135  1ECA                     __ptext71:	
 12136 ;; *************** function _Flash_Memory_Read *****************
 12137 ;; Defined at:
 12138 ;;		line 957 in file "../src/MCU_B1.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;  address         1    wreg     unsigned char 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  address         1    2[BANK0 ] unsigned char 
 12143 ;;  ret             1    3[BANK0 ] unsigned char 
 12144 ;;  i               1    1[BANK0 ] unsigned char 
 12145 ;; Return value:  Size  Location     Type
 12146 ;;                  1    wreg      unsigned char 
 12147 ;; Registers used:
 12148 ;;		wreg, status,2
 12149 ;; Tracked objects:
 12150 ;;		On entry : 0/0
 12151 ;;		On exit  : 0/0
 12152 ;;		Unchanged: 0/0
 12153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;Total ram usage:        4 bytes
 12159 ;; Hardware stack levels used:    1
 12160 ;; Hardware stack levels required when called:    5
 12161 ;; This function calls:
 12162 ;;		Nothing
 12163 ;; This function is called by:
 12164 ;;		_Flash_Memory_Initialization
 12165 ;;		_Flash_Memory_Modify
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           
 12170                           ;psect for function _Flash_Memory_Read
 12171  1ECA                     _Flash_Memory_Read:	
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12175                           ;Flash_Memory_Read@address stored from wreg
 12176  1ECA  0020               	movlb	0	; select bank0
 12177  1ECB  00A2               	movwf	Flash_Memory_Read@address
 12178                           
 12179                           ;MCU_B1.c: 958: char i = 0, ret = 0;
 12180  1ECC  01A1               	clrf	Flash_Memory_Read@i
 12181  1ECD  01A3               	clrf	Flash_Memory_Read@ret
 12182                           
 12183                           ;MCU_B1.c: 959: PMADRH = 0x30;
 12184  1ECE  3030               	movlw	48
 12185  1ECF  0023               	movlb	3	; select bank3
 12186  1ED0  0092               	movwf	18	;volatile
 12187                           
 12188                           ;MCU_B1.c: 960: PMADRL = address;
 12189  1ED1  0020               	movlb	0	; select bank0
 12190  1ED2  0822               	movf	Flash_Memory_Read@address,w
 12191  1ED3  0023               	movlb	3	; select bank3
 12192  1ED4  0091               	movwf	17	;volatile
 12193                           
 12194                           ;MCU_B1.c: 961: CFGS = 0;
 12195  1ED5  1315               	bcf	21,6	;volatile
 12196                           
 12197                           ;MCU_B1.c: 962: RD = 1;
 12198  1ED6  1415               	bsf	21,0	;volatile
 12199                           
 12200                           ;MCU_B1.c: 963: i = PMDATH;
 12201  1ED7  0814               	movf	20,w	;volatile
 12202  1ED8  0020               	movlb	0	; select bank0
 12203  1ED9  00A0               	movwf	??_Flash_Memory_Read
 12204  1EDA  0820               	movf	??_Flash_Memory_Read,w
 12205  1EDB  00A1               	movwf	Flash_Memory_Read@i
 12206                           
 12207                           ;MCU_B1.c: 964: ret = PMDATL;
 12208  1EDC  0023               	movlb	3	; select bank3
 12209  1EDD  0813               	movf	19,w	;volatile
 12210  1EDE  0020               	movlb	0	; select bank0
 12211  1EDF  00A0               	movwf	??_Flash_Memory_Read
 12212  1EE0  0820               	movf	??_Flash_Memory_Read,w
 12213  1EE1  00A3               	movwf	Flash_Memory_Read@ret
 12214                           
 12215                           ;MCU_B1.c: 965: return ret;
 12216  1EE2  0823               	movf	Flash_Memory_Read@ret,w
 12217  1EE3  0008               	return
 12218  1EE4                     __end_of_Flash_Memory_Read:	
 12219                           
 12220                           	psect	text72
 12221  11D9                     __ptext72:	
 12222 ;; *************** function _DimmerLights_Main *****************
 12223 ;; Defined at:
 12224 ;;		line 390 in file "../src/Dimmer_B1.c"
 12225 ;; Parameters:    Size  Location     Type
 12226 ;;		None
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;		None
 12229 ;; Return value:  Size  Location     Type
 12230 ;;		None               void
 12231 ;; Registers used:
 12232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;Total ram usage:        4 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:   10
 12245 ;; This function calls:
 12246 ;;		_getLoad_OK
 12247 ;;		_getMain_All_Error_Status
 12248 ;;		_getMain_LightsStatus
 12249 ;;		_setDimmerLights_Main
 12250 ;; This function is called by:
 12251 ;;		_main
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           
 12256                           ;psect for function _DimmerLights_Main
 12257  11D9                     _DimmerLights_Main:	
 12258                           
 12259                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12260                           
 12261                           ;incstack = 0
 12262                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12263  11D9  3000               	movlw	0
 12264  11DA  3192  223B  3191   	fcall	_getMain_All_Error_Status
 12265  11DD  3800               	iorlw	0
 12266  11DE  1D03               	skipz
 12267  11DF  2A03               	goto	l709
 12268                           
 12269                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12270  11E0  0022               	movlb	2	; select bank2
 12271  11E1  1CBE               	btfss	_Dimmer^(0+256),1
 12272  11E2  2A05               	goto	l7456
 12273                           
 12274                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12275  11E3  319C  2423  3191   	fcall	_getLoad_OK
 12276  11E6  3A01               	xorlw	1
 12277  11E7  1903               	skipnz
 12278  11E8  29FA               	goto	l7452
 12279  11E9  3191  217F  3191   	fcall	_getMain_LightsStatus
 12280  11EC  3A00               	xorlw	0
 12281  11ED  1903               	skipnz
 12282  11EE  29FA               	goto	l7452
 12283  11EF  0022               	movlb	2	; select bank2
 12284  11F0  0C3E               	rrf	_Dimmer^(0+256),w
 12285  11F1  3901               	andlw	1
 12286  11F2  0020               	movlb	0	; select bank0
 12287  11F3  00E7               	movwf	??_DimmerLights_Main
 12288  11F4  01E8               	clrf	??_DimmerLights_Main+1
 12289  11F5  0867               	movf	??_DimmerLights_Main,w
 12290  11F6  00E9               	movwf	_DimmerLights_Main$2345
 12291  11F7  0868               	movf	??_DimmerLights_Main+1,w
 12292  11F8  00EA               	movwf	_DimmerLights_Main$2345+1
 12293  11F9  29FD               	goto	l7454
 12294  11FA                     l7452:	
 12295  11FA  0020               	movlb	0	; select bank0
 12296  11FB  01E9               	clrf	_DimmerLights_Main$2345
 12297  11FC  01EA               	clrf	_DimmerLights_Main$2345+1
 12298  11FD                     l7454:	
 12299  11FD  0869               	movf	_DimmerLights_Main$2345,w
 12300  11FE  0022               	movlb	2	; select bank2
 12301  11FF  10BE               	bcf	_Dimmer^(0+256),1
 12302  1200  1D03               	skipz
 12303  1201  14BE               	bsf	_Dimmer^(0+256),1
 12304                           
 12305                           ;Dimmer_B1.c: 395: }
 12306                           ;Dimmer_B1.c: 396: } else {
 12307  1202  2A05               	goto	l7456
 12308  1203                     l709:	
 12309                           
 12310                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12311  1203  0022               	movlb	2	; select bank2
 12312  1204  10BE               	bcf	_Dimmer^(0+256),1
 12313  1205                     l7456:	
 12314                           
 12315                           ;Dimmer_B1.c: 398: }
 12316                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12317  1205  3001               	movlw	1
 12318  1206  3196  2692         	fcall	_setDimmerLights_Main
 12319  1208  0008               	return
 12320  1209                     __end_of_DimmerLights_Main:	
 12321                           
 12322                           	psect	text73
 12323  1692                     __ptext73:	
 12324 ;; *************** function _setDimmerLights_Main *****************
 12325 ;; Defined at:
 12326 ;;		line 416 in file "../src/Dimmer_B1.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  lights          1    wreg     unsigned char 
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  lights          1   70[BANK0 ] unsigned char 
 12331 ;; Return value:  Size  Location     Type
 12332 ;;		None               void
 12333 ;; Registers used:
 12334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;Total ram usage:        1 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    9
 12347 ;; This function calls:
 12348 ;;		_DimmerLightsPointSelect
 12349 ;;		_setBuz
 12350 ;;		_setDimmerLights
 12351 ;;		_setDimmerLights_Adj
 12352 ;; This function is called by:
 12353 ;;		_DimmerLights_Main
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _setDimmerLights_Main
 12359  1692                     _setDimmerLights_Main:	
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12363                           ;setDimmerLights_Main@lights stored from wreg
 12364  1692  0020               	movlb	0	; select bank0
 12365  1693  00E6               	movwf	setDimmerLights_Main@lights
 12366                           
 12367                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12368  1694  0866               	movf	setDimmerLights_Main@lights,w
 12369  1695  319C  2478  3196   	fcall	_DimmerLightsPointSelect
 12370                           
 12371                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12372  1698  0020               	movlb	0	; select bank0
 12373  1699  086F               	movf	_DimmerLights,w
 12374  169A  3E08               	addlw	8
 12375  169B  0086               	movwf	6
 12376  169C  3001               	movlw	1	; select bank2/3
 12377  169D  0087               	movwf	7
 12378  169E  1D01               	btfss	1,2
 12379  169F  2EBD               	goto	l6932
 12380                           
 12381                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12382  16A0  0022               	movlb	2	; select bank2
 12383  16A1  18BE               	btfsc	_Dimmer^(0+256),1
 12384  16A2  0008               	return
 12385                           
 12386                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12387  16A3  0020               	movlb	0	; select bank0
 12388  16A4  086F               	movf	_DimmerLights,w
 12389  16A5  3E08               	addlw	8
 12390  16A6  0086               	movwf	6
 12391  16A7  3001               	movlw	1	; select bank2/3
 12392  16A8  0087               	movwf	7
 12393  16A9  1101               	bcf	1,2
 12394                           
 12395                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12396  16AA  086F               	movf	_DimmerLights,w
 12397  16AB  3E08               	addlw	8
 12398  16AC  0086               	movwf	6
 12399  16AD  3001               	movlw	1	; select bank2/3
 12400  16AE  0087               	movwf	7
 12401  16AF  1C81               	btfss	1,1
 12402  16B0  2EB7               	goto	l6930
 12403                           
 12404                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12405  16B1  01E2               	clrf	setDimmerLights@status
 12406  16B2  0AE2               	incf	setDimmerLights@status,f
 12407  16B3  0866               	movf	setDimmerLights_Main@lights,w
 12408  16B4  318C  24CF         	fcall	_setDimmerLights
 12409                           
 12410                           ;Dimmer_B1.c: 425: } else {
 12411  16B6  0008               	return
 12412  16B7                     l6930:	
 12413                           
 12414                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12415  16B7  0020               	movlb	0	; select bank0
 12416  16B8  01E2               	clrf	setDimmerLights@status
 12417  16B9  0866               	movf	setDimmerLights_Main@lights,w
 12418  16BA  318C  24CF         	fcall	_setDimmerLights
 12419                           
 12420                           ;Dimmer_B1.c: 427: }
 12421                           ;Dimmer_B1.c: 428: }
 12422                           ;Dimmer_B1.c: 429: } else {
 12423  16BC  0008               	return
 12424  16BD                     l6932:	
 12425                           
 12426                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12427  16BD  0020               	movlb	0	; select bank0
 12428  16BE  086F               	movf	_DimmerLights,w
 12429  16BF  3E08               	addlw	8
 12430  16C0  0086               	movwf	6
 12431  16C1  3001               	movlw	1	; select bank2/3
 12432  16C2  0087               	movwf	7
 12433  16C3  1E01               	btfss	1,4
 12434  16C4  0008               	return
 12435                           
 12436                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12437  16C5  0022               	movlb	2	; select bank2
 12438  16C6  18BE               	btfsc	_Dimmer^(0+256),1
 12439  16C7  0008               	return
 12440                           
 12441                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12442  16C8  0020               	movlb	0	; select bank0
 12443  16C9  086F               	movf	_DimmerLights,w
 12444  16CA  3E08               	addlw	8
 12445  16CB  0086               	movwf	6
 12446  16CC  3001               	movlw	1	; select bank2/3
 12447  16CD  0087               	movwf	7
 12448  16CE  1201               	bcf	1,4
 12449                           
 12450                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12451  16CF  086F               	movf	_DimmerLights,w
 12452  16D0  3E08               	addlw	8
 12453  16D1  0086               	movwf	6
 12454  16D2  3001               	movlw	1	; select bank2/3
 12455  16D3  0087               	movwf	7
 12456  16D4  1D81               	btfss	1,3
 12457  16D5  2EE5               	goto	l6942
 12458                           
 12459                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12460  16D6  01E2               	clrf	setDimmerLights_Adj@status
 12461  16D7  0AE2               	incf	setDimmerLights_Adj@status,f
 12462  16D8  0866               	movf	setDimmerLights_Main@lights,w
 12463  16D9  318A  22F7  3196   	fcall	_setDimmerLights_Adj
 12464                           
 12465                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12466  16DC  3064               	movlw	100
 12467  16DD  0020               	movlb	0	; select bank0
 12468  16DE  00A9               	movwf	setBuz@time
 12469  16DF  3000               	movlw	0
 12470  16E0  00AA               	movwf	setBuz@time+1
 12471  16E1  3001               	movlw	1
 12472  16E2  3196  2639         	fcall	_setBuz
 12473                           
 12474                           ;Dimmer_B1.c: 436: } else {
 12475  16E4  0008               	return
 12476  16E5                     l6942:	
 12477                           
 12478                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12479  16E5  0020               	movlb	0	; select bank0
 12480  16E6  01E2               	clrf	setDimmerLights_Adj@status
 12481  16E7  0866               	movf	setDimmerLights_Main@lights,w
 12482  16E8  318A  22F7         	fcall	_setDimmerLights_Adj
 12483  16EA  0008               	return
 12484  16EB                     __end_of_setDimmerLights_Main:	
 12485                           
 12486                           	psect	text74
 12487  0AF7                     __ptext74:	
 12488 ;; *************** function _setDimmerLights_Adj *****************
 12489 ;; Defined at:
 12490 ;;		line 716 in file "../src/Dimmer_B1.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;  lights          1    wreg     unsigned char 
 12493 ;;  status          1   66[BANK0 ] unsigned char 
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  lights          1   69[BANK0 ] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;		None               void
 12498 ;; Registers used:
 12499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        4 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    8
 12512 ;; This function calls:
 12513 ;;		_DimmerLightsPointSelect
 12514 ;;		_getMain_All_Error_Status
 12515 ;;		_setPercentValue
 12516 ;;		_setRF_DimmerLights
 12517 ;;		_setTxData
 12518 ;; This function is called by:
 12519 ;;		_setDimmerLights_Main
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           
 12524                           ;psect for function _setDimmerLights_Adj
 12525  0AF7                     _setDimmerLights_Adj:	
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12529                           ;setDimmerLights_Adj@lights stored from wreg
 12530  0AF7  0020               	movlb	0	; select bank0
 12531  0AF8  00E5               	movwf	setDimmerLights_Adj@lights
 12532                           
 12533                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12534  0AF9  0865               	movf	setDimmerLights_Adj@lights,w
 12535  0AFA  319C  2478  318A   	fcall	_DimmerLightsPointSelect
 12536                           
 12537                           ;Dimmer_B1.c: 718: if (status == 1) {
 12538  0AFD  0020               	movlb	0	; select bank0
 12539  0AFE  0862               	movf	setDimmerLights_Adj@status,w
 12540  0AFF  3A01               	xorlw	1
 12541  0B00  1D03               	skipz
 12542  0B01  2B0D               	goto	l6510
 12543                           
 12544                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12545  0B02  086F               	movf	_DimmerLights,w
 12546  0B03  0086               	movwf	6
 12547  0B04  3001               	movlw	1	; select bank2/3
 12548  0B05  0087               	movwf	7
 12549  0B06  1581               	bsf	1,3
 12550                           
 12551                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12552  0B07  086F               	movf	_DimmerLights,w
 12553  0B08  0086               	movwf	6
 12554  0B09  3001               	movlw	1	; select bank2/3
 12555  0B0A  0087               	movwf	7
 12556  0B0B  1481               	bsf	1,1
 12557                           
 12558                           ;Dimmer_B1.c: 721: } else {
 12559  0B0C  0008               	return
 12560  0B0D                     l6510:	
 12561                           
 12562                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12563  0B0D  086F               	movf	_DimmerLights,w
 12564  0B0E  0086               	movwf	6
 12565  0B0F  3001               	movlw	1	; select bank2/3
 12566  0B10  0087               	movwf	7
 12567  0B11  1D81               	btfss	1,3
 12568  0B12  0008               	return
 12569                           
 12570                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12571  0B13  086F               	movf	_DimmerLights,w
 12572  0B14  0086               	movwf	6
 12573  0B15  3001               	movlw	1	; select bank2/3
 12574  0B16  0087               	movwf	7
 12575  0B17  1081               	bcf	1,1
 12576                           
 12577                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12578  0B18  086F               	movf	_DimmerLights,w
 12579  0B19  0086               	movwf	6
 12580  0B1A  3001               	movlw	1	; select bank2/3
 12581  0B1B  0087               	movwf	7
 12582  0B1C  1181               	bcf	1,3
 12583                           
 12584                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12585  0B1D  086F               	movf	_DimmerLights,w
 12586  0B1E  3E04               	addlw	4
 12587  0B1F  0086               	movwf	6
 12588  0B20  3001               	movlw	1	; select bank2/3
 12589  0B21  0087               	movwf	7
 12590  0B22  0801               	movf	1,w
 12591  0B23  00E3               	movwf	??_setDimmerLights_Adj
 12592  0B24  086F               	movf	_DimmerLights,w
 12593  0B25  3E05               	addlw	5
 12594  0B26  0086               	movwf	6
 12595  0B27  3001               	movlw	1	; select bank2/3
 12596  0B28  0087               	movwf	7
 12597  0B29  0863               	movf	??_setDimmerLights_Adj,w
 12598  0B2A  0081               	movwf	1
 12599                           
 12600                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12601  0B2B  086F               	movf	_DimmerLights,w
 12602  0B2C  3E04               	addlw	4
 12603  0B2D  0086               	movwf	6
 12604  0B2E  3001               	movlw	1	; select bank2/3
 12605  0B2F  0087               	movwf	7
 12606  0B30  0801               	movf	1,w
 12607  0B31  318A  222D  318A   	fcall	_setPercentValue
 12608  0B34  0020               	movlb	0	; select bank0
 12609  0B35  00E3               	movwf	??_setDimmerLights_Adj
 12610  0B36  0865               	movf	setDimmerLights_Adj@lights,w
 12611  0B37  3E14               	addlw	20
 12612  0B38  076E               	addwf	_product,w
 12613  0B39  00E4               	movwf	??_setDimmerLights_Adj+1
 12614  0B3A  0864               	movf	??_setDimmerLights_Adj+1,w
 12615  0B3B  0086               	movwf	6
 12616  0B3C  3002               	movlw	2	; select bank4/5
 12617  0B3D  0087               	movwf	7
 12618  0B3E  0863               	movf	??_setDimmerLights_Adj,w
 12619  0B3F  0081               	movwf	1
 12620                           
 12621                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12622  0B40  3000               	movlw	0
 12623  0B41  3192  223B  318A   	fcall	_getMain_All_Error_Status
 12624  0B44  3A00               	xorlw	0
 12625  0B45  3000               	movlw	0
 12626  0B46  1903               	skipnz
 12627  0B47  3001               	movlw	1
 12628  0B48  0020               	movlb	0	; select bank0
 12629  0B49  00E3               	movwf	??_setDimmerLights_Adj
 12630  0B4A  0DE3               	rlf	??_setDimmerLights_Adj,f
 12631  0B4B  0022               	movlb	2	; select bank2
 12632  0B4C  083E               	movf	_Dimmer^(0+256),w
 12633  0B4D  0020               	movlb	0	; select bank0
 12634  0B4E  0663               	xorwf	??_setDimmerLights_Adj,w
 12635  0B4F  39FD               	andlw	-3
 12636  0B50  0663               	xorwf	??_setDimmerLights_Adj,w
 12637  0B51  0022               	movlb	2	; select bank2
 12638  0B52  00BE               	movwf	_Dimmer^(0+256)
 12639                           
 12640                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12641  0B53  0020               	movlb	0	; select bank0
 12642  0B54  01A0               	clrf	setRF_DimmerLights@on
 12643  0B55  0AA0               	incf	setRF_DimmerLights@on,f
 12644  0B56  0865               	movf	setDimmerLights_Adj@lights,w
 12645  0B57  3196  26EB  318A   	fcall	_setRF_DimmerLights
 12646                           
 12647                           ;Dimmer_B1.c: 740: setTxData();
 12648  0B5A  3186  26ED         	fcall	_setTxData
 12649  0B5C  0008               	return
 12650  0B5D                     __end_of_setDimmerLights_Adj:	
 12651                           
 12652                           	psect	text75
 12653  0CCF                     __ptext75:	
 12654 ;; *************** function _setDimmerLights *****************
 12655 ;; Defined at:
 12656 ;;		line 611 in file "../src/Dimmer_B1.c"
 12657 ;; Parameters:    Size  Location     Type
 12658 ;;  lights          1    wreg     unsigned char 
 12659 ;;  status          1   66[BANK0 ] unsigned char 
 12660 ;; Auto vars:     Size  Location     Type
 12661 ;;  lights          1   69[BANK0 ] unsigned char 
 12662 ;; Return value:  Size  Location     Type
 12663 ;;		None               void
 12664 ;; Registers used:
 12665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12671 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;Total ram usage:        4 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:    8
 12678 ;; This function calls:
 12679 ;;		_DimmerLightsPointSelect
 12680 ;;		_getMain_All_Error_Status
 12681 ;;		_setDimmerLights_Line
 12682 ;;		_setLED
 12683 ;;		_setPercentValue
 12684 ;;		_setRF_DimmerLights
 12685 ;;		_setTxData
 12686 ;; This function is called by:
 12687 ;;		_setDimmerLights_Main
 12688 ;; This function uses a non-reentrant model
 12689 ;;
 12690                           
 12691                           
 12692                           ;psect for function _setDimmerLights
 12693  0CCF                     _setDimmerLights:	
 12694                           
 12695                           ;incstack = 0
 12696                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12697                           ;setDimmerLights@lights stored from wreg
 12698  0CCF  0020               	movlb	0	; select bank0
 12699  0CD0  00E5               	movwf	setDimmerLights@lights
 12700                           
 12701                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12702  0CD1  0865               	movf	setDimmerLights@lights,w
 12703  0CD2  319C  2478  318C   	fcall	_DimmerLightsPointSelect
 12704                           
 12705                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12706  0CD5  3000               	movlw	0
 12707  0CD6  3192  223B  318C   	fcall	_getMain_All_Error_Status
 12708  0CD9  3A00               	xorlw	0
 12709  0CDA  3000               	movlw	0
 12710  0CDB  1903               	skipnz
 12711  0CDC  3001               	movlw	1
 12712  0CDD  0020               	movlb	0	; select bank0
 12713  0CDE  00E3               	movwf	??_setDimmerLights
 12714  0CDF  0DE3               	rlf	??_setDimmerLights,f
 12715  0CE0  0022               	movlb	2	; select bank2
 12716  0CE1  083E               	movf	_Dimmer^(0+256),w
 12717  0CE2  0020               	movlb	0	; select bank0
 12718  0CE3  0663               	xorwf	??_setDimmerLights,w
 12719  0CE4  39FD               	andlw	-3
 12720  0CE5  0663               	xorwf	??_setDimmerLights,w
 12721  0CE6  0022               	movlb	2	; select bank2
 12722  0CE7  00BE               	movwf	_Dimmer^(0+256)
 12723                           
 12724                           ;Dimmer_B1.c: 619: if (status == 1) {
 12725  0CE8  0020               	movlb	0	; select bank0
 12726  0CE9  0862               	movf	setDimmerLights@status,w
 12727  0CEA  3A01               	xorlw	1
 12728  0CEB  1D03               	skipz
 12729  0CEC  2D1D               	goto	l6490
 12730                           
 12731                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12732  0CED  086F               	movf	_DimmerLights,w
 12733  0CEE  3E09               	addlw	9
 12734  0CEF  0086               	movwf	6
 12735  0CF0  3001               	movlw	1	; select bank2/3
 12736  0CF1  0087               	movwf	7
 12737  0CF2  1481               	bsf	1,1
 12738                           
 12739                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12740  0CF3  01A2               	clrf	setLED@command
 12741  0CF4  0865               	movf	setDimmerLights@lights,w
 12742  0CF5  3192  22D6  318C   	fcall	_setLED
 12743                           
 12744                           ;Dimmer_B1.c: 622: ;;
 12745                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12746  0CF8  0020               	movlb	0	; select bank0
 12747  0CF9  0865               	movf	setDimmerLights@lights,w
 12748  0CFA  319C  24C6  318C   	fcall	_setDimmerLights_Line
 12749                           
 12750                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12751  0CFD  0020               	movlb	0	; select bank0
 12752  0CFE  086F               	movf	_DimmerLights,w
 12753  0CFF  0086               	movwf	6
 12754  0D00  3001               	movlw	1	; select bank2/3
 12755  0D01  0087               	movwf	7
 12756  0D02  1701               	bsf	1,6
 12757                           
 12758                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(90*0.8));
 12759  0D03  3048               	movlw	72
 12760  0D04  00E3               	movwf	??_setDimmerLights
 12761  0D05  086F               	movf	_DimmerLights,w
 12762  0D06  3E04               	addlw	4
 12763  0D07  0086               	movwf	6
 12764  0D08  3001               	movlw	1	; select bank2/3
 12765  0D09  0087               	movwf	7
 12766  0D0A  0863               	movf	??_setDimmerLights,w
 12767  0D0B  0081               	movwf	1
 12768                           
 12769                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(90*0.8)));
 12770  0D0C  3048               	movlw	72
 12771  0D0D  318A  222D  318C   	fcall	_setPercentValue
 12772  0D10  0020               	movlb	0	; select bank0
 12773  0D11  00E3               	movwf	??_setDimmerLights
 12774  0D12  0865               	movf	setDimmerLights@lights,w
 12775  0D13  3E14               	addlw	20
 12776  0D14  076E               	addwf	_product,w
 12777  0D15  00E4               	movwf	??_setDimmerLights+1
 12778  0D16  0864               	movf	??_setDimmerLights+1,w
 12779  0D17  0086               	movwf	6
 12780  0D18  3002               	movlw	2	; select bank4/5
 12781  0D19  0087               	movwf	7
 12782  0D1A  0863               	movf	??_setDimmerLights,w
 12783  0D1B  0081               	movwf	1
 12784  0D1C  2D44               	goto	l6502
 12785  0D1D                     l6490:	
 12786                           ;Dimmer_B1.c: 642: } else {
 12787                           
 12788                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12789                           
 12790                           
 12791                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12792  0D1D  086F               	movf	_DimmerLights,w
 12793  0D1E  0086               	movwf	6
 12794  0D1F  3001               	movlw	1	; select bank2/3
 12795  0D20  0087               	movwf	7
 12796  0D21  1301               	bcf	1,6
 12797                           
 12798                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12799  0D22  086F               	movf	_DimmerLights,w
 12800  0D23  3E09               	addlw	9
 12801  0D24  0086               	movwf	6
 12802  0D25  3001               	movlw	1	; select bank2/3
 12803  0D26  0087               	movwf	7
 12804  0D27  1081               	bcf	1,1
 12805                           
 12806                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12807  0D28  01A2               	clrf	setLED@command
 12808  0D29  0AA2               	incf	setLED@command,f
 12809  0D2A  0865               	movf	setDimmerLights@lights,w
 12810  0D2B  3192  22D6  318C   	fcall	_setLED
 12811                           
 12812                           ;Dimmer_B1.c: 646: ;;
 12813                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12814  0D2E  0020               	movlb	0	; select bank0
 12815  0D2F  086F               	movf	_DimmerLights,w
 12816  0D30  3E08               	addlw	8
 12817  0D31  0086               	movwf	6
 12818  0D32  3001               	movlw	1	; select bank2/3
 12819  0D33  0087               	movwf	7
 12820  0D34  1781               	bsf	1,7
 12821                           
 12822                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12823  0D35  086F               	movf	_DimmerLights,w
 12824  0D36  0086               	movwf	6
 12825  0D37  3001               	movlw	1	; select bank2/3
 12826  0D38  0087               	movwf	7
 12827  0D39  1181               	bcf	1,3
 12828                           
 12829                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12830  0D3A  086F               	movf	_DimmerLights,w
 12831  0D3B  0086               	movwf	6
 12832  0D3C  3001               	movlw	1	; select bank2/3
 12833  0D3D  0087               	movwf	7
 12834  0D3E  1201               	bcf	1,4
 12835                           
 12836                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12837  0D3F  086F               	movf	_DimmerLights,w
 12838  0D40  0086               	movwf	6
 12839  0D41  3001               	movlw	1	; select bank2/3
 12840  0D42  0087               	movwf	7
 12841  0D43  1101               	bcf	1,2
 12842  0D44                     l6502:	
 12843                           
 12844                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12845  0D44  3007               	movlw	7
 12846  0D45  00E3               	movwf	??_setDimmerLights
 12847  0D46  086F               	movf	_DimmerLights,w
 12848  0D47  3E02               	addlw	2
 12849  0D48  0086               	movwf	6
 12850  0D49  3001               	movlw	1	; select bank2/3
 12851  0D4A  0087               	movwf	7
 12852  0D4B  0863               	movf	??_setDimmerLights,w
 12853  0D4C  0081               	movwf	1
 12854                           
 12855                           ;Dimmer_B1.c: 661: }
 12856                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12857  0D4D  0862               	movf	setDimmerLights@status,w
 12858  0D4E  00E3               	movwf	??_setDimmerLights
 12859  0D4F  0863               	movf	??_setDimmerLights,w
 12860  0D50  00A0               	movwf	setRF_DimmerLights@on
 12861  0D51  0865               	movf	setDimmerLights@lights,w
 12862  0D52  3196  26EB  318C   	fcall	_setRF_DimmerLights
 12863                           
 12864                           ;Dimmer_B1.c: 663: setTxData();
 12865  0D55  3186  26ED         	fcall	_setTxData
 12866  0D57  0008               	return
 12867  0D58                     __end_of_setDimmerLights:	
 12868                           
 12869                           	psect	text76
 12870  06ED                     __ptext76:	
 12871 ;; *************** function _setTxData *****************
 12872 ;; Defined at:
 12873 ;;		line 210 in file "../src/RF_Control_B1.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;		None
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  i               1    0        unsigned char 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;		None               void
 12880 ;; Registers used:
 12881 ;;		wreg, fsr1l, fsr1h
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:        1 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    5
 12894 ;; This function calls:
 12895 ;;		Nothing
 12896 ;; This function is called by:
 12897 ;;		_setDimmerLights
 12898 ;;		_setDimmerLights_Adj
 12899 ;;		_my_MainTimer
 12900 ;;		_getRxData
 12901 ;;		_setControl_Lights_Table
 12902 ;;		_setRFSW_Control
 12903 ;;		_setRFSW_AdjControl
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _setTxData
 12909  06ED                     _setTxData:	
 12910                           
 12911                           ;RF_Control_B1.c: 211: char i;
 12912                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _setTxData: [wregfsr1]
 12916  06ED  0021               	movlb	1	; select bank1
 12917  06EE  1C3B               	btfss	_RF1^(0+128),0
 12918  06EF  0008               	return
 12919                           
 12920                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 12921  06F0  193B               	btfsc	_RF1^(0+128),2
 12922  06F1  0008               	return
 12923                           
 12924                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 12925  06F2  153B               	bsf	_RF1^(0+128),2
 12926                           
 12927                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 12928  06F3  3014               	movlw	20
 12929  06F4  00C2               	movwf	(_RF1^(0+128)+7)
 12930  06F5  3000               	movlw	0
 12931  06F6  00C3               	movwf	(_RF1^(0+128)+8)
 12932                           
 12933                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 12934  06F7  3063               	movlw	99
 12935  06F8  0020               	movlb	0	; select bank0
 12936  06F9  00A0               	movwf	??_setTxData
 12937  06FA  0820               	movf	??_setTxData,w
 12938  06FB  0022               	movlb	2	; select bank2
 12939  06FC  00A0               	movwf	_RF_Data^(0+256)
 12940                           
 12941                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 12942  06FD  3002               	movlw	2
 12943  06FE  0020               	movlb	0	; select bank0
 12944  06FF  00A0               	movwf	??_setTxData
 12945  0700  0820               	movf	??_setTxData,w
 12946  0701  0022               	movlb	2	; select bank2
 12947  0702  00A1               	movwf	(_RF_Data^(0+256)+1)
 12948                           
 12949                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 12950  0703  0020               	movlb	0	; select bank0
 12951  0704  086E               	movf	_product,w
 12952  0705  0086               	movwf	6
 12953  0706  3002               	movlw	2	; select bank4/5
 12954  0707  0087               	movwf	7
 12955  0708  3002               	movlw	2	; select bank4/5
 12956  0709  3F42               	moviw [2]fsr1
 12957  070A  0022               	movlb	2	; select bank2
 12958  070B  00A2               	movwf	(_RF_Data^(0+256)+2)
 12959                           
 12960                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 12961  070C  0020               	movlb	0	; select bank0
 12962  070D  086E               	movf	_product,w
 12963  070E  0086               	movwf	6
 12964  070F  3002               	movlw	2	; select bank4/5
 12965  0710  0087               	movwf	7
 12966  0711  3002               	movlw	2	; select bank4/5
 12967  0712  3F43               	moviw [3]fsr1
 12968  0713  0022               	movlb	2	; select bank2
 12969  0714  00A3               	movwf	(_RF_Data^(0+256)+3)
 12970                           
 12971                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 12972  0715  0020               	movlb	0	; select bank0
 12973  0716  086E               	movf	_product,w
 12974  0717  0086               	movwf	6
 12975  0718  3002               	movlw	2	; select bank4/5
 12976  0719  0087               	movwf	7
 12977  071A  3002               	movlw	2	; select bank4/5
 12978  071B  3F44               	moviw [4]fsr1
 12979  071C  0022               	movlb	2	; select bank2
 12980  071D  00A4               	movwf	(_RF_Data^(0+256)+4)
 12981                           
 12982                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 12983  071E  0020               	movlb	0	; select bank0
 12984  071F  086E               	movf	_product,w
 12985  0720  0086               	movwf	6
 12986  0721  3002               	movlw	2	; select bank4/5
 12987  0722  0087               	movwf	7
 12988  0723  3002               	movlw	2	; select bank4/5
 12989  0724  3F45               	moviw [5]fsr1
 12990  0725  0022               	movlb	2	; select bank2
 12991  0726  00A5               	movwf	(_RF_Data^(0+256)+5)
 12992                           
 12993                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 12994  0727  0020               	movlb	0	; select bank0
 12995  0728  086E               	movf	_product,w
 12996  0729  0086               	movwf	6
 12997  072A  3002               	movlw	2	; select bank4/5
 12998  072B  0087               	movwf	7
 12999  072C  3002               	movlw	2	; select bank4/5
 13000  072D  3F46               	moviw [6]fsr1
 13001  072E  0022               	movlb	2	; select bank2
 13002  072F  00A6               	movwf	(_RF_Data^(0+256)+6)
 13003                           
 13004                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13005  0730  0020               	movlb	0	; select bank0
 13006  0731  086E               	movf	_product,w
 13007  0732  0086               	movwf	6
 13008  0733  3002               	movlw	2	; select bank4/5
 13009  0734  0087               	movwf	7
 13010  0735  3002               	movlw	2	; select bank4/5
 13011  0736  3F47               	moviw [7]fsr1
 13012  0737  0022               	movlb	2	; select bank2
 13013  0738  00A7               	movwf	(_RF_Data^(0+256)+7)
 13014                           
 13015                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13016  0739  0020               	movlb	0	; select bank0
 13017  073A  086E               	movf	_product,w
 13018  073B  0086               	movwf	6
 13019  073C  3002               	movlw	2	; select bank4/5
 13020  073D  0087               	movwf	7
 13021  073E  3002               	movlw	2	; select bank4/5
 13022  073F  3F48               	moviw [8]fsr1
 13023  0740  0022               	movlb	2	; select bank2
 13024  0741  00A8               	movwf	(_RF_Data^(0+256)+8)
 13025                           
 13026                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13027  0742  0020               	movlb	0	; select bank0
 13028  0743  086E               	movf	_product,w
 13029  0744  0086               	movwf	6
 13030  0745  3002               	movlw	2	; select bank4/5
 13031  0746  0087               	movwf	7
 13032  0747  3002               	movlw	2	; select bank4/5
 13033  0748  3F49               	moviw [9]fsr1
 13034  0749  0022               	movlb	2	; select bank2
 13035  074A  00A9               	movwf	(_RF_Data^(0+256)+9)
 13036                           
 13037                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13038  074B  0020               	movlb	0	; select bank0
 13039  074C  086E               	movf	_product,w
 13040  074D  0086               	movwf	6
 13041  074E  3002               	movlw	2	; select bank4/5
 13042  074F  0087               	movwf	7
 13043  0750  3002               	movlw	2	; select bank4/5
 13044  0751  3F4A               	moviw [10]fsr1
 13045  0752  0022               	movlb	2	; select bank2
 13046  0753  00AA               	movwf	(_RF_Data^(0+256)+10)
 13047                           
 13048                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13049  0754  0020               	movlb	0	; select bank0
 13050  0755  086E               	movf	_product,w
 13051  0756  0086               	movwf	6
 13052  0757  3002               	movlw	2	; select bank4/5
 13053  0758  0087               	movwf	7
 13054  0759  3002               	movlw	2	; select bank4/5
 13055  075A  3F4B               	moviw [11]fsr1
 13056  075B  0022               	movlb	2	; select bank2
 13057  075C  00AB               	movwf	(_RF_Data^(0+256)+11)
 13058                           
 13059                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13060  075D  0020               	movlb	0	; select bank0
 13061  075E  086E               	movf	_product,w
 13062  075F  0086               	movwf	6
 13063  0760  3002               	movlw	2	; select bank4/5
 13064  0761  0087               	movwf	7
 13065  0762  3002               	movlw	2	; select bank4/5
 13066  0763  3F4C               	moviw [12]fsr1
 13067  0764  0022               	movlb	2	; select bank2
 13068  0765  00AC               	movwf	(_RF_Data^(0+256)+12)
 13069                           
 13070                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13071  0766  0020               	movlb	0	; select bank0
 13072  0767  086E               	movf	_product,w
 13073  0768  0086               	movwf	6
 13074  0769  3002               	movlw	2	; select bank4/5
 13075  076A  0087               	movwf	7
 13076  076B  3002               	movlw	2	; select bank4/5
 13077  076C  3F4D               	moviw [13]fsr1
 13078  076D  0022               	movlb	2	; select bank2
 13079  076E  00AD               	movwf	(_RF_Data^(0+256)+13)
 13080                           
 13081                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13082  076F  0020               	movlb	0	; select bank0
 13083  0770  086E               	movf	_product,w
 13084  0771  0086               	movwf	6
 13085  0772  3002               	movlw	2	; select bank4/5
 13086  0773  0087               	movwf	7
 13087  0774  3002               	movlw	2	; select bank4/5
 13088  0775  3F4E               	moviw [14]fsr1
 13089  0776  0022               	movlb	2	; select bank2
 13090  0777  00AE               	movwf	(_RF_Data^(0+256)+14)
 13091                           
 13092                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13093  0778  0020               	movlb	0	; select bank0
 13094  0779  086E               	movf	_product,w
 13095  077A  0086               	movwf	6
 13096  077B  3002               	movlw	2	; select bank4/5
 13097  077C  0087               	movwf	7
 13098  077D  3002               	movlw	2	; select bank4/5
 13099  077E  3F4F               	moviw [15]fsr1
 13100  077F  0022               	movlb	2	; select bank2
 13101  0780  00AF               	movwf	(_RF_Data^(0+256)+15)
 13102                           
 13103                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13104  0781  0020               	movlb	0	; select bank0
 13105  0782  086E               	movf	_product,w
 13106  0783  0086               	movwf	6
 13107  0784  3002               	movlw	2	; select bank4/5
 13108  0785  0087               	movwf	7
 13109  0786  3002               	movlw	2	; select bank4/5
 13110  0787  3F50               	moviw [16]fsr1
 13111  0788  0022               	movlb	2	; select bank2
 13112  0789  00B0               	movwf	(_RF_Data^(0+256)+16)
 13113                           
 13114                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13115  078A  0020               	movlb	0	; select bank0
 13116  078B  086E               	movf	_product,w
 13117  078C  0086               	movwf	6
 13118  078D  3002               	movlw	2	; select bank4/5
 13119  078E  0087               	movwf	7
 13120  078F  3002               	movlw	2	; select bank4/5
 13121  0790  3F51               	moviw [17]fsr1
 13122  0791  0022               	movlb	2	; select bank2
 13123  0792  00B1               	movwf	(_RF_Data^(0+256)+17)
 13124                           
 13125                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13126  0793  0020               	movlb	0	; select bank0
 13127  0794  086E               	movf	_product,w
 13128  0795  0086               	movwf	6
 13129  0796  3002               	movlw	2	; select bank4/5
 13130  0797  0087               	movwf	7
 13131  0798  3002               	movlw	2	; select bank4/5
 13132  0799  3F52               	moviw [18]fsr1
 13133  079A  0022               	movlb	2	; select bank2
 13134  079B  00B2               	movwf	(_RF_Data^(0+256)+18)
 13135                           
 13136                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13137  079C  0020               	movlb	0	; select bank0
 13138  079D  086E               	movf	_product,w
 13139  079E  0086               	movwf	6
 13140  079F  3002               	movlw	2	; select bank4/5
 13141  07A0  0087               	movwf	7
 13142  07A1  3002               	movlw	2	; select bank4/5
 13143  07A2  3F53               	moviw [19]fsr1
 13144  07A3  0022               	movlb	2	; select bank2
 13145  07A4  00B3               	movwf	(_RF_Data^(0+256)+19)
 13146                           
 13147                           ;RF_Control_B1.c: 249: RF_Data[20] = 209;
 13148  07A5  30D1               	movlw	209
 13149  07A6  0020               	movlb	0	; select bank0
 13150  07A7  00A0               	movwf	??_setTxData
 13151  07A8  0820               	movf	??_setTxData,w
 13152  07A9  0022               	movlb	2	; select bank2
 13153  07AA  00B4               	movwf	(_RF_Data^(0+256)+20)
 13154  07AB  0008               	return
 13155  07AC                     __end_of_setTxData:	
 13156                           
 13157                           	psect	text77
 13158  16EB                     __ptext77:	
 13159 ;; *************** function _setRF_DimmerLights *****************
 13160 ;; Defined at:
 13161 ;;		line 487 in file "../src/RF_Control_B1.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  lights          1    wreg     unsigned char 
 13164 ;;  on              1    0[BANK0 ] unsigned char 
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;  lights          1    4[BANK0 ] unsigned char 
 13167 ;;  status          1    3[BANK0 ] unsigned char 
 13168 ;; Return value:  Size  Location     Type
 13169 ;;		None               void
 13170 ;; Registers used:
 13171 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13172 ;; Tracked objects:
 13173 ;;		On entry : 0/0
 13174 ;;		On exit  : 0/0
 13175 ;;		Unchanged: 0/0
 13176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13177 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;Total ram usage:        5 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; Hardware stack levels required when called:    5
 13184 ;; This function calls:
 13185 ;;		Nothing
 13186 ;; This function is called by:
 13187 ;;		_setDimmerLights
 13188 ;;		_setDimmerLights_Adj
 13189 ;;		_setRFSW_Control
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           
 13194                           ;psect for function _setRF_DimmerLights
 13195  16EB                     _setRF_DimmerLights:	
 13196                           
 13197                           ;incstack = 0
 13198                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13199                           ;setRF_DimmerLights@lights stored from wreg
 13200  16EB  0020               	movlb	0	; select bank0
 13201  16EC  00A4               	movwf	setRF_DimmerLights@lights
 13202                           
 13203                           ;RF_Control_B1.c: 488: char status = 1;
 13204  16ED  01A3               	clrf	setRF_DimmerLights@status
 13205  16EE  0AA3               	incf	setRF_DimmerLights@status,f
 13206                           
 13207                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13208  16EF  0824               	movf	setRF_DimmerLights@lights,w
 13209  16F0  3EFF               	addlw	-1
 13210  16F1  0A89               	incf	9,f
 13211  16F2  2EF5               	goto	u4950
 13212  16F3                     u4955:	
 13213  16F3  1003               	clrc
 13214  16F4  0DA3               	rlf	setRF_DimmerLights@status,f
 13215  16F5                     u4950:	
 13216  16F5  3EFF               	addlw	-1
 13217  16F6  1D03               	skipz
 13218  16F7  2EF3               	goto	u4955
 13219                           
 13220                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13221  16F8  0824               	movf	setRF_DimmerLights@lights,w
 13222  16F9  00A1               	movwf	??_setRF_DimmerLights
 13223  16FA  086E               	movf	_product,w
 13224  16FB  3E0B               	addlw	11
 13225  16FC  0086               	movwf	6
 13226  16FD  3002               	movlw	2	; select bank4/5
 13227  16FE  0087               	movwf	7
 13228  16FF  0821               	movf	??_setRF_DimmerLights,w
 13229  1700  0081               	movwf	1
 13230                           
 13231                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13232  1701  0824               	movf	setRF_DimmerLights@lights,w
 13233  1702  3E14               	addlw	20
 13234  1703  076E               	addwf	_product,w
 13235  1704  00A1               	movwf	??_setRF_DimmerLights
 13236  1705  0821               	movf	??_setRF_DimmerLights,w
 13237  1706  0086               	movwf	6
 13238  1707  3002               	movlw	2	; select bank4/5
 13239  1708  0087               	movwf	7
 13240  1709  0801               	movf	1,w
 13241  170A  00A2               	movwf	??_setRF_DimmerLights+1
 13242  170B  086E               	movf	_product,w
 13243  170C  3E09               	addlw	9
 13244  170D  0086               	movwf	6
 13245  170E  3002               	movlw	2	; select bank4/5
 13246  170F  0087               	movwf	7
 13247  1710  0822               	movf	??_setRF_DimmerLights+1,w
 13248  1711  0081               	movwf	1
 13249                           
 13250                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13251  1712  0824               	movf	setRF_DimmerLights@lights,w
 13252  1713  3E1A               	addlw	26
 13253  1714  076E               	addwf	_product,w
 13254  1715  00A1               	movwf	??_setRF_DimmerLights
 13255  1716  0821               	movf	??_setRF_DimmerLights,w
 13256  1717  0086               	movwf	6
 13257  1718  3002               	movlw	2	; select bank4/5
 13258  1719  0087               	movwf	7
 13259  171A  0801               	movf	1,w
 13260  171B  00A2               	movwf	??_setRF_DimmerLights+1
 13261  171C  086E               	movf	_product,w
 13262  171D  3E11               	addlw	17
 13263  171E  0086               	movwf	6
 13264  171F  3002               	movlw	2	; select bank4/5
 13265  1720  0087               	movwf	7
 13266  1721  0822               	movf	??_setRF_DimmerLights+1,w
 13267  1722  0081               	movwf	1
 13268                           
 13269                           ;RF_Control_B1.c: 500: if (on == 1) {
 13270  1723  0820               	movf	setRF_DimmerLights@on,w
 13271  1724  3A01               	xorlw	1
 13272  1725  1D03               	skipz
 13273  1726  2F37               	goto	l5968
 13274                           
 13275                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13276  1727  086E               	movf	_product,w
 13277  1728  3E0F               	addlw	15
 13278  1729  0086               	movwf	6
 13279  172A  3002               	movlw	2	; select bank4/5
 13280  172B  0087               	movwf	7
 13281  172C  0801               	movf	1,w
 13282  172D  0423               	iorwf	setRF_DimmerLights@status,w
 13283  172E  00A1               	movwf	??_setRF_DimmerLights
 13284  172F  086E               	movf	_product,w
 13285  1730  3E0F               	addlw	15
 13286  1731  0086               	movwf	6
 13287  1732  3002               	movlw	2	; select bank4/5
 13288  1733  0087               	movwf	7
 13289  1734  0821               	movf	??_setRF_DimmerLights,w
 13290  1735  0081               	movwf	1
 13291                           
 13292                           ;RF_Control_B1.c: 502: } else {
 13293  1736  0008               	return
 13294  1737                     l5968:	
 13295                           
 13296                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13297  1737  086E               	movf	_product,w
 13298  1738  3E0F               	addlw	15
 13299  1739  0086               	movwf	6
 13300  173A  3002               	movlw	2	; select bank4/5
 13301  173B  0087               	movwf	7
 13302  173C  0923               	comf	setRF_DimmerLights@status,w
 13303  173D  0501               	andwf	1,w
 13304  173E  00A1               	movwf	??_setRF_DimmerLights
 13305  173F  086E               	movf	_product,w
 13306  1740  3E0F               	addlw	15
 13307  1741  0086               	movwf	6
 13308  1742  3002               	movlw	2	; select bank4/5
 13309  1743  0087               	movwf	7
 13310  1744  0821               	movf	??_setRF_DimmerLights,w
 13311  1745  0081               	movwf	1
 13312  1746  0008               	return
 13313  1747                     __end_of_setRF_DimmerLights:	
 13314                           
 13315                           	psect	text78
 13316  0A2D                     __ptext78:	
 13317 ;; *************** function _setPercentValue *****************
 13318 ;; Defined at:
 13319 ;;		line 874 in file "../src/Dimmer_B1.c"
 13320 ;; Parameters:    Size  Location     Type
 13321 ;;  value           1    wreg     unsigned char 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;  value           1   62[BANK0 ] unsigned char 
 13324 ;;  i               3   63[BANK0 ] float 
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      unsigned char 
 13327 ;; Registers used:
 13328 ;;		wreg, status,2, status,0, pclath, cstack
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        6 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    7
 13341 ;; This function calls:
 13342 ;;		___awtoft
 13343 ;;		___ftadd
 13344 ;;		___ftdiv
 13345 ;;		___ftneg
 13346 ;;		___fttol
 13347 ;; This function is called by:
 13348 ;;		_setDimmerLights
 13349 ;;		_setDimmerLights_Adj
 13350 ;;		_Flash_Memory_Initialization
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           
 13355                           ;psect for function _setPercentValue
 13356  0A2D                     _setPercentValue:	
 13357                           
 13358                           ;incstack = 0
 13359                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13360                           ;setPercentValue@value stored from wreg
 13361  0A2D  0020               	movlb	0	; select bank0
 13362  0A2E  00DE               	movwf	setPercentValue@value
 13363                           
 13364                           ;Dimmer_B1.c: 882: float i = ((char)(90*0.8)) - ((char)(15*0.8));
 13365  0A2F  3000               	movlw	0
 13366  0A30  00DF               	movwf	setPercentValue@i
 13367  0A31  3070               	movlw	112
 13368  0A32  00E0               	movwf	setPercentValue@i+1
 13369  0A33  3042               	movlw	66
 13370  0A34  00E1               	movwf	setPercentValue@i+2
 13371                           
 13372                           ;Dimmer_B1.c: 883: i /= 100;
 13373  0A35  3000               	movlw	0
 13374  0A36  00AE               	movwf	___ftdiv@f2
 13375  0A37  30C8               	movlw	200
 13376  0A38  00AF               	movwf	___ftdiv@f2+1
 13377  0A39  3042               	movlw	66
 13378  0A3A  00B0               	movwf	___ftdiv@f2+2
 13379  0A3B  085F               	movf	setPercentValue@i,w
 13380  0A3C  00B1               	movwf	___ftdiv@f1
 13381  0A3D  0860               	movf	setPercentValue@i+1,w
 13382  0A3E  00B2               	movwf	___ftdiv@f1+1
 13383  0A3F  0861               	movf	setPercentValue@i+2,w
 13384  0A40  00B3               	movwf	___ftdiv@f1+2
 13385  0A41  318D  25E8  318A   	fcall	___ftdiv
 13386  0A44  0020               	movlb	0	; select bank0
 13387  0A45  082E               	movf	?___ftdiv,w
 13388  0A46  00DF               	movwf	setPercentValue@i
 13389  0A47  082F               	movf	?___ftdiv+1,w
 13390  0A48  00E0               	movwf	setPercentValue@i+1
 13391  0A49  0830               	movf	?___ftdiv+2,w
 13392  0A4A  00E1               	movwf	setPercentValue@i+2
 13393                           
 13394                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(90*0.8)) - value) / i));
 13395  0A4B  085E               	movf	setPercentValue@value,w
 13396  0A4C  00DC               	movwf	??_setPercentValue
 13397  0A4D  01DD               	clrf	??_setPercentValue+1
 13398  0A4E  09DC               	comf	??_setPercentValue,f
 13399  0A4F  09DD               	comf	??_setPercentValue+1,f
 13400  0A50  0ADC               	incf	??_setPercentValue,f
 13401  0A51  1903               	skipnz
 13402  0A52  0ADD               	incf	??_setPercentValue+1,f
 13403  0A53  085C               	movf	??_setPercentValue,w
 13404  0A54  3E48               	addlw	72
 13405  0A55  00A8               	movwf	___awtoft@c
 13406  0A56  3000               	movlw	0
 13407  0A57  3D5D               	addwfc	??_setPercentValue+1,w
 13408  0A58  00A9               	movwf	___awtoft@c+1
 13409  0A59  319F  27DE  318A   	fcall	___awtoft
 13410  0A5C  0020               	movlb	0	; select bank0
 13411  0A5D  0828               	movf	?___awtoft,w
 13412  0A5E  00B1               	movwf	___ftdiv@f1
 13413  0A5F  0829               	movf	?___awtoft+1,w
 13414  0A60  00B2               	movwf	___ftdiv@f1+1
 13415  0A61  082A               	movf	?___awtoft+2,w
 13416  0A62  00B3               	movwf	___ftdiv@f1+2
 13417  0A63  085F               	movf	setPercentValue@i,w
 13418  0A64  00AE               	movwf	___ftdiv@f2
 13419  0A65  0860               	movf	setPercentValue@i+1,w
 13420  0A66  00AF               	movwf	___ftdiv@f2+1
 13421  0A67  0861               	movf	setPercentValue@i+2,w
 13422  0A68  00B0               	movwf	___ftdiv@f2+2
 13423  0A69  318D  25E8  318A   	fcall	___ftdiv
 13424  0A6C  0020               	movlb	0	; select bank0
 13425  0A6D  082E               	movf	?___ftdiv,w
 13426  0A6E  00BE               	movwf	___ftneg@f1
 13427  0A6F  082F               	movf	?___ftdiv+1,w
 13428  0A70  00BF               	movwf	___ftneg@f1+1
 13429  0A71  0830               	movf	?___ftdiv+2,w
 13430  0A72  00C0               	movwf	___ftneg@f1+2
 13431  0A73  319C  2433  318A   	fcall	___ftneg
 13432  0A76  0020               	movlb	0	; select bank0
 13433  0A77  083E               	movf	?___ftneg,w
 13434  0A78  00C4               	movwf	___ftadd@f2
 13435  0A79  083F               	movf	?___ftneg+1,w
 13436  0A7A  00C5               	movwf	___ftadd@f2+1
 13437  0A7B  0840               	movf	?___ftneg+2,w
 13438  0A7C  00C6               	movwf	___ftadd@f2+2
 13439  0A7D  3000               	movlw	0
 13440  0A7E  00C1               	movwf	___ftadd@f1
 13441  0A7F  30C8               	movlw	200
 13442  0A80  00C2               	movwf	___ftadd@f1+1
 13443  0A81  3042               	movlw	66
 13444  0A82  00C3               	movwf	___ftadd@f1+2
 13445  0A83  3184  243C  318A   	fcall	___ftadd
 13446  0A86  0020               	movlb	0	; select bank0
 13447  0A87  0841               	movf	?___ftadd,w
 13448  0A88  00CE               	movwf	___fttol@f1
 13449  0A89  0842               	movf	?___ftadd+1,w
 13450  0A8A  00CF               	movwf	___fttol@f1+1
 13451  0A8B  0843               	movf	?___ftadd+2,w
 13452  0A8C  00D0               	movwf	___fttol@f1+2
 13453  0A8D  318C  2448         	fcall	___fttol
 13454  0A8F  0020               	movlb	0	; select bank0
 13455  0A90  084E               	movf	?___fttol,w
 13456  0A91  0008               	return
 13457  0A92                     __end_of_setPercentValue:	
 13458                           
 13459                           	psect	text79
 13460  0C48                     __ptext79:	
 13461 ;; *************** function ___fttol *****************
 13462 ;; Defined at:
 13463 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  f1              3   46[BANK0 ] float 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  lval            4   55[BANK0 ] unsigned long 
 13468 ;;  exp1            1   59[BANK0 ] unsigned char 
 13469 ;;  sign1           1   54[BANK0 ] unsigned char 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  4   46[BANK0 ] long 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;Total ram usage:       14 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    5
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		_getPercentValue
 13490 ;;		_setPercentValue
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           
 13495                           ;psect for function ___fttol
 13496  0C48                     ___fttol:	
 13497                           
 13498                           ;incstack = 0
 13499                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13500  0C48  0020               	movlb	0	; select bank0
 13501  0C49  084E               	movf	___fttol@f1,w
 13502  0C4A  00D2               	movwf	??___fttol
 13503  0C4B  084F               	movf	___fttol@f1+1,w
 13504  0C4C  00D3               	movwf	??___fttol+1
 13505  0C4D  0850               	movf	___fttol@f1+2,w
 13506  0C4E  00D4               	movwf	??___fttol+2
 13507  0C4F  1003               	clrc
 13508  0C50  0D53               	rlf	??___fttol+1,w
 13509  0C51  0D54               	rlf	??___fttol+2,w
 13510  0C52  00D5               	movwf	??___fttol+3
 13511  0C53  0855               	movf	??___fttol+3,w
 13512  0C54  00DB               	movwf	___fttol@exp1
 13513  0C55  08DB               	movf	___fttol@exp1,f
 13514  0C56  1D03               	skipz
 13515  0C57  2C61               	goto	l5710
 13516  0C58  3000               	movlw	0
 13517  0C59  00D1               	movwf	?___fttol+3
 13518  0C5A  3000               	movlw	0
 13519  0C5B  00D0               	movwf	?___fttol+2
 13520  0C5C  3000               	movlw	0
 13521  0C5D  00CF               	movwf	?___fttol+1
 13522  0C5E  3000               	movlw	0
 13523  0C5F  00CE               	movwf	?___fttol
 13524  0C60  0008               	return
 13525  0C61                     l5710:	
 13526  0C61  084E               	movf	___fttol@f1,w
 13527  0C62  00D2               	movwf	??___fttol
 13528  0C63  084F               	movf	___fttol@f1+1,w
 13529  0C64  00D3               	movwf	??___fttol+1
 13530  0C65  0850               	movf	___fttol@f1+2,w
 13531  0C66  00D4               	movwf	??___fttol+2
 13532  0C67  3017               	movlw	23
 13533  0C68                     u4585:	
 13534  0C68  36D4               	lsrf	??___fttol+2,f
 13535  0C69  0CD3               	rrf	??___fttol+1,f
 13536  0C6A  0CD2               	rrf	??___fttol,f
 13537  0C6B  0B89               	decfsz	9,f
 13538  0C6C  2C68               	goto	u4585
 13539  0C6D  0852               	movf	??___fttol,w
 13540  0C6E  00D5               	movwf	??___fttol+3
 13541  0C6F  0855               	movf	??___fttol+3,w
 13542  0C70  00D6               	movwf	___fttol@sign1
 13543  0C71  17CF               	bsf	___fttol@f1+1,7
 13544  0C72  30FF               	movlw	255
 13545  0C73  05CE               	andwf	___fttol@f1,f
 13546  0C74  30FF               	movlw	255
 13547  0C75  05CF               	andwf	___fttol@f1+1,f
 13548  0C76  3000               	movlw	0
 13549  0C77  05D0               	andwf	___fttol@f1+2,f
 13550  0C78  084E               	movf	___fttol@f1,w
 13551  0C79  00D7               	movwf	___fttol@lval
 13552  0C7A  084F               	movf	___fttol@f1+1,w
 13553  0C7B  00D8               	movwf	___fttol@lval+1
 13554  0C7C  0850               	movf	___fttol@f1+2,w
 13555  0C7D  00D9               	movwf	___fttol@lval+2
 13556  0C7E  01DA               	clrf	___fttol@lval+3
 13557  0C7F  308E               	movlw	142
 13558  0C80  02DB               	subwf	___fttol@exp1,f
 13559  0C81  1FDB               	btfss	___fttol@exp1,7
 13560  0C82  2C9F               	goto	l5730
 13561  0C83  085B               	movf	___fttol@exp1,w
 13562  0C84  3A80               	xorlw	128
 13563  0C85  3E8F               	addlw	143
 13564  0C86  1803               	skipnc
 13565  0C87  2C91               	goto	l5728
 13566  0C88  3000               	movlw	0
 13567  0C89  00D1               	movwf	?___fttol+3
 13568  0C8A  3000               	movlw	0
 13569  0C8B  00D0               	movwf	?___fttol+2
 13570  0C8C  3000               	movlw	0
 13571  0C8D  00CF               	movwf	?___fttol+1
 13572  0C8E  3000               	movlw	0
 13573  0C8F  00CE               	movwf	?___fttol
 13574  0C90  0008               	return
 13575  0C91                     l5728:	
 13576  0C91  3001               	movlw	1
 13577  0C92                     u4615:	
 13578  0C92  36DA               	lsrf	___fttol@lval+3,f
 13579  0C93  0CD9               	rrf	___fttol@lval+2,f
 13580  0C94  0CD8               	rrf	___fttol@lval+1,f
 13581  0C95  0CD7               	rrf	___fttol@lval,f
 13582  0C96  0B89               	decfsz	9,f
 13583  0C97  2C92               	goto	u4615
 13584  0C98  3001               	movlw	1
 13585  0C99  00D2               	movwf	??___fttol
 13586  0C9A  0852               	movf	??___fttol,w
 13587  0C9B  07DB               	addwf	___fttol@exp1,f
 13588  0C9C  1903               	btfsc	3,2
 13589  0C9D  2CB8               	goto	l5740
 13590  0C9E  2C91               	goto	l5728
 13591  0C9F                     l5730:	
 13592  0C9F  3018               	movlw	24
 13593  0CA0  025B               	subwf	___fttol@exp1,w
 13594  0CA1  1C03               	skipc
 13595  0CA2  2CB5               	goto	l5738
 13596  0CA3  3000               	movlw	0
 13597  0CA4  00D1               	movwf	?___fttol+3
 13598  0CA5  3000               	movlw	0
 13599  0CA6  00D0               	movwf	?___fttol+2
 13600  0CA7  3000               	movlw	0
 13601  0CA8  00CF               	movwf	?___fttol+1
 13602  0CA9  3000               	movlw	0
 13603  0CAA  00CE               	movwf	?___fttol
 13604  0CAB  0008               	return
 13605  0CAC                     l5736:	
 13606  0CAC  3001               	movlw	1
 13607  0CAD                     u4645:	
 13608  0CAD  35D7               	lslf	___fttol@lval,f
 13609  0CAE  0DD8               	rlf	___fttol@lval+1,f
 13610  0CAF  0DD9               	rlf	___fttol@lval+2,f
 13611  0CB0  0DDA               	rlf	___fttol@lval+3,f
 13612  0CB1  0B89               	decfsz	9,f
 13613  0CB2  2CAD               	goto	u4645
 13614  0CB3  3001               	movlw	1
 13615  0CB4  02DB               	subwf	___fttol@exp1,f
 13616  0CB5                     l5738:	
 13617  0CB5  08DB               	movf	___fttol@exp1,f
 13618  0CB6  1D03               	skipz
 13619  0CB7  2CAC               	goto	l5736
 13620  0CB8                     l5740:	
 13621  0CB8  0856               	movf	___fttol@sign1,w
 13622  0CB9  1903               	btfsc	3,2
 13623  0CBA  2CC6               	goto	l5744
 13624  0CBB  09D7               	comf	___fttol@lval,f
 13625  0CBC  09D8               	comf	___fttol@lval+1,f
 13626  0CBD  09D9               	comf	___fttol@lval+2,f
 13627  0CBE  09DA               	comf	___fttol@lval+3,f
 13628  0CBF  0AD7               	incf	___fttol@lval,f
 13629  0CC0  1903               	skipnz
 13630  0CC1  0AD8               	incf	___fttol@lval+1,f
 13631  0CC2  1903               	skipnz
 13632  0CC3  0AD9               	incf	___fttol@lval+2,f
 13633  0CC4  1903               	skipnz
 13634  0CC5  0ADA               	incf	___fttol@lval+3,f
 13635  0CC6                     l5744:	
 13636  0CC6  085A               	movf	___fttol@lval+3,w
 13637  0CC7  00D1               	movwf	?___fttol+3
 13638  0CC8  0859               	movf	___fttol@lval+2,w
 13639  0CC9  00D0               	movwf	?___fttol+2
 13640  0CCA  0858               	movf	___fttol@lval+1,w
 13641  0CCB  00CF               	movwf	?___fttol+1
 13642  0CCC  0857               	movf	___fttol@lval,w
 13643  0CCD  00CE               	movwf	?___fttol
 13644  0CCE  0008               	return
 13645  0CCF                     __end_of___fttol:	
 13646                           
 13647                           	psect	text80
 13648  1C33                     __ptext80:	
 13649 ;; *************** function ___ftneg *****************
 13650 ;; Defined at:
 13651 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13652 ;; Parameters:    Size  Location     Type
 13653 ;;  f1              3   30[BANK0 ] float 
 13654 ;; Auto vars:     Size  Location     Type
 13655 ;;		None
 13656 ;; Return value:  Size  Location     Type
 13657 ;;                  3   30[BANK0 ] float 
 13658 ;; Registers used:
 13659 ;;		wreg
 13660 ;; Tracked objects:
 13661 ;;		On entry : 0/0
 13662 ;;		On exit  : 0/0
 13663 ;;		Unchanged: 0/0
 13664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13665 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;Total ram usage:        3 bytes
 13670 ;; Hardware stack levels used:    1
 13671 ;; Hardware stack levels required when called:    5
 13672 ;; This function calls:
 13673 ;;		Nothing
 13674 ;; This function is called by:
 13675 ;;		_getPercentValue
 13676 ;;		_setPercentValue
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           
 13681                           ;psect for function ___ftneg
 13682  1C33                     ___ftneg:	
 13683                           
 13684                           ;incstack = 0
 13685                           ; Regs used in ___ftneg: [wreg]
 13686  1C33  0020               	movlb	0	; select bank0
 13687  1C34  0840               	movf	___ftneg@f1+2,w
 13688  1C35  043F               	iorwf	___ftneg@f1+1,w
 13689  1C36  043E               	iorwf	___ftneg@f1,w
 13690  1C37  1903               	skipnz
 13691  1C38  0008               	return
 13692  1C39  3080               	movlw	128
 13693  1C3A  06C0               	xorwf	___ftneg@f1+2,f
 13694  1C3B  0008               	return
 13695  1C3C                     __end_of___ftneg:	
 13696                           
 13697                           	psect	text81
 13698  0DE8                     __ptext81:	
 13699 ;; *************** function ___ftdiv *****************
 13700 ;; Defined at:
 13701 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  f2              3   14[BANK0 ] float 
 13704 ;;  f1              3   17[BANK0 ] float 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  f3              3   25[BANK0 ] float 
 13707 ;;  sign            1   29[BANK0 ] unsigned char 
 13708 ;;  exp             1   28[BANK0 ] unsigned char 
 13709 ;;  cntr            1   24[BANK0 ] unsigned char 
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  3   14[BANK0 ] float 
 13712 ;; Registers used:
 13713 ;;		wreg, status,2, status,0, pclath, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:       16 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    6
 13726 ;; This function calls:
 13727 ;;		___ftpack
 13728 ;; This function is called by:
 13729 ;;		_getPercentValue
 13730 ;;		_setPercentValue
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function ___ftdiv
 13736  0DE8                     ___ftdiv:	
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13740  0DE8  0020               	movlb	0	; select bank0
 13741  0DE9  0831               	movf	___ftdiv@f1,w
 13742  0DEA  00B4               	movwf	??___ftdiv
 13743  0DEB  0832               	movf	___ftdiv@f1+1,w
 13744  0DEC  00B5               	movwf	??___ftdiv+1
 13745  0DED  0833               	movf	___ftdiv@f1+2,w
 13746  0DEE  00B6               	movwf	??___ftdiv+2
 13747  0DEF  1003               	clrc
 13748  0DF0  0D35               	rlf	??___ftdiv+1,w
 13749  0DF1  0D36               	rlf	??___ftdiv+2,w
 13750  0DF2  00B7               	movwf	??___ftdiv+3
 13751  0DF3  0837               	movf	??___ftdiv+3,w
 13752  0DF4  00BC               	movwf	___ftdiv@exp
 13753  0DF5  08BC               	movf	___ftdiv@exp,f
 13754  0DF6  1D03               	skipz
 13755  0DF7  2DFF               	goto	l5610
 13756  0DF8  3000               	movlw	0
 13757  0DF9  00AE               	movwf	?___ftdiv
 13758  0DFA  3000               	movlw	0
 13759  0DFB  00AF               	movwf	?___ftdiv+1
 13760  0DFC  3000               	movlw	0
 13761  0DFD  00B0               	movwf	?___ftdiv+2
 13762  0DFE  0008               	return
 13763  0DFF                     l5610:	
 13764  0DFF  082E               	movf	___ftdiv@f2,w
 13765  0E00  00B4               	movwf	??___ftdiv
 13766  0E01  082F               	movf	___ftdiv@f2+1,w
 13767  0E02  00B5               	movwf	??___ftdiv+1
 13768  0E03  0830               	movf	___ftdiv@f2+2,w
 13769  0E04  00B6               	movwf	??___ftdiv+2
 13770  0E05  1003               	clrc
 13771  0E06  0D35               	rlf	??___ftdiv+1,w
 13772  0E07  0D36               	rlf	??___ftdiv+2,w
 13773  0E08  00B7               	movwf	??___ftdiv+3
 13774  0E09  0837               	movf	??___ftdiv+3,w
 13775  0E0A  00BD               	movwf	___ftdiv@sign
 13776  0E0B  08BD               	movf	___ftdiv@sign,f
 13777  0E0C  1D03               	skipz
 13778  0E0D  2E15               	goto	l5616
 13779  0E0E  3000               	movlw	0
 13780  0E0F  00AE               	movwf	?___ftdiv
 13781  0E10  3000               	movlw	0
 13782  0E11  00AF               	movwf	?___ftdiv+1
 13783  0E12  3000               	movlw	0
 13784  0E13  00B0               	movwf	?___ftdiv+2
 13785  0E14  0008               	return
 13786  0E15                     l5616:	
 13787  0E15  3000               	movlw	0
 13788  0E16  00B9               	movwf	___ftdiv@f3
 13789  0E17  3000               	movlw	0
 13790  0E18  00BA               	movwf	___ftdiv@f3+1
 13791  0E19  3000               	movlw	0
 13792  0E1A  00BB               	movwf	___ftdiv@f3+2
 13793  0E1B  3089               	movlw	137
 13794  0E1C  073D               	addwf	___ftdiv@sign,w
 13795  0E1D  00B4               	movwf	??___ftdiv
 13796  0E1E  0834               	movf	??___ftdiv,w
 13797  0E1F  02BC               	subwf	___ftdiv@exp,f
 13798  0E20  0831               	movf	___ftdiv@f1,w
 13799  0E21  00B4               	movwf	??___ftdiv
 13800  0E22  0832               	movf	___ftdiv@f1+1,w
 13801  0E23  00B5               	movwf	??___ftdiv+1
 13802  0E24  0833               	movf	___ftdiv@f1+2,w
 13803  0E25  00B6               	movwf	??___ftdiv+2
 13804  0E26  3010               	movlw	16
 13805  0E27                     u4385:	
 13806  0E27  36B6               	lsrf	??___ftdiv+2,f
 13807  0E28  0CB5               	rrf	??___ftdiv+1,f
 13808  0E29  0CB4               	rrf	??___ftdiv,f
 13809  0E2A  0B89               	decfsz	9,f
 13810  0E2B  2E27               	goto	u4385
 13811  0E2C  0834               	movf	??___ftdiv,w
 13812  0E2D  00B7               	movwf	??___ftdiv+3
 13813  0E2E  0837               	movf	??___ftdiv+3,w
 13814  0E2F  00BD               	movwf	___ftdiv@sign
 13815  0E30  082E               	movf	___ftdiv@f2,w
 13816  0E31  00B4               	movwf	??___ftdiv
 13817  0E32  082F               	movf	___ftdiv@f2+1,w
 13818  0E33  00B5               	movwf	??___ftdiv+1
 13819  0E34  0830               	movf	___ftdiv@f2+2,w
 13820  0E35  00B6               	movwf	??___ftdiv+2
 13821  0E36  3010               	movlw	16
 13822  0E37                     u4395:	
 13823  0E37  36B6               	lsrf	??___ftdiv+2,f
 13824  0E38  0CB5               	rrf	??___ftdiv+1,f
 13825  0E39  0CB4               	rrf	??___ftdiv,f
 13826  0E3A  0B89               	decfsz	9,f
 13827  0E3B  2E37               	goto	u4395
 13828  0E3C  0834               	movf	??___ftdiv,w
 13829  0E3D  00B7               	movwf	??___ftdiv+3
 13830  0E3E  0837               	movf	??___ftdiv+3,w
 13831  0E3F  06BD               	xorwf	___ftdiv@sign,f
 13832  0E40  3080               	movlw	128
 13833  0E41  00B4               	movwf	??___ftdiv
 13834  0E42  0834               	movf	??___ftdiv,w
 13835  0E43  05BD               	andwf	___ftdiv@sign,f
 13836  0E44  17B2               	bsf	___ftdiv@f1+1,7
 13837  0E45  30FF               	movlw	255
 13838  0E46  05B1               	andwf	___ftdiv@f1,f
 13839  0E47  30FF               	movlw	255
 13840  0E48  05B2               	andwf	___ftdiv@f1+1,f
 13841  0E49  3000               	movlw	0
 13842  0E4A  05B3               	andwf	___ftdiv@f1+2,f
 13843  0E4B  17AF               	bsf	___ftdiv@f2+1,7
 13844  0E4C  30FF               	movlw	255
 13845  0E4D  05AE               	andwf	___ftdiv@f2,f
 13846  0E4E  30FF               	movlw	255
 13847  0E4F  05AF               	andwf	___ftdiv@f2+1,f
 13848  0E50  3000               	movlw	0
 13849  0E51  05B0               	andwf	___ftdiv@f2+2,f
 13850  0E52  3018               	movlw	24
 13851  0E53  00B4               	movwf	??___ftdiv
 13852  0E54  0834               	movf	??___ftdiv,w
 13853  0E55  00B8               	movwf	___ftdiv@cntr
 13854  0E56                     l5630:	
 13855  0E56  3001               	movlw	1
 13856  0E57                     u4405:	
 13857  0E57  35B9               	lslf	___ftdiv@f3,f
 13858  0E58  0DBA               	rlf	___ftdiv@f3+1,f
 13859  0E59  0DBB               	rlf	___ftdiv@f3+2,f
 13860  0E5A  0B89               	decfsz	9,f
 13861  0E5B  2E57               	goto	u4405
 13862  0E5C  0830               	movf	___ftdiv@f2+2,w
 13863  0E5D  0233               	subwf	___ftdiv@f1+2,w
 13864  0E5E  1D03               	skipz
 13865  0E5F  2E66               	goto	u4415
 13866  0E60  082F               	movf	___ftdiv@f2+1,w
 13867  0E61  0232               	subwf	___ftdiv@f1+1,w
 13868  0E62  1D03               	skipz
 13869  0E63  2E66               	goto	u4415
 13870  0E64  082E               	movf	___ftdiv@f2,w
 13871  0E65  0231               	subwf	___ftdiv@f1,w
 13872  0E66                     u4415:	
 13873  0E66  1C03               	skipc
 13874  0E67  2E6F               	goto	l5638
 13875  0E68  082E               	movf	___ftdiv@f2,w
 13876  0E69  02B1               	subwf	___ftdiv@f1,f
 13877  0E6A  082F               	movf	___ftdiv@f2+1,w
 13878  0E6B  3BB2               	subwfb	___ftdiv@f1+1,f
 13879  0E6C  0830               	movf	___ftdiv@f2+2,w
 13880  0E6D  3BB3               	subwfb	___ftdiv@f1+2,f
 13881  0E6E  1439               	bsf	___ftdiv@f3,0
 13882  0E6F                     l5638:	
 13883  0E6F  3001               	movlw	1
 13884  0E70                     u4425:	
 13885  0E70  35B1               	lslf	___ftdiv@f1,f
 13886  0E71  0DB2               	rlf	___ftdiv@f1+1,f
 13887  0E72  0DB3               	rlf	___ftdiv@f1+2,f
 13888  0E73  0B89               	decfsz	9,f
 13889  0E74  2E70               	goto	u4425
 13890  0E75  3001               	movlw	1
 13891  0E76  02B8               	subwf	___ftdiv@cntr,f
 13892  0E77  1D03               	btfss	3,2
 13893  0E78  2E56               	goto	l5630
 13894  0E79  0839               	movf	___ftdiv@f3,w
 13895  0E7A  00A0               	movwf	___ftpack@arg
 13896  0E7B  083A               	movf	___ftdiv@f3+1,w
 13897  0E7C  00A1               	movwf	___ftpack@arg+1
 13898  0E7D  083B               	movf	___ftdiv@f3+2,w
 13899  0E7E  00A2               	movwf	___ftpack@arg+2
 13900  0E7F  083C               	movf	___ftdiv@exp,w
 13901  0E80  00B4               	movwf	??___ftdiv
 13902  0E81  0834               	movf	??___ftdiv,w
 13903  0E82  00A3               	movwf	___ftpack@exp
 13904  0E83  083D               	movf	___ftdiv@sign,w
 13905  0E84  00B5               	movwf	??___ftdiv+1
 13906  0E85  0835               	movf	??___ftdiv+1,w
 13907  0E86  00A4               	movwf	___ftpack@sign
 13908  0E87  3189  216B         	fcall	___ftpack
 13909  0E89  0020               	movlb	0	; select bank0
 13910  0E8A  0820               	movf	?___ftpack,w
 13911  0E8B  00AE               	movwf	?___ftdiv
 13912  0E8C  0821               	movf	?___ftpack+1,w
 13913  0E8D  00AF               	movwf	?___ftdiv+1
 13914  0E8E  0822               	movf	?___ftpack+2,w
 13915  0E8F  00B0               	movwf	?___ftdiv+2
 13916  0E90  0008               	return
 13917  0E91                     __end_of___ftdiv:	
 13918                           
 13919                           	psect	text82
 13920  043C                     __ptext82:	
 13921 ;; *************** function ___ftadd *****************
 13922 ;; Defined at:
 13923 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;  f1              3   33[BANK0 ] float 
 13926 ;;  f2              3   36[BANK0 ] float 
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;  exp1            1   45[BANK0 ] unsigned char 
 13929 ;;  exp2            1   44[BANK0 ] unsigned char 
 13930 ;;  sign            1   43[BANK0 ] unsigned char 
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  3   33[BANK0 ] float 
 13933 ;; Registers used:
 13934 ;;		wreg, status,2, status,0, pclath, cstack
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:       13 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    6
 13947 ;; This function calls:
 13948 ;;		___ftpack
 13949 ;; This function is called by:
 13950 ;;		_getPercentValue
 13951 ;;		_setPercentValue
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           
 13956                           ;psect for function ___ftadd
 13957  043C                     ___ftadd:	
 13958                           
 13959                           ;incstack = 0
 13960                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13961  043C  0020               	movlb	0	; select bank0
 13962  043D  0841               	movf	___ftadd@f1,w
 13963  043E  00C7               	movwf	??___ftadd
 13964  043F  0842               	movf	___ftadd@f1+1,w
 13965  0440  00C8               	movwf	??___ftadd+1
 13966  0441  0843               	movf	___ftadd@f1+2,w
 13967  0442  00C9               	movwf	??___ftadd+2
 13968  0443  1003               	clrc
 13969  0444  0D48               	rlf	??___ftadd+1,w
 13970  0445  0D49               	rlf	??___ftadd+2,w
 13971  0446  00CA               	movwf	??___ftadd+3
 13972  0447  084A               	movf	??___ftadd+3,w
 13973  0448  00CD               	movwf	___ftadd@exp1
 13974  0449  0844               	movf	___ftadd@f2,w
 13975  044A  00C7               	movwf	??___ftadd
 13976  044B  0845               	movf	___ftadd@f2+1,w
 13977  044C  00C8               	movwf	??___ftadd+1
 13978  044D  0846               	movf	___ftadd@f2+2,w
 13979  044E  00C9               	movwf	??___ftadd+2
 13980  044F  1003               	clrc
 13981  0450  0D48               	rlf	??___ftadd+1,w
 13982  0451  0D49               	rlf	??___ftadd+2,w
 13983  0452  00CA               	movwf	??___ftadd+3
 13984  0453  084A               	movf	??___ftadd+3,w
 13985  0454  00CC               	movwf	___ftadd@exp2
 13986  0455  084D               	movf	___ftadd@exp1,w
 13987  0456  1903               	btfsc	3,2
 13988  0457  2C64               	goto	l5540
 13989  0458  084C               	movf	___ftadd@exp2,w
 13990  0459  024D               	subwf	___ftadd@exp1,w
 13991  045A  1803               	skipnc
 13992  045B  2C6B               	goto	l5544
 13993  045C  034D               	decf	___ftadd@exp1,w
 13994  045D  3AFF               	xorlw	255
 13995  045E  074C               	addwf	___ftadd@exp2,w
 13996  045F  00C7               	movwf	??___ftadd
 13997  0460  3019               	movlw	25
 13998  0461  0247               	subwf	??___ftadd,w
 13999  0462  1C03               	skipc
 14000  0463  2C6B               	goto	l5544
 14001  0464                     l5540:	
 14002  0464  0844               	movf	___ftadd@f2,w
 14003  0465  00C1               	movwf	?___ftadd
 14004  0466  0845               	movf	___ftadd@f2+1,w
 14005  0467  00C2               	movwf	?___ftadd+1
 14006  0468  0846               	movf	___ftadd@f2+2,w
 14007  0469  00C3               	movwf	?___ftadd+2
 14008  046A  0008               	return
 14009  046B                     l5544:	
 14010  046B  084C               	movf	___ftadd@exp2,w
 14011  046C  1903               	btfsc	3,2
 14012  046D  0008               	return
 14013  046E  084D               	movf	___ftadd@exp1,w
 14014  046F  024C               	subwf	___ftadd@exp2,w
 14015  0470  1803               	skipnc
 14016  0471  2C7A               	goto	l5550
 14017  0472  034C               	decf	___ftadd@exp2,w
 14018  0473  3AFF               	xorlw	255
 14019  0474  074D               	addwf	___ftadd@exp1,w
 14020  0475  00C7               	movwf	??___ftadd
 14021  0476  3019               	movlw	25
 14022  0477  0247               	subwf	??___ftadd,w
 14023  0478  1803               	btfsc	3,0
 14024  0479  0008               	return
 14025  047A                     l5550:	
 14026  047A  3006               	movlw	6
 14027  047B  00C7               	movwf	??___ftadd
 14028  047C  0847               	movf	??___ftadd,w
 14029  047D  00CB               	movwf	___ftadd@sign
 14030  047E  1BC3               	btfsc	___ftadd@f1+2,7
 14031  047F  17CB               	bsf	___ftadd@sign,7
 14032  0480  1BC6               	btfsc	___ftadd@f2+2,7
 14033  0481  174B               	bsf	___ftadd@sign,6
 14034  0482  17C2               	bsf	___ftadd@f1+1,7
 14035  0483  30FF               	movlw	255
 14036  0484  05C1               	andwf	___ftadd@f1,f
 14037  0485  30FF               	movlw	255
 14038  0486  05C2               	andwf	___ftadd@f1+1,f
 14039  0487  3000               	movlw	0
 14040  0488  05C3               	andwf	___ftadd@f1+2,f
 14041  0489  17C5               	bsf	___ftadd@f2+1,7
 14042  048A  30FF               	movlw	255
 14043  048B  05C4               	andwf	___ftadd@f2,f
 14044  048C  30FF               	movlw	255
 14045  048D  05C5               	andwf	___ftadd@f2+1,f
 14046  048E  3000               	movlw	0
 14047  048F  05C6               	andwf	___ftadd@f2+2,f
 14048  0490  084C               	movf	___ftadd@exp2,w
 14049  0491  024D               	subwf	___ftadd@exp1,w
 14050  0492  1803               	skipnc
 14051  0493  2CB6               	goto	l5572
 14052  0494                     l5562:	
 14053  0494  3001               	movlw	1
 14054  0495                     u4225:	
 14055  0495  35C4               	lslf	___ftadd@f2,f
 14056  0496  0DC5               	rlf	___ftadd@f2+1,f
 14057  0497  0DC6               	rlf	___ftadd@f2+2,f
 14058  0498  0B89               	decfsz	9,f
 14059  0499  2C95               	goto	u4225
 14060  049A  3001               	movlw	1
 14061  049B  02CC               	subwf	___ftadd@exp2,f
 14062  049C  084C               	movf	___ftadd@exp2,w
 14063  049D  064D               	xorwf	___ftadd@exp1,w
 14064  049E  1903               	skipnz
 14065  049F  2CB1               	goto	l5570
 14066  04A0  3001               	movlw	1
 14067  04A1  02CB               	subwf	___ftadd@sign,f
 14068  04A2  084B               	movf	___ftadd@sign,w
 14069  04A3  3907               	andlw	7
 14070  04A4  1903               	btfsc	3,2
 14071  04A5  2CB1               	goto	l5570
 14072  04A6  2C94               	goto	l5562
 14073  04A7                     l5568:	
 14074  04A7  3001               	movlw	1
 14075  04A8                     u4255:	
 14076  04A8  36C3               	lsrf	___ftadd@f1+2,f
 14077  04A9  0CC2               	rrf	___ftadd@f1+1,f
 14078  04AA  0CC1               	rrf	___ftadd@f1,f
 14079  04AB  0B89               	decfsz	9,f
 14080  04AC  2CA8               	goto	u4255
 14081  04AD  3001               	movlw	1
 14082  04AE  00C7               	movwf	??___ftadd
 14083  04AF  0847               	movf	??___ftadd,w
 14084  04B0  07CD               	addwf	___ftadd@exp1,f
 14085  04B1                     l5570:	
 14086  04B1  084D               	movf	___ftadd@exp1,w
 14087  04B2  064C               	xorwf	___ftadd@exp2,w
 14088  04B3  1903               	btfsc	3,2
 14089  04B4  2CDB               	goto	l2761
 14090  04B5  2CA7               	goto	l5568
 14091  04B6                     l5572:	
 14092  04B6  084D               	movf	___ftadd@exp1,w
 14093  04B7  024C               	subwf	___ftadd@exp2,w
 14094  04B8  1803               	skipnc
 14095  04B9  2CDB               	goto	l2761
 14096  04BA                     l5574:	
 14097  04BA  3001               	movlw	1
 14098  04BB                     u4285:	
 14099  04BB  35C1               	lslf	___ftadd@f1,f
 14100  04BC  0DC2               	rlf	___ftadd@f1+1,f
 14101  04BD  0DC3               	rlf	___ftadd@f1+2,f
 14102  04BE  0B89               	decfsz	9,f
 14103  04BF  2CBB               	goto	u4285
 14104  04C0  3001               	movlw	1
 14105  04C1  02CD               	subwf	___ftadd@exp1,f
 14106  04C2  084C               	movf	___ftadd@exp2,w
 14107  04C3  064D               	xorwf	___ftadd@exp1,w
 14108  04C4  1903               	skipnz
 14109  04C5  2CD7               	goto	l5582
 14110  04C6  3001               	movlw	1
 14111  04C7  02CB               	subwf	___ftadd@sign,f
 14112  04C8  084B               	movf	___ftadd@sign,w
 14113  04C9  3907               	andlw	7
 14114  04CA  1903               	btfsc	3,2
 14115  04CB  2CD7               	goto	l5582
 14116  04CC  2CBA               	goto	l5574
 14117  04CD                     l5580:	
 14118  04CD  3001               	movlw	1
 14119  04CE                     u4315:	
 14120  04CE  36C6               	lsrf	___ftadd@f2+2,f
 14121  04CF  0CC5               	rrf	___ftadd@f2+1,f
 14122  04D0  0CC4               	rrf	___ftadd@f2,f
 14123  04D1  0B89               	decfsz	9,f
 14124  04D2  2CCE               	goto	u4315
 14125  04D3  3001               	movlw	1
 14126  04D4  00C7               	movwf	??___ftadd
 14127  04D5  0847               	movf	??___ftadd,w
 14128  04D6  07CC               	addwf	___ftadd@exp2,f
 14129  04D7                     l5582:	
 14130  04D7  084D               	movf	___ftadd@exp1,w
 14131  04D8  064C               	xorwf	___ftadd@exp2,w
 14132  04D9  1D03               	skipz
 14133  04DA  2CCD               	goto	l5580
 14134  04DB                     l2761:	
 14135  04DB  1FCB               	btfss	___ftadd@sign,7
 14136  04DC  2CED               	goto	l5586
 14137  04DD  30FF               	movlw	255
 14138  04DE  06C1               	xorwf	___ftadd@f1,f
 14139  04DF  30FF               	movlw	255
 14140  04E0  06C2               	xorwf	___ftadd@f1+1,f
 14141  04E1  30FF               	movlw	255
 14142  04E2  06C3               	xorwf	___ftadd@f1+2,f
 14143  04E3  3001               	movlw	1
 14144  04E4  07C1               	addwf	___ftadd@f1,f
 14145  04E5  3000               	movlw	0
 14146  04E6  1803               	skipnc
 14147  04E7  3001               	movlw	1
 14148  04E8  07C2               	addwf	___ftadd@f1+1,f
 14149  04E9  3000               	movlw	0
 14150  04EA  1803               	skipnc
 14151  04EB  3001               	movlw	1
 14152  04EC  07C3               	addwf	___ftadd@f1+2,f
 14153  04ED                     l5586:	
 14154  04ED  1F4B               	btfss	___ftadd@sign,6
 14155  04EE  2CFF               	goto	l5590
 14156  04EF  30FF               	movlw	255
 14157  04F0  06C4               	xorwf	___ftadd@f2,f
 14158  04F1  30FF               	movlw	255
 14159  04F2  06C5               	xorwf	___ftadd@f2+1,f
 14160  04F3  30FF               	movlw	255
 14161  04F4  06C6               	xorwf	___ftadd@f2+2,f
 14162  04F5  3001               	movlw	1
 14163  04F6  07C4               	addwf	___ftadd@f2,f
 14164  04F7  3000               	movlw	0
 14165  04F8  1803               	skipnc
 14166  04F9  3001               	movlw	1
 14167  04FA  07C5               	addwf	___ftadd@f2+1,f
 14168  04FB  3000               	movlw	0
 14169  04FC  1803               	skipnc
 14170  04FD  3001               	movlw	1
 14171  04FE  07C6               	addwf	___ftadd@f2+2,f
 14172  04FF                     l5590:	
 14173  04FF  01CB               	clrf	___ftadd@sign
 14174  0500  0841               	movf	___ftadd@f1,w
 14175  0501  07C4               	addwf	___ftadd@f2,f
 14176  0502  0842               	movf	___ftadd@f1+1,w
 14177  0503  3DC5               	addwfc	___ftadd@f2+1,f
 14178  0504  0843               	movf	___ftadd@f1+2,w
 14179  0505  3DC6               	addwfc	___ftadd@f2+2,f
 14180  0506  1FC6               	btfss	___ftadd@f2+2,7
 14181  0507  2D1A               	goto	l5600
 14182  0508  30FF               	movlw	255
 14183  0509  06C4               	xorwf	___ftadd@f2,f
 14184  050A  30FF               	movlw	255
 14185  050B  06C5               	xorwf	___ftadd@f2+1,f
 14186  050C  30FF               	movlw	255
 14187  050D  06C6               	xorwf	___ftadd@f2+2,f
 14188  050E  3001               	movlw	1
 14189  050F  07C4               	addwf	___ftadd@f2,f
 14190  0510  3000               	movlw	0
 14191  0511  1803               	skipnc
 14192  0512  3001               	movlw	1
 14193  0513  07C5               	addwf	___ftadd@f2+1,f
 14194  0514  3000               	movlw	0
 14195  0515  1803               	skipnc
 14196  0516  3001               	movlw	1
 14197  0517  07C6               	addwf	___ftadd@f2+2,f
 14198  0518  01CB               	clrf	___ftadd@sign
 14199  0519  0ACB               	incf	___ftadd@sign,f
 14200  051A                     l5600:	
 14201  051A  0844               	movf	___ftadd@f2,w
 14202  051B  00A0               	movwf	___ftpack@arg
 14203  051C  0845               	movf	___ftadd@f2+1,w
 14204  051D  00A1               	movwf	___ftpack@arg+1
 14205  051E  0846               	movf	___ftadd@f2+2,w
 14206  051F  00A2               	movwf	___ftpack@arg+2
 14207  0520  084D               	movf	___ftadd@exp1,w
 14208  0521  00C7               	movwf	??___ftadd
 14209  0522  0847               	movf	??___ftadd,w
 14210  0523  00A3               	movwf	___ftpack@exp
 14211  0524  084B               	movf	___ftadd@sign,w
 14212  0525  00C8               	movwf	??___ftadd+1
 14213  0526  0848               	movf	??___ftadd+1,w
 14214  0527  00A4               	movwf	___ftpack@sign
 14215  0528  3189  216B         	fcall	___ftpack
 14216  052A  0020               	movlb	0	; select bank0
 14217  052B  0820               	movf	?___ftpack,w
 14218  052C  00C1               	movwf	?___ftadd
 14219  052D  0821               	movf	?___ftpack+1,w
 14220  052E  00C2               	movwf	?___ftadd+1
 14221  052F  0822               	movf	?___ftpack+2,w
 14222  0530  00C3               	movwf	?___ftadd+2
 14223  0531  0008               	return
 14224  0532                     __end_of___ftadd:	
 14225                           
 14226                           	psect	text83
 14227  1FDE                     __ptext83:	
 14228 ;; *************** function ___awtoft *****************
 14229 ;; Defined at:
 14230 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;  c               2    8[BANK0 ] int 
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;  sign            1   13[BANK0 ] unsigned char 
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  3    8[BANK0 ] float 
 14237 ;; Registers used:
 14238 ;;		wreg, status,2, status,0, pclath, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : 0/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14244 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;Total ram usage:        6 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    6
 14251 ;; This function calls:
 14252 ;;		___ftpack
 14253 ;; This function is called by:
 14254 ;;		_getPercentValue
 14255 ;;		_setPercentValue
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           
 14260                           ;psect for function ___awtoft
 14261  1FDE                     ___awtoft:	
 14262                           
 14263                           ;incstack = 0
 14264                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14265  1FDE  0020               	movlb	0	; select bank0
 14266  1FDF  01AD               	clrf	___awtoft@sign
 14267  1FE0  1FA9               	btfss	___awtoft@c+1,7
 14268  1FE1  2FE9               	goto	l5528
 14269  1FE2  09A8               	comf	___awtoft@c,f
 14270  1FE3  09A9               	comf	___awtoft@c+1,f
 14271  1FE4  0AA8               	incf	___awtoft@c,f
 14272  1FE5  1903               	skipnz
 14273  1FE6  0AA9               	incf	___awtoft@c+1,f
 14274  1FE7  01AD               	clrf	___awtoft@sign
 14275  1FE8  0AAD               	incf	___awtoft@sign,f
 14276  1FE9                     l5528:	
 14277  1FE9  0828               	movf	___awtoft@c,w
 14278  1FEA  00A0               	movwf	___ftpack@arg
 14279  1FEB  0829               	movf	___awtoft@c+1,w
 14280  1FEC  00A1               	movwf	___ftpack@arg+1
 14281  1FED  01A2               	clrf	___ftpack@arg+2
 14282  1FEE  308E               	movlw	142
 14283  1FEF  00AB               	movwf	??___awtoft
 14284  1FF0  082B               	movf	??___awtoft,w
 14285  1FF1  00A3               	movwf	___ftpack@exp
 14286  1FF2  082D               	movf	___awtoft@sign,w
 14287  1FF3  00AC               	movwf	??___awtoft+1
 14288  1FF4  082C               	movf	??___awtoft+1,w
 14289  1FF5  00A4               	movwf	___ftpack@sign
 14290  1FF6  3189  216B         	fcall	___ftpack
 14291  1FF8  0020               	movlb	0	; select bank0
 14292  1FF9  0820               	movf	?___ftpack,w
 14293  1FFA  00A8               	movwf	?___awtoft
 14294  1FFB  0821               	movf	?___ftpack+1,w
 14295  1FFC  00A9               	movwf	?___awtoft+1
 14296  1FFD  0822               	movf	?___ftpack+2,w
 14297  1FFE  00AA               	movwf	?___awtoft+2
 14298  1FFF  0008               	return
 14299  2000                     __end_of___awtoft:	
 14300                           
 14301                           	psect	text84
 14302  096B                     __ptext84:	
 14303 ;; *************** function ___ftpack *****************
 14304 ;; Defined at:
 14305 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;  arg             3    0[BANK0 ] unsigned um
 14308 ;;  exp             1    3[BANK0 ] unsigned char 
 14309 ;;  sign            1    4[BANK0 ] unsigned char 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;		None
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  3    0[BANK0 ] float 
 14314 ;; Registers used:
 14315 ;;		wreg, status,2, status,0
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14321 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;Total ram usage:        8 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; Hardware stack levels required when called:    5
 14328 ;; This function calls:
 14329 ;;		Nothing
 14330 ;; This function is called by:
 14331 ;;		___awtoft
 14332 ;;		___ftadd
 14333 ;;		___ftdiv
 14334 ;;		___ftmul
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           
 14339                           ;psect for function ___ftpack
 14340  096B                     ___ftpack:	
 14341                           
 14342                           ;incstack = 0
 14343                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14344  096B  0020               	movlb	0	; select bank0
 14345  096C  0823               	movf	___ftpack@exp,w
 14346  096D  1903               	btfsc	3,2
 14347  096E  2974               	goto	l5478
 14348  096F  0822               	movf	___ftpack@arg+2,w
 14349  0970  0421               	iorwf	___ftpack@arg+1,w
 14350  0971  0420               	iorwf	___ftpack@arg,w
 14351  0972  1D03               	skipz
 14352  0973  2985               	goto	l5484
 14353  0974                     l5478:	
 14354  0974  3000               	movlw	0
 14355  0975  00A0               	movwf	?___ftpack
 14356  0976  3000               	movlw	0
 14357  0977  00A1               	movwf	?___ftpack+1
 14358  0978  3000               	movlw	0
 14359  0979  00A2               	movwf	?___ftpack+2
 14360  097A  0008               	return
 14361  097B                     l5482:	
 14362  097B  3001               	movlw	1
 14363  097C  00A5               	movwf	??___ftpack
 14364  097D  0825               	movf	??___ftpack,w
 14365  097E  07A3               	addwf	___ftpack@exp,f
 14366  097F  3001               	movlw	1
 14367  0980                     u4015:	
 14368  0980  36A2               	lsrf	___ftpack@arg+2,f
 14369  0981  0CA1               	rrf	___ftpack@arg+1,f
 14370  0982  0CA0               	rrf	___ftpack@arg,f
 14371  0983  0B89               	decfsz	9,f
 14372  0984  2980               	goto	u4015
 14373  0985                     l5484:	
 14374  0985  30FE               	movlw	254
 14375  0986  0522               	andwf	___ftpack@arg+2,w
 14376  0987  1903               	btfsc	3,2
 14377  0988  299E               	goto	l2732
 14378  0989  297B               	goto	l5482
 14379  098A                     l5486:	
 14380  098A  3001               	movlw	1
 14381  098B  00A5               	movwf	??___ftpack
 14382  098C  0825               	movf	??___ftpack,w
 14383  098D  07A3               	addwf	___ftpack@exp,f
 14384  098E  3001               	movlw	1
 14385  098F  07A0               	addwf	___ftpack@arg,f
 14386  0990  3000               	movlw	0
 14387  0991  1803               	skipnc
 14388  0992  3001               	movlw	1
 14389  0993  07A1               	addwf	___ftpack@arg+1,f
 14390  0994  3000               	movlw	0
 14391  0995  1803               	skipnc
 14392  0996  3001               	movlw	1
 14393  0997  07A2               	addwf	___ftpack@arg+2,f
 14394  0998  3001               	movlw	1
 14395  0999                     u4035:	
 14396  0999  36A2               	lsrf	___ftpack@arg+2,f
 14397  099A  0CA1               	rrf	___ftpack@arg+1,f
 14398  099B  0CA0               	rrf	___ftpack@arg,f
 14399  099C  0B89               	decfsz	9,f
 14400  099D  2999               	goto	u4035
 14401  099E                     l2732:	
 14402  099E  30FF               	movlw	255
 14403  099F  0522               	andwf	___ftpack@arg+2,w
 14404  09A0  1903               	btfsc	3,2
 14405  09A1  29AB               	goto	l5494
 14406  09A2  298A               	goto	l5486
 14407  09A3                     l5492:	
 14408  09A3  3001               	movlw	1
 14409  09A4  02A3               	subwf	___ftpack@exp,f
 14410  09A5  3001               	movlw	1
 14411  09A6                     u4055:	
 14412  09A6  35A0               	lslf	___ftpack@arg,f
 14413  09A7  0DA1               	rlf	___ftpack@arg+1,f
 14414  09A8  0DA2               	rlf	___ftpack@arg+2,f
 14415  09A9  0B89               	decfsz	9,f
 14416  09AA  29A6               	goto	u4055
 14417  09AB                     l5494:	
 14418  09AB  1FA1               	btfss	___ftpack@arg+1,7
 14419  09AC  29A3               	goto	l5492
 14420  09AD  1823               	btfsc	___ftpack@exp,0
 14421  09AE  29B5               	goto	l2738
 14422  09AF  30FF               	movlw	255
 14423  09B0  05A0               	andwf	___ftpack@arg,f
 14424  09B1  307F               	movlw	127
 14425  09B2  05A1               	andwf	___ftpack@arg+1,f
 14426  09B3  30FF               	movlw	255
 14427  09B4  05A2               	andwf	___ftpack@arg+2,f
 14428  09B5                     l2738:	
 14429  09B5  1003               	clrc
 14430  09B6  0CA3               	rrf	___ftpack@exp,f
 14431  09B7  0823               	movf	___ftpack@exp,w
 14432  09B8  00A5               	movwf	??___ftpack
 14433  09B9  01A6               	clrf	??___ftpack+1
 14434  09BA  01A7               	clrf	??___ftpack+2
 14435  09BB  3010               	movlw	16
 14436  09BC                     u4085:	
 14437  09BC  35A5               	lslf	??___ftpack,f
 14438  09BD  0DA6               	rlf	??___ftpack+1,f
 14439  09BE  0DA7               	rlf	??___ftpack+2,f
 14440  09BF  0B89               	decfsz	9,f
 14441  09C0  29BC               	goto	u4085
 14442  09C1  0825               	movf	??___ftpack,w
 14443  09C2  04A0               	iorwf	___ftpack@arg,f
 14444  09C3  0826               	movf	??___ftpack+1,w
 14445  09C4  04A1               	iorwf	___ftpack@arg+1,f
 14446  09C5  0827               	movf	??___ftpack+2,w
 14447  09C6  04A2               	iorwf	___ftpack@arg+2,f
 14448  09C7  0824               	movf	___ftpack@sign,w
 14449  09C8  1903               	btfsc	3,2
 14450  09C9  0008               	return
 14451  09CA  17A2               	bsf	___ftpack@arg+2,7
 14452  09CB  0008               	return
 14453  09CC                     __end_of___ftpack:	
 14454                           
 14455                           	psect	text85
 14456  12D6                     __ptext85:	
 14457 ;; *************** function _setLED *****************
 14458 ;; Defined at:
 14459 ;;		line 76 in file "../src/LED_B1.c"
 14460 ;; Parameters:    Size  Location     Type
 14461 ;;  led             1    wreg     unsigned char 
 14462 ;;  command         1    2[BANK0 ] unsigned char 
 14463 ;; Auto vars:     Size  Location     Type
 14464 ;;  led             1    3[BANK0 ] unsigned char 
 14465 ;; Return value:  Size  Location     Type
 14466 ;;		None               void
 14467 ;; Registers used:
 14468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14474 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;Total ram usage:        2 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; Hardware stack levels required when called:    6
 14481 ;; This function calls:
 14482 ;;		_LedPointSelect
 14483 ;; This function is called by:
 14484 ;;		_setDimmerLights
 14485 ;;		_setLED_Initialization
 14486 ;;		_setMain_Exception
 14487 ;;		_setSw_Initialization
 14488 ;; This function uses a non-reentrant model
 14489 ;;
 14490                           
 14491                           
 14492                           ;psect for function _setLED
 14493  12D6                     _setLED:	
 14494                           
 14495                           ;incstack = 0
 14496                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14497                           ;setLED@led stored from wreg
 14498  12D6  0020               	movlb	0	; select bank0
 14499  12D7  00A3               	movwf	setLED@led
 14500                           
 14501                           ;LED_B1.c: 77: LedPointSelect(led);
 14502  12D8  0823               	movf	setLED@led,w
 14503  12D9  319C  2483  3192   	fcall	_LedPointSelect
 14504                           
 14505                           ;LED_B1.c: 78: if (command == 0) {
 14506  12DC  0020               	movlb	0	; select bank0
 14507  12DD  08A2               	movf	setLED@command,f
 14508  12DE  1D03               	skipz
 14509  12DF  2AE5               	goto	l6216
 14510                           
 14511                           ;LED_B1.c: 107: if (led == 99) {
 14512  12E0  0823               	movf	setLED@led,w
 14513  12E1  3A63               	xorlw	99
 14514  12E2  1D03               	skipz
 14515  12E3  2AE5               	goto	l6216
 14516                           
 14517                           ;LED_B1.c: 111: RB5 = 1;
 14518  12E4  168D               	bsf	13,5	;volatile
 14519  12E5                     l6216:	
 14520                           
 14521                           ;LED_B1.c: 113: }
 14522                           ;LED_B1.c: 115: }
 14523                           ;LED_B1.c: 116: if (command == 1) {
 14524  12E5  0822               	movf	setLED@command,w
 14525  12E6  3A01               	xorlw	1
 14526  12E7  1D03               	skipz
 14527  12E8  2AEE               	goto	l6222
 14528                           
 14529                           ;LED_B1.c: 145: if (led == 99) {
 14530  12E9  0823               	movf	setLED@led,w
 14531  12EA  3A63               	xorlw	99
 14532  12EB  1D03               	skipz
 14533  12EC  2AEE               	goto	l6222
 14534                           
 14535                           ;LED_B1.c: 149: RB5 = 0;
 14536  12ED  128D               	bcf	13,5	;volatile
 14537  12EE                     l6222:	
 14538                           
 14539                           ;LED_B1.c: 151: }
 14540                           ;LED_B1.c: 153: }
 14541                           ;LED_B1.c: 154: if (command == 10) {
 14542  12EE  0822               	movf	setLED@command,w
 14543  12EF  3A0A               	xorlw	10
 14544  12F0  1D03               	skipz
 14545  12F1  2B02               	goto	l6230
 14546                           
 14547                           ;LED_B1.c: 155: LED->GO = 0;
 14548  12F2  087A               	movf	_LED,w
 14549  12F3  0086               	movwf	6
 14550  12F4  3001               	movlw	1	; select bank2/3
 14551  12F5  0087               	movwf	7
 14552  12F6  1081               	bcf	1,1
 14553                           
 14554                           ;LED_B1.c: 156: LED->Time = 0;
 14555  12F7  0A7A               	incf	_LED,w
 14556  12F8  0086               	movwf	6
 14557  12F9  3001               	movlw	1	; select bank2/3
 14558  12FA  0087               	movwf	7
 14559  12FB  3000               	movlw	0
 14560  12FC  3FC0               	movwi [0]fsr1
 14561  12FD  3FC1               	movwi [1]fsr1
 14562                           
 14563                           ;LED_B1.c: 185: if (led == 99) {
 14564  12FE  0823               	movf	setLED@led,w
 14565  12FF  3A63               	xorlw	99
 14566  1300  1903               	btfsc	3,2
 14567                           
 14568                           ;LED_B1.c: 189: RB5 = 1;
 14569  1301  168D               	bsf	13,5	;volatile
 14570  1302                     l6230:	
 14571                           
 14572                           ;LED_B1.c: 191: }
 14573                           ;LED_B1.c: 193: }
 14574                           ;LED_B1.c: 194: if (command == 11) {
 14575  1302  0822               	movf	setLED@command,w
 14576  1303  3A0B               	xorlw	11
 14577  1304  1D03               	skipz
 14578  1305  0008               	return
 14579                           
 14580                           ;LED_B1.c: 195: LED->GO = 1;
 14581  1306  087A               	movf	_LED,w
 14582  1307  0086               	movwf	6
 14583  1308  3001               	movlw	1	; select bank2/3
 14584  1309  0087               	movwf	7
 14585  130A  1481               	bsf	1,1
 14586  130B  0008               	return
 14587  130C                     __end_of_setLED:	
 14588                           
 14589                           	psect	text86
 14590  1C83                     __ptext86:	
 14591 ;; *************** function _LedPointSelect *****************
 14592 ;; Defined at:
 14593 ;;		line 7 in file "../src/LED_B1.c"
 14594 ;; Parameters:    Size  Location     Type
 14595 ;;  led             1    wreg     unsigned char 
 14596 ;; Auto vars:     Size  Location     Type
 14597 ;;  led             1    1[BANK0 ] unsigned char 
 14598 ;; Return value:  Size  Location     Type
 14599 ;;		None               void
 14600 ;; Registers used:
 14601 ;;		wreg
 14602 ;; Tracked objects:
 14603 ;;		On entry : 0/0
 14604 ;;		On exit  : 0/0
 14605 ;;		Unchanged: 0/0
 14606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;Total ram usage:        2 bytes
 14612 ;; Hardware stack levels used:    1
 14613 ;; Hardware stack levels required when called:    5
 14614 ;; This function calls:
 14615 ;;		Nothing
 14616 ;; This function is called by:
 14617 ;;		_setLED_Initialization
 14618 ;;		_setLED
 14619 ;;		_setLED_Main
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           
 14624                           ;psect for function _LedPointSelect
 14625  1C83                     _LedPointSelect:	
 14626                           
 14627                           ;incstack = 0
 14628                           ; Regs used in _LedPointSelect: [wreg]
 14629                           ;LedPointSelect@led stored from wreg
 14630  1C83  0020               	movlb	0	; select bank0
 14631  1C84  00A1               	movwf	LedPointSelect@led
 14632                           
 14633                           ;LED_B1.c: 24: if (led == 99) {
 14634  1C85  0821               	movf	LedPointSelect@led,w
 14635  1C86  3A63               	xorlw	99
 14636  1C87  1D03               	skipz
 14637  1C88  0008               	return
 14638                           
 14639                           ;LED_B1.c: 25: LED = &VarErrLED;
 14640  1C89  30E2               	movlw	_VarErrLED& (0+255)
 14641  1C8A  00A0               	movwf	??_LedPointSelect
 14642  1C8B  0820               	movf	??_LedPointSelect,w
 14643  1C8C  00FA               	movwf	_LED
 14644  1C8D  0008               	return
 14645  1C8E                     __end_of_LedPointSelect:	
 14646                           
 14647                           	psect	text87
 14648  1CC6                     __ptext87:	
 14649 ;; *************** function _setDimmerLights_Line *****************
 14650 ;; Defined at:
 14651 ;;		line 667 in file "../src/Dimmer_B1.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;  lights          1    wreg     unsigned char 
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  lights          1    0[BANK0 ] unsigned char 
 14656 ;; Return value:  Size  Location     Type
 14657 ;;		None               void
 14658 ;; Registers used:
 14659 ;;		wreg
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;Total ram usage:        1 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; Hardware stack levels required when called:    5
 14672 ;; This function calls:
 14673 ;;		Nothing
 14674 ;; This function is called by:
 14675 ;;		_setDimmerLights
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           
 14680                           ;psect for function _setDimmerLights_Line
 14681  1CC6                     _setDimmerLights_Line:	
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _setDimmerLights_Line: [wreg]
 14685                           ;setDimmerLights_Line@lights stored from wreg
 14686  1CC6  0020               	movlb	0	; select bank0
 14687  1CC7  00A0               	movwf	setDimmerLights_Line@lights
 14688                           
 14689                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14690  1CC8  0023               	movlb	3	; select bank3
 14691  1CC9  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14692                           
 14693                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14694  1CCA  0020               	movlb	0	; select bank0
 14695  1CCB  0820               	movf	setDimmerLights_Line@lights,w
 14696  1CCC  3A01               	xorlw	1
 14697  1CCD  1D03               	skipz
 14698  1CCE  0008               	return
 14699                           
 14700                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14701  1CCF  0023               	movlb	3	; select bank3
 14702  1CD0  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14703  1CD1  0008               	return
 14704  1CD2                     __end_of_setDimmerLights_Line:	
 14705                           
 14706                           	psect	text88
 14707  123B                     __ptext88:	
 14708 ;; *************** function _getMain_All_Error_Status *****************
 14709 ;; Defined at:
 14710 ;;		line 376 in file "../src/Main_B1.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;  command         1    wreg     unsigned char 
 14713 ;; Auto vars:     Size  Location     Type
 14714 ;;  command         1    5[BANK0 ] unsigned char 
 14715 ;;  status          1    6[BANK0 ] unsigned char 
 14716 ;; Return value:  Size  Location     Type
 14717 ;;                  1    wreg      unsigned char 
 14718 ;; Registers used:
 14719 ;;		wreg, status,2, status,0
 14720 ;; Tracked objects:
 14721 ;;		On entry : 0/0
 14722 ;;		On exit  : 0/0
 14723 ;;		Unchanged: 0/0
 14724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;Total ram usage:        7 bytes
 14730 ;; Hardware stack levels used:    1
 14731 ;; Hardware stack levels required when called:    5
 14732 ;; This function calls:
 14733 ;;		Nothing
 14734 ;; This function is called by:
 14735 ;;		_DimmerLights_Main
 14736 ;;		_setDimmerLights
 14737 ;;		_setDimmerLights_Adj
 14738 ;;		_Load_Main
 14739 ;;		_setTemp_Main
 14740 ;;		_setRF_Main
 14741 ;;		_getRxData
 14742 ;;		_Switch_Main
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           
 14747                           ;psect for function _getMain_All_Error_Status
 14748  123B                     _getMain_All_Error_Status:	
 14749                           
 14750                           ;incstack = 0
 14751                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14752                           ;getMain_All_Error_Status@command stored from wreg
 14753  123B  0020               	movlb	0	; select bank0
 14754  123C  00A5               	movwf	getMain_All_Error_Status@command
 14755                           
 14756                           ;Main_B1.c: 377: char status = 0;
 14757  123D  01A6               	clrf	getMain_All_Error_Status@status
 14758                           
 14759                           ;Main_B1.c: 388: if (status == 0 && command != 2) {
 14760  123E  08A6               	movf	getMain_All_Error_Status@status,f
 14761  123F  1D03               	skipz
 14762  1240  2A55               	goto	l6196
 14763  1241  0825               	movf	getMain_All_Error_Status@command,w
 14764  1242  3A02               	xorlw	2
 14765  1243  1903               	skipnz
 14766  1244  2A55               	goto	l6196
 14767                           
 14768                           ;Main_B1.c: 389: status = Temp.ERROR == 1 ? 2 : 0;
 14769  1245  0021               	movlb	1	; select bank1
 14770  1246  18D6               	btfsc	_Temp^(0+128),1
 14771  1247  2A4C               	goto	l6194
 14772  1248  0020               	movlb	0	; select bank0
 14773  1249  01A1               	clrf	_getMain_All_Error_Status$3749
 14774  124A  01A2               	clrf	_getMain_All_Error_Status$3749+1
 14775  124B  2A51               	goto	l1429
 14776  124C                     l6194:	
 14777  124C  3002               	movlw	2
 14778  124D  0020               	movlb	0	; select bank0
 14779  124E  00A1               	movwf	_getMain_All_Error_Status$3749
 14780  124F  3000               	movlw	0
 14781  1250  00A2               	movwf	_getMain_All_Error_Status$3749+1
 14782  1251                     l1429:	
 14783  1251  0821               	movf	_getMain_All_Error_Status$3749,w
 14784  1252  00A0               	movwf	??_getMain_All_Error_Status
 14785  1253  0820               	movf	??_getMain_All_Error_Status,w
 14786  1254  00A6               	movwf	getMain_All_Error_Status@status
 14787  1255                     l6196:	
 14788                           
 14789                           ;Main_B1.c: 390: }
 14790                           ;Main_B1.c: 395: if (status == 0 && command != 3) {
 14791  1255  08A6               	movf	getMain_All_Error_Status@status,f
 14792  1256  1D03               	skipz
 14793  1257  2A6C               	goto	l1430
 14794  1258  0825               	movf	getMain_All_Error_Status@command,w
 14795  1259  3A03               	xorlw	3
 14796  125A  1903               	skipnz
 14797  125B  2A6C               	goto	l1430
 14798                           
 14799                           ;Main_B1.c: 396: status = Load.ERROR == 1 ? 3 : 0;
 14800  125C  0022               	movlb	2	; select bank2
 14801  125D  1AC3               	btfsc	_Load^(0+256),5
 14802  125E  2A63               	goto	l6204
 14803  125F  0020               	movlb	0	; select bank0
 14804  1260  01A3               	clrf	_getMain_All_Error_Status$3758
 14805  1261  01A4               	clrf	_getMain_All_Error_Status$3758+1
 14806  1262  2A68               	goto	l1434
 14807  1263                     l6204:	
 14808  1263  3003               	movlw	3
 14809  1264  0020               	movlb	0	; select bank0
 14810  1265  00A3               	movwf	_getMain_All_Error_Status$3758
 14811  1266  3000               	movlw	0
 14812  1267  00A4               	movwf	_getMain_All_Error_Status$3758+1
 14813  1268                     l1434:	
 14814  1268  0823               	movf	_getMain_All_Error_Status$3758,w
 14815  1269  00A0               	movwf	??_getMain_All_Error_Status
 14816  126A  0820               	movf	??_getMain_All_Error_Status,w
 14817  126B  00A6               	movwf	getMain_All_Error_Status@status
 14818  126C                     l1430:	
 14819                           
 14820                           ;Main_B1.c: 397: }
 14821                           ;Main_B1.c: 413: return status;
 14822  126C  0826               	movf	getMain_All_Error_Status@status,w
 14823  126D  0008               	return
 14824  126E                     __end_of_getMain_All_Error_Status:	
 14825                           
 14826                           	psect	text89
 14827  117F                     __ptext89:	
 14828 ;; *************** function _getMain_LightsStatus *****************
 14829 ;; Defined at:
 14830 ;;		line 349 in file "../src/Main_B1.c"
 14831 ;; Parameters:    Size  Location     Type
 14832 ;;		None
 14833 ;; Auto vars:     Size  Location     Type
 14834 ;;  i               2    6[BANK0 ] int 
 14835 ;;  status          1    8[BANK0 ] unsigned char 
 14836 ;;  count           1    5[BANK0 ] unsigned char 
 14837 ;; Return value:  Size  Location     Type
 14838 ;;                  1    wreg      unsigned char 
 14839 ;; Registers used:
 14840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14841 ;; Tracked objects:
 14842 ;;		On entry : 0/0
 14843 ;;		On exit  : 0/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14849 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14850 ;;Total ram usage:        5 bytes
 14851 ;; Hardware stack levels used:    1
 14852 ;; Hardware stack levels required when called:    7
 14853 ;; This function calls:
 14854 ;;		_getDimmerLights_Status
 14855 ;; This function is called by:
 14856 ;;		_DimmerLights_Main
 14857 ;;		_Flash_Memory_Main
 14858 ;;		_setMain_Exception
 14859 ;;		_Load_Main
 14860 ;; This function uses a non-reentrant model
 14861 ;;
 14862                           
 14863                           
 14864                           ;psect for function _getMain_LightsStatus
 14865  117F                     _getMain_LightsStatus:	
 14866                           
 14867                           ;Main_B1.c: 350: char status = 0, count = 0;
 14868                           
 14869                           ;incstack = 0
 14870                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14871  117F  0020               	movlb	0	; select bank0
 14872  1180  01A8               	clrf	getMain_LightsStatus@status
 14873  1181  01A5               	clrf	getMain_LightsStatus@count
 14874                           
 14875                           ;Main_B1.c: 353: count = 1;
 14876  1182  01A5               	clrf	getMain_LightsStatus@count
 14877  1183  0AA5               	incf	getMain_LightsStatus@count,f
 14878                           
 14879                           ;Main_B1.c: 362: for (int i = 0; i < count; i++) {
 14880  1184  01A6               	clrf	getMain_LightsStatus@i
 14881  1185  01A7               	clrf	getMain_LightsStatus@i+1
 14882  1186                     l6466:	
 14883  1186  0827               	movf	getMain_LightsStatus@i+1,w
 14884  1187  3A80               	xorlw	128
 14885  1188  00A4               	movwf	??_getMain_LightsStatus
 14886  1189  3080               	movlw	128
 14887  118A  0224               	subwf	??_getMain_LightsStatus,w
 14888  118B  1D03               	skipz
 14889  118C  298F               	goto	u5645
 14890  118D  0825               	movf	getMain_LightsStatus@count,w
 14891  118E  0226               	subwf	getMain_LightsStatus@i,w
 14892  118F                     u5645:	
 14893  118F  1803               	btfsc	3,0
 14894  1190  29A7               	goto	l6468
 14895                           
 14896                           ;Main_B1.c: 363: if (status == 0) {
 14897  1191  0020               	movlb	0	; select bank0
 14898  1192  08A8               	movf	getMain_LightsStatus@status,f
 14899  1193  1D03               	skipz
 14900  1194  29A2               	goto	l6464
 14901                           
 14902                           ;Main_B1.c: 368: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14903  1195  0826               	movf	getMain_LightsStatus@i,w
 14904  1196  3E01               	addlw	1
 14905  1197  319D  253B  3191   	fcall	_getDimmerLights_Status
 14906  119A  3A01               	xorlw	1
 14907  119B  3000               	movlw	0
 14908  119C  1903               	skipnz
 14909  119D  3001               	movlw	1
 14910  119E  0020               	movlb	0	; select bank0
 14911  119F  00A4               	movwf	??_getMain_LightsStatus
 14912  11A0  0824               	movf	??_getMain_LightsStatus,w
 14913  11A1  00A8               	movwf	getMain_LightsStatus@status
 14914  11A2                     l6464:	
 14915  11A2  3001               	movlw	1
 14916  11A3  07A6               	addwf	getMain_LightsStatus@i,f
 14917  11A4  3000               	movlw	0
 14918  11A5  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14919  11A6  2986               	goto	l6466
 14920  11A7                     l6468:	
 14921                           
 14922                           ;Main_B1.c: 370: }
 14923                           ;Main_B1.c: 371: }
 14924                           ;Main_B1.c: 372: return status;
 14925  11A7  0020               	movlb	0	; select bank0
 14926  11A8  0828               	movf	getMain_LightsStatus@status,w
 14927  11A9  0008               	return
 14928  11AA                     __end_of_getMain_LightsStatus:	
 14929                           
 14930                           	psect	text90
 14931  1C23                     __ptext90:	
 14932 ;; *************** function _getLoad_OK *****************
 14933 ;; Defined at:
 14934 ;;		line 188 in file "../src/OverLoad_B1.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;		None
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;  ok              1    0[BANK0 ] unsigned char 
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  1    wreg      unsigned char 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14951 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14952 ;;Total ram usage:        1 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    5
 14955 ;; This function calls:
 14956 ;;		Nothing
 14957 ;; This function is called by:
 14958 ;;		_DimmerLights_Main
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           
 14963                           ;psect for function _getLoad_OK
 14964  1C23                     _getLoad_OK:	
 14965                           
 14966                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 14967                           
 14968                           ;incstack = 0
 14969                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14970  1C23  3000               	movlw	0
 14971  1C24  0022               	movlb	2	; select bank2
 14972  1C25  1BC3               	btfsc	_Load^(0+256),7
 14973  1C26  3001               	movlw	1
 14974  1C27  0020               	movlb	0	; select bank0
 14975  1C28  00A0               	movwf	getLoad_OK@ok
 14976                           
 14977                           ;OverLoad_B1.c: 190: return ok;
 14978  1C29  0820               	movf	getLoad_OK@ok,w
 14979  1C2A  0008               	return
 14980  1C2B                     __end_of_getLoad_OK:	
 14981                           
 14982                           	psect	text91
 14983  1D02                     __ptext91:	
 14984 ;; *************** function _DimmerLights_Initialization *****************
 14985 ;; Defined at:
 14986 ;;		line 329 in file "../src/Dimmer_B1.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;		None
 14991 ;; Return value:  Size  Location     Type
 14992 ;;		None               void
 14993 ;; Registers used:
 14994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;Total ram usage:        1 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    7
 15007 ;; This function calls:
 15008 ;;		_Dimmer_Initialization
 15009 ;;		_setDimmerLights_Initialization
 15010 ;; This function is called by:
 15011 ;;		_main
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           
 15016                           ;psect for function _DimmerLights_Initialization
 15017  1D02                     _DimmerLights_Initialization:	
 15018                           
 15019                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15020                           
 15021                           ;incstack = 0
 15022                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15023  1D02  30C5               	movlw	_DimmerLights1& (0+255)
 15024  1D03  0020               	movlb	0	; select bank0
 15025  1D04  00A4               	movwf	??_DimmerLights_Initialization
 15026  1D05  0824               	movf	??_DimmerLights_Initialization,w
 15027  1D06  0021               	movlb	1	; select bank1
 15028  1D07  00CD               	movwf	_DimmerLights11^(0+128)
 15029                           
 15030                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15031  1D08  3001               	movlw	1
 15032  1D09  3191  2104  319D   	fcall	_setDimmerLights_Initialization
 15033                           
 15034                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15035  1D0C  319B  23CB         	fcall	_Dimmer_Initialization
 15036  1D0E  0008               	return
 15037  1D0F                     __end_of_DimmerLights_Initialization:	
 15038                           
 15039                           	psect	text92
 15040  1104                     __ptext92:	
 15041 ;; *************** function _setDimmerLights_Initialization *****************
 15042 ;; Defined at:
 15043 ;;		line 352 in file "../src/Dimmer_B1.c"
 15044 ;; Parameters:    Size  Location     Type
 15045 ;;  lights          1    wreg     unsigned char 
 15046 ;; Auto vars:     Size  Location     Type
 15047 ;;  lights          1    3[BANK0 ] unsigned char 
 15048 ;; Return value:  Size  Location     Type
 15049 ;;		None               void
 15050 ;; Registers used:
 15051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15052 ;; Tracked objects:
 15053 ;;		On entry : 0/0
 15054 ;;		On exit  : 0/0
 15055 ;;		Unchanged: 0/0
 15056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;Total ram usage:        2 bytes
 15062 ;; Hardware stack levels used:    1
 15063 ;; Hardware stack levels required when called:    6
 15064 ;; This function calls:
 15065 ;;		_DimmerLightsPointSelect
 15066 ;; This function is called by:
 15067 ;;		_DimmerLights_Initialization
 15068 ;; This function uses a non-reentrant model
 15069 ;;
 15070                           
 15071                           
 15072                           ;psect for function _setDimmerLights_Initialization
 15073  1104                     _setDimmerLights_Initialization:	
 15074                           
 15075                           ;incstack = 0
 15076                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15077                           ;setDimmerLights_Initialization@lights stored from wreg
 15078  1104  0020               	movlb	0	; select bank0
 15079  1105  00A3               	movwf	setDimmerLights_Initialization@lights
 15080                           
 15081                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15082  1106  0823               	movf	setDimmerLights_Initialization@lights,w
 15083  1107  319C  2478         	fcall	_DimmerLightsPointSelect
 15084                           
 15085                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(90*0.8));
 15086  1109  3048               	movlw	72
 15087  110A  0020               	movlb	0	; select bank0
 15088  110B  00A2               	movwf	??_setDimmerLights_Initialization
 15089  110C  086F               	movf	_DimmerLights,w
 15090  110D  3E05               	addlw	5
 15091  110E  0086               	movwf	6
 15092  110F  3001               	movlw	1	; select bank2/3
 15093  1110  0087               	movwf	7
 15094  1111  0822               	movf	??_setDimmerLights_Initialization,w
 15095  1112  0081               	movwf	1
 15096                           
 15097                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15098  1113  300C               	movlw	12
 15099  1114  00A2               	movwf	??_setDimmerLights_Initialization
 15100  1115  086F               	movf	_DimmerLights,w
 15101  1116  3E06               	addlw	6
 15102  1117  0086               	movwf	6
 15103  1118  3001               	movlw	1	; select bank2/3
 15104  1119  0087               	movwf	7
 15105  111A  0822               	movf	??_setDimmerLights_Initialization,w
 15106  111B  0081               	movwf	1
 15107                           
 15108                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15109  111C  086F               	movf	_DimmerLights,w
 15110  111D  3E05               	addlw	5
 15111  111E  0086               	movwf	6
 15112  111F  3001               	movlw	1	; select bank2/3
 15113  1120  0087               	movwf	7
 15114  1121  0801               	movf	1,w
 15115  1122  00A2               	movwf	??_setDimmerLights_Initialization
 15116  1123  086F               	movf	_DimmerLights,w
 15117  1124  3E04               	addlw	4
 15118  1125  0086               	movwf	6
 15119  1126  3001               	movlw	1	; select bank2/3
 15120  1127  0087               	movwf	7
 15121  1128  0822               	movf	??_setDimmerLights_Initialization,w
 15122  1129  0081               	movwf	1
 15123  112A  0008               	return
 15124  112B                     __end_of_setDimmerLights_Initialization:	
 15125                           
 15126                           	psect	text93
 15127  1BCB                     __ptext93:	
 15128 ;; *************** function _Dimmer_Initialization *****************
 15129 ;; Defined at:
 15130 ;;		line 892 in file "../src/Dimmer_B1.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;		None
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;		None
 15135 ;; Return value:  Size  Location     Type
 15136 ;;		None               void
 15137 ;; Registers used:
 15138 ;;		None
 15139 ;; Tracked objects:
 15140 ;;		On entry : 0/0
 15141 ;;		On exit  : 0/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;Total ram usage:        0 bytes
 15149 ;; Hardware stack levels used:    1
 15150 ;; Hardware stack levels required when called:    5
 15151 ;; This function calls:
 15152 ;;		Nothing
 15153 ;; This function is called by:
 15154 ;;		_DimmerLights_Initialization
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           
 15159                           ;psect for function _Dimmer_Initialization
 15160  1BCB                     _Dimmer_Initialization:	
 15161                           
 15162                           ;incstack = 0
 15163                           ; Regs used in _Dimmer_Initialization: []
 15164  1BCB  0008               	return
 15165  1BCC                     __end_of_Dimmer_Initialization:	
 15166                           
 15167                           	psect	text94
 15168  1BF0                     __ptext94:	
 15169 ;; *************** function _DelayOff_Main *****************
 15170 ;; Defined at:
 15171 ;;		line 41 in file "../src/DelayOff_B1.c"
 15172 ;; Parameters:    Size  Location     Type
 15173 ;;		None
 15174 ;; Auto vars:     Size  Location     Type
 15175 ;;		None
 15176 ;; Return value:  Size  Location     Type
 15177 ;;		None               void
 15178 ;; Registers used:
 15179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15180 ;; Tracked objects:
 15181 ;;		On entry : 0/0
 15182 ;;		On exit  : 0/0
 15183 ;;		Unchanged: 0/0
 15184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;Total ram usage:        0 bytes
 15190 ;; Hardware stack levels used:    1
 15191 ;; Hardware stack levels required when called:   11
 15192 ;; This function calls:
 15193 ;;		_DlyOff_Main
 15194 ;; This function is called by:
 15195 ;;		_main
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           
 15200                           ;psect for function _DelayOff_Main
 15201  1BF0                     _DelayOff_Main:	
 15202                           
 15203                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15204                           
 15205                           ;incstack = 0
 15206                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15207  1BF0  3001               	movlw	1
 15208  1BF1  3188  204E         	fcall	_DlyOff_Main
 15209  1BF3  0008               	return
 15210  1BF4                     __end_of_DelayOff_Main:	
 15211                           
 15212                           	psect	text95
 15213  084E                     __ptext95:	
 15214 ;; *************** function _DlyOff_Main *****************
 15215 ;; Defined at:
 15216 ;;		line 61 in file "../src/DelayOff_B1.c"
 15217 ;; Parameters:    Size  Location     Type
 15218 ;;  sw              1    wreg     unsigned char 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;  sw              1   24[BANK0 ] unsigned char 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;		None               void
 15223 ;; Registers used:
 15224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;Total ram usage:        3 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:   10
 15237 ;; This function calls:
 15238 ;;		_DelayOffPointSelect
 15239 ;;		_setBuz
 15240 ;;		_setDimmerLights_ErrorClose
 15241 ;; This function is called by:
 15242 ;;		_DelayOff_Main
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           
 15247                           ;psect for function _DlyOff_Main
 15248  084E                     _DlyOff_Main:	
 15249                           
 15250                           ;incstack = 0
 15251                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15252                           ;DlyOff_Main@sw stored from wreg
 15253  084E  0020               	movlb	0	; select bank0
 15254  084F  00B8               	movwf	DlyOff_Main@sw
 15255                           
 15256                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15257  0850  0838               	movf	DlyOff_Main@sw,w
 15258  0851  319C  246D  3188   	fcall	_DelayOffPointSelect
 15259                           
 15260                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15261  0854  0878               	movf	_DelayOff,w
 15262  0855  0086               	movwf	6
 15263  0856  3001               	movlw	1	; select bank2/3
 15264  0857  0087               	movwf	7
 15265  0858  1C81               	btfss	1,1
 15266  0859  0008               	return
 15267                           
 15268                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15269  085A  0878               	movf	_DelayOff,w
 15270  085B  3E02               	addlw	2
 15271  085C  0086               	movwf	6
 15272  085D  3001               	movlw	1	; select bank2/3
 15273  085E  0087               	movwf	7
 15274  085F  3001               	movlw	1
 15275  0860  0781               	addwf	1,f
 15276  0861  3141               	addfsr 1,1
 15277  0862  1803               	skipnc
 15278  0863  0A81               	incf	1,f
 15279                           
 15280                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15281  0864  0878               	movf	_DelayOff,w
 15282  0865  3E02               	addlw	2
 15283  0866  0086               	movwf	6
 15284  0867  3001               	movlw	1	; select bank2/3
 15285  0868  0087               	movwf	7
 15286  0869  3F40               	moviw [0]fsr1
 15287  086A  0020               	movlb	0	; select bank0
 15288  086B  00B6               	movwf	??_DlyOff_Main
 15289  086C  3F41               	moviw [1]fsr1
 15290  086D  00B7               	movwf	??_DlyOff_Main+1
 15291  086E  3017               	movlw	23
 15292  086F  0237               	subwf	??_DlyOff_Main+1,w
 15293  0870  3070               	movlw	112
 15294  0871  1903               	skipnz
 15295  0872  0236               	subwf	??_DlyOff_Main,w
 15296  0873  1C03               	skipc
 15297  0874  0008               	return
 15298                           
 15299                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15300  0875  0878               	movf	_DelayOff,w
 15301  0876  3E02               	addlw	2
 15302  0877  0086               	movwf	6
 15303  0878  3001               	movlw	1	; select bank2/3
 15304  0879  0087               	movwf	7
 15305  087A  3000               	movlw	0
 15306  087B  3FC0               	movwi [0]fsr1
 15307  087C  3FC1               	movwi [1]fsr1
 15308                           
 15309                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15310  087D  3001               	movlw	1
 15311  087E  00B6               	movwf	??_DlyOff_Main
 15312  087F  0878               	movf	_DelayOff,w
 15313  0880  3E04               	addlw	4
 15314  0881  0086               	movwf	6
 15315  0882  3001               	movlw	1	; select bank2/3
 15316  0883  0087               	movwf	7
 15317  0884  0836               	movf	??_DlyOff_Main,w
 15318  0885  0781               	addwf	1,f
 15319                           
 15320                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15321  0886  0878               	movf	_DelayOff,w
 15322  0887  3E04               	addlw	4
 15323  0888  0086               	movwf	6
 15324  0889  3001               	movlw	1	; select bank2/3
 15325  088A  0087               	movwf	7
 15326  088B  0A78               	incf	_DelayOff,w
 15327  088C  0084               	movwf	4
 15328  088D  3001               	movlw	1	; select bank2/3
 15329  088E  0085               	movwf	5
 15330  088F  0800               	movf	0,w
 15331  0890  0201               	subwf	1,w
 15332  0891  1C03               	skipc
 15333  0892  0008               	return
 15334                           
 15335                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15336  0893  0878               	movf	_DelayOff,w
 15337  0894  3E04               	addlw	4
 15338  0895  0086               	movwf	6
 15339  0896  3001               	movlw	1	; select bank2/3
 15340  0897  0087               	movwf	7
 15341  0898  0181               	clrf	1
 15342                           
 15343                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15344  0899  0878               	movf	_DelayOff,w
 15345  089A  0086               	movwf	6
 15346  089B  3001               	movlw	1	; select bank2/3
 15347  089C  0087               	movwf	7
 15348  089D  1081               	bcf	1,1
 15349                           
 15350                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15351  089E  3064               	movlw	100
 15352  089F  00A9               	movwf	setBuz@time
 15353  08A0  3000               	movlw	0
 15354  08A1  00AA               	movwf	setBuz@time+1
 15355  08A2  3001               	movlw	1
 15356  08A3  3196  2639  3188   	fcall	_setBuz
 15357                           
 15358                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15359  08A6  0020               	movlb	0	; select bank0
 15360  08A7  0838               	movf	DlyOff_Main@sw,w
 15361  08A8  3195  2589         	fcall	_setDimmerLights_ErrorClose
 15362  08AA  0008               	return
 15363  08AB                     __end_of_DlyOff_Main:	
 15364                           
 15365                           	psect	text96
 15366  1589                     __ptext96:	
 15367 ;; *************** function _setDimmerLights_ErrorClose *****************
 15368 ;; Defined at:
 15369 ;;		line 562 in file "../src/Dimmer_B1.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  lights          1    wreg     unsigned char 
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;  lights          1   19[BANK0 ] unsigned char 
 15374 ;;  i               2   20[BANK0 ] int 
 15375 ;;  count           1   18[BANK0 ] unsigned char 
 15376 ;; Return value:  Size  Location     Type
 15377 ;;		None               void
 15378 ;; Registers used:
 15379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15380 ;; Tracked objects:
 15381 ;;		On entry : 0/0
 15382 ;;		On exit  : 0/0
 15383 ;;		Unchanged: 0/0
 15384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;Total ram usage:        5 bytes
 15390 ;; Hardware stack levels used:    1
 15391 ;; Hardware stack levels required when called:    9
 15392 ;; This function calls:
 15393 ;;		_DimmerLightsPointSelect
 15394 ;;		_getDimmerLights_Status
 15395 ;;		_setDimmerLights_SwOff
 15396 ;; This function is called by:
 15397 ;;		_DlyOff_Main
 15398 ;;		_setMain_Exception
 15399 ;;		_setControl_Lights_Table
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _setDimmerLights_ErrorClose
 15405  1589                     _setDimmerLights_ErrorClose:	
 15406                           
 15407                           ;incstack = 0
 15408                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15409                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15410  1589  0020               	movlb	0	; select bank0
 15411  158A  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15412                           
 15413                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15414  158B  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15415  158C  3AFF               	xorlw	255
 15416  158D  1D03               	skipz
 15417  158E  2DC4               	goto	l6094
 15418                           
 15419                           ;Dimmer_B1.c: 565: char count = 1;
 15420  158F  01B2               	clrf	setDimmerLights_ErrorClose@count
 15421  1590  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15422                           
 15423                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15424  1591  01B4               	clrf	setDimmerLights_ErrorClose@i
 15425  1592  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15426  1593                     l6092:	
 15427  1593  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15428  1594  3A80               	xorlw	128
 15429  1595  00B1               	movwf	??_setDimmerLights_ErrorClose
 15430  1596  3080               	movlw	128
 15431  1597  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15432  1598  1D03               	skipz
 15433  1599  2D9C               	goto	u5095
 15434  159A  0832               	movf	setDimmerLights_ErrorClose@count,w
 15435  159B  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15436  159C                     u5095:	
 15437  159C  1803               	btfsc	3,0
 15438  159D  0008               	return
 15439                           
 15440                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15441  159E  0020               	movlb	0	; select bank0
 15442  159F  0834               	movf	setDimmerLights_ErrorClose@i,w
 15443  15A0  3E01               	addlw	1
 15444  15A1  319C  2478  3195   	fcall	_DimmerLightsPointSelect
 15445                           
 15446                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15447  15A4  0020               	movlb	0	; select bank0
 15448  15A5  0834               	movf	setDimmerLights_ErrorClose@i,w
 15449  15A6  3E01               	addlw	1
 15450  15A7  319D  253B  3195   	fcall	_getDimmerLights_Status
 15451  15AA  3A01               	xorlw	1
 15452  15AB  1D03               	skipz
 15453  15AC  2DBE               	goto	l6090
 15454                           
 15455                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15456  15AD  0020               	movlb	0	; select bank0
 15457  15AE  086F               	movf	_DimmerLights,w
 15458  15AF  3E09               	addlw	9
 15459  15B0  0086               	movwf	6
 15460  15B1  3001               	movlw	1	; select bank2/3
 15461  15B2  0087               	movwf	7
 15462  15B3  1701               	bsf	1,6
 15463                           
 15464                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15465  15B4  086F               	movf	_DimmerLights,w
 15466  15B5  0086               	movwf	6
 15467  15B6  3001               	movlw	1	; select bank2/3
 15468  15B7  0087               	movwf	7
 15469  15B8  1281               	bcf	1,5
 15470                           
 15471                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15472  15B9  0834               	movf	setDimmerLights_ErrorClose@i,w
 15473  15BA  3E01               	addlw	1
 15474  15BB  3194  24A7  3195   	fcall	_setDimmerLights_SwOff
 15475  15BE                     l6090:	
 15476  15BE  3001               	movlw	1
 15477  15BF  0020               	movlb	0	; select bank0
 15478  15C0  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15479  15C1  3000               	movlw	0
 15480  15C2  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15481  15C3  2D93               	goto	l6092
 15482  15C4                     l6094:	
 15483                           ;Dimmer_B1.c: 579: }
 15484                           ;Dimmer_B1.c: 580: }
 15485                           ;Dimmer_B1.c: 581: } else {
 15486                           
 15487                           
 15488                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15489  15C4  0020               	movlb	0	; select bank0
 15490  15C5  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15491  15C6  319C  2478  3195   	fcall	_DimmerLightsPointSelect
 15492                           
 15493                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15494  15C9  0020               	movlb	0	; select bank0
 15495  15CA  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15496  15CB  319D  253B  3195   	fcall	_getDimmerLights_Status
 15497  15CE  3A01               	xorlw	1
 15498  15CF  1D03               	skipz
 15499  15D0  0008               	return
 15500                           
 15501                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15502  15D1  0020               	movlb	0	; select bank0
 15503  15D2  086F               	movf	_DimmerLights,w
 15504  15D3  3E09               	addlw	9
 15505  15D4  0086               	movwf	6
 15506  15D5  3001               	movlw	1	; select bank2/3
 15507  15D6  0087               	movwf	7
 15508  15D7  1701               	bsf	1,6
 15509                           
 15510                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15511  15D8  086F               	movf	_DimmerLights,w
 15512  15D9  0086               	movwf	6
 15513  15DA  3001               	movlw	1	; select bank2/3
 15514  15DB  0087               	movwf	7
 15515  15DC  1281               	bcf	1,5
 15516                           
 15517                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15518  15DD  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15519  15DE  3194  24A7         	fcall	_setDimmerLights_SwOff
 15520  15E0  0008               	return
 15521  15E1                     __end_of_setDimmerLights_ErrorClose:	
 15522                           
 15523                           	psect	text97
 15524  14A7                     __ptext97:	
 15525 ;; *************** function _setDimmerLights_SwOff *****************
 15526 ;; Defined at:
 15527 ;;		line 524 in file "../src/Dimmer_B1.c"
 15528 ;; Parameters:    Size  Location     Type
 15529 ;;  sw              1    wreg     unsigned char 
 15530 ;; Auto vars:     Size  Location     Type
 15531 ;;  sw              1   16[BANK0 ] unsigned char 
 15532 ;;  command         1   15[BANK0 ] unsigned char 
 15533 ;; Return value:  Size  Location     Type
 15534 ;;		None               void
 15535 ;; Registers used:
 15536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15537 ;; Tracked objects:
 15538 ;;		On entry : 0/0
 15539 ;;		On exit  : 0/0
 15540 ;;		Unchanged: 0/0
 15541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;Total ram usage:        2 bytes
 15547 ;; Hardware stack levels used:    1
 15548 ;; Hardware stack levels required when called:    8
 15549 ;; This function calls:
 15550 ;;		_DimmerLightsPointSelect
 15551 ;;		_getDelayOff_GO
 15552 ;;		_setDelayOff_GO
 15553 ;;		_setDimmerLights_Trigger
 15554 ;;		_setDimmerLights_TriggerAdj
 15555 ;; This function is called by:
 15556 ;;		_setDimmerLights_ErrorClose
 15557 ;;		_setRFSW_Control
 15558 ;;		_setSw_Main
 15559 ;; This function uses a non-reentrant model
 15560 ;;
 15561                           
 15562                           
 15563                           ;psect for function _setDimmerLights_SwOff
 15564  14A7                     _setDimmerLights_SwOff:	
 15565                           
 15566                           ;incstack = 0
 15567                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15568                           ;setDimmerLights_SwOff@sw stored from wreg
 15569  14A7  0020               	movlb	0	; select bank0
 15570  14A8  00B0               	movwf	setDimmerLights_SwOff@sw
 15571                           
 15572                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15573  14A9  0830               	movf	setDimmerLights_SwOff@sw,w
 15574  14AA  319C  2478  3194   	fcall	_DimmerLightsPointSelect
 15575                           
 15576                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15577  14AD  0020               	movlb	0	; select bank0
 15578  14AE  086F               	movf	_DimmerLights,w
 15579  14AF  0086               	movwf	6
 15580  14B0  3001               	movlw	1	; select bank2/3
 15581  14B1  0087               	movwf	7
 15582  14B2  3000               	movlw	0
 15583  14B3  1A81               	btfsc	1,5
 15584  14B4  3001               	movlw	1
 15585  14B5  00AF               	movwf	setDimmerLights_SwOff@command
 15586                           
 15587                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15588  14B6  086F               	movf	_DimmerLights,w
 15589  14B7  3E09               	addlw	9
 15590  14B8  0086               	movwf	6
 15591  14B9  3001               	movlw	1	; select bank2/3
 15592  14BA  0087               	movwf	7
 15593  14BB  1F01               	btfss	1,6
 15594  14BC  0008               	return
 15595                           
 15596                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15597  14BD  086F               	movf	_DimmerLights,w
 15598  14BE  3E09               	addlw	9
 15599  14BF  0086               	movwf	6
 15600  14C0  3001               	movlw	1	; select bank2/3
 15601  14C1  0087               	movwf	7
 15602  14C2  1301               	bcf	1,6
 15603                           
 15604                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15605  14C3  086F               	movf	_DimmerLights,w
 15606  14C4  0086               	movwf	6
 15607  14C5  3001               	movlw	1	; select bank2/3
 15608  14C6  0087               	movwf	7
 15609  14C7  1E81               	btfss	1,5
 15610  14C8  2CDB               	goto	l5950
 15611                           
 15612                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15613  14C9  086F               	movf	_DimmerLights,w
 15614  14CA  3E09               	addlw	9
 15615  14CB  0086               	movwf	6
 15616  14CC  3001               	movlw	1	; select bank2/3
 15617  14CD  0087               	movwf	7
 15618  14CE  1F81               	btfss	1,7
 15619  14CF  0008               	return
 15620                           
 15621                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15622  14D0  086F               	movf	_DimmerLights,w
 15623  14D1  3E09               	addlw	9
 15624  14D2  0086               	movwf	6
 15625  14D3  3001               	movlw	1	; select bank2/3
 15626  14D4  0087               	movwf	7
 15627  14D5  1381               	bcf	1,7
 15628                           
 15629                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15630  14D6  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15631  14D7  0830               	movf	setDimmerLights_SwOff@sw,w
 15632  14D8  319F  273D         	fcall	_setDimmerLights_TriggerAdj
 15633                           
 15634                           ;Dimmer_B1.c: 533: }
 15635                           ;Dimmer_B1.c: 534: } else {
 15636  14DA  0008               	return
 15637  14DB                     l5950:	
 15638                           
 15639                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15640  14DB  0020               	movlb	0	; select bank0
 15641  14DC  01A2               	clrf	setDimmerLights_Trigger@command
 15642  14DD  0830               	movf	setDimmerLights_SwOff@sw,w
 15643  14DE  319F  2700  3194   	fcall	_setDimmerLights_Trigger
 15644                           
 15645                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15646  14E1  0020               	movlb	0	; select bank0
 15647  14E2  0830               	movf	setDimmerLights_SwOff@sw,w
 15648  14E3  319D  254B  3194   	fcall	_getDelayOff_GO
 15649  14E6  3A01               	xorlw	1
 15650  14E7  1D03               	skipz
 15651  14E8  0008               	return
 15652                           
 15653                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15654  14E9  0020               	movlb	0	; select bank0
 15655  14EA  01AA               	clrf	setDelayOff_GO@command
 15656  14EB  01AB               	clrf	setDelayOff_GO@value
 15657  14EC  0830               	movf	setDimmerLights_SwOff@sw,w
 15658  14ED  3197  27A3         	fcall	_setDelayOff_GO
 15659  14EF  0008               	return
 15660  14F0                     __end_of_setDimmerLights_SwOff:	
 15661                           
 15662                           	psect	text98
 15663  1F3D                     __ptext98:	
 15664 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15665 ;; Defined at:
 15666 ;;		line 773 in file "../src/Dimmer_B1.c"
 15667 ;; Parameters:    Size  Location     Type
 15668 ;;  lights          1    wreg     unsigned char 
 15669 ;;  command         1    2[BANK0 ] unsigned char 
 15670 ;; Auto vars:     Size  Location     Type
 15671 ;;  lights          1    4[BANK0 ] unsigned char 
 15672 ;; Return value:  Size  Location     Type
 15673 ;;		None               void
 15674 ;; Registers used:
 15675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15676 ;; Tracked objects:
 15677 ;;		On entry : 0/0
 15678 ;;		On exit  : 0/0
 15679 ;;		Unchanged: 0/0
 15680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15681 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15685 ;;Total ram usage:        3 bytes
 15686 ;; Hardware stack levels used:    1
 15687 ;; Hardware stack levels required when called:    6
 15688 ;; This function calls:
 15689 ;;		_DimmerLightsPointSelect
 15690 ;; This function is called by:
 15691 ;;		_setDimmerLights_SwOff
 15692 ;;		_setDimmerLights_AdjControl
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           
 15697                           ;psect for function _setDimmerLights_TriggerAdj
 15698  1F3D                     _setDimmerLights_TriggerAdj:	
 15699                           
 15700                           ;incstack = 0
 15701                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15702                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15703  1F3D  0020               	movlb	0	; select bank0
 15704  1F3E  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15705                           
 15706                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15707  1F3F  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15708  1F40  319C  2478         	fcall	_DimmerLightsPointSelect
 15709                           
 15710                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15711  1F42  0020               	movlb	0	; select bank0
 15712  1F43  086F               	movf	_DimmerLights,w
 15713  1F44  3E08               	addlw	8
 15714  1F45  0086               	movwf	6
 15715  1F46  3001               	movlw	1	; select bank2/3
 15716  1F47  0087               	movwf	7
 15717  1F48  1601               	bsf	1,4
 15718                           
 15719                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15720  1F49  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15721  1F4A  3A01               	xorlw	1
 15722  1F4B  3000               	movlw	0
 15723  1F4C  1903               	skipnz
 15724  1F4D  3001               	movlw	1
 15725  1F4E  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15726  1F4F  086F               	movf	_DimmerLights,w
 15727  1F50  3E08               	addlw	8
 15728  1F51  0086               	movwf	6
 15729  1F52  3001               	movlw	1	; select bank2/3
 15730  1F53  0087               	movwf	7
 15731  1F54  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15732  1F55  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15733  1F56  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15734  1F57  0801               	movf	1,w
 15735  1F58  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15736  1F59  39F7               	andlw	-9
 15737  1F5A  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15738  1F5B  0081               	movwf	1
 15739  1F5C  0008               	return
 15740  1F5D                     __end_of_setDimmerLights_TriggerAdj:	
 15741                           
 15742                           	psect	text99
 15743  1F00                     __ptext99:	
 15744 ;; *************** function _setDimmerLights_Trigger *****************
 15745 ;; Defined at:
 15746 ;;		line 767 in file "../src/Dimmer_B1.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;  lights          1    wreg     unsigned char 
 15749 ;;  command         1    2[BANK0 ] unsigned char 
 15750 ;; Auto vars:     Size  Location     Type
 15751 ;;  lights          1    4[BANK0 ] unsigned char 
 15752 ;; Return value:  Size  Location     Type
 15753 ;;		None               void
 15754 ;; Registers used:
 15755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15756 ;; Tracked objects:
 15757 ;;		On entry : 0/0
 15758 ;;		On exit  : 0/0
 15759 ;;		Unchanged: 0/0
 15760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15761 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;Total ram usage:        3 bytes
 15766 ;; Hardware stack levels used:    1
 15767 ;; Hardware stack levels required when called:    6
 15768 ;; This function calls:
 15769 ;;		_DimmerLightsPointSelect
 15770 ;; This function is called by:
 15771 ;;		_setDimmerLights_SwOn
 15772 ;;		_setDimmerLights_SwOff
 15773 ;; This function uses a non-reentrant model
 15774 ;;
 15775                           
 15776                           
 15777                           ;psect for function _setDimmerLights_Trigger
 15778  1F00                     _setDimmerLights_Trigger:	
 15779                           
 15780                           ;incstack = 0
 15781                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15782                           ;setDimmerLights_Trigger@lights stored from wreg
 15783  1F00  0020               	movlb	0	; select bank0
 15784  1F01  00A4               	movwf	setDimmerLights_Trigger@lights
 15785                           
 15786                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15787  1F02  0824               	movf	setDimmerLights_Trigger@lights,w
 15788  1F03  319C  2478         	fcall	_DimmerLightsPointSelect
 15789                           
 15790                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15791  1F05  0020               	movlb	0	; select bank0
 15792  1F06  086F               	movf	_DimmerLights,w
 15793  1F07  3E08               	addlw	8
 15794  1F08  0086               	movwf	6
 15795  1F09  3001               	movlw	1	; select bank2/3
 15796  1F0A  0087               	movwf	7
 15797  1F0B  1501               	bsf	1,2
 15798                           
 15799                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15800  1F0C  0822               	movf	setDimmerLights_Trigger@command,w
 15801  1F0D  3A01               	xorlw	1
 15802  1F0E  3000               	movlw	0
 15803  1F0F  1903               	skipnz
 15804  1F10  3001               	movlw	1
 15805  1F11  00A3               	movwf	??_setDimmerLights_Trigger
 15806  1F12  086F               	movf	_DimmerLights,w
 15807  1F13  3E08               	addlw	8
 15808  1F14  0086               	movwf	6
 15809  1F15  3001               	movlw	1	; select bank2/3
 15810  1F16  0087               	movwf	7
 15811  1F17  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15812  1F18  0801               	movf	1,w
 15813  1F19  0623               	xorwf	??_setDimmerLights_Trigger,w
 15814  1F1A  39FD               	andlw	-3
 15815  1F1B  0623               	xorwf	??_setDimmerLights_Trigger,w
 15816  1F1C  0081               	movwf	1
 15817  1F1D  0008               	return
 15818  1F1E                     __end_of_setDimmerLights_Trigger:	
 15819                           
 15820                           	psect	text100
 15821  17A3                     __ptext100:	
 15822 ;; *************** function _setDelayOff_GO *****************
 15823 ;; Defined at:
 15824 ;;		line 83 in file "../src/DelayOff_B1.c"
 15825 ;; Parameters:    Size  Location     Type
 15826 ;;  sw              1    wreg     unsigned char 
 15827 ;;  command         1   10[BANK0 ] unsigned char 
 15828 ;;  value           1   11[BANK0 ] unsigned char 
 15829 ;; Auto vars:     Size  Location     Type
 15830 ;;  sw              1   14[BANK0 ] unsigned char 
 15831 ;; Return value:  Size  Location     Type
 15832 ;;		None               void
 15833 ;; Registers used:
 15834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15835 ;; Tracked objects:
 15836 ;;		On entry : 0/0
 15837 ;;		On exit  : 0/0
 15838 ;;		Unchanged: 0/0
 15839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;Total ram usage:        5 bytes
 15845 ;; Hardware stack levels used:    1
 15846 ;; Hardware stack levels required when called:    7
 15847 ;; This function calls:
 15848 ;;		_DelayOffPointSelect
 15849 ;;		_DelayTimejudge
 15850 ;; This function is called by:
 15851 ;;		_setDimmerLights_SwOff
 15852 ;;		_setRFSW_Control
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function _setDelayOff_GO
 15858  17A3                     _setDelayOff_GO:	
 15859                           
 15860                           ;incstack = 0
 15861                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15862                           ;setDelayOff_GO@sw stored from wreg
 15863  17A3  0020               	movlb	0	; select bank0
 15864  17A4  00AE               	movwf	setDelayOff_GO@sw
 15865                           
 15866                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15867  17A5  082E               	movf	setDelayOff_GO@sw,w
 15868  17A6  319C  246D  3197   	fcall	_DelayOffPointSelect
 15869                           
 15870                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15871  17A9  0020               	movlb	0	; select bank0
 15872  17AA  082A               	movf	setDelayOff_GO@command,w
 15873  17AB  3A01               	xorlw	1
 15874  17AC  3000               	movlw	0
 15875  17AD  1903               	skipnz
 15876  17AE  3001               	movlw	1
 15877  17AF  00AC               	movwf	??_setDelayOff_GO
 15878  17B0  0878               	movf	_DelayOff,w
 15879  17B1  0086               	movwf	6
 15880  17B2  3001               	movlw	1	; select bank2/3
 15881  17B3  0087               	movwf	7
 15882  17B4  0DAC               	rlf	??_setDelayOff_GO,f
 15883  17B5  0801               	movf	1,w
 15884  17B6  062C               	xorwf	??_setDelayOff_GO,w
 15885  17B7  39FD               	andlw	-3
 15886  17B8  062C               	xorwf	??_setDelayOff_GO,w
 15887  17B9  0081               	movwf	1
 15888                           
 15889                           ;DelayOff_B1.c: 89: if (command == 1) {
 15890  17BA  082A               	movf	setDelayOff_GO@command,w
 15891  17BB  3A01               	xorlw	1
 15892  17BC  1D03               	skipz
 15893  17BD  2FE8               	goto	l5870
 15894                           
 15895                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15896  17BE  082B               	movf	setDelayOff_GO@value,w
 15897  17BF  3191  2155  3197   	fcall	_DelayTimejudge
 15898  17C2  0020               	movlb	0	; select bank0
 15899  17C3  00AC               	movwf	??_setDelayOff_GO
 15900  17C4  0A78               	incf	_DelayOff,w
 15901  17C5  0086               	movwf	6
 15902  17C6  3001               	movlw	1	; select bank2/3
 15903  17C7  0087               	movwf	7
 15904  17C8  082C               	movf	??_setDelayOff_GO,w
 15905  17C9  0081               	movwf	1
 15906                           
 15907                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15908  17CA  300F               	movlw	15
 15909  17CB  052B               	andwf	setDelayOff_GO@value,w
 15910  17CC  00AC               	movwf	??_setDelayOff_GO
 15911  17CD  082C               	movf	??_setDelayOff_GO,w
 15912  17CE  3A05               	xorlw	5
 15913  17CF  1903               	skipnz
 15914  17D0  2FD5               	goto	l5864
 15915  17D1  082B               	movf	setDelayOff_GO@value,w
 15916  17D2  390F               	andlw	15
 15917  17D3  1D03               	btfss	3,2
 15918  17D4  2FDB               	goto	l5868
 15919  17D5                     l5864:	
 15920  17D5  3026               	movlw	38
 15921  17D6  022B               	subwf	setDelayOff_GO@value,w
 15922  17D7  1803               	skipnc
 15923  17D8  2FDB               	goto	l5868
 15924                           
 15925                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15926  17D9  082B               	movf	setDelayOff_GO@value,w
 15927  17DA  2FDC               	goto	L8
 15928  17DB                     l5868:	
 15929                           ;DelayOff_B1.c: 93: } else {
 15930                           
 15931                           
 15932                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15933  17DB  3005               	movlw	5
 15934  17DC                     L8:	
 15935  17DC  00AC               	movwf	??_setDelayOff_GO
 15936  17DD  082E               	movf	setDelayOff_GO@sw,w
 15937  17DE  3E1A               	addlw	26
 15938  17DF  076E               	addwf	_product,w
 15939  17E0  00AD               	movwf	??_setDelayOff_GO+1
 15940  17E1  082D               	movf	??_setDelayOff_GO+1,w
 15941  17E2  0086               	movwf	6
 15942  17E3  3002               	movlw	2	; select bank4/5
 15943  17E4  0087               	movwf	7
 15944  17E5  082C               	movf	??_setDelayOff_GO,w
 15945  17E6  0081               	movwf	1
 15946                           
 15947                           ;DelayOff_B1.c: 95: }
 15948                           ;DelayOff_B1.c: 96: } else {
 15949  17E7  2FF1               	goto	l5872
 15950  17E8                     l5870:	
 15951                           
 15952                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15953  17E8  082E               	movf	setDelayOff_GO@sw,w
 15954  17E9  3E1A               	addlw	26
 15955  17EA  076E               	addwf	_product,w
 15956  17EB  00AC               	movwf	??_setDelayOff_GO
 15957  17EC  082C               	movf	??_setDelayOff_GO,w
 15958  17ED  0086               	movwf	6
 15959  17EE  3002               	movlw	2	; select bank4/5
 15960  17EF  0087               	movwf	7
 15961  17F0  0181               	clrf	1
 15962  17F1                     l5872:	
 15963                           
 15964                           ;DelayOff_B1.c: 98: }
 15965                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15966  17F1  0878               	movf	_DelayOff,w
 15967  17F2  3E02               	addlw	2
 15968  17F3  0086               	movwf	6
 15969  17F4  3001               	movlw	1	; select bank2/3
 15970  17F5  0087               	movwf	7
 15971  17F6  3000               	movlw	0
 15972  17F7  3FC0               	movwi [0]fsr1
 15973  17F8  3FC1               	movwi [1]fsr1
 15974                           
 15975                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15976  17F9  0878               	movf	_DelayOff,w
 15977  17FA  3E04               	addlw	4
 15978  17FB  0086               	movwf	6
 15979  17FC  3001               	movlw	1	; select bank2/3
 15980  17FD  0087               	movwf	7
 15981  17FE  0181               	clrf	1
 15982  17FF  0008               	return
 15983  1800                     __end_of_setDelayOff_GO:	
 15984                           
 15985                           	psect	text101
 15986  1155                     __ptext101:	
 15987 ;; *************** function _DelayTimejudge *****************
 15988 ;; Defined at:
 15989 ;;		line 112 in file "../src/DelayOff_B1.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;  value           1    wreg     unsigned char 
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;  value           1    9[BANK0 ] unsigned char 
 15994 ;;  k               1    8[BANK0 ] unsigned char 
 15995 ;;  j               1    7[BANK0 ] unsigned char 
 15996 ;;  i               1    6[BANK0 ] unsigned char 
 15997 ;; Return value:  Size  Location     Type
 15998 ;;                  1    wreg      unsigned char 
 15999 ;; Registers used:
 16000 ;;		wreg, status,2, status,0, pclath, cstack
 16001 ;; Tracked objects:
 16002 ;;		On entry : 0/0
 16003 ;;		On exit  : 0/0
 16004 ;;		Unchanged: 0/0
 16005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;Total ram usage:        6 bytes
 16011 ;; Hardware stack levels used:    1
 16012 ;; Hardware stack levels required when called:    6
 16013 ;; This function calls:
 16014 ;;		___bmul
 16015 ;; This function is called by:
 16016 ;;		_setDelayOff_GO
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           
 16021                           ;psect for function _DelayTimejudge
 16022  1155                     _DelayTimejudge:	
 16023                           
 16024                           ;incstack = 0
 16025                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16026                           ;DelayTimejudge@value stored from wreg
 16027  1155  0020               	movlb	0	; select bank0
 16028  1156  00A9               	movwf	DelayTimejudge@value
 16029                           
 16030                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16031  1157  3005               	movlw	5
 16032  1158  00A4               	movwf	??_DelayTimejudge
 16033  1159  0824               	movf	??_DelayTimejudge,w
 16034  115A  00A6               	movwf	DelayTimejudge@i
 16035  115B  01A7               	clrf	DelayTimejudge@j
 16036  115C  01A8               	clrf	DelayTimejudge@k
 16037                           
 16038                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16039  115D  3031               	movlw	49
 16040  115E  0229               	subwf	DelayTimejudge@value,w
 16041  115F  1803               	skipnc
 16042  1160  297D               	goto	l5764
 16043                           
 16044                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16045  1161  0829               	movf	DelayTimejudge@value,w
 16046  1162  390F               	andlw	15
 16047  1163  00A4               	movwf	??_DelayTimejudge
 16048  1164  0824               	movf	??_DelayTimejudge,w
 16049  1165  00A7               	movwf	DelayTimejudge@j
 16050                           
 16051                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16052  1166  0829               	movf	DelayTimejudge@value,w
 16053  1167  00A4               	movwf	??_DelayTimejudge
 16054  1168  3004               	movlw	4
 16055  1169                     u4695:	
 16056  1169  36A4               	lsrf	??_DelayTimejudge,f
 16057  116A  0B89               	decfsz	9,f
 16058  116B  2969               	goto	u4695
 16059  116C  0824               	movf	??_DelayTimejudge,w
 16060  116D  390F               	andlw	15
 16061  116E  00A5               	movwf	??_DelayTimejudge+1
 16062  116F  0825               	movf	??_DelayTimejudge+1,w
 16063  1170  00A8               	movwf	DelayTimejudge@k
 16064                           
 16065                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16066  1171  300A               	movlw	10
 16067  1172  00A4               	movwf	??_DelayTimejudge
 16068  1173  0824               	movf	??_DelayTimejudge,w
 16069  1174  00A0               	movwf	___bmul@multiplicand
 16070  1175  0828               	movf	DelayTimejudge@k,w
 16071  1176  319D  25BF         	fcall	___bmul
 16072  1178  0020               	movlb	0	; select bank0
 16073  1179  0727               	addwf	DelayTimejudge@j,w
 16074  117A  00A5               	movwf	??_DelayTimejudge+1
 16075  117B  0825               	movf	??_DelayTimejudge+1,w
 16076  117C  00A6               	movwf	DelayTimejudge@i
 16077  117D                     l5764:	
 16078                           
 16079                           ;DelayOff_B1.c: 118: }
 16080                           ;DelayOff_B1.c: 139: return i;
 16081  117D  0826               	movf	DelayTimejudge@i,w
 16082  117E  0008               	return
 16083  117F                     __end_of_DelayTimejudge:	
 16084                           
 16085                           	psect	text102
 16086  1DBF                     __ptext102:	
 16087 ;; *************** function ___bmul *****************
 16088 ;; Defined at:
 16089 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16090 ;; Parameters:    Size  Location     Type
 16091 ;;  multiplier      1    wreg     unsigned char 
 16092 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16095 ;;  product         1    2[BANK0 ] unsigned char 
 16096 ;; Return value:  Size  Location     Type
 16097 ;;                  1    wreg      unsigned char 
 16098 ;; Registers used:
 16099 ;;		wreg, status,2, status,0
 16100 ;; Tracked objects:
 16101 ;;		On entry : 0/0
 16102 ;;		On exit  : 0/0
 16103 ;;		Unchanged: 0/0
 16104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16105 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;Total ram usage:        4 bytes
 16110 ;; Hardware stack levels used:    1
 16111 ;; Hardware stack levels required when called:    5
 16112 ;; This function calls:
 16113 ;;		Nothing
 16114 ;; This function is called by:
 16115 ;;		_DelayTimejudge
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           
 16120                           ;psect for function ___bmul
 16121  1DBF                     ___bmul:	
 16122                           
 16123                           ;incstack = 0
 16124                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16125                           ;___bmul@multiplier stored from wreg
 16126  1DBF  0020               	movlb	0	; select bank0
 16127  1DC0  00A3               	movwf	___bmul@multiplier
 16128  1DC1  01A2               	clrf	___bmul@product
 16129  1DC2                     l5506:	
 16130  1DC2  1C23               	btfss	___bmul@multiplier,0
 16131  1DC3  2DC8               	goto	l5510
 16132  1DC4  0820               	movf	___bmul@multiplicand,w
 16133  1DC5  00A1               	movwf	??___bmul
 16134  1DC6  0821               	movf	??___bmul,w
 16135  1DC7  07A2               	addwf	___bmul@product,f
 16136  1DC8                     l5510:	
 16137  1DC8  1003               	clrc
 16138  1DC9  0DA0               	rlf	___bmul@multiplicand,f
 16139  1DCA  1003               	clrc
 16140  1DCB  0CA3               	rrf	___bmul@multiplier,f
 16141  1DCC  08A3               	movf	___bmul@multiplier,f
 16142  1DCD  1D03               	skipz
 16143  1DCE  2DC2               	goto	l5506
 16144  1DCF  0822               	movf	___bmul@product,w
 16145  1DD0  0008               	return
 16146  1DD1                     __end_of___bmul:	
 16147                           
 16148                           	psect	text103
 16149  1D4B                     __ptext103:	
 16150 ;; *************** function _getDelayOff_GO *****************
 16151 ;; Defined at:
 16152 ;;		line 105 in file "../src/DelayOff_B1.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;  sw              1    wreg     unsigned char 
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;  sw              1    2[BANK0 ] unsigned char 
 16157 ;;  go              1    3[BANK0 ] unsigned char 
 16158 ;; Return value:  Size  Location     Type
 16159 ;;                  1    wreg      unsigned char 
 16160 ;; Registers used:
 16161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16162 ;; Tracked objects:
 16163 ;;		On entry : 0/0
 16164 ;;		On exit  : 0/0
 16165 ;;		Unchanged: 0/0
 16166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;Total ram usage:        2 bytes
 16172 ;; Hardware stack levels used:    1
 16173 ;; Hardware stack levels required when called:    6
 16174 ;; This function calls:
 16175 ;;		_DelayOffPointSelect
 16176 ;; This function is called by:
 16177 ;;		_setDimmerLights_SwOff
 16178 ;;		_setRFSW_Control
 16179 ;; This function uses a non-reentrant model
 16180 ;;
 16181                           
 16182                           
 16183                           ;psect for function _getDelayOff_GO
 16184  1D4B                     _getDelayOff_GO:	
 16185                           
 16186                           ;incstack = 0
 16187                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16188                           ;getDelayOff_GO@sw stored from wreg
 16189  1D4B  0020               	movlb	0	; select bank0
 16190  1D4C  00A2               	movwf	getDelayOff_GO@sw
 16191                           
 16192                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16193  1D4D  0822               	movf	getDelayOff_GO@sw,w
 16194  1D4E  319C  246D         	fcall	_DelayOffPointSelect
 16195                           
 16196                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16197  1D50  0878               	movf	_DelayOff,w
 16198  1D51  0086               	movwf	6
 16199  1D52  3001               	movlw	1	; select bank2/3
 16200  1D53  0087               	movwf	7
 16201  1D54  3000               	movlw	0
 16202  1D55  1881               	btfsc	1,1
 16203  1D56  3001               	movlw	1
 16204  1D57  0020               	movlb	0	; select bank0
 16205  1D58  00A3               	movwf	getDelayOff_GO@go
 16206                           
 16207                           ;DelayOff_B1.c: 108: return go;
 16208  1D59  0823               	movf	getDelayOff_GO@go,w
 16209  1D5A  0008               	return
 16210  1D5B                     __end_of_getDelayOff_GO:	
 16211                           
 16212                           	psect	text104
 16213  1D3B                     __ptext104:	
 16214 ;; *************** function _getDimmerLights_Status *****************
 16215 ;; Defined at:
 16216 ;;		line 445 in file "../src/Dimmer_B1.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;  lights          1    wreg     unsigned char 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  lights          1    2[BANK0 ] unsigned char 
 16221 ;;  status          1    3[BANK0 ] unsigned char 
 16222 ;; Return value:  Size  Location     Type
 16223 ;;                  1    wreg      unsigned char 
 16224 ;; Registers used:
 16225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16226 ;; Tracked objects:
 16227 ;;		On entry : 0/0
 16228 ;;		On exit  : 0/0
 16229 ;;		Unchanged: 0/0
 16230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;Total ram usage:        2 bytes
 16236 ;; Hardware stack levels used:    1
 16237 ;; Hardware stack levels required when called:    6
 16238 ;; This function calls:
 16239 ;;		_DimmerLightsPointSelect
 16240 ;; This function is called by:
 16241 ;;		_setDimmerLights_ErrorClose
 16242 ;;		_getMain_LightsStatus
 16243 ;;		_setRFSW_Control
 16244 ;;		_setRFSW_AdjControl
 16245 ;; This function uses a non-reentrant model
 16246 ;;
 16247                           
 16248                           
 16249                           ;psect for function _getDimmerLights_Status
 16250  1D3B                     _getDimmerLights_Status:	
 16251                           
 16252                           ;incstack = 0
 16253                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16254                           ;getDimmerLights_Status@lights stored from wreg
 16255  1D3B  0020               	movlb	0	; select bank0
 16256  1D3C  00A2               	movwf	getDimmerLights_Status@lights
 16257                           
 16258                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16259  1D3D  0822               	movf	getDimmerLights_Status@lights,w
 16260  1D3E  319C  2478         	fcall	_DimmerLightsPointSelect
 16261                           
 16262                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16263  1D40  0020               	movlb	0	; select bank0
 16264  1D41  086F               	movf	_DimmerLights,w
 16265  1D42  0086               	movwf	6
 16266  1D43  3001               	movlw	1	; select bank2/3
 16267  1D44  0087               	movwf	7
 16268  1D45  3000               	movlw	0
 16269  1D46  1A81               	btfsc	1,5
 16270  1D47  3001               	movlw	1
 16271  1D48  00A3               	movwf	getDimmerLights_Status@status
 16272                           
 16273                           ;Dimmer_B1.c: 448: return status;
 16274  1D49  0823               	movf	getDimmerLights_Status@status,w
 16275  1D4A  0008               	return
 16276  1D4B                     __end_of_getDimmerLights_Status:	
 16277                           
 16278                           	psect	text105
 16279  1C78                     __ptext105:	
 16280 ;; *************** function _DimmerLightsPointSelect *****************
 16281 ;; Defined at:
 16282 ;;		line 310 in file "../src/Dimmer_B1.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  lights          1    wreg     unsigned char 
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;  lights          1    1[BANK0 ] unsigned char 
 16287 ;; Return value:  Size  Location     Type
 16288 ;;		None               void
 16289 ;; Registers used:
 16290 ;;		wreg
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/0
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;Total ram usage:        2 bytes
 16301 ;; Hardware stack levels used:    1
 16302 ;; Hardware stack levels required when called:    5
 16303 ;; This function calls:
 16304 ;;		Nothing
 16305 ;; This function is called by:
 16306 ;;		_setDimmerLights_Initialization
 16307 ;;		_setDimmerLights_Main
 16308 ;;		_getDimmerLights_Status
 16309 ;;		_setDimmerLights_SwOn
 16310 ;;		_setDimmerLights_SwOff
 16311 ;;		_setDimmerLights_AdjControl
 16312 ;;		_setDimmerLights_ErrorClose
 16313 ;;		_setDimmerLights
 16314 ;;		_setDimmerLights_Adj
 16315 ;;		_setDimmerLights_AdjRF
 16316 ;;		_setDimmerLights_Trigger
 16317 ;;		_setDimmerLights_TriggerAdj
 16318 ;;		_setDimmerLights_Status
 16319 ;;		_setDimmerLights_GO
 16320 ;;		_setDimmerLights_MaxmumValue
 16321 ;; This function uses a non-reentrant model
 16322 ;;
 16323                           
 16324                           
 16325                           ;psect for function _DimmerLightsPointSelect
 16326  1C78                     _DimmerLightsPointSelect:	
 16327                           
 16328                           ;incstack = 0
 16329                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16330                           ;DimmerLightsPointSelect@lights stored from wreg
 16331  1C78  0020               	movlb	0	; select bank0
 16332  1C79  00A1               	movwf	DimmerLightsPointSelect@lights
 16333                           
 16334                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16335  1C7A  0821               	movf	DimmerLightsPointSelect@lights,w
 16336  1C7B  3A01               	xorlw	1
 16337  1C7C  1D03               	skipz
 16338  1C7D  0008               	return
 16339                           
 16340                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16341  1C7E  30C5               	movlw	_DimmerLights1& (0+255)
 16342  1C7F  00A0               	movwf	??_DimmerLightsPointSelect
 16343  1C80  0820               	movf	??_DimmerLightsPointSelect,w
 16344  1C81  00EF               	movwf	_DimmerLights
 16345  1C82  0008               	return
 16346  1C83                     __end_of_DimmerLightsPointSelect:	
 16347                           
 16348                           	psect	text106
 16349  1639                     __ptext106:	
 16350 ;; *************** function _setBuz *****************
 16351 ;; Defined at:
 16352 ;;		line 22 in file "../src/Buzzer_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  count           1    wreg     unsigned char 
 16355 ;;  time            2    9[BANK0 ] int 
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;  count           1   12[BANK0 ] unsigned char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;		None               void
 16360 ;; Registers used:
 16361 ;;		wreg, status,2, status,0, pclath, cstack
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;Total ram usage:        4 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    6
 16374 ;; This function calls:
 16375 ;;		___awdiv
 16376 ;; This function is called by:
 16377 ;;		_DlyOff_Main
 16378 ;;		_setDimmerLights_Main
 16379 ;;		_setDimmerLights_SwOn
 16380 ;;		_my_MainTimer
 16381 ;;		_setMain_Exception
 16382 ;;		_setTemp_Main
 16383 ;;		_setLog_Code
 16384 ;;		_setControl_Lights_Table
 16385 ;;		_setRFSW_Control
 16386 ;;		_setSw_Main
 16387 ;; This function uses a non-reentrant model
 16388 ;;
 16389                           
 16390                           
 16391                           ;psect for function _setBuz
 16392  1639                     _setBuz:	
 16393                           
 16394                           ;incstack = 0
 16395                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16396                           ;setBuz@count stored from wreg
 16397  1639  0020               	movlb	0	; select bank0
 16398  163A  00AC               	movwf	setBuz@count
 16399                           
 16400                           ;Buzzer_B1.c: 23: time /= 10;
 16401  163B  300A               	movlw	10
 16402  163C  00A0               	movwf	___awdiv@divisor
 16403  163D  3000               	movlw	0
 16404  163E  00A1               	movwf	___awdiv@divisor+1
 16405  163F  082A               	movf	setBuz@time+1,w
 16406  1640  01A3               	clrf	___awdiv@dividend+1
 16407  1641  07A3               	addwf	___awdiv@dividend+1,f
 16408  1642  0829               	movf	setBuz@time,w
 16409  1643  01A2               	clrf	___awdiv@dividend
 16410  1644  07A2               	addwf	___awdiv@dividend,f
 16411  1645  3187  27AC  3196   	fcall	___awdiv
 16412  1648  0020               	movlb	0	; select bank0
 16413  1649  0821               	movf	?___awdiv+1,w
 16414  164A  01AA               	clrf	setBuz@time+1
 16415  164B  07AA               	addwf	setBuz@time+1,f
 16416  164C  0820               	movf	?___awdiv,w
 16417  164D  01A9               	clrf	setBuz@time
 16418  164E  07A9               	addwf	setBuz@time,f
 16419                           
 16420                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16421  164F  0021               	movlb	1	; select bank1
 16422  1650  1C2F               	btfss	_Buz1^(0+128),0
 16423  1651  0008               	return
 16424                           
 16425                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16426  1652  18AF               	btfsc	_Buz1^(0+128),1
 16427  1653  2E6A               	goto	l84
 16428                           
 16429                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16430  1654  14AF               	bsf	_Buz1^(0+128),1
 16431                           
 16432                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16433  1655  01B0               	clrf	(_Buz1^(0+128)+1)
 16434  1656  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16435                           
 16436                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16437  1657  0020               	movlb	0	; select bank0
 16438  1658  082C               	movf	setBuz@count,w
 16439  1659  00AB               	movwf	??_setBuz
 16440  165A  082B               	movf	??_setBuz,w
 16441  165B  0021               	movlb	1	; select bank1
 16442  165C  00B2               	movwf	(_Buz1^(0+128)+3)
 16443                           
 16444                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16445  165D  0020               	movlb	0	; select bank0
 16446  165E  082A               	movf	setBuz@time+1,w
 16447  165F  0021               	movlb	1	; select bank1
 16448  1660  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16449  1661  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16450  1662  0020               	movlb	0	; select bank0
 16451  1663  0829               	movf	setBuz@time,w
 16452  1664  0021               	movlb	1	; select bank1
 16453  1665  01B5               	clrf	(_Buz1^(0+128)+6)
 16454  1666  07B5               	addwf	(_Buz1^(0+128)+6),f
 16455                           
 16456                           ;Buzzer_B1.c: 30: RB3 = 1;
 16457  1667  0020               	movlb	0	; select bank0
 16458  1668  158D               	bsf	13,3	;volatile
 16459                           
 16460                           ;Buzzer_B1.c: 31: } else {
 16461  1669  0008               	return
 16462  166A                     l84:	
 16463                           
 16464                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16465  166A  19AF               	btfsc	_Buz1^(0+128),3
 16466  166B  2E7E               	goto	l86
 16467                           
 16468                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16469  166C  15AF               	bsf	_Buz1^(0+128),3
 16470                           
 16471                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16472  166D  0020               	movlb	0	; select bank0
 16473  166E  082C               	movf	setBuz@count,w
 16474  166F  00AB               	movwf	??_setBuz
 16475  1670  082B               	movf	??_setBuz,w
 16476  1671  0021               	movlb	1	; select bank1
 16477  1672  00B3               	movwf	(_Buz1^(0+128)+4)
 16478                           
 16479                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16480  1673  0020               	movlb	0	; select bank0
 16481  1674  082A               	movf	setBuz@time+1,w
 16482  1675  0021               	movlb	1	; select bank1
 16483  1676  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16484  1677  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16485  1678  0020               	movlb	0	; select bank0
 16486  1679  0829               	movf	setBuz@time,w
 16487  167A  0021               	movlb	1	; select bank1
 16488  167B  01B7               	clrf	(_Buz1^(0+128)+8)
 16489  167C  07B7               	addwf	(_Buz1^(0+128)+8),f
 16490                           
 16491                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16492  167D  0008               	return
 16493  167E                     l86:	
 16494  167E  1A2F               	btfsc	_Buz1^(0+128),4
 16495  167F  0008               	return
 16496                           
 16497                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16498  1680  162F               	bsf	_Buz1^(0+128),4
 16499                           
 16500                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16501  1681  0020               	movlb	0	; select bank0
 16502  1682  082C               	movf	setBuz@count,w
 16503  1683  00AB               	movwf	??_setBuz
 16504  1684  082B               	movf	??_setBuz,w
 16505  1685  0021               	movlb	1	; select bank1
 16506  1686  00B4               	movwf	(_Buz1^(0+128)+5)
 16507                           
 16508                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16509  1687  0020               	movlb	0	; select bank0
 16510  1688  082A               	movf	setBuz@time+1,w
 16511  1689  0021               	movlb	1	; select bank1
 16512  168A  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16513  168B  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16514  168C  0020               	movlb	0	; select bank0
 16515  168D  0829               	movf	setBuz@time,w
 16516  168E  0021               	movlb	1	; select bank1
 16517  168F  01B9               	clrf	(_Buz1^(0+128)+10)
 16518  1690  07B9               	addwf	(_Buz1^(0+128)+10),f
 16519  1691  0008               	return
 16520  1692                     __end_of_setBuz:	
 16521                           
 16522                           	psect	text107
 16523  07AC                     __ptext107:	
 16524 ;; *************** function ___awdiv *****************
 16525 ;; Defined at:
 16526 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16527 ;; Parameters:    Size  Location     Type
 16528 ;;  divisor         2    0[BANK0 ] int 
 16529 ;;  dividend        2    2[BANK0 ] int 
 16530 ;; Auto vars:     Size  Location     Type
 16531 ;;  quotient        2    7[BANK0 ] int 
 16532 ;;  sign            1    6[BANK0 ] unsigned char 
 16533 ;;  counter         1    5[BANK0 ] unsigned char 
 16534 ;; Return value:  Size  Location     Type
 16535 ;;                  2    0[BANK0 ] int 
 16536 ;; Registers used:
 16537 ;;		wreg, status,2, status,0
 16538 ;; Tracked objects:
 16539 ;;		On entry : 0/0
 16540 ;;		On exit  : 0/0
 16541 ;;		Unchanged: 0/0
 16542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;Total ram usage:        9 bytes
 16548 ;; Hardware stack levels used:    1
 16549 ;; Hardware stack levels required when called:    5
 16550 ;; This function calls:
 16551 ;;		Nothing
 16552 ;; This function is called by:
 16553 ;;		_setBuz
 16554 ;; This function uses a non-reentrant model
 16555 ;;
 16556                           
 16557                           
 16558                           ;psect for function ___awdiv
 16559  07AC                     ___awdiv:	
 16560                           
 16561                           ;incstack = 0
 16562                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16563  07AC  0020               	movlb	0	; select bank0
 16564  07AD  01A6               	clrf	___awdiv@sign
 16565  07AE  1FA1               	btfss	___awdiv@divisor+1,7
 16566  07AF  2FB7               	goto	l5788
 16567  07B0  09A0               	comf	___awdiv@divisor,f
 16568  07B1  09A1               	comf	___awdiv@divisor+1,f
 16569  07B2  0AA0               	incf	___awdiv@divisor,f
 16570  07B3  1903               	skipnz
 16571  07B4  0AA1               	incf	___awdiv@divisor+1,f
 16572  07B5  01A6               	clrf	___awdiv@sign
 16573  07B6  0AA6               	incf	___awdiv@sign,f
 16574  07B7                     l5788:	
 16575  07B7  1FA3               	btfss	___awdiv@dividend+1,7
 16576  07B8  2FC2               	goto	l5794
 16577  07B9  09A2               	comf	___awdiv@dividend,f
 16578  07BA  09A3               	comf	___awdiv@dividend+1,f
 16579  07BB  0AA2               	incf	___awdiv@dividend,f
 16580  07BC  1903               	skipnz
 16581  07BD  0AA3               	incf	___awdiv@dividend+1,f
 16582  07BE  3001               	movlw	1
 16583  07BF  00A4               	movwf	??___awdiv
 16584  07C0  0824               	movf	??___awdiv,w
 16585  07C1  06A6               	xorwf	___awdiv@sign,f
 16586  07C2                     l5794:	
 16587  07C2  01A7               	clrf	___awdiv@quotient
 16588  07C3  01A8               	clrf	___awdiv@quotient+1
 16589  07C4  0821               	movf	___awdiv@divisor+1,w
 16590  07C5  0420               	iorwf	___awdiv@divisor,w
 16591  07C6  1903               	skipnz
 16592  07C7  2FF1               	goto	l5816
 16593  07C8  01A5               	clrf	___awdiv@counter
 16594  07C9  0AA5               	incf	___awdiv@counter,f
 16595  07CA                     l5804:	
 16596  07CA  1BA1               	btfsc	___awdiv@divisor+1,7
 16597  07CB  2FD6               	goto	l5806
 16598  07CC  3001               	movlw	1
 16599  07CD                     u4745:	
 16600  07CD  35A0               	lslf	___awdiv@divisor,f
 16601  07CE  0DA1               	rlf	___awdiv@divisor+1,f
 16602  07CF  0B89               	decfsz	9,f
 16603  07D0  2FCD               	goto	u4745
 16604  07D1  3001               	movlw	1
 16605  07D2  00A4               	movwf	??___awdiv
 16606  07D3  0824               	movf	??___awdiv,w
 16607  07D4  07A5               	addwf	___awdiv@counter,f
 16608  07D5  2FCA               	goto	l5804
 16609  07D6                     l5806:	
 16610  07D6  3001               	movlw	1
 16611  07D7                     u4765:	
 16612  07D7  35A7               	lslf	___awdiv@quotient,f
 16613  07D8  0DA8               	rlf	___awdiv@quotient+1,f
 16614  07D9  0B89               	decfsz	9,f
 16615  07DA  2FD7               	goto	u4765
 16616  07DB  0821               	movf	___awdiv@divisor+1,w
 16617  07DC  0223               	subwf	___awdiv@dividend+1,w
 16618  07DD  1D03               	skipz
 16619  07DE  2FE1               	goto	u4775
 16620  07DF  0820               	movf	___awdiv@divisor,w
 16621  07E0  0222               	subwf	___awdiv@dividend,w
 16622  07E1                     u4775:	
 16623  07E1  1C03               	skipc
 16624  07E2  2FE8               	goto	l5812
 16625  07E3  0820               	movf	___awdiv@divisor,w
 16626  07E4  02A2               	subwf	___awdiv@dividend,f
 16627  07E5  0821               	movf	___awdiv@divisor+1,w
 16628  07E6  3BA3               	subwfb	___awdiv@dividend+1,f
 16629  07E7  1427               	bsf	___awdiv@quotient,0
 16630  07E8                     l5812:	
 16631  07E8  3001               	movlw	1
 16632  07E9                     u4785:	
 16633  07E9  36A1               	lsrf	___awdiv@divisor+1,f
 16634  07EA  0CA0               	rrf	___awdiv@divisor,f
 16635  07EB  0B89               	decfsz	9,f
 16636  07EC  2FE9               	goto	u4785
 16637  07ED  3001               	movlw	1
 16638  07EE  02A5               	subwf	___awdiv@counter,f
 16639  07EF  1D03               	btfss	3,2
 16640  07F0  2FD6               	goto	l5806
 16641  07F1                     l5816:	
 16642  07F1  0826               	movf	___awdiv@sign,w
 16643  07F2  1903               	btfsc	3,2
 16644  07F3  2FF9               	goto	l5820
 16645  07F4  09A7               	comf	___awdiv@quotient,f
 16646  07F5  09A8               	comf	___awdiv@quotient+1,f
 16647  07F6  0AA7               	incf	___awdiv@quotient,f
 16648  07F7  1903               	skipnz
 16649  07F8  0AA8               	incf	___awdiv@quotient+1,f
 16650  07F9                     l5820:	
 16651  07F9  0828               	movf	___awdiv@quotient+1,w
 16652  07FA  01A1               	clrf	?___awdiv+1
 16653  07FB  07A1               	addwf	?___awdiv+1,f
 16654  07FC  0827               	movf	___awdiv@quotient,w
 16655  07FD  01A0               	clrf	?___awdiv
 16656  07FE  07A0               	addwf	?___awdiv,f
 16657  07FF  0008               	return
 16658  0800                     __end_of___awdiv:	
 16659                           
 16660                           	psect	text108
 16661  1BEC                     __ptext108:	
 16662 ;; *************** function _DelayOff_Initialization *****************
 16663 ;; Defined at:
 16664 ;;		line 26 in file "../src/DelayOff_B1.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;		None
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;		None
 16669 ;; Return value:  Size  Location     Type
 16670 ;;		None               void
 16671 ;; Registers used:
 16672 ;;		wreg, status,2, status,0, pclath, cstack
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;Total ram usage:        0 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    7
 16685 ;; This function calls:
 16686 ;;		_DlyOff_Initialization
 16687 ;; This function is called by:
 16688 ;;		_main
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           
 16693                           ;psect for function _DelayOff_Initialization
 16694  1BEC                     _DelayOff_Initialization:	
 16695                           
 16696                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16697                           
 16698                           ;incstack = 0
 16699                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16700  1BEC  3001               	movlw	1
 16701  1BED  319C  240A         	fcall	_DlyOff_Initialization
 16702  1BEF  0008               	return
 16703  1BF0                     __end_of_DelayOff_Initialization:	
 16704                           
 16705                           	psect	text109
 16706  1C0A                     __ptext109:	
 16707 ;; *************** function _DlyOff_Initialization *****************
 16708 ;; Defined at:
 16709 ;;		line 56 in file "../src/DelayOff_B1.c"
 16710 ;; Parameters:    Size  Location     Type
 16711 ;;  sw              1    wreg     unsigned char 
 16712 ;; Auto vars:     Size  Location     Type
 16713 ;;  sw              1    2[BANK0 ] unsigned char 
 16714 ;; Return value:  Size  Location     Type
 16715 ;;		None               void
 16716 ;; Registers used:
 16717 ;;		wreg, status,2, status,0, pclath, cstack
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;Total ram usage:        1 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; Hardware stack levels required when called:    6
 16730 ;; This function calls:
 16731 ;;		_DelayOffPointSelect
 16732 ;; This function is called by:
 16733 ;;		_DelayOff_Initialization
 16734 ;; This function uses a non-reentrant model
 16735 ;;
 16736                           
 16737                           
 16738                           ;psect for function _DlyOff_Initialization
 16739  1C0A                     _DlyOff_Initialization:	
 16740                           
 16741                           ;incstack = 0
 16742                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16743                           ;DlyOff_Initialization@sw stored from wreg
 16744  1C0A  0020               	movlb	0	; select bank0
 16745  1C0B  00A2               	movwf	DlyOff_Initialization@sw
 16746                           
 16747                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16748  1C0C  0822               	movf	DlyOff_Initialization@sw,w
 16749  1C0D  319C  246D         	fcall	_DelayOffPointSelect
 16750  1C0F  0008               	return
 16751  1C10                     __end_of_DlyOff_Initialization:	
 16752                           
 16753                           	psect	text110
 16754  1C6D                     __ptext110:	
 16755 ;; *************** function _DelayOffPointSelect *****************
 16756 ;; Defined at:
 16757 ;;		line 7 in file "../src/DelayOff_B1.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  sw              1    wreg     unsigned char 
 16760 ;; Auto vars:     Size  Location     Type
 16761 ;;  sw              1    1[BANK0 ] unsigned char 
 16762 ;; Return value:  Size  Location     Type
 16763 ;;		None               void
 16764 ;; Registers used:
 16765 ;;		wreg
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;Total ram usage:        2 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; Hardware stack levels required when called:    5
 16778 ;; This function calls:
 16779 ;;		Nothing
 16780 ;; This function is called by:
 16781 ;;		_DlyOff_Initialization
 16782 ;;		_DlyOff_Main
 16783 ;;		_setDelayOff_GO
 16784 ;;		_getDelayOff_GO
 16785 ;; This function uses a non-reentrant model
 16786 ;;
 16787                           
 16788                           
 16789                           ;psect for function _DelayOffPointSelect
 16790  1C6D                     _DelayOffPointSelect:	
 16791                           
 16792                           ;incstack = 0
 16793                           ; Regs used in _DelayOffPointSelect: [wreg]
 16794                           ;DelayOffPointSelect@sw stored from wreg
 16795  1C6D  0020               	movlb	0	; select bank0
 16796  1C6E  00A1               	movwf	DelayOffPointSelect@sw
 16797                           
 16798                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16799  1C6F  0821               	movf	DelayOffPointSelect@sw,w
 16800  1C70  3A01               	xorlw	1
 16801  1C71  1D03               	skipz
 16802  1C72  0008               	return
 16803                           
 16804                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16805  1C73  30DD               	movlw	_DlySw1& (0+255)
 16806  1C74  00A0               	movwf	??_DelayOffPointSelect
 16807  1C75  0820               	movf	??_DelayOffPointSelect,w
 16808  1C76  00F8               	movwf	_DelayOff
 16809  1C77  0008               	return
 16810  1C78                     __end_of_DelayOffPointSelect:	
 16811                           
 16812                           	psect	text111
 16813  1E58                     __ptext111:	
 16814 ;; *************** function _CC2500_PowerOnInitial *****************
 16815 ;; Defined at:
 16816 ;;		line 119 in file "../src/CC2500_B1.c"
 16817 ;; Parameters:    Size  Location     Type
 16818 ;;		None
 16819 ;; Auto vars:     Size  Location     Type
 16820 ;;		None
 16821 ;; Return value:  Size  Location     Type
 16822 ;;		None               void
 16823 ;; Registers used:
 16824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16825 ;; Tracked objects:
 16826 ;;		On entry : 0/0
 16827 ;;		On exit  : 0/0
 16828 ;;		Unchanged: 0/0
 16829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;Total ram usage:        0 bytes
 16835 ;; Hardware stack levels used:    1
 16836 ;; Hardware stack levels required when called:    8
 16837 ;; This function calls:
 16838 ;;		_CC2500_ClearRXFIFO
 16839 ;;		_CC2500_ClearTXFIFO
 16840 ;;		_CC2500_FrequencyCabr
 16841 ;;		_CC2500_InitPATable
 16842 ;;		_CC2500_InitSetREG
 16843 ;;		_CC2500_PowerRST
 16844 ;;		_CC2500_SIDLEMode
 16845 ;; This function is called by:
 16846 ;;		_main
 16847 ;; This function uses a non-reentrant model
 16848 ;;
 16849                           
 16850                           
 16851                           ;psect for function _CC2500_PowerOnInitial
 16852  1E58                     _CC2500_PowerOnInitial:	
 16853                           
 16854                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16855                           
 16856                           ;incstack = 0
 16857                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16858  1E58  3194  2464  319E   	fcall	_CC2500_PowerRST
 16859                           
 16860                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16861  1E5B  3191  212B  319E   	fcall	_CC2500_InitSetREG
 16862                           
 16863                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16864  1E5E  319F  271E  319E   	fcall	_CC2500_InitPATable
 16865                           
 16866                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16867  1E61  319B  23E4  319E   	fcall	_CC2500_ClearTXFIFO
 16868                           
 16869                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16870  1E64  319B  23E0  319E   	fcall	_CC2500_ClearRXFIFO
 16871                           
 16872                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16873  1E67  319C  24BA  319E   	fcall	_CC2500_FrequencyCabr
 16874                           
 16875                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16876  1E6A  319B  23E8         	fcall	_CC2500_SIDLEMode
 16877  1E6C  0008               	return
 16878  1E6D                     __end_of_CC2500_PowerOnInitial:	
 16879                           
 16880                           	psect	text112
 16881  1BE8                     __ptext112:	
 16882 ;; *************** function _CC2500_SIDLEMode *****************
 16883 ;; Defined at:
 16884 ;;		line 209 in file "../src/CC2500_B1.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;		None
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;		None
 16889 ;; Return value:  Size  Location     Type
 16890 ;;		None               void
 16891 ;; Registers used:
 16892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;Total ram usage:        0 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    7
 16905 ;; This function calls:
 16906 ;;		_CC2500_WriteCommand
 16907 ;; This function is called by:
 16908 ;;		_CC2500_PowerOnInitial
 16909 ;; This function uses a non-reentrant model
 16910 ;;
 16911                           
 16912                           
 16913                           ;psect for function _CC2500_SIDLEMode
 16914  1BE8                     _CC2500_SIDLEMode:	
 16915                           
 16916                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16917                           
 16918                           ;incstack = 0
 16919                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16920  1BE8  3036               	movlw	54
 16921  1BE9  319E  26B1         	fcall	_CC2500_WriteCommand
 16922  1BEB  0008               	return
 16923  1BEC                     __end_of_CC2500_SIDLEMode:	
 16924                           
 16925                           	psect	text113
 16926  1464                     __ptext113:	
 16927 ;; *************** function _CC2500_PowerRST *****************
 16928 ;; Defined at:
 16929 ;;		line 132 in file "../src/CC2500_B1.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;		None
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;		None
 16934 ;; Return value:  Size  Location     Type
 16935 ;;		None               void
 16936 ;; Registers used:
 16937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16938 ;; Tracked objects:
 16939 ;;		On entry : 0/0
 16940 ;;		On exit  : 0/0
 16941 ;;		Unchanged: 0/0
 16942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;Total ram usage:        1 bytes
 16948 ;; Hardware stack levels used:    1
 16949 ;; Hardware stack levels required when called:    6
 16950 ;; This function calls:
 16951 ;;		_CC2500_WriteByte
 16952 ;;		_DelayTime_1us
 16953 ;;		_Timeout_Counter
 16954 ;;		_set_TimeoutCleared
 16955 ;; This function is called by:
 16956 ;;		_CC2500_PowerOnInitial
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function _CC2500_PowerRST
 16962  1464                     _CC2500_PowerRST:	
 16963                           
 16964                           ;CC2500_B1.c: 133: RC3 = 0;
 16965                           
 16966                           ;incstack = 0
 16967                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16968  1464  0020               	movlb	0	; select bank0
 16969  1465  118E               	bcf	14,3	;volatile
 16970                           
 16971                           ;CC2500_B1.c: 134: RC4 = 0;
 16972  1466  120E               	bcf	14,4	;volatile
 16973                           
 16974                           ;CC2500_B1.c: 135: RC0 = 1;
 16975  1467  140E               	bsf	14,0	;volatile
 16976                           
 16977                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16978  1468  300A               	movlw	10
 16979  1469  00A0               	movwf	DelayTime_1us@count
 16980  146A  3000               	movlw	0
 16981  146B  00A1               	movwf	DelayTime_1us@count+1
 16982  146C  3190  20DE  3194   	fcall	_DelayTime_1us
 16983                           
 16984                           ;CC2500_B1.c: 137: RC0 = 0;
 16985  146F  0020               	movlb	0	; select bank0
 16986  1470  100E               	bcf	14,0	;volatile
 16987                           
 16988                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16989  1471  300A               	movlw	10
 16990  1472  00A0               	movwf	DelayTime_1us@count
 16991  1473  3000               	movlw	0
 16992  1474  00A1               	movwf	DelayTime_1us@count+1
 16993  1475  3190  20DE  3194   	fcall	_DelayTime_1us
 16994                           
 16995                           ;CC2500_B1.c: 139: RC0 = 1;
 16996  1478  0020               	movlb	0	; select bank0
 16997  1479  140E               	bsf	14,0	;volatile
 16998                           
 16999                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17000  147A  3028               	movlw	40
 17001  147B  00A0               	movwf	DelayTime_1us@count
 17002  147C  3000               	movlw	0
 17003  147D  00A1               	movwf	DelayTime_1us@count+1
 17004  147E  3190  20DE  3194   	fcall	_DelayTime_1us
 17005                           
 17006                           ;CC2500_B1.c: 141: RC0 = 0;
 17007  1481  0020               	movlb	0	; select bank0
 17008  1482  100E               	bcf	14,0	;volatile
 17009                           
 17010                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17011  1483  3030               	movlw	48
 17012  1484  00A6               	movwf	??_CC2500_PowerRST
 17013  1485  0826               	movf	??_CC2500_PowerRST,w
 17014  1486  00FB               	movwf	_SPI0Buffer
 17015                           
 17016                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17017  1487  2C8B               	goto	l6752
 17018  1488                     l6750:	
 17019                           
 17020                           ;CC2500_B1.c: 144: Timeout_Counter();
 17021  1488  319E  2643  3194   	fcall	_Timeout_Counter
 17022  148B                     l6752:	
 17023  148B  0020               	movlb	0	; select bank0
 17024  148C  1E8E               	btfss	14,5	;volatile
 17025  148D  2C91               	goto	l6756
 17026  148E  0021               	movlb	1	; select bank1
 17027  148F  1D2C               	btfss	(_myMain^(0+128)+12),2
 17028  1490  2C88               	goto	l6750
 17029  1491                     l6756:	
 17030                           
 17031                           ;CC2500_B1.c: 145: };
 17032                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17033  1491  319C  2400  3194   	fcall	_set_TimeoutCleared
 17034                           
 17035                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17036  1494  319E  261B  3194   	fcall	_CC2500_WriteByte
 17037                           
 17038                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17039  1497  2C9B               	goto	l6762
 17040  1498                     l6760:	
 17041                           
 17042                           ;CC2500_B1.c: 149: Timeout_Counter();
 17043  1498  319E  2643  3194   	fcall	_Timeout_Counter
 17044  149B                     l6762:	
 17045  149B  0020               	movlb	0	; select bank0
 17046  149C  1E8E               	btfss	14,5	;volatile
 17047  149D  2CA1               	goto	l6766
 17048  149E  0021               	movlb	1	; select bank1
 17049  149F  1D2C               	btfss	(_myMain^(0+128)+12),2
 17050  14A0  2C98               	goto	l6760
 17051  14A1                     l6766:	
 17052                           
 17053                           ;CC2500_B1.c: 150: };
 17054                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17055  14A1  319C  2400         	fcall	_set_TimeoutCleared
 17056                           
 17057                           ;CC2500_B1.c: 152: RC4 = 0;
 17058  14A3  0020               	movlb	0	; select bank0
 17059  14A4  120E               	bcf	14,4	;volatile
 17060                           
 17061                           ;CC2500_B1.c: 153: RC0 = 1;
 17062  14A5  140E               	bsf	14,0	;volatile
 17063  14A6  0008               	return
 17064  14A7                     __end_of_CC2500_PowerRST:	
 17065                           
 17066                           	psect	text114
 17067  112B                     __ptext114:	
 17068 ;; *************** function _CC2500_InitSetREG *****************
 17069 ;; Defined at:
 17070 ;;		line 159 in file "../src/CC2500_B1.c"
 17071 ;; Parameters:    Size  Location     Type
 17072 ;;		None
 17073 ;; Auto vars:     Size  Location     Type
 17074 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17075 ;;  temp2           1    7[BANK0 ] unsigned char 
 17076 ;;  temp1           1    6[BANK0 ] unsigned char 
 17077 ;; Return value:  Size  Location     Type
 17078 ;;		None               void
 17079 ;; Registers used:
 17080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;Total ram usage:        4 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    7
 17093 ;; This function calls:
 17094 ;;		_CC2500_WriteREG
 17095 ;; This function is called by:
 17096 ;;		_CC2500_PowerOnInitial
 17097 ;; This function uses a non-reentrant model
 17098 ;;
 17099                           
 17100                           
 17101                           ;psect for function _CC2500_InitSetREG
 17102  112B                     _CC2500_InitSetREG:	
 17103                           
 17104                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17105                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17106                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17107                           
 17108                           ;incstack = 0
 17109                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17110  112B  0020               	movlb	0	; select bank0
 17111  112C  01A8               	clrf	CC2500_InitSetREG@loop_c
 17112  112D                     L9:	
 17113  112D  302F               	movlw	47
 17114  112E  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17115  112F  1803               	btfsc	3,0
 17116  1130  0008               	return
 17117                           
 17118                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17119  1131  0828               	movf	CC2500_InitSetREG@loop_c,w
 17120  1132  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17121  1133  0084               	movwf	4
 17122  1134  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17123  1135  1803               	skipnc
 17124  1136  3E01               	addlw	1
 17125  1137  0085               	movwf	5
 17126  1138  0800               	movf	0,w	;code access
 17127  1139  00A5               	movwf	??_CC2500_InitSetREG
 17128  113A  0825               	movf	??_CC2500_InitSetREG,w
 17129  113B  00A6               	movwf	CC2500_InitSetREG@temp1
 17130                           
 17131                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17132  113C  0828               	movf	CC2500_InitSetREG@loop_c,w
 17133  113D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17134  113E  0084               	movwf	4
 17135  113F  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17136  1140  1803               	skipnc
 17137  1141  3E01               	addlw	1
 17138  1142  0085               	movwf	5
 17139  1143  0800               	movf	0,w	;code access
 17140  1144  00A5               	movwf	??_CC2500_InitSetREG
 17141  1145  0825               	movf	??_CC2500_InitSetREG,w
 17142  1146  00A7               	movwf	CC2500_InitSetREG@temp2
 17143                           
 17144                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17145  1147  0827               	movf	CC2500_InitSetREG@temp2,w
 17146  1148  00A5               	movwf	??_CC2500_InitSetREG
 17147  1149  0825               	movf	??_CC2500_InitSetREG,w
 17148  114A  00A2               	movwf	CC2500_WriteREG@value
 17149  114B  0826               	movf	CC2500_InitSetREG@temp1,w
 17150  114C  319F  27BD  3191   	fcall	_CC2500_WriteREG
 17151  114F  3001               	movlw	1
 17152  1150  0020               	movlb	0	; select bank0
 17153  1151  00A5               	movwf	??_CC2500_InitSetREG
 17154  1152  0825               	movf	??_CC2500_InitSetREG,w
 17155  1153  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17156  1154  292D               	goto	L9
 17157  1155                     __end_of_CC2500_InitSetREG:	
 17158                           
 17159                           	psect	text115
 17160  1F1E                     __ptext115:	
 17161 ;; *************** function _CC2500_InitPATable *****************
 17162 ;; Defined at:
 17163 ;;		line 174 in file "../src/CC2500_B1.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;		None
 17166 ;; Auto vars:     Size  Location     Type
 17167 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17168 ;;  temp            1    6[BANK0 ] unsigned char 
 17169 ;; Return value:  Size  Location     Type
 17170 ;;		None               void
 17171 ;; Registers used:
 17172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;Total ram usage:        3 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    7
 17185 ;; This function calls:
 17186 ;;		_CC2500_WriteREG
 17187 ;; This function is called by:
 17188 ;;		_CC2500_PowerOnInitial
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _CC2500_InitPATable
 17194  1F1E                     _CC2500_InitPATable:	
 17195                           
 17196                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17197                           ;CC2500_B1.c: 176: unsigned char temp;
 17198                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17199                           
 17200                           ;incstack = 0
 17201                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17202  1F1E  0020               	movlb	0	; select bank0
 17203  1F1F  01A7               	clrf	CC2500_InitPATable@loop_d
 17204  1F20                     L10:	
 17205  1F20  3008               	movlw	8
 17206  1F21  0227               	subwf	CC2500_InitPATable@loop_d,w
 17207  1F22  1803               	btfsc	3,0
 17208  1F23  0008               	return
 17209                           
 17210                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17211  1F24  0827               	movf	CC2500_InitPATable@loop_d,w
 17212  1F25  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17213  1F26  0084               	movwf	4
 17214  1F27  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17215  1F28  1803               	skipnc
 17216  1F29  3E01               	addlw	1
 17217  1F2A  0085               	movwf	5
 17218  1F2B  0800               	movf	0,w	;code access
 17219  1F2C  00A5               	movwf	??_CC2500_InitPATable
 17220  1F2D  0825               	movf	??_CC2500_InitPATable,w
 17221  1F2E  00A6               	movwf	CC2500_InitPATable@temp
 17222                           
 17223                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17224  1F2F  0826               	movf	CC2500_InitPATable@temp,w
 17225  1F30  00A5               	movwf	??_CC2500_InitPATable
 17226  1F31  0825               	movf	??_CC2500_InitPATable,w
 17227  1F32  00A2               	movwf	CC2500_WriteREG@value
 17228  1F33  303E               	movlw	62
 17229  1F34  319F  27BD  319F   	fcall	_CC2500_WriteREG
 17230  1F37  3001               	movlw	1
 17231  1F38  0020               	movlb	0	; select bank0
 17232  1F39  00A5               	movwf	??_CC2500_InitPATable
 17233  1F3A  0825               	movf	??_CC2500_InitPATable,w
 17234  1F3B  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17235  1F3C  2F20               	goto	L10
 17236  1F3D                     __end_of_CC2500_InitPATable:	
 17237                           
 17238                           	psect	text116
 17239  1FBD                     __ptext116:	
 17240 ;; *************** function _CC2500_WriteREG *****************
 17241 ;; Defined at:
 17242 ;;		line 251 in file "../src/CC2500_B1.c"
 17243 ;; Parameters:    Size  Location     Type
 17244 ;;  w_addr          1    wreg     unsigned char 
 17245 ;;  value           1    2[BANK0 ] unsigned char 
 17246 ;; Auto vars:     Size  Location     Type
 17247 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17248 ;; Return value:  Size  Location     Type
 17249 ;;		None               void
 17250 ;; Registers used:
 17251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17252 ;; Tracked objects:
 17253 ;;		On entry : 0/0
 17254 ;;		On exit  : 0/0
 17255 ;;		Unchanged: 0/0
 17256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;Total ram usage:        3 bytes
 17262 ;; Hardware stack levels used:    1
 17263 ;; Hardware stack levels required when called:    6
 17264 ;; This function calls:
 17265 ;;		_CC2500_WriteByte
 17266 ;;		_Timeout_Counter
 17267 ;;		_set_TimeoutCleared
 17268 ;; This function is called by:
 17269 ;;		_CC2500_InitSetREG
 17270 ;;		_CC2500_InitPATable
 17271 ;; This function uses a non-reentrant model
 17272 ;;
 17273                           
 17274                           
 17275                           ;psect for function _CC2500_WriteREG
 17276  1FBD                     _CC2500_WriteREG:	
 17277                           
 17278                           ;incstack = 0
 17279                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17280                           ;CC2500_WriteREG@w_addr stored from wreg
 17281  1FBD  0020               	movlb	0	; select bank0
 17282  1FBE  00A4               	movwf	CC2500_WriteREG@w_addr
 17283                           
 17284                           ;CC2500_B1.c: 252: RC0 = 0;
 17285  1FBF  100E               	bcf	14,0	;volatile
 17286                           
 17287                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17288  1FC0  0824               	movf	CC2500_WriteREG@w_addr,w
 17289  1FC1  00A3               	movwf	??_CC2500_WriteREG
 17290  1FC2  0823               	movf	??_CC2500_WriteREG,w
 17291  1FC3  00FB               	movwf	_SPI0Buffer
 17292                           
 17293                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17294  1FC4  2FC8               	goto	l6420
 17295  1FC5                     l6418:	
 17296                           
 17297                           ;CC2500_B1.c: 255: Timeout_Counter();
 17298  1FC5  319E  2643  319F   	fcall	_Timeout_Counter
 17299  1FC8                     l6420:	
 17300  1FC8  0020               	movlb	0	; select bank0
 17301  1FC9  1E8E               	btfss	14,5	;volatile
 17302  1FCA  2FCE               	goto	l6424
 17303  1FCB  0021               	movlb	1	; select bank1
 17304  1FCC  1D2C               	btfss	(_myMain^(0+128)+12),2
 17305  1FCD  2FC5               	goto	l6418
 17306  1FCE                     l6424:	
 17307                           
 17308                           ;CC2500_B1.c: 256: };
 17309                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17310  1FCE  319C  2400  319F   	fcall	_set_TimeoutCleared
 17311                           
 17312                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17313  1FD1  319E  261B  319F   	fcall	_CC2500_WriteByte
 17314                           
 17315                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17316  1FD4  0020               	movlb	0	; select bank0
 17317  1FD5  0822               	movf	CC2500_WriteREG@value,w
 17318  1FD6  00A3               	movwf	??_CC2500_WriteREG
 17319  1FD7  0823               	movf	??_CC2500_WriteREG,w
 17320  1FD8  00FB               	movwf	_SPI0Buffer
 17321                           
 17322                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17323  1FD9  319E  261B         	fcall	_CC2500_WriteByte
 17324                           
 17325                           ;CC2500_B1.c: 262: RC0 = 1;
 17326  1FDB  0020               	movlb	0	; select bank0
 17327  1FDC  140E               	bsf	14,0	;volatile
 17328  1FDD  0008               	return
 17329  1FDE                     __end_of_CC2500_WriteREG:	
 17330                           
 17331                           	psect	text117
 17332  1CBA                     __ptext117:	
 17333 ;; *************** function _CC2500_FrequencyCabr *****************
 17334 ;; Defined at:
 17335 ;;		line 201 in file "../src/CC2500_B1.c"
 17336 ;; Parameters:    Size  Location     Type
 17337 ;;		None
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;		None
 17340 ;; Return value:  Size  Location     Type
 17341 ;;		None               void
 17342 ;; Registers used:
 17343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;Total ram usage:        0 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    7
 17356 ;; This function calls:
 17357 ;;		_CC2500_WriteCommand
 17358 ;;		_DelayTime_1us
 17359 ;; This function is called by:
 17360 ;;		_CC2500_PowerOnInitial
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           
 17365                           ;psect for function _CC2500_FrequencyCabr
 17366  1CBA                     _CC2500_FrequencyCabr:	
 17367                           
 17368                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17369                           
 17370                           ;incstack = 0
 17371                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17372  1CBA  3033               	movlw	51
 17373  1CBB  319E  26B1  319C   	fcall	_CC2500_WriteCommand
 17374                           
 17375                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17376  1CBE  30E8               	movlw	232
 17377  1CBF  0020               	movlb	0	; select bank0
 17378  1CC0  00A0               	movwf	DelayTime_1us@count
 17379  1CC1  3003               	movlw	3
 17380  1CC2  00A1               	movwf	DelayTime_1us@count+1
 17381  1CC3  3190  20DE         	fcall	_DelayTime_1us
 17382  1CC5  0008               	return
 17383  1CC6                     __end_of_CC2500_FrequencyCabr:	
 17384                           
 17385                           	psect	text118
 17386  10DE                     __ptext118:	
 17387 ;; *************** function _DelayTime_1us *****************
 17388 ;; Defined at:
 17389 ;;		line 320 in file "../src/CC2500_B1.c"
 17390 ;; Parameters:    Size  Location     Type
 17391 ;;  count           2    0[BANK0 ] int 
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;  j               2    4[BANK0 ] unsigned int 
 17394 ;;  i               2    2[BANK0 ] unsigned int 
 17395 ;; Return value:  Size  Location     Type
 17396 ;;		None               void
 17397 ;; Registers used:
 17398 ;;		wreg, status,2
 17399 ;; Tracked objects:
 17400 ;;		On entry : 0/0
 17401 ;;		On exit  : 0/0
 17402 ;;		Unchanged: 0/0
 17403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17408 ;;Total ram usage:        6 bytes
 17409 ;; Hardware stack levels used:    1
 17410 ;; Hardware stack levels required when called:    5
 17411 ;; This function calls:
 17412 ;;		Nothing
 17413 ;; This function is called by:
 17414 ;;		_CC2500_PowerRST
 17415 ;;		_CC2500_FrequencyCabr
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           
 17420                           ;psect for function _DelayTime_1us
 17421  10DE                     _DelayTime_1us:	
 17422                           
 17423                           ;CC2500_B1.c: 321: unsigned int i, j;
 17424                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17425                           
 17426                           ;incstack = 0
 17427                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17428  10DE  3001               	movlw	1
 17429  10DF  0020               	movlb	0	; select bank0
 17430  10E0  00A2               	movwf	DelayTime_1us@i
 17431  10E1  3000               	movlw	0
 17432  10E2  00A3               	movwf	DelayTime_1us@i+1
 17433  10E3                     l348:	
 17434  10E3  0821               	movf	DelayTime_1us@count+1,w
 17435  10E4  0223               	subwf	DelayTime_1us@i+1,w
 17436  10E5  1D03               	skipz
 17437  10E6  28E9               	goto	u5545
 17438  10E7  0820               	movf	DelayTime_1us@count,w
 17439  10E8  0222               	subwf	DelayTime_1us@i,w
 17440  10E9                     u5545:	
 17441  10E9  1803               	btfsc	3,0
 17442  10EA  0008               	return
 17443                           
 17444                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17445  10EB  01A4               	clrf	DelayTime_1us@j
 17446  10EC  01A5               	clrf	DelayTime_1us@j+1
 17447  10ED  3000               	movlw	0
 17448  10EE  0225               	subwf	DelayTime_1us@j+1,w
 17449  10EF  3002               	movlw	2
 17450  10F0  1903               	skipnz
 17451  10F1  0224               	subwf	DelayTime_1us@j,w
 17452  10F2  1803               	btfsc	3,0
 17453  10F3  28FF               	goto	l6412
 17454  10F4                     l6410:	
 17455  10F4  3001               	movlw	1
 17456  10F5  07A4               	addwf	DelayTime_1us@j,f
 17457  10F6  3000               	movlw	0
 17458  10F7  3DA5               	addwfc	DelayTime_1us@j+1,f
 17459  10F8  3000               	movlw	0
 17460  10F9  0225               	subwf	DelayTime_1us@j+1,w
 17461  10FA  3002               	movlw	2
 17462  10FB  1903               	skipnz
 17463  10FC  0224               	subwf	DelayTime_1us@j,w
 17464  10FD  1C03               	skipc
 17465  10FE  28F4               	goto	l6410
 17466  10FF                     l6412:	
 17467  10FF  3001               	movlw	1
 17468  1100  07A2               	addwf	DelayTime_1us@i,f
 17469  1101  3000               	movlw	0
 17470  1102  3DA3               	addwfc	DelayTime_1us@i+1,f
 17471  1103  28E3               	goto	l348
 17472  1104                     __end_of_DelayTime_1us:	
 17473                           
 17474                           	psect	text119
 17475  1BE4                     __ptext119:	
 17476 ;; *************** function _CC2500_ClearTXFIFO *****************
 17477 ;; Defined at:
 17478 ;;		line 187 in file "../src/CC2500_B1.c"
 17479 ;; Parameters:    Size  Location     Type
 17480 ;;		None
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;		None
 17483 ;; Return value:  Size  Location     Type
 17484 ;;		None               void
 17485 ;; Registers used:
 17486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;Total ram usage:        0 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    7
 17499 ;; This function calls:
 17500 ;;		_CC2500_WriteCommand
 17501 ;; This function is called by:
 17502 ;;		_CC2500_PowerOnInitial
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           
 17507                           ;psect for function _CC2500_ClearTXFIFO
 17508  1BE4                     _CC2500_ClearTXFIFO:	
 17509                           
 17510                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17511                           
 17512                           ;incstack = 0
 17513                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17514  1BE4  303B               	movlw	59
 17515  1BE5  319E  26B1         	fcall	_CC2500_WriteCommand
 17516  1BE7  0008               	return
 17517  1BE8                     __end_of_CC2500_ClearTXFIFO:	
 17518                           
 17519                           	psect	text120
 17520  1BE0                     __ptext120:	
 17521 ;; *************** function _CC2500_ClearRXFIFO *****************
 17522 ;; Defined at:
 17523 ;;		line 194 in file "../src/CC2500_B1.c"
 17524 ;; Parameters:    Size  Location     Type
 17525 ;;		None
 17526 ;; Auto vars:     Size  Location     Type
 17527 ;;		None
 17528 ;; Return value:  Size  Location     Type
 17529 ;;		None               void
 17530 ;; Registers used:
 17531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17532 ;; Tracked objects:
 17533 ;;		On entry : 0/0
 17534 ;;		On exit  : 0/0
 17535 ;;		Unchanged: 0/0
 17536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;Total ram usage:        0 bytes
 17542 ;; Hardware stack levels used:    1
 17543 ;; Hardware stack levels required when called:    7
 17544 ;; This function calls:
 17545 ;;		_CC2500_WriteCommand
 17546 ;; This function is called by:
 17547 ;;		_CC2500_PowerOnInitial
 17548 ;; This function uses a non-reentrant model
 17549 ;;
 17550                           
 17551                           
 17552                           ;psect for function _CC2500_ClearRXFIFO
 17553  1BE0                     _CC2500_ClearRXFIFO:	
 17554                           
 17555                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17556                           
 17557                           ;incstack = 0
 17558                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17559  1BE0  303A               	movlw	58
 17560  1BE1  319E  26B1         	fcall	_CC2500_WriteCommand
 17561  1BE3  0008               	return
 17562  1BE4                     __end_of_CC2500_ClearRXFIFO:	
 17563                           
 17564                           	psect	text121
 17565  1EB1                     __ptext121:	
 17566 ;; *************** function _CC2500_WriteCommand *****************
 17567 ;; Defined at:
 17568 ;;		line 285 in file "../src/CC2500_B1.c"
 17569 ;; Parameters:    Size  Location     Type
 17570 ;;  command         1    wreg     unsigned char 
 17571 ;; Auto vars:     Size  Location     Type
 17572 ;;  command         1    3[BANK0 ] unsigned char 
 17573 ;; Return value:  Size  Location     Type
 17574 ;;		None               void
 17575 ;; Registers used:
 17576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17577 ;; Tracked objects:
 17578 ;;		On entry : 0/0
 17579 ;;		On exit  : 0/0
 17580 ;;		Unchanged: 0/0
 17581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;Total ram usage:        2 bytes
 17587 ;; Hardware stack levels used:    1
 17588 ;; Hardware stack levels required when called:    6
 17589 ;; This function calls:
 17590 ;;		_CC2500_WriteByte
 17591 ;;		_Timeout_Counter
 17592 ;;		_set_TimeoutCleared
 17593 ;; This function is called by:
 17594 ;;		_CC2500_TxData
 17595 ;;		_CC2500_ClearTXFIFO
 17596 ;;		_CC2500_ClearRXFIFO
 17597 ;;		_CC2500_FrequencyCabr
 17598 ;;		_CC2500_SIDLEMode
 17599 ;;		_setRF_Main
 17600 ;;		_RF_RxDisable
 17601 ;; This function uses a non-reentrant model
 17602 ;;
 17603                           
 17604                           
 17605                           ;psect for function _CC2500_WriteCommand
 17606  1EB1                     _CC2500_WriteCommand:	
 17607                           
 17608                           ;incstack = 0
 17609                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17610                           ;CC2500_WriteCommand@command stored from wreg
 17611  1EB1  0020               	movlb	0	; select bank0
 17612  1EB2  00A3               	movwf	CC2500_WriteCommand@command
 17613                           
 17614                           ;CC2500_B1.c: 286: RC0 = 0;
 17615  1EB3  100E               	bcf	14,0	;volatile
 17616                           
 17617                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17618  1EB4  0823               	movf	CC2500_WriteCommand@command,w
 17619  1EB5  00A2               	movwf	??_CC2500_WriteCommand
 17620  1EB6  0822               	movf	??_CC2500_WriteCommand,w
 17621  1EB7  00FB               	movwf	_SPI0Buffer
 17622                           
 17623                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17624  1EB8  2EBC               	goto	l6150
 17625  1EB9                     l6148:	
 17626                           
 17627                           ;CC2500_B1.c: 290: Timeout_Counter();
 17628  1EB9  319E  2643  319E   	fcall	_Timeout_Counter
 17629  1EBC                     l6150:	
 17630  1EBC  0020               	movlb	0	; select bank0
 17631  1EBD  1E8E               	btfss	14,5	;volatile
 17632  1EBE  2EC2               	goto	l6154
 17633  1EBF  0021               	movlb	1	; select bank1
 17634  1EC0  1D2C               	btfss	(_myMain^(0+128)+12),2
 17635  1EC1  2EB9               	goto	l6148
 17636  1EC2                     l6154:	
 17637                           
 17638                           ;CC2500_B1.c: 291: };
 17639                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17640  1EC2  319C  2400  319E   	fcall	_set_TimeoutCleared
 17641                           
 17642                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17643  1EC5  319E  261B         	fcall	_CC2500_WriteByte
 17644                           
 17645                           ;CC2500_B1.c: 295: RC0 = 1;
 17646  1EC7  0020               	movlb	0	; select bank0
 17647  1EC8  140E               	bsf	14,0	;volatile
 17648  1EC9  0008               	return
 17649  1ECA                     __end_of_CC2500_WriteCommand:	
 17650                           
 17651                           	psect	text122
 17652  1C00                     __ptext122:	
 17653 ;; *************** function _set_TimeoutCleared *****************
 17654 ;; Defined at:
 17655 ;;		line 283 in file "../src/Main_B1.c"
 17656 ;; Parameters:    Size  Location     Type
 17657 ;;		None
 17658 ;; Auto vars:     Size  Location     Type
 17659 ;;		None
 17660 ;; Return value:  Size  Location     Type
 17661 ;;		None               void
 17662 ;; Registers used:
 17663 ;;		status,2
 17664 ;; Tracked objects:
 17665 ;;		On entry : 0/0
 17666 ;;		On exit  : 0/0
 17667 ;;		Unchanged: 0/0
 17668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;Total ram usage:        0 bytes
 17674 ;; Hardware stack levels used:    1
 17675 ;; Hardware stack levels required when called:    5
 17676 ;; This function calls:
 17677 ;;		Nothing
 17678 ;; This function is called by:
 17679 ;;		_CC2500_TxData
 17680 ;;		_CC2500_RxData
 17681 ;;		_CC2500_PowerRST
 17682 ;;		_CC2500_WriteREG
 17683 ;;		_CC2500_WriteCommand
 17684 ;;		_CC2500_ReadStatus
 17685 ;;		_getAD
 17686 ;;		_TouchPower
 17687 ;;		_CC2500_ReadREG
 17688 ;; This function uses a non-reentrant model
 17689 ;;
 17690                           
 17691                           
 17692                           ;psect for function _set_TimeoutCleared
 17693  1C00                     _set_TimeoutCleared:	
 17694                           
 17695                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17696                           
 17697                           ;incstack = 0
 17698                           ; Regs used in _set_TimeoutCleared: [status,2]
 17699  1C00  0021               	movlb	1	; select bank1
 17700  1C01  112C               	bcf	(_myMain^(0+128)+12),2
 17701                           
 17702                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17703  1C02  01AD               	clrf	(_myMain^(0+128)+13)
 17704  1C03  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17705  1C04  0008               	return
 17706  1C05                     __end_of_set_TimeoutCleared:	
 17707                           
 17708                           	psect	text123
 17709  1E43                     __ptext123:	
 17710 ;; *************** function _Timeout_Counter *****************
 17711 ;; Defined at:
 17712 ;;		line 274 in file "../src/Main_B1.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;		None
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;		None
 17717 ;; Return value:  Size  Location     Type
 17718 ;;		None               void
 17719 ;; Registers used:
 17720 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;Total ram usage:        0 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    5
 17733 ;; This function calls:
 17734 ;;		Nothing
 17735 ;; This function is called by:
 17736 ;;		_CC2500_TxData
 17737 ;;		_CC2500_RxData
 17738 ;;		_CC2500_PowerRST
 17739 ;;		_CC2500_WriteREG
 17740 ;;		_CC2500_WriteCommand
 17741 ;;		_CC2500_ReadStatus
 17742 ;;		_getAD
 17743 ;;		_TouchPower
 17744 ;;		_CC2500_ReadREG
 17745 ;; This function uses a non-reentrant model
 17746 ;;
 17747                           
 17748                           
 17749                           ;psect for function _Timeout_Counter
 17750  1E43                     _Timeout_Counter:	
 17751                           
 17752                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17753                           
 17754                           ;incstack = 0
 17755                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17756  1E43  3001               	movlw	1
 17757  1E44  0021               	movlb	1	; select bank1
 17758  1E45  07AD               	addwf	(_myMain^(0+128)+13),f
 17759  1E46  3000               	movlw	0
 17760  1E47  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17761                           
 17762                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17763  1E48  300D               	movlw	13
 17764  1E49  3EA0               	addlw	_myMain& (0+255)
 17765  1E4A  0086               	movwf	6
 17766  1E4B  0187               	clrf	7
 17767  1E4C  3F40               	moviw [0]fsr1
 17768  1E4D  3A10               	xorlw	16
 17769  1E4E  1D03               	skipz
 17770  1E4F  2E52               	goto	u5005
 17771  1E50  3F41               	moviw [1]fsr1
 17772  1E51  3A27               	xorlw	39
 17773  1E52                     u5005:	
 17774  1E52  1D03               	skipz
 17775  1E53  0008               	return
 17776                           
 17777                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17778  1E54  01AD               	clrf	(_myMain^(0+128)+13)
 17779  1E55  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17780                           
 17781                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17782  1E56  152C               	bsf	(_myMain^(0+128)+12),2
 17783  1E57  0008               	return
 17784  1E58                     __end_of_Timeout_Counter:	
 17785                           
 17786                           	psect	text124
 17787  1E1B                     __ptext124:	
 17788 ;; *************** function _CC2500_WriteByte *****************
 17789 ;; Defined at:
 17790 ;;		line 219 in file "../src/CC2500_B1.c"
 17791 ;; Parameters:    Size  Location     Type
 17792 ;;		None
 17793 ;; Auto vars:     Size  Location     Type
 17794 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17795 ;; Return value:  Size  Location     Type
 17796 ;;		None               void
 17797 ;; Registers used:
 17798 ;;		wreg, status,2, status,0
 17799 ;; Tracked objects:
 17800 ;;		On entry : 0/0
 17801 ;;		On exit  : 0/0
 17802 ;;		Unchanged: 0/0
 17803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;Total ram usage:        2 bytes
 17809 ;; Hardware stack levels used:    1
 17810 ;; Hardware stack levels required when called:    5
 17811 ;; This function calls:
 17812 ;;		Nothing
 17813 ;; This function is called by:
 17814 ;;		_CC2500_TxData
 17815 ;;		_CC2500_RxData
 17816 ;;		_CC2500_PowerRST
 17817 ;;		_CC2500_WriteREG
 17818 ;;		_CC2500_WriteCommand
 17819 ;;		_CC2500_ReadStatus
 17820 ;;		_CC2500_ReadREG
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824                           
 17825                           ;psect for function _CC2500_WriteByte
 17826  1E1B                     _CC2500_WriteByte:	
 17827                           
 17828                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17829                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17830                           
 17831                           ;incstack = 0
 17832                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17833  1E1B  0020               	movlb	0	; select bank0
 17834  1E1C  01A1               	clrf	CC2500_WriteByte@loop_a
 17835  1E1D                     L11:	
 17836  1E1D  3008               	movlw	8
 17837  1E1E  0221               	subwf	CC2500_WriteByte@loop_a,w
 17838  1E1F  1803               	btfsc	3,0
 17839  1E20  0008               	return
 17840                           
 17841                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17842  1E21  1FFB               	btfss	_SPI0Buffer,7
 17843  1E22  2E25               	goto	l304
 17844                           
 17845                           ;CC2500_B1.c: 223: RC4 = 1;
 17846  1E23  160E               	bsf	14,4	;volatile
 17847  1E24  2E26               	goto	l305
 17848  1E25                     l304:	
 17849                           
 17850                           ;CC2500_B1.c: 224: else
 17851                           ;CC2500_B1.c: 225: RC4 = 0;
 17852  1E25  120E               	bcf	14,4	;volatile
 17853  1E26                     l305:	
 17854                           
 17855                           ;CC2500_B1.c: 226: RC3 = 1;
 17856  1E26  158E               	bsf	14,3	;volatile
 17857                           
 17858                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17859  1E27  1003               	clrc
 17860  1E28  0DFB               	rlf	_SPI0Buffer,f
 17861                           
 17862                           ;CC2500_B1.c: 228: RC3 = 0;
 17863  1E29  118E               	bcf	14,3	;volatile
 17864  1E2A  3001               	movlw	1
 17865  1E2B  00A0               	movwf	??_CC2500_WriteByte
 17866  1E2C  0820               	movf	??_CC2500_WriteByte,w
 17867  1E2D  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17868  1E2E  2E1D               	goto	L11
 17869  1E2F                     __end_of_CC2500_WriteByte:	
 17870                           
 17871                           	psect	text125
 17872  14F0                     __ptext125:	
 17873 ;; *************** function _Buzzer_Main *****************
 17874 ;; Defined at:
 17875 ;;		line 46 in file "../src/Buzzer_B1.c"
 17876 ;; Parameters:    Size  Location     Type
 17877 ;;		None
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;		None
 17880 ;; Return value:  Size  Location     Type
 17881 ;;		None               void
 17882 ;; Registers used:
 17883 ;;		wreg, status,2, status,0
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        1 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; Hardware stack levels required when called:    5
 17896 ;; This function calls:
 17897 ;;		Nothing
 17898 ;; This function is called by:
 17899 ;;		_main
 17900 ;; This function uses a non-reentrant model
 17901 ;;
 17902                           
 17903                           
 17904                           ;psect for function _Buzzer_Main
 17905  14F0                     _Buzzer_Main:	
 17906                           
 17907                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17908                           
 17909                           ;incstack = 0
 17910                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17911  14F0  0021               	movlb	1	; select bank1
 17912  14F1  1CAF               	btfss	_Buz1^(0+128),1
 17913  14F2  0008               	return
 17914                           
 17915                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17916  14F3  3001               	movlw	1
 17917  14F4  07B0               	addwf	(_Buz1^(0+128)+1),f
 17918  14F5  3000               	movlw	0
 17919  14F6  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 17920                           
 17921                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17922  14F7  0836               	movf	((_Buz1+1)^(0+128)+6),w
 17923  14F8  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 17924  14F9  1D03               	skipz
 17925  14FA  2CFD               	goto	u7135
 17926  14FB  0835               	movf	(_Buz1^(0+128)+6),w
 17927  14FC  0230               	subwf	(_Buz1^(0+128)+1),w
 17928  14FD                     u7135:	
 17929  14FD  1C03               	skipc
 17930  14FE  0008               	return
 17931                           
 17932                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17933  14FF  01B0               	clrf	(_Buz1^(0+128)+1)
 17934  1500  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 17935                           
 17936                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17937  1501  12AF               	bcf	_Buz1^(0+128),5
 17938  1502  0020               	movlb	0	; select bank0
 17939  1503  1D8D               	btfss	13,3	;volatile
 17940  1504  2D07               	goto	l7406
 17941  1505  0021               	movlb	1	; select bank1
 17942  1506  16AF               	bsf	_Buz1^(0+128),5
 17943  1507                     l7406:	
 17944                           
 17945                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17946  1507  0021               	movlb	1	; select bank1
 17947  1508  1AAF               	btfsc	_Buz1^(0+128),5
 17948  1509  2D33               	goto	l94
 17949                           
 17950                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17951  150A  08B2               	movf	(_Buz1^(0+128)+3),f
 17952  150B  1D03               	skipz
 17953  150C  2D2F               	goto	l95
 17954                           
 17955                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17956  150D  1DAF               	btfss	_Buz1^(0+128),3
 17957  150E  2D1D               	goto	l96
 17958                           
 17959                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17960  150F  11AF               	bcf	_Buz1^(0+128),3
 17961                           
 17962                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17963  1510  0833               	movf	(_Buz1^(0+128)+4),w
 17964  1511  0020               	movlb	0	; select bank0
 17965  1512  00A0               	movwf	??_Buzzer_Main
 17966  1513  0820               	movf	??_Buzzer_Main,w
 17967  1514  0021               	movlb	1	; select bank1
 17968  1515  00B2               	movwf	(_Buz1^(0+128)+3)
 17969                           
 17970                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17971  1516  0838               	movf	((_Buz1+1)^(0+128)+8),w
 17972  1517  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17973  1518  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17974  1519  0837               	movf	(_Buz1^(0+128)+8),w
 17975  151A  01B5               	clrf	(_Buz1^(0+128)+6)
 17976  151B  07B5               	addwf	(_Buz1^(0+128)+6),f
 17977                           
 17978                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17979  151C  0008               	return
 17980  151D                     l96:	
 17981  151D  1E2F               	btfss	_Buz1^(0+128),4
 17982  151E  2D2D               	goto	l98
 17983                           
 17984                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17985  151F  122F               	bcf	_Buz1^(0+128),4
 17986                           
 17987                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17988  1520  0834               	movf	(_Buz1^(0+128)+5),w
 17989  1521  0020               	movlb	0	; select bank0
 17990  1522  00A0               	movwf	??_Buzzer_Main
 17991  1523  0820               	movf	??_Buzzer_Main,w
 17992  1524  0021               	movlb	1	; select bank1
 17993  1525  00B2               	movwf	(_Buz1^(0+128)+3)
 17994                           
 17995                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17996  1526  083A               	movf	((_Buz1+1)^(0+128)+10),w
 17997  1527  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17998  1528  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17999  1529  0839               	movf	(_Buz1^(0+128)+10),w
 18000  152A  01B5               	clrf	(_Buz1^(0+128)+6)
 18001  152B  07B5               	addwf	(_Buz1^(0+128)+6),f
 18002                           
 18003                           ;Buzzer_B1.c: 62: } else {
 18004  152C  0008               	return
 18005  152D                     l98:	
 18006                           
 18007                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18008  152D  10AF               	bcf	_Buz1^(0+128),1
 18009                           
 18010                           ;Buzzer_B1.c: 64: }
 18011                           ;Buzzer_B1.c: 65: } else {
 18012  152E  0008               	return
 18013  152F                     l95:	
 18014                           
 18015                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18016  152F  16AF               	bsf	_Buz1^(0+128),5
 18017                           
 18018                           ;Buzzer_B1.c: 68: RB3 = 1;
 18019  1530  0020               	movlb	0	; select bank0
 18020  1531  158D               	bsf	13,3	;volatile
 18021                           
 18022                           ;Buzzer_B1.c: 69: }
 18023                           ;Buzzer_B1.c: 70: } else {
 18024  1532  0008               	return
 18025  1533                     l94:	
 18026                           
 18027                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18028  1533  12AF               	bcf	_Buz1^(0+128),5
 18029                           
 18030                           ;Buzzer_B1.c: 73: RB3 = 0;
 18031  1534  0020               	movlb	0	; select bank0
 18032  1535  118D               	bcf	13,3	;volatile
 18033                           
 18034                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18035  1536  3001               	movlw	1
 18036  1537  0021               	movlb	1	; select bank1
 18037  1538  02B2               	subwf	(_Buz1^(0+128)+3),f
 18038  1539  0008               	return
 18039  153A                     __end_of_Buzzer_Main:	
 18040                           
 18041                           	psect	text126
 18042  1BCD                     __ptext126:	
 18043 ;; *************** function _Buzzer_Initialization *****************
 18044 ;; Defined at:
 18045 ;;		line 11 in file "../src/Buzzer_B1.c"
 18046 ;; Parameters:    Size  Location     Type
 18047 ;;		None
 18048 ;; Auto vars:     Size  Location     Type
 18049 ;;		None
 18050 ;; Return value:  Size  Location     Type
 18051 ;;		None               void
 18052 ;; Registers used:
 18053 ;;		None
 18054 ;; Tracked objects:
 18055 ;;		On entry : 0/0
 18056 ;;		On exit  : 0/0
 18057 ;;		Unchanged: 0/0
 18058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;Total ram usage:        0 bytes
 18064 ;; Hardware stack levels used:    1
 18065 ;; Hardware stack levels required when called:    5
 18066 ;; This function calls:
 18067 ;;		Nothing
 18068 ;; This function is called by:
 18069 ;;		_main
 18070 ;; This function uses a non-reentrant model
 18071 ;;
 18072                           
 18073                           
 18074                           ;psect for function _Buzzer_Initialization
 18075  1BCD                     _Buzzer_Initialization:	
 18076                           
 18077                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18078                           
 18079                           ;incstack = 0
 18080                           ; Regs used in _Buzzer_Initialization: []
 18081  1BCD  0021               	movlb	1	; select bank1
 18082  1BCE  142F               	bsf	_Buz1^(0+128),0
 18083  1BCF  0008               	return
 18084  1BD0                     __end_of_Buzzer_Initialization:	
 18085                           
 18086                           	psect	intentry
 18087  0004                     __pintentry:	
 18088 ;; *************** function _ISR *****************
 18089 ;; Defined at:
 18090 ;;		line 107 in file "../src/MCU_B1.c"
 18091 ;; Parameters:    Size  Location     Type
 18092 ;;		None
 18093 ;; Auto vars:     Size  Location     Type
 18094 ;;		None
 18095 ;; Return value:  Size  Location     Type
 18096 ;;		None               void
 18097 ;; Registers used:
 18098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18099 ;; Tracked objects:
 18100 ;;		On entry : 0/0
 18101 ;;		On exit  : 0/0
 18102 ;;		Unchanged: 0/0
 18103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;Total ram usage:        1 bytes
 18109 ;; Hardware stack levels used:    1
 18110 ;; Hardware stack levels required when called:    4
 18111 ;; This function calls:
 18112 ;;		_IOC_ISR
 18113 ;;		_TMR1_ISR
 18114 ;; This function is called by:
 18115 ;;		Interrupt level 1
 18116 ;; This function uses a non-reentrant model
 18117 ;;
 18118                           
 18119  0004                     _ISR:	
 18120                           
 18121                           ;incstack = 0
 18122                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18123  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18124  0005  3180               	pagesel	$
 18125  0006  0020               	movlb	0	; select bank0
 18126  0007  087F               	movf	127,w
 18127  0008  00F7               	movwf	??_ISR
 18128                           
 18129                           ;MCU_B1.c: 109: IOC_ISR();
 18130  0009  319D  251D  3180   	fcall	_IOC_ISR
 18131                           
 18132                           ;MCU_B1.c: 111: ;;
 18133                           ;MCU_B1.c: 113: TMR1_ISR();
 18134  000C  3190  20BA         	fcall	_TMR1_ISR
 18135  000E  0877               	movf	??_ISR,w
 18136  000F  0020               	movlb	0	; select bank0
 18137  0010  00FF               	movwf	127
 18138  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18139  0012  0009               	retfie
 18140  0013                     __end_of_ISR:	
 18141                           
 18142                           	psect	text128
 18143  10BA                     __ptext128:	
 18144 ;; *************** function _TMR1_ISR *****************
 18145 ;; Defined at:
 18146 ;;		line 209 in file "../src/MCU_B1.c"
 18147 ;; Parameters:    Size  Location     Type
 18148 ;;		None
 18149 ;; Auto vars:     Size  Location     Type
 18150 ;;		None
 18151 ;; Return value:  Size  Location     Type
 18152 ;;		None               void
 18153 ;; Registers used:
 18154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;Total ram usage:        0 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; Hardware stack levels required when called:    2
 18167 ;; This function calls:
 18168 ;;		_setDimmerLights_IntrControl
 18169 ;; This function is called by:
 18170 ;;		_ISR
 18171 ;; This function uses a non-reentrant model
 18172 ;;
 18173                           
 18174                           
 18175                           ;psect for function _TMR1_ISR
 18176  10BA                     _TMR1_ISR:	
 18177                           
 18178                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18179                           
 18180                           ;incstack = 0
 18181                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18182  10BA  0021               	movlb	1	; select bank1
 18183  10BB  1C11               	btfss	17,0	;volatile
 18184  10BC  0008               	return
 18185  10BD  0020               	movlb	0	; select bank0
 18186  10BE  1C11               	btfss	17,0	;volatile
 18187  10BF  0008               	return
 18188                           
 18189                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18190  10C0  30FA               	movlw	250
 18191  10C1  0097               	movwf	23	;volatile
 18192                           
 18193                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18194  10C2  3038               	movlw	56
 18195  10C3  0096               	movwf	22	;volatile
 18196                           
 18197                           ;MCU_B1.c: 214: TMR1IF = 0;
 18198  10C4  1011               	bcf	17,0	;volatile
 18199                           
 18200                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18201  10C5  3001               	movlw	1
 18202  10C6  3181  21B2  3190   	fcall	_setDimmerLights_IntrControl
 18203                           
 18204                           ;MCU_B1.c: 234: Timer1.Count++;
 18205  10C9  3001               	movlw	1
 18206  10CA  0021               	movlb	1	; select bank1
 18207  10CB  07C8               	addwf	(_Timer1^(0+128)+1),f
 18208  10CC  3000               	movlw	0
 18209  10CD  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18210                           
 18211                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18212  10CE  3001               	movlw	1
 18213  10CF  3EC7               	addlw	_Timer1& (0+255)
 18214  10D0  0086               	movwf	6
 18215  10D1  0187               	clrf	7
 18216  10D2  3F40               	moviw [0]fsr1
 18217  10D3  3A64               	xorlw	100
 18218  10D4  1D03               	skipz
 18219  10D5  28D8               	goto	u729_25
 18220  10D6  3F41               	moviw [1]fsr1
 18221  10D7  3A00               	xorlw	0
 18222  10D8                     u729_25:	
 18223  10D8  1D03               	skipz
 18224  10D9  0008               	return
 18225                           
 18226                           ;MCU_B1.c: 236: {
 18227                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18228  10DA  01C8               	clrf	(_Timer1^(0+128)+1)
 18229  10DB  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18230                           
 18231                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18232  10DC  1447               	bsf	_Timer1^(0+128),0
 18233  10DD  0008               	return
 18234  10DE                     __end_of_TMR1_ISR:	
 18235                           
 18236                           	psect	text129
 18237  01B2                     __ptext129:	
 18238 ;; *************** function _setDimmerLights_IntrControl *****************
 18239 ;; Defined at:
 18240 ;;		line 94 in file "../src/Dimmer_B1.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;  lights          1    wreg     unsigned char 
 18243 ;; Auto vars:     Size  Location     Type
 18244 ;;  lights          1    6[COMMON] unsigned char 
 18245 ;; Return value:  Size  Location     Type
 18246 ;;		None               void
 18247 ;; Registers used:
 18248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18249 ;; Tracked objects:
 18250 ;;		On entry : 0/0
 18251 ;;		On exit  : 0/0
 18252 ;;		Unchanged: 0/0
 18253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18257 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18258 ;;Total ram usage:        5 bytes
 18259 ;; Hardware stack levels used:    1
 18260 ;; Hardware stack levels required when called:    1
 18261 ;; This function calls:
 18262 ;;		_DimmerIntrPointSelect
 18263 ;; This function is called by:
 18264 ;;		_TMR1_ISR
 18265 ;; This function uses a non-reentrant model
 18266 ;;
 18267                           
 18268                           
 18269                           ;psect for function _setDimmerLights_IntrControl
 18270  01B2                     _setDimmerLights_IntrControl:	
 18271                           
 18272                           ;incstack = 0
 18273                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18274                           ;setDimmerLights_IntrControl@lights stored from wreg
 18275  01B2  00F6               	movwf	setDimmerLights_IntrControl@lights
 18276                           
 18277                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18278  01B3  0876               	movf	setDimmerLights_IntrControl@lights,w
 18279  01B4  319C  244E  3181   	fcall	_DimmerIntrPointSelect
 18280                           
 18281                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18282  01B7  0879               	movf	_DimmerLightsIntr,w
 18283  01B8  0086               	movwf	6
 18284  01B9  3001               	movlw	1	; select bank2/3
 18285  01BA  0087               	movwf	7
 18286  01BB  1C01               	btfss	1,0
 18287  01BC  2A0E               	goto	i1l6854
 18288                           
 18289                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18290  01BD  3001               	movlw	1
 18291  01BE  00F2               	movwf	??_setDimmerLights_IntrControl
 18292  01BF  0879               	movf	_DimmerLightsIntr,w
 18293  01C0  3E03               	addlw	3
 18294  01C1  0086               	movwf	6
 18295  01C2  3001               	movlw	1	; select bank2/3
 18296  01C3  0087               	movwf	7
 18297  01C4  0872               	movf	??_setDimmerLights_IntrControl,w
 18298  01C5  0781               	addwf	1,f
 18299                           
 18300                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18301                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18302  01C6  0022               	movlb	2	; select bank2
 18303  01C7  0840               	movf	(_Dimmer^(0+256)+2),w
 18304  01C8  00F2               	movwf	??_setDimmerLights_IntrControl
 18305  01C9  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18306  01CA  09F2               	comf	??_setDimmerLights_IntrControl,f
 18307  01CB  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18308  01CC  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18309  01CD  1903               	skipnz
 18310  01CE  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18311  01CF  0879               	movf	_DimmerLightsIntr,w
 18312  01D0  3E04               	addlw	4
 18313  01D1  0086               	movwf	6
 18314  01D2  3001               	movlw	1	; select bank2/3
 18315  01D3  0087               	movwf	7
 18316  01D4  0801               	movf	1,w
 18317  01D5  0772               	addwf	??_setDimmerLights_IntrControl,w
 18318  01D6  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18319  01D7  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18320  01D8  1803               	skipnc
 18321  01D9  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18322  01DA  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18323  01DB  0879               	movf	_DimmerLightsIntr,w
 18324  01DC  3E03               	addlw	3
 18325  01DD  0086               	movwf	6
 18326  01DE  3001               	movlw	1	; select bank2/3
 18327  01DF  0087               	movwf	7
 18328  01E0  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18329  01E1  3A80               	xorlw	128
 18330  01E2  3C80               	sublw	128
 18331  01E3  1D03               	skipz
 18332  01E4  29E7               	goto	u616_25
 18333  01E5  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18334  01E6  0201               	subwf	1,w
 18335  01E7                     u616_25:	
 18336  01E7  1C03               	skipc
 18337  01E8  0008               	return
 18338                           
 18339                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18340  01E9  0879               	movf	_DimmerLightsIntr,w
 18341  01EA  3E03               	addlw	3
 18342  01EB  0086               	movwf	6
 18343  01EC  3001               	movlw	1	; select bank2/3
 18344  01ED  0087               	movwf	7
 18345  01EE  0181               	clrf	1
 18346                           
 18347                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18348  01EF  0879               	movf	_DimmerLightsIntr,w
 18349  01F0  0086               	movwf	6
 18350  01F1  3001               	movlw	1	; select bank2/3
 18351  01F2  0087               	movwf	7
 18352  01F3  1001               	bcf	1,0
 18353                           
 18354                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18355  01F4  0879               	movf	_DimmerLightsIntr,w
 18356  01F5  3E08               	addlw	8
 18357  01F6  0086               	movwf	6
 18358  01F7  3001               	movlw	1	; select bank2/3
 18359  01F8  0087               	movwf	7
 18360  01F9  1401               	bsf	1,0
 18361                           
 18362                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18363  01FA  0879               	movf	_DimmerLightsIntr,w
 18364  01FB  3E09               	addlw	9
 18365  01FC  0086               	movwf	6
 18366  01FD  3001               	movlw	1	; select bank2/3
 18367  01FE  0087               	movwf	7
 18368  01FF  1E01               	btfss	1,4
 18369  0200  0008               	return
 18370                           
 18371                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18372  0201  0879               	movf	_DimmerLightsIntr,w
 18373  0202  3E09               	addlw	9
 18374  0203  0086               	movwf	6
 18375  0204  3001               	movlw	1	; select bank2/3
 18376  0205  0087               	movwf	7
 18377  0206  1201               	bcf	1,4
 18378                           
 18379                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18380  0207  0876               	movf	setDimmerLights_IntrControl@lights,w
 18381  0208  3A01               	xorlw	1
 18382  0209  1D03               	skipz
 18383  020A  0008               	return
 18384                           
 18385                           ;Dimmer_B1.c: 244: RB1 = 0;
 18386  020B  0020               	movlb	0	; select bank0
 18387  020C  108D               	bcf	13,1	;volatile
 18388                           
 18389                           ;Dimmer_B1.c: 246: }
 18390                           ;Dimmer_B1.c: 253: }
 18391                           ;Dimmer_B1.c: 254: }
 18392                           ;Dimmer_B1.c: 255: } else {
 18393  020D  0008               	return
 18394  020E                     i1l6854:	
 18395                           
 18396                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18397  020E  0879               	movf	_DimmerLightsIntr,w
 18398  020F  3E08               	addlw	8
 18399  0210  0086               	movwf	6
 18400  0211  3001               	movlw	1	; select bank2/3
 18401  0212  0087               	movwf	7
 18402  0213  1C01               	btfss	1,0
 18403  0214  2AD2               	goto	i1l678
 18404                           
 18405                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18406  0215  0879               	movf	_DimmerLightsIntr,w
 18407  0216  3E08               	addlw	8
 18408  0217  0086               	movwf	6
 18409  0218  3001               	movlw	1	; select bank2/3
 18410  0219  0087               	movwf	7
 18411  021A  1001               	bcf	1,0
 18412                           
 18413                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18414  021B  0879               	movf	_DimmerLightsIntr,w
 18415  021C  0086               	movwf	6
 18416  021D  3001               	movlw	1	; select bank2/3
 18417  021E  0087               	movwf	7
 18418  021F  1C81               	btfss	1,1
 18419  0220  2AD2               	goto	i1l678
 18420                           
 18421                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18422  0221  3001               	movlw	1
 18423  0222  00F2               	movwf	??_setDimmerLights_IntrControl
 18424  0223  0A79               	incf	_DimmerLightsIntr,w
 18425  0224  0086               	movwf	6
 18426  0225  3001               	movlw	1	; select bank2/3
 18427  0226  0087               	movwf	7
 18428  0227  0872               	movf	??_setDimmerLights_IntrControl,w
 18429  0228  0781               	addwf	1,f
 18430                           
 18431                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18432  0229  0A79               	incf	_DimmerLightsIntr,w
 18433  022A  0086               	movwf	6
 18434  022B  3001               	movlw	1	; select bank2/3
 18435  022C  0087               	movwf	7
 18436  022D  0879               	movf	_DimmerLightsIntr,w
 18437  022E  3E02               	addlw	2
 18438  022F  0084               	movwf	4
 18439  0230  3001               	movlw	1	; select bank2/3
 18440  0231  0085               	movwf	5
 18441  0232  0800               	movf	0,w
 18442  0233  0201               	subwf	1,w
 18443  0234  1C03               	skipc
 18444  0235  2AD2               	goto	i1l678
 18445                           
 18446                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18447  0236  0A79               	incf	_DimmerLightsIntr,w
 18448  0237  0086               	movwf	6
 18449  0238  3001               	movlw	1	; select bank2/3
 18450  0239  0087               	movwf	7
 18451  023A  0181               	clrf	1
 18452                           
 18453                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18454  023B  0879               	movf	_DimmerLightsIntr,w
 18455  023C  0086               	movwf	6
 18456  023D  3001               	movlw	1	; select bank2/3
 18457  023E  0087               	movwf	7
 18458  023F  1D81               	btfss	1,3
 18459  0240  2A87               	goto	i1l6884
 18460                           
 18461                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18462  0241  0879               	movf	_DimmerLightsIntr,w
 18463  0242  0086               	movwf	6
 18464  0243  3001               	movlw	1	; select bank2/3
 18465  0244  0087               	movwf	7
 18466  0245  1A01               	btfsc	1,4
 18467  0246  2A68               	goto	i1l6876
 18468                           
 18469                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(90*0.8))) {
 18470  0247  0879               	movf	_DimmerLightsIntr,w
 18471  0248  3E04               	addlw	4
 18472  0249  0086               	movwf	6
 18473  024A  3001               	movlw	1	; select bank2/3
 18474  024B  0087               	movwf	7
 18475  024C  3048               	movlw	72
 18476  024D  0201               	subwf	1,w
 18477  024E  1803               	skipnc
 18478  024F  2A59               	goto	i1l6872
 18479                           
 18480                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18481  0250  3001               	movlw	1
 18482  0251  00F2               	movwf	??_setDimmerLights_IntrControl
 18483  0252  0879               	movf	_DimmerLightsIntr,w
 18484  0253  3E04               	addlw	4
 18485  0254  0086               	movwf	6
 18486  0255  3001               	movlw	1	; select bank2/3
 18487  0256  0087               	movwf	7
 18488  0257  0872               	movf	??_setDimmerLights_IntrControl,w
 18489  0258  0781               	addwf	1,f
 18490  0259                     i1l6872:	
 18491                           
 18492                           ;Dimmer_B1.c: 266: }
 18493                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(90*0.8))) {
 18494  0259  0879               	movf	_DimmerLightsIntr,w
 18495  025A  3E04               	addlw	4
 18496  025B  0086               	movwf	6
 18497  025C  3001               	movlw	1	; select bank2/3
 18498  025D  0087               	movwf	7
 18499  025E  0801               	movf	1,w
 18500  025F  3A48               	xorlw	72
 18501  0260  1D03               	skipz
 18502  0261  2AD2               	goto	i1l678
 18503                           
 18504                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18505  0262  0879               	movf	_DimmerLightsIntr,w
 18506  0263  0086               	movwf	6
 18507  0264  3001               	movlw	1	; select bank2/3
 18508  0265  0087               	movwf	7
 18509  0266  1601               	bsf	1,4
 18510                           
 18511                           ;Dimmer_B1.c: 269: }
 18512                           ;Dimmer_B1.c: 270: } else {
 18513  0267  2AD2               	goto	i1l678
 18514  0268                     i1l6876:	
 18515                           
 18516                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18517  0268  0879               	movf	_DimmerLightsIntr,w
 18518  0269  3E04               	addlw	4
 18519  026A  0086               	movwf	6
 18520  026B  3001               	movlw	1	; select bank2/3
 18521  026C  0087               	movwf	7
 18522  026D  300D               	movlw	13
 18523  026E  0201               	subwf	1,w
 18524  026F  1C03               	skipc
 18525  0270  2A78               	goto	i1l6880
 18526                           
 18527                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18528  0271  0879               	movf	_DimmerLightsIntr,w
 18529  0272  3E04               	addlw	4
 18530  0273  0086               	movwf	6
 18531  0274  3001               	movlw	1	; select bank2/3
 18532  0275  0087               	movwf	7
 18533  0276  3001               	movlw	1
 18534  0277  0281               	subwf	1,f
 18535  0278                     i1l6880:	
 18536                           
 18537                           ;Dimmer_B1.c: 273: }
 18538                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18539  0278  0879               	movf	_DimmerLightsIntr,w
 18540  0279  3E04               	addlw	4
 18541  027A  0086               	movwf	6
 18542  027B  3001               	movlw	1	; select bank2/3
 18543  027C  0087               	movwf	7
 18544  027D  0801               	movf	1,w
 18545  027E  3A0C               	xorlw	12
 18546  027F  1D03               	skipz
 18547  0280  2AD2               	goto	i1l678
 18548                           
 18549                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18550  0281  0879               	movf	_DimmerLightsIntr,w
 18551  0282  0086               	movwf	6
 18552  0283  3001               	movlw	1	; select bank2/3
 18553  0284  0087               	movwf	7
 18554  0285  1201               	bcf	1,4
 18555                           
 18556                           ;Dimmer_B1.c: 276: }
 18557                           ;Dimmer_B1.c: 277: }
 18558                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18559  0286  2AD2               	goto	i1l678
 18560  0287                     i1l6884:	
 18561  0287  0879               	movf	_DimmerLightsIntr,w
 18562  0288  0086               	movwf	6
 18563  0289  3001               	movlw	1	; select bank2/3
 18564  028A  0087               	movwf	7
 18565  028B  1D01               	btfss	1,2
 18566  028C  2AD2               	goto	i1l678
 18567                           
 18568                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18569  028D  0879               	movf	_DimmerLightsIntr,w
 18570  028E  3E04               	addlw	4
 18571  028F  0086               	movwf	6
 18572  0290  3001               	movlw	1	; select bank2/3
 18573  0291  0087               	movwf	7
 18574  0292  0879               	movf	_DimmerLightsIntr,w
 18575  0293  3E05               	addlw	5
 18576  0294  0084               	movwf	4
 18577  0295  3001               	movlw	1	; select bank2/3
 18578  0296  0085               	movwf	5
 18579  0297  0800               	movf	0,w
 18580  0298  0201               	subwf	1,w
 18581  0299  1803               	skipnc
 18582  029A  2AA5               	goto	i1l6890
 18583                           
 18584                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18585  029B  3001               	movlw	1
 18586  029C  00F2               	movwf	??_setDimmerLights_IntrControl
 18587  029D  0879               	movf	_DimmerLightsIntr,w
 18588  029E  3E04               	addlw	4
 18589  029F  0086               	movwf	6
 18590  02A0  3001               	movlw	1	; select bank2/3
 18591  02A1  0087               	movwf	7
 18592  02A2  0872               	movf	??_setDimmerLights_IntrControl,w
 18593  02A3  0781               	addwf	1,f
 18594                           
 18595                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18596  02A4  2ABA               	goto	i1l6894
 18597  02A5                     i1l6890:	
 18598  02A5  0879               	movf	_DimmerLightsIntr,w
 18599  02A6  3E05               	addlw	5
 18600  02A7  0086               	movwf	6
 18601  02A8  3001               	movlw	1	; select bank2/3
 18602  02A9  0087               	movwf	7
 18603  02AA  0879               	movf	_DimmerLightsIntr,w
 18604  02AB  3E04               	addlw	4
 18605  02AC  0084               	movwf	4
 18606  02AD  3001               	movlw	1	; select bank2/3
 18607  02AE  0085               	movwf	5
 18608  02AF  0800               	movf	0,w
 18609  02B0  0201               	subwf	1,w
 18610  02B1  1803               	skipnc
 18611  02B2  2ABA               	goto	i1l6894
 18612                           
 18613                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18614  02B3  0879               	movf	_DimmerLightsIntr,w
 18615  02B4  3E04               	addlw	4
 18616  02B5  0086               	movwf	6
 18617  02B6  3001               	movlw	1	; select bank2/3
 18618  02B7  0087               	movwf	7
 18619  02B8  3001               	movlw	1
 18620  02B9  0281               	subwf	1,f
 18621  02BA                     i1l6894:	
 18622                           
 18623                           ;Dimmer_B1.c: 283: }
 18624                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18625  02BA  0879               	movf	_DimmerLightsIntr,w
 18626  02BB  3E05               	addlw	5
 18627  02BC  0086               	movwf	6
 18628  02BD  3001               	movlw	1	; select bank2/3
 18629  02BE  0087               	movwf	7
 18630  02BF  0879               	movf	_DimmerLightsIntr,w
 18631  02C0  3E04               	addlw	4
 18632  02C1  0084               	movwf	4
 18633  02C2  3001               	movlw	1	; select bank2/3
 18634  02C3  0085               	movwf	5
 18635  02C4  0800               	movf	0,w
 18636  02C5  0601               	xorwf	1,w
 18637  02C6  1D03               	skipz
 18638  02C7  2AD2               	goto	i1l678
 18639                           
 18640                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18641  02C8  0879               	movf	_DimmerLightsIntr,w
 18642  02C9  0086               	movwf	6
 18643  02CA  3001               	movlw	1	; select bank2/3
 18644  02CB  0087               	movwf	7
 18645  02CC  1101               	bcf	1,2
 18646                           
 18647                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18648  02CD  0879               	movf	_DimmerLightsIntr,w
 18649  02CE  0086               	movwf	6
 18650  02CF  3001               	movlw	1	; select bank2/3
 18651  02D0  0087               	movwf	7
 18652  02D1  1081               	bcf	1,1
 18653  02D2                     i1l678:	
 18654                           
 18655                           ;Dimmer_B1.c: 287: }
 18656                           ;Dimmer_B1.c: 288: }
 18657                           ;Dimmer_B1.c: 289: }
 18658                           ;Dimmer_B1.c: 290: }
 18659                           ;Dimmer_B1.c: 291: }
 18660                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18661  02D2  0879               	movf	_DimmerLightsIntr,w
 18662  02D3  3E09               	addlw	9
 18663  02D4  0086               	movwf	6
 18664  02D5  3001               	movlw	1	; select bank2/3
 18665  02D6  0087               	movwf	7
 18666  02D7  1D81               	btfss	1,3
 18667  02D8  0008               	return
 18668                           
 18669                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18670  02D9  3001               	movlw	1
 18671  02DA  00F2               	movwf	??_setDimmerLights_IntrControl
 18672  02DB  0879               	movf	_DimmerLightsIntr,w
 18673  02DC  3E0C               	addlw	12
 18674  02DD  0086               	movwf	6
 18675  02DE  3001               	movlw	1	; select bank2/3
 18676  02DF  0087               	movwf	7
 18677  02E0  0872               	movf	??_setDimmerLights_IntrControl,w
 18678  02E1  0781               	addwf	1,f
 18679                           
 18680                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18681  02E2  0879               	movf	_DimmerLightsIntr,w
 18682  02E3  3E0C               	addlw	12
 18683  02E4  0086               	movwf	6
 18684  02E5  3001               	movlw	1	; select bank2/3
 18685  02E6  0087               	movwf	7
 18686  02E7  0801               	movf	1,w
 18687  02E8  3A05               	xorlw	5
 18688  02E9  1D03               	skipz
 18689  02EA  0008               	return
 18690                           
 18691                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18692  02EB  0879               	movf	_DimmerLightsIntr,w
 18693  02EC  3E0C               	addlw	12
 18694  02ED  0086               	movwf	6
 18695  02EE  3001               	movlw	1	; select bank2/3
 18696  02EF  0087               	movwf	7
 18697  02F0  0181               	clrf	1
 18698                           
 18699                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18700  02F1  0879               	movf	_DimmerLightsIntr,w
 18701  02F2  3E09               	addlw	9
 18702  02F3  0086               	movwf	6
 18703  02F4  3001               	movlw	1	; select bank2/3
 18704  02F5  0087               	movwf	7
 18705  02F6  1181               	bcf	1,3
 18706  02F7  0008               	return
 18707  02F8                     __end_of_setDimmerLights_IntrControl:	
 18708                           
 18709                           	psect	text130
 18710  1C4E                     __ptext130:	
 18711 ;; *************** function _DimmerIntrPointSelect *****************
 18712 ;; Defined at:
 18713 ;;		line 72 in file "../src/Dimmer_B1.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;  lights          1    wreg     unsigned char 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;  lights          1    1[COMMON] unsigned char 
 18718 ;; Return value:  Size  Location     Type
 18719 ;;		None               void
 18720 ;; Registers used:
 18721 ;;		wreg
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;Total ram usage:        2 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; This function calls:
 18734 ;;		Nothing
 18735 ;; This function is called by:
 18736 ;;		_setDimmerLights_IntrControl
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           
 18741                           ;psect for function _DimmerIntrPointSelect
 18742  1C4E                     _DimmerIntrPointSelect:	
 18743                           
 18744                           ;incstack = 0
 18745                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18746                           ;DimmerIntrPointSelect@lights stored from wreg
 18747  1C4E  00F1               	movwf	DimmerIntrPointSelect@lights
 18748                           
 18749                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18750  1C4F  0871               	movf	DimmerIntrPointSelect@lights,w
 18751  1C50  3A01               	xorlw	1
 18752  1C51  1D03               	skipz
 18753  1C52  0008               	return
 18754                           
 18755                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18756  1C53  30C5               	movlw	_DimmerLights1& (0+255)
 18757  1C54  00F0               	movwf	??_DimmerIntrPointSelect
 18758  1C55  0870               	movf	??_DimmerIntrPointSelect,w
 18759  1C56  00F9               	movwf	_DimmerLightsIntr
 18760  1C57  0008               	return
 18761  1C58                     __end_of_DimmerIntrPointSelect:	
 18762                           
 18763                           	psect	text131
 18764  1D1D                     __ptext131:	
 18765 ;; *************** function _IOC_ISR *****************
 18766 ;; Defined at:
 18767 ;;		line 401 in file "../src/MCU_B1.c"
 18768 ;; Parameters:    Size  Location     Type
 18769 ;;		None
 18770 ;; Auto vars:     Size  Location     Type
 18771 ;;		None
 18772 ;; Return value:  Size  Location     Type
 18773 ;;		None               void
 18774 ;; Registers used:
 18775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18776 ;; Tracked objects:
 18777 ;;		On entry : 0/0
 18778 ;;		On exit  : 0/0
 18779 ;;		Unchanged: 0/0
 18780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18785 ;;Total ram usage:        0 bytes
 18786 ;; Hardware stack levels used:    1
 18787 ;; Hardware stack levels required when called:    3
 18788 ;; This function calls:
 18789 ;;		_setDimmerReClock
 18790 ;; This function is called by:
 18791 ;;		_ISR
 18792 ;; This function uses a non-reentrant model
 18793 ;;
 18794                           
 18795                           
 18796                           ;psect for function _IOC_ISR
 18797  1D1D                     _IOC_ISR:	
 18798                           
 18799                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18800                           
 18801                           ;incstack = 0
 18802                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18803  1D1D  1D8B               	btfss	11,3	;volatile
 18804  1D1E  0008               	return
 18805  1D1F  1C0B               	btfss	11,0	;volatile
 18806  1D20  0008               	return
 18807  1D21  0027               	movlb	7	; select bank7
 18808  1D22  1D16               	btfss	22,2	;volatile
 18809  1D23  0008               	return
 18810                           
 18811                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18812  1D24  1116               	bcf	22,2	;volatile
 18813                           
 18814                           ;MCU_B1.c: 404: IOCIF = 0;
 18815  1D25  100B               	bcf	11,0	;volatile
 18816                           
 18817                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18818  1D26  0021               	movlb	1	; select bank1
 18819  1D27  1C20               	btfss	_myMain^(0+128),0
 18820  1D28  0008               	return
 18821                           
 18822                           ;MCU_B1.c: 408: setDimmerReClock();
 18823  1D29  319B  23DC         	fcall	_setDimmerReClock
 18824  1D2B  0008               	return
 18825  1D2C                     __end_of_IOC_ISR:	
 18826                           
 18827                           	psect	text132
 18828  1BDC                     __ptext132:	
 18829 ;; *************** function _setDimmerReClock *****************
 18830 ;; Defined at:
 18831 ;;		line 244 in file "../src/MCU_B1.c"
 18832 ;; Parameters:    Size  Location     Type
 18833 ;;		None
 18834 ;; Auto vars:     Size  Location     Type
 18835 ;;		None
 18836 ;; Return value:  Size  Location     Type
 18837 ;;		None               void
 18838 ;; Registers used:
 18839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18840 ;; Tracked objects:
 18841 ;;		On entry : 0/0
 18842 ;;		On exit  : 0/0
 18843 ;;		Unchanged: 0/0
 18844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18849 ;;Total ram usage:        0 bytes
 18850 ;; Hardware stack levels used:    1
 18851 ;; Hardware stack levels required when called:    2
 18852 ;; This function calls:
 18853 ;;		_setDimmerLights_IntrIOC_GO
 18854 ;; This function is called by:
 18855 ;;		_IOC_ISR
 18856 ;; This function uses a non-reentrant model
 18857 ;;
 18858                           
 18859                           
 18860                           ;psect for function _setDimmerReClock
 18861  1BDC                     _setDimmerReClock:	
 18862                           
 18863                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18864                           
 18865                           ;incstack = 0
 18866                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18867  1BDC  3001               	movlw	1
 18868  1BDD  3193  23AF         	fcall	_setDimmerLights_IntrIOC_GO
 18869  1BDF  0008               	return
 18870  1BE0                     __end_of_setDimmerReClock:	
 18871                           
 18872                           	psect	text133
 18873  13AF                     __ptext133:	
 18874 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18875 ;; Defined at:
 18876 ;;		line 28 in file "../src/Dimmer_B1.c"
 18877 ;; Parameters:    Size  Location     Type
 18878 ;;  lights          1    wreg     unsigned char 
 18879 ;; Auto vars:     Size  Location     Type
 18880 ;;  lights          1    2[COMMON] unsigned char 
 18881 ;; Return value:  Size  Location     Type
 18882 ;;		None               void
 18883 ;; Registers used:
 18884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18885 ;; Tracked objects:
 18886 ;;		On entry : 0/0
 18887 ;;		On exit  : 0/0
 18888 ;;		Unchanged: 0/0
 18889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18894 ;;Total ram usage:        1 bytes
 18895 ;; Hardware stack levels used:    1
 18896 ;; Hardware stack levels required when called:    1
 18897 ;; This function calls:
 18898 ;;		_DimmerIntrIOCPointSelect
 18899 ;; This function is called by:
 18900 ;;		_setDimmerReClock
 18901 ;; This function uses a non-reentrant model
 18902 ;;
 18903                           
 18904                           
 18905                           ;psect for function _setDimmerLights_IntrIOC_GO
 18906  13AF                     _setDimmerLights_IntrIOC_GO:	
 18907                           
 18908                           ;incstack = 0
 18909                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18910                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18911  13AF  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18912                           
 18913                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18914  13B0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18915  13B1  319C  2462  3193   	fcall	_DimmerIntrIOCPointSelect
 18916                           
 18917                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 18918  13B4  0021               	movlb	1	; select bank1
 18919  13B5  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18920  13B6  0086               	movwf	6
 18921  13B7  3001               	movlw	1	; select bank2/3
 18922  13B8  0087               	movwf	7
 18923  13B9  1801               	btfsc	1,0
 18924  13BA  0008               	return
 18925  13BB  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18926  13BC  3E09               	addlw	9
 18927  13BD  0086               	movwf	6
 18928  13BE  3001               	movlw	1	; select bank2/3
 18929  13BF  0087               	movwf	7
 18930  13C0  1981               	btfsc	1,3
 18931  13C1  0008               	return
 18932  13C2  0020               	movlb	0	; select bank0
 18933  13C3  190D               	btfsc	13,2	;volatile
 18934  13C4  0008               	return
 18935                           
 18936                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18937  13C5  0021               	movlb	1	; select bank1
 18938  13C6  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18939  13C7  0086               	movwf	6
 18940  13C8  3001               	movlw	1	; select bank2/3
 18941  13C9  0087               	movwf	7
 18942  13CA  1401               	bsf	1,0
 18943                           
 18944                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18945  13CB  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18946  13CC  3E09               	addlw	9
 18947  13CD  0086               	movwf	6
 18948  13CE  3001               	movlw	1	; select bank2/3
 18949  13CF  0087               	movwf	7
 18950  13D0  1581               	bsf	1,3
 18951                           
 18952                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 18953  13D1  0022               	movlb	2	; select bank2
 18954  13D2  01C0               	clrf	(_Dimmer^(0+256)+2)
 18955                           
 18956                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18957  13D3  0021               	movlb	1	; select bank1
 18958  13D4  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18959  13D5  0086               	movwf	6
 18960  13D6  3001               	movlw	1	; select bank2/3
 18961  13D7  0087               	movwf	7
 18962  13D8  1F01               	btfss	1,6
 18963  13D9  0008               	return
 18964                           
 18965                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 18966  13DA  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18967  13DB  3E09               	addlw	9
 18968  13DC  0086               	movwf	6
 18969  13DD  3001               	movlw	1	; select bank2/3
 18970  13DE  0087               	movwf	7
 18971  13DF  1601               	bsf	1,4
 18972                           
 18973                           ;Dimmer_B1.c: 53: if (lights == 1) {
 18974  13E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18975  13E1  3A01               	xorlw	1
 18976  13E2  1D03               	skipz
 18977  13E3  0008               	return
 18978                           
 18979                           ;Dimmer_B1.c: 54: RB1 = 1;
 18980  13E4  0020               	movlb	0	; select bank0
 18981  13E5  148D               	bsf	13,1	;volatile
 18982  13E6  0008               	return
 18983  13E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 18984                           
 18985                           	psect	text134
 18986  1C62                     __ptext134:	
 18987 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18988 ;; Defined at:
 18989 ;;		line 8 in file "../src/Dimmer_B1.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  lights          1    wreg     unsigned char 
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;  lights          1    1[COMMON] unsigned char 
 18994 ;; Return value:  Size  Location     Type
 18995 ;;		None               void
 18996 ;; Registers used:
 18997 ;;		wreg
 18998 ;; Tracked objects:
 18999 ;;		On entry : 0/0
 19000 ;;		On exit  : 0/0
 19001 ;;		Unchanged: 0/0
 19002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;Total ram usage:        2 bytes
 19008 ;; Hardware stack levels used:    1
 19009 ;; This function calls:
 19010 ;;		Nothing
 19011 ;; This function is called by:
 19012 ;;		_setDimmerLights_IntrIOC_GO
 19013 ;; This function uses a non-reentrant model
 19014 ;;
 19015                           
 19016                           
 19017                           ;psect for function _DimmerIntrIOCPointSelect
 19018  1C62                     _DimmerIntrIOCPointSelect:	
 19019                           
 19020                           ;incstack = 0
 19021                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19022                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19023  1C62  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19024                           
 19025                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19026  1C63  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19027  1C64  3A01               	xorlw	1
 19028  1C65  1D03               	skipz
 19029  1C66  0008               	return
 19030                           
 19031                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19032  1C67  30C5               	movlw	_DimmerLights1& (0+255)
 19033  1C68  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19034  1C69  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19035  1C6A  0021               	movlb	1	; select bank1
 19036  1C6B  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19037  1C6C  0008               	return
 19038  1C6D                     __end_of_DimmerIntrIOCPointSelect:	
 19039  007E                     btemp	set	126	;btemp
 19040  007E                     pic14e$flags	set	126
 19041  007E                     wtemp	set	126
 19042  007E                     wtemp0	set	126
 19043  0080                     wtemp1	set	128
 19044  0082                     wtemp2	set	130
 19045  0084                     wtemp3	set	132
 19046  0086                     wtemp4	set	134
 19047  0088                     wtemp5	set	136
 19048  007F                     wtemp6	set	127
 19049  007E                     ttemp	set	126
 19050  007E                     ttemp0	set	126
 19051  0081                     ttemp1	set	129
 19052  0084                     ttemp2	set	132
 19053  0087                     ttemp3	set	135
 19054  007F                     ttemp4	set	127
 19055  007E                     ltemp	set	126
 19056  007E                     ltemp0	set	126
 19057  0082                     ltemp1	set	130
 19058  0086                     ltemp2	set	134
 19059  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   95409
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11071
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5971
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     382
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4872
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29028
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29028
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28245
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26405
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7239
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1970
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15459
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15258
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15192
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     762
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1347
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28352
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27961
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12643
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13574
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3773
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3773
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2095
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1805
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     244
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1117
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 03 15:08:24 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 166A                                       l94 1533  
                                     l86 167E                                       l95 152F  
                                     l96 151D                                       l98 152D  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1FDE  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CA4  
                 __end_of_setDelayOff_GO 1800                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1692  
                   _setDimmerLights_Line 1CC6                             ___ftadd@sign 004B  
                                    l231 0A05                                      l304 1E25  
                                    l305 1E26                     _setDimmerLights_SwOn 13E7  
                                    l348 10E3                                      l709 1203  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BB                                      _ISR 0004  
                                    _WDT 00CA             getDimmerLights_Status@lights 0022  
                                    _Sw1 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1E2F                    _Buzzer_Initialization 1BCD  
                        __end_of_ADC_Set 1C23                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CCF  
                 _setMain_Exception$3733 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1097                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1D2C                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2010 0565                                     l2101 144F  
                                   l1206 0846                                     l2006 060D  
                                   l2015 0590                                     l2008 055B  
                                   l2017 05C9                                     l2009 055D  
                                   l2051 1D31                                     l1430 126C  
                                   l1183 133C                                     l1434 1268  
                         _Load_Main$4108 002D                 ?_DimmerLightsPointSelect 0070  
                                   l2075 1374                                     l2059 0D8F  
                                   l1429 1251                                     l1197 11D2  
                                   l2069 0DE5                                     l1544 0436  
                                   l2089 090A                                     l1385 0955  
                                   l1547 032F                                     l2371 1E74  
                                   l1548 0406                                     l1549 0404  
                        __end_of_IOC_Set 1CF6                                     l2385 1F6D  
                                   l2395 01A9                                     l2732 099E  
                                   l2397 0082                                     l6022 1216  
                                   l2761 04DB                                     l1689 0FFC  
                                   l2738 09B5                                     l6122 156D  
                                   l6204 1263                                     l6300 09D3  
                                   l6140 143D                                     l7020 1F8B  
                                   l6150 1EBC                                     l5510 1DC8  
                                   l6230 1302                                     l6222 12EE  
                                   l6070 1E8F                                     l6302 09D6  
                                   l6126 157C                                     l6216 12E5  
                                   l5600 051A                                     l6072 1E93  
                                   l6320 09ED                                     l7024 1F90  
                                   l6154 1EC2                                     l6410 10F4  
                                   l5506 1DC2                                     l6090 15BE  
                                   l5610 0DFF                                     l7042 081C  
                                   l6170 1087                                     l6330 0A14  
                                   l6306 09DC                                     l7018 1F88  
                                   l6148 1EB9                                     l6412 10FF  
                                   l6420 1FC8                                     l6092 1593  
                                   l5540 0464                                     l7036 0807  
                                   l6164 107E                                     l6332 0A18  
                                   l6324 0A0B                                     l6094 15C4  
                                   l5550 047A                                     l5630 0E56  
                                   l5710 0C61                                     l6502 0D44  
                                   l6510 0B0D                                     l6166 1081  
                                   l6350 0B61                                     l6334 0A1B  
                                   l6326 0A0E                                     l7214 057C  
                                   l7302 1E7F                                     l7070 1766  
                                   l7062 1753                                     l6424 1FCE  
                                   l5528 1FE9                                     l5544 046B  
                                   l5616 0E15                                     l6600 11BA  
                                   l6352 0B64                                     l6280 08D1  
                                   l7080 1784                                     l7160 0FB4  
                                   l7128 0F59                                     l6418 1FC5  
                                   l6194 124C                                     l5482 097B  
                                   l5570 04B1                                     l5562 0494  
                                   l5730 0C9F                                     l6338 0A21  
                                   l6290 08EF                                     l7250 05B0  
                                   l7170 0FC9                                     l5820 07F9  
                                   l5812 07E8                                     l5804 07CA  
                                   l6196 1255                                     l5492 09A3  
                                   l5484 0985                                     l5580 04CD  
                                   l5572 04B6                                     l5740 0CB8  
                                   l6372 0B85                                     l6356 0B6A  
                                   l5652 0EA8                                     l6284 08E7  
                                   l6268 08AC                                     l7076 1774  
                                   l7332 00B0                                     l7316 006D  
                                   l7172 0FCA                    _setDimmerLights_SwOff 14A7  
                                   l7406 1507                                     l5806 07D6  
                                   l5494 09AB                                     l5486 098A  
                                   l5478 0974                                     l5590 04FF  
                                   l5582 04D7                                     l5574 04BA  
                                   l5638 0E6F                                     l6390 0BAE  
                                   l6366 0B7C                                     l6358 0B6D  
                                   l5670 0EF9                                     l6286 08EB  
                                   l6702 0DD0                                     l7086 1794  
                                   l6534 12B6                                     l7342 00E2  
                                   l7158 0FB2                                     l5816 07F1  
                                   l6464 11A2                                     l5568 04A7  
                                   l5744 0CC6                                     l5736 0CAC  
                                   l5728 0C91                                     l6368 0B7F  
                                   l7248 05AE                                     l7088 179D  
                                   l6466 1186                                     l5586 04ED  
                                   l5738 0CB5                                     l6490 0D1D  
                                   l7514 0683                                     l5682 0F15  
                                   l5674 0F01                                     l5658 0EBE  
                                   l7266 05DA                                     l5764 117D  
                                   l6468 11A7                                     l7452 11FA  
                                   l6388 0B96                                     l6644 1DA8  
                                   l6708 0DDB                                     l6556 1CAC  
                                   l6732 1DB9                                     l7356 0120  
                                   l6750 1488                                     l5870 17E8  
                                   l5950 14DB                                     l7454 11FD  
                                   l5686 0F1D                                     l5934 141D  
                                   l7278 05FB                                     l7366 0152  
                                   l7614 0C0D                                     l7606 0BE8  
                                   l6760 1498                                     l6752 148B  
                                   l5872 17F1                                     l5864 17D5  
                                   l7456 1205                                     l7712 031E  
                                   l6680 0D92                                     l7392 01A5  
                                   l6762 149B                                     l5794 07C2  
                                   l6930 16B7                                     l7298 1E79  
                                   l7634 0C42                                     l7618 0C15  
                                   l6756 1491                                     l5788 07B7  
                                   l5868 17DB                                     l6932 16BD  
                                   l7732 0349                                     l6692 0DAA  
                                   l6668 0D7B                                     l6766 14A1  
                                   l6942 16E5                                     l5968 1737  
                                   l7648 13A0                                     l7672 093F  
                                   l7762 03C2                                     l7770 03D5  
                                   l7738 0373                                     l7682 0956  
                                   l7666 092D                                     l7828 0424  
                                   l7780 03EA                                     l7852 1F76  
                                   l7932 1610                    _myMain_Initialization 1066  
                                   l7768 03CF                                     l7928 1605  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4015 0980                                     u4035 0999  
                                   u5005 1E52                                     u4055 09A6  
                                   u4225 0495                                     u4315 04CE  
                                   u4085 09BC                                     u4405 0E57  
                                   u4255 04A8                                     u4415 0E66  
                                   u4425 0E70                                     u4505 0F08  
                                   _PEIE 005E                                     u4285 04BB  
                                   u5095 159C                                     u4615 0C92  
                                   u4535 0F1E                                     u4385 0E27  
                                   u4545 0F24                                     u4465 0ECA  
                                   u4395 0E37                                     u4475 0EDA  
                                   u4645 0CAD                                     u7135 14FD  
                                   u4495 0F02                                     u5545 10E9  
                                   u4745 07CD                                     u4585 0C68  
                                   u4765 07D7                                     u5645 118F  
                                   u4950 16F5                                     u4775 07E1  
                                   u4695 1169                                     u4785 07E9  
                                   u6625 0F9A                                     u7425 0BFB  
                                   u4955 16F3                                     u7515 1397  
                                   u7365 1333                                     u6645 0FBA  
                                   u7525 13A6                                     u7705 0375  
                                   u6745 0576                                     u7545 091C  
                                   u7715 037A                                     u7475 0C2F  
                                   u7555 093B                                     u7725 0388  
                                   u7565 094D                                     u6865 05EB  
                                   u7585 0964                                     u7785 03DB  
                                   _LWLO 0CAD                                     _RSSI 00CF  
                                   _WREN 0CAA                                     _Buz1 00AF  
                                   _Load 0143                                     _Temp 00D6  
                                   _main 15E1                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 08AB                          __end_of_RF_Main 1BD6  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1C99  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1BDC                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1464  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1D3B                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1BFC  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1C58  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EB  
                        __end_of___awdiv 0800                          __end_of___ftadd 0532  
                        __end_of___ftdiv 0E91                          __end_of___ftneg 1C3C  
                        __end_of___ftmul 0F45                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0CCF  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l678 02D2  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1E58  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 13E7  
             _setDimmerLights_IntrIOC_GO 13AF                         __end_of_TMR1_ISR 10DE  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 15E1  
             _setDimmerLights_ErrorClose 1589                         __end_of_TMR1_Set 1D02  
                                  _getAD 1F7D                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1DF5              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D6B  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 11AA  
          __end_of_setLED_Initialization 1D8C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 16EB  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A92                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1639  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1C00  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D58  
                   _setSw_Initialization 1D6B                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 08AB                           _setMemory_Data 1CD2  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C83  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 084E                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 2000  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09CC  
               _getMain_All_Error_Status 123B                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F00                                   i1l6854 020E  
                                 i1l6880 0278                                   i1l6872 0259  
                                 i1l6890 02A5                                   i1l6876 0268  
                                 i1l6884 0287                                   i1l6894 02BA  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u616_25 01E7                                   _OSCCON 0099  
                     __size_of_Load_Main 0144                                   u729_25 10D8  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E99                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1BCB  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E6D  
                                 _Dimmer 013E                                   _DlySw1 01DD  
             __end_of_Mcu_Initialization 1DE3                      __end_of_Buzzer_Main 153A  
                                 _Memory 01A0                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1F5D               _setDimmerLights_TriggerAdj 1F3D  
                                 ___bmul 1DBF                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D4                                   _s_data 00D5  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 12D6  
                                 _myMain 00A0                   __end_of_setMemory_Data 1CDE  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 1639                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1C0A         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 02F8  
            _setDimmerLights_IntrControl 01B2                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1E1B  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1CBA  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1E6D  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0AF7  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5493 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1F9D  
                          __end_of_getAD 1F9D                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1BF4                          _getSw_KeyStatus 1DAE  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1D5B                                ?_WDT_Main 0070  
                      __end_of_Load_Main 043C                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 117F               __end_of_set_TimeoutCleared 1C05  
               __end_of_setDimmerReClock 1BE0                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CD  
                   __size_of_setLED_Main 0033                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1BD6  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 14F0                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1BDC                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1BEC                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 15E1                           _getDelayOff_GO 1D4B  
                    _CC2500_WriteCommand 1EB1                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BC7                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1C23                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1C1C  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1378  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1CA4                       _setRFSW_AdjControl 1424  
                                _IOC_ISR 1D1D                                  _IOC_Set 1CEA  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 130C                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1ECA              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1BD3  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1C8E          __end_of_setControl_Lights_Table 090B  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 0A2D  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1CC6                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1D9D                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1D5B  
         __end_of_getDimmerLights_Status 1D4B                        __end_of_getRxData 0DE8  
                __end_of_getSw_KeyStatus 1DBF                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1C6D                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1F1E                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 07AC                                  ___ftadd 043C  
                                ___ftdiv 0DE8                                  ___ftneg 1C33  
                                ___ftmul 0E91                                  ___fttol 0C48  
                    __end_of_Switch_Main 1F7D                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1D9D                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 090B                                  __ptext2 1066  
                                __ptext3 1378                                  __ptext4 0BC7  
                                __ptext5 1F7D                                  __ptext6 1DE3  
                                __ptext7 0002                                  __ptext8 1BD9  
                                __ptext9 0F45                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C4E  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 1342                __end_of_Flash_Memory_Read 1EE4  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 0532  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1BF0  
                      _DimmerLights_Main 11D9           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1C10               __end_of_CC2500_ClearRXFIFO 1BE4  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1BE8  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1C83                      _DelayOffPointSelect 1C6D  
                         _getMain_LoadOK 1D0F                                  clrloop0 1C17  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1C4E  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 112B                            _DelayTime_1us 10DE  
                      __end_of_setTxData 07AC               __end_of_Flash_Memory_Write 11D9  
                                init_ram 1C10                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C11                               _setSw_Main 0043  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1075                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1D7B                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B5D  
                          _CC2500_TxData 09CC                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 0800  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C3C                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1209                       _Mcu_Initialization 1DD1  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 096B  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C8E                  __end_of_setPercentValue 0A92  
                 __end_of_getMain_LoadOK 1D1D                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1155                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0AF7  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1097  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1EB1                     _setRF_Initialization 1C99  
                     _setMemory_LoopSave 1E08                              _Switch_Main 1F5D  
                      __size_of_LED_Main 0004                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C78                  __end_of_getRF_KeyStatus 1DAE  
                      _setMain_Exception 1747                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E58  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1DD1                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1C62  
        _setDimmerLights_AdjControl$2409 0027                        getSw_KeyStatus@sw 0070  
                      __size_of_TMR1_ISR 0024            __size_of_getDimmerLights_Line 000B  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 130C  
          __size_of_setDimmerLights_Line 000C            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 1692                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1CBA               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 153A                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1209                          ?_LedPointSelect 0070  
                              _Load_Main 02F8                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1C2B  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1F3D          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 1000  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1C00                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E2  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 17A3                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1BD9                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D0  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D2                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1C58                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 126E                         _CC2500_SIDLEMode 1BE8  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 123B  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1DF5  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1F00  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DF  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1BCC  
                              _getBuz_GO 1D8C      __end_of_Flash_Memory_Initialization 06ED  
            _Flash_Memory_Initialization 0611                                 ?___awdiv 0020  
                              __ptext100 17A3                                __ptext101 1155  
                              __ptext110 1C6D                                __ptext102 1DBF  
                              __ptext111 1E58                                __ptext103 1D4B  
                              __ptext120 1BE0                                __ptext112 1BE8  
                              __ptext104 1D3B                                __ptext121 1EB1  
                              __ptext113 1464                                __ptext105 1C78  
                              __ptext130 1C4E                                __ptext122 1C00  
                              __ptext114 112B                                __ptext106 1639  
                              __ptext131 1D1D                                __ptext123 1E43  
                              __ptext115 1F1E                                __ptext107 07AC  
                              __ptext132 1BDC                                __ptext124 1E1B  
                              __ptext116 1FBD                                __ptext108 1BEC  
                              __ptext133 13AF                                __ptext125 14F0  
                              __ptext117 1CBA                                __ptext109 1C0A  
                               ?___ftadd 0041                                __ptext134 1C62  
                              __ptext126 1BCD                                __ptext118 10DE  
                              __ptext119 1BE4                                __ptext128 10BA  
                              __ptext129 01B2                                _getRxData 0D58  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 0060                  __end_of_setRFSW_Control 1589  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1BD0  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0020  
                     __end_of_TouchPower 1E82                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 10BA                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2345 0069                                _r_address 00D3  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 14F0             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1075                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CAF  
                    __end_of_setLED_Main 12A1                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CE                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1BD9             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BF8  
                        SwPointSelect@sw 0021                                clear_ram0 1C16  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 090B                                _setTxData 06ED  
    __end_of_DimmerLights_Initialization 1D0F              _DimmerLights_Initialization 1D02  
                     _CC2500_ClearRXFIFO 1BE0                       _CC2500_ClearTXFIFO 1BE4  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E43  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 11AA  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 10BA                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1CF6                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0141                     __end_of_RF_RxDisable 1D3B  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1ECA  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1DE3  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E8  
                  __size_of_setTemp_Main 00BB                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1CEA  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1378  
                  _DlyOff_Initialization 1C0A                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1BFC  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C48  
                     __end_of_getLoad_OK 1C2B                    _Switch_Initialization 1C45  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 13AF  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E1B  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$3749 0021  
          _getMain_All_Error_Status$3758 0023                 __end_of_getDimmer_LoadOK 1C33  
                    _Load_Initialization 1C05                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0F45                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1FDE  
                       ??_LedPointSelect 0020                                 ___ftpack 096B  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002B                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 126E               __end_of_setRF_DimmerLights 1747  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 000A                     ?_Load_Initialization 0070  
                               __ptext10 1BD6                                 __ptext11 1BCC  
                               __ptext20 1C45                                 __ptext12 1F5D  
                               __ptext21 1D6B                                 __ptext13 0043  
                               __ptext30 13E7                                 __ptext22 1E6D  
                               __ptext14 1E2F                                 __ptext31 1424  
                               __ptext23 1BD3                                 __ptext15 12A1  
                               __ptext40 09CC                                 __ptext32 1209  
                               __ptext24 0532                                 __ptext16 1DAE  
                               __ptext41 0B5D                                 __ptext33 1097  
                               __ptext25 0D58                                 __ptext17 1CAF  
                               __ptext50 1CEA                                 __ptext42 1075  
                               __ptext34 0A92                                 __ptext26 1342  
                               __ptext18 1747                                 __ptext51 1BFC  
                               __ptext43 1E82                                 __ptext35 0E91  
                               __ptext27 1E08                                 __ptext19 1CA4  
                               __ptext60 1BF8                                 __ptext52 1C1C  
                               __ptext44 1BD0                                 __ptext36 1DF5  
                               __ptext28 08AB                                 __ptext61 126E  
                               __ptext53 02F8                                 __ptext45 1C99  
                               __ptext37 1D9D                                 __ptext29 153A  
                               __ptext70 1C3C                                 __ptext62 1BF4  
                               __ptext54 1D0F                                 __ptext46 1DD1  
                               __ptext38 1D8C                                 __ptext71 1ECA  
                               __ptext63 1D7B                                 __ptext55 1C2B  
                               __ptext47 1C8E                                 __ptext39 1D2C  
                               __ptext80 1C33                                 __ptext72 11D9  
                               __ptext64 130C                                 __ptext56 1D5B  
                               __ptext48 1CF6                                 __ptext81 0DE8  
                               __ptext73 1692                                 __ptext65 0800  
                               __ptext57 1C58                                 __ptext49 1E99  
                               __ptext90 1C23                                 __ptext82 043C  
                               __ptext74 0AF7                                 __ptext66 1CDE  
                               __ptext58 1C05                                 __ptext91 1D02  
                               __ptext83 1FDE                                 __ptext75 0CCF  
                               __ptext67 0611                                 __ptext59 1EE4  
                               __ptext92 1104                                 __ptext84 096B  
                               __ptext76 06ED                                 __ptext68 1CD2  
                               __ptext93 1BCB                                 __ptext85 12D6  
                               __ptext77 16EB                                 __ptext69 11AA  
                               __ptext94 1BF0                                 __ptext86 1C83  
                               __ptext78 0A2D                                 __ptext95 084E  
                               __ptext87 1CC6                                 __ptext79 0C48  
                               __ptext96 1589                                 __ptext88 123B  
                               __ptext97 14A7                                 __ptext89 117F  
                               __ptext98 1F3D                                 __ptext99 1F00  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1CAF  
          __end_of_Dimmer_Initialization 1BCC             __end_of_setDimmerLights_Main 16EB  
           __end_of_setDimmerLights_Line 1CD2                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 1424                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1E2F  
               __end_of_CC2500_SIDLEMode 1BEC               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C78               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00E9                __size_of_setDimmerReClock 0004  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1E82  
                     _CC2500_InitPATable 1F1E                 __end_of_setMemory_Modify 1E08  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 0611  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EB  
                               main@argv 00ED                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6549 0022                          _CC2500_PowerRST 1464  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 084E  
                      ??_getPercentValue 005C                              _setLog_Code 1342  
            __end_of_Flash_Memory_Unlock 1C45                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1FBD                       __end_of_setSw_Main 01B2  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1155  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C62  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 112B  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1104  
            __end_of_setDimmerLights_Adj 0B5D                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1BD0  
   __size_of_setDimmerLights_IntrControl 0146                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1CDE                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1BF0  
    __size_of_setDimmerLights_IntrIOC_GO 0038      __size_of_setDimmerLights_ErrorClose 0058  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1BF4  
     __end_of_setDimmerLights_AdjControl 12D6               _setDimmerLights_AdjControl 12A1  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 17A3         __size_of_setControl_Lights_Table 0060  
                 __end_of_DelayTimejudge 117F     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1104  
                __end_of_CC2500_ReadByte 1E99             __end_of_setSw_Initialization 1D7B  
                        _Timeout_Counter 1E43          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005E                             _RF_RxDisable 1D2C  
             __end_of_LED_Initialization 1BF8         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1BCD                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1BD3                    __end_of_CC2500_RxData 0BC7  
                  __end_of_CC2500_TxData 0A2D                    _setLoad_AH_AL_Restore 1EE4  
                __end_of_CC2500_PowerRST 14A7           getAll_DimmerLights_AdjGO@adjgo 0020  
