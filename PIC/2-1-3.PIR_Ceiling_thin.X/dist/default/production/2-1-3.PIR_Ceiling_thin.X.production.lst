

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Mar 11 11:52:29 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002D                     _RA5	set	45
  1335  002E                     _RA6	set	46
  1336  002F                     _RA7	set	47
  1337  0032                     _RB2	set	50
  1338  0033                     _RB3	set	51
  1339  0060                     _TMR1IF	set	96
  1340  009F                     _ADCON1	set	159
  1341  009D                     _FVRCON	set	157
  1342  0090                     _OSCCON	set	144
  1343  0085                     _TRISA	set	133
  1344  0086                     _TRISB	set	134
  1345  0087                     _TRISC	set	135
  1346  0095                     _WPUB	set	149
  1347  0408                     _PS0	set	1032
  1348  0409                     _PS1	set	1033
  1349  040A                     _PS2	set	1034
  1350  040B                     _PSA	set	1035
  1351  0460                     _TMR1IE	set	1120
  1352  0185                     _ANSELA	set	389
  1353  0186                     _ANSELB	set	390
  1354                           
  1355                           	psect	text0
  1356  0000                     __ptext0:	
  1357                           ; #config settings
  1358                           
  1359                           
  1360                           ;psect for function _TMR1_ISR
  1361  0000                     
  1362                           	psect	cinit
  1363  0013                     start_initialization:	
  1364  0013                     __initialization:	
  1365                           
  1366                           ; Clear objects allocated to COMMON
  1367  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1368  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1369  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1370  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1371                           
  1372                           ; Clear objects allocated to BANK0
  1373  0017  1383               	bcf	3,7	;select IRP bank0
  1374  0018  3020               	movlw	low __pbssBANK0
  1375  0019  0084               	movwf	4
  1376  001A  304D               	movlw	low (__pbssBANK0+45)
  1377  001B  118A  27F8  118A   	fcall	clear_ram0
  1378                           
  1379                           ; Clear objects allocated to BANK1
  1380  001E  30A0               	movlw	low __pbssBANK1
  1381  001F  0084               	movwf	4
  1382  0020  30E6               	movlw	low (__pbssBANK1+70)
  1383  0021  118A  27F8         	fcall	clear_ram0
  1384  0023                     end_of_initialization:	
  1385                           ;End of C runtime variable initialization code
  1386                           
  1387  0023                     __end_of__initialization:	
  1388  0023  0183               	clrf	3
  1389  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1390                           
  1391                           	psect	bssCOMMON
  1392  0076                     __pbssCOMMON:	
  1393  0076                     _LED:	
  1394  0076                     	ds	1
  1395  0077                     _Light:	
  1396  0077                     	ds	1
  1397  0078                     _Lights:	
  1398  0078                     	ds	1
  1399  0079                     _LightsControl:	
  1400  0079                     	ds	1
  1401                           
  1402                           	psect	bssBANK0
  1403  0020                     __pbssBANK0:	
  1404  0020                     _SYSC:	
  1405  0020                     	ds	5
  1406  0025                     _myMain:	
  1407  0025                     	ds	5
  1408  002A                     _PIRLED:	
  1409  002A                     	ds	4
  1410  002E                     __CDS:	
  1411  002E                     	ds	4
  1412  0032                     _Timer1:	
  1413  0032                     	ds	3
  1414  0035                     _WDT:	
  1415  0035                     	ds	2
  1416  0037                     _Cmd:	
  1417  0037                     	ds	1
  1418  0038                     _SwDetect:	
  1419  0038                     	ds	1
  1420  0039                     _Temp:	
  1421  0039                     	ds	7
  1422  0040                     _Lights1:	
  1423  0040                     	ds	5
  1424  0045                     _VarLED1:	
  1425  0045                     	ds	4
  1426  0049                     _VarLED2:	
  1427  0049                     	ds	4
  1428                           
  1429                           	psect	bssBANK1
  1430  00A0                     __pbssBANK1:	
  1431  00A0                     __PIR:	
  1432  00A0                     	ds	42
  1433  00CA                     _Load:	
  1434  00CA                     	ds	28
  1435                           
  1436                           	psect	clrtext
  1437  07F8                     clear_ram0:	
  1438                           ;	Called with FSR containing the base address, and
  1439                           ;	W with the last address+1
  1440                           
  1441  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1442  07F9                     clrloop0:	
  1443  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1444  07FA  0A84               	incf	4,f	;increment pointer
  1445  07FB  0604               	xorwf	4,w	;XOR with final address
  1446  07FC  1903               	btfsc	3,2	;have we reached the end yet?
  1447  07FD  3400               	retlw	0	;all done for this memory range, return
  1448  07FE  0604               	xorwf	4,w	;XOR again to restore value
  1449  07FF  2FF9               	goto	clrloop0	;do the next byte
  1450                           
  1451                           	psect	cstackCOMMON
  1452  0070                     __pcstackCOMMON:	
  1453  0070                     ?_setLED_Initialization:	
  1454  0070                     ?_setPIRLED_Main:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_Fosc_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_IO_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_TMR1_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_ADC_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_WDT_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_TMR1_ISR:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ??_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_Timeout_Counter:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_set_TimeoutCleared:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_WDT_Clearing:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_myMain_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_SYSC_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Temp_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Load_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Lights_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_PIR_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_DetectSYSC_Signal:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_getLoad_AD:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getTemp_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_my_MainTimer:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_SYSC_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Temp_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Load_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Lights_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_PIR_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_Exception_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setLights_SwOn:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOff:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLoad_AH_AL_Restore:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setTemp_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setSYSC_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Main:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setLights_Initialization:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Main:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_Lights_Control:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_setLights_Line:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_CDS_Initialization:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Main:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_LedPointSelect:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LED_Initialization:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Main:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_Mcu_Initialization:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_ISR:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ??_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_WDT_Main:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_LightsPointSelect:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_getLights_Status:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getAll_Lights_Line:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getLight_LoadGO:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_Load_Status:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLights_Allow_Condition:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getCDS_Status:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getMain_All_LightsStatus:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_Error_Status:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_Lights_Count:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getLoad_OK:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     getLights_Allow_Condition@lights:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631                           
  1632                           ; 1 bytes @ 0x0
  1633  0070                     	ds	4
  1634  0074                     ??_Fosc_Set:	
  1635  0074                     ??_IO_Set:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_TMR1_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_ADC_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_WDT_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_Timeout_Counter:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_set_TimeoutCleared:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_WDT_Clearing:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_myMain_Initialization:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_SYSC_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_Temp_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_PIR_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_DetectSYSC_Signal:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_my_MainTimer:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_getAll_Lights_Line:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_setLoad_AH_AL_Restore:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_getLight_LoadGO:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_getLight_Load_Status:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_setTemp_Initialization:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setSYSC_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_setLights_Line:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_CDS_Initialization:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_getCDS_Status:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_LedPointSelect:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_WDT_Main:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_getMain_All_LightsStatus:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_All_Error_Status:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getMain_Lights_Count:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_getLoad_OK:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??_LightsPointSelect:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??___wmul:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___awdiv:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ??___lwdiv:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     ?_getAD:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0074                     getCDS_Status@status:	
  1735                           ; 1 bytes @ 0x4
  1736                           
  1737  0074                     getAD@adcon1:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getMain_All_LightsStatus@status:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getMain_Lights_Count@count:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getLoad_OK@ok:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     setLights_Line@lights:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     getAll_Lights_Line@line:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     getLight_LoadGO@loadgo:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758  0074                     getLight_Load_Status@loadstatus:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761  0074                     ___wmul@product:	
  1762                           ; 1 bytes @ 0x4
  1763                           
  1764                           
  1765                           ; 2 bytes @ 0x4
  1766  0074                     	ds	1
  1767  0075                     ??_getAD:	
  1768  0075                     ??_SYSC_Main:	
  1769                           ; 0 bytes @ 0x5
  1770                           
  1771  0075                     ??_setTemp_Main:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_setSYSC_Main:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     ??_getLights_Allow_Condition:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     ??_Mcu_Initialization:	
  1781                           ; 0 bytes @ 0x5
  1782                           
  1783  0075                     LedPointSelect@led:	
  1784                           ; 0 bytes @ 0x5
  1785                           
  1786  0075                     getAD@adcon0:	
  1787                           ; 1 bytes @ 0x5
  1788                           
  1789  0075                     getMain_Lights_Count@status1:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792  0075                     setLoad_AH_AL_Restore@i:	
  1793                           ; 1 bytes @ 0x5
  1794                           
  1795  0075                     LightsPointSelect@lights:	
  1796                           ; 1 bytes @ 0x5
  1797                           
  1798                           
  1799                           ; 1 bytes @ 0x5
  1800  0075                     	ds	1
  1801  0076                     ??_setLED_Initialization:	
  1802  0076                     ??_setLED:	
  1803                           ; 0 bytes @ 0x6
  1804                           
  1805  0076                     ??_Load_Initialization:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Lights_Initialization:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_Temp_Main:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_Lights_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_getLights_Status:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_setLights_SwOn:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_SwOff:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_Initialization:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_setLights_Main:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_LED_Initialization:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  0076                     ??_LED_Main:	
  1836                           ; 0 bytes @ 0x6
  1837                           
  1838                           
  1839                           	psect	cstackBANK0
  1840  004D                     __pcstackBANK0:	
  1841                           ; 0 bytes @ 0x6
  1842                           
  1843  004D                     ?_setLED:	
  1844  004D                     ??_getLoad_AD:	
  1845                           ; 0 bytes @ 0x0
  1846                           
  1847  004D                     ??_getTemp_AD:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  004D                     ??_CDS_Main:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  004D                     ?_getCDS_AD:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  004D                     ?_setLights_Trigger:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  004D                     ?___wmul:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  004D                     ?___awdiv:	
  1863                           ; 2 bytes @ 0x0
  1864                           
  1865  004D                     ?___lwdiv:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  004D                     getCDS_AD@channel2:	
  1869                           ; 2 bytes @ 0x0
  1870                           
  1871  004D                     setLED@command:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  004D                     setLights_Initialization@lights:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  004D                     getLights_Status@lights:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  004D                     setLights_Trigger@command:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  004D                     getLights_Allow_Condition@allow:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  004D                     _getMain_All_Error_Status$2127:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  004D                     ___wmul@multiplier:	
  1890                           ; 2 bytes @ 0x0
  1891                           
  1892  004D                     ___awdiv@divisor:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  004D                     ___lwdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x0
  1900  004D                     	ds	1
  1901  004E                     ??_getCDS_AD:	
  1902  004E                     ??_setLights_Trigger:	
  1903                           ; 0 bytes @ 0x1
  1904                           
  1905  004E                     setLED@led:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  004E                     getLights_Status@status:	
  1909                           ; 1 bytes @ 0x1
  1910                           
  1911  004E                     _getLights_Allow_Condition$4224:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0x1
  1916  004E                     	ds	1
  1917  004F                     ??_setPIRLED_Main:	
  1918  004F                     ?_setLights:	
  1919                           ; 0 bytes @ 0x2
  1920                           
  1921  004F                     setLED_Initialization@led:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  004F                     getLoad_AD@channel:	
  1925                           ; 1 bytes @ 0x2
  1926                           
  1927  004F                     getTemp_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  004F                     setLights@status:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  004F                     setLights_Trigger@lights:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  004F                     _getMain_All_Error_Status$2128:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  004F                     ___wmul@multiplicand:	
  1940                           ; 2 bytes @ 0x2
  1941                           
  1942  004F                     ___awdiv@dividend:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  004F                     ___lwdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948                           
  1949                           ; 2 bytes @ 0x2
  1950  004F                     	ds	1
  1951  0050                     ??_setLights:	
  1952  0050                     getCDS_AD@i:	
  1953                           ; 0 bytes @ 0x3
  1954                           
  1955  0050                     setPIRLED_Main@count:	
  1956                           ; 1 bytes @ 0x3
  1957                           
  1958  0050                     getLoad_AD@k:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  0050                     getTemp_AD@ADRES:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  0050                     setLights_SwOn@sw:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  0050                     setLights_SwOff@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x3
  1972  0050                     	ds	1
  1973  0051                     getCDS_AD@j:	
  1974  0051                     getMain_All_Error_Status@command:	
  1975                           ; 1 bytes @ 0x4
  1976                           
  1977  0051                     getLoad_AD@j:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0051                     setLights@lights:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0051                     ___awdiv@counter:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0051                     ___lwdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989                           
  1990                           ; 1 bytes @ 0x4
  1991  0051                     	ds	1
  1992  0052                     getCDS_AD@channel1:	
  1993  0052                     getMain_All_Error_Status@status:	
  1994                           ; 1 bytes @ 0x5
  1995                           
  1996  0052                     getLoad_AD@ADRES:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0052                     setLights_Main@lights:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0052                     ___awdiv@sign:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0052                     ___lwdiv@quotient:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008                           
  2009                           ; 2 bytes @ 0x5
  2010  0052                     	ds	1
  2011  0053                     ??_PIR_Main:	
  2012  0053                     ??_Exception_Main:	
  2013                           ; 0 bytes @ 0x6
  2014                           
  2015  0053                     getLoad_AD@i:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0053                     setTemp_Main@error:	
  2019                           ; 1 bytes @ 0x6
  2020                           
  2021  0053                     ___awdiv@quotient:	
  2022                           ; 1 bytes @ 0x6
  2023                           
  2024                           
  2025                           ; 2 bytes @ 0x6
  2026  0053                     	ds	1
  2027  0054                     ??_Load_Main:	
  2028  0054                     Exception_Main@lights:	
  2029                           ; 0 bytes @ 0x7
  2030                           
  2031  0054                     setTemp_Main@TempGO:	
  2032                           ; 1 bytes @ 0x7
  2033                           
  2034                           
  2035                           ; 1 bytes @ 0x7
  2036  0054                     	ds	1
  2037  0055                     ?_getPIR_AD:	
  2038  0055                     ??_Lights_Control:	
  2039                           ; 0 bytes @ 0x8
  2040                           
  2041  0055                     Exception_Main@count:	
  2042                           ; 0 bytes @ 0x8
  2043                           
  2044  0055                     setTemp_Main@SafeValue:	
  2045                           ; 1 bytes @ 0x8
  2046                           
  2047  0055                     getPIR_AD@channel2:	
  2048                           ; 1 bytes @ 0x8
  2049                           
  2050                           
  2051                           ; 1 bytes @ 0x8
  2052  0055                     	ds	1
  2053  0056                     ??_getPIR_AD:	
  2054  0056                     Exception_Main@status:	
  2055                           ; 0 bytes @ 0x9
  2056                           
  2057  0056                     Load_Main@error:	
  2058                           ; 1 bytes @ 0x9
  2059                           
  2060  0056                     setTemp_Main@DangerValue:	
  2061                           ; 1 bytes @ 0x9
  2062                           
  2063                           
  2064                           ; 1 bytes @ 0x9
  2065  0056                     	ds	1
  2066  0057                     setTemp_Main@AD:	
  2067  0057                     Lights_Control@lights:	
  2068                           ; 1 bytes @ 0xA
  2069                           
  2070  0057                     Exception_Main@i:	
  2071                           ; 1 bytes @ 0xA
  2072                           
  2073  0057                     _Load_Main$2389:	
  2074                           ; 2 bytes @ 0xA
  2075                           
  2076                           
  2077                           ; 2 bytes @ 0xA
  2078  0057                     	ds	1
  2079  0058                     PIR_Main@error:	
  2080                           
  2081                           ; 1 bytes @ 0xB
  2082  0058                     	ds	1
  2083  0059                     Load_Main@ErrorCountValue:	
  2084  0059                     PIR_Main@cds:	
  2085                           ; 1 bytes @ 0xC
  2086                           
  2087  0059                     getPIR_AD@j:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090  0059                     Exception_Main@i_2140:	
  2091                           ; 1 bytes @ 0xC
  2092                           
  2093                           
  2094                           ; 2 bytes @ 0xC
  2095  0059                     	ds	1
  2096  005A                     Load_Main@Load_RunStatus:	
  2097  005A                     PIR_Main@Enable_Switch:	
  2098                           ; 1 bytes @ 0xD
  2099                           
  2100  005A                     getPIR_AD@channel1:	
  2101                           ; 1 bytes @ 0xD
  2102                           
  2103                           
  2104                           ; 1 bytes @ 0xD
  2105  005A                     	ds	1
  2106  005B                     Exception_Main@error:	
  2107  005B                     Load_Main@LightsCount:	
  2108                           ; 1 bytes @ 0xE
  2109                           
  2110  005B                     getPIR_AD@VRAD1:	
  2111                           ; 1 bytes @ 0xE
  2112                           
  2113  005B                     _PIR_Main$2856:	
  2114                           ; 1 bytes @ 0xE
  2115                           
  2116                           
  2117                           ; 2 bytes @ 0xE
  2118  005B                     	ds	1
  2119  005C                     getPIR_AD@VRAD:	
  2120  005C                     Load_Main@i:	
  2121                           ; 1 bytes @ 0xF
  2122                           
  2123                           
  2124                           ; 2 bytes @ 0xF
  2125  005C                     	ds	1
  2126  005D                     PIR_Main@TriggerValue:	
  2127  005D                     getPIR_AD@i:	
  2128                           ; 1 bytes @ 0x10
  2129                           
  2130                           
  2131                           ; 1 bytes @ 0x10
  2132  005D                     	ds	1
  2133  005E                     PIR_Main@LightsStatus:	
  2134                           
  2135                           ; 1 bytes @ 0x11
  2136  005E                     	ds	1
  2137  005F                     ?_main:	
  2138  005F                     main@argc:	
  2139                           ; 2 bytes @ 0x12
  2140                           
  2141                           
  2142                           ; 2 bytes @ 0x12
  2143  005F                     	ds	2
  2144  0061                     main@argv:	
  2145                           
  2146                           ; 2 bytes @ 0x14
  2147  0061                     	ds	2
  2148  0063                     ??_main:	
  2149                           
  2150                           ; 0 bytes @ 0x16
  2151  0063                     	ds	1
  2152                           
  2153                           	psect	maintext
  2154  0F9A                     __pmaintext:	
  2155 ;;
  2156 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2157 ;;
  2158 ;; *************** function _main *****************
  2159 ;; Defined at:
  2160 ;;		line 7 in file "../src/Main_B1.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  argc            2   18[BANK0 ] int 
  2163 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  2   18[BANK0 ] int 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 17F/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2175 ;;      Params:         0       4       0       0
  2176 ;;      Locals:         0       0       0       0
  2177 ;;      Temps:          0       1       0       0
  2178 ;;      Totals:         0       5       0       0
  2179 ;;Total ram usage:        5 bytes
  2180 ;; Hardware stack levels required when called:    7
  2181 ;; This function calls:
  2182 ;;		_CDS_Initialization
  2183 ;;		_CDS_Main
  2184 ;;		_DetectSYSC_Signal
  2185 ;;		_Exception_Main
  2186 ;;		_LED_Initialization
  2187 ;;		_LED_Main
  2188 ;;		_Lights_Initialization
  2189 ;;		_Lights_Main
  2190 ;;		_Load_Initialization
  2191 ;;		_Load_Main
  2192 ;;		_Mcu_Initialization
  2193 ;;		_PIR_Initialization
  2194 ;;		_PIR_Main
  2195 ;;		_SYSC_Initialization
  2196 ;;		_SYSC_Main
  2197 ;;		_Temp_Initialization
  2198 ;;		_Temp_Main
  2199 ;;		_WDT_Main
  2200 ;;		_getCDS_AD
  2201 ;;		_getLoad_AD
  2202 ;;		_getPIR_AD
  2203 ;;		_getTemp_AD
  2204 ;;		_myMain_Initialization
  2205 ;;		_my_MainTimer
  2206 ;; This function is called by:
  2207 ;;		Startup code after reset
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _main
  2213  0F9A                     _main:	
  2214                           
  2215                           ;Main_B1.c: 8: myMain_Initialization();
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2219  0F9A  158A  229F  158A   	fcall	_myMain_Initialization
  2220                           
  2221                           ;Main_B1.c: 9: Mcu_Initialization();
  2222  0F9D  158A  2364  158A   	fcall	_Mcu_Initialization
  2223                           
  2224                           ;Main_B1.c: 10: ;;
  2225                           ;Main_B1.c: 11: LED_Initialization();
  2226  0FA0  158A  22E3  158A   	fcall	_LED_Initialization
  2227                           
  2228                           ;Main_B1.c: 12: ;;
  2229                           ;Main_B1.c: 14: SYSC_Initialization();
  2230  0FA3  158A  22A6  158A   	fcall	_SYSC_Initialization
  2231                           
  2232                           ;Main_B1.c: 15: Temp_Initialization();
  2233  0FA6  158A  22AC  158A   	fcall	_Temp_Initialization
  2234                           
  2235                           ;Main_B1.c: 16: Load_Initialization();
  2236  0FA9  158A  22A3  158A   	fcall	_Load_Initialization
  2237                           
  2238                           ;Main_B1.c: 17: ;;
  2239                           ;Main_B1.c: 18: ;;
  2240                           ;Main_B1.c: 20: ;;
  2241                           ;Main_B1.c: 21: Lights_Initialization();
  2242  0FAC  158A  22B6  158A   	fcall	_Lights_Initialization
  2243                           
  2244                           ;Main_B1.c: 22: CDS_Initialization();
  2245  0FAF  158A  22B2  158A   	fcall	_CDS_Initialization
  2246                           
  2247                           ;Main_B1.c: 23: PIR_Initialization();
  2248  0FB2  158A  2321  158A   	fcall	_PIR_Initialization
  2249  0FB5                     l5339:	
  2250                           ;Main_B1.c: 24: ;;
  2251                           ;Main_B1.c: 25: ;;
  2252                           ;Main_B1.c: 26: ;;
  2253                           ;Main_B1.c: 27: ;;
  2254                           ;Main_B1.c: 28: ;;
  2255                           ;Main_B1.c: 30: while (1) {
  2256                           
  2257                           
  2258                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2259  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2260  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2261  0FB7  1C25               	btfss	_myMain,0
  2262  0FB8  2FD8               	goto	l5351
  2263                           
  2264                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2265  0FB9  158A  232C  158A   	fcall	_DetectSYSC_Signal
  2266                           
  2267                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2268  0FBC  3001               	movlw	1
  2269  0FBD  158A  267C  158A   	fcall	_getLoad_AD
  2270                           
  2271                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2272  0FC0  3011               	movlw	17
  2273  0FC1  158A  24CB  158A   	fcall	_getTemp_AD
  2274                           
  2275                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2276  0FC4  3005               	movlw	5
  2277  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2279  0FC7  00E3               	movwf	??_main
  2280  0FC8  0863               	movf	??_main,w
  2281  0FC9  00CD               	movwf	getCDS_AD@channel2
  2282  0FCA  3029               	movlw	41
  2283  0FCB  158A  24EA  158A   	fcall	_getCDS_AD
  2284                           
  2285                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2286  0FCE  3009               	movlw	9
  2287  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0FD1  00E3               	movwf	??_main
  2290  0FD2  0863               	movf	??_main,w
  2291  0FD3  00D5               	movwf	getPIR_AD@channel2
  2292  0FD4  302D               	movlw	45
  2293  0FD5  118A  241A  158A   	fcall	_getPIR_AD
  2294  0FD8                     l5351:	
  2295                           
  2296                           ;Main_B1.c: 57: }
  2297                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2298  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0FDA  1C32               	btfss	_Timer1,0
  2301  0FDB  2FB5               	goto	l5339
  2302                           
  2303                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2304  0FDC  1032               	bcf	_Timer1,0
  2305                           
  2306                           ;Main_B1.c: 96: my_MainTimer();
  2307  0FDD  158A  245C  158A   	fcall	_my_MainTimer
  2308                           
  2309                           ;Main_B1.c: 97: WDT_Main();
  2310  0FE0  158A  2384  158A   	fcall	_WDT_Main
  2311                           
  2312                           ;Main_B1.c: 98: ;;
  2313                           ;Main_B1.c: 99: ;;
  2314                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2315  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0FE5  1C25               	btfss	_myMain,0
  2318  0FE6  2FB5               	goto	l5339
  2319                           
  2320                           ;Main_B1.c: 101: ;;
  2321                           ;Main_B1.c: 103: LED_Main();
  2322  0FE7  158A  22A0  158A   	fcall	_LED_Main
  2323                           
  2324                           ;Main_B1.c: 104: ;;
  2325                           ;Main_B1.c: 106: SYSC_Main();
  2326  0FEA  158A  22A9  158A   	fcall	_SYSC_Main
  2327                           
  2328                           ;Main_B1.c: 107: Temp_Main();
  2329  0FED  158A  22AF  158A   	fcall	_Temp_Main
  2330                           
  2331                           ;Main_B1.c: 108: Load_Main();
  2332  0FF0  118A  2230  158A   	fcall	_Load_Main
  2333                           
  2334                           ;Main_B1.c: 109: ;;
  2335                           ;Main_B1.c: 111: Lights_Main();
  2336  0FF3  158A  24AD  158A   	fcall	_Lights_Main
  2337                           
  2338                           ;Main_B1.c: 112: ;;
  2339                           ;Main_B1.c: 113: ;;
  2340                           ;Main_B1.c: 114: CDS_Main();
  2341  0FF6  158A  2586  158A   	fcall	_CDS_Main
  2342                           
  2343                           ;Main_B1.c: 115: PIR_Main();
  2344  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2345                           
  2346                           ;Main_B1.c: 117: ;;
  2347                           ;Main_B1.c: 118: ;;
  2348                           ;Main_B1.c: 119: ;;
  2349                           ;Main_B1.c: 120: ;;
  2350                           ;Main_B1.c: 121: Exception_Main();
  2351  0FFC  118A  2548  158A   	fcall	_Exception_Main
  2352  0FFF  2FB5               	goto	l5339
  2353  1000                     __end_of_main:	
  2354                           ;Main_B1.c: 128: }
  2355                           ;Main_B1.c: 129: }
  2356                           ;Main_B1.c: 163: }
  2357                           ;Main_B1.c: 164: return (0);
  2358                           ;	Return value of _main is never used
  2359                           
  2360                           
  2361                           	psect	text1
  2362  0C5C                     __ptext1:	
  2363 ;; *************** function _my_MainTimer *****************
  2364 ;; Defined at:
  2365 ;;		line 185 in file "../src/Main_B1.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;		None               void
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2379 ;;      Params:         0       0       0       0
  2380 ;;      Locals:         0       0       0       0
  2381 ;;      Temps:          1       0       0       0
  2382 ;;      Totals:         1       0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    2
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _my_MainTimer
  2395  0C5C                     _my_MainTimer:	
  2396                           
  2397                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2401  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0C5E  1825               	btfsc	_myMain,0
  2404  0C5F  2C6C               	goto	l3883
  2405                           
  2406                           ;Main_B1.c: 188: myMain.PowerCount++;
  2407  0C60  3001               	movlw	1
  2408  0C61  00F4               	movwf	??_my_MainTimer
  2409  0C62  0874               	movf	??_my_MainTimer,w
  2410  0C63  07A6               	addwf	_myMain+1,f
  2411                           
  2412                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2413  0C64  0826               	movf	_myMain+1,w
  2414  0C65  3A4B               	xorlw	75
  2415  0C66  1D03               	skipz
  2416  0C67  0008               	return
  2417                           
  2418                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2419  0C68  01A6               	clrf	_myMain+1
  2420                           
  2421                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2422  0C69  1425               	bsf	_myMain,0
  2423                           
  2424                           ;Main_B1.c: 196: ;;
  2425                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2426  0C6A  1625               	bsf	_myMain,4
  2427                           
  2428                           ;Main_B1.c: 206: }
  2429                           ;Main_B1.c: 207: } else {
  2430  0C6B  0008               	return
  2431  0C6C                     l3883:	
  2432                           
  2433                           ;Main_B1.c: 208: myMain.PowerCount++;
  2434  0C6C  3001               	movlw	1
  2435  0C6D  00F4               	movwf	??_my_MainTimer
  2436  0C6E  0874               	movf	??_my_MainTimer,w
  2437  0C6F  07A6               	addwf	_myMain+1,f
  2438                           
  2439                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2440  0C70  0826               	movf	_myMain+1,w
  2441  0C71  3A32               	xorlw	50
  2442  0C72  1D03               	skipz
  2443  0C73  0008               	return
  2444                           
  2445                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2446  0C74  01A6               	clrf	_myMain+1
  2447  0C75  0008               	return
  2448  0C76                     __end_of_my_MainTimer:	
  2449                           
  2450                           	psect	text2
  2451  0A9F                     __ptext2:	
  2452 ;; *************** function _myMain_Initialization *****************
  2453 ;; Defined at:
  2454 ;;		line 170 in file "../src/Main_B1.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;		None               void
  2461 ;; Registers used:
  2462 ;;		None
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2468 ;;      Params:         0       0       0       0
  2469 ;;      Locals:         0       0       0       0
  2470 ;;      Temps:          0       0       0       0
  2471 ;;      Totals:         0       0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    2
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           
  2483                           ;psect for function _myMain_Initialization
  2484  0A9F                     _myMain_Initialization:	
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _myMain_Initialization: []
  2488  0A9F  0008               	return
  2489  0AA0                     __end_of_myMain_Initialization:	
  2490                           
  2491                           	psect	text3
  2492  0CCB                     __ptext3:	
  2493 ;; *************** function _getTemp_AD *****************
  2494 ;; Defined at:
  2495 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  channel         1    wreg     unsigned char 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  channel         1    2[BANK0 ] unsigned char 
  2500 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2510 ;;      Params:         0       0       0       0
  2511 ;;      Locals:         0       2       0       0
  2512 ;;      Temps:          0       2       0       0
  2513 ;;      Totals:         0       4       0       0
  2514 ;;Total ram usage:        4 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    4
  2517 ;; This function calls:
  2518 ;;		_getAD
  2519 ;; This function is called by:
  2520 ;;		_main
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _getTemp_AD
  2526  0CCB                     _getTemp_AD:	
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2530                           ;getTemp_AD@channel stored from wreg
  2531  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0CCD  00CF               	movwf	getTemp_AD@channel
  2534                           
  2535                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2536  0CCE  01D0               	clrf	getTemp_AD@ADRES
  2537                           
  2538                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2539  0CCF  1D39               	btfss	_Temp,2
  2540  0CD0  0008               	return
  2541                           
  2542                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2543  0CD1  3070               	movlw	112
  2544  0CD2  00CD               	movwf	??_getTemp_AD
  2545  0CD3  084D               	movf	??_getTemp_AD,w
  2546  0CD4  00F4               	movwf	getAD@adcon1
  2547  0CD5  084F               	movf	getTemp_AD@channel,w
  2548  0CD6  158A  2491  158A   	fcall	_getAD
  2549  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0CDB  00CE               	movwf	??_getTemp_AD+1
  2552  0CDC  084E               	movf	??_getTemp_AD+1,w
  2553  0CDD  00D0               	movwf	getTemp_AD@ADRES
  2554                           
  2555                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2556  0CDE  0850               	movf	getTemp_AD@ADRES,w
  2557  0CDF  1903               	btfsc	3,2
  2558  0CE0  0008               	return
  2559                           
  2560                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2561  0CE1  0850               	movf	getTemp_AD@ADRES,w
  2562  0CE2  023F               	subwf	_Temp+6,w
  2563  0CE3  1803               	skipnc
  2564  0CE4  0008               	return
  2565                           
  2566                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2567  0CE5  0850               	movf	getTemp_AD@ADRES,w
  2568  0CE6  00CD               	movwf	??_getTemp_AD
  2569  0CE7  084D               	movf	??_getTemp_AD,w
  2570  0CE8  00BF               	movwf	_Temp+6
  2571  0CE9  0008               	return
  2572  0CEA                     __end_of_getTemp_AD:	
  2573                           
  2574                           	psect	text4
  2575  041A                     __ptext4:	
  2576 ;; *************** function _getPIR_AD *****************
  2577 ;; Defined at:
  2578 ;;		line 348 in file "../src/PIR_B1.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  channel1        1    wreg     unsigned char 
  2581 ;;  channel2        1    8[BANK0 ] unsigned char 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  channel1        1   13[BANK0 ] unsigned char 
  2584 ;;  i               1   16[BANK0 ] unsigned char 
  2585 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2586 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2587 ;;  j               1   12[BANK0 ] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;		None               void
  2590 ;; Registers used:
  2591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2597 ;;      Params:         0       1       0       0
  2598 ;;      Locals:         0       5       0       0
  2599 ;;      Temps:          0       3       0       0
  2600 ;;      Totals:         0       9       0       0
  2601 ;;Total ram usage:        9 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    4
  2604 ;; This function calls:
  2605 ;;		___awdiv
  2606 ;;		___lwdiv
  2607 ;;		_getAD
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _getPIR_AD
  2615  041A                     _getPIR_AD:	
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2619                           ;getPIR_AD@channel1 stored from wreg
  2620  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2621  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2622  041C  00DA               	movwf	getPIR_AD@channel1
  2623                           
  2624                           ;PIR_B1.c: 349: char i = 0, j = 0;
  2625  041D  01DD               	clrf	getPIR_AD@i
  2626  041E  01D9               	clrf	getPIR_AD@j
  2627                           
  2628                           ;PIR_B1.c: 350: char VRAD = 0, VRAD1 = 0;
  2629  041F  01DC               	clrf	getPIR_AD@VRAD
  2630  0420  01DB               	clrf	getPIR_AD@VRAD1
  2631                           
  2632                           ;PIR_B1.c: 351: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2633  0421  1683               	bsf	3,5	;RP0=1, select bank1
  2634  0422  1303               	bcf	3,6	;RP1=0, select bank1
  2635  0423  1CA0               	btfss	__PIR^(0+128),1
  2636  0424  0008               	return
  2637  0425  1920               	btfsc	__PIR^(0+128),2
  2638  0426  0008               	return
  2639                           
  2640                           ;PIR_B1.c: 352: _PIR.GO = 1;
  2641  0427  1520               	bsf	__PIR^(0+128),2
  2642                           
  2643                           ;PIR_B1.c: 359: VRAD1 = getAD(channel1, 0x70);
  2644  0428  3070               	movlw	112
  2645  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2646  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2647  042B  00D6               	movwf	??_getPIR_AD
  2648  042C  0856               	movf	??_getPIR_AD,w
  2649  042D  00F4               	movwf	getAD@adcon1
  2650  042E  085A               	movf	getPIR_AD@channel1,w
  2651  042F  158A  2491  118A   	fcall	_getAD
  2652  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0434  00D7               	movwf	??_getPIR_AD+1
  2655  0435  0857               	movf	??_getPIR_AD+1,w
  2656  0436  00DB               	movwf	getPIR_AD@VRAD1
  2657                           
  2658                           ;PIR_B1.c: 360: VRAD = VRAD1 / 25;
  2659  0437  3019               	movlw	25
  2660  0438  00CD               	movwf	___awdiv@divisor
  2661  0439  3000               	movlw	0
  2662  043A  00CE               	movwf	___awdiv@divisor+1
  2663  043B  085B               	movf	getPIR_AD@VRAD1,w
  2664  043C  00D6               	movwf	??_getPIR_AD
  2665  043D  01D7               	clrf	??_getPIR_AD+1
  2666  043E  0856               	movf	??_getPIR_AD,w
  2667  043F  00CF               	movwf	___awdiv@dividend
  2668  0440  0857               	movf	??_getPIR_AD+1,w
  2669  0441  00D0               	movwf	___awdiv@dividend+1
  2670  0442  158A  26D8  118A   	fcall	___awdiv
  2671  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0447  084D               	movf	?___awdiv,w
  2674  0448  00D8               	movwf	??_getPIR_AD+2
  2675  0449  0858               	movf	??_getPIR_AD+2,w
  2676  044A  00DC               	movwf	getPIR_AD@VRAD
  2677                           
  2678                           ;PIR_B1.c: 361: _PIR.SignalAD = getAD(channel2, 0x70);
  2679  044B  3070               	movlw	112
  2680  044C  00D6               	movwf	??_getPIR_AD
  2681  044D  0856               	movf	??_getPIR_AD,w
  2682  044E  00F4               	movwf	getAD@adcon1
  2683  044F  0855               	movf	getPIR_AD@channel2,w
  2684  0450  158A  2491  118A   	fcall	_getAD
  2685  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2686  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2687  0455  00D7               	movwf	??_getPIR_AD+1
  2688  0456  0857               	movf	??_getPIR_AD+1,w
  2689  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2690  0458  1303               	bcf	3,6	;RP1=0, select bank1
  2691  0459  00A1               	movwf	(__PIR^(0+128)+1)
  2692                           
  2693                           ;PIR_B1.c: 375: if (VRAD < 1) {
  2694  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2695  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2696  045C  08DC               	movf	getPIR_AD@VRAD,f
  2697  045D  1D03               	skipz
  2698  045E  2C61               	goto	l4873
  2699                           
  2700                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 5;
  2701  045F  3005               	movlw	5
  2702  0460  2C67               	goto	L1
  2703  0461                     l4873:	
  2704                           ;PIR_B1.c: 377: } else if (VRAD < 3) {
  2705                           
  2706  0461  3003               	movlw	3
  2707  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0463  025C               	subwf	getPIR_AD@VRAD,w
  2709  0464  1803               	skipnc
  2710  0465  2C6C               	goto	l4877
  2711                           
  2712                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 60;
  2713  0466  303C               	movlw	60
  2714  0467                     L1:	
  2715  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2716  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2717  0469  00C3               	movwf	(__PIR^(0+128)+35)
  2718  046A  3000               	movlw	0
  2719  046B  2C92               	goto	L5
  2720  046C                     l4877:	
  2721                           ;PIR_B1.c: 379: } else if (VRAD < 5) {
  2722                           
  2723  046C  3005               	movlw	5
  2724  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2725  046E  025C               	subwf	getPIR_AD@VRAD,w
  2726  046F  1803               	skipnc
  2727  0470  2C77               	goto	l4881
  2728                           
  2729                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 300;
  2730  0471  302C               	movlw	44
  2731  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2732  0473  1303               	bcf	3,6	;RP1=0, select bank1
  2733  0474  00C3               	movwf	(__PIR^(0+128)+35)
  2734  0475  3001               	movlw	1
  2735  0476  2C92               	goto	L5
  2736  0477                     l4881:	
  2737                           ;PIR_B1.c: 381: } else if (VRAD < 7) {
  2738                           
  2739  0477  3007               	movlw	7
  2740  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0479  025C               	subwf	getPIR_AD@VRAD,w
  2742  047A  1803               	skipnc
  2743  047B  2C82               	goto	l4885
  2744                           
  2745                           ;PIR_B1.c: 382: _PIR.CloseTimeValue = 600;
  2746  047C  3058               	movlw	88
  2747  047D  1683               	bsf	3,5	;RP0=1, select bank1
  2748  047E  1303               	bcf	3,6	;RP1=0, select bank1
  2749  047F  00C3               	movwf	(__PIR^(0+128)+35)
  2750  0480  3002               	movlw	2
  2751  0481  2C92               	goto	L5
  2752  0482                     l4885:	
  2753                           ;PIR_B1.c: 383: } else if (VRAD < 9) {
  2754                           
  2755  0482  3009               	movlw	9
  2756  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0484  025C               	subwf	getPIR_AD@VRAD,w
  2758  0485  1803               	skipnc
  2759  0486  2C8D               	goto	l4889
  2760                           
  2761                           ;PIR_B1.c: 384: _PIR.CloseTimeValue = 900;
  2762  0487  3084               	movlw	132
  2763  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2764  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2765  048A  00C3               	movwf	(__PIR^(0+128)+35)
  2766  048B  3003               	movlw	3
  2767  048C  2C92               	goto	L5
  2768  048D                     l4889:	
  2769                           ;PIR_B1.c: 385: } else {
  2770                           
  2771                           
  2772                           ;PIR_B1.c: 386: _PIR.CloseTimeValue = 1200;
  2773  048D  30B0               	movlw	176
  2774  048E  1683               	bsf	3,5	;RP0=1, select bank1
  2775  048F  1303               	bcf	3,6	;RP1=0, select bank1
  2776  0490  00C3               	movwf	(__PIR^(0+128)+35)
  2777  0491  3004               	movlw	4
  2778  0492                     L5:	
  2779  0492  00C4               	movwf	(__PIR^(0+128)+36)
  2780                           
  2781                           ;PIR_B1.c: 387: }
  2782                           ;PIR_B1.c: 396: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2783  0493  0821               	movf	(__PIR^(0+128)+1),w
  2784  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2786  0496  00D6               	movwf	??_getPIR_AD
  2787  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2788  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2789  0499  0824               	movf	(__PIR^(0+128)+4),w
  2790  049A  3EA5               	addlw	(__PIR+5)& (0+255)
  2791  049B  0084               	movwf	4
  2792  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2793  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2794  049E  0856               	movf	??_getPIR_AD,w
  2795  049F  1383               	bcf	3,7	;select IRP bank1
  2796  04A0  0080               	movwf	0
  2797                           
  2798                           ;PIR_B1.c: 397: for (i = 0; i < 10; i++) {
  2799  04A1  01DD               	clrf	getPIR_AD@i
  2800  04A2  300A               	movlw	10
  2801  04A3  025D               	subwf	getPIR_AD@i,w
  2802  04A4  1803               	btfsc	3,0
  2803  04A5  2CC2               	goto	l4905
  2804  04A6                     l4899:	
  2805                           
  2806                           ;PIR_B1.c: 398: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2807  04A6  085D               	movf	getPIR_AD@i,w
  2808  04A7  3EA5               	addlw	(__PIR+5)& (0+255)
  2809  04A8  0084               	movwf	4
  2810  04A9  0800               	movf	0,w
  2811  04AA  00D6               	movwf	??_getPIR_AD
  2812  04AB  01D7               	clrf	??_getPIR_AD+1
  2813  04AC  0856               	movf	??_getPIR_AD,w
  2814  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  2815  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  2816  04AF  07AF               	addwf	(__PIR^(0+128)+15),f
  2817  04B0  1803               	skipnc
  2818  04B1  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2819  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2820  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2821  04B4  0857               	movf	??_getPIR_AD+1,w
  2822  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  2823  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  2824  04B7  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2825  04B8  3001               	movlw	1
  2826  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2827  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2828  04BB  00D6               	movwf	??_getPIR_AD
  2829  04BC  0856               	movf	??_getPIR_AD,w
  2830  04BD  07DD               	addwf	getPIR_AD@i,f
  2831  04BE  300A               	movlw	10
  2832  04BF  025D               	subwf	getPIR_AD@i,w
  2833  04C0  1C03               	skipc
  2834  04C1  2CA6               	goto	l4899
  2835  04C2                     l4905:	
  2836                           
  2837                           ;PIR_B1.c: 399: }
  2838                           ;PIR_B1.c: 400: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2839  04C2  300A               	movlw	10
  2840  04C3  00CD               	movwf	___lwdiv@divisor
  2841  04C4  3000               	movlw	0
  2842  04C5  00CE               	movwf	___lwdiv@divisor+1
  2843  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2844  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2845  04C8  0830               	movf	((__PIR+1)^(0+128)+15),w
  2846  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2847  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2848  04CB  01D0               	clrf	___lwdiv@dividend+1
  2849  04CC  07D0               	addwf	___lwdiv@dividend+1,f
  2850  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2851  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2852  04CF  082F               	movf	(__PIR^(0+128)+15),w
  2853  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2854  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2855  04D2  01CF               	clrf	___lwdiv@dividend
  2856  04D3  07CF               	addwf	___lwdiv@dividend,f
  2857  04D4  158A  25F8  118A   	fcall	___lwdiv
  2858  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2859  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2860  04D9  084D               	movf	?___lwdiv,w
  2861  04DA  00D6               	movwf	??_getPIR_AD
  2862  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  2863  04DC  1303               	bcf	3,6	;RP1=0, select bank1
  2864  04DD  0831               	movf	(__PIR^(0+128)+17),w
  2865  04DE  3EB2               	addlw	(__PIR+18)& (0+255)
  2866  04DF  0084               	movwf	4
  2867  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2868  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2869  04E2  0856               	movf	??_getPIR_AD,w
  2870  04E3  1383               	bcf	3,7	;select IRP bank1
  2871  04E4  0080               	movwf	0
  2872                           
  2873                           ;PIR_B1.c: 401: _PIR.TenAverageValue = 0;
  2874  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  2875  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  2876  04E7  01AF               	clrf	(__PIR^(0+128)+15)
  2877  04E8  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2878                           
  2879                           ;PIR_B1.c: 403: for (i = 0; i <= 9; i++) {
  2880  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2881  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2882  04EB  01DD               	clrf	getPIR_AD@i
  2883  04EC  300A               	movlw	10
  2884  04ED  025D               	subwf	getPIR_AD@i,w
  2885  04EE  1803               	btfsc	3,0
  2886  04EF  2D0C               	goto	l4921
  2887  04F0                     l4915:	
  2888                           
  2889                           ;PIR_B1.c: 404: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2890  04F0  085D               	movf	getPIR_AD@i,w
  2891  04F1  3EB2               	addlw	(__PIR+18)& (0+255)
  2892  04F2  0084               	movwf	4
  2893  04F3  0800               	movf	0,w
  2894  04F4  00D6               	movwf	??_getPIR_AD
  2895  04F5  01D7               	clrf	??_getPIR_AD+1
  2896  04F6  0856               	movf	??_getPIR_AD,w
  2897  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  2898  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  2899  04F9  07BC               	addwf	(__PIR^(0+128)+28),f
  2900  04FA  1803               	skipnc
  2901  04FB  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2902  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2903  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2904  04FE  0857               	movf	??_getPIR_AD+1,w
  2905  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2906  0500  1303               	bcf	3,6	;RP1=0, select bank1
  2907  0501  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2908  0502  3001               	movlw	1
  2909  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0505  00D6               	movwf	??_getPIR_AD
  2912  0506  0856               	movf	??_getPIR_AD,w
  2913  0507  07DD               	addwf	getPIR_AD@i,f
  2914  0508  300A               	movlw	10
  2915  0509  025D               	subwf	getPIR_AD@i,w
  2916  050A  1C03               	skipc
  2917  050B  2CF0               	goto	l4915
  2918  050C                     l4921:	
  2919                           
  2920                           ;PIR_B1.c: 405: }
  2921                           ;PIR_B1.c: 406: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2922  050C  300A               	movlw	10
  2923  050D  00CD               	movwf	___lwdiv@divisor
  2924  050E  3000               	movlw	0
  2925  050F  00CE               	movwf	___lwdiv@divisor+1
  2926  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2928  0512  083D               	movf	((__PIR+1)^(0+128)+28),w
  2929  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0515  01D0               	clrf	___lwdiv@dividend+1
  2932  0516  07D0               	addwf	___lwdiv@dividend+1,f
  2933  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2934  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2935  0519  083C               	movf	(__PIR^(0+128)+28),w
  2936  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2937  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2938  051C  01CF               	clrf	___lwdiv@dividend
  2939  051D  07CF               	addwf	___lwdiv@dividend,f
  2940  051E  158A  25F8  118A   	fcall	___lwdiv
  2941  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0523  084D               	movf	?___lwdiv,w
  2944  0524  00D6               	movwf	??_getPIR_AD
  2945  0525  0856               	movf	??_getPIR_AD,w
  2946  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2947  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2948  0528  00A3               	movwf	(__PIR^(0+128)+3)
  2949                           
  2950                           ;PIR_B1.c: 407: _PIR.HundredAverageValue = 0;
  2951  0529  01BC               	clrf	(__PIR^(0+128)+28)
  2952  052A  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2953                           
  2954                           ;PIR_B1.c: 409: if (_PIR.TenCount < 10) {
  2955  052B  300A               	movlw	10
  2956  052C  0224               	subwf	(__PIR^(0+128)+4),w
  2957  052D  1803               	skipnc
  2958  052E  2D38               	goto	l4929
  2959                           
  2960                           ;PIR_B1.c: 410: _PIR.TenCount++;
  2961  052F  3001               	movlw	1
  2962  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2963  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2964  0532  00D6               	movwf	??_getPIR_AD
  2965  0533  0856               	movf	??_getPIR_AD,w
  2966  0534  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0535  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0536  07A4               	addwf	(__PIR^(0+128)+4),f
  2969                           
  2970                           ;PIR_B1.c: 411: } else {
  2971  0537  0008               	return
  2972  0538                     l4929:	
  2973                           
  2974                           ;PIR_B1.c: 412: _PIR.TenCount = 0;
  2975  0538  01A4               	clrf	(__PIR^(0+128)+4)
  2976                           
  2977                           ;PIR_B1.c: 413: if (_PIR.HundreCount < 10)
  2978  0539  300A               	movlw	10
  2979  053A  0231               	subwf	(__PIR^(0+128)+17),w
  2980  053B  1803               	skipnc
  2981  053C  2D46               	goto	l4935
  2982                           
  2983                           ;PIR_B1.c: 414: _PIR.HundreCount++;
  2984  053D  3001               	movlw	1
  2985  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2986  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2987  0540  00D6               	movwf	??_getPIR_AD
  2988  0541  0856               	movf	??_getPIR_AD,w
  2989  0542  1683               	bsf	3,5	;RP0=1, select bank1
  2990  0543  1303               	bcf	3,6	;RP1=0, select bank1
  2991  0544  07B1               	addwf	(__PIR^(0+128)+17),f
  2992  0545  0008               	return
  2993  0546                     l4935:	
  2994                           
  2995                           ;PIR_B1.c: 415: else
  2996                           ;PIR_B1.c: 416: _PIR.HundreCount = 0;
  2997  0546  01B1               	clrf	(__PIR^(0+128)+17)
  2998  0547  0008               	return
  2999  0548                     __end_of_getPIR_AD:	
  3000                           
  3001                           	psect	text5
  3002  0E7C                     __ptext5:	
  3003 ;; *************** function _getLoad_AD *****************
  3004 ;; Defined at:
  3005 ;;		line 16 in file "../src/OverLoad_B1.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  channel         1    wreg     unsigned char 
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  channel         1    2[BANK0 ] unsigned char 
  3010 ;;  i               1    6[BANK0 ] unsigned char 
  3011 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3012 ;;  j               1    4[BANK0 ] unsigned char 
  3013 ;;  k               1    3[BANK0 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3023 ;;      Params:         0       0       0       0
  3024 ;;      Locals:         0       5       0       0
  3025 ;;      Temps:          0       2       0       0
  3026 ;;      Totals:         0       7       0       0
  3027 ;;Total ram usage:        7 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    4
  3030 ;; This function calls:
  3031 ;;		_getAD
  3032 ;; This function is called by:
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           
  3038                           ;psect for function _getLoad_AD
  3039  0E7C                     _getLoad_AD:	
  3040                           
  3041                           ;incstack = 0
  3042                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3043                           ;getLoad_AD@channel stored from wreg
  3044  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3046  0E7E  00CF               	movwf	getLoad_AD@channel
  3047                           
  3048                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  3049  0E7F  01D3               	clrf	getLoad_AD@i
  3050  0E80  01D1               	clrf	getLoad_AD@j
  3051  0E81  01D0               	clrf	getLoad_AD@k
  3052                           
  3053                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  3054  0E82  01D2               	clrf	getLoad_AD@ADRES
  3055                           
  3056                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  3057  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0E84  1303               	bcf	3,6	;RP1=0, select bank1
  3059  0E85  1E4A               	btfss	_Load^(0+128),4
  3060  0E86  0008               	return
  3061                           
  3062                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0x73);
  3063  0E87  3073               	movlw	115
  3064  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0E8A  00CD               	movwf	??_getLoad_AD
  3067  0E8B  084D               	movf	??_getLoad_AD,w
  3068  0E8C  00F4               	movwf	getAD@adcon1
  3069  0E8D  084F               	movf	getLoad_AD@channel,w
  3070  0E8E  158A  2491  158A   	fcall	_getAD
  3071  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3073  0E93  00CE               	movwf	??_getLoad_AD+1
  3074  0E94  084E               	movf	??_getLoad_AD+1,w
  3075  0E95  00D2               	movwf	getLoad_AD@ADRES
  3076                           
  3077                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  3078  0E96  01D3               	clrf	getLoad_AD@i
  3079  0E97  3004               	movlw	4
  3080  0E98  0253               	subwf	getLoad_AD@i,w
  3081  0E99  1803               	btfsc	3,0
  3082  0E9A  2EB7               	goto	l4827
  3083  0E9B                     l4815:	
  3084                           
  3085                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  3086  0E9B  0853               	movf	getLoad_AD@i,w
  3087  0E9C  3ED4               	addlw	(_Load+10)& (0+255)
  3088  0E9D  0084               	movwf	4
  3089  0E9E  0852               	movf	getLoad_AD@ADRES,w
  3090  0E9F  1383               	bcf	3,7	;select IRP bank1
  3091  0EA0  0200               	subwf	0,w
  3092  0EA1  1803               	skipnc
  3093  0EA2  2EAF               	goto	l4823
  3094  0EA3  08D1               	movf	getLoad_AD@j,f
  3095  0EA4  1D03               	skipz
  3096  0EA5  2EAF               	goto	l4823
  3097                           
  3098                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  3099  0EA6  0852               	movf	getLoad_AD@ADRES,w
  3100  0EA7  00CD               	movwf	??_getLoad_AD
  3101  0EA8  0853               	movf	getLoad_AD@i,w
  3102  0EA9  3ED4               	addlw	(_Load+10)& (0+255)
  3103  0EAA  0084               	movwf	4
  3104  0EAB  084D               	movf	??_getLoad_AD,w
  3105  0EAC  0080               	movwf	0
  3106                           
  3107                           ;OverLoad_B1.c: 25: j = 1;
  3108  0EAD  01D1               	clrf	getLoad_AD@j
  3109  0EAE  0AD1               	incf	getLoad_AD@j,f
  3110  0EAF                     l4823:	
  3111  0EAF  3001               	movlw	1
  3112  0EB0  00CD               	movwf	??_getLoad_AD
  3113  0EB1  084D               	movf	??_getLoad_AD,w
  3114  0EB2  07D3               	addwf	getLoad_AD@i,f
  3115  0EB3  3004               	movlw	4
  3116  0EB4  0253               	subwf	getLoad_AD@i,w
  3117  0EB5  1C03               	skipc
  3118  0EB6  2E9B               	goto	l4815
  3119  0EB7                     l4827:	
  3120                           
  3121                           ;OverLoad_B1.c: 26: }
  3122                           ;OverLoad_B1.c: 27: }
  3123                           ;OverLoad_B1.c: 28: if (j == 0) {
  3124  0EB7  08D1               	movf	getLoad_AD@j,f
  3125  0EB8  1D03               	skipz
  3126  0EB9  0008               	return
  3127                           
  3128                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  3129  0EBA  01D3               	clrf	getLoad_AD@i
  3130  0EBB                     L6:	
  3131  0EBB  3004               	movlw	4
  3132  0EBC  0253               	subwf	getLoad_AD@i,w
  3133  0EBD  1803               	btfsc	3,0
  3134  0EBE  0008               	return
  3135                           
  3136                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  3137  0EBF  0853               	movf	getLoad_AD@i,w
  3138  0EC0  3ED9               	addlw	(_Load+15)& (0+255)
  3139  0EC1  0084               	movwf	4
  3140  0EC2  1383               	bcf	3,7	;select IRP bank1
  3141  0EC3  0800               	movf	0,w
  3142  0EC4  0252               	subwf	getLoad_AD@ADRES,w
  3143  0EC5  1803               	skipnc
  3144  0EC6  2ED3               	goto	l4843
  3145  0EC7  08D0               	movf	getLoad_AD@k,f
  3146  0EC8  1D03               	skipz
  3147  0EC9  2ED3               	goto	l4843
  3148                           
  3149                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  3150  0ECA  0852               	movf	getLoad_AD@ADRES,w
  3151  0ECB  00CD               	movwf	??_getLoad_AD
  3152  0ECC  0853               	movf	getLoad_AD@i,w
  3153  0ECD  3ED9               	addlw	(_Load+15)& (0+255)
  3154  0ECE  0084               	movwf	4
  3155  0ECF  084D               	movf	??_getLoad_AD,w
  3156  0ED0  0080               	movwf	0
  3157                           
  3158                           ;OverLoad_B1.c: 32: k = 1;
  3159  0ED1  01D0               	clrf	getLoad_AD@k
  3160  0ED2  0AD0               	incf	getLoad_AD@k,f
  3161  0ED3                     l4843:	
  3162  0ED3  3001               	movlw	1
  3163  0ED4  00CD               	movwf	??_getLoad_AD
  3164  0ED5  084D               	movf	??_getLoad_AD,w
  3165  0ED6  07D3               	addwf	getLoad_AD@i,f
  3166  0ED7  2EBB               	goto	L6
  3167  0ED8                     __end_of_getLoad_AD:	
  3168                           
  3169                           	psect	text6
  3170  0CEA                     __ptext6:	
  3171 ;; *************** function _getCDS_AD *****************
  3172 ;; Defined at:
  3173 ;;		line 48 in file "../src/CDS_B1.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  channel1        1    wreg     unsigned char 
  3176 ;;  channel2        1    0[BANK0 ] unsigned char 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  channel1        1    5[BANK0 ] unsigned char 
  3179 ;;  j               1    4[BANK0 ] unsigned char 
  3180 ;;  i               1    3[BANK0 ] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;		None               void
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, pclath, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3190 ;;      Params:         0       1       0       0
  3191 ;;      Locals:         0       3       0       0
  3192 ;;      Temps:          0       2       0       0
  3193 ;;      Totals:         0       6       0       0
  3194 ;;Total ram usage:        6 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    4
  3197 ;; This function calls:
  3198 ;;		_getAD
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _getCDS_AD
  3206  0CEA                     _getCDS_AD:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3210                           ;getCDS_AD@channel1 stored from wreg
  3211  0CEA  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0CEB  1303               	bcf	3,6	;RP1=0, select bank0
  3213  0CEC  00D2               	movwf	getCDS_AD@channel1
  3214                           
  3215                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3216  0CED  01D0               	clrf	getCDS_AD@i
  3217  0CEE  01D1               	clrf	getCDS_AD@j
  3218                           
  3219                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3220  0CEF  1DAE               	btfss	__CDS,3
  3221  0CF0  0008               	return
  3222                           
  3223                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3224  0CF1  14AE               	bsf	__CDS,1
  3225                           
  3226                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3227  0CF2  3070               	movlw	112
  3228  0CF3  00CE               	movwf	??_getCDS_AD
  3229  0CF4  084E               	movf	??_getCDS_AD,w
  3230  0CF5  00F4               	movwf	getAD@adcon1
  3231  0CF6  0852               	movf	getCDS_AD@channel1,w
  3232  0CF7  158A  2491  158A   	fcall	_getAD
  3233  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0CFC  00CF               	movwf	??_getCDS_AD+1
  3236  0CFD  084F               	movf	??_getCDS_AD+1,w
  3237  0CFE  00B0               	movwf	__CDS+2
  3238                           
  3239                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3240  0CFF  3070               	movlw	112
  3241  0D00  00CE               	movwf	??_getCDS_AD
  3242  0D01  084E               	movf	??_getCDS_AD,w
  3243  0D02  00F4               	movwf	getAD@adcon1
  3244  0D03  084D               	movf	getCDS_AD@channel2,w
  3245  0D04  158A  2491         	fcall	_getAD
  3246  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0D08  00CF               	movwf	??_getCDS_AD+1
  3249  0D09  084F               	movf	??_getCDS_AD+1,w
  3250  0D0A  00B1               	movwf	__CDS+3
  3251  0D0B  0008               	return
  3252  0D0C                     __end_of_getCDS_AD:	
  3253                           
  3254                           	psect	text7
  3255  0C91                     __ptext7:	
  3256 ;; *************** function _getAD *****************
  3257 ;; Defined at:
  3258 ;;		line 434 in file "../src/MCU_B1.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  adcon0          1    wreg     unsigned char 
  3261 ;;  adcon1          1    4[COMMON] unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  adcon0          1    5[COMMON] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      unsigned char 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2, status,0, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3273 ;;      Params:         1       0       0       0
  3274 ;;      Locals:         1       0       0       0
  3275 ;;      Temps:          0       0       0       0
  3276 ;;      Totals:         2       0       0       0
  3277 ;;Total ram usage:        2 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    3
  3280 ;; This function calls:
  3281 ;;		_Timeout_Counter
  3282 ;;		_set_TimeoutCleared
  3283 ;; This function is called by:
  3284 ;;		_getCDS_AD
  3285 ;;		_getLoad_AD
  3286 ;;		_getTemp_AD
  3287 ;;		_getPIR_AD
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           
  3292                           ;psect for function _getAD
  3293  0C91                     _getAD:	
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3297                           ;getAD@adcon0 stored from wreg
  3298  0C91  00F5               	movwf	getAD@adcon0
  3299                           
  3300                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3301  0C92  0875               	movf	getAD@adcon0,w
  3302  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0C95  009F               	movwf	31	;volatile
  3305                           
  3306                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3307  0C96  0874               	movf	getAD@adcon1,w
  3308  0C97  1683               	bsf	3,5	;RP0=1, select bank1
  3309  0C98  1303               	bcf	3,6	;RP1=0, select bank1
  3310  0C99  009F               	movwf	31	;volatile
  3311                           
  3312                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3313  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0C9C  149F               	bsf	31,1	;volatile
  3316                           
  3317                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3318  0C9D  2CA1               	goto	l4607
  3319  0C9E                     l4605:	
  3320                           
  3321                           ;MCU_B1.c: 439: Timeout_Counter();
  3322  0C9E  158A  23B9  158A   	fcall	_Timeout_Counter
  3323  0CA1                     l4607:	
  3324  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0CA3  1C9F               	btfss	31,1	;volatile
  3327  0CA4  2CA7               	goto	l4611
  3328  0CA5  1D27               	btfss	_myMain+2,2
  3329  0CA6  2C9E               	goto	l4605
  3330  0CA7                     l4611:	
  3331                           
  3332                           ;MCU_B1.c: 440: };
  3333                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3334  0CA7  158A  22CF         	fcall	_set_TimeoutCleared
  3335                           
  3336                           ;MCU_B1.c: 442: return ADRES;
  3337  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0CAB  081E               	movf	30,w	;volatile
  3340  0CAC  0008               	return
  3341  0CAD                     __end_of_getAD:	
  3342                           
  3343                           	psect	text8
  3344  0ACF                     __ptext8:	
  3345 ;; *************** function _set_TimeoutCleared *****************
  3346 ;; Defined at:
  3347 ;;		line 281 in file "../src/Main_B1.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;		None               void
  3354 ;; Registers used:
  3355 ;;		status,2
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3361 ;;      Params:         0       0       0       0
  3362 ;;      Locals:         0       0       0       0
  3363 ;;      Temps:          0       0       0       0
  3364 ;;      Totals:         0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    2
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_getAD
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           
  3376                           ;psect for function _set_TimeoutCleared
  3377  0ACF                     _set_TimeoutCleared:	
  3378                           
  3379                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in _set_TimeoutCleared: [status,2]
  3383  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0AD1  1127               	bcf	_myMain+2,2
  3386                           
  3387                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3388  0AD2  01A8               	clrf	_myMain+3
  3389  0AD3  01A9               	clrf	_myMain+4
  3390  0AD4  0008               	return
  3391  0AD5                     __end_of_set_TimeoutCleared:	
  3392                           
  3393                           	psect	text9
  3394  0BB9                     __ptext9:	
  3395 ;; *************** function _Timeout_Counter *****************
  3396 ;; Defined at:
  3397 ;;		line 272 in file "../src/Main_B1.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;		None               void
  3404 ;; Registers used:
  3405 ;;		wreg, status,2
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3411 ;;      Params:         0       0       0       0
  3412 ;;      Locals:         0       0       0       0
  3413 ;;      Temps:          0       0       0       0
  3414 ;;      Totals:         0       0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    2
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_getAD
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _Timeout_Counter
  3427  0BB9                     _Timeout_Counter:	
  3428                           
  3429                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3430                           
  3431                           ;incstack = 0
  3432                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3433  0BB9  3001               	movlw	1
  3434  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0BBC  07A8               	addwf	_myMain+3,f
  3437  0BBD  1803               	skipnc
  3438  0BBE  0AA9               	incf	_myMain+4,f
  3439  0BBF  3000               	movlw	0
  3440  0BC0  07A9               	addwf	_myMain+4,f
  3441                           
  3442                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3443  0BC1  3061               	movlw	97
  3444  0BC2  0629               	xorwf	_myMain+4,w
  3445  0BC3  1D03               	skipz
  3446  0BC4  2BC7               	goto	u5135
  3447  0BC5  30A8               	movlw	168
  3448  0BC6  0628               	xorwf	_myMain+3,w
  3449  0BC7                     u5135:	
  3450  0BC7  1D03               	skipz
  3451  0BC8  0008               	return
  3452                           
  3453                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3454  0BC9  01A8               	clrf	_myMain+3
  3455  0BCA  01A9               	clrf	_myMain+4
  3456                           
  3457                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3458  0BCB  1527               	bsf	_myMain+2,2
  3459  0BCC  0008               	return
  3460  0BCD                     __end_of_Timeout_Counter:	
  3461                           
  3462                           	psect	text10
  3463  0B84                     __ptext10:	
  3464 ;; *************** function _WDT_Main *****************
  3465 ;; Defined at:
  3466 ;;		line 1116 in file "../src/MCU_B1.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;		None               void
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0, pclath, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3480 ;;      Params:         0       0       0       0
  3481 ;;      Locals:         0       0       0       0
  3482 ;;      Temps:          1       0       0       0
  3483 ;;      Totals:         1       0       0       0
  3484 ;;Total ram usage:        1 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    3
  3487 ;; This function calls:
  3488 ;;		_WDT_Clearing
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _WDT_Main
  3496  0B84                     _WDT_Main:	
  3497                           
  3498                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3502  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  3503  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  3504  0B86  1C35               	btfss	_WDT,0
  3505  0B87  0008               	return
  3506                           
  3507                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3508  0B88  3001               	movlw	1
  3509  0B89  02B6               	subwf	_WDT+1,f
  3510  0B8A  0836               	movf	_WDT+1,w
  3511  0B8B  3AFF               	xorlw	255
  3512  0B8C  1903               	skipnz
  3513  0B8D  0008               	return
  3514                           
  3515                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3516  0B8E  3064               	movlw	100
  3517  0B8F  00F4               	movwf	??_WDT_Main
  3518  0B90  0874               	movf	??_WDT_Main,w
  3519  0B91  00B6               	movwf	_WDT+1
  3520                           
  3521                           ;MCU_B1.c: 1120: WDT_Clearing();
  3522  0B92  118A  2002         	fcall	_WDT_Clearing
  3523  0B94  0008               	return
  3524  0B95                     __end_of_WDT_Main:	
  3525                           
  3526                           	psect	text11
  3527  0002                     __ptext11:	
  3528 ;; *************** function _WDT_Clearing *****************
  3529 ;; Defined at:
  3530 ;;		line 1126 in file "../src/MCU_B1.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;		None               void
  3537 ;; Registers used:
  3538 ;;		None
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3544 ;;      Params:         0       0       0       0
  3545 ;;      Locals:         0       0       0       0
  3546 ;;      Temps:          0       0       0       0
  3547 ;;      Totals:         0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    2
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_WDT_Main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _WDT_Clearing
  3560  0002                     _WDT_Clearing:	
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _WDT_Clearing: []
  3564  0002  0064               	clrwdt	;# 
  3565  0003  0008               	return
  3566  0004                     __end_of_WDT_Clearing:	
  3567                           
  3568                           	psect	text12
  3569  0AAF                     __ptext12:	
  3570 ;; *************** function _Temp_Main *****************
  3571 ;; Defined at:
  3572 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3586 ;;      Params:         0       0       0       0
  3587 ;;      Locals:         0       0       0       0
  3588 ;;      Temps:          0       0       0       0
  3589 ;;      Totals:         0       0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    4
  3593 ;; This function calls:
  3594 ;;		_setTemp_Main
  3595 ;; This function is called by:
  3596 ;;		_main
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _Temp_Main
  3602  0AAF                     _Temp_Main:	
  3603                           
  3604                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3608  0AAF  118A  270C         	fcall	_setTemp_Main
  3609  0AB1  0008               	return
  3610  0AB2                     __end_of_Temp_Main:	
  3611                           
  3612                           	psect	text13
  3613  070C                     __ptext13:	
  3614 ;; *************** function _setTemp_Main *****************
  3615 ;; Defined at:
  3616 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  AD              1   10[BANK0 ] unsigned char 
  3621 ;;  DangerValue     1    9[BANK0 ] unsigned char 
  3622 ;;  SafeValue       1    8[BANK0 ] unsigned char 
  3623 ;;  TempGO          1    7[BANK0 ] unsigned char 
  3624 ;;  error           1    6[BANK0 ] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;		None               void
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0, pclath, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3634 ;;      Params:         0       0       0       0
  3635 ;;      Locals:         0       5       0       0
  3636 ;;      Temps:          1       0       0       0
  3637 ;;      Totals:         1       5       0       0
  3638 ;;Total ram usage:        6 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    3
  3641 ;; This function calls:
  3642 ;;		_getMain_All_Error_Status
  3643 ;;		_getMain_All_LightsStatus
  3644 ;; This function is called by:
  3645 ;;		_Temp_Main
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function _setTemp_Main
  3651  070C                     _setTemp_Main:	
  3652                           
  3653                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3657  070C  3000               	movlw	0
  3658  070D  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  3659  0710  00F5               	movwf	??_setTemp_Main
  3660  0711  0875               	movf	??_setTemp_Main,w
  3661  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3662  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3663  0714  00D3               	movwf	setTemp_Main@error
  3664                           
  3665                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3666  0715  01D5               	clrf	setTemp_Main@SafeValue
  3667  0716  01D6               	clrf	setTemp_Main@DangerValue
  3668                           
  3669                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3670  0717  158A  2304  118A   	fcall	_getMain_All_LightsStatus
  3671  071A  00F5               	movwf	??_setTemp_Main
  3672  071B  0875               	movf	??_setTemp_Main,w
  3673  071C  1283               	bcf	3,5	;RP0=0, select bank0
  3674  071D  1303               	bcf	3,6	;RP1=0, select bank0
  3675  071E  00D4               	movwf	setTemp_Main@TempGO
  3676                           
  3677                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3678  071F  1C39               	btfss	_Temp,0
  3679  0720  2F83               	goto	l820
  3680                           
  3681                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3682  0721  1939               	btfsc	_Temp,2
  3683  0722  2F3F               	goto	l3513
  3684                           
  3685                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3686  0723  0854               	movf	setTemp_Main@TempGO,w
  3687  0724  3A01               	xorlw	1
  3688  0725  1D03               	skipz
  3689  0726  2F29               	goto	l826
  3690  0727  1CB9               	btfss	_Temp,1
  3691  0728  2F2B               	goto	l3505
  3692  0729                     l826:	
  3693  0729  1CB9               	btfss	_Temp,1
  3694  072A  2F3C               	goto	l3511
  3695  072B                     l3505:	
  3696                           
  3697                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3698  072B  3001               	movlw	1
  3699  072C  07BA               	addwf	_Temp+1,f
  3700  072D  1803               	skipnc
  3701  072E  0ABB               	incf	_Temp+2,f
  3702  072F  3000               	movlw	0
  3703  0730  07BB               	addwf	_Temp+2,f
  3704                           
  3705                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3706  0731  3000               	movlw	0
  3707  0732  023B               	subwf	_Temp+2,w
  3708  0733  30FA               	movlw	250
  3709  0734  1903               	skipnz
  3710  0735  023A               	subwf	_Temp+1,w
  3711  0736  1C03               	skipc
  3712  0737  0008               	return
  3713                           
  3714                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3715  0738  01BA               	clrf	_Temp+1
  3716  0739  01BB               	clrf	_Temp+2
  3717                           
  3718                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3719  073A  1539               	bsf	_Temp,2
  3720                           
  3721                           ;OverTemperature_B1.c: 83: }
  3722                           ;OverTemperature_B1.c: 84: } else {
  3723  073B  0008               	return
  3724  073C                     l3511:	
  3725                           
  3726                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3727  073C  01BA               	clrf	_Temp+1
  3728  073D  01BB               	clrf	_Temp+2
  3729                           
  3730                           ;OverTemperature_B1.c: 86: }
  3731                           ;OverTemperature_B1.c: 87: } else {
  3732  073E  0008               	return
  3733  073F                     l3513:	
  3734                           
  3735                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3736  073F  3001               	movlw	1
  3737  0740  07BA               	addwf	_Temp+1,f
  3738  0741  1803               	skipnc
  3739  0742  0ABB               	incf	_Temp+2,f
  3740  0743  3000               	movlw	0
  3741  0744  07BB               	addwf	_Temp+2,f
  3742                           
  3743                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3744  0745  3000               	movlw	0
  3745  0746  023B               	subwf	_Temp+2,w
  3746  0747  3005               	movlw	5
  3747  0748  1903               	skipnz
  3748  0749  023A               	subwf	_Temp+1,w
  3749  074A  1C03               	skipc
  3750  074B  0008               	return
  3751                           
  3752                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3753  074C  01BA               	clrf	_Temp+1
  3754  074D  01BB               	clrf	_Temp+2
  3755                           
  3756                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3757  074E  083F               	movf	_Temp+6,w
  3758  074F  1903               	btfsc	3,2
  3759  0750  2F7F               	goto	l831
  3760                           
  3761                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3762  0751  1139               	bcf	_Temp,2
  3763                           
  3764                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3765  0752  083F               	movf	_Temp+6,w
  3766  0753  00F5               	movwf	??_setTemp_Main
  3767  0754  0875               	movf	??_setTemp_Main,w
  3768  0755  00D7               	movwf	setTemp_Main@AD
  3769                           
  3770                           ;OverTemperature_B1.c: 106: SafeValue = 0x39;
  3771  0756  3039               	movlw	57
  3772  0757  00F5               	movwf	??_setTemp_Main
  3773  0758  0875               	movf	??_setTemp_Main,w
  3774  0759  00D5               	movwf	setTemp_Main@SafeValue
  3775                           
  3776                           ;OverTemperature_B1.c: 107: DangerValue = 0x6a;
  3777  075A  306A               	movlw	106
  3778  075B  00F5               	movwf	??_setTemp_Main
  3779  075C  0875               	movf	??_setTemp_Main,w
  3780  075D  00D6               	movwf	setTemp_Main@DangerValue
  3781                           
  3782                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3783  075E  1CB9               	btfss	_Temp,1
  3784  075F  2F6F               	goto	l3537
  3785                           
  3786                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3787  0760  0855               	movf	setTemp_Main@SafeValue,w
  3788  0761  0257               	subwf	setTemp_Main@AD,w
  3789  0762  1C03               	skipc
  3790  0763  2F7E               	goto	l3547
  3791                           
  3792                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3793  0764  3001               	movlw	1
  3794  0765  00F5               	movwf	??_setTemp_Main
  3795  0766  0875               	movf	??_setTemp_Main,w
  3796  0767  07BC               	addwf	_Temp+3,f
  3797                           
  3798                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3799  0768  3003               	movlw	3
  3800  0769  023C               	subwf	_Temp+3,w
  3801  076A  1C03               	skipc
  3802  076B  2F7F               	goto	l831
  3803                           
  3804                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3805  076C  01BC               	clrf	_Temp+3
  3806                           
  3807                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3808  076D  10B9               	bcf	_Temp,1
  3809                           
  3810                           ;OverTemperature_B1.c: 126: }
  3811                           ;OverTemperature_B1.c: 127: } else {
  3812                           
  3813                           ;OverTemperature_B1.c: 125: ;;
  3814  076E  2F7F               	goto	l831
  3815  076F                     l3537:	
  3816                           ;OverTemperature_B1.c: 129: }
  3817                           ;OverTemperature_B1.c: 130: } else {
  3818                           
  3819                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3820                           
  3821                           
  3822                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3823  076F  0857               	movf	setTemp_Main@AD,w
  3824  0770  0256               	subwf	setTemp_Main@DangerValue,w
  3825  0771  1C03               	skipc
  3826  0772  2F7E               	goto	l3547
  3827                           
  3828                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3829  0773  3001               	movlw	1
  3830  0774  00F5               	movwf	??_setTemp_Main
  3831  0775  0875               	movf	??_setTemp_Main,w
  3832  0776  07BC               	addwf	_Temp+3,f
  3833                           
  3834                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3835  0777  3003               	movlw	3
  3836  0778  023C               	subwf	_Temp+3,w
  3837  0779  1C03               	skipc
  3838  077A  2F7F               	goto	l831
  3839                           
  3840                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3841  077B  01BC               	clrf	_Temp+3
  3842                           
  3843                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3844  077C  14B9               	bsf	_Temp,1
  3845                           
  3846                           ;OverTemperature_B1.c: 136: }
  3847                           ;OverTemperature_B1.c: 137: } else {
  3848  077D  2F7F               	goto	l831
  3849  077E                     l3547:	
  3850                           
  3851                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3852  077E  01BC               	clrf	_Temp+3
  3853  077F                     l831:	
  3854                           ;OverTemperature_B1.c: 139: }
  3855                           ;OverTemperature_B1.c: 140: }
  3856                           ;OverTemperature_B1.c: 141: ;;
  3857                           ;OverTemperature_B1.c: 142: ;;
  3858                           
  3859                           
  3860                           ;OverTemperature_B1.c: 158: }
  3861                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3862  077F  01BD               	clrf	_Temp+4
  3863                           
  3864                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3865  0780  01BE               	clrf	_Temp+5
  3866                           
  3867                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3868  0781  01BF               	clrf	_Temp+6
  3869                           
  3870                           ;OverTemperature_B1.c: 162: }
  3871                           ;OverTemperature_B1.c: 163: }
  3872                           ;OverTemperature_B1.c: 166: } else {
  3873  0782  0008               	return
  3874  0783                     l820:	
  3875                           
  3876                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3877  0783  1C25               	btfss	_myMain,0
  3878  0784  0008               	return
  3879                           
  3880                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3881  0785  1439               	bsf	_Temp,0
  3882  0786  0008               	return
  3883  0787                     __end_of_setTemp_Main:	
  3884                           
  3885                           	psect	text14
  3886  0AAC                     __ptext14:	
  3887 ;; *************** function _Temp_Initialization *****************
  3888 ;; Defined at:
  3889 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;		None               void
  3896 ;; Registers used:
  3897 ;;		status,2, status,0, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3903 ;;      Params:         0       0       0       0
  3904 ;;      Locals:         0       0       0       0
  3905 ;;      Temps:          0       0       0       0
  3906 ;;      Totals:         0       0       0       0
  3907 ;;Total ram usage:        0 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    3
  3910 ;; This function calls:
  3911 ;;		_setTemp_Initialization
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function _Temp_Initialization
  3919  0AAC                     _Temp_Initialization:	
  3920                           
  3921                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3925  0AAC  158A  229E         	fcall	_setTemp_Initialization
  3926  0AAE  0008               	return
  3927  0AAF                     __end_of_Temp_Initialization:	
  3928                           
  3929                           	psect	text15
  3930  0A9E                     __ptext15:	
  3931 ;; *************** function _setTemp_Initialization *****************
  3932 ;; Defined at:
  3933 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		None
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3947 ;;      Params:         0       0       0       0
  3948 ;;      Locals:         0       0       0       0
  3949 ;;      Temps:          0       0       0       0
  3950 ;;      Totals:         0       0       0       0
  3951 ;;Total ram usage:        0 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_Temp_Initialization
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _setTemp_Initialization
  3963  0A9E                     _setTemp_Initialization:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _setTemp_Initialization: []
  3967  0A9E  0008               	return
  3968  0A9F                     __end_of_setTemp_Initialization:	
  3969                           
  3970                           	psect	text16
  3971  0AA9                     __ptext16:	
  3972 ;; *************** function _SYSC_Main *****************
  3973 ;; Defined at:
  3974 ;;		line 17 in file "../src/SYSC_B1.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;		None               void
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0, pclath, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3988 ;;      Params:         0       0       0       0
  3989 ;;      Locals:         0       0       0       0
  3990 ;;      Temps:          0       0       0       0
  3991 ;;      Totals:         0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    4
  3995 ;; This function calls:
  3996 ;;		_setSYSC_Main
  3997 ;; This function is called by:
  3998 ;;		_main
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _SYSC_Main
  4004  0AA9                     _SYSC_Main:	
  4005                           
  4006                           ;SYSC_B1.c: 19: setSYSC_Main();
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4010  0AA9  158A  2638         	fcall	_setSYSC_Main
  4011  0AAB  0008               	return
  4012  0AAC                     __end_of_SYSC_Main:	
  4013                           
  4014                           	psect	text17
  4015  0E38                     __ptext17:	
  4016 ;; *************** function _setSYSC_Main *****************
  4017 ;; Defined at:
  4018 ;;		line 23 in file "../src/SYSC_B1.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;		None               void
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4032 ;;      Params:         0       0       0       0
  4033 ;;      Locals:         0       0       0       0
  4034 ;;      Temps:          0       0       0       0
  4035 ;;      Totals:         0       0       0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    3
  4039 ;; This function calls:
  4040 ;;		_getMain_All_Error_Status
  4041 ;; This function is called by:
  4042 ;;		_SYSC_Main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _setSYSC_Main
  4048  0E38                     _setSYSC_Main:	
  4049                           
  4050                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4054  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0E3A  1C20               	btfss	_SYSC,0
  4057  0E3B  0008               	return
  4058                           
  4059                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4060  0E3C  18A0               	btfsc	_SYSC,1
  4061  0E3D  2E4F               	goto	l3563
  4062                           
  4063                           ;SYSC_B1.c: 27: SYSC.Time++;
  4064  0E3E  3001               	movlw	1
  4065  0E3F  07A1               	addwf	_SYSC+1,f
  4066  0E40  1803               	skipnc
  4067  0E41  0AA2               	incf	_SYSC+2,f
  4068  0E42  3000               	movlw	0
  4069  0E43  07A2               	addwf	_SYSC+2,f
  4070                           
  4071                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4072  0E44  3000               	movlw	0
  4073  0E45  0222               	subwf	_SYSC+2,w
  4074  0E46  3019               	movlw	25
  4075  0E47  1903               	skipnz
  4076  0E48  0221               	subwf	_SYSC+1,w
  4077  0E49  1C03               	skipc
  4078  0E4A  0008               	return
  4079                           
  4080                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4081  0E4B  01A1               	clrf	_SYSC+1
  4082  0E4C  01A2               	clrf	_SYSC+2
  4083                           
  4084                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4085  0E4D  14A0               	bsf	_SYSC,1
  4086                           
  4087                           ;SYSC_B1.c: 31: }
  4088                           ;SYSC_B1.c: 32: } else {
  4089  0E4E  0008               	return
  4090  0E4F                     l3563:	
  4091                           
  4092                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4093  0E4F  3001               	movlw	1
  4094  0E50  158A  25BA  158A   	fcall	_getMain_All_Error_Status
  4095  0E53  3800               	iorlw	0
  4096  0E54  1D03               	skipz
  4097  0E55  0008               	return
  4098                           
  4099                           ;SYSC_B1.c: 34: SYSC.Time++;
  4100  0E56  3001               	movlw	1
  4101  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  4102  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  4103  0E59  07A1               	addwf	_SYSC+1,f
  4104  0E5A  1803               	skipnc
  4105  0E5B  0AA2               	incf	_SYSC+2,f
  4106  0E5C  3000               	movlw	0
  4107  0E5D  07A2               	addwf	_SYSC+2,f
  4108                           
  4109                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4110  0E5E  3000               	movlw	0
  4111  0E5F  0222               	subwf	_SYSC+2,w
  4112  0E60  3019               	movlw	25
  4113  0E61  1903               	skipnz
  4114  0E62  0221               	subwf	_SYSC+1,w
  4115  0E63  1C03               	skipc
  4116  0E64  2E6A               	goto	l3569
  4117                           
  4118                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4119  0E65  01A1               	clrf	_SYSC+1
  4120  0E66  01A2               	clrf	_SYSC+2
  4121                           
  4122                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4123  0E67  01A3               	clrf	_SYSC+3
  4124  0E68  01A4               	clrf	_SYSC+4
  4125                           
  4126                           ;SYSC_B1.c: 38: } else {
  4127  0E69  0008               	return
  4128  0E6A                     l3569:	
  4129                           
  4130                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4131  0E6A  3001               	movlw	1
  4132  0E6B  07A3               	addwf	_SYSC+3,f
  4133  0E6C  1803               	skipnc
  4134  0E6D  0AA4               	incf	_SYSC+4,f
  4135  0E6E  3000               	movlw	0
  4136  0E6F  07A4               	addwf	_SYSC+4,f
  4137                           
  4138                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4139  0E70  3001               	movlw	1
  4140  0E71  0624               	xorwf	_SYSC+4,w
  4141  0E72  1D03               	skipz
  4142  0E73  2E76               	goto	u3355
  4143  0E74  30F4               	movlw	244
  4144  0E75  0623               	xorwf	_SYSC+3,w
  4145  0E76                     u3355:	
  4146  0E76  1D03               	skipz
  4147  0E77  0008               	return
  4148                           
  4149                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4150  0E78  01A3               	clrf	_SYSC+3
  4151  0E79  01A4               	clrf	_SYSC+4
  4152                           
  4153                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4154  0E7A  10A0               	bcf	_SYSC,1
  4155  0E7B  0008               	return
  4156  0E7C                     __end_of_setSYSC_Main:	
  4157                           
  4158                           	psect	text18
  4159  0AA6                     __ptext18:	
  4160 ;; *************** function _SYSC_Initialization *****************
  4161 ;; Defined at:
  4162 ;;		line 7 in file "../src/SYSC_B1.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;		None               void
  4169 ;; Registers used:
  4170 ;;		status,2, status,0, pclath, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4176 ;;      Params:         0       0       0       0
  4177 ;;      Locals:         0       0       0       0
  4178 ;;      Temps:          0       0       0       0
  4179 ;;      Totals:         0       0       0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    3
  4183 ;; This function calls:
  4184 ;;		_setSYSC_Initialization
  4185 ;; This function is called by:
  4186 ;;		_main
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _SYSC_Initialization
  4192  0AA6                     _SYSC_Initialization:	
  4193                           
  4194                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4195                           
  4196                           ;incstack = 0
  4197                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4198  0AA6  158A  22BA         	fcall	_setSYSC_Initialization
  4199  0AA8  0008               	return
  4200  0AA9                     __end_of_SYSC_Initialization:	
  4201                           
  4202                           	psect	text19
  4203  0ABA                     __ptext19:	
  4204 ;; *************** function _setSYSC_Initialization *****************
  4205 ;; Defined at:
  4206 ;;		line 13 in file "../src/SYSC_B1.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;		None               void
  4213 ;; Registers used:
  4214 ;;		None
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4220 ;;      Params:         0       0       0       0
  4221 ;;      Locals:         0       0       0       0
  4222 ;;      Temps:          0       0       0       0
  4223 ;;      Totals:         0       0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    2
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_SYSC_Initialization
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _setSYSC_Initialization
  4236  0ABA                     _setSYSC_Initialization:	
  4237                           
  4238                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _setSYSC_Initialization: []
  4242  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0ABC  1420               	bsf	_SYSC,0
  4245  0ABD  0008               	return
  4246  0ABE                     __end_of_setSYSC_Initialization:	
  4247                           
  4248                           	psect	text20
  4249  0026                     __ptext20:	
  4250 ;; *************** function _PIR_Main *****************
  4251 ;; Defined at:
  4252 ;;		line 13 in file "../src/PIR_B1.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;		None
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4257 ;;  TriggerValue    1   16[BANK0 ] unsigned char 
  4258 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  4259 ;;  cds             1   12[BANK0 ] unsigned char 
  4260 ;;  error           1   11[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4270 ;;      Params:         0       0       0       0
  4271 ;;      Locals:         0       7       0       0
  4272 ;;      Temps:          0       5       0       0
  4273 ;;      Totals:         0      12       0       0
  4274 ;;Total ram usage:       12 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    5
  4277 ;; This function calls:
  4278 ;;		_getCDS_Status
  4279 ;;		_getLights_Status
  4280 ;;		_getMain_All_Error_Status
  4281 ;;		_setLED
  4282 ;;		_setLights_SwOff
  4283 ;;		_setLights_SwOn
  4284 ;; This function is called by:
  4285 ;;		_main
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           
  4290                           ;psect for function _PIR_Main
  4291  0026                     _PIR_Main:	
  4292                           
  4293                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4297  0026  3000               	movlw	0
  4298  0027  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  4299  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4300  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4301  002C  00D3               	movwf	??_PIR_Main
  4302  002D  0853               	movf	??_PIR_Main,w
  4303  002E  00D8               	movwf	PIR_Main@error
  4304                           
  4305                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4306  002F  158A  22F3  118A   	fcall	_getCDS_Status
  4307  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4308  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4309  0034  00D3               	movwf	??_PIR_Main
  4310  0035  0853               	movf	??_PIR_Main,w
  4311  0036  00D9               	movwf	PIR_Main@cds
  4312                           
  4313                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4314  0037  01DE               	clrf	PIR_Main@LightsStatus
  4315                           
  4316                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4317  0038  01DA               	clrf	PIR_Main@Enable_Switch
  4318  0039  0ADA               	incf	PIR_Main@Enable_Switch,f
  4319                           
  4320                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4321  003A  01DD               	clrf	PIR_Main@TriggerValue
  4322                           
  4323                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4324  003B  3001               	movlw	1
  4325  003C  158A  2373  118A   	fcall	_getLights_Status
  4326  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4327  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4328  0041  00D3               	movwf	??_PIR_Main
  4329  0042  0853               	movf	??_PIR_Main,w
  4330  0043  00DE               	movwf	PIR_Main@LightsStatus
  4331                           
  4332                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4333  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4334  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4335  0046  1C20               	btfss	__PIR^(0+128),0
  4336  0047  2A12               	goto	l898
  4337                           
  4338                           ;PIR_B1.c: 36: if (error == 0) {
  4339  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4341  004A  08D8               	movf	PIR_Main@error,f
  4342  004B  1D03               	skipz
  4343  004C  288B               	goto	l899
  4344                           
  4345                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4346  004D  0859               	movf	PIR_Main@cds,w
  4347  004E  3A01               	xorlw	1
  4348  004F  1D03               	skipz
  4349  0050  2859               	goto	l900
  4350  0051  085A               	movf	PIR_Main@Enable_Switch,w
  4351  0052  3A01               	xorlw	1
  4352  0053  1D03               	skipz
  4353  0054  2859               	goto	l900
  4354                           
  4355                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4356  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4357  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4358  0057  17A0               	bsf	__PIR^(0+128),7
  4359                           
  4360                           ;PIR_B1.c: 40: } else {
  4361  0058  287B               	goto	l5125
  4362  0059                     l900:	
  4363                           
  4364                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4365  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4366  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4367  005B  13A0               	bcf	__PIR^(0+128),7
  4368                           
  4369                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4370  005C  1DA0               	btfss	__PIR^(0+128),3
  4371  005D  287B               	goto	l5125
  4372                           
  4373                           ;PIR_B1.c: 45: setLED(1, 0);
  4374  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4375  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4376  0060  01CD               	clrf	setLED@command
  4377  0061  3001               	movlw	1
  4378  0062  158A  2735  118A   	fcall	_setLED
  4379                           
  4380                           ;PIR_B1.c: 46: setLED(2, 0);
  4381  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4382  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4383  0067  01CD               	clrf	setLED@command
  4384  0068  3002               	movlw	2
  4385  0069  158A  2735  118A   	fcall	_setLED
  4386                           
  4387                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4388  006C  3001               	movlw	1
  4389  006D  158A  2373  118A   	fcall	_getLights_Status
  4390  0070  3A01               	xorlw	1
  4391  0071  1D03               	skipz
  4392  0072  287B               	goto	l5125
  4393                           
  4394                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4395  0073  3001               	movlw	1
  4396  0074  158A  250C  118A   	fcall	_setLights_SwOn
  4397                           
  4398                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4399  0077  3001               	movlw	1
  4400  0078  158A  2428  118A   	fcall	_setLights_SwOff
  4401  007B                     l5125:	
  4402                           
  4403                           ;PIR_B1.c: 55: }
  4404                           ;PIR_B1.c: 67: }
  4405                           ;PIR_B1.c: 68: }
  4406                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4407  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4408  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4409  007D  1A20               	btfsc	__PIR^(0+128),4
  4410  007E  2891               	goto	l906
  4411                           
  4412                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4413  007F  1620               	bsf	__PIR^(0+128),4
  4414                           
  4415                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4416  0080  19A0               	btfsc	__PIR^(0+128),3
  4417  0081  2891               	goto	l906
  4418                           
  4419                           ;PIR_B1.c: 76: setLED(1, 1);
  4420  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0084  01CD               	clrf	setLED@command
  4423  0085  0ACD               	incf	setLED@command,f
  4424  0086  3001               	movlw	1
  4425  0087  158A  2735  118A   	fcall	_setLED
  4426                           
  4427                           ;PIR_B1.c: 77: }
  4428                           ;PIR_B1.c: 80: }
  4429                           ;PIR_B1.c: 81: } else {
  4430  008A  2891               	goto	l906
  4431  008B                     l899:	
  4432                           
  4433                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4434  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4435  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4436  008D  1E20               	btfss	__PIR^(0+128),4
  4437  008E  2891               	goto	l906
  4438                           
  4439                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4440  008F  1220               	bcf	__PIR^(0+128),4
  4441                           
  4442                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4443  0090  13A0               	bcf	__PIR^(0+128),7
  4444  0091                     l906:	
  4445                           
  4446                           ;PIR_B1.c: 102: }
  4447                           ;PIR_B1.c: 103: }
  4448                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4449  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4451  0093  18A0               	btfsc	__PIR^(0+128),1
  4452  0094  28A4               	goto	l908
  4453                           
  4454                           ;PIR_B1.c: 106: _PIR.Time++;
  4455  0095  3001               	movlw	1
  4456  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0098  00D3               	movwf	??_PIR_Main
  4459  0099  0853               	movf	??_PIR_Main,w
  4460  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4461  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4462  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4463                           
  4464                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4465  009D  0822               	movf	(__PIR^(0+128)+2),w
  4466  009E  3A05               	xorlw	5
  4467  009F  1D03               	skipz
  4468  00A0  29B1               	goto	l5213
  4469                           
  4470                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4471  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4472                           
  4473                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4474  00A2  14A0               	bsf	__PIR^(0+128),1
  4475                           
  4476                           ;PIR_B1.c: 110: }
  4477                           ;PIR_B1.c: 111: } else {
  4478  00A3  29B1               	goto	l5213
  4479  00A4                     l908:	
  4480                           
  4481                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4482  00A4  1D20               	btfss	__PIR^(0+128),2
  4483  00A5  29B1               	goto	l5213
  4484                           
  4485                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4486  00A6  1120               	bcf	__PIR^(0+128),2
  4487                           
  4488                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4489  00A7  10A0               	bcf	__PIR^(0+128),1
  4490                           
  4491                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4492  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4493                           
  4494                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4495  00A9  1DA0               	btfss	__PIR^(0+128),3
  4496  00AA  29B1               	goto	l5213
  4497                           
  4498                           ;PIR_B1.c: 118: _PIR.Time++;
  4499  00AB  3001               	movlw	1
  4500  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4501  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4502  00AE  00D3               	movwf	??_PIR_Main
  4503  00AF  0853               	movf	??_PIR_Main,w
  4504  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4505  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4506  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4507                           
  4508                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4509  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4510  00B4  3A3C               	xorlw	60
  4511  00B5  1D03               	skipz
  4512  00B6  28EB               	goto	l5181
  4513                           
  4514                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4515  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4516                           
  4517                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4518  00B8  305A               	movlw	90
  4519  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4520  00BA  1C03               	skipc
  4521  00BB  28C7               	goto	l5163
  4522                           
  4523                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4524  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4525                           
  4526                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4527  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4528  00BE  3A19               	xorlw	25
  4529  00BF  1903               	btfsc	3,2
  4530  00C0  28DC               	goto	L12
  4531                           
  4532                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4533                           
  4534                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4535  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4536  00C2  3A23               	xorlw	35
  4537  00C3  1D03               	skipz
  4538  00C4  28EA               	goto	l5179
  4539                           
  4540                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4541  00C5  302D               	movlw	45
  4542  00C6  28E3               	goto	L9
  4543  00C7                     l5163:	
  4544                           ;PIR_B1.c: 128: }
  4545                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4546                           
  4547  00C7  300B               	movlw	11
  4548  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4549  00C9  1803               	skipnc
  4550  00CA  28EA               	goto	l5179
  4551                           
  4552                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4553  00CB  3001               	movlw	1
  4554  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4555  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4556  00CE  00D3               	movwf	??_PIR_Main
  4557  00CF  0853               	movf	??_PIR_Main,w
  4558  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4559  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4560  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4561                           
  4562                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4563  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4564  00D4  3A02               	xorlw	2
  4565  00D5  1D03               	skipz
  4566  00D6  28EA               	goto	l5179
  4567                           
  4568                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4569  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4570                           
  4571                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4572  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4573  00D9  3A2D               	xorlw	45
  4574  00DA  1D03               	skipz
  4575  00DB  28DE               	goto	l5175
  4576  00DC                     L12:	
  4577                           
  4578                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4579  00DC  3023               	movlw	35
  4580  00DD  28E3               	goto	L9
  4581  00DE                     l5175:	
  4582                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4583                           
  4584  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4585  00DF  3A23               	xorlw	35
  4586  00E0  1D03               	skipz
  4587  00E1  28EA               	goto	l5179
  4588                           
  4589                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4590  00E2  3019               	movlw	25
  4591  00E3                     L9:	
  4592  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4593  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4594  00E5  00D3               	movwf	??_PIR_Main
  4595  00E6  0853               	movf	??_PIR_Main,w
  4596  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4597  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4598  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4599  00EA                     l5179:	
  4600                           
  4601                           ;PIR_B1.c: 138: }
  4602                           ;PIR_B1.c: 139: }
  4603                           ;PIR_B1.c: 140: }
  4604                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4605  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4606  00EB                     l5181:	
  4607                           
  4608                           ;PIR_B1.c: 142: }
  4609                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4610                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4611  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4612  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4613  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4614  00EE  00D3               	movwf	??_PIR_Main
  4615  00EF  01D4               	clrf	??_PIR_Main+1
  4616  00F0  09D3               	comf	??_PIR_Main,f
  4617  00F1  09D4               	comf	??_PIR_Main+1,f
  4618  00F2  0AD3               	incf	??_PIR_Main,f
  4619  00F3  1903               	skipnz
  4620  00F4  0AD4               	incf	??_PIR_Main+1,f
  4621  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4622  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4623  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4624  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4625  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4626  00FA  0753               	addwf	??_PIR_Main,w
  4627  00FB  00D5               	movwf	??_PIR_Main+2
  4628  00FC  0854               	movf	??_PIR_Main+1,w
  4629  00FD  1803               	skipnc
  4630  00FE  0A54               	incf	??_PIR_Main+1,w
  4631  00FF  00D6               	movwf	??_PIR_Main+3
  4632  0100  0856               	movf	??_PIR_Main+3,w
  4633  0101  3A80               	xorlw	128
  4634  0102  3C80               	sublw	128
  4635  0103  1D03               	skipz
  4636  0104  2909               	goto	u6645
  4637  0105  0855               	movf	??_PIR_Main+2,w
  4638  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4639  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4640  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4641  0109                     u6645:	
  4642  0109  1C03               	skipc
  4643  010A  292B               	goto	l5191
  4644  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4645  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4646  010D  0823               	movf	(__PIR^(0+128)+3),w
  4647  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4648  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4649  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4650  0111  00D3               	movwf	??_PIR_Main
  4651  0112  01D4               	clrf	??_PIR_Main+1
  4652  0113  0DD4               	rlf	??_PIR_Main+1,f
  4653  0114  0854               	movf	??_PIR_Main+1,w
  4654  0115  3A80               	xorlw	128
  4655  0116  00D5               	movwf	??_PIR_Main+2
  4656  0117  3080               	movlw	128
  4657  0118  0255               	subwf	??_PIR_Main+2,w
  4658  0119  1D03               	skipz
  4659  011A  2921               	goto	u6655
  4660  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4661  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4662  011D  0821               	movf	(__PIR^(0+128)+1),w
  4663  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4664  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4665  0120  0253               	subwf	??_PIR_Main,w
  4666  0121                     u6655:	
  4667  0121  1C03               	skipc
  4668  0122  292B               	goto	l5191
  4669                           
  4670                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4671  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4672  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4673  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4674  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4675                           
  4676                           ;PIR_B1.c: 155: setLED(1, 0);
  4677  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4678  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4679  0129  01CD               	clrf	setLED@command
  4680  012A  299A               	goto	L13
  4681  012B                     l5191:	
  4682                           ;PIR_B1.c: 159: } else {
  4683                           
  4684                           ;PIR_B1.c: 156: setLED(2, 0);
  4685                           
  4686                           
  4687                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4688  012B  3001               	movlw	1
  4689  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4690  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4691  012E  00D3               	movwf	??_PIR_Main
  4692  012F  0853               	movf	??_PIR_Main,w
  4693  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4694  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4695  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4696                           
  4697                           ;PIR_B1.c: 163: _PIR.Count++;
  4698  0133  3001               	movlw	1
  4699  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4700  0135  1803               	skipnc
  4701  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4702  0137  3000               	movlw	0
  4703  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4704                           
  4705                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4706  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4707  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4708  013B  085E               	movf	PIR_Main@LightsStatus,w
  4709  013C  3A01               	xorlw	1
  4710  013D  1903               	skipnz
  4711  013E  293F               	goto	l5199
  4712  013F                     l5199:	
  4713  013F  3003               	movlw	3
  4714  0140  00DB               	movwf	_PIR_Main$2856
  4715  0141  3000               	movlw	0
  4716  0142  00DC               	movwf	_PIR_Main$2856+1
  4717  0143  085B               	movf	_PIR_Main$2856,w
  4718  0144  00D3               	movwf	??_PIR_Main
  4719  0145  0853               	movf	??_PIR_Main,w
  4720  0146  00DD               	movwf	PIR_Main@TriggerValue
  4721                           
  4722                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4723  0147  085D               	movf	PIR_Main@TriggerValue,w
  4724  0148  00D3               	movwf	??_PIR_Main
  4725  0149  01D4               	clrf	??_PIR_Main+1
  4726  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4727  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4728  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4729  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4730  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4731  014F  0654               	xorwf	??_PIR_Main+1,w
  4732  0150  1D03               	skipz
  4733  0151  2958               	goto	u6675
  4734  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4735  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4736  0154  083E               	movf	(__PIR^(0+128)+30),w
  4737  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4738  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4739  0157  0653               	xorwf	??_PIR_Main,w
  4740  0158                     u6675:	
  4741  0158  1D03               	skipz
  4742  0159  29B1               	goto	l5213
  4743                           
  4744                           ;PIR_B1.c: 169: _PIR.CloseTimeSeconds = 0;
  4745  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4746  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4747  015C  01C2               	clrf	(__PIR^(0+128)+34)
  4748                           
  4749                           ;PIR_B1.c: 170: _PIR.CloseTimeMinutes = 0;
  4750  015D  01C0               	clrf	(__PIR^(0+128)+32)
  4751  015E  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4752                           
  4753                           ;PIR_B1.c: 172: _PIR.Count = 0;
  4754  015F  01BE               	clrf	(__PIR^(0+128)+30)
  4755  0160  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4756                           
  4757                           ;PIR_B1.c: 179: if (getLights_Status(1) == 0) {
  4758  0161  3001               	movlw	1
  4759  0162  158A  2373  118A   	fcall	_getLights_Status
  4760  0165  3800               	iorlw	0
  4761  0166  1D03               	skipz
  4762  0167  2970               	goto	l5207
  4763                           
  4764                           ;PIR_B1.c: 180: setLights_SwOn(1);
  4765  0168  3001               	movlw	1
  4766  0169  158A  250C  118A   	fcall	_setLights_SwOn
  4767                           
  4768                           ;PIR_B1.c: 181: setLights_SwOff(1);
  4769  016C  3001               	movlw	1
  4770  016D  158A  2428  118A   	fcall	_setLights_SwOff
  4771  0170                     l5207:	
  4772                           
  4773                           ;PIR_B1.c: 183: }
  4774                           ;PIR_B1.c: 197: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4775  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4776  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4777  0172  0848               	movf	(__PIR^(0+128)+40),w
  4778  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4779  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4780  0175  00D3               	movwf	??_PIR_Main
  4781  0176  01D4               	clrf	??_PIR_Main+1
  4782  0177  09D3               	comf	??_PIR_Main,f
  4783  0178  09D4               	comf	??_PIR_Main+1,f
  4784  0179  0AD3               	incf	??_PIR_Main,f
  4785  017A  1903               	skipnz
  4786  017B  0AD4               	incf	??_PIR_Main+1,f
  4787  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4788  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4789  017E  0823               	movf	(__PIR^(0+128)+3),w
  4790  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4791  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4792  0181  0753               	addwf	??_PIR_Main,w
  4793  0182  00D5               	movwf	??_PIR_Main+2
  4794  0183  0854               	movf	??_PIR_Main+1,w
  4795  0184  1803               	skipnc
  4796  0185  0A54               	incf	??_PIR_Main+1,w
  4797  0186  00D6               	movwf	??_PIR_Main+3
  4798  0187  0856               	movf	??_PIR_Main+3,w
  4799  0188  3A80               	xorlw	128
  4800  0189  00D7               	movwf	??_PIR_Main+4
  4801  018A  3080               	movlw	128
  4802  018B  0257               	subwf	??_PIR_Main+4,w
  4803  018C  1D03               	skipz
  4804  018D  2994               	goto	u6695
  4805  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4806  018F  1303               	bcf	3,6	;RP1=0, select bank1
  4807  0190  0821               	movf	(__PIR^(0+128)+1),w
  4808  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4809  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4810  0193  0255               	subwf	??_PIR_Main+2,w
  4811  0194                     u6695:	
  4812  0194  1C03               	skipc
  4813  0195  29A2               	goto	l5211
  4814                           
  4815                           ;PIR_B1.c: 198: setLED(1, 1);
  4816  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0198  01CD               	clrf	setLED@command
  4819  0199  0ACD               	incf	setLED@command,f
  4820  019A                     L13:	
  4821  019A  3001               	movlw	1
  4822  019B  158A  2735  118A   	fcall	_setLED
  4823                           
  4824                           ;PIR_B1.c: 199: setLED(2, 0);
  4825  019E  1283               	bcf	3,5	;RP0=0, select bank0
  4826  019F  1303               	bcf	3,6	;RP1=0, select bank0
  4827  01A0  01CD               	clrf	setLED@command
  4828  01A1  29AD               	goto	L10
  4829  01A2                     l5211:	
  4830                           ;PIR_B1.c: 200: } else {
  4831                           
  4832                           
  4833                           ;PIR_B1.c: 201: setLED(1, 0);
  4834  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4835  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4836  01A4  01CD               	clrf	setLED@command
  4837  01A5  3001               	movlw	1
  4838  01A6  158A  2735  118A   	fcall	_setLED
  4839                           
  4840                           ;PIR_B1.c: 202: setLED(2, 1);
  4841  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4842  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4843  01AB  01CD               	clrf	setLED@command
  4844  01AC  0ACD               	incf	setLED@command,f
  4845  01AD                     L10:	
  4846  01AD  3002               	movlw	2
  4847  01AE  158A  2735  118A   	fcall	_setLED
  4848  01B1                     l5213:	
  4849                           
  4850                           ;PIR_B1.c: 203: }
  4851                           ;PIR_B1.c: 245: }
  4852                           ;PIR_B1.c: 246: }
  4853                           ;PIR_B1.c: 247: }
  4854                           ;PIR_B1.c: 248: }
  4855                           ;PIR_B1.c: 249: }
  4856                           ;PIR_B1.c: 250: }
  4857                           ;PIR_B1.c: 251: if (_PIR.OK == 0) {
  4858  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4859  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4860  01B3  19A0               	btfsc	__PIR^(0+128),3
  4861  01B4  29DC               	goto	l5227
  4862                           
  4863                           ;PIR_B1.c: 252: _PIR.Count++;
  4864  01B5  3001               	movlw	1
  4865  01B6  07BE               	addwf	(__PIR^(0+128)+30),f
  4866  01B7  1803               	skipnc
  4867  01B8  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4868  01B9  3000               	movlw	0
  4869  01BA  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4870                           
  4871                           ;PIR_B1.c: 253: if (_PIR.Count == (30000 / 20)) {
  4872  01BB  3005               	movlw	5
  4873  01BC  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4874  01BD  1D03               	skipz
  4875  01BE  29C1               	goto	u6715
  4876  01BF  30DC               	movlw	220
  4877  01C0  063E               	xorwf	(__PIR^(0+128)+30),w
  4878  01C1                     u6715:	
  4879  01C1  1D03               	skipz
  4880  01C2  0008               	return
  4881                           
  4882                           ;PIR_B1.c: 254: _PIR.Count = 0;
  4883  01C3  01BE               	clrf	(__PIR^(0+128)+30)
  4884  01C4  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4885                           
  4886                           ;PIR_B1.c: 255: _PIR.OK = 1;
  4887  01C5  15A0               	bsf	__PIR^(0+128),3
  4888                           
  4889                           ;PIR_B1.c: 257: setLED(1, 0);
  4890  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  4891  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  4892  01C8  01CD               	clrf	setLED@command
  4893  01C9  3001               	movlw	1
  4894  01CA  158A  2735  118A   	fcall	_setLED
  4895                           
  4896                           ;PIR_B1.c: 263: if (getLights_Status(1) == 1) {
  4897  01CD  3001               	movlw	1
  4898  01CE  158A  2373  118A   	fcall	_getLights_Status
  4899  01D1  3A01               	xorlw	1
  4900  01D2  1D03               	skipz
  4901  01D3  0008               	return
  4902                           
  4903                           ;PIR_B1.c: 264: setLights_SwOn(1);
  4904  01D4  3001               	movlw	1
  4905  01D5  158A  250C  118A   	fcall	_setLights_SwOn
  4906                           
  4907                           ;PIR_B1.c: 265: setLights_SwOff(1);
  4908  01D8  3001               	movlw	1
  4909  01D9  158A  2428         	fcall	_setLights_SwOff
  4910                           
  4911                           ;PIR_B1.c: 267: }
  4912                           ;PIR_B1.c: 280: }
  4913                           ;PIR_B1.c: 281: } else {
  4914  01DB  0008               	return
  4915  01DC                     l5227:	
  4916                           
  4917                           ;PIR_B1.c: 283: if (LightsStatus == 1) {
  4918  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  4919  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  4920  01DE  085E               	movf	PIR_Main@LightsStatus,w
  4921  01DF  3A01               	xorlw	1
  4922  01E0  1D03               	skipz
  4923  01E1  2A0C               	goto	l5245
  4924                           
  4925                           ;PIR_B1.c: 284: _PIR.CloseTimeSeconds++;
  4926  01E2  3001               	movlw	1
  4927  01E3  00D3               	movwf	??_PIR_Main
  4928  01E4  0853               	movf	??_PIR_Main,w
  4929  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  4930  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  4931  01E7  07C2               	addwf	(__PIR^(0+128)+34),f
  4932                           
  4933                           ;PIR_B1.c: 285: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4934  01E8  0842               	movf	(__PIR^(0+128)+34),w
  4935  01E9  3A32               	xorlw	50
  4936  01EA  1D03               	skipz
  4937  01EB  0008               	return
  4938                           
  4939                           ;PIR_B1.c: 286: _PIR.CloseTimeSeconds = 0;
  4940  01EC  01C2               	clrf	(__PIR^(0+128)+34)
  4941                           
  4942                           ;PIR_B1.c: 287: _PIR.CloseTimeMinutes++;
  4943  01ED  3001               	movlw	1
  4944  01EE  07C0               	addwf	(__PIR^(0+128)+32),f
  4945  01EF  1803               	skipnc
  4946  01F0  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4947  01F1  3000               	movlw	0
  4948  01F2  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4949                           
  4950                           ;PIR_B1.c: 288: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4951  01F3  0844               	movf	((__PIR+1)^(0+128)+35),w
  4952  01F4  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4953  01F5  1D03               	skipz
  4954  01F6  29F9               	goto	u6755
  4955  01F7  0843               	movf	(__PIR^(0+128)+35),w
  4956  01F8  0640               	xorwf	(__PIR^(0+128)+32),w
  4957  01F9                     u6755:	
  4958  01F9  1D03               	skipz
  4959  01FA  0008               	return
  4960                           
  4961                           ;PIR_B1.c: 289: _PIR.CloseTimeMinutes = 0;
  4962  01FB  01C0               	clrf	(__PIR^(0+128)+32)
  4963  01FC  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4964                           
  4965                           ;PIR_B1.c: 295: if (getLights_Status(1) == 1) {
  4966  01FD  3001               	movlw	1
  4967  01FE  158A  2373  118A   	fcall	_getLights_Status
  4968  0201  3A01               	xorlw	1
  4969  0202  1D03               	skipz
  4970  0203  0008               	return
  4971                           
  4972                           ;PIR_B1.c: 296: setLights_SwOn(1);
  4973  0204  3001               	movlw	1
  4974  0205  158A  250C  118A   	fcall	_setLights_SwOn
  4975                           
  4976                           ;PIR_B1.c: 297: setLights_SwOff(1);
  4977  0208  3001               	movlw	1
  4978  0209  158A  2428         	fcall	_setLights_SwOff
  4979                           
  4980                           ;PIR_B1.c: 299: }
  4981                           ;PIR_B1.c: 311: }
  4982                           ;PIR_B1.c: 312: }
  4983                           ;PIR_B1.c: 313: } else {
  4984  020B  0008               	return
  4985  020C                     l5245:	
  4986                           
  4987                           ;PIR_B1.c: 314: _PIR.CloseTimeSeconds = 0;
  4988  020C  1683               	bsf	3,5	;RP0=1, select bank1
  4989  020D  1303               	bcf	3,6	;RP1=0, select bank1
  4990  020E  01C2               	clrf	(__PIR^(0+128)+34)
  4991                           
  4992                           ;PIR_B1.c: 315: _PIR.CloseTimeMinutes = 0;
  4993  020F  01C0               	clrf	(__PIR^(0+128)+32)
  4994  0210  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4995                           
  4996                           ;PIR_B1.c: 316: }
  4997                           ;PIR_B1.c: 318: }
  4998                           ;PIR_B1.c: 319: } else {
  4999  0211  0008               	return
  5000  0212                     l898:	
  5001                           
  5002                           ;PIR_B1.c: 320: if (myMain.PowerON == 1) {
  5003  0212  1283               	bcf	3,5	;RP0=0, select bank0
  5004  0213  1303               	bcf	3,6	;RP1=0, select bank0
  5005  0214  1C25               	btfss	_myMain,0
  5006  0215  0008               	return
  5007                           
  5008                           ;PIR_B1.c: 321: _PIR.Enable = 1;
  5009  0216  1683               	bsf	3,5	;RP0=1, select bank1
  5010  0217  1303               	bcf	3,6	;RP1=0, select bank1
  5011  0218  1420               	bsf	__PIR^(0+128),0
  5012                           
  5013                           ;PIR_B1.c: 323: setLED(1, 1);
  5014  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5015  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5016  021B  01CD               	clrf	setLED@command
  5017  021C  0ACD               	incf	setLED@command,f
  5018  021D  3001               	movlw	1
  5019  021E  158A  2735  118A   	fcall	_setLED
  5020                           
  5021                           ;PIR_B1.c: 328: if (getLights_Status(1) == 0) {
  5022  0221  3001               	movlw	1
  5023  0222  158A  2373  118A   	fcall	_getLights_Status
  5024  0225  3800               	iorlw	0
  5025  0226  1D03               	skipz
  5026  0227  0008               	return
  5027                           
  5028                           ;PIR_B1.c: 329: setLights_SwOn(1);
  5029  0228  3001               	movlw	1
  5030  0229  158A  250C  118A   	fcall	_setLights_SwOn
  5031                           
  5032                           ;PIR_B1.c: 330: setLights_SwOff(1);
  5033  022C  3001               	movlw	1
  5034  022D  158A  2428         	fcall	_setLights_SwOff
  5035  022F  0008               	return
  5036  0230                     __end_of_PIR_Main:	
  5037                           
  5038                           	psect	text21
  5039  0AF3                     __ptext21:	
  5040 ;; *************** function _getCDS_Status *****************
  5041 ;; Defined at:
  5042 ;;		line 42 in file "../src/CDS_B1.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  status          1    4[COMMON] unsigned char 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  1    wreg      unsigned char 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5056 ;;      Params:         0       0       0       0
  5057 ;;      Locals:         1       0       0       0
  5058 ;;      Temps:          0       0       0       0
  5059 ;;      Totals:         1       0       0       0
  5060 ;;Total ram usage:        1 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    2
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_PIR_Main
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           
  5071                           ;psect for function _getCDS_Status
  5072  0AF3                     _getCDS_Status:	
  5073                           
  5074                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5075                           
  5076                           ;incstack = 0
  5077                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5078  0AF3  3000               	movlw	0
  5079  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  5080  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  5081  0AF6  1A2E               	btfsc	__CDS,4
  5082  0AF7  3001               	movlw	1
  5083  0AF8  00F4               	movwf	getCDS_Status@status
  5084                           
  5085                           ;CDS_B1.c: 44: return status;
  5086  0AF9  0874               	movf	getCDS_Status@status,w
  5087  0AFA  0008               	return
  5088  0AFB                     __end_of_getCDS_Status:	
  5089                           
  5090                           	psect	text22
  5091  0B21                     __ptext22:	
  5092 ;; *************** function _PIR_Initialization *****************
  5093 ;; Defined at:
  5094 ;;		line 7 in file "../src/PIR_B1.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;		None               void
  5101 ;; Registers used:
  5102 ;;		wreg
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5108 ;;      Params:         0       0       0       0
  5109 ;;      Locals:         0       0       0       0
  5110 ;;      Temps:          1       0       0       0
  5111 ;;      Totals:         1       0       0       0
  5112 ;;Total ram usage:        1 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    2
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_main
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _PIR_Initialization
  5124  0B21                     _PIR_Initialization:	
  5125                           
  5126                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _PIR_Initialization: [wreg]
  5130  0B21  3019               	movlw	25
  5131  0B22  00F4               	movwf	??_PIR_Initialization
  5132  0B23  0874               	movf	??_PIR_Initialization,w
  5133  0B24  1683               	bsf	3,5	;RP0=1, select bank1
  5134  0B25  1303               	bcf	3,6	;RP1=0, select bank1
  5135  0B26  00C8               	movwf	(__PIR^(0+128)+40)
  5136                           
  5137                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5138  0B27  3005               	movlw	5
  5139  0B28  00C3               	movwf	(__PIR^(0+128)+35)
  5140  0B29  3000               	movlw	0
  5141  0B2A  00C4               	movwf	(__PIR^(0+128)+36)
  5142  0B2B  0008               	return
  5143  0B2C                     __end_of_PIR_Initialization:	
  5144                           
  5145                           	psect	text23
  5146  0B64                     __ptext23:	
  5147 ;; *************** function _Mcu_Initialization *****************
  5148 ;; Defined at:
  5149 ;;		line 30 in file "../src/MCU_B1.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;		None
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;		None               void
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, pclath, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5163 ;;      Params:         0       0       0       0
  5164 ;;      Locals:         0       0       0       0
  5165 ;;      Temps:          0       0       0       0
  5166 ;;      Totals:         0       0       0       0
  5167 ;;Total ram usage:        0 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    3
  5170 ;; This function calls:
  5171 ;;		_ADC_Set
  5172 ;;		_Fosc_Set
  5173 ;;		_IO_Set
  5174 ;;		_TMR1_Set
  5175 ;;		_WDT_Set
  5176 ;; This function is called by:
  5177 ;;		_main
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           
  5182                           ;psect for function _Mcu_Initialization
  5183  0B64                     _Mcu_Initialization:	
  5184                           
  5185                           ;MCU_B1.c: 32: Fosc_Set();
  5186                           
  5187                           ;incstack = 0
  5188                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5189  0B64  158A  22BE  158A   	fcall	_Fosc_Set
  5190                           
  5191                           ;MCU_B1.c: 34: IO_Set();
  5192  0B67  158A  2442  158A   	fcall	_IO_Set
  5193                           
  5194                           ;MCU_B1.c: 36: ;;
  5195                           ;MCU_B1.c: 38: TMR1_Set();
  5196  0B6A  158A  2348  158A   	fcall	_TMR1_Set
  5197                           
  5198                           ;MCU_B1.c: 40: ADC_Set();
  5199  0B6D  158A  22DC  158A   	fcall	_ADC_Set
  5200                           
  5201                           ;MCU_B1.c: 42: ;;
  5202                           ;MCU_B1.c: 44: ;;
  5203                           ;MCU_B1.c: 46: ;;
  5204                           ;MCU_B1.c: 48: ;;
  5205                           ;MCU_B1.c: 50: ;;
  5206                           ;MCU_B1.c: 52: WDT_Set();
  5207  0B70  158A  2356         	fcall	_WDT_Set
  5208  0B72  0008               	return
  5209  0B73                     __end_of_Mcu_Initialization:	
  5210                           
  5211                           	psect	text24
  5212  0B56                     __ptext24:	
  5213 ;; *************** function _WDT_Set *****************
  5214 ;; Defined at:
  5215 ;;		line 1102 in file "../src/MCU_B1.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5229 ;;      Params:         0       0       0       0
  5230 ;;      Locals:         0       0       0       0
  5231 ;;      Temps:          1       0       0       0
  5232 ;;      Totals:         1       0       0       0
  5233 ;;Total ram usage:        1 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    2
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_Mcu_Initialization
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           
  5244                           ;psect for function _WDT_Set
  5245  0B56                     _WDT_Set:	
  5246                           
  5247                           ;MCU_B1.c: 1104: PSA = 1;
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _WDT_Set: [wreg]
  5251  0B56  1683               	bsf	3,5	;RP0=1, select bank1
  5252  0B57  1303               	bcf	3,6	;RP1=0, select bank1
  5253  0B58  1581               	bsf	1,3	;volatile
  5254                           
  5255                           ;MCU_B1.c: 1105: PS0 = 1;
  5256  0B59  1401               	bsf	1,0	;volatile
  5257                           
  5258                           ;MCU_B1.c: 1106: PS1 = 1;
  5259  0B5A  1481               	bsf	1,1	;volatile
  5260                           
  5261                           ;MCU_B1.c: 1107: PS2 = 1;
  5262  0B5B  1501               	bsf	1,2	;volatile
  5263                           
  5264                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5265  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  5266  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  5267  0B5E  1435               	bsf	_WDT,0
  5268                           
  5269                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5270  0B5F  300A               	movlw	10
  5271  0B60  00F4               	movwf	??_WDT_Set
  5272  0B61  0874               	movf	??_WDT_Set,w
  5273  0B62  00B6               	movwf	_WDT+1
  5274  0B63  0008               	return
  5275  0B64                     __end_of_WDT_Set:	
  5276                           
  5277                           	psect	text25
  5278  0B48                     __ptext25:	
  5279 ;; *************** function _TMR1_Set *****************
  5280 ;; Defined at:
  5281 ;;		line 226 in file "../src/MCU_B1.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;		None               void
  5288 ;; Registers used:
  5289 ;;		wreg
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5295 ;;      Params:         0       0       0       0
  5296 ;;      Locals:         0       0       0       0
  5297 ;;      Temps:          0       0       0       0
  5298 ;;      Totals:         0       0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    2
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_Mcu_Initialization
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           
  5310                           ;psect for function _TMR1_Set
  5311  0B48                     _TMR1_Set:	
  5312                           
  5313                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _TMR1_Set: [wreg]
  5317  0B48  3041               	movlw	65
  5318  0B49  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0B4B  0090               	movwf	16	;volatile
  5321                           
  5322                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5323  0B4C  30FA               	movlw	250
  5324  0B4D  008F               	movwf	15	;volatile
  5325                           
  5326                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5327  0B4E  3038               	movlw	56
  5328  0B4F  008E               	movwf	14	;volatile
  5329                           
  5330                           ;MCU_B1.c: 230: TMR1IE = 1;
  5331  0B50  1683               	bsf	3,5	;RP0=1, select bank1
  5332  0B51  1303               	bcf	3,6	;RP1=0, select bank1
  5333  0B52  140C               	bsf	12,0	;volatile
  5334                           
  5335                           ;MCU_B1.c: 231: PEIE = 1;
  5336  0B53  170B               	bsf	11,6	;volatile
  5337                           
  5338                           ;MCU_B1.c: 232: GIE = 1;
  5339  0B54  178B               	bsf	11,7	;volatile
  5340  0B55  0008               	return
  5341  0B56                     __end_of_TMR1_Set:	
  5342                           
  5343                           	psect	text26
  5344  0C42                     __ptext26:	
  5345 ;; *************** function _IO_Set *****************
  5346 ;; Defined at:
  5347 ;;		line 60 in file "../src/MCU_B1.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;		None
  5352 ;; Return value:  Size  Location     Type
  5353 ;;		None               void
  5354 ;; Registers used:
  5355 ;;		wreg, status,2
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5361 ;;      Params:         0       0       0       0
  5362 ;;      Locals:         0       0       0       0
  5363 ;;      Temps:          0       0       0       0
  5364 ;;      Totals:         0       0       0       0
  5365 ;;Total ram usage:        0 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    2
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_Mcu_Initialization
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           
  5376                           ;psect for function _IO_Set
  5377  0C42                     _IO_Set:	
  5378                           
  5379                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5380                           
  5381                           ;incstack = 0
  5382                           ; Regs used in _IO_Set: [wreg+status,2]
  5383  0C42  302F               	movlw	47
  5384  0C43  1683               	bsf	3,5	;RP0=1, select bank1
  5385  0C44  1303               	bcf	3,6	;RP1=0, select bank1
  5386  0C45  0085               	movwf	5	;volatile
  5387                           
  5388                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5389  0C46  3013               	movlw	19
  5390  0C47  0086               	movwf	6	;volatile
  5391                           
  5392                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5393  0C48  300C               	movlw	12
  5394  0C49  0087               	movwf	7	;volatile
  5395                           
  5396                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5397  0C4A  300F               	movlw	15
  5398  0C4B  1683               	bsf	3,5	;RP0=1, select bank3
  5399  0C4C  1703               	bsf	3,6	;RP1=1, select bank3
  5400  0C4D  0085               	movwf	5	;volatile
  5401                           
  5402                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5403  0C4E  3012               	movlw	18
  5404  0C4F  0086               	movwf	6	;volatile
  5405                           
  5406                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5407  0C50  30AF               	movlw	175
  5408  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  5409  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  5410  0C53  0085               	movwf	5	;volatile
  5411                           
  5412                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5413  0C54  3013               	movlw	19
  5414  0C55  0086               	movwf	6	;volatile
  5415                           
  5416                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5417  0C56  300C               	movlw	12
  5418  0C57  0087               	movwf	7	;volatile
  5419                           
  5420                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5421  0C58  1683               	bsf	3,5	;RP0=1, select bank1
  5422  0C59  1303               	bcf	3,6	;RP1=0, select bank1
  5423  0C5A  0195               	clrf	21	;volatile
  5424  0C5B  0008               	return
  5425  0C5C                     __end_of_IO_Set:	
  5426                           
  5427                           	psect	text27
  5428  0ABE                     __ptext27:	
  5429 ;; *************** function _Fosc_Set *****************
  5430 ;; Defined at:
  5431 ;;		line 56 in file "../src/MCU_B1.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;		None               void
  5438 ;; Registers used:
  5439 ;;		wreg
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5445 ;;      Params:         0       0       0       0
  5446 ;;      Locals:         0       0       0       0
  5447 ;;      Temps:          0       0       0       0
  5448 ;;      Totals:         0       0       0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    2
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_Mcu_Initialization
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _Fosc_Set
  5461  0ABE                     _Fosc_Set:	
  5462                           
  5463                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _Fosc_Set: [wreg]
  5467  0ABE  303C               	movlw	60
  5468  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  5469  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  5470  0AC1  0090               	movwf	16	;volatile
  5471  0AC2  0008               	return
  5472  0AC3                     __end_of_Fosc_Set:	
  5473                           
  5474                           	psect	text28
  5475  0ADC                     __ptext28:	
  5476 ;; *************** function _ADC_Set *****************
  5477 ;; Defined at:
  5478 ;;		line 427 in file "../src/MCU_B1.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5492 ;;      Params:         0       0       0       0
  5493 ;;      Locals:         0       0       0       0
  5494 ;;      Temps:          0       0       0       0
  5495 ;;      Totals:         0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    2
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_Mcu_Initialization
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           
  5507                           ;psect for function _ADC_Set
  5508  0ADC                     _ADC_Set:	
  5509                           
  5510                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in _ADC_Set: [wreg]
  5514  0ADC  3073               	movlw	115
  5515  0ADD  1683               	bsf	3,5	;RP0=1, select bank1
  5516  0ADE  1303               	bcf	3,6	;RP1=0, select bank1
  5517  0ADF  009F               	movwf	31	;volatile
  5518                           
  5519                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  5520  0AE0  30C1               	movlw	193
  5521  0AE1  009D               	movwf	29	;volatile
  5522  0AE2  0008               	return
  5523  0AE3                     __end_of_ADC_Set:	
  5524                           
  5525                           	psect	text29
  5526  0230                     __ptext29:	
  5527 ;; *************** function _Load_Main *****************
  5528 ;; Defined at:
  5529 ;;		line 40 in file "../src/OverLoad_B1.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  i               2   15[BANK0 ] int 
  5534 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5535 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5536 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5537 ;;  error           1    9[BANK0 ] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;		None               void
  5540 ;; Registers used:
  5541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5547 ;;      Params:         0       0       0       0
  5548 ;;      Locals:         0       8       0       0
  5549 ;;      Temps:          0       2       0       0
  5550 ;;      Totals:         0      10       0       0
  5551 ;;Total ram usage:       10 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    3
  5554 ;; This function calls:
  5555 ;;		___lwdiv
  5556 ;;		___wmul
  5557 ;;		_getLight_LoadGO
  5558 ;;		_getLight_Load_Status
  5559 ;;		_getMain_All_Error_Status
  5560 ;;		_getMain_All_LightsStatus
  5561 ;;		_getMain_Lights_Count
  5562 ;;		_setLoad_AH_AL_Restore
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           
  5569                           ;psect for function _Load_Main
  5570  0230                     _Load_Main:	
  5571                           
  5572                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
  5573                           
  5574                           ;incstack = 0
  5575                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5576  0230  3000               	movlw	0
  5577  0231  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  5578  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5579  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5580  0236  00D4               	movwf	??_Load_Main
  5581  0237  0854               	movf	??_Load_Main,w
  5582  0238  00D6               	movwf	Load_Main@error
  5583                           
  5584                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
  5585  0239  01DA               	clrf	Load_Main@Load_RunStatus
  5586  023A  01D9               	clrf	Load_Main@ErrorCountValue
  5587  023B  01DB               	clrf	Load_Main@LightsCount
  5588                           
  5589                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5590  023C  1683               	bsf	3,5	;RP0=1, select bank1
  5591  023D  1303               	bcf	3,6	;RP1=0, select bank1
  5592  023E  1C4A               	btfss	_Load^(0+128),0
  5593  023F  2C12               	goto	l700
  5594                           
  5595                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5596  0240  158A  2304  118A   	fcall	_getMain_All_LightsStatus
  5597  0243  3800               	iorlw	0
  5598  0244  1D03               	skipz
  5599  0245  2A49               	goto	l4951
  5600                           
  5601                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5602  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5603  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5604  0248  2A68               	goto	l4967
  5605  0249                     l4951:	
  5606                           ;OverLoad_B1.c: 47: } else {
  5607                           
  5608                           
  5609                           ;OverLoad_B1.c: 70: if (error == 0) {
  5610  0249  1283               	bcf	3,5	;RP0=0, select bank0
  5611  024A  1303               	bcf	3,6	;RP1=0, select bank0
  5612  024B  08D6               	movf	Load_Main@error,f
  5613  024C  1D03               	skipz
  5614  024D  2A65               	goto	l703
  5615                           
  5616                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5617  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5618  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5619  0250  14CA               	bsf	_Load^(0+128),1
  5620                           
  5621                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5622  0251  158A  22C3  118A   	fcall	_getLight_LoadGO
  5623  0254  3A01               	xorlw	1
  5624  0255  1D03               	skipz
  5625  0256  2A5F               	goto	l704
  5626                           
  5627                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5628  0257  1683               	bsf	3,5	;RP0=1, select bank1
  5629  0258  1303               	bcf	3,6	;RP1=0, select bank1
  5630  0259  1DCA               	btfss	_Load^(0+128),3
  5631  025A  1BCA               	btfsc	_Load^(0+128),7
  5632  025B  2A69               	goto	l702
  5633                           
  5634                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5635  025C  15CA               	bsf	_Load^(0+128),3
  5636                           
  5637                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5638  025D  01E3               	clrf	(_Load^(0+128)+25)
  5639                           
  5640                           ;OverLoad_B1.c: 77: }
  5641                           ;OverLoad_B1.c: 78: } else {
  5642  025E  2A69               	goto	l702
  5643  025F                     l704:	
  5644                           
  5645                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5646  025F  1683               	bsf	3,5	;RP0=1, select bank1
  5647  0260  1303               	bcf	3,6	;RP1=0, select bank1
  5648  0261  1FCA               	btfss	_Load^(0+128),7
  5649  0262  2A69               	goto	l702
  5650                           
  5651                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5652  0263  13CA               	bcf	_Load^(0+128),7
  5653                           
  5654                           ;OverLoad_B1.c: 81: }
  5655                           ;OverLoad_B1.c: 82: }
  5656                           ;OverLoad_B1.c: 83: } else {
  5657  0264  2A69               	goto	l702
  5658  0265                     l703:	
  5659                           
  5660                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5661  0265  1683               	bsf	3,5	;RP0=1, select bank1
  5662  0266  1303               	bcf	3,6	;RP1=0, select bank1
  5663  0267  18CA               	btfsc	_Load^(0+128),1
  5664  0268                     l4967:	
  5665                           
  5666                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5667  0268  10CA               	bcf	_Load^(0+128),1
  5668  0269                     l702:	
  5669                           
  5670                           ;OverLoad_B1.c: 86: }
  5671                           ;OverLoad_B1.c: 87: }
  5672                           ;OverLoad_B1.c: 89: }
  5673                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5674  0269  1CCA               	btfss	_Load^(0+128),1
  5675  026A  2BEB               	goto	l710
  5676                           
  5677                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5678  026B  154A               	bsf	_Load^(0+128),2
  5679                           
  5680                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5681  026C  1E4A               	btfss	_Load^(0+128),4
  5682  026D  2BE9               	goto	l711
  5683                           
  5684                           ;OverLoad_B1.c: 96: Load.Time++;
  5685  026E  3001               	movlw	1
  5686  026F  07CB               	addwf	(_Load^(0+128)+1),f
  5687  0270  1803               	skipnc
  5688  0271  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5689  0272  3000               	movlw	0
  5690  0273  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5691                           
  5692                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5693  0274  3000               	movlw	0
  5694  0275  024C               	subwf	((_Load+1)^(0+128)+1),w
  5695  0276  3002               	movlw	2
  5696  0277  1903               	skipnz
  5697  0278  024B               	subwf	(_Load^(0+128)+1),w
  5698  0279  1C03               	skipc
  5699  027A  0008               	return
  5700                           
  5701                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5702  027B  01CB               	clrf	(_Load^(0+128)+1)
  5703  027C  01CC               	clrf	((_Load+1)^(0+128)+1)
  5704                           
  5705                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5706  027D  124A               	bcf	_Load^(0+128),4
  5707                           
  5708                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5709  027E  3001               	movlw	1
  5710  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0281  00DC               	movwf	Load_Main@i
  5713  0282  3000               	movlw	0
  5714  0283  00DD               	movwf	Load_Main@i+1
  5715  0284  085D               	movf	Load_Main@i+1,w
  5716  0285  3A80               	xorlw	128
  5717  0286  00FF               	movwf	127
  5718  0287  3080               	movlw	128
  5719  0288  027F               	subwf	127,w
  5720  0289  1D03               	skipz
  5721  028A  2A8D               	goto	u6195
  5722  028B  3004               	movlw	4
  5723  028C  025C               	subwf	Load_Main@i,w
  5724  028D                     u6195:	
  5725  028D  1803               	btfsc	3,0
  5726  028E  2ACB               	goto	l4989
  5727  028F                     l4983:	
  5728                           
  5729                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5730  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5731  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5732  0291  085C               	movf	Load_Main@i,w
  5733  0292  3ED4               	addlw	(_Load+10)& (0+255)
  5734  0293  0084               	movwf	4
  5735  0294  1383               	bcf	3,7	;select IRP bank1
  5736  0295  0800               	movf	0,w
  5737  0296  00D4               	movwf	??_Load_Main
  5738  0297  01D5               	clrf	??_Load_Main+1
  5739  0298  0854               	movf	??_Load_Main,w
  5740  0299  1683               	bsf	3,5	;RP0=1, select bank1
  5741  029A  1303               	bcf	3,6	;RP1=0, select bank1
  5742  029B  07CF               	addwf	(_Load^(0+128)+5),f
  5743  029C  1803               	skipnc
  5744  029D  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5745  029E  1283               	bcf	3,5	;RP0=0, select bank0
  5746  029F  1303               	bcf	3,6	;RP1=0, select bank0
  5747  02A0  0855               	movf	??_Load_Main+1,w
  5748  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  5749  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  5750  02A3  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5751                           
  5752                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5753  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5754  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5755  02A6  085C               	movf	Load_Main@i,w
  5756  02A7  3ED9               	addlw	(_Load+15)& (0+255)
  5757  02A8  0084               	movwf	4
  5758  02A9  0800               	movf	0,w
  5759  02AA  00D4               	movwf	??_Load_Main
  5760  02AB  01D5               	clrf	??_Load_Main+1
  5761  02AC  0854               	movf	??_Load_Main,w
  5762  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  5763  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  5764  02AF  07D1               	addwf	(_Load^(0+128)+7),f
  5765  02B0  1803               	skipnc
  5766  02B1  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5767  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  5768  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  5769  02B4  0855               	movf	??_Load_Main+1,w
  5770  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  5771  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  5772  02B7  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5773  02B8  3001               	movlw	1
  5774  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5775  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5776  02BB  07DC               	addwf	Load_Main@i,f
  5777  02BC  1803               	skipnc
  5778  02BD  0ADD               	incf	Load_Main@i+1,f
  5779  02BE  3000               	movlw	0
  5780  02BF  07DD               	addwf	Load_Main@i+1,f
  5781  02C0  085D               	movf	Load_Main@i+1,w
  5782  02C1  3A80               	xorlw	128
  5783  02C2  00FF               	movwf	127
  5784  02C3  3080               	movlw	128
  5785  02C4  027F               	subwf	127,w
  5786  02C5  1D03               	skipz
  5787  02C6  2AC9               	goto	u6205
  5788  02C7  3004               	movlw	4
  5789  02C8  025C               	subwf	Load_Main@i,w
  5790  02C9                     u6205:	
  5791  02C9  1C03               	skipc
  5792  02CA  2A8F               	goto	l4983
  5793  02CB                     l4989:	
  5794                           
  5795                           ;OverLoad_B1.c: 104: }
  5796                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5797  02CB  3003               	movlw	3
  5798  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  5799  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  5800  02CE  00CD               	movwf	___lwdiv@divisor
  5801  02CF  3000               	movlw	0
  5802  02D0  00CE               	movwf	___lwdiv@divisor+1
  5803  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  5804  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  5805  02D3  0850               	movf	((_Load+1)^(0+128)+5),w
  5806  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  5807  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  5808  02D6  01D0               	clrf	___lwdiv@dividend+1
  5809  02D7  07D0               	addwf	___lwdiv@dividend+1,f
  5810  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  5811  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  5812  02DA  084F               	movf	(_Load^(0+128)+5),w
  5813  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  5814  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  5815  02DD  01CF               	clrf	___lwdiv@dividend
  5816  02DE  07CF               	addwf	___lwdiv@dividend,f
  5817  02DF  158A  25F8  118A   	fcall	___lwdiv
  5818  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5819  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5820  02E4  084E               	movf	?___lwdiv+1,w
  5821  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  5822  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  5823  02E7  01D0               	clrf	((_Load+1)^(0+128)+5)
  5824  02E8  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5825  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5826  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5827  02EB  084D               	movf	?___lwdiv,w
  5828  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  5829  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  5830  02EE  01CF               	clrf	(_Load^(0+128)+5)
  5831  02EF  07CF               	addwf	(_Load^(0+128)+5),f
  5832                           
  5833                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5834  02F0  3003               	movlw	3
  5835  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  5836  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  5837  02F3  00CD               	movwf	___lwdiv@divisor
  5838  02F4  3000               	movlw	0
  5839  02F5  00CE               	movwf	___lwdiv@divisor+1
  5840  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5841  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5842  02F8  0852               	movf	((_Load+1)^(0+128)+7),w
  5843  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5844  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5845  02FB  01D0               	clrf	___lwdiv@dividend+1
  5846  02FC  07D0               	addwf	___lwdiv@dividend+1,f
  5847  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  5848  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  5849  02FF  0851               	movf	(_Load^(0+128)+7),w
  5850  0300  1283               	bcf	3,5	;RP0=0, select bank0
  5851  0301  1303               	bcf	3,6	;RP1=0, select bank0
  5852  0302  01CF               	clrf	___lwdiv@dividend
  5853  0303  07CF               	addwf	___lwdiv@dividend,f
  5854  0304  158A  25F8  118A   	fcall	___lwdiv
  5855  0307  1283               	bcf	3,5	;RP0=0, select bank0
  5856  0308  1303               	bcf	3,6	;RP1=0, select bank0
  5857  0309  084E               	movf	?___lwdiv+1,w
  5858  030A  1683               	bsf	3,5	;RP0=1, select bank1
  5859  030B  1303               	bcf	3,6	;RP1=0, select bank1
  5860  030C  01D2               	clrf	((_Load+1)^(0+128)+7)
  5861  030D  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5862  030E  1283               	bcf	3,5	;RP0=0, select bank0
  5863  030F  1303               	bcf	3,6	;RP1=0, select bank0
  5864  0310  084D               	movf	?___lwdiv,w
  5865  0311  1683               	bsf	3,5	;RP0=1, select bank1
  5866  0312  1303               	bcf	3,6	;RP1=0, select bank1
  5867  0313  01D1               	clrf	(_Load^(0+128)+7)
  5868  0314  07D1               	addwf	(_Load^(0+128)+7),f
  5869                           
  5870                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
  5871  0315  158A  23E3  118A   	fcall	_setLoad_AH_AL_Restore
  5872                           
  5873                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
  5874  0318  1683               	bsf	3,5	;RP0=1, select bank1
  5875  0319  1303               	bcf	3,6	;RP1=0, select bank1
  5876  031A  0852               	movf	((_Load+1)^(0+128)+7),w
  5877  031B  0250               	subwf	((_Load+1)^(0+128)+5),w
  5878  031C  1D03               	skipz
  5879  031D  2B20               	goto	u6215
  5880  031E  0851               	movf	(_Load^(0+128)+7),w
  5881  031F  024F               	subwf	(_Load^(0+128)+5),w
  5882  0320                     u6215:	
  5883  0320  1C03               	skipc
  5884  0321  0008               	return
  5885                           
  5886                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
  5887  0322  0351               	decf	(_Load^(0+128)+7),w
  5888  0323  3AFF               	xorlw	255
  5889  0324  074F               	addwf	(_Load^(0+128)+5),w
  5890  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5891  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5892  0327  00D4               	movwf	??_Load_Main
  5893  0328  0854               	movf	??_Load_Main,w
  5894  0329  1683               	bsf	3,5	;RP0=1, select bank1
  5895  032A  1303               	bcf	3,6	;RP1=0, select bank1
  5896  032B  00DE               	movwf	(_Load^(0+128)+20)
  5897                           
  5898                           ;OverLoad_B1.c: 112: Load.ADH = 0;
  5899  032C  01CF               	clrf	(_Load^(0+128)+5)
  5900  032D  01D0               	clrf	((_Load+1)^(0+128)+5)
  5901                           
  5902                           ;OverLoad_B1.c: 113: Load.ADL = 0;
  5903  032E  01D1               	clrf	(_Load^(0+128)+7)
  5904  032F  01D2               	clrf	((_Load+1)^(0+128)+7)
  5905                           
  5906                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
  5907  0330  1DCA               	btfss	_Load^(0+128),3
  5908  0331  2B95               	goto	l716
  5909                           
  5910                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
  5911  0332  3002               	movlw	2
  5912  0333  0263               	subwf	(_Load^(0+128)+25),w
  5913  0334  1803               	skipnc
  5914  0335  2B95               	goto	l716
  5915                           
  5916                           ;OverLoad_B1.c: 117: Load.Count++;
  5917  0336  3001               	movlw	1
  5918  0337  1283               	bcf	3,5	;RP0=0, select bank0
  5919  0338  1303               	bcf	3,6	;RP1=0, select bank0
  5920  0339  00D4               	movwf	??_Load_Main
  5921  033A  0854               	movf	??_Load_Main,w
  5922  033B  1683               	bsf	3,5	;RP0=1, select bank1
  5923  033C  1303               	bcf	3,6	;RP1=0, select bank1
  5924  033D  07E3               	addwf	(_Load^(0+128)+25),f
  5925                           
  5926                           ;OverLoad_B1.c: 122: Load_RunStatus = getLight_Load_Status();
  5927  033E  158A  22C9  118A   	fcall	_getLight_Load_Status
  5928  0341  1283               	bcf	3,5	;RP0=0, select bank0
  5929  0342  1303               	bcf	3,6	;RP1=0, select bank0
  5930  0343  00D4               	movwf	??_Load_Main
  5931  0344  0854               	movf	??_Load_Main,w
  5932  0345  00DA               	movwf	Load_Main@Load_RunStatus
  5933                           
  5934                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
  5935  0346  158A  2317  118A   	fcall	_getMain_Lights_Count
  5936  0349  1283               	bcf	3,5	;RP0=0, select bank0
  5937  034A  1303               	bcf	3,6	;RP1=0, select bank0
  5938  034B  00D4               	movwf	??_Load_Main
  5939  034C  0854               	movf	??_Load_Main,w
  5940  034D  00DB               	movwf	Load_Main@LightsCount
  5941                           
  5942                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
  5943  034E  1683               	bsf	3,5	;RP0=1, select bank1
  5944  034F  1303               	bcf	3,6	;RP1=0, select bank1
  5945  0350  0863               	movf	(_Load^(0+128)+25),w
  5946  0351  3A01               	xorlw	1
  5947  0352  1D03               	skipz
  5948  0353  2B56               	goto	l5015
  5949                           
  5950                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(20*1.7);
  5951  0354  3022               	movlw	34
  5952  0355  2B63               	goto	L14
  5953  0356                     l5015:	
  5954                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
  5955                           
  5956  0356  0863               	movf	(_Load^(0+128)+25),w
  5957  0357  3A02               	xorlw	2
  5958  0358  1D03               	skipz
  5959  0359  2B95               	goto	l716
  5960                           
  5961                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
  5962  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5963  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5964  035C  085B               	movf	Load_Main@LightsCount,w
  5965  035D  3A01               	xorlw	1
  5966  035E  1D03               	skipz
  5967  035F  2B66               	goto	l5021
  5968                           
  5969                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(8*1.7);
  5970  0360  300D               	movlw	13
  5971  0361  1683               	bsf	3,5	;RP0=1, select bank1
  5972  0362  1303               	bcf	3,6	;RP1=0, select bank1
  5973  0363                     L14:	
  5974  0363  00E1               	movwf	(_Load^(0+128)+23)
  5975  0364  3000               	movlw	0
  5976  0365  2B94               	goto	L15
  5977  0366                     l5021:	
  5978                           ;OverLoad_B1.c: 132: } else {
  5979                           
  5980                           
  5981                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
  5982  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5983  0367  08DA               	movf	Load_Main@Load_RunStatus,f
  5984  0368  1D03               	skipz
  5985  0369  2B87               	goto	l5025
  5986                           
  5987                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  5988  036A  085B               	movf	Load_Main@LightsCount,w
  5989  036B  00D4               	movwf	??_Load_Main
  5990  036C  01D5               	clrf	??_Load_Main+1
  5991  036D  0854               	movf	??_Load_Main,w
  5992  036E  00CD               	movwf	___wmul@multiplier
  5993  036F  0855               	movf	??_Load_Main+1,w
  5994  0370  00CE               	movwf	___wmul@multiplier+1
  5995  0371  300D               	movlw	13
  5996  0372  00CF               	movwf	___wmul@multiplicand
  5997  0373  3000               	movlw	0
  5998  0374  00D0               	movwf	___wmul@multiplicand+1
  5999  0375  158A  2531  118A   	fcall	___wmul
  6000  0378  1283               	bcf	3,5	;RP0=0, select bank0
  6001  0379  1303               	bcf	3,6	;RP1=0, select bank0
  6002  037A  084E               	movf	?___wmul+1,w
  6003  037B  1683               	bsf	3,5	;RP0=1, select bank1
  6004  037C  1303               	bcf	3,6	;RP1=0, select bank1
  6005  037D  01E2               	clrf	((_Load+1)^(0+128)+23)
  6006  037E  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6007  037F  1283               	bcf	3,5	;RP0=0, select bank0
  6008  0380  1303               	bcf	3,6	;RP1=0, select bank0
  6009  0381  084D               	movf	?___wmul,w
  6010  0382  1683               	bsf	3,5	;RP0=1, select bank1
  6011  0383  1303               	bcf	3,6	;RP1=0, select bank1
  6012  0384  01E1               	clrf	(_Load^(0+128)+23)
  6013  0385  07E1               	addwf	(_Load^(0+128)+23),f
  6014                           
  6015                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
  6016  0386  2B95               	goto	l716
  6017  0387                     l5025:	
  6018  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6019  0388  085A               	movf	Load_Main@Load_RunStatus,w
  6020  0389  3A01               	xorlw	1
  6021  038A  1D03               	skipz
  6022  038B  2B95               	goto	l716
  6023                           
  6024                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6025  038C  1683               	bsf	3,5	;RP0=1, select bank1
  6026  038D  1303               	bcf	3,6	;RP1=0, select bank1
  6027  038E  0853               	movf	(_Load^(0+128)+9),w
  6028  038F  3E0D               	addlw	13
  6029  0390  00E1               	movwf	(_Load^(0+128)+23)
  6030  0391  3000               	movlw	0
  6031  0392  1803               	skipnc
  6032  0393  3001               	movlw	1
  6033  0394                     L15:	
  6034  0394  00E2               	movwf	(_Load^(0+128)+24)
  6035  0395                     l716:	
  6036                           
  6037                           ;OverLoad_B1.c: 137: }
  6038                           ;OverLoad_B1.c: 138: }
  6039                           ;OverLoad_B1.c: 139: }
  6040                           ;OverLoad_B1.c: 140: }
  6041                           ;OverLoad_B1.c: 141: }
  6042                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
  6043  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6044  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6045  0397  085E               	movf	(_Load^(0+128)+20),w
  6046  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6047  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6048  039A  00D4               	movwf	??_Load_Main
  6049  039B  01D5               	clrf	??_Load_Main+1
  6050  039C  1683               	bsf	3,5	;RP0=1, select bank1
  6051  039D  1303               	bcf	3,6	;RP1=0, select bank1
  6052  039E  0862               	movf	((_Load+1)^(0+128)+23),w
  6053  039F  1283               	bcf	3,5	;RP0=0, select bank0
  6054  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  6055  03A1  0255               	subwf	??_Load_Main+1,w
  6056  03A2  1D03               	skipz
  6057  03A3  2BAA               	goto	u6295
  6058  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  6059  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  6060  03A6  0861               	movf	(_Load^(0+128)+23),w
  6061  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  6062  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  6063  03A9  0254               	subwf	??_Load_Main,w
  6064  03AA                     u6295:	
  6065  03AA  1C03               	skipc
  6066  03AB  2BCB               	goto	l5043
  6067                           
  6068                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6069  03AC  085B               	movf	Load_Main@LightsCount,w
  6070  03AD  3A01               	xorlw	1
  6071  03AE  1903               	skipnz
  6072  03AF  2BB2               	goto	l5033
  6073  03B0  3003               	movlw	3
  6074  03B1  2BB3               	goto	L16
  6075  03B2                     l5033:	
  6076  03B2  3002               	movlw	2
  6077  03B3                     L16:	
  6078  03B3  00D7               	movwf	_Load_Main$2389
  6079  03B4  3000               	movlw	0
  6080  03B5  00D8               	movwf	_Load_Main$2389+1
  6081  03B6  0857               	movf	_Load_Main$2389,w
  6082  03B7  00D4               	movwf	??_Load_Main
  6083  03B8  0854               	movf	??_Load_Main,w
  6084  03B9  00D9               	movwf	Load_Main@ErrorCountValue
  6085                           
  6086                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
  6087  03BA  3001               	movlw	1
  6088  03BB  00D4               	movwf	??_Load_Main
  6089  03BC  0854               	movf	??_Load_Main,w
  6090  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  6091  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  6092  03BF  07E4               	addwf	(_Load^(0+128)+26),f
  6093                           
  6094                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
  6095  03C0  0864               	movf	(_Load^(0+128)+26),w
  6096  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6097  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6098  03C3  0259               	subwf	Load_Main@ErrorCountValue,w
  6099  03C4  1803               	skipnc
  6100  03C5  0008               	return
  6101                           
  6102                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
  6103  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6104  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6105  03C8  01E4               	clrf	(_Load^(0+128)+26)
  6106                           
  6107                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
  6108  03C9  16CA               	bsf	_Load^(0+128),5
  6109                           
  6110                           ;OverLoad_B1.c: 170: }
  6111                           ;OverLoad_B1.c: 171: } else {
  6112  03CA  0008               	return
  6113  03CB                     l5043:	
  6114                           
  6115                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
  6116  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  6117  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  6118  03CD  01E4               	clrf	(_Load^(0+128)+26)
  6119                           
  6120                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
  6121  03CE  1DCA               	btfss	_Load^(0+128),3
  6122  03CF  0008               	return
  6123                           
  6124                           ;OverLoad_B1.c: 174: Load.SafeCount++;
  6125  03D0  3001               	movlw	1
  6126  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  6127  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  6128  03D3  00D4               	movwf	??_Load_Main
  6129  03D4  0854               	movf	??_Load_Main,w
  6130  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  6131  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  6132  03D7  07E5               	addwf	(_Load^(0+128)+27),f
  6133                           
  6134                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
  6135  03D8  3003               	movlw	3
  6136  03D9  0265               	subwf	(_Load^(0+128)+27),w
  6137  03DA  1C03               	skipc
  6138  03DB  0008               	return
  6139                           
  6140                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
  6141  03DC  01E5               	clrf	(_Load^(0+128)+27)
  6142                           
  6143                           ;OverLoad_B1.c: 177: Load.OK = 1;
  6144  03DD  17CA               	bsf	_Load^(0+128),7
  6145                           
  6146                           ;OverLoad_B1.c: 178: Load.Run = 0;
  6147  03DE  11CA               	bcf	_Load^(0+128),3
  6148                           
  6149                           ;OverLoad_B1.c: 179: Load.Count = 0;
  6150  03DF  01E3               	clrf	(_Load^(0+128)+25)
  6151                           
  6152                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
  6153  03E0  085E               	movf	(_Load^(0+128)+20),w
  6154  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  6155  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  6156  03E3  00D4               	movwf	??_Load_Main
  6157  03E4  0854               	movf	??_Load_Main,w
  6158  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  6159  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  6160  03E7  00D3               	movwf	(_Load^(0+128)+9)
  6161                           
  6162                           ;OverLoad_B1.c: 184: }
  6163                           ;OverLoad_B1.c: 185: }
  6164                           ;OverLoad_B1.c: 208: }
  6165                           ;OverLoad_B1.c: 209: }
  6166                           ;OverLoad_B1.c: 210: }
  6167                           ;OverLoad_B1.c: 211: } else {
  6168  03E8  0008               	return
  6169  03E9                     l711:	
  6170                           
  6171                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
  6172  03E9  164A               	bsf	_Load^(0+128),4
  6173                           
  6174                           ;OverLoad_B1.c: 213: }
  6175                           ;OverLoad_B1.c: 214: } else {
  6176  03EA  0008               	return
  6177  03EB                     l710:	
  6178                           
  6179                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
  6180  03EB  1D4A               	btfss	_Load^(0+128),2
  6181  03EC  2BFF               	goto	l5079
  6182                           
  6183                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
  6184  03ED  114A               	bcf	_Load^(0+128),2
  6185                           
  6186                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
  6187  03EE  124A               	bcf	_Load^(0+128),4
  6188                           
  6189                           ;OverLoad_B1.c: 220: Load.Time = 0;
  6190  03EF  01CB               	clrf	(_Load^(0+128)+1)
  6191  03F0  01CC               	clrf	((_Load+1)^(0+128)+1)
  6192                           
  6193                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
  6194  03F1  158A  23E3  118A   	fcall	_setLoad_AH_AL_Restore
  6195                           
  6196                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
  6197  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  6198  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  6199  03F6  01E4               	clrf	(_Load^(0+128)+26)
  6200                           
  6201                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
  6202  03F7  01E5               	clrf	(_Load^(0+128)+27)
  6203                           
  6204                           ;OverLoad_B1.c: 226: Load.ADH = 0;
  6205  03F8  01CF               	clrf	(_Load^(0+128)+5)
  6206  03F9  01D0               	clrf	((_Load+1)^(0+128)+5)
  6207                           
  6208                           ;OverLoad_B1.c: 227: Load.ADL = 0;
  6209  03FA  01D1               	clrf	(_Load^(0+128)+7)
  6210  03FB  01D2               	clrf	((_Load+1)^(0+128)+7)
  6211                           
  6212                           ;OverLoad_B1.c: 233: Load.Run = 0;
  6213  03FC  11CA               	bcf	_Load^(0+128),3
  6214                           
  6215                           ;OverLoad_B1.c: 234: Load.Count = 0;
  6216  03FD  01E3               	clrf	(_Load^(0+128)+25)
  6217                           
  6218                           ;OverLoad_B1.c: 235: Load.OK = 0;
  6219  03FE  13CA               	bcf	_Load^(0+128),7
  6220  03FF                     l5079:	
  6221                           
  6222                           ;OverLoad_B1.c: 257: }
  6223                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
  6224  03FF  1ECA               	btfss	_Load^(0+128),5
  6225  0400  0008               	return
  6226                           
  6227                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
  6228  0401  3001               	movlw	1
  6229  0402  07CD               	addwf	(_Load^(0+128)+3),f
  6230  0403  1803               	skipnc
  6231  0404  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6232  0405  3000               	movlw	0
  6233  0406  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6234                           
  6235                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
  6236  0407  3001               	movlw	1
  6237  0408  024E               	subwf	((_Load+1)^(0+128)+3),w
  6238  0409  30F4               	movlw	244
  6239  040A  1903               	skipnz
  6240  040B  024D               	subwf	(_Load^(0+128)+3),w
  6241  040C  1C03               	skipc
  6242  040D  0008               	return
  6243                           
  6244                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
  6245  040E  01CD               	clrf	(_Load^(0+128)+3)
  6246  040F  01CE               	clrf	((_Load+1)^(0+128)+3)
  6247                           
  6248                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
  6249  0410  12CA               	bcf	_Load^(0+128),5
  6250                           
  6251                           ;OverLoad_B1.c: 263: }
  6252                           ;OverLoad_B1.c: 264: }
  6253                           ;OverLoad_B1.c: 265: }
  6254                           ;OverLoad_B1.c: 266: } else {
  6255  0411  0008               	return
  6256  0412                     l700:	
  6257                           
  6258                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
  6259  0412  1283               	bcf	3,5	;RP0=0, select bank0
  6260  0413  1303               	bcf	3,6	;RP1=0, select bank0
  6261  0414  1C25               	btfss	_myMain,0
  6262  0415  0008               	return
  6263                           
  6264                           ;OverLoad_B1.c: 268: Load.Enable = 1;
  6265  0416  1683               	bsf	3,5	;RP0=1, select bank1
  6266  0417  1303               	bcf	3,6	;RP1=0, select bank1
  6267  0418  144A               	bsf	_Load^(0+128),0
  6268  0419  0008               	return
  6269  041A                     __end_of_Load_Main:	
  6270                           
  6271                           	psect	text30
  6272  0B17                     __ptext30:	
  6273 ;; *************** function _getMain_Lights_Count *****************
  6274 ;; Defined at:
  6275 ;;		line 459 in file "../src/Main_B1.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  status1         1    5[COMMON] unsigned char 
  6280 ;;  count           1    4[COMMON] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      unsigned char 
  6283 ;; Registers used:
  6284 ;;		wreg, status,2
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6290 ;;      Params:         0       0       0       0
  6291 ;;      Locals:         2       0       0       0
  6292 ;;      Temps:          0       0       0       0
  6293 ;;      Totals:         2       0       0       0
  6294 ;;Total ram usage:        2 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    2
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_Load_Main
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _getMain_Lights_Count
  6306  0B17                     _getMain_Lights_Count:	
  6307                           
  6308                           ;Main_B1.c: 460: char count = 0;
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6312  0B17  01F4               	clrf	getMain_Lights_Count@count
  6313                           
  6314                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6315  0B18  3000               	movlw	0
  6316  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  6317  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  6318  0B1B  1940               	btfsc	_Lights1,2
  6319  0B1C  3001               	movlw	1
  6320  0B1D  00F5               	movwf	getMain_Lights_Count@status1
  6321                           
  6322                           ;Main_B1.c: 487: return count = status1;
  6323  0B1E  0875               	movf	getMain_Lights_Count@status1,w
  6324  0B1F  00F4               	movwf	getMain_Lights_Count@count
  6325  0B20  0008               	return
  6326  0B21                     __end_of_getMain_Lights_Count:	
  6327                           
  6328                           	psect	text31
  6329  0AC9                     __ptext31:	
  6330 ;; *************** function _getLight_Load_Status *****************
  6331 ;; Defined at:
  6332 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;		None
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  loadstatus      1    4[COMMON] unsigned char 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      unsigned char 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6346 ;;      Params:         0       0       0       0
  6347 ;;      Locals:         1       0       0       0
  6348 ;;      Temps:          0       0       0       0
  6349 ;;      Totals:         1       0       0       0
  6350 ;;Total ram usage:        1 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    2
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_Load_Main
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           
  6361                           ;psect for function _getLight_Load_Status
  6362  0AC9                     _getLight_Load_Status:	
  6363                           
  6364                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6368  0AC9  3000               	movlw	0
  6369  0ACA  18F7               	btfsc	_Light,1
  6370  0ACB  3001               	movlw	1
  6371  0ACC  00F4               	movwf	getLight_Load_Status@loadstatus
  6372                           
  6373                           ;TriacRelay_B1.c: 407: return loadstatus;
  6374  0ACD  0874               	movf	getLight_Load_Status@loadstatus,w
  6375  0ACE  0008               	return
  6376  0ACF                     __end_of_getLight_Load_Status:	
  6377                           
  6378                           	psect	text32
  6379  0AC3                     __ptext32:	
  6380 ;; *************** function _getLight_LoadGO *****************
  6381 ;; Defined at:
  6382 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  loadgo          1    4[COMMON] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      unsigned char 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6396 ;;      Params:         0       0       0       0
  6397 ;;      Locals:         1       0       0       0
  6398 ;;      Temps:          0       0       0       0
  6399 ;;      Totals:         1       0       0       0
  6400 ;;Total ram usage:        1 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    2
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_Load_Main
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           
  6411                           ;psect for function _getLight_LoadGO
  6412  0AC3                     _getLight_LoadGO:	
  6413                           
  6414                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6418  0AC3  3000               	movlw	0
  6419  0AC4  1877               	btfsc	_Light,0
  6420  0AC5  3001               	movlw	1
  6421  0AC6  00F4               	movwf	getLight_LoadGO@loadgo
  6422                           
  6423                           ;TriacRelay_B1.c: 402: return loadgo;
  6424  0AC7  0874               	movf	getLight_LoadGO@loadgo,w
  6425  0AC8  0008               	return
  6426  0AC9                     __end_of_getLight_LoadGO:	
  6427                           
  6428                           	psect	text33
  6429  0D31                     __ptext33:	
  6430 ;; *************** function ___wmul *****************
  6431 ;; Defined at:
  6432 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6435 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;  product         2    4[COMMON] unsigned int 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  2    0[BANK0 ] unsigned int 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6447 ;;      Params:         0       4       0       0
  6448 ;;      Locals:         2       0       0       0
  6449 ;;      Temps:          0       0       0       0
  6450 ;;      Totals:         2       4       0       0
  6451 ;;Total ram usage:        6 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    2
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_Load_Main
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function ___wmul
  6463  0D31                     ___wmul:	
  6464                           
  6465                           ;incstack = 0
  6466                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6467  0D31  01F4               	clrf	___wmul@product
  6468  0D32  01F5               	clrf	___wmul@product+1
  6469  0D33                     l4729:	
  6470  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  6471  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  6472  0D35  1C4D               	btfss	___wmul@multiplier,0
  6473  0D36  2D3D               	goto	l1384
  6474  0D37  084F               	movf	___wmul@multiplicand,w
  6475  0D38  07F4               	addwf	___wmul@product,f
  6476  0D39  1803               	skipnc
  6477  0D3A  0AF5               	incf	___wmul@product+1,f
  6478  0D3B  0850               	movf	___wmul@multiplicand+1,w
  6479  0D3C  07F5               	addwf	___wmul@product+1,f
  6480  0D3D                     l1384:	
  6481  0D3D  3001               	movlw	1
  6482  0D3E                     u5635:	
  6483  0D3E  1003               	clrc
  6484  0D3F  0DCF               	rlf	___wmul@multiplicand,f
  6485  0D40  0DD0               	rlf	___wmul@multiplicand+1,f
  6486  0D41  3EFF               	addlw	-1
  6487  0D42  1D03               	skipz
  6488  0D43  2D3E               	goto	u5635
  6489  0D44  3001               	movlw	1
  6490  0D45                     u5645:	
  6491  0D45  1003               	clrc
  6492  0D46  0CCE               	rrf	___wmul@multiplier+1,f
  6493  0D47  0CCD               	rrf	___wmul@multiplier,f
  6494  0D48  3EFF               	addlw	-1
  6495  0D49  1D03               	skipz
  6496  0D4A  2D45               	goto	u5645
  6497  0D4B  084E               	movf	___wmul@multiplier+1,w
  6498  0D4C  044D               	iorwf	___wmul@multiplier,w
  6499  0D4D  1D03               	skipz
  6500  0D4E  2D33               	goto	l4729
  6501  0D4F  0875               	movf	___wmul@product+1,w
  6502  0D50  01CE               	clrf	?___wmul+1
  6503  0D51  07CE               	addwf	?___wmul+1,f
  6504  0D52  0874               	movf	___wmul@product,w
  6505  0D53  01CD               	clrf	?___wmul
  6506  0D54  07CD               	addwf	?___wmul,f
  6507  0D55  0008               	return
  6508  0D56                     __end_of___wmul:	
  6509                           
  6510                           	psect	text34
  6511  0DF8                     __ptext34:	
  6512 ;; *************** function ___lwdiv *****************
  6513 ;; Defined at:
  6514 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  divisor         2    0[BANK0 ] unsigned int 
  6517 ;;  dividend        2    2[BANK0 ] unsigned int 
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;  quotient        2    5[BANK0 ] unsigned int 
  6520 ;;  counter         1    4[BANK0 ] unsigned char 
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  2    0[BANK0 ] unsigned int 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6530 ;;      Params:         0       4       0       0
  6531 ;;      Locals:         0       3       0       0
  6532 ;;      Temps:          1       0       0       0
  6533 ;;      Totals:         1       7       0       0
  6534 ;;Total ram usage:        8 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    2
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		_Load_Main
  6541 ;;		_getPIR_AD
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function ___lwdiv
  6547  0DF8                     ___lwdiv:	
  6548                           
  6549                           ;incstack = 0
  6550                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6551  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  6552  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  6553  0DFA  01D2               	clrf	___lwdiv@quotient
  6554  0DFB  01D3               	clrf	___lwdiv@quotient+1
  6555  0DFC  084E               	movf	___lwdiv@divisor+1,w
  6556  0DFD  044D               	iorwf	___lwdiv@divisor,w
  6557  0DFE  1903               	skipnz
  6558  0DFF  2E31               	goto	l4761
  6559  0E00  01D1               	clrf	___lwdiv@counter
  6560  0E01  0AD1               	incf	___lwdiv@counter,f
  6561  0E02                     l4749:	
  6562  0E02  1BCE               	btfsc	___lwdiv@divisor+1,7
  6563  0E03  2E10               	goto	l4751
  6564  0E04  3001               	movlw	1
  6565  0E05                     u5675:	
  6566  0E05  1003               	clrc
  6567  0E06  0DCD               	rlf	___lwdiv@divisor,f
  6568  0E07  0DCE               	rlf	___lwdiv@divisor+1,f
  6569  0E08  3EFF               	addlw	-1
  6570  0E09  1D03               	skipz
  6571  0E0A  2E05               	goto	u5675
  6572  0E0B  3001               	movlw	1
  6573  0E0C  00F4               	movwf	??___lwdiv
  6574  0E0D  0874               	movf	??___lwdiv,w
  6575  0E0E  07D1               	addwf	___lwdiv@counter,f
  6576  0E0F  2E02               	goto	l4749
  6577  0E10                     l4751:	
  6578  0E10  3001               	movlw	1
  6579  0E11                     u5695:	
  6580  0E11  1003               	clrc
  6581  0E12  0DD2               	rlf	___lwdiv@quotient,f
  6582  0E13  0DD3               	rlf	___lwdiv@quotient+1,f
  6583  0E14  3EFF               	addlw	-1
  6584  0E15  1D03               	skipz
  6585  0E16  2E11               	goto	u5695
  6586  0E17  084E               	movf	___lwdiv@divisor+1,w
  6587  0E18  0250               	subwf	___lwdiv@dividend+1,w
  6588  0E19  1D03               	skipz
  6589  0E1A  2E1D               	goto	u5705
  6590  0E1B  084D               	movf	___lwdiv@divisor,w
  6591  0E1C  024F               	subwf	___lwdiv@dividend,w
  6592  0E1D                     u5705:	
  6593  0E1D  1C03               	skipc
  6594  0E1E  2E26               	goto	l4757
  6595  0E1F  084D               	movf	___lwdiv@divisor,w
  6596  0E20  02CF               	subwf	___lwdiv@dividend,f
  6597  0E21  084E               	movf	___lwdiv@divisor+1,w
  6598  0E22  1C03               	skipc
  6599  0E23  03D0               	decf	___lwdiv@dividend+1,f
  6600  0E24  02D0               	subwf	___lwdiv@dividend+1,f
  6601  0E25  1452               	bsf	___lwdiv@quotient,0
  6602  0E26                     l4757:	
  6603  0E26  3001               	movlw	1
  6604  0E27                     u5715:	
  6605  0E27  1003               	clrc
  6606  0E28  0CCE               	rrf	___lwdiv@divisor+1,f
  6607  0E29  0CCD               	rrf	___lwdiv@divisor,f
  6608  0E2A  3EFF               	addlw	-1
  6609  0E2B  1D03               	skipz
  6610  0E2C  2E27               	goto	u5715
  6611  0E2D  3001               	movlw	1
  6612  0E2E  02D1               	subwf	___lwdiv@counter,f
  6613  0E2F  1D03               	btfss	3,2
  6614  0E30  2E10               	goto	l4751
  6615  0E31                     l4761:	
  6616  0E31  0853               	movf	___lwdiv@quotient+1,w
  6617  0E32  01CE               	clrf	?___lwdiv+1
  6618  0E33  07CE               	addwf	?___lwdiv+1,f
  6619  0E34  0852               	movf	___lwdiv@quotient,w
  6620  0E35  01CD               	clrf	?___lwdiv
  6621  0E36  07CD               	addwf	?___lwdiv,f
  6622  0E37  0008               	return
  6623  0E38                     __end_of___lwdiv:	
  6624                           
  6625                           	psect	text35
  6626  0AA3                     __ptext35:	
  6627 ;; *************** function _Load_Initialization *****************
  6628 ;; Defined at:
  6629 ;;		line 9 in file "../src/OverLoad_B1.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6643 ;;      Params:         0       0       0       0
  6644 ;;      Locals:         0       0       0       0
  6645 ;;      Temps:          0       0       0       0
  6646 ;;      Totals:         0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    3
  6650 ;; This function calls:
  6651 ;;		_setLoad_AH_AL_Restore
  6652 ;; This function is called by:
  6653 ;;		_main
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _Load_Initialization
  6659  0AA3                     _Load_Initialization:	
  6660                           
  6661                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6665  0AA3  158A  23E3         	fcall	_setLoad_AH_AL_Restore
  6666  0AA5  0008               	return
  6667  0AA6                     __end_of_Load_Initialization:	
  6668                           
  6669                           	psect	text36
  6670  0BE3                     __ptext36:	
  6671 ;; *************** function _setLoad_AH_AL_Restore *****************
  6672 ;; Defined at:
  6673 ;;		line 294 in file "../src/OverLoad_B1.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  i               1    5[COMMON] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6687 ;;      Params:         0       0       0       0
  6688 ;;      Locals:         1       0       0       0
  6689 ;;      Temps:          1       0       0       0
  6690 ;;      Totals:         2       0       0       0
  6691 ;;Total ram usage:        2 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    2
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_Load_Initialization
  6698 ;;		_Load_Main
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _setLoad_AH_AL_Restore
  6704  0BE3                     _setLoad_AH_AL_Restore:	
  6705                           
  6706                           ;OverLoad_B1.c: 295: char i;
  6707                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
  6708                           
  6709                           ;incstack = 0
  6710                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6711  0BE3  01F5               	clrf	setLoad_AH_AL_Restore@i
  6712  0BE4                     L17:	
  6713  0BE4  3005               	movlw	5
  6714  0BE5  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6715  0BE6  1803               	btfsc	3,0
  6716  0BE7  0008               	return
  6717                           
  6718                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
  6719  0BE8  0875               	movf	setLoad_AH_AL_Restore@i,w
  6720  0BE9  3ED4               	addlw	(_Load+10)& (0+255)
  6721  0BEA  0084               	movwf	4
  6722  0BEB  1383               	bcf	3,7	;select IRP bank1
  6723  0BEC  0180               	clrf	0
  6724                           
  6725                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xff;
  6726  0BED  30FF               	movlw	255
  6727  0BEE  00F4               	movwf	??_setLoad_AH_AL_Restore
  6728  0BEF  0875               	movf	setLoad_AH_AL_Restore@i,w
  6729  0BF0  3ED9               	addlw	(_Load+15)& (0+255)
  6730  0BF1  0084               	movwf	4
  6731  0BF2  0874               	movf	??_setLoad_AH_AL_Restore,w
  6732  0BF3  0080               	movwf	0
  6733  0BF4  3001               	movlw	1
  6734  0BF5  00F4               	movwf	??_setLoad_AH_AL_Restore
  6735  0BF6  0874               	movf	??_setLoad_AH_AL_Restore,w
  6736  0BF7  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6737  0BF8  2BE4               	goto	L17
  6738  0BF9                     __end_of_setLoad_AH_AL_Restore:	
  6739                           
  6740                           	psect	text37
  6741  0CAD                     __ptext37:	
  6742 ;; *************** function _Lights_Main *****************
  6743 ;; Defined at:
  6744 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;		None               void
  6751 ;; Registers used:
  6752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6758 ;;      Params:         0       0       0       0
  6759 ;;      Locals:         0       0       0       0
  6760 ;;      Temps:          0       0       0       0
  6761 ;;      Totals:         0       0       0       0
  6762 ;;Total ram usage:        0 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    6
  6765 ;; This function calls:
  6766 ;;		_Lights_Control
  6767 ;;		_getLoad_OK
  6768 ;;		_getMain_All_Error_Status
  6769 ;;		_getMain_All_LightsStatus
  6770 ;;		_setLights_Main
  6771 ;; This function is called by:
  6772 ;;		_main
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function _Lights_Main
  6778  0CAD                     _Lights_Main:	
  6779                           
  6780                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6784  0CAD  1C77               	btfss	_Light,0
  6785  0CAE  2CC3               	goto	l5097
  6786                           
  6787                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6788  0CAF  158A  22EB  158A   	fcall	_getLoad_OK
  6789  0CB2  3A01               	xorlw	1
  6790  0CB3  1903               	skipnz
  6791  0CB4  2CC2               	goto	l1263
  6792  0CB5  3000               	movlw	0
  6793  0CB6  158A  25BA  158A   	fcall	_getMain_All_Error_Status
  6794  0CB9  3800               	iorlw	0
  6795  0CBA  1D03               	skipz
  6796  0CBB  2CC2               	goto	l1263
  6797  0CBC  158A  2304  158A   	fcall	_getMain_All_LightsStatus
  6798  0CBF  3800               	iorlw	0
  6799  0CC0  1D03               	skipz
  6800  0CC1  2CC3               	goto	l5097
  6801  0CC2                     l1263:	
  6802                           
  6803                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6804  0CC2  1077               	bcf	_Light,0
  6805  0CC3                     l5097:	
  6806                           
  6807                           ;TriacRelay_B1.c: 68: }
  6808                           ;TriacRelay_B1.c: 69: }
  6809                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6810  0CC3  3001               	movlw	1
  6811  0CC4  158A  2556  158A   	fcall	_setLights_Main
  6812                           
  6813                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6814  0CC7  3001               	movlw	1
  6815  0CC8  118A  260A         	fcall	_Lights_Control
  6816  0CCA  0008               	return
  6817  0CCB                     __end_of_Lights_Main:	
  6818                           
  6819                           	psect	text38
  6820  0D56                     __ptext38:	
  6821 ;; *************** function _setLights_Main *****************
  6822 ;; Defined at:
  6823 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  lights          1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  lights          1    5[BANK0 ] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;		None               void
  6830 ;; Registers used:
  6831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6837 ;;      Params:         0       0       0       0
  6838 ;;      Locals:         0       1       0       0
  6839 ;;      Temps:          0       0       0       0
  6840 ;;      Totals:         0       1       0       0
  6841 ;;Total ram usage:        1 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    5
  6844 ;; This function calls:
  6845 ;;		_LightsPointSelect
  6846 ;;		_getLights_Allow_Condition
  6847 ;;		_setLights
  6848 ;; This function is called by:
  6849 ;;		_Lights_Main
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _setLights_Main
  6855  0D56                     _setLights_Main:	
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6859                           ;setLights_Main@lights stored from wreg
  6860  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  6861  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  6862  0D58  00D2               	movwf	setLights_Main@lights
  6863                           
  6864                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6865  0D59  0852               	movf	setLights_Main@lights,w
  6866  0D5A  158A  230D  158A   	fcall	_LightsPointSelect
  6867                           
  6868                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6869  0D5D  0878               	movf	_Lights,w
  6870  0D5E  0084               	movwf	4
  6871  0D5F  1383               	bcf	3,7	;select IRP bank0
  6872  0D60  1880               	btfsc	0,1
  6873  0D61  0008               	return
  6874                           
  6875                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6876  0D62  0878               	movf	_Lights,w
  6877  0D63  0084               	movwf	4
  6878  0D64  1D80               	btfss	0,3
  6879  0D65  0008               	return
  6880                           
  6881                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6882  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6883  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6884  0D68  0852               	movf	setLights_Main@lights,w
  6885  0D69  158A  23F9  158A   	fcall	_getLights_Allow_Condition
  6886  0D6C  3800               	iorlw	0
  6887  0D6D  1D03               	skipz
  6888  0D6E  0008               	return
  6889                           
  6890                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6891  0D6F  0878               	movf	_Lights,w
  6892  0D70  0084               	movwf	4
  6893  0D71  1383               	bcf	3,7	;select IRP bank0
  6894  0D72  1180               	bcf	0,3
  6895                           
  6896                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6897  0D73  0878               	movf	_Lights,w
  6898  0D74  0084               	movwf	4
  6899  0D75  1E00               	btfss	0,4
  6900  0D76  2D7F               	goto	l4697
  6901                           
  6902                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6903  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  6904  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  6905  0D79  01CF               	clrf	setLights@status
  6906  0D7A  0ACF               	incf	setLights@status,f
  6907  0D7B  0852               	movf	setLights_Main@lights,w
  6908  0D7C  118A  268D         	fcall	_setLights
  6909                           
  6910                           ;TriacRelay_B1.c: 99: } else {
  6911  0D7E  0008               	return
  6912  0D7F                     l4697:	
  6913                           
  6914                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6915  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  6916  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  6917  0D81  01CF               	clrf	setLights@status
  6918  0D82  0852               	movf	setLights_Main@lights,w
  6919  0D83  118A  268D         	fcall	_setLights
  6920  0D85  0008               	return
  6921  0D86                     __end_of_setLights_Main:	
  6922                           
  6923                           	psect	text39
  6924  068D                     __ptext39:	
  6925 ;; *************** function _setLights *****************
  6926 ;; Defined at:
  6927 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  lights          1    wreg     unsigned char 
  6930 ;;  status          1    2[BANK0 ] unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  lights          1    4[BANK0 ] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6942 ;;      Params:         0       1       0       0
  6943 ;;      Locals:         0       1       0       0
  6944 ;;      Temps:          0       1       0       0
  6945 ;;      Totals:         0       3       0       0
  6946 ;;Total ram usage:        3 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    4
  6949 ;; This function calls:
  6950 ;;		_setLED
  6951 ;;		_setLights_Line
  6952 ;; This function is called by:
  6953 ;;		_setLights_Main
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _setLights
  6959  068D                     _setLights:	
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6963                           ;setLights@lights stored from wreg
  6964  068D  1283               	bcf	3,5	;RP0=0, select bank0
  6965  068E  1303               	bcf	3,6	;RP1=0, select bank0
  6966  068F  00D1               	movwf	setLights@lights
  6967                           
  6968                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6969  0690  084F               	movf	setLights@status,w
  6970  0691  3A01               	xorlw	1
  6971  0692  1D03               	skipz
  6972  0693  2ED0               	goto	l4529
  6973                           
  6974                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6975  0694  0851               	movf	setLights@lights,w
  6976  0695  3A02               	xorlw	2
  6977  0696  1D03               	skipz
  6978  0697  2EA5               	goto	l4511
  6979                           
  6980                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  6981  0698  01CD               	clrf	setLED@command
  6982  0699  3001               	movlw	1
  6983  069A  158A  2735  118A   	fcall	_setLED
  6984                           
  6985                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  6986  069D  1283               	bcf	3,5	;RP0=0, select bank0
  6987  069E  1303               	bcf	3,6	;RP1=0, select bank0
  6988  069F  01CD               	clrf	setLED@command
  6989  06A0  0ACD               	incf	setLED@command,f
  6990  06A1  3002               	movlw	2
  6991  06A2  158A  2735  118A   	fcall	_setLED
  6992  06A5                     l4511:	
  6993                           
  6994                           ;TriacRelay_B1.c: 121: }
  6995                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  6996  06A5  0878               	movf	_Lights,w
  6997  06A6  0084               	movwf	4
  6998  06A7  1383               	bcf	3,7	;select IRP bank0
  6999  06A8  1900               	btfsc	0,2
  7000  06A9  2EC9               	goto	l4525
  7001                           
  7002                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7003  06AA  0878               	movf	_Lights,w
  7004  06AB  0084               	movwf	4
  7005  06AC  1500               	bsf	0,2
  7006                           
  7007                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7008  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  7009  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  7010  06AF  0851               	movf	setLights@lights,w
  7011  06B0  3A01               	xorlw	1
  7012  06B1  1D03               	skipz
  7013  06B2  2EC9               	goto	l4525
  7014                           
  7015                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7016  06B3  1506               	bsf	6,2	;volatile
  7017                           
  7018                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7019  06B4  3064               	movlw	100
  7020  06B5  00D0               	movwf	??_setLights
  7021  06B6  0878               	movf	_Lights,w
  7022  06B7  3E04               	addlw	4
  7023  06B8  0084               	movwf	4
  7024  06B9  0850               	movf	??_setLights,w
  7025  06BA  0080               	movwf	0
  7026                           
  7027                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7028  06BB  308C               	movlw	140
  7029  06BC  00D0               	movwf	??_setLights
  7030  06BD  0878               	movf	_Lights,w
  7031  06BE  3E03               	addlw	3
  7032  06BF  0084               	movwf	4
  7033  06C0  0850               	movf	??_setLights,w
  7034  06C1  0080               	movwf	0
  7035                           
  7036                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7037  06C2  0878               	movf	_Lights,w
  7038  06C3  3E02               	addlw	2
  7039  06C4  0084               	movwf	4
  7040  06C5  0180               	clrf	0
  7041                           
  7042                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7043  06C6  0878               	movf	_Lights,w
  7044  06C7  0084               	movwf	4
  7045  06C8  1480               	bsf	0,1
  7046  06C9                     l4525:	
  7047                           
  7048                           ;TriacRelay_B1.c: 136: }
  7049                           ;TriacRelay_B1.c: 162: }
  7050                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7051  06C9  14F7               	bsf	_Light,1
  7052                           
  7053                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7054  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  7055  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  7056  06CC  0851               	movf	setLights@lights,w
  7057  06CD  158A  233A         	fcall	_setLights_Line
  7058                           
  7059                           ;TriacRelay_B1.c: 167: } else {
  7060  06CF  0008               	return
  7061  06D0                     l4529:	
  7062                           
  7063                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7064  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  7065  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  7066  06D2  0851               	movf	setLights@lights,w
  7067  06D3  3A02               	xorlw	2
  7068  06D4  1D03               	skipz
  7069  06D5  2EE3               	goto	l4533
  7070                           
  7071                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7072  06D6  01CD               	clrf	setLED@command
  7073  06D7  0ACD               	incf	setLED@command,f
  7074  06D8  3001               	movlw	1
  7075  06D9  158A  2735  118A   	fcall	_setLED
  7076                           
  7077                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7078  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  7079  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  7080  06DE  01CD               	clrf	setLED@command
  7081  06DF  3002               	movlw	2
  7082  06E0  158A  2735  118A   	fcall	_setLED
  7083  06E3                     l4533:	
  7084                           
  7085                           ;TriacRelay_B1.c: 173: }
  7086                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7087  06E3  0878               	movf	_Lights,w
  7088  06E4  0084               	movwf	4
  7089  06E5  1383               	bcf	3,7	;select IRP bank0
  7090  06E6  1D00               	btfss	0,2
  7091  06E7  2F07               	goto	l4547
  7092                           
  7093                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7094  06E8  0878               	movf	_Lights,w
  7095  06E9  0084               	movwf	4
  7096  06EA  1100               	bcf	0,2
  7097                           
  7098                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7099  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  7100  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  7101  06ED  0851               	movf	setLights@lights,w
  7102  06EE  3A01               	xorlw	1
  7103  06EF  1D03               	skipz
  7104  06F0  2F07               	goto	l4547
  7105                           
  7106                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7107  06F1  1506               	bsf	6,2	;volatile
  7108                           
  7109                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7110  06F2  3028               	movlw	40
  7111  06F3  00D0               	movwf	??_setLights
  7112  06F4  0878               	movf	_Lights,w
  7113  06F5  3E04               	addlw	4
  7114  06F6  0084               	movwf	4
  7115  06F7  0850               	movf	??_setLights,w
  7116  06F8  0080               	movwf	0
  7117                           
  7118                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7119  06F9  3050               	movlw	80
  7120  06FA  00D0               	movwf	??_setLights
  7121  06FB  0878               	movf	_Lights,w
  7122  06FC  3E03               	addlw	3
  7123  06FD  0084               	movwf	4
  7124  06FE  0850               	movf	??_setLights,w
  7125  06FF  0080               	movwf	0
  7126                           
  7127                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7128  0700  0878               	movf	_Lights,w
  7129  0701  3E02               	addlw	2
  7130  0702  0084               	movwf	4
  7131  0703  0180               	clrf	0
  7132                           
  7133                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7134  0704  0878               	movf	_Lights,w
  7135  0705  0084               	movwf	4
  7136  0706  1480               	bsf	0,1
  7137  0707                     l4547:	
  7138                           
  7139                           ;TriacRelay_B1.c: 184: }
  7140                           ;TriacRelay_B1.c: 211: }
  7141                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7142  0707  10F7               	bcf	_Light,1
  7143                           
  7144                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7145  0708  3000               	movlw	0
  7146  0709  158A  233A         	fcall	_setLights_Line
  7147  070B  0008               	return
  7148  070C                     __end_of_setLights:	
  7149                           
  7150                           	psect	text40
  7151  0B3A                     __ptext40:	
  7152 ;; *************** function _setLights_Line *****************
  7153 ;; Defined at:
  7154 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  lights          1    wreg     unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  lights          1    4[COMMON] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;		None               void
  7161 ;; Registers used:
  7162 ;;		wreg
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7168 ;;      Params:         0       0       0       0
  7169 ;;      Locals:         1       0       0       0
  7170 ;;      Temps:          0       0       0       0
  7171 ;;      Totals:         1       0       0       0
  7172 ;;Total ram usage:        1 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    2
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_setLights
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _setLights_Line
  7184  0B3A                     _setLights_Line:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _setLights_Line: [wreg]
  7188                           ;setLights_Line@lights stored from wreg
  7189  0B3A  00F4               	movwf	setLights_Line@lights
  7190                           
  7191                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7192  0B3B  1477               	bsf	_Light,0
  7193                           
  7194                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7195  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  7196  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  7197  0B3E  1041               	bcf	_Lights1+1,0
  7198                           
  7199                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7200  0B3F  0874               	movf	setLights_Line@lights,w
  7201  0B40  3A01               	xorlw	1
  7202  0B41  1D03               	skipz
  7203  0B42  0008               	return
  7204  0B43  0874               	movf	setLights_Line@lights,w
  7205  0B44  1903               	btfsc	3,2
  7206  0B45  0008               	return
  7207                           
  7208                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7209  0B46  1441               	bsf	_Lights1+1,0
  7210  0B47  0008               	return
  7211  0B48                     __end_of_setLights_Line:	
  7212                           
  7213                           	psect	text41
  7214  0BF9                     __ptext41:	
  7215 ;; *************** function _getLights_Allow_Condition *****************
  7216 ;; Defined at:
  7217 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  lights          1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  lights          1    0[COMMON] unsigned char 
  7222 ;;  allow           1    0[BANK0 ] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      unsigned char 
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, pclath, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7232 ;;      Params:         0       0       0       0
  7233 ;;      Locals:         0       2       0       0
  7234 ;;      Temps:          1       0       0       0
  7235 ;;      Totals:         1       2       0       0
  7236 ;;Total ram usage:        3 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    3
  7239 ;; This function calls:
  7240 ;;		_getLoad_OK
  7241 ;; This function is called by:
  7242 ;;		_setLights_Main
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _getLights_Allow_Condition
  7248  0BF9                     _getLights_Allow_Condition:	
  7249                           
  7250                           ;TriacRelay_B1.c: 368: char allow = 0;
  7251                           
  7252                           ;incstack = 0
  7253                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7254  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  7255  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  7256  0BFB  01CD               	clrf	getLights_Allow_Condition@allow
  7257                           
  7258                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7259  0BFC  01CE               	clrf	_getLights_Allow_Condition$4224
  7260  0BFD  0ACE               	incf	_getLights_Allow_Condition$4224,f
  7261  0BFE  158A  22EB  158A   	fcall	_getLoad_OK
  7262  0C01  3800               	iorlw	0
  7263  0C02  1903               	btfsc	3,2
  7264  0C03  1877               	btfsc	_Light,0
  7265  0C04  2C08               	goto	l4499
  7266  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  7267  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  7268  0C07  01CE               	clrf	_getLights_Allow_Condition$4224
  7269  0C08                     l4499:	
  7270  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  7271  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  7272  0C0A  084E               	movf	_getLights_Allow_Condition$4224,w
  7273  0C0B  00F5               	movwf	??_getLights_Allow_Condition
  7274  0C0C  0875               	movf	??_getLights_Allow_Condition,w
  7275  0C0D  00CD               	movwf	getLights_Allow_Condition@allow
  7276                           
  7277                           ;TriacRelay_B1.c: 396: return allow;
  7278  0C0E  084D               	movf	getLights_Allow_Condition@allow,w
  7279  0C0F  0008               	return
  7280  0C10                     __end_of_getLights_Allow_Condition:	
  7281                           
  7282                           	psect	text42
  7283  0AEB                     __ptext42:	
  7284 ;; *************** function _getLoad_OK *****************
  7285 ;; Defined at:
  7286 ;;		line 274 in file "../src/OverLoad_B1.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  ok              1    4[COMMON] unsigned char 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      unsigned char 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7300 ;;      Params:         0       0       0       0
  7301 ;;      Locals:         1       0       0       0
  7302 ;;      Temps:          0       0       0       0
  7303 ;;      Totals:         1       0       0       0
  7304 ;;Total ram usage:        1 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    2
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		_Lights_Main
  7311 ;;		_getLights_Allow_Condition
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _getLoad_OK
  7317  0AEB                     _getLoad_OK:	
  7318                           
  7319                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7323  0AEB  3000               	movlw	0
  7324  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  7325  0AED  1303               	bcf	3,6	;RP1=0, select bank1
  7326  0AEE  1BCA               	btfsc	_Load^(0+128),7
  7327  0AEF  3001               	movlw	1
  7328  0AF0  00F4               	movwf	getLoad_OK@ok
  7329                           
  7330                           ;OverLoad_B1.c: 276: return ok;
  7331  0AF1  0874               	movf	getLoad_OK@ok,w
  7332  0AF2  0008               	return
  7333  0AF3                     __end_of_getLoad_OK:	
  7334                           
  7335                           	psect	text43
  7336  060A                     __ptext43:	
  7337 ;; *************** function _Lights_Control *****************
  7338 ;; Defined at:
  7339 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  lights          1    wreg     unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  lights          1   10[BANK0 ] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7353 ;;      Params:         0       0       0       0
  7354 ;;      Locals:         0       1       0       0
  7355 ;;      Temps:          0       2       0       0
  7356 ;;      Totals:         0       3       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    3
  7360 ;; This function calls:
  7361 ;;		_LightsPointSelect
  7362 ;;		___awdiv
  7363 ;; This function is called by:
  7364 ;;		_Lights_Main
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _Lights_Control
  7370  060A                     _Lights_Control:	
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7374                           ;Lights_Control@lights stored from wreg
  7375  060A  1283               	bcf	3,5	;RP0=0, select bank0
  7376  060B  1303               	bcf	3,6	;RP1=0, select bank0
  7377  060C  00D7               	movwf	Lights_Control@lights
  7378                           
  7379                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7380  060D  0857               	movf	Lights_Control@lights,w
  7381  060E  158A  230D  118A   	fcall	_LightsPointSelect
  7382                           
  7383                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7384  0611  0878               	movf	_Lights,w
  7385  0612  0084               	movwf	4
  7386  0613  1383               	bcf	3,7	;select IRP bank0
  7387  0614  1C80               	btfss	0,1
  7388  0615  0008               	return
  7389                           
  7390                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7391  0616  3001               	movlw	1
  7392  0617  1283               	bcf	3,5	;RP0=0, select bank0
  7393  0618  1303               	bcf	3,6	;RP1=0, select bank0
  7394  0619  00D5               	movwf	??_Lights_Control
  7395  061A  0878               	movf	_Lights,w
  7396  061B  3E02               	addlw	2
  7397  061C  0084               	movwf	4
  7398  061D  0855               	movf	??_Lights_Control,w
  7399  061E  0780               	addwf	0,f
  7400                           
  7401                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7402  061F  0878               	movf	_Lights,w
  7403  0620  0084               	movwf	4
  7404  0621  1B80               	btfsc	0,7
  7405  0622  2E59               	goto	l4715
  7406                           
  7407                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7408  0623  3014               	movlw	20
  7409  0624  00CD               	movwf	___awdiv@divisor
  7410  0625  3000               	movlw	0
  7411  0626  00CE               	movwf	___awdiv@divisor+1
  7412  0627  0878               	movf	_Lights,w
  7413  0628  3E04               	addlw	4
  7414  0629  0084               	movwf	4
  7415  062A  0800               	movf	0,w
  7416  062B  00D5               	movwf	??_Lights_Control
  7417  062C  01D6               	clrf	??_Lights_Control+1
  7418  062D  0855               	movf	??_Lights_Control,w
  7419  062E  00CF               	movwf	___awdiv@dividend
  7420  062F  0856               	movf	??_Lights_Control+1,w
  7421  0630  00D0               	movwf	___awdiv@dividend+1
  7422  0631  158A  26D8  118A   	fcall	___awdiv
  7423  0634  0878               	movf	_Lights,w
  7424  0635  3E02               	addlw	2
  7425  0636  0084               	movwf	4
  7426  0637  1283               	bcf	3,5	;RP0=0, select bank0
  7427  0638  1303               	bcf	3,6	;RP1=0, select bank0
  7428  0639  084E               	movf	?___awdiv+1,w
  7429  063A  3A80               	xorlw	128
  7430  063B  3C80               	sublw	128
  7431  063C  1D03               	skipz
  7432  063D  2E41               	goto	u5565
  7433  063E  084D               	movf	?___awdiv,w
  7434  063F  1383               	bcf	3,7	;select IRP bank0
  7435  0640  0200               	subwf	0,w
  7436  0641                     u5565:	
  7437  0641  1C03               	skipc
  7438  0642  0008               	return
  7439                           
  7440                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7441  0643  0878               	movf	_Lights,w
  7442  0644  0084               	movwf	4
  7443  0645  1383               	bcf	3,7	;select IRP bank0
  7444  0646  1780               	bsf	0,7
  7445                           
  7446                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7447  0647  1283               	bcf	3,5	;RP0=0, select bank0
  7448  0648  1303               	bcf	3,6	;RP1=0, select bank0
  7449  0649  0857               	movf	Lights_Control@lights,w
  7450  064A  3A01               	xorlw	1
  7451  064B  1D03               	skipz
  7452  064C  0008               	return
  7453                           
  7454                           ;TriacRelay_B1.c: 229: RB3 = Lights->Status == 1 ? 1 : 0;
  7455  064D  0878               	movf	_Lights,w
  7456  064E  0084               	movwf	4
  7457  064F  1D00               	btfss	0,2
  7458  0650  2E55               	goto	u5580
  7459  0651  1283               	bcf	3,5	;RP0=0, select bank0
  7460  0652  1303               	bcf	3,6	;RP1=0, select bank0
  7461  0653  1586               	bsf	6,3	;volatile
  7462  0654  0008               	return
  7463  0655                     u5580:	
  7464  0655  1283               	bcf	3,5	;RP0=0, select bank0
  7465  0656  1303               	bcf	3,6	;RP1=0, select bank0
  7466  0657  1186               	bcf	6,3	;volatile
  7467                           
  7468                           ;TriacRelay_B1.c: 230: }
  7469                           ;TriacRelay_B1.c: 242: }
  7470                           ;TriacRelay_B1.c: 243: } else {
  7471  0658  0008               	return
  7472  0659                     l4715:	
  7473                           
  7474                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7475  0659  3014               	movlw	20
  7476  065A  00CD               	movwf	___awdiv@divisor
  7477  065B  3000               	movlw	0
  7478  065C  00CE               	movwf	___awdiv@divisor+1
  7479  065D  0878               	movf	_Lights,w
  7480  065E  3E03               	addlw	3
  7481  065F  0084               	movwf	4
  7482  0660  1383               	bcf	3,7	;select IRP bank0
  7483  0661  0800               	movf	0,w
  7484  0662  00D5               	movwf	??_Lights_Control
  7485  0663  01D6               	clrf	??_Lights_Control+1
  7486  0664  0855               	movf	??_Lights_Control,w
  7487  0665  00CF               	movwf	___awdiv@dividend
  7488  0666  0856               	movf	??_Lights_Control+1,w
  7489  0667  00D0               	movwf	___awdiv@dividend+1
  7490  0668  158A  26D8  118A   	fcall	___awdiv
  7491  066B  0878               	movf	_Lights,w
  7492  066C  3E02               	addlw	2
  7493  066D  0084               	movwf	4
  7494  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7495  066F  1303               	bcf	3,6	;RP1=0, select bank0
  7496  0670  084E               	movf	?___awdiv+1,w
  7497  0671  3A80               	xorlw	128
  7498  0672  3C80               	sublw	128
  7499  0673  1D03               	skipz
  7500  0674  2E78               	goto	u5605
  7501  0675  084D               	movf	?___awdiv,w
  7502  0676  1383               	bcf	3,7	;select IRP bank0
  7503  0677  0200               	subwf	0,w
  7504  0678                     u5605:	
  7505  0678  1C03               	skipc
  7506  0679  0008               	return
  7507                           
  7508                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7509  067A  0878               	movf	_Lights,w
  7510  067B  3E02               	addlw	2
  7511  067C  0084               	movwf	4
  7512  067D  1383               	bcf	3,7	;select IRP bank0
  7513  067E  0180               	clrf	0
  7514                           
  7515                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7516  067F  0878               	movf	_Lights,w
  7517  0680  0084               	movwf	4
  7518  0681  1080               	bcf	0,1
  7519                           
  7520                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7521  0682  0878               	movf	_Lights,w
  7522  0683  0084               	movwf	4
  7523  0684  1380               	bcf	0,7
  7524                           
  7525                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7526  0685  1283               	bcf	3,5	;RP0=0, select bank0
  7527  0686  1303               	bcf	3,6	;RP1=0, select bank0
  7528  0687  0857               	movf	Lights_Control@lights,w
  7529  0688  3A01               	xorlw	1
  7530  0689  1D03               	skipz
  7531  068A  0008               	return
  7532                           
  7533                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7534  068B  1106               	bcf	6,2	;volatile
  7535  068C  0008               	return
  7536  068D                     __end_of_Lights_Control:	
  7537                           
  7538                           	psect	text44
  7539  0ED8                     __ptext44:	
  7540 ;; *************** function ___awdiv *****************
  7541 ;; Defined at:
  7542 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  divisor         2    0[BANK0 ] int 
  7545 ;;  dividend        2    2[BANK0 ] int 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;  quotient        2    6[BANK0 ] int 
  7548 ;;  sign            1    5[BANK0 ] unsigned char 
  7549 ;;  counter         1    4[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  2    0[BANK0 ] int 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7559 ;;      Params:         0       4       0       0
  7560 ;;      Locals:         0       4       0       0
  7561 ;;      Temps:          1       0       0       0
  7562 ;;      Totals:         1       8       0       0
  7563 ;;Total ram usage:        9 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    2
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_getPIR_AD
  7570 ;;		_Lights_Control
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function ___awdiv
  7576  0ED8                     ___awdiv:	
  7577                           
  7578                           ;incstack = 0
  7579                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7580  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  7581  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  7582  0EDA  01D2               	clrf	___awdiv@sign
  7583  0EDB  1FCE               	btfss	___awdiv@divisor+1,7
  7584  0EDC  2EE4               	goto	l4565
  7585  0EDD  09CD               	comf	___awdiv@divisor,f
  7586  0EDE  09CE               	comf	___awdiv@divisor+1,f
  7587  0EDF  0ACD               	incf	___awdiv@divisor,f
  7588  0EE0  1903               	skipnz
  7589  0EE1  0ACE               	incf	___awdiv@divisor+1,f
  7590  0EE2  01D2               	clrf	___awdiv@sign
  7591  0EE3  0AD2               	incf	___awdiv@sign,f
  7592  0EE4                     l4565:	
  7593  0EE4  1FD0               	btfss	___awdiv@dividend+1,7
  7594  0EE5  2EEF               	goto	l4571
  7595  0EE6  09CF               	comf	___awdiv@dividend,f
  7596  0EE7  09D0               	comf	___awdiv@dividend+1,f
  7597  0EE8  0ACF               	incf	___awdiv@dividend,f
  7598  0EE9  1903               	skipnz
  7599  0EEA  0AD0               	incf	___awdiv@dividend+1,f
  7600  0EEB  3001               	movlw	1
  7601  0EEC  00F4               	movwf	??___awdiv
  7602  0EED  0874               	movf	??___awdiv,w
  7603  0EEE  06D2               	xorwf	___awdiv@sign,f
  7604  0EEF                     l4571:	
  7605  0EEF  01D3               	clrf	___awdiv@quotient
  7606  0EF0  01D4               	clrf	___awdiv@quotient+1
  7607  0EF1  084E               	movf	___awdiv@divisor+1,w
  7608  0EF2  044D               	iorwf	___awdiv@divisor,w
  7609  0EF3  1903               	skipnz
  7610  0EF4  2F26               	goto	l4593
  7611  0EF5  01D1               	clrf	___awdiv@counter
  7612  0EF6  0AD1               	incf	___awdiv@counter,f
  7613  0EF7                     l4581:	
  7614  0EF7  1BCE               	btfsc	___awdiv@divisor+1,7
  7615  0EF8  2F05               	goto	l4583
  7616  0EF9  3001               	movlw	1
  7617  0EFA                     u5265:	
  7618  0EFA  1003               	clrc
  7619  0EFB  0DCD               	rlf	___awdiv@divisor,f
  7620  0EFC  0DCE               	rlf	___awdiv@divisor+1,f
  7621  0EFD  3EFF               	addlw	-1
  7622  0EFE  1D03               	skipz
  7623  0EFF  2EFA               	goto	u5265
  7624  0F00  3001               	movlw	1
  7625  0F01  00F4               	movwf	??___awdiv
  7626  0F02  0874               	movf	??___awdiv,w
  7627  0F03  07D1               	addwf	___awdiv@counter,f
  7628  0F04  2EF7               	goto	l4581
  7629  0F05                     l4583:	
  7630  0F05  3001               	movlw	1
  7631  0F06                     u5285:	
  7632  0F06  1003               	clrc
  7633  0F07  0DD3               	rlf	___awdiv@quotient,f
  7634  0F08  0DD4               	rlf	___awdiv@quotient+1,f
  7635  0F09  3EFF               	addlw	-1
  7636  0F0A  1D03               	skipz
  7637  0F0B  2F06               	goto	u5285
  7638  0F0C  084E               	movf	___awdiv@divisor+1,w
  7639  0F0D  0250               	subwf	___awdiv@dividend+1,w
  7640  0F0E  1D03               	skipz
  7641  0F0F  2F12               	goto	u5295
  7642  0F10  084D               	movf	___awdiv@divisor,w
  7643  0F11  024F               	subwf	___awdiv@dividend,w
  7644  0F12                     u5295:	
  7645  0F12  1C03               	skipc
  7646  0F13  2F1B               	goto	l4589
  7647  0F14  084D               	movf	___awdiv@divisor,w
  7648  0F15  02CF               	subwf	___awdiv@dividend,f
  7649  0F16  084E               	movf	___awdiv@divisor+1,w
  7650  0F17  1C03               	skipc
  7651  0F18  03D0               	decf	___awdiv@dividend+1,f
  7652  0F19  02D0               	subwf	___awdiv@dividend+1,f
  7653  0F1A  1453               	bsf	___awdiv@quotient,0
  7654  0F1B                     l4589:	
  7655  0F1B  3001               	movlw	1
  7656  0F1C                     u5305:	
  7657  0F1C  1003               	clrc
  7658  0F1D  0CCE               	rrf	___awdiv@divisor+1,f
  7659  0F1E  0CCD               	rrf	___awdiv@divisor,f
  7660  0F1F  3EFF               	addlw	-1
  7661  0F20  1D03               	skipz
  7662  0F21  2F1C               	goto	u5305
  7663  0F22  3001               	movlw	1
  7664  0F23  02D1               	subwf	___awdiv@counter,f
  7665  0F24  1D03               	btfss	3,2
  7666  0F25  2F05               	goto	l4583
  7667  0F26                     l4593:	
  7668  0F26  0852               	movf	___awdiv@sign,w
  7669  0F27  1903               	btfsc	3,2
  7670  0F28  2F2E               	goto	l4597
  7671  0F29  09D3               	comf	___awdiv@quotient,f
  7672  0F2A  09D4               	comf	___awdiv@quotient+1,f
  7673  0F2B  0AD3               	incf	___awdiv@quotient,f
  7674  0F2C  1903               	skipnz
  7675  0F2D  0AD4               	incf	___awdiv@quotient+1,f
  7676  0F2E                     l4597:	
  7677  0F2E  0854               	movf	___awdiv@quotient+1,w
  7678  0F2F  01CE               	clrf	?___awdiv+1
  7679  0F30  07CE               	addwf	?___awdiv+1,f
  7680  0F31  0853               	movf	___awdiv@quotient,w
  7681  0F32  01CD               	clrf	?___awdiv
  7682  0F33  07CD               	addwf	?___awdiv,f
  7683  0F34  0008               	return
  7684  0F35                     __end_of___awdiv:	
  7685                           
  7686                           	psect	text45
  7687  0AB6                     __ptext45:	
  7688 ;; *************** function _Lights_Initialization *****************
  7689 ;; Defined at:
  7690 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;		None
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;		None
  7695 ;; Return value:  Size  Location     Type
  7696 ;;		None               void
  7697 ;; Registers used:
  7698 ;;		wreg, status,2, status,0, pclath, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7704 ;;      Params:         0       0       0       0
  7705 ;;      Locals:         0       0       0       0
  7706 ;;      Temps:          0       0       0       0
  7707 ;;      Totals:         0       0       0       0
  7708 ;;Total ram usage:        0 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; Hardware stack levels required when called:    4
  7711 ;; This function calls:
  7712 ;;		_setLights_Initialization
  7713 ;; This function is called by:
  7714 ;;		_main
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _Lights_Initialization
  7720  0AB6                     _Lights_Initialization:	
  7721                           
  7722                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7723                           
  7724                           ;incstack = 0
  7725                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7726  0AB6  3001               	movlw	1
  7727  0AB7  158A  22D5         	fcall	_setLights_Initialization
  7728  0AB9  0008               	return
  7729  0ABA                     __end_of_Lights_Initialization:	
  7730                           
  7731                           	psect	text46
  7732  0AD5                     __ptext46:	
  7733 ;; *************** function _setLights_Initialization *****************
  7734 ;; Defined at:
  7735 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  lights          1    wreg     unsigned char 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  lights          1    0[BANK0 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;		None               void
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7749 ;;      Params:         0       0       0       0
  7750 ;;      Locals:         0       1       0       0
  7751 ;;      Temps:          0       0       0       0
  7752 ;;      Totals:         0       1       0       0
  7753 ;;Total ram usage:        1 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    3
  7756 ;; This function calls:
  7757 ;;		_LightsPointSelect
  7758 ;; This function is called by:
  7759 ;;		_Lights_Initialization
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _setLights_Initialization
  7765  0AD5                     _setLights_Initialization:	
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7769                           ;setLights_Initialization@lights stored from wreg
  7770  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  7771  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  7772  0AD7  00CD               	movwf	setLights_Initialization@lights
  7773                           
  7774                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7775  0AD8  084D               	movf	setLights_Initialization@lights,w
  7776  0AD9  158A  230D         	fcall	_LightsPointSelect
  7777  0ADB  0008               	return
  7778  0ADC                     __end_of_setLights_Initialization:	
  7779                           
  7780                           	psect	text47
  7781  0AA0                     __ptext47:	
  7782 ;; *************** function _LED_Main *****************
  7783 ;; Defined at:
  7784 ;;		line 47 in file "../src/LED_B1.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;		None               void
  7791 ;; Registers used:
  7792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7798 ;;      Params:         0       0       0       0
  7799 ;;      Locals:         0       0       0       0
  7800 ;;      Temps:          0       0       0       0
  7801 ;;      Totals:         0       0       0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    5
  7805 ;; This function calls:
  7806 ;;		_setPIRLED_Main
  7807 ;; This function is called by:
  7808 ;;		_main
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function _LED_Main
  7814  0AA0                     _LED_Main:	
  7815                           
  7816                           ;LED_B1.c: 55: setPIRLED_Main();
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7820  0AA0  118A  2787         	fcall	_setPIRLED_Main
  7821  0AA2  0008               	return
  7822  0AA3                     __end_of_LED_Main:	
  7823                           
  7824                           	psect	text48
  7825  0787                     __ptext48:	
  7826 ;; *************** function _setPIRLED_Main *****************
  7827 ;; Defined at:
  7828 ;;		line 265 in file "../src/LED_B1.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  count           1    3[BANK0 ] unsigned char 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;		None               void
  7835 ;; Registers used:
  7836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7842 ;;      Params:         0       0       0       0
  7843 ;;      Locals:         0       1       0       0
  7844 ;;      Temps:          0       1       0       0
  7845 ;;      Totals:         0       2       0       0
  7846 ;;Total ram usage:        2 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    4
  7849 ;; This function calls:
  7850 ;;		_setLED
  7851 ;; This function is called by:
  7852 ;;		_LED_Main
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _setPIRLED_Main
  7858  0787                     _setPIRLED_Main:	
  7859                           
  7860                           ;LED_B1.c: 267: char count;
  7861                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7865  0787  1283               	bcf	3,5	;RP0=0, select bank0
  7866  0788  1303               	bcf	3,6	;RP1=0, select bank0
  7867  0789  1C2A               	btfss	_PIRLED,0
  7868  078A  0008               	return
  7869                           
  7870                           ;LED_B1.c: 269: PIRLED.Time++;
  7871  078B  3001               	movlw	1
  7872  078C  07AC               	addwf	_PIRLED+2,f
  7873  078D  1803               	skipnc
  7874  078E  0AAD               	incf	_PIRLED+3,f
  7875  078F  3000               	movlw	0
  7876  0790  07AD               	addwf	_PIRLED+3,f
  7877                           
  7878                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  7879  0791  3000               	movlw	0
  7880  0792  022D               	subwf	_PIRLED+3,w
  7881  0793  3019               	movlw	25
  7882  0794  1903               	skipnz
  7883  0795  022C               	subwf	_PIRLED+2,w
  7884  0796  1C03               	skipc
  7885  0797  0008               	return
  7886                           
  7887                           ;LED_B1.c: 271: PIRLED.Time = 0;
  7888  0798  01AC               	clrf	_PIRLED+2
  7889  0799  01AD               	clrf	_PIRLED+3
  7890                           
  7891                           ;LED_B1.c: 272: setLED(1, 0);
  7892  079A  01CD               	clrf	setLED@command
  7893  079B  3001               	movlw	1
  7894  079C  158A  2735  118A   	fcall	_setLED
  7895                           
  7896                           ;LED_B1.c: 273: setLED(2, 0);
  7897  079F  1283               	bcf	3,5	;RP0=0, select bank0
  7898  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  7899  07A1  01CD               	clrf	setLED@command
  7900  07A2  3002               	movlw	2
  7901  07A3  158A  2735  118A   	fcall	_setLED
  7902                           
  7903                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  7904  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  7905  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  7906  07A8  1CAA               	btfss	_PIRLED,1
  7907  07A9  2FAE               	goto	l4637
  7908                           
  7909                           ;LED_B1.c: 275: count = 4;
  7910  07AA  3004               	movlw	4
  7911  07AB  00CF               	movwf	??_setPIRLED_Main
  7912  07AC  084F               	movf	??_setPIRLED_Main,w
  7913  07AD  00D0               	movwf	setPIRLED_Main@count
  7914  07AE                     l4637:	
  7915                           
  7916                           ;LED_B1.c: 276: }
  7917                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  7918  07AE  1D2A               	btfss	_PIRLED,2
  7919  07AF  2FB4               	goto	l4641
  7920                           
  7921                           ;LED_B1.c: 278: count = 6;
  7922  07B0  3006               	movlw	6
  7923  07B1  00CF               	movwf	??_setPIRLED_Main
  7924  07B2  084F               	movf	??_setPIRLED_Main,w
  7925  07B3  00D0               	movwf	setPIRLED_Main@count
  7926  07B4                     l4641:	
  7927                           
  7928                           ;LED_B1.c: 279: }
  7929                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  7930  07B4  1DAA               	btfss	_PIRLED,3
  7931  07B5  2FBA               	goto	l4645
  7932                           
  7933                           ;LED_B1.c: 281: count = 8;
  7934  07B6  3008               	movlw	8
  7935  07B7  00CF               	movwf	??_setPIRLED_Main
  7936  07B8  084F               	movf	??_setPIRLED_Main,w
  7937  07B9  00D0               	movwf	setPIRLED_Main@count
  7938  07BA                     l4645:	
  7939                           
  7940                           ;LED_B1.c: 282: }
  7941                           ;LED_B1.c: 283: PIRLED.Count++;
  7942  07BA  3001               	movlw	1
  7943  07BB  00CF               	movwf	??_setPIRLED_Main
  7944  07BC  084F               	movf	??_setPIRLED_Main,w
  7945  07BD  07AB               	addwf	_PIRLED+1,f
  7946                           
  7947                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7948  07BE  082B               	movf	_PIRLED+1,w
  7949  07BF  3A01               	xorlw	1
  7950  07C0  1903               	skipnz
  7951  07C1  2FC6               	goto	l4651
  7952  07C2  082B               	movf	_PIRLED+1,w
  7953  07C3  3A02               	xorlw	2
  7954  07C4  1D03               	skipz
  7955  07C5  2FDA               	goto	l4655
  7956  07C6                     l4651:	
  7957                           
  7958                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7959  07C6  1003               	clrc
  7960  07C7  1E2A               	btfss	_PIRLED,4
  7961  07C8  1403               	setc
  7962  07C9  1C03               	btfss	3,0
  7963  07CA  2FCF               	goto	u5420
  7964  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  7965  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  7966  07CD  162A               	bsf	_PIRLED,4
  7967  07CE  2FD2               	goto	l4653
  7968  07CF                     u5420:	
  7969  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  7970  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  7971  07D1  122A               	bcf	_PIRLED,4
  7972  07D2                     l4653:	
  7973                           
  7974                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  7975  07D2  3000               	movlw	0
  7976  07D3  1A2A               	btfsc	_PIRLED,4
  7977  07D4  3001               	movlw	1
  7978  07D5  00CD               	movwf	setLED@command
  7979  07D6  3002               	movlw	2
  7980  07D7  158A  2735         	fcall	_setLED
  7981                           
  7982                           ;LED_B1.c: 287: } else {
  7983  07D9  0008               	return
  7984  07DA                     l4655:	
  7985                           
  7986                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7987  07DA  1003               	clrc
  7988  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  7989  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  7990  07DD  1E2A               	btfss	_PIRLED,4
  7991  07DE  1403               	setc
  7992  07DF  1C03               	btfss	3,0
  7993  07E0  2FE5               	goto	u5440
  7994  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  7995  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  7996  07E3  162A               	bsf	_PIRLED,4
  7997  07E4  2FE8               	goto	l4657
  7998  07E5                     u5440:	
  7999  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  8000  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  8001  07E7  122A               	bcf	_PIRLED,4
  8002  07E8                     l4657:	
  8003                           
  8004                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8005  07E8  3000               	movlw	0
  8006  07E9  1A2A               	btfsc	_PIRLED,4
  8007  07EA  3001               	movlw	1
  8008  07EB  00CD               	movwf	setLED@command
  8009  07EC  3001               	movlw	1
  8010  07ED  158A  2735  118A   	fcall	_setLED
  8011                           
  8012                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8013  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  8014  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  8015  07F2  082B               	movf	_PIRLED+1,w
  8016  07F3  0650               	xorwf	setPIRLED_Main@count,w
  8017  07F4  1D03               	skipz
  8018  07F5  0008               	return
  8019                           
  8020                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8021  07F6  01AB               	clrf	_PIRLED+1
  8022  07F7  0008               	return
  8023  07F8                     __end_of_setPIRLED_Main:	
  8024                           
  8025                           	psect	text49
  8026  0AE3                     __ptext49:	
  8027 ;; *************** function _LED_Initialization *****************
  8028 ;; Defined at:
  8029 ;;		line 31 in file "../src/LED_B1.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;		None               void
  8036 ;; Registers used:
  8037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8043 ;;      Params:         0       0       0       0
  8044 ;;      Locals:         0       0       0       0
  8045 ;;      Temps:          0       0       0       0
  8046 ;;      Totals:         0       0       0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    5
  8050 ;; This function calls:
  8051 ;;		_setLED_Initialization
  8052 ;; This function is called by:
  8053 ;;		_main
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           
  8058                           ;psect for function _LED_Initialization
  8059  0AE3                     _LED_Initialization:	
  8060                           
  8061                           ;LED_B1.c: 33: setLED_Initialization(1);
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8065  0AE3  3001               	movlw	1
  8066  0AE4  158A  23A7  158A   	fcall	_setLED_Initialization
  8067                           
  8068                           ;LED_B1.c: 36: setLED_Initialization(2);
  8069  0AE7  3002               	movlw	2
  8070  0AE8  158A  23A7         	fcall	_setLED_Initialization
  8071  0AEA  0008               	return
  8072  0AEB                     __end_of_LED_Initialization:	
  8073                           
  8074                           	psect	text50
  8075  0BA7                     __ptext50:	
  8076 ;; *************** function _setLED_Initialization *****************
  8077 ;; Defined at:
  8078 ;;		line 74 in file "../src/LED_B1.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  led             1    wreg     unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  led             1    2[BANK0 ] unsigned char 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8092 ;;      Params:         0       0       0       0
  8093 ;;      Locals:         0       1       0       0
  8094 ;;      Temps:          0       0       0       0
  8095 ;;      Totals:         0       1       0       0
  8096 ;;Total ram usage:        1 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    4
  8099 ;; This function calls:
  8100 ;;		_LedPointSelect
  8101 ;;		_setLED
  8102 ;; This function is called by:
  8103 ;;		_LED_Initialization
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _setLED_Initialization
  8109  0BA7                     _setLED_Initialization:	
  8110                           
  8111                           ;incstack = 0
  8112                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8113                           ;setLED_Initialization@led stored from wreg
  8114  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  8115  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  8116  0BA9  00CF               	movwf	setLED_Initialization@led
  8117                           
  8118                           ;LED_B1.c: 75: LedPointSelect(led);
  8119  0BAA  084F               	movf	setLED_Initialization@led,w
  8120  0BAB  158A  2395  158A   	fcall	_LedPointSelect
  8121                           
  8122                           ;LED_B1.c: 76: LED->Enable = 1;
  8123  0BAE  0876               	movf	_LED,w
  8124  0BAF  0084               	movwf	4
  8125  0BB0  1383               	bcf	3,7	;select IRP bank0
  8126  0BB1  1400               	bsf	0,0
  8127                           
  8128                           ;LED_B1.c: 77: setLED(led, 0);
  8129  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  8130  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  8131  0BB4  01CD               	clrf	setLED@command
  8132  0BB5  084F               	movf	setLED_Initialization@led,w
  8133  0BB6  158A  2735         	fcall	_setLED
  8134  0BB8  0008               	return
  8135  0BB9                     __end_of_setLED_Initialization:	
  8136                           
  8137                           	psect	text51
  8138  0548                     __ptext51:	
  8139 ;; *************** function _Exception_Main *****************
  8140 ;; Defined at:
  8141 ;;		line 499 in file "../src/Main_B1.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  i               2   12[BANK0 ] int 
  8146 ;;  i               2   10[BANK0 ] int 
  8147 ;;  error           1   14[BANK0 ] unsigned char 
  8148 ;;  status          1    9[BANK0 ] unsigned char 
  8149 ;;  count           1    8[BANK0 ] unsigned char 
  8150 ;;  lights          1    7[BANK0 ] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;		None               void
  8153 ;; Registers used:
  8154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8160 ;;      Params:         0       0       0       0
  8161 ;;      Locals:         0       8       0       0
  8162 ;;      Temps:          0       1       0       0
  8163 ;;      Totals:         0       9       0       0
  8164 ;;Total ram usage:        9 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    5
  8167 ;; This function calls:
  8168 ;;		_getAll_Lights_Line
  8169 ;;		_getLights_Status
  8170 ;;		_getMain_All_Error_Status
  8171 ;;		_getMain_All_LightsStatus
  8172 ;;		_setLED
  8173 ;;		_setLights_SwOff
  8174 ;;		_setLights_SwOn
  8175 ;; This function is called by:
  8176 ;;		_main
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function _Exception_Main
  8182  0548                     _Exception_Main:	
  8183                           
  8184                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8188  0548  3000               	movlw	0
  8189  0549  158A  25BA  118A   	fcall	_getMain_All_Error_Status
  8190  054C  1283               	bcf	3,5	;RP0=0, select bank0
  8191  054D  1303               	bcf	3,6	;RP1=0, select bank0
  8192  054E  00D3               	movwf	??_Exception_Main
  8193  054F  0853               	movf	??_Exception_Main,w
  8194  0550  00DB               	movwf	Exception_Main@error
  8195                           
  8196                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8197  0551  01D4               	clrf	Exception_Main@lights
  8198  0552  01D5               	clrf	Exception_Main@count
  8199  0553  0AD5               	incf	Exception_Main@count,f
  8200                           
  8201                           ;Main_B1.c: 502: char status = 0;
  8202  0554  01D6               	clrf	Exception_Main@status
  8203                           
  8204                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8205  0555  1DA7               	btfss	_myMain+2,3
  8206  0556  2D63               	goto	l5269
  8207                           
  8208                           ;Main_B1.c: 505: if (error == 0) {
  8209  0557  08DB               	movf	Exception_Main@error,f
  8210  0558  1D03               	skipz
  8211  0559  0008               	return
  8212                           
  8213                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8214  055A  11A7               	bcf	_myMain+2,3
  8215                           
  8216                           ;Main_B1.c: 511: setLED(error, 110);
  8217  055B  306E               	movlw	110
  8218  055C  00D3               	movwf	??_Exception_Main
  8219  055D  0853               	movf	??_Exception_Main,w
  8220  055E  00CD               	movwf	setLED@command
  8221  055F  085B               	movf	Exception_Main@error,w
  8222  0560  158A  2735         	fcall	_setLED
  8223                           
  8224                           ;Main_B1.c: 522: }
  8225                           ;Main_B1.c: 523: } else {
  8226  0562  0008               	return
  8227  0563                     l5269:	
  8228                           
  8229                           ;Main_B1.c: 524: if (error != 0) {
  8230  0563  1283               	bcf	3,5	;RP0=0, select bank0
  8231  0564  1303               	bcf	3,6	;RP1=0, select bank0
  8232  0565  085B               	movf	Exception_Main@error,w
  8233  0566  1903               	btfsc	3,2
  8234  0567  0008               	return
  8235                           
  8236                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8237  0568  15A7               	bsf	_myMain+2,3
  8238                           
  8239                           ;Main_B1.c: 529: setLED(error, 111);
  8240  0569  306F               	movlw	111
  8241  056A  00D3               	movwf	??_Exception_Main
  8242  056B  0853               	movf	??_Exception_Main,w
  8243  056C  00CD               	movwf	setLED@command
  8244  056D  085B               	movf	Exception_Main@error,w
  8245  056E  158A  2735  118A   	fcall	_setLED
  8246                           
  8247                           ;Main_B1.c: 591: switch (error) {
  8248  0571  2DFB               	goto	l5305
  8249  0572                     l5275:	
  8250                           ;Main_B1.c: 592: case 1:
  8251                           
  8252                           
  8253                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8254  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8255  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8256  0574  01D7               	clrf	Exception_Main@i
  8257  0575  01D8               	clrf	Exception_Main@i+1
  8258  0576                     l5283:	
  8259  0576  0858               	movf	Exception_Main@i+1,w
  8260  0577  3A80               	xorlw	128
  8261  0578  00D3               	movwf	??_Exception_Main
  8262  0579  3080               	movlw	128
  8263  057A  0253               	subwf	??_Exception_Main,w
  8264  057B  1D03               	skipz
  8265  057C  2D7F               	goto	u6835
  8266  057D  0855               	movf	Exception_Main@count,w
  8267  057E  0257               	subwf	Exception_Main@i,w
  8268  057F                     u6835:	
  8269  057F  1803               	btfsc	3,0
  8270  0580  2DA2               	goto	u6830
  8271                           
  8272                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8273  0581  1283               	bcf	3,5	;RP0=0, select bank0
  8274  0582  1303               	bcf	3,6	;RP1=0, select bank0
  8275  0583  0857               	movf	Exception_Main@i,w
  8276  0584  3E01               	addlw	1
  8277  0585  158A  2373  118A   	fcall	_getLights_Status
  8278  0588  3A01               	xorlw	1
  8279  0589  1D03               	skipz
  8280  058A  2D99               	goto	l5281
  8281                           
  8282                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8283  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8284  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8285  058D  0857               	movf	Exception_Main@i,w
  8286  058E  3E01               	addlw	1
  8287  058F  158A  250C  118A   	fcall	_setLights_SwOn
  8288                           
  8289                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8290  0592  1283               	bcf	3,5	;RP0=0, select bank0
  8291  0593  1303               	bcf	3,6	;RP1=0, select bank0
  8292  0594  0857               	movf	Exception_Main@i,w
  8293  0595  3E01               	addlw	1
  8294  0596  158A  2428  118A   	fcall	_setLights_SwOff
  8295  0599                     l5281:	
  8296  0599  3001               	movlw	1
  8297  059A  1283               	bcf	3,5	;RP0=0, select bank0
  8298  059B  1303               	bcf	3,6	;RP1=0, select bank0
  8299  059C  07D7               	addwf	Exception_Main@i,f
  8300  059D  1803               	skipnc
  8301  059E  0AD8               	incf	Exception_Main@i+1,f
  8302  059F  3000               	movlw	0
  8303  05A0  07D8               	addwf	Exception_Main@i+1,f
  8304  05A1  2D76               	goto	l5283
  8305  05A2                     u6830:	
  8306  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  8307  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  8308  05A4  0008               	return
  8309  05A5                     l5285:	
  8310                           ;Main_B1.c: 601: case 2:
  8311                           
  8312                           ;Main_B1.c: 598: }
  8313                           ;Main_B1.c: 599: }
  8314                           ;Main_B1.c: 600: break;
  8315                           
  8316                           
  8317                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8318  05A5  158A  2304  118A   	fcall	_getMain_All_LightsStatus
  8319                           
  8320                           ;Main_B1.c: 604: }
  8321                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8322                           
  8323                           ;Main_B1.c: 603: ;;
  8324  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  8325  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  8326  05AA  01D9               	clrf	Exception_Main@i_2140
  8327  05AB  01DA               	clrf	Exception_Main@i_2140+1
  8328  05AC                     l5295:	
  8329  05AC  085A               	movf	Exception_Main@i_2140+1,w
  8330  05AD  3A80               	xorlw	128
  8331  05AE  00D3               	movwf	??_Exception_Main
  8332  05AF  3080               	movlw	128
  8333  05B0  0253               	subwf	??_Exception_Main,w
  8334  05B1  1D03               	skipz
  8335  05B2  2DB5               	goto	u6855
  8336  05B3  0855               	movf	Exception_Main@count,w
  8337  05B4  0259               	subwf	Exception_Main@i_2140,w
  8338  05B5                     u6855:	
  8339  05B5  1803               	btfsc	3,0
  8340  05B6  2DD8               	goto	u6850
  8341                           
  8342                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8343  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  8344  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  8345  05B9  0859               	movf	Exception_Main@i_2140,w
  8346  05BA  3E01               	addlw	1
  8347  05BB  158A  2373  118A   	fcall	_getLights_Status
  8348  05BE  3A01               	xorlw	1
  8349  05BF  1D03               	skipz
  8350  05C0  2DCF               	goto	l5293
  8351                           
  8352                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8353  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  8354  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  8355  05C3  0859               	movf	Exception_Main@i_2140,w
  8356  05C4  3E01               	addlw	1
  8357  05C5  158A  250C  118A   	fcall	_setLights_SwOn
  8358                           
  8359                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8360  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  8361  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  8362  05CA  0859               	movf	Exception_Main@i_2140,w
  8363  05CB  3E01               	addlw	1
  8364  05CC  158A  2428  118A   	fcall	_setLights_SwOff
  8365  05CF                     l5293:	
  8366  05CF  3001               	movlw	1
  8367  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  8368  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  8369  05D2  07D9               	addwf	Exception_Main@i_2140,f
  8370  05D3  1803               	skipnc
  8371  05D4  0ADA               	incf	Exception_Main@i_2140+1,f
  8372  05D5  3000               	movlw	0
  8373  05D6  07DA               	addwf	Exception_Main@i_2140+1,f
  8374  05D7  2DAC               	goto	l5295
  8375  05D8                     u6850:	
  8376  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  8377  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  8378  05DA  0008               	return
  8379  05DB                     l5297:	
  8380                           ;Main_B1.c: 613: case 3:
  8381                           
  8382                           ;Main_B1.c: 610: }
  8383                           ;Main_B1.c: 611: }
  8384                           ;Main_B1.c: 612: break;
  8385                           
  8386                           
  8387                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8388  05DB  158A  22FB  118A   	fcall	_getAll_Lights_Line
  8389  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  8390  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  8391  05E0  00D3               	movwf	??_Exception_Main
  8392  05E1  0853               	movf	??_Exception_Main,w
  8393  05E2  00D6               	movwf	Exception_Main@status
  8394                           
  8395                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8396  05E3  0856               	movf	Exception_Main@status,w
  8397  05E4  158A  2373  118A   	fcall	_getLights_Status
  8398  05E7  3A01               	xorlw	1
  8399  05E8  1903               	btfsc	3,2
  8400  05E9  2DED               	goto	l5301
  8401  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  8402  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  8403  05EC  0008               	return
  8404  05ED                     l5301:	
  8405                           
  8406                           ;Main_B1.c: 617: setLights_SwOn(status);
  8407  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  8408  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  8409  05EF  0856               	movf	Exception_Main@status,w
  8410  05F0  158A  250C  118A   	fcall	_setLights_SwOn
  8411                           
  8412                           ;Main_B1.c: 618: setLights_SwOff(status);
  8413  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  8414  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  8415  05F5  0856               	movf	Exception_Main@status,w
  8416  05F6  158A  2428         	fcall	_setLights_SwOff
  8417  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  8418  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  8419  05FA  0008               	return
  8420  05FB                     l5305:	
  8421                           ;Main_B1.c: 623: }
  8422                           
  8423                           ;Main_B1.c: 620: }
  8424                           ;Main_B1.c: 621: ;;
  8425                           ;Main_B1.c: 622: break;
  8426                           
  8427  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  8428  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  8429  05FD  085B               	movf	Exception_Main@error,w
  8430                           
  8431                           ; Switch size 1, requested type "space"
  8432                           ; Number of cases is 3, Range of values is 1 to 3
  8433                           ; switch strategies available:
  8434                           ; Name         Instructions Cycles
  8435                           ; simple_byte           10     6 (average)
  8436                           ; direct_byte           16    10 (fixed)
  8437                           ; jumptable            263     9 (fixed)
  8438                           ;	Chosen strategy is simple_byte
  8439  05FE  3A01               	xorlw	1	; case 1
  8440  05FF  1903               	skipnz
  8441  0600  2D72               	goto	l5275
  8442  0601  3A03               	xorlw	3	; case 2
  8443  0602  1903               	skipnz
  8444  0603  2DA5               	goto	l5285
  8445  0604  3A01               	xorlw	1	; case 3
  8446  0605  1903               	skipnz
  8447  0606  2DDB               	goto	l5297
  8448  0607  2E09               	goto	l621
  8449  0608  0008               	return
  8450  0609                     l621:	
  8451  0609  0008               	return
  8452  060A                     __end_of_Exception_Main:	
  8453                           
  8454                           	psect	text52
  8455  0D0C                     __ptext52:	
  8456 ;; *************** function _setLights_SwOn *****************
  8457 ;; Defined at:
  8458 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  sw              1    wreg     unsigned char 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  sw              1    3[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;		None               void
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8472 ;;      Params:         0       0       0       0
  8473 ;;      Locals:         0       1       0       0
  8474 ;;      Temps:          0       0       0       0
  8475 ;;      Totals:         0       1       0       0
  8476 ;;Total ram usage:        1 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    4
  8479 ;; This function calls:
  8480 ;;		_LightsPointSelect
  8481 ;;		_getLights_Status
  8482 ;;		_setLights_Trigger
  8483 ;; This function is called by:
  8484 ;;		_Exception_Main
  8485 ;;		_PIR_Main
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           
  8490                           ;psect for function _setLights_SwOn
  8491  0D0C                     _setLights_SwOn:	
  8492                           
  8493                           ;incstack = 0
  8494                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8495                           ;setLights_SwOn@sw stored from wreg
  8496  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  8497  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  8498  0D0E  00D0               	movwf	setLights_SwOn@sw
  8499                           
  8500                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8501  0D0F  0850               	movf	setLights_SwOn@sw,w
  8502  0D10  158A  230D  158A   	fcall	_LightsPointSelect
  8503                           
  8504                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8505  0D13  0A78               	incf	_Lights,w
  8506  0D14  0084               	movwf	4
  8507  0D15  1383               	bcf	3,7	;select IRP bank0
  8508  0D16  1500               	bsf	0,2
  8509                           
  8510                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8511  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  8512  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  8513  0D19  0850               	movf	setLights_SwOn@sw,w
  8514  0D1A  158A  2373  158A   	fcall	_getLights_Status
  8515  0D1D  3800               	iorlw	0
  8516  0D1E  1D03               	skipz
  8517  0D1F  2D2C               	goto	l4673
  8518                           
  8519                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8520  0D20  0A78               	incf	_Lights,w
  8521  0D21  0084               	movwf	4
  8522  0D22  1383               	bcf	3,7	;select IRP bank0
  8523  0D23  1580               	bsf	0,3
  8524                           
  8525                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8526  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  8527  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  8528  0D26  01CD               	clrf	setLights_Trigger@command
  8529  0D27  0ACD               	incf	setLights_Trigger@command,f
  8530  0D28  0850               	movf	setLights_SwOn@sw,w
  8531  0D29  158A  2476         	fcall	_setLights_Trigger
  8532                           
  8533                           ;TriacRelay_B1.c: 418: } else {
  8534  0D2B  0008               	return
  8535  0D2C                     l4673:	
  8536                           
  8537                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8538  0D2C  0A78               	incf	_Lights,w
  8539  0D2D  0084               	movwf	4
  8540  0D2E  1383               	bcf	3,7	;select IRP bank0
  8541  0D2F  1180               	bcf	0,3
  8542  0D30  0008               	return
  8543  0D31                     __end_of_setLights_SwOn:	
  8544                           
  8545                           	psect	text53
  8546  0B73                     __ptext53:	
  8547 ;; *************** function _getLights_Status *****************
  8548 ;; Defined at:
  8549 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  lights          1    wreg     unsigned char 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  lights          1    0[BANK0 ] unsigned char 
  8554 ;;  status          1    1[BANK0 ] unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      unsigned char 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8564 ;;      Params:         0       0       0       0
  8565 ;;      Locals:         0       2       0       0
  8566 ;;      Temps:          0       0       0       0
  8567 ;;      Totals:         0       2       0       0
  8568 ;;Total ram usage:        2 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    3
  8571 ;; This function calls:
  8572 ;;		_LightsPointSelect
  8573 ;; This function is called by:
  8574 ;;		_Exception_Main
  8575 ;;		_PIR_Main
  8576 ;;		_setLights_SwOn
  8577 ;;		_setLights_ErrorClose
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           
  8582                           ;psect for function _getLights_Status
  8583  0B73                     _getLights_Status:	
  8584                           
  8585                           ;incstack = 0
  8586                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8587                           ;getLights_Status@lights stored from wreg
  8588  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  8589  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  8590  0B75  00CD               	movwf	getLights_Status@lights
  8591                           
  8592                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8593  0B76  084D               	movf	getLights_Status@lights,w
  8594  0B77  158A  230D         	fcall	_LightsPointSelect
  8595                           
  8596                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8597  0B79  0878               	movf	_Lights,w
  8598  0B7A  0084               	movwf	4
  8599  0B7B  3000               	movlw	0
  8600  0B7C  1383               	bcf	3,7	;select IRP bank0
  8601  0B7D  1900               	btfsc	0,2
  8602  0B7E  3001               	movlw	1
  8603  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  8604  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  8605  0B81  00CE               	movwf	getLights_Status@status
  8606                           
  8607                           ;TriacRelay_B1.c: 274: return status;
  8608  0B82  084E               	movf	getLights_Status@status,w
  8609  0B83  0008               	return
  8610  0B84                     __end_of_getLights_Status:	
  8611                           
  8612                           	psect	text54
  8613  0C28                     __ptext54:	
  8614 ;; *************** function _setLights_SwOff *****************
  8615 ;; Defined at:
  8616 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  sw              1    wreg     unsigned char 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  sw              1    3[BANK0 ] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;		None               void
  8623 ;; Registers used:
  8624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8630 ;;      Params:         0       0       0       0
  8631 ;;      Locals:         0       1       0       0
  8632 ;;      Temps:          0       0       0       0
  8633 ;;      Totals:         0       1       0       0
  8634 ;;Total ram usage:        1 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    4
  8637 ;; This function calls:
  8638 ;;		_LightsPointSelect
  8639 ;;		_setLights_Trigger
  8640 ;; This function is called by:
  8641 ;;		_Exception_Main
  8642 ;;		_PIR_Main
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function _setLights_SwOff
  8648  0C28                     _setLights_SwOff:	
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8652                           ;setLights_SwOff@sw stored from wreg
  8653  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  8654  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  8655  0C2A  00D0               	movwf	setLights_SwOff@sw
  8656                           
  8657                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8658  0C2B  0850               	movf	setLights_SwOff@sw,w
  8659  0C2C  158A  230D  158A   	fcall	_LightsPointSelect
  8660                           
  8661                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8662  0C2F  0A78               	incf	_Lights,w
  8663  0C30  0084               	movwf	4
  8664  0C31  1383               	bcf	3,7	;select IRP bank0
  8665  0C32  1D00               	btfss	0,2
  8666  0C33  0008               	return
  8667                           
  8668                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8669  0C34  0A78               	incf	_Lights,w
  8670  0C35  0084               	movwf	4
  8671  0C36  1100               	bcf	0,2
  8672                           
  8673                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8674  0C37  0A78               	incf	_Lights,w
  8675  0C38  0084               	movwf	4
  8676  0C39  1980               	btfsc	0,3
  8677  0C3A  0008               	return
  8678                           
  8679                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8680  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  8681  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  8682  0C3D  01CD               	clrf	setLights_Trigger@command
  8683  0C3E  0850               	movf	setLights_SwOff@sw,w
  8684  0C3F  158A  2476         	fcall	_setLights_Trigger
  8685  0C41  0008               	return
  8686  0C42                     __end_of_setLights_SwOff:	
  8687                           
  8688                           	psect	text55
  8689  0C76                     __ptext55:	
  8690 ;; *************** function _setLights_Trigger *****************
  8691 ;; Defined at:
  8692 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  lights          1    wreg     unsigned char 
  8695 ;;  command         1    0[BANK0 ] unsigned char 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  lights          1    2[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;		None               void
  8700 ;; Registers used:
  8701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8707 ;;      Params:         0       1       0       0
  8708 ;;      Locals:         0       1       0       0
  8709 ;;      Temps:          0       1       0       0
  8710 ;;      Totals:         0       3       0       0
  8711 ;;Total ram usage:        3 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    3
  8714 ;; This function calls:
  8715 ;;		_LightsPointSelect
  8716 ;; This function is called by:
  8717 ;;		_setLights_SwOn
  8718 ;;		_setLights_SwOff
  8719 ;;		_setLights_ErrorClose
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _setLights_Trigger
  8725  0C76                     _setLights_Trigger:	
  8726                           
  8727                           ;incstack = 0
  8728                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8729                           ;setLights_Trigger@lights stored from wreg
  8730  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  8731  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  8732  0C78  00CF               	movwf	setLights_Trigger@lights
  8733                           
  8734                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8735  0C79  084F               	movf	setLights_Trigger@lights,w
  8736  0C7A  158A  230D         	fcall	_LightsPointSelect
  8737                           
  8738                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8739  0C7C  0878               	movf	_Lights,w
  8740  0C7D  0084               	movwf	4
  8741  0C7E  1383               	bcf	3,7	;select IRP bank0
  8742  0C7F  1580               	bsf	0,3
  8743                           
  8744                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8745  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  8746  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  8747  0C82  084D               	movf	setLights_Trigger@command,w
  8748  0C83  3A01               	xorlw	1
  8749  0C84  3000               	movlw	0
  8750  0C85  1903               	skipnz
  8751  0C86  3001               	movlw	1
  8752  0C87  00CE               	movwf	??_setLights_Trigger
  8753  0C88  0878               	movf	_Lights,w
  8754  0C89  0084               	movwf	4
  8755  0C8A  0ECE               	swapf	??_setLights_Trigger,f
  8756  0C8B  0800               	movf	0,w
  8757  0C8C  064E               	xorwf	??_setLights_Trigger,w
  8758  0C8D  39EF               	andlw	-17
  8759  0C8E  064E               	xorwf	??_setLights_Trigger,w
  8760  0C8F  0080               	movwf	0
  8761  0C90  0008               	return
  8762  0C91                     __end_of_setLights_Trigger:	
  8763                           
  8764                           	psect	text56
  8765  0B0D                     __ptext56:	
  8766 ;; *************** function _LightsPointSelect *****************
  8767 ;; Defined at:
  8768 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  lights          1    wreg     unsigned char 
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  lights          1    5[COMMON] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8782 ;;      Params:         0       0       0       0
  8783 ;;      Locals:         1       0       0       0
  8784 ;;      Temps:          1       0       0       0
  8785 ;;      Totals:         2       0       0       0
  8786 ;;Total ram usage:        2 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    2
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_setLights_Initialization
  8793 ;;		_setLights_Main
  8794 ;;		_Lights_Control
  8795 ;;		_getLights_Status
  8796 ;;		_setLights_Trigger
  8797 ;;		_setLights_SwOn
  8798 ;;		_setLights_SwOff
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _LightsPointSelect
  8804  0B0D                     _LightsPointSelect:	
  8805                           
  8806                           ;incstack = 0
  8807                           ; Regs used in _LightsPointSelect: [wreg]
  8808                           ;LightsPointSelect@lights stored from wreg
  8809  0B0D  00F5               	movwf	LightsPointSelect@lights
  8810                           
  8811                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8812  0B0E  0875               	movf	LightsPointSelect@lights,w
  8813  0B0F  3A01               	xorlw	1
  8814  0B10  1D03               	skipz
  8815  0B11  0008               	return
  8816                           
  8817                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8818  0B12  3040               	movlw	_Lights1& (0+255)
  8819  0B13  00F4               	movwf	??_LightsPointSelect
  8820  0B14  0874               	movf	??_LightsPointSelect,w
  8821  0B15  00F8               	movwf	_Lights
  8822  0B16  0008               	return
  8823  0B17                     __end_of_LightsPointSelect:	
  8824                           
  8825                           	psect	text57
  8826  0F35                     __ptext57:	
  8827 ;; *************** function _setLED *****************
  8828 ;; Defined at:
  8829 ;;		line 81 in file "../src/LED_B1.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;  led             1    wreg     unsigned char 
  8832 ;;  command         1    0[BANK0 ] unsigned char 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  led             1    1[BANK0 ] unsigned char 
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8844 ;;      Params:         0       1       0       0
  8845 ;;      Locals:         0       1       0       0
  8846 ;;      Temps:          0       0       0       0
  8847 ;;      Totals:         0       2       0       0
  8848 ;;Total ram usage:        2 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    3
  8851 ;; This function calls:
  8852 ;;		_LedPointSelect
  8853 ;; This function is called by:
  8854 ;;		_setLED_Initialization
  8855 ;;		_setPIRLED_Main
  8856 ;;		_Exception_Main
  8857 ;;		_PIR_Main
  8858 ;;		_setLights
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _setLED
  8864  0F35                     _setLED:	
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8868                           ;setLED@led stored from wreg
  8869  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8870  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8871  0F37  00CE               	movwf	setLED@led
  8872                           
  8873                           ;LED_B1.c: 82: LedPointSelect(led);
  8874  0F38  084E               	movf	setLED@led,w
  8875  0F39  158A  2395  158A   	fcall	_LedPointSelect
  8876                           
  8877                           ;LED_B1.c: 83: if (command == 0) {
  8878  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  8879  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  8880  0F3E  08CD               	movf	setLED@command,f
  8881  0F3F  1D03               	skipz
  8882  0F40  2F4A               	goto	l4403
  8883                           
  8884                           ;LED_B1.c: 85: if (led == 1) {
  8885  0F41  084E               	movf	setLED@led,w
  8886  0F42  3A01               	xorlw	1
  8887  0F43  1D03               	skipz
  8888  0F44  2F46               	goto	l4399
  8889                           
  8890                           ;LED_B1.c: 89: RA6 = 1;
  8891  0F45  1705               	bsf	5,6	;volatile
  8892  0F46                     l4399:	
  8893                           
  8894                           ;LED_B1.c: 91: }
  8895                           ;LED_B1.c: 94: if (led == 2) {
  8896  0F46  084E               	movf	setLED@led,w
  8897  0F47  3A02               	xorlw	2
  8898  0F48  1903               	btfsc	3,2
  8899                           
  8900                           ;LED_B1.c: 98: RA7 = 1;
  8901  0F49  1785               	bsf	5,7	;volatile
  8902  0F4A                     l4403:	
  8903                           
  8904                           ;LED_B1.c: 100: }
  8905                           ;LED_B1.c: 120: }
  8906                           ;LED_B1.c: 121: if (command == 1) {
  8907  0F4A  084D               	movf	setLED@command,w
  8908  0F4B  3A01               	xorlw	1
  8909  0F4C  1D03               	skipz
  8910  0F4D  2F57               	goto	l4413
  8911                           
  8912                           ;LED_B1.c: 123: if (led == 1) {
  8913  0F4E  084E               	movf	setLED@led,w
  8914  0F4F  3A01               	xorlw	1
  8915  0F50  1D03               	skipz
  8916  0F51  2F53               	goto	l4409
  8917                           
  8918                           ;LED_B1.c: 127: RA6 = 0;
  8919  0F52  1305               	bcf	5,6	;volatile
  8920  0F53                     l4409:	
  8921                           
  8922                           ;LED_B1.c: 129: }
  8923                           ;LED_B1.c: 132: if (led == 2) {
  8924  0F53  084E               	movf	setLED@led,w
  8925  0F54  3A02               	xorlw	2
  8926  0F55  1903               	btfsc	3,2
  8927                           
  8928                           ;LED_B1.c: 136: RA7 = 0;
  8929  0F56  1385               	bcf	5,7	;volatile
  8930  0F57                     l4413:	
  8931                           
  8932                           ;LED_B1.c: 138: }
  8933                           ;LED_B1.c: 158: }
  8934                           ;LED_B1.c: 159: if (command == 10) {
  8935  0F57  084D               	movf	setLED@command,w
  8936  0F58  3A0A               	xorlw	10
  8937  0F59  1D03               	skipz
  8938  0F5A  2F6E               	goto	l4427
  8939                           
  8940                           ;LED_B1.c: 160: LED->GO = 0;
  8941  0F5B  0876               	movf	_LED,w
  8942  0F5C  0084               	movwf	4
  8943  0F5D  1383               	bcf	3,7	;select IRP bank0
  8944  0F5E  1080               	bcf	0,1
  8945                           
  8946                           ;LED_B1.c: 161: LED->Time = 0;
  8947  0F5F  0A76               	incf	_LED,w
  8948  0F60  0084               	movwf	4
  8949  0F61  0180               	clrf	0
  8950  0F62  0A84               	incf	4,f
  8951  0F63  0180               	clrf	0
  8952                           
  8953                           ;LED_B1.c: 163: if (led == 1) {
  8954  0F64  084E               	movf	setLED@led,w
  8955  0F65  3A01               	xorlw	1
  8956  0F66  1D03               	skipz
  8957  0F67  2F6A               	goto	l4423
  8958                           
  8959                           ;LED_B1.c: 167: RA6 = 1;
  8960  0F68  1705               	bsf	5,6	;volatile
  8961                           
  8962                           ;LED_B1.c: 169: }
  8963  0F69  2F6E               	goto	l4427
  8964  0F6A                     l4423:	
  8965                           
  8966                           ;LED_B1.c: 172: else if (led == 2) {
  8967  0F6A  084E               	movf	setLED@led,w
  8968  0F6B  3A02               	xorlw	2
  8969  0F6C  1903               	btfsc	3,2
  8970                           
  8971                           ;LED_B1.c: 176: RA7 = 1;
  8972  0F6D  1785               	bsf	5,7	;volatile
  8973  0F6E                     l4427:	
  8974                           
  8975                           ;LED_B1.c: 178: }
  8976                           ;LED_B1.c: 198: }
  8977                           ;LED_B1.c: 199: if (command == 11) {
  8978  0F6E  084D               	movf	setLED@command,w
  8979  0F6F  3A0B               	xorlw	11
  8980  0F70  1D03               	skipz
  8981  0F71  2F76               	goto	l4431
  8982                           
  8983                           ;LED_B1.c: 200: LED->GO = 1;
  8984  0F72  0876               	movf	_LED,w
  8985  0F73  0084               	movwf	4
  8986  0F74  1383               	bcf	3,7	;select IRP bank0
  8987  0F75  1480               	bsf	0,1
  8988  0F76                     l4431:	
  8989                           
  8990                           ;LED_B1.c: 201: }
  8991                           ;LED_B1.c: 205: if (command == 111) {
  8992  0F76  084D               	movf	setLED@command,w
  8993  0F77  3A6F               	xorlw	111
  8994  0F78  1D03               	skipz
  8995  0F79  2F94               	goto	l4457
  8996                           
  8997                           ;LED_B1.c: 206: PIRLED.Count = 0;
  8998  0F7A  01AB               	clrf	_PIRLED+1
  8999                           
  9000                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9001  0F7B  01AC               	clrf	_PIRLED+2
  9002  0F7C  01AD               	clrf	_PIRLED+3
  9003                           
  9004                           ;LED_B1.c: 208: PIRLED.status = 0;
  9005  0F7D  122A               	bcf	_PIRLED,4
  9006                           
  9007                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9008  0F7E  142A               	bsf	_PIRLED,0
  9009                           
  9010                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9011  0F7F  10AA               	bcf	_PIRLED,1
  9012                           
  9013                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9014  0F80  112A               	bcf	_PIRLED,2
  9015                           
  9016                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9017  0F81  11AA               	bcf	_PIRLED,3
  9018                           
  9019                           ;LED_B1.c: 213: if (led == 1) {
  9020  0F82  084E               	movf	setLED@led,w
  9021  0F83  3A01               	xorlw	1
  9022  0F84  1D03               	skipz
  9023  0F85  2F88               	goto	l4449
  9024                           
  9025                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9026  0F86  14AA               	bsf	_PIRLED,1
  9027                           
  9028                           ;LED_B1.c: 215: } else if (led == 2) {
  9029  0F87  0008               	return
  9030  0F88                     l4449:	
  9031  0F88  084E               	movf	setLED@led,w
  9032  0F89  3A02               	xorlw	2
  9033  0F8A  1D03               	skipz
  9034  0F8B  2F8E               	goto	l4453
  9035                           
  9036                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9037  0F8C  152A               	bsf	_PIRLED,2
  9038                           
  9039                           ;LED_B1.c: 217: } else if (led == 3) {
  9040  0F8D  0008               	return
  9041  0F8E                     l4453:	
  9042  0F8E  084E               	movf	setLED@led,w
  9043  0F8F  3A03               	xorlw	3
  9044  0F90  1D03               	skipz
  9045  0F91  0008               	return
  9046                           
  9047                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9048  0F92  15AA               	bsf	_PIRLED,3
  9049                           
  9050                           ;LED_B1.c: 219: }
  9051                           ;LED_B1.c: 220: } else if (command == 110) {
  9052  0F93  0008               	return
  9053  0F94                     l4457:	
  9054  0F94  084D               	movf	setLED@command,w
  9055  0F95  3A6E               	xorlw	110
  9056  0F96  1D03               	skipz
  9057  0F97  0008               	return
  9058                           
  9059                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9060  0F98  102A               	bcf	_PIRLED,0
  9061  0F99  0008               	return
  9062  0F9A                     __end_of_setLED:	
  9063                           
  9064                           	psect	text58
  9065  0B95                     __ptext58:	
  9066 ;; *************** function _LedPointSelect *****************
  9067 ;; Defined at:
  9068 ;;		line 7 in file "../src/LED_B1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;  led             1    wreg     unsigned char 
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  led             1    5[COMMON] unsigned char 
  9073 ;; Return value:  Size  Location     Type
  9074 ;;		None               void
  9075 ;; Registers used:
  9076 ;;		wreg
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9082 ;;      Params:         0       0       0       0
  9083 ;;      Locals:         1       0       0       0
  9084 ;;      Temps:          1       0       0       0
  9085 ;;      Totals:         2       0       0       0
  9086 ;;Total ram usage:        2 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    2
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_setLED_Initialization
  9093 ;;		_setLED
  9094 ;;		_setLED_Main
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _LedPointSelect
  9100  0B95                     _LedPointSelect:	
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _LedPointSelect: [wreg]
  9104                           ;LedPointSelect@led stored from wreg
  9105  0B95  00F5               	movwf	LedPointSelect@led
  9106                           
  9107                           ;LED_B1.c: 9: if (led == 1) {
  9108  0B96  0875               	movf	LedPointSelect@led,w
  9109  0B97  3A01               	xorlw	1
  9110  0B98  1D03               	skipz
  9111  0B99  2B9E               	goto	l254
  9112                           
  9113                           ;LED_B1.c: 10: LED = &VarLED1;
  9114  0B9A  3045               	movlw	_VarLED1& (0+255)
  9115  0B9B  00F4               	movwf	??_LedPointSelect
  9116  0B9C  0874               	movf	??_LedPointSelect,w
  9117  0B9D  00F6               	movwf	_LED
  9118  0B9E                     l254:	
  9119                           
  9120                           ;LED_B1.c: 11: }
  9121                           ;LED_B1.c: 14: if (led == 2) {
  9122  0B9E  0875               	movf	LedPointSelect@led,w
  9123  0B9F  3A02               	xorlw	2
  9124  0BA0  1D03               	skipz
  9125  0BA1  0008               	return
  9126                           
  9127                           ;LED_B1.c: 15: LED = &VarLED2;
  9128  0BA2  3049               	movlw	_VarLED2& (0+255)
  9129  0BA3  00F4               	movwf	??_LedPointSelect
  9130  0BA4  0874               	movf	??_LedPointSelect,w
  9131  0BA5  00F6               	movwf	_LED
  9132  0BA6  0008               	return
  9133  0BA7                     __end_of_LedPointSelect:	
  9134                           
  9135                           	psect	text59
  9136  0B04                     __ptext59:	
  9137 ;; *************** function _getMain_All_LightsStatus *****************
  9138 ;; Defined at:
  9139 ;;		line 373 in file "../src/Main_B1.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;		None
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  status          1    4[COMMON] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      unsigned char 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9153 ;;      Params:         0       0       0       0
  9154 ;;      Locals:         1       0       0       0
  9155 ;;      Temps:          0       0       0       0
  9156 ;;      Totals:         1       0       0       0
  9157 ;;Total ram usage:        1 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    2
  9160 ;; This function calls:
  9161 ;;		Nothing
  9162 ;; This function is called by:
  9163 ;;		_Exception_Main
  9164 ;;		_Load_Main
  9165 ;;		_setTemp_Main
  9166 ;;		_Lights_Main
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           
  9171                           ;psect for function _getMain_All_LightsStatus
  9172  0B04                     _getMain_All_LightsStatus:	
  9173                           
  9174                           ;Main_B1.c: 374: char status = 0;
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9178  0B04  01F4               	clrf	getMain_All_LightsStatus@status
  9179                           
  9180                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9181  0B05  3000               	movlw	0
  9182  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  9183  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  9184  0B08  1940               	btfsc	_Lights1,2
  9185  0B09  3001               	movlw	1
  9186  0B0A  00F4               	movwf	getMain_All_LightsStatus@status
  9187                           
  9188                           ;Main_B1.c: 420: return status;
  9189  0B0B  0874               	movf	getMain_All_LightsStatus@status,w
  9190  0B0C  0008               	return
  9191  0B0D                     __end_of_getMain_All_LightsStatus:	
  9192                           
  9193                           	psect	text60
  9194  0DBA                     __ptext60:	
  9195 ;; *************** function _getMain_All_Error_Status *****************
  9196 ;; Defined at:
  9197 ;;		line 424 in file "../src/Main_B1.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  command         1    wreg     unsigned char 
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;  command         1    4[BANK0 ] unsigned char 
  9202 ;;  status          1    5[BANK0 ] unsigned char 
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      unsigned char 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9212 ;;      Params:         0       0       0       0
  9213 ;;      Locals:         0       6       0       0
  9214 ;;      Temps:          1       0       0       0
  9215 ;;      Totals:         1       6       0       0
  9216 ;;Total ram usage:        7 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    2
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		_Exception_Main
  9223 ;;		_Load_Main
  9224 ;;		_setTemp_Main
  9225 ;;		_PIR_Main
  9226 ;;		_setSYSC_Main
  9227 ;;		_Lights_Main
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _getMain_All_Error_Status
  9233  0DBA                     _getMain_All_Error_Status:	
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9237                           ;getMain_All_Error_Status@command stored from wreg
  9238  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  9239  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  9240  0DBC  00D1               	movwf	getMain_All_Error_Status@command
  9241                           
  9242                           ;Main_B1.c: 425: char status = 0;
  9243  0DBD  01D2               	clrf	getMain_All_Error_Status@status
  9244                           
  9245                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9246  0DBE  08D2               	movf	getMain_All_Error_Status@status,f
  9247  0DBF  1D03               	skipz
  9248  0DC0  2DC9               	goto	l3197
  9249  0DC1  0851               	movf	getMain_All_Error_Status@command,w
  9250  0DC2  3A01               	xorlw	1
  9251  0DC3  1903               	skipnz
  9252  0DC4  2DC9               	goto	l3197
  9253                           
  9254                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9255  0DC5  3000               	movlw	0
  9256  0DC6  18A0               	btfsc	_SYSC,1
  9257  0DC7  3001               	movlw	1
  9258  0DC8  00D2               	movwf	getMain_All_Error_Status@status
  9259  0DC9                     l3197:	
  9260                           
  9261                           ;Main_B1.c: 430: }
  9262                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9263  0DC9  08D2               	movf	getMain_All_Error_Status@status,f
  9264  0DCA  1D03               	skipz
  9265  0DCB  2DDD               	goto	l3207
  9266  0DCC  0851               	movf	getMain_All_Error_Status@command,w
  9267  0DCD  3A02               	xorlw	2
  9268  0DCE  1903               	skipnz
  9269  0DCF  2DDD               	goto	l3207
  9270                           
  9271                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9272  0DD0  18B9               	btfsc	_Temp,1
  9273  0DD1  2DD5               	goto	l3205
  9274  0DD2  01CD               	clrf	_getMain_All_Error_Status$2127
  9275  0DD3  01CE               	clrf	_getMain_All_Error_Status$2127+1
  9276  0DD4  2DD9               	goto	l590
  9277  0DD5                     l3205:	
  9278  0DD5  3002               	movlw	2
  9279  0DD6  00CD               	movwf	_getMain_All_Error_Status$2127
  9280  0DD7  3000               	movlw	0
  9281  0DD8  00CE               	movwf	_getMain_All_Error_Status$2127+1
  9282  0DD9                     l590:	
  9283  0DD9  084D               	movf	_getMain_All_Error_Status$2127,w
  9284  0DDA  00F4               	movwf	??_getMain_All_Error_Status
  9285  0DDB  0874               	movf	??_getMain_All_Error_Status,w
  9286  0DDC  00D2               	movwf	getMain_All_Error_Status@status
  9287  0DDD                     l3207:	
  9288                           
  9289                           ;Main_B1.c: 438: }
  9290                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9291  0DDD  08D2               	movf	getMain_All_Error_Status@status,f
  9292  0DDE  1D03               	skipz
  9293  0DDF  2DF6               	goto	l591
  9294  0DE0  0851               	movf	getMain_All_Error_Status@command,w
  9295  0DE1  3A03               	xorlw	3
  9296  0DE2  1903               	skipnz
  9297  0DE3  2DF6               	goto	l591
  9298                           
  9299                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9300  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  9301  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  9302  0DE6  1ACA               	btfsc	_Load^(0+128),5
  9303  0DE7  2DED               	goto	l3215
  9304  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  9305  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  9306  0DEA  01CF               	clrf	_getMain_All_Error_Status$2128
  9307  0DEB  01D0               	clrf	_getMain_All_Error_Status$2128+1
  9308  0DEC  2DF2               	goto	l595
  9309  0DED                     l3215:	
  9310  0DED  3003               	movlw	3
  9311  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  9312  0DEF  00CF               	movwf	_getMain_All_Error_Status$2128
  9313  0DF0  3000               	movlw	0
  9314  0DF1  00D0               	movwf	_getMain_All_Error_Status$2128+1
  9315  0DF2                     l595:	
  9316  0DF2  084F               	movf	_getMain_All_Error_Status$2128,w
  9317  0DF3  00F4               	movwf	??_getMain_All_Error_Status
  9318  0DF4  0874               	movf	??_getMain_All_Error_Status,w
  9319  0DF5  00D2               	movwf	getMain_All_Error_Status@status
  9320  0DF6                     l591:	
  9321                           
  9322                           ;Main_B1.c: 445: }
  9323                           ;Main_B1.c: 455: return status;
  9324  0DF6  0852               	movf	getMain_All_Error_Status@status,w
  9325  0DF7  0008               	return
  9326  0DF8                     __end_of_getMain_All_Error_Status:	
  9327                           
  9328                           	psect	text61
  9329  0AFB                     __ptext61:	
  9330 ;; *************** function _getAll_Lights_Line *****************
  9331 ;; Defined at:
  9332 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  line            1    4[COMMON] unsigned char 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      unsigned char 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9346 ;;      Params:         0       0       0       0
  9347 ;;      Locals:         1       0       0       0
  9348 ;;      Temps:          0       0       0       0
  9349 ;;      Totals:         1       0       0       0
  9350 ;;Total ram usage:        1 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    2
  9353 ;; This function calls:
  9354 ;;		Nothing
  9355 ;; This function is called by:
  9356 ;;		_Exception_Main
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _getAll_Lights_Line
  9362  0AFB                     _getAll_Lights_Line:	
  9363                           
  9364                           ;TriacRelay_B1.c: 311: char line = 0;
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9368  0AFB  01F4               	clrf	getAll_Lights_Line@line
  9369                           
  9370                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9371  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  9372  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  9373  0AFE  1C41               	btfss	_Lights1+1,0
  9374  0AFF  2B02               	goto	l3461
  9375                           
  9376                           ;TriacRelay_B1.c: 314: line = 1;
  9377  0B00  01F4               	clrf	getAll_Lights_Line@line
  9378  0B01  0AF4               	incf	getAll_Lights_Line@line,f
  9379  0B02                     l3461:	
  9380                           
  9381                           ;TriacRelay_B1.c: 315: }
  9382                           ;TriacRelay_B1.c: 327: return line;
  9383  0B02  0874               	movf	getAll_Lights_Line@line,w
  9384  0B03  0008               	return
  9385  0B04                     __end_of_getAll_Lights_Line:	
  9386                           
  9387                           	psect	text62
  9388  0B2C                     __ptext62:	
  9389 ;; *************** function _DetectSYSC_Signal *****************
  9390 ;; Defined at:
  9391 ;;		line 50 in file "../src/SYSC_B1.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;		None
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;		None
  9396 ;; Return value:  Size  Location     Type
  9397 ;;		None               void
  9398 ;; Registers used:
  9399 ;;		status,2
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9405 ;;      Params:         0       0       0       0
  9406 ;;      Locals:         0       0       0       0
  9407 ;;      Temps:          0       0       0       0
  9408 ;;      Totals:         0       0       0       0
  9409 ;;Total ram usage:        0 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    2
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_main
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _DetectSYSC_Signal
  9421  0B2C                     _DetectSYSC_Signal:	
  9422                           
  9423                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9427  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  9428  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  9429  0B2E  19A0               	btfsc	_SYSC,3
  9430  0B2F  2B36               	goto	l1111
  9431                           
  9432                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9433  0B30  1E85               	btfss	5,5	;volatile
  9434  0B31  0008               	return
  9435                           
  9436                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9437  0B32  15A0               	bsf	_SYSC,3
  9438                           
  9439                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9440  0B33  01A1               	clrf	_SYSC+1
  9441  0B34  01A2               	clrf	_SYSC+2
  9442                           
  9443                           ;SYSC_B1.c: 55: }
  9444                           ;SYSC_B1.c: 56: } else {
  9445  0B35  0008               	return
  9446  0B36                     l1111:	
  9447                           
  9448                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9449  0B36  1A85               	btfsc	5,5	;volatile
  9450  0B37  0008               	return
  9451                           
  9452                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9453  0B38  11A0               	bcf	_SYSC,3
  9454  0B39  0008               	return
  9455  0B3A                     __end_of_DetectSYSC_Signal:	
  9456                           
  9457                           	psect	text63
  9458  0D86                     __ptext63:	
  9459 ;; *************** function _CDS_Main *****************
  9460 ;; Defined at:
  9461 ;;		line 11 in file "../src/CDS_B1.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9475 ;;      Params:         0       0       0       0
  9476 ;;      Locals:         0       0       0       0
  9477 ;;      Temps:          0       3       0       0
  9478 ;;      Totals:         0       3       0       0
  9479 ;;Total ram usage:        3 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    2
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_main
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _CDS_Main
  9491  0D86                     _CDS_Main:	
  9492                           
  9493                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9497  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  9498  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  9499  0D88  1C2E               	btfss	__CDS,0
  9500  0D89  0008               	return
  9501                           
  9502                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9503  0D8A  18AE               	btfsc	__CDS,1
  9504  0D8B  2D99               	goto	l117
  9505                           
  9506                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9507  0D8C  19AE               	btfsc	__CDS,3
  9508  0D8D  0008               	return
  9509                           
  9510                           ;CDS_B1.c: 16: _CDS.Time++;
  9511  0D8E  3001               	movlw	1
  9512  0D8F  00CD               	movwf	??_CDS_Main
  9513  0D90  084D               	movf	??_CDS_Main,w
  9514  0D91  07AF               	addwf	__CDS+1,f
  9515                           
  9516                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9517  0D92  3005               	movlw	5
  9518  0D93  022F               	subwf	__CDS+1,w
  9519  0D94  1C03               	skipc
  9520  0D95  0008               	return
  9521                           
  9522                           ;CDS_B1.c: 18: {
  9523                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9524  0D96  01AF               	clrf	__CDS+1
  9525                           
  9526                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9527  0D97  15AE               	bsf	__CDS,3
  9528                           
  9529                           ;CDS_B1.c: 21: }
  9530                           ;CDS_B1.c: 22: }
  9531                           ;CDS_B1.c: 23: } else {
  9532  0D98  0008               	return
  9533  0D99                     l117:	
  9534                           
  9535                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9536  0D99  1CAE               	btfss	__CDS,1
  9537  0D9A  0008               	return
  9538                           
  9539                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9540  0D9B  10AE               	bcf	__CDS,1
  9541                           
  9542                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9543  0D9C  1A2E               	btfsc	__CDS,4
  9544  0D9D  2DA4               	goto	l4785
  9545                           
  9546                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9547  0D9E  0830               	movf	__CDS+2,w
  9548  0D9F  0231               	subwf	__CDS+3,w
  9549  0DA0  1C03               	skipc
  9550  0DA1  0008               	return
  9551                           
  9552                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9553  0DA2  162E               	bsf	__CDS,4
  9554                           
  9555                           ;CDS_B1.c: 29: }
  9556                           ;CDS_B1.c: 30: } else {
  9557  0DA3  0008               	return
  9558  0DA4                     l4785:	
  9559                           
  9560                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9561  0DA4  0830               	movf	__CDS+2,w
  9562  0DA5  3E9C               	addlw	156
  9563  0DA6  00CD               	movwf	??_CDS_Main
  9564  0DA7  30FF               	movlw	255
  9565  0DA8  1803               	skipnc
  9566  0DA9  3000               	movlw	0
  9567  0DAA  00CE               	movwf	??_CDS_Main+1
  9568  0DAB  084E               	movf	??_CDS_Main+1,w
  9569  0DAC  3A80               	xorlw	128
  9570  0DAD  00CF               	movwf	??_CDS_Main+2
  9571  0DAE  3080               	movlw	128
  9572  0DAF  024F               	subwf	??_CDS_Main+2,w
  9573  0DB0  1D03               	skipz
  9574  0DB1  2DB4               	goto	u5805
  9575  0DB2  0831               	movf	__CDS+3,w
  9576  0DB3  024D               	subwf	??_CDS_Main,w
  9577  0DB4                     u5805:	
  9578  0DB4  1C03               	skipc
  9579  0DB5  0008               	return
  9580                           
  9581                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9582  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  9583  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  9584  0DB8  122E               	bcf	__CDS,4
  9585  0DB9  0008               	return
  9586  0DBA                     __end_of_CDS_Main:	
  9587                           
  9588                           	psect	text64
  9589  0AB2                     __ptext64:	
  9590 ;; *************** function _CDS_Initialization *****************
  9591 ;; Defined at:
  9592 ;;		line 7 in file "../src/CDS_B1.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		None
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9606 ;;      Params:         0       0       0       0
  9607 ;;      Locals:         0       0       0       0
  9608 ;;      Temps:          0       0       0       0
  9609 ;;      Totals:         0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    2
  9613 ;; This function calls:
  9614 ;;		Nothing
  9615 ;; This function is called by:
  9616 ;;		_main
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _CDS_Initialization
  9622  0AB2                     _CDS_Initialization:	
  9623                           
  9624                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9625                           
  9626                           ;incstack = 0
  9627                           ; Regs used in _CDS_Initialization: []
  9628  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  9629  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  9630  0AB4  142E               	bsf	__CDS,0
  9631  0AB5  0008               	return
  9632  0AB6                     __end_of_CDS_Initialization:	
  9633                           
  9634                           	psect	text65
  9635  0C10                     __ptext65:	
  9636 ;; *************** function _ISR *****************
  9637 ;; Defined at:
  9638 ;;		line 116 in file "../src/MCU_B1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg, status,2, status,0, pclath, cstack
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9652 ;;      Params:         0       0       0       0
  9653 ;;      Locals:         0       0       0       0
  9654 ;;      Temps:          4       0       0       0
  9655 ;;      Totals:         4       0       0       0
  9656 ;;Total ram usage:        4 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    1
  9659 ;; This function calls:
  9660 ;;		_TMR1_ISR
  9661 ;; This function is called by:
  9662 ;;		Interrupt level 1
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           
  9667                           ;psect for function _ISR
  9668  0C10                     _ISR:	
  9669                           
  9670                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9671  0C10  1683               	bsf	3,5	;RP0=1, select bank1
  9672  0C11  1303               	bcf	3,6	;RP1=0, select bank1
  9673  0C12  1C0C               	btfss	12,0	;volatile
  9674  0C13  2C1B               	goto	i1l426
  9675  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  9676  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  9677  0C16  1C0C               	btfss	12,0	;volatile
  9678  0C17  2C1B               	goto	i1l426
  9679                           
  9680                           ;MCU_B1.c: 126: TMR1_ISR();
  9681  0C18  158A  23CD  158A   	fcall	_TMR1_ISR
  9682  0C1B                     i1l426:	
  9683                           ;MCU_B1.c: 127: }
  9684                           ;MCU_B1.c: 148: return;
  9685                           
  9686  0C1B  0873               	movf	??_ISR+3,w
  9687  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  9688  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  9689  0C1E  00FF               	movwf	127
  9690  0C1F  0872               	movf	??_ISR+2,w
  9691  0C20  008A               	movwf	10
  9692  0C21  0871               	movf	??_ISR+1,w
  9693  0C22  0084               	movwf	4
  9694  0C23  0E70               	swapf	??_ISR^(0+-128),w
  9695  0C24  0083               	movwf	3
  9696  0C25  0EFE               	swapf	126,f
  9697  0C26  0E7E               	swapf	126,w
  9698  0C27  0009               	retfie
  9699  0C28                     __end_of_ISR:	
  9700                           
  9701                           	psect	intentry
  9702  0004                     __pintentry:	
  9703                           ;incstack = 0
  9704                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9705                           
  9706  0004                     interrupt_function:	
  9707  007E                     saved_w	set	btemp
  9708  0004  00FE               	movwf	btemp
  9709  0005  0E03               	swapf	3,w
  9710  0006  00F0               	movwf	??_ISR
  9711  0007  0804               	movf	4,w
  9712  0008  00F1               	movwf	??_ISR+1
  9713  0009  080A               	movf	10,w
  9714  000A  00F2               	movwf	??_ISR+2
  9715  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9716  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9717  000D  087F               	movf	btemp+1,w
  9718  000E  00F3               	movwf	??_ISR+3
  9719  000F  158A  2C10         	ljmp	_ISR
  9720                           
  9721                           	psect	text66
  9722  0BCD                     __ptext66:	
  9723 ;; *************** function _TMR1_ISR *****************
  9724 ;; Defined at:
  9725 ;;		line 236 in file "../src/MCU_B1.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;		None
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;		None               void
  9732 ;; Registers used:
  9733 ;;		wreg, status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9739 ;;      Params:         0       0       0       0
  9740 ;;      Locals:         0       0       0       0
  9741 ;;      Temps:          0       0       0       0
  9742 ;;      Totals:         0       0       0       0
  9743 ;;Total ram usage:        0 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_ISR
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           
  9753                           ;psect for function _TMR1_ISR
  9754  0BCD                     _TMR1_ISR:	
  9755                           
  9756                           ;MCU_B1.c: 268: Timer1.Count++;
  9757                           
  9758                           ;incstack = 0
  9759                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9760  0BCD  3001               	movlw	1
  9761  0BCE  1283               	bcf	3,5	;RP0=0, select bank0
  9762  0BCF  1303               	bcf	3,6	;RP1=0, select bank0
  9763  0BD0  07B3               	addwf	_Timer1+1,f
  9764  0BD1  1803               	skipnc
  9765  0BD2  0AB4               	incf	_Timer1+2,f
  9766  0BD3  3000               	movlw	0
  9767  0BD4  07B4               	addwf	_Timer1+2,f
  9768                           
  9769                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  9770  0BD5  30C8               	movlw	200
  9771  0BD6  0633               	xorwf	_Timer1+1,w
  9772  0BD7  0434               	iorwf	_Timer1+2,w
  9773  0BD8  1D03               	skipz
  9774  0BD9  2BDD               	goto	i1l3703
  9775                           
  9776                           ;MCU_B1.c: 270: Timer1.Count = 0;
  9777  0BDA  01B3               	clrf	_Timer1+1
  9778  0BDB  01B4               	clrf	_Timer1+2
  9779                           
  9780                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  9781  0BDC  1432               	bsf	_Timer1,0
  9782  0BDD                     i1l3703:	
  9783                           
  9784                           ;MCU_B1.c: 272: }
  9785                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  9786  0BDD  30FA               	movlw	250
  9787  0BDE  008F               	movwf	15	;volatile
  9788                           
  9789                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  9790  0BDF  3038               	movlw	56
  9791  0BE0  008E               	movwf	14	;volatile
  9792                           
  9793                           ;MCU_B1.c: 276: TMR1IF = 0;
  9794  0BE1  100C               	bcf	12,0	;volatile
  9795  0BE2  0008               	return
  9796  0BE3                     __end_of_TMR1_ISR:	
  9797  007E                     btemp	set	126	;btemp
  9798  007E                     wtemp	set	126
  9799  007E                     wtemp0	set	126
  9800  0080                     wtemp1	set	128
  9801  0082                     wtemp2	set	130
  9802  0084                     wtemp3	set	132
  9803  0086                     wtemp4	set	134
  9804  0088                     wtemp5	set	136
  9805  007F                     wtemp6	set	127
  9806  007E                     ttemp	set	126
  9807  007E                     ttemp0	set	126
  9808  0081                     ttemp1	set	129
  9809  0084                     ttemp2	set	132
  9810  0087                     ttemp3	set	135
  9811  007F                     ttemp4	set	127
  9812  007E                     ltemp	set	126
  9813  007E                     ltemp0	set	126
  9814  0082                     ltemp1	set	130
  9815  0086                     ltemp2	set	134
  9816  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         119
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      68
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   24953
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     654
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2829
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     347
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0     347
                                              5 COMMON     1     1      0
                                              6 BANK0      5     5      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    3936
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4194
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2899
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2636
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1031
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     907
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2292
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2292
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2376
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2376
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4302
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2252
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      94       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      44       5       85.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      94      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Mar 11 11:52:29 2015

                        __CFG_CP$ON 0000                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0074                        ___awdiv@sign 0052  
                    setTemp_Main@AD 0057                                  fsr 0004  
               ___wmul@multiplicand 004F                                 l117 0D99  
                               l254 0B9E                                 l700 0412  
                               l621 0609                                 l710 03EB  
                               l702 0269                                 l711 03E9  
                               l703 0265                                 l704 025F  
                               l716 0395                                 l900 0059  
                               l820 0783                                 l590 0DD9  
                               l591 0DF6                                 l831 077F  
                               l906 0091                                 l826 0729  
                               l595 0DF2                                 l908 00A4  
                               l898 0212                                 l899 008B  
                               _GIE 005F                                 _RB2 0032  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RA6 002E  
                               _RA7 002F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0C10                                 _PSA 040B  
                               _WDT 0035                   ??_setLights_SwOff 0076  
                               _Cmd 0037              getAll_Lights_Line@line 0074  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0AE3           __end_of_LightsPointSelect 0B17  
                  _getLights_Status 0B73             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 005C  
                              l1111 0B36                                l1263 0CC2  
                              l3205 0DD5                                l3215 0DED  
                              l3207 0DDD                                l1384 0D3D  
                    _Load_Main$2389 0057                                l5021 0366  
                              l5015 0356                                l3511 073C  
                              l5033 03B2                                l5025 0387  
                              l3505 072B                                l3513 073F  
                              l4403 0F4A                                l5043 03CB  
                              l5211 01A2                                l3461 0B02  
                              l3197 0DC9                                l4413 0F57  
                              l5301 05ED                                l5213 01B1  
                              l5125 007B                                l4431 0F76  
                              l4423 0F6A                                l4511 06A5  
                              l5207 0170                                l4409 0F53  
                              l5305 05FB                                l3537 076F  
                              l4427 0F6E                                l5227 01DC  
                              l5163 00C7                                l3563 0E4F  
                              l3547 077E                                l4611 0CA7  
                              l4453 0F8E                                l4533 06E3  
                              l4525 06C9                                l5245 020C  
                              l5181 00EB                                l4605 0C9E  
                              l5079 03FF                                l5191 012B  
                              l5175 00DE                                l4607 0CA1  
                              l5351 0FD8                                l4449 0F88  
                              l4457 0F94                                l5281 0599  
                              l4641 07B4                                l4529 06D0  
                              l5097 0CC3                                l3569 0E6A  
                              l5283 0576                                l5275 0572  
                              l4651 07C6                                l4571 0EEF  
                              l4715 0659                                l4547 0707  
                              l5179 00EA                                l5339 0FB5  
                              l5293 05CF                                l5285 05A5  
                              l5269 0563                                l4653 07D2  
                              l4645 07BA                                l4637 07AE  
                              l4581 0EF7                                l4565 0EE4  
                              l4399 0F46                                l5295 05AC  
                              l4655 07DA                                l4583 0F05  
                              l4751 0E10                                l5199 013F  
                              l4823 0EAF                                l4815 0E9B  
                              l4673 0D2C                                l5297 05DB  
                              l4657 07E8                                l4593 0F26  
                              l4761 0E31                                l4729 0D33  
                              l4921 050C                                l4905 04C2  
                              l4499 0C08                                l4843 0ED3  
                              l4827 0EB7                                l4915 04F0  
                              l3883 0C6C                                l4597 0F2E  
                              l4589 0F1B                                l4757 0E26  
                              l4749 0E02                                l4951 0249  
                              l4935 0546                                l4785 0DA4  
                              l4697 0D7F                                l4929 0538  
                              l4881 0477                                l4873 0461  
                              l4885 0482                                l4877 046C  
                              l4983 028F                                l4967 0268  
                              l4889 048D                                l4899 04A6  
                              l4989 02CB               _myMain_Initialization 0A9F  
                      __CFG_WDTE$ON 0000                                u3355 0E76  
                              u5135 0BC7                                u5305 0F1C  
                              _PEIE 005E                                u5420 07CF  
                              u6205 02C9                                u6215 0320  
                              u5440 07E5                                u5265 0EFA  
                              u5285 0F06                                u5605 0678  
                              u5295 0F12                                u5705 0E1D  
                              u5715 0E27                                u5635 0D3E  
                              u6195 028D                                u5580 0655  
                              u5805 0DB4                                u5565 0641  
                              u5645 0D45                                u6295 03AA  
                              u5675 0E05                                u6715 01C1  
                              u6645 0109                                u6830 05A2  
                              u5695 0E11                                u6655 0121  
                              u6850 05D8                                u6835 057F  
                              u6755 01F9                                u6675 0158  
                              u6855 05B5                                u6695 0194  
                              __CDS 002E             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0039                                _main 0F9A  
                              btemp 007E                     __end_of_WDT_Set 0B64  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0DBA        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0C76  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0AA3                  ?_setLights_Trigger 004D  
                  ??_setPIRLED_Main 004F                               ?_main 005F  
                   __end_of___awdiv 0F35                               _ADRES 001E  
                   ___awdiv@divisor 004D                               _T1CON 0010  
                   __end_of___lwdiv 0E38                               i1l426 0C1B  
                   ___awdiv@counter 0051                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0BCD  
                             _Light 0077                 ??_setLights_Trigger 004E  
                  __end_of_PIR_Main 0230                    __end_of_TMR1_ISR 0BE3  
                  __end_of_TMR1_Set 0B56                               _getAD 0C91  
    __end_of_setSYSC_Initialization 0ABE      getLights_Allow_Condition@allow 004D  
           __end_of_getLight_LoadGO 0AC9                    __end_of_WDT_Main 0B95  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0B21                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0BB9  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 005A  
                 getPIR_AD@channel2 0055              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0053                      _setLights_Main 0D56  
                    _setLights_Line 0B3A                     __initialization 0013  
                    _setLights_SwOn 0D0C                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0C91                        __end_of_main 1000  
                  __end_of_Fosc_Set 0AC3      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0548                           ??_ADC_Set 0074  
                            ??_main 0063               PIR_Main@Enable_Switch 005A  
               __end_of_Lights_Main 0CCB          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0B04                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 004F  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0DBA  
                            i1l3703 0BDD                              _FVRCON 009D  
            getLights_Status@lights 004D                              _PIRLED 002A  
                            _OSCCON 0090                  __size_of_Load_Main 01EA  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _IO_Set 0C42                Exception_Main@i_2140 0059  
            getLights_Status@status 004E              __end_of_setLights_Main 0D86  
            __end_of_setLights_Line 0B48              __end_of_setLights_SwOn 0D31  
      __size_of_SYSC_Initialization 0003          __end_of_Mcu_Initialization 0B73  
                            _Lights 0078                              _Timer1 0032  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 060A                Exception_Main@lights 0054  
                            ___wmul 0D31                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0056  
                            _setLED 0F35                              _myMain 0025  
                  ___awdiv@quotient 0053                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 005B         __end_of_Load_Initialization 0AA6  
   getLights_Allow_Condition@lights 0070                              saved_w 007E  
                  setLights_SwOn@sw 0050                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0AAC  
                    _Lights_Control 060A             __size_of_LedPointSelect 0012  
                         ?_CDS_Main 0070                  setTemp_Main@TempGO 0054  
                  ?_getLight_LoadGO 0070         __size_of_PIR_Initialization 000B  
           __end_of__initialization 0023                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0C28  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0B84                       __end_of_getAD 0CAD  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0AE3  
                __size_of_getPIR_AD 012E                         _Lights_Main 0CAD  
          _setLights_Initialization 0AD5                _getMain_Lights_Count 0B17  
                         ?_WDT_Main 0070                   __end_of_Load_Main 041A  
        __end_of_set_TimeoutCleared 0AD5                 ?_LED_Initialization 0070  
            __end_of_Lights_Control 068D                             ??_getAD 0075  
               _Temp_Initialization 0AAC                          ??_CDS_Main 004D  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Fosc_Set 0070         __size_of_getAll_Lights_Line 0009  
                 __end_of_Temp_Main 0AB2                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0074  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F9A          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 005E  
                           ?___wmul 004D                          ??_PIR_Main 0053  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 007F                          _getLoad_AD 0E7C  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 0AEB                             ?_setLED 004D  
           setLights_Trigger@lights 004F               ?_getMain_Lights_Count 0070  
                           _ADC_Set 0ADC                          _getTemp_AD 0CCB  
                        ??_WDT_Main 0074              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0070                   __end_of_getCDS_AD 0D0C  
                           _WDT_Set 0B56                       getPIR_AD@VRAD 005C  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0548  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0C42  
    _getLights_Allow_Condition$4224 004E                     __size_of_IO_Set 001A  
                        getCDS_AD@i 0050                          getCDS_AD@j 0051  
                           _Lights1 0040                             _VarLED1 0045  
                           _VarLED2 0049               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0075                             ___awdiv 0ED8  
                   __size_of___wmul 0025                             ___lwdiv 0DF8  
        ??_getMain_All_LightsStatus 0074                         PIR_Main@cds 0059  
                   __size_of_setLED 0065                             __ptext0 0000  
                           __ptext1 0C5C                             __ptext2 0A9F  
                           __ptext3 0CCB                             __ptext4 041A  
                           __ptext5 0E7C                             __ptext6 0CEA  
                           __ptext7 0C91                             __ptext8 0ACF  
                           __ptext9 0BB9                          getPIR_AD@i 005D  
                        getPIR_AD@j 0059                        __size_of_ISR 0018  
        ??_getMain_All_Error_Status 0074                 _SYSC_Initialization 0AA6  
           ??_myMain_Initialization 0074            ??_setTemp_Initialization 0074  
                    _LedPointSelect 0B95                     getTemp_AD@ADRES 0050  
                           clrloop0 07F9                   __end_of_setLights 070C  
              end_of_initialization 0023                       _getCDS_Status 0AF3  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0BA7  
                 setLights_SwOff@sw 0050                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0004                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 0ABA  
                       ?_getTemp_AD 0070            setLED_Initialization@led 004F  
           setTemp_Main@DangerValue 0056                  _Mcu_Initialization 0B64  
              __end_of_my_MainTimer 0C76                __end_of_setSYSC_Main 0E7C  
            __end_of_LedPointSelect 0BA7            Load_Main@ErrorCountValue 0059  
               setPIRLED_Main@count 0050                 ?_Mcu_Initialization 0070  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0052  
                  ??_setLights_SwOn 0076                           _SYSC_Main 0AA9  
   getMain_All_Error_Status@command 0051                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070                    ?_setLights_SwOff 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0053  
                    __end_of_IO_Set 0C5C          __end_of_CDS_Initialization 0AB6  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D56                   __size_of_PIR_Main 020A  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0F9A  
          ??_setSYSC_Initialization 0074                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0230  
                       __end_of_ISR 0C28          __end_of_PIR_Initialization 0B2C  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0ACF  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 0787                 __size_of_getLoad_AD 005C  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0ACF                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                 __size_of_getTemp_AD 001F  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0AAF  
                   setLights@lights 0051                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0055                     setLights@status 004F  
               Exception_Main@error 005B                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0B0D                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0055  
  __end_of_getMain_All_Error_Status 0DF8                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 005A                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 004D  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0B04  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0058                           _getCDS_AD 0CEA  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0BF9  
                         _getPIR_AD 041A         __size_of_LED_Initialization 0008  
                   Exception_Main@i 0057                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 004F                      Load_Main@error 0056  
            _setTemp_Initialization 0A9E                       _PIR_Main$2856 005B  
                          ?___awdiv 004D               __size_of_my_MainTimer 001A  
                          ?___lwdiv 004D               __size_of_setSYSC_Main 0044  
          setLights_Trigger@command 004D     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0BF9      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0AA0                      __size_of_getAD 001C  
                  ___lwdiv@quotient 0052                      _setPIRLED_Main 0787  
                          _CDS_Main 0D86                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0AAF                   interrupt_function 0004  
                        ?_getCDS_AD 004D                      ___wmul@product 0074  
                          _LED_Main 0AA0                           _setLights 068D  
                         clear_ram0 07F8    __end_of_setLights_Initialization 0ADC  
                      _my_MainTimer 0C5C                          ?_getPIR_AD 0055  
                      _setSYSC_Main 0E38                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                PIR_Main@TriggerValue 005D  
                          _PIR_Main 0026                        ??_getLoad_AD 004D  
                          _TMR1_ISR 0BCD                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0AC9                            _TMR1_Set 0B48  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 004D  
                          _WDT_Main 0B84                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 004D                      getPIR_AD@VRAD1 005B  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 007B  
                       ??_Load_Main 0054              __end_of_setPIRLED_Main 07F8  
    getMain_All_Error_Status@status 0052                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0ABE                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0ED8                  __end_of_getLoad_OK 0AF3  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 004F                  __end_of_getTemp_AD 0CEA  
            _setSYSC_Initialization 0ABA                   getLoad_AD@channel 004F  
                 _DetectSYSC_Signal 0B2C                            _SwDetect 0038  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2127 004D  
     _getMain_All_Error_Status$2128 004F                 _Load_Initialization 0AA3  
                ?_DetectSYSC_Signal 0070                           setLED@led 004E  
             ?_getLight_Load_Status 0070                        _setTemp_Main 070C  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0AB2               _Lights_Initialization 0AB6  
                 getTemp_AD@channel 004F                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 004D                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0051  
                          __ptext10 0B84                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0AAF  
                          __ptext21 0AF3                            __ptext13 070C  
                          __ptext30 0B17                            __ptext22 0B21  
                          __ptext14 0AAC                            __ptext31 0AC9  
                          __ptext23 0B64                            __ptext15 0A9E  
                          __ptext40 0B3A                            __ptext32 0AC3  
                          __ptext24 0B56                            __ptext16 0AA9  
                          __ptext41 0BF9                            __ptext33 0D31  
                          __ptext25 0B48                            __ptext17 0E38  
                          __ptext50 0BA7                            __ptext42 0AEB  
                          __ptext34 0DF8                            __ptext26 0C42  
                          __ptext18 0AA6                            __ptext51 0548  
                          __ptext43 060A                            __ptext35 0AA3  
                          __ptext27 0ABE                            __ptext19 0ABA  
                          __ptext60 0DBA                            __ptext52 0D0C  
                          __ptext44 0ED8                            __ptext36 0BE3  
                          __ptext28 0ADC                            __ptext61 0AFB  
                          __ptext53 0B73                            __ptext45 0AB6  
                          __ptext37 0CAD                            __ptext29 0230  
                          __ptext62 0B2C                            __ptext54 0C28  
                          __ptext46 0AD5                            __ptext38 0D56  
                          __ptext63 0D86                            __ptext55 0C76  
                          __ptext47 0AA0                            __ptext39 068D  
                          __ptext64 0AB2                            __ptext56 0B0D  
                          __ptext48 0787                            __ptext65 0C10  
                          __ptext57 0F35                            __ptext49 0AE3  
                          __ptext66 0BCD                            __ptext58 0B95  
                          __ptext59 0B04           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0AA9             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 004E                       setLED@command 004D  
         __end_of_DetectSYSC_Signal 0B3A                       __size_of_main 0066  
                       ??_getPIR_AD 0056                  _PIR_Initialization 0B21  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 005F  
                          main@argv 0061   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 0057                ??_PIR_Initialization 0074  
                          intlevel1 0000  __size_of_getLights_Allow_Condition 0017  
             setTemp_Main@SafeValue 0055                         ??_setLights 0050  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0AFB                     getLoad_AD@ADRES 0052  
            ??_getLight_Load_Status 0074                         getLoad_AD@i 0053  
                       getLoad_AD@j 0051                         getLoad_AD@k 0050  
           __size_of_setLights_Main 0030             __size_of_setLights_Line 000E  
           __size_of_setLights_SwOn 0025                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 00C2               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 004D         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0B0D                ??_getAll_Lights_Line 0074  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0BB9          __end_of_LED_Initialization 0AEB  
             __end_of_getCDS_Status 0AFB      __end_of_setTemp_Initialization 0A9F  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0AC3  
                 getCDS_AD@channel1 0052                   getCDS_AD@channel2 004D  
 __end_of_getLights_Allow_Condition 0C10                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0BE3  
