

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 07 17:04:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0096                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009F                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0186                     	;# 
   148  018C                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0096                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009F                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0186                     	;# 
   217  018C                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0096                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009F                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0186                     	;# 
   286  018C                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0096                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009F                     	;# 
   345  0108                     	;# 
   346  0109                     	;# 
   347  010C                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  0185                     	;# 
   354  0186                     	;# 
   355  018C                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  000E                     	;# 
   371  000F                     	;# 
   372  0010                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  001D                     	;# 
   388  001E                     	;# 
   389  001F                     	;# 
   390  0081                     	;# 
   391  0085                     	;# 
   392  0086                     	;# 
   393  0087                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  008F                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0093                     	;# 
   404  0094                     	;# 
   405  0095                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0096                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009F                     	;# 
   414  0108                     	;# 
   415  0109                     	;# 
   416  010C                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  010F                     	;# 
   422  0185                     	;# 
   423  0186                     	;# 
   424  018C                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0095                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0096                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009F                     	;# 
   483  0108                     	;# 
   484  0109                     	;# 
   485  010C                     	;# 
   486  010C                     	;# 
   487  010D                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0186                     	;# 
   493  018C                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  000E                     	;# 
   509  000F                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0013                     	;# 
   514  0014                     	;# 
   515  0015                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  001D                     	;# 
   526  001E                     	;# 
   527  001F                     	;# 
   528  0081                     	;# 
   529  0085                     	;# 
   530  0086                     	;# 
   531  0087                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0094                     	;# 
   543  0095                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0096                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009F                     	;# 
   552  0108                     	;# 
   553  0109                     	;# 
   554  010C                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010D                     	;# 
   558  010E                     	;# 
   559  010F                     	;# 
   560  0185                     	;# 
   561  0186                     	;# 
   562  018C                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001D                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  0081                     	;# 
   598  0085                     	;# 
   599  0086                     	;# 
   600  0087                     	;# 
   601  0089                     	;# 
   602  008C                     	;# 
   603  008D                     	;# 
   604  008E                     	;# 
   605  008F                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009F                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0185                     	;# 
   630  0186                     	;# 
   631  018C                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0014                     	;# 
   653  0015                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001B                     	;# 
   662  001C                     	;# 
   663  001D                     	;# 
   664  001E                     	;# 
   665  001F                     	;# 
   666  0081                     	;# 
   667  0085                     	;# 
   668  0086                     	;# 
   669  0087                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008F                     	;# 
   675  0090                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0093                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0096                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009F                     	;# 
   690  0108                     	;# 
   691  0109                     	;# 
   692  010C                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010D                     	;# 
   696  010E                     	;# 
   697  010F                     	;# 
   698  0185                     	;# 
   699  0186                     	;# 
   700  018C                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  000E                     	;# 
   716  000F                     	;# 
   717  0010                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0014                     	;# 
   722  0015                     	;# 
   723  0015                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001B                     	;# 
   731  001C                     	;# 
   732  001D                     	;# 
   733  001E                     	;# 
   734  001F                     	;# 
   735  0081                     	;# 
   736  0085                     	;# 
   737  0086                     	;# 
   738  0087                     	;# 
   739  0089                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  008F                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0096                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009F                     	;# 
   759  0108                     	;# 
   760  0109                     	;# 
   761  010C                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  010F                     	;# 
   767  0185                     	;# 
   768  0186                     	;# 
   769  018C                     	;# 
   770  0000                     	;# 
   771  0001                     	;# 
   772  0002                     	;# 
   773  0003                     	;# 
   774  0004                     	;# 
   775  0005                     	;# 
   776  0006                     	;# 
   777  0007                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000D                     	;# 
   783  000E                     	;# 
   784  000E                     	;# 
   785  000F                     	;# 
   786  0010                     	;# 
   787  0011                     	;# 
   788  0012                     	;# 
   789  0013                     	;# 
   790  0014                     	;# 
   791  0015                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0017                     	;# 
   795  0018                     	;# 
   796  0019                     	;# 
   797  001A                     	;# 
   798  001B                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001D                     	;# 
   802  001E                     	;# 
   803  001F                     	;# 
   804  0081                     	;# 
   805  0085                     	;# 
   806  0086                     	;# 
   807  0087                     	;# 
   808  0089                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0096                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009F                     	;# 
   828  0108                     	;# 
   829  0109                     	;# 
   830  010C                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  010F                     	;# 
   836  0185                     	;# 
   837  0186                     	;# 
   838  018C                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  000E                     	;# 
   854  000F                     	;# 
   855  0010                     	;# 
   856  0011                     	;# 
   857  0012                     	;# 
   858  0013                     	;# 
   859  0014                     	;# 
   860  0015                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  001D                     	;# 
   871  001E                     	;# 
   872  001F                     	;# 
   873  0081                     	;# 
   874  0085                     	;# 
   875  0086                     	;# 
   876  0087                     	;# 
   877  0089                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  008F                     	;# 
   882  0090                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0093                     	;# 
   886  0093                     	;# 
   887  0094                     	;# 
   888  0095                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0096                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009F                     	;# 
   897  0108                     	;# 
   898  0109                     	;# 
   899  010C                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010D                     	;# 
   903  010E                     	;# 
   904  010F                     	;# 
   905  0185                     	;# 
   906  0186                     	;# 
   907  018C                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  000E                     	;# 
   923  000F                     	;# 
   924  0010                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0015                     	;# 
   930  0015                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001B                     	;# 
   938  001C                     	;# 
   939  001D                     	;# 
   940  001E                     	;# 
   941  001F                     	;# 
   942  0081                     	;# 
   943  0085                     	;# 
   944  0086                     	;# 
   945  0087                     	;# 
   946  0089                     	;# 
   947  008C                     	;# 
   948  008D                     	;# 
   949  008E                     	;# 
   950  008F                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0093                     	;# 
   955  0093                     	;# 
   956  0094                     	;# 
   957  0095                     	;# 
   958  0095                     	;# 
   959  0096                     	;# 
   960  0096                     	;# 
   961  0098                     	;# 
   962  0099                     	;# 
   963  009C                     	;# 
   964  009D                     	;# 
   965  009F                     	;# 
   966  0108                     	;# 
   967  0109                     	;# 
   968  010C                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  010F                     	;# 
   974  0185                     	;# 
   975  0186                     	;# 
   976  018C                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0009                     	;# 
   986  000A                     	;# 
   987  000B                     	;# 
   988  000C                     	;# 
   989  000D                     	;# 
   990  000E                     	;# 
   991  000E                     	;# 
   992  000F                     	;# 
   993  0010                     	;# 
   994  0011                     	;# 
   995  0012                     	;# 
   996  0013                     	;# 
   997  0014                     	;# 
   998  0015                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0017                     	;# 
  1002  0018                     	;# 
  1003  0019                     	;# 
  1004  001A                     	;# 
  1005  001B                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  001D                     	;# 
  1009  001E                     	;# 
  1010  001F                     	;# 
  1011  0081                     	;# 
  1012  0085                     	;# 
  1013  0086                     	;# 
  1014  0087                     	;# 
  1015  0089                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  008F                     	;# 
  1020  0090                     	;# 
  1021  0091                     	;# 
  1022  0092                     	;# 
  1023  0093                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0095                     	;# 
  1028  0096                     	;# 
  1029  0096                     	;# 
  1030  0098                     	;# 
  1031  0099                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009F                     	;# 
  1035  0108                     	;# 
  1036  0109                     	;# 
  1037  010C                     	;# 
  1038  010C                     	;# 
  1039  010D                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0186                     	;# 
  1045  018C                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  001D                     	;# 
  1078  001E                     	;# 
  1079  001F                     	;# 
  1080  0081                     	;# 
  1081  0085                     	;# 
  1082  0086                     	;# 
  1083  0087                     	;# 
  1084  0089                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  008F                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0093                     	;# 
  1093  0093                     	;# 
  1094  0094                     	;# 
  1095  0095                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0096                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009F                     	;# 
  1104  0108                     	;# 
  1105  0109                     	;# 
  1106  010C                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  010F                     	;# 
  1112  0185                     	;# 
  1113  0186                     	;# 
  1114  018C                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000D                     	;# 
  1128  000E                     	;# 
  1129  000E                     	;# 
  1130  000F                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  001D                     	;# 
  1147  001E                     	;# 
  1148  001F                     	;# 
  1149  0081                     	;# 
  1150  0085                     	;# 
  1151  0086                     	;# 
  1152  0087                     	;# 
  1153  0089                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  008F                     	;# 
  1158  0090                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0093                     	;# 
  1163  0094                     	;# 
  1164  0095                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0096                     	;# 
  1168  0098                     	;# 
  1169  0099                     	;# 
  1170  009C                     	;# 
  1171  009D                     	;# 
  1172  009F                     	;# 
  1173  0108                     	;# 
  1174  0109                     	;# 
  1175  010C                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010D                     	;# 
  1179  010E                     	;# 
  1180  010F                     	;# 
  1181  0185                     	;# 
  1182  0186                     	;# 
  1183  018C                     	;# 
  1184  0000                     	;# 
  1185  0001                     	;# 
  1186  0002                     	;# 
  1187  0003                     	;# 
  1188  0004                     	;# 
  1189  0005                     	;# 
  1190  0006                     	;# 
  1191  0007                     	;# 
  1192  0009                     	;# 
  1193  000A                     	;# 
  1194  000B                     	;# 
  1195  000C                     	;# 
  1196  000D                     	;# 
  1197  000E                     	;# 
  1198  000E                     	;# 
  1199  000F                     	;# 
  1200  0010                     	;# 
  1201  0011                     	;# 
  1202  0012                     	;# 
  1203  0013                     	;# 
  1204  0014                     	;# 
  1205  0015                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0017                     	;# 
  1209  0018                     	;# 
  1210  0019                     	;# 
  1211  001A                     	;# 
  1212  001B                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  001D                     	;# 
  1216  001E                     	;# 
  1217  001F                     	;# 
  1218  0081                     	;# 
  1219  0085                     	;# 
  1220  0086                     	;# 
  1221  0087                     	;# 
  1222  0089                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  008F                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0093                     	;# 
  1231  0093                     	;# 
  1232  0094                     	;# 
  1233  0095                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0096                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009C                     	;# 
  1240  009D                     	;# 
  1241  009F                     	;# 
  1242  0108                     	;# 
  1243  0109                     	;# 
  1244  010C                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  010F                     	;# 
  1250  0185                     	;# 
  1251  0186                     	;# 
  1252  018C                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0009                     	;# 
  1262  000A                     	;# 
  1263  000B                     	;# 
  1264  000C                     	;# 
  1265  000D                     	;# 
  1266  000E                     	;# 
  1267  000E                     	;# 
  1268  000F                     	;# 
  1269  0010                     	;# 
  1270  0011                     	;# 
  1271  0012                     	;# 
  1272  0013                     	;# 
  1273  0014                     	;# 
  1274  0015                     	;# 
  1275  0015                     	;# 
  1276  0016                     	;# 
  1277  0017                     	;# 
  1278  0018                     	;# 
  1279  0019                     	;# 
  1280  001A                     	;# 
  1281  001B                     	;# 
  1282  001B                     	;# 
  1283  001C                     	;# 
  1284  001D                     	;# 
  1285  001E                     	;# 
  1286  001F                     	;# 
  1287  0081                     	;# 
  1288  0085                     	;# 
  1289  0086                     	;# 
  1290  0087                     	;# 
  1291  0089                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  008F                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0093                     	;# 
  1300  0093                     	;# 
  1301  0094                     	;# 
  1302  0095                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0096                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009F                     	;# 
  1311  0108                     	;# 
  1312  0109                     	;# 
  1313  010C                     	;# 
  1314  010C                     	;# 
  1315  010D                     	;# 
  1316  010D                     	;# 
  1317  010E                     	;# 
  1318  010F                     	;# 
  1319  0185                     	;# 
  1320  0186                     	;# 
  1321  018C                     	;# 
  1322  001F                     _ADCON0	set	31
  1323  001E                     _ADRES	set	30
  1324  0005                     _PORTA	set	5
  1325  0006                     _PORTB	set	6
  1326  0007                     _PORTC	set	7
  1327  0010                     _T1CON	set	16
  1328  000F                     _TMR1H	set	15
  1329  000E                     _TMR1L	set	14
  1330  005F                     _GIE	set	95
  1331  00F9                     _GO_nDONE	set	249
  1332  005E                     _PEIE	set	94
  1333  002D                     _RA5	set	45
  1334  002E                     _RA6	set	46
  1335  002F                     _RA7	set	47
  1336  0032                     _RB2	set	50
  1337  0033                     _RB3	set	51
  1338  0060                     _TMR1IF	set	96
  1339  009F                     _ADCON1	set	159
  1340  009D                     _FVRCON	set	157
  1341  0090                     _OSCCON	set	144
  1342  0085                     _TRISA	set	133
  1343  0086                     _TRISB	set	134
  1344  0087                     _TRISC	set	135
  1345  0095                     _WPUB	set	149
  1346  0408                     _PS0	set	1032
  1347  0409                     _PS1	set	1033
  1348  040A                     _PS2	set	1034
  1349  040B                     _PSA	set	1035
  1350  0460                     _TMR1IE	set	1120
  1351  0185                     _ANSELA	set	389
  1352  0186                     _ANSELB	set	390
  1353                           
  1354                           	psect	text0
  1355  0000                     __ptext0:	
  1356                           ; #config settings
  1357                           
  1358                           
  1359                           ;psect for function _TMR1_ISR
  1360  0000                     
  1361                           	psect	cinit
  1362  0013                     start_initialization:	
  1363  0013                     __initialization:	
  1364                           
  1365                           ; Clear objects allocated to COMMON
  1366  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1367  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1368  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1369  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1370                           
  1371                           ; Clear objects allocated to BANK0
  1372  0017  1383               	bcf	3,7	;select IRP bank0
  1373  0018  3020               	movlw	low __pbssBANK0
  1374  0019  0084               	movwf	4
  1375  001A  3056               	movlw	low (__pbssBANK0+54)
  1376  001B  158A  2356  118A   	fcall	clear_ram0
  1377                           
  1378                           ; Clear objects allocated to BANK1
  1379  001E  30A0               	movlw	low __pbssBANK1
  1380  001F  0084               	movwf	4
  1381  0020  30EF               	movlw	low (__pbssBANK1+79)
  1382  0021  158A  2356         	fcall	clear_ram0
  1383  0023                     end_of_initialization:	
  1384                           ;End of C runtime variable initialization code
  1385                           
  1386  0023                     __end_of__initialization:	
  1387  0023  0183               	clrf	3
  1388  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1389                           
  1390                           	psect	bssCOMMON
  1391  0076                     __pbssCOMMON:	
  1392  0076                     _LED:	
  1393  0076                     	ds	1
  1394  0077                     _Light:	
  1395  0077                     	ds	1
  1396  0078                     _Lights:	
  1397  0078                     	ds	1
  1398  0079                     _LightsControl:	
  1399  0079                     	ds	1
  1400                           
  1401                           	psect	bssBANK0
  1402  0020                     __pbssBANK0:	
  1403  0020                     _myMain:	
  1404  0020                     	ds	6
  1405  0026                     _SYSC:	
  1406  0026                     	ds	5
  1407  002B                     __CDS:	
  1408  002B                     	ds	5
  1409  0030                     _PIRLED:	
  1410  0030                     	ds	4
  1411  0034                     _Timer1:	
  1412  0034                     	ds	3
  1413  0037                     _WDT:	
  1414  0037                     	ds	2
  1415  0039                     _Cmd:	
  1416  0039                     	ds	1
  1417  003A                     _SwDetect:	
  1418  003A                     	ds	1
  1419  003B                     _Temp:	
  1420  003B                     	ds	12
  1421  0047                     _Lights1:	
  1422  0047                     	ds	7
  1423  004E                     _VarLED1:	
  1424  004E                     	ds	4
  1425  0052                     _VarLED2:	
  1426  0052                     	ds	4
  1427                           
  1428                           	psect	bssBANK1
  1429  00A0                     __pbssBANK1:	
  1430  00A0                     __PIR:	
  1431  00A0                     	ds	46
  1432  00CE                     _Load:	
  1433  00CE                     	ds	33
  1434                           
  1435                           	psect	clrtext
  1436  0B56                     clear_ram0:	
  1437                           ;	Called with FSR containing the base address, and
  1438                           ;	W with the last address+1
  1439                           
  1440  0B56  0064               	clrwdt	;clear the watchdog before getting into this loop
  1441  0B57                     clrloop0:	
  1442  0B57  0180               	clrf	0	;clear RAM location pointed to by FSR
  1443  0B58  0A84               	incf	4,f	;increment pointer
  1444  0B59  0604               	xorwf	4,w	;XOR with final address
  1445  0B5A  1903               	btfsc	3,2	;have we reached the end yet?
  1446  0B5B  3400               	retlw	0	;all done for this memory range, return
  1447  0B5C  0604               	xorwf	4,w	;XOR again to restore value
  1448  0B5D  2B57               	goto	clrloop0	;do the next byte
  1449                           
  1450                           	psect	cstackCOMMON
  1451  0070                     __pcstackCOMMON:	
  1452  0070                     ?_setLED_Initialization:	
  1453  0070                     ?_setPIRLED_Main:	
  1454                           ; 0 bytes @ 0x0
  1455                           
  1456  0070                     ?_Fosc_Set:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_IO_Set:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_TMR1_Set:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_ADC_Set:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_WDT_Set:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_TMR1_ISR:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ??_TMR1_ISR:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_Timeout_Counter:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ?_set_TimeoutCleared:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_WDT_Clearing:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ?_myMain_Initialization:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ?_SYSC_Initialization:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_Temp_Initialization:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ?_Load_Initialization:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_Lights_Initialization:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_PIR_Initialization:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_DetectSYSC_Signal:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_getLoad_AD:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_getTemp_AD:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_my_MainTimer:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_SYSC_Main:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_Temp_Main:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_Load_Main:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_Lights_Main:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ?_PIR_Main:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_Exception_Main:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_setLoad_AH_AL_Restore:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_setTemp_Initialization:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_setTemp_Main:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ?_setSYSC_Initialization:	
  1544                           ; 0 bytes @ 0x0
  1545                           
  1546  0070                     ?_setSYSC_Main:	
  1547                           ; 0 bytes @ 0x0
  1548                           
  1549  0070                     ?_setLights_Initialization:	
  1550                           ; 0 bytes @ 0x0
  1551                           
  1552  0070                     ?_setLights_Main:	
  1553                           ; 0 bytes @ 0x0
  1554                           
  1555  0070                     ?_Lights_Control:	
  1556                           ; 0 bytes @ 0x0
  1557                           
  1558  0070                     ?_Lights_Close:	
  1559                           ; 0 bytes @ 0x0
  1560                           
  1561  0070                     ?_setLights_Line:	
  1562                           ; 0 bytes @ 0x0
  1563                           
  1564  0070                     ?_CDS_Initialization:	
  1565                           ; 0 bytes @ 0x0
  1566                           
  1567  0070                     ?_CDS_Main:	
  1568                           ; 0 bytes @ 0x0
  1569                           
  1570  0070                     ?_LedPointSelect:	
  1571                           ; 0 bytes @ 0x0
  1572                           
  1573  0070                     ?_LED_Initialization:	
  1574                           ; 0 bytes @ 0x0
  1575                           
  1576  0070                     ?_LED_Main:	
  1577                           ; 0 bytes @ 0x0
  1578                           
  1579  0070                     ?_Mcu_Initialization:	
  1580                           ; 0 bytes @ 0x0
  1581                           
  1582  0070                     ?_ISR:	
  1583                           ; 0 bytes @ 0x0
  1584                           
  1585  0070                     ??_ISR:	
  1586                           ; 0 bytes @ 0x0
  1587                           
  1588  0070                     ?_WDT_Main:	
  1589                           ; 0 bytes @ 0x0
  1590                           
  1591  0070                     ?_LightsPointSelect:	
  1592                           ; 0 bytes @ 0x0
  1593                           
  1594  0070                     ?_getAll_Lights_Line:	
  1595                           ; 0 bytes @ 0x0
  1596                           
  1597  0070                     ?_getLights_Status:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ?_getLight_LoadGO:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ?_getLight_Load_Status:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_getLights_Allow_Condition:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_getCDS_Status:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_getMain_All_LightsStatus:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_getMain_All_Error_Status:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_getMain_Lights_Count:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_getLoad_OK:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     getLights_Allow_Condition@lights:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627                           
  1628                           ; 1 bytes @ 0x0
  1629  0070                     	ds	4
  1630  0074                     ??_Fosc_Set:	
  1631  0074                     ??_IO_Set:	
  1632                           ; 0 bytes @ 0x4
  1633                           
  1634  0074                     ??_TMR1_Set:	
  1635                           ; 0 bytes @ 0x4
  1636                           
  1637  0074                     ??_ADC_Set:	
  1638                           ; 0 bytes @ 0x4
  1639                           
  1640  0074                     ??_WDT_Set:	
  1641                           ; 0 bytes @ 0x4
  1642                           
  1643  0074                     ??_Timeout_Counter:	
  1644                           ; 0 bytes @ 0x4
  1645                           
  1646  0074                     ??_set_TimeoutCleared:	
  1647                           ; 0 bytes @ 0x4
  1648                           
  1649  0074                     ??_WDT_Clearing:	
  1650                           ; 0 bytes @ 0x4
  1651                           
  1652  0074                     ??_myMain_Initialization:	
  1653                           ; 0 bytes @ 0x4
  1654                           
  1655  0074                     ??_SYSC_Initialization:	
  1656                           ; 0 bytes @ 0x4
  1657                           
  1658  0074                     ??_Temp_Initialization:	
  1659                           ; 0 bytes @ 0x4
  1660                           
  1661  0074                     ??_PIR_Initialization:	
  1662                           ; 0 bytes @ 0x4
  1663                           
  1664  0074                     ??_DetectSYSC_Signal:	
  1665                           ; 0 bytes @ 0x4
  1666                           
  1667  0074                     ??_my_MainTimer:	
  1668                           ; 0 bytes @ 0x4
  1669                           
  1670  0074                     ??_setLoad_AH_AL_Restore:	
  1671                           ; 0 bytes @ 0x4
  1672                           
  1673  0074                     ??_getLight_LoadGO:	
  1674                           ; 0 bytes @ 0x4
  1675                           
  1676  0074                     ??_getLight_Load_Status:	
  1677                           ; 0 bytes @ 0x4
  1678                           
  1679  0074                     ??_setTemp_Initialization:	
  1680                           ; 0 bytes @ 0x4
  1681                           
  1682  0074                     ??_setSYSC_Initialization:	
  1683                           ; 0 bytes @ 0x4
  1684                           
  1685  0074                     ??_setLights_Line:	
  1686                           ; 0 bytes @ 0x4
  1687                           
  1688  0074                     ??_CDS_Initialization:	
  1689                           ; 0 bytes @ 0x4
  1690                           
  1691  0074                     ??_getCDS_Status:	
  1692                           ; 0 bytes @ 0x4
  1693                           
  1694  0074                     ??_LedPointSelect:	
  1695                           ; 0 bytes @ 0x4
  1696                           
  1697  0074                     ??_WDT_Main:	
  1698                           ; 0 bytes @ 0x4
  1699                           
  1700  0074                     ??_getMain_All_LightsStatus:	
  1701                           ; 0 bytes @ 0x4
  1702                           
  1703  0074                     ??_getMain_All_Error_Status:	
  1704                           ; 0 bytes @ 0x4
  1705                           
  1706  0074                     ??_getMain_Lights_Count:	
  1707                           ; 0 bytes @ 0x4
  1708                           
  1709  0074                     ??_getLoad_OK:	
  1710                           ; 0 bytes @ 0x4
  1711                           
  1712  0074                     ??_LightsPointSelect:	
  1713                           ; 0 bytes @ 0x4
  1714                           
  1715  0074                     ??___wmul:	
  1716                           ; 0 bytes @ 0x4
  1717                           
  1718  0074                     ??___awdiv:	
  1719                           ; 0 bytes @ 0x4
  1720                           
  1721  0074                     ??___lwdiv:	
  1722                           ; 0 bytes @ 0x4
  1723                           
  1724  0074                     ?_getAD:	
  1725                           ; 0 bytes @ 0x4
  1726                           
  1727  0074                     getCDS_Status@status:	
  1728                           ; 1 bytes @ 0x4
  1729                           
  1730  0074                     getAD@adcon1:	
  1731                           ; 1 bytes @ 0x4
  1732                           
  1733  0074                     getMain_All_LightsStatus@status:	
  1734                           ; 1 bytes @ 0x4
  1735                           
  1736  0074                     getMain_Lights_Count@count:	
  1737                           ; 1 bytes @ 0x4
  1738                           
  1739  0074                     getLoad_OK@ok:	
  1740                           ; 1 bytes @ 0x4
  1741                           
  1742  0074                     setLights_Line@lights:	
  1743                           ; 1 bytes @ 0x4
  1744                           
  1745  0074                     getLight_LoadGO@loadgo:	
  1746                           ; 1 bytes @ 0x4
  1747                           
  1748  0074                     getLight_Load_Status@loadstatus:	
  1749                           ; 1 bytes @ 0x4
  1750                           
  1751  0074                     ___wmul@product:	
  1752                           ; 1 bytes @ 0x4
  1753                           
  1754                           
  1755                           ; 2 bytes @ 0x4
  1756  0074                     	ds	1
  1757  0075                     ??_getAD:	
  1758  0075                     ??_SYSC_Main:	
  1759                           ; 0 bytes @ 0x5
  1760                           
  1761  0075                     ??_setTemp_Main:	
  1762                           ; 0 bytes @ 0x5
  1763                           
  1764  0075                     ??_setSYSC_Main:	
  1765                           ; 0 bytes @ 0x5
  1766                           
  1767  0075                     ??_Lights_Close:	
  1768                           ; 0 bytes @ 0x5
  1769                           
  1770  0075                     ??_getLights_Allow_Condition:	
  1771                           ; 0 bytes @ 0x5
  1772                           
  1773  0075                     ?_setLights:	
  1774                           ; 0 bytes @ 0x5
  1775                           
  1776  0075                     ??_Mcu_Initialization:	
  1777                           ; 0 bytes @ 0x5
  1778                           
  1779  0075                     LedPointSelect@led:	
  1780                           ; 0 bytes @ 0x5
  1781                           
  1782  0075                     getAD@adcon0:	
  1783                           ; 1 bytes @ 0x5
  1784                           
  1785  0075                     getMain_Lights_Count@status1:	
  1786                           ; 1 bytes @ 0x5
  1787                           
  1788  0075                     setLoad_AH_AL_Restore@i:	
  1789                           ; 1 bytes @ 0x5
  1790                           
  1791  0075                     LightsPointSelect@lights:	
  1792                           ; 1 bytes @ 0x5
  1793                           
  1794  0075                     setLights@status:	
  1795                           ; 1 bytes @ 0x5
  1796                           
  1797                           
  1798                           ; 1 bytes @ 0x5
  1799  0075                     	ds	1
  1800  0076                     ??_setLED_Initialization:	
  1801  0076                     ??_setLED:	
  1802                           ; 0 bytes @ 0x6
  1803                           
  1804  0076                     ??_Load_Initialization:	
  1805                           ; 0 bytes @ 0x6
  1806                           
  1807  0076                     ??_Lights_Initialization:	
  1808                           ; 0 bytes @ 0x6
  1809                           
  1810  0076                     ??_Temp_Main:	
  1811                           ; 0 bytes @ 0x6
  1812                           
  1813  0076                     ??_Lights_Main:	
  1814                           ; 0 bytes @ 0x6
  1815                           
  1816  0076                     ??_getAll_Lights_Line:	
  1817                           ; 0 bytes @ 0x6
  1818                           
  1819  0076                     ??_getLights_Status:	
  1820                           ; 0 bytes @ 0x6
  1821                           
  1822  0076                     ??_setLights_Initialization:	
  1823                           ; 0 bytes @ 0x6
  1824                           
  1825  0076                     ??_setLights_Main:	
  1826                           ; 0 bytes @ 0x6
  1827                           
  1828  0076                     ??_LED_Initialization:	
  1829                           ; 0 bytes @ 0x6
  1830                           
  1831  0076                     ??_LED_Main:	
  1832                           ; 0 bytes @ 0x6
  1833                           
  1834                           
  1835                           	psect	cstackBANK0
  1836  0056                     __pcstackBANK0:	
  1837                           ; 0 bytes @ 0x6
  1838                           
  1839  0056                     ?_setLED:	
  1840  0056                     ??_getLoad_AD:	
  1841                           ; 0 bytes @ 0x0
  1842                           
  1843  0056                     ??_getTemp_AD:	
  1844                           ; 0 bytes @ 0x0
  1845                           
  1846  0056                     ?_setLights_Trigger:	
  1847                           ; 0 bytes @ 0x0
  1848                           
  1849  0056                     ??_setLights:	
  1850                           ; 0 bytes @ 0x0
  1851                           
  1852  0056                     ??_CDS_Main:	
  1853                           ; 0 bytes @ 0x0
  1854                           
  1855  0056                     ?_getCDS_AD:	
  1856                           ; 0 bytes @ 0x0
  1857                           
  1858  0056                     ?___wmul:	
  1859                           ; 0 bytes @ 0x0
  1860                           
  1861  0056                     ?___awdiv:	
  1862                           ; 2 bytes @ 0x0
  1863                           
  1864  0056                     ?___lwdiv:	
  1865                           ; 2 bytes @ 0x0
  1866                           
  1867  0056                     getCDS_AD@channel2:	
  1868                           ; 2 bytes @ 0x0
  1869                           
  1870  0056                     setLED@command:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0056                     setLights_Initialization@lights:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0056                     getLights_Status@lights:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0056                     setLights_Trigger@command:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0056                     getAll_Lights_Line@line:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0056                     getLights_Allow_Condition@allow:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0056                     _getMain_All_Error_Status$2327:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0056                     ___wmul@multiplier:	
  1892                           ; 2 bytes @ 0x0
  1893                           
  1894  0056                     ___awdiv@divisor:	
  1895                           ; 2 bytes @ 0x0
  1896                           
  1897  0056                     ___lwdiv@divisor:	
  1898                           ; 2 bytes @ 0x0
  1899                           
  1900                           
  1901                           ; 2 bytes @ 0x0
  1902  0056                     	ds	1
  1903  0057                     ??_setLights_Trigger:	
  1904  0057                     ??_getCDS_AD:	
  1905                           ; 0 bytes @ 0x1
  1906                           
  1907  0057                     setLED@led:	
  1908                           ; 0 bytes @ 0x1
  1909                           
  1910  0057                     setLights@lights:	
  1911                           ; 1 bytes @ 0x1
  1912                           
  1913  0057                     getLights_Status@status:	
  1914                           ; 1 bytes @ 0x1
  1915                           
  1916  0057                     _getLights_Allow_Condition$4610:	
  1917                           ; 1 bytes @ 0x1
  1918                           
  1919                           
  1920                           ; 1 bytes @ 0x1
  1921  0057                     	ds	1
  1922  0058                     ??_setPIRLED_Main:	
  1923  0058                     setLED_Initialization@led:	
  1924                           ; 0 bytes @ 0x2
  1925                           
  1926  0058                     getLoad_AD@channel:	
  1927                           ; 1 bytes @ 0x2
  1928                           
  1929  0058                     getTemp_AD@channel:	
  1930                           ; 1 bytes @ 0x2
  1931                           
  1932  0058                     setLights_Main@lights:	
  1933                           ; 1 bytes @ 0x2
  1934                           
  1935  0058                     setLights_Trigger@lights:	
  1936                           ; 1 bytes @ 0x2
  1937                           
  1938  0058                     _getMain_All_Error_Status$2328:	
  1939                           ; 1 bytes @ 0x2
  1940                           
  1941  0058                     ___wmul@multiplicand:	
  1942                           ; 2 bytes @ 0x2
  1943                           
  1944  0058                     ___awdiv@dividend:	
  1945                           ; 2 bytes @ 0x2
  1946                           
  1947  0058                     ___lwdiv@dividend:	
  1948                           ; 2 bytes @ 0x2
  1949                           
  1950                           
  1951                           ; 2 bytes @ 0x2
  1952  0058                     	ds	1
  1953  0059                     getCDS_AD@i:	
  1954  0059                     setPIRLED_Main@count:	
  1955                           ; 1 bytes @ 0x3
  1956                           
  1957  0059                     getLoad_AD@k:	
  1958                           ; 1 bytes @ 0x3
  1959                           
  1960                           
  1961                           ; 1 bytes @ 0x3
  1962  0059                     	ds	1
  1963  005A                     getCDS_AD@j:	
  1964  005A                     getMain_All_Error_Status@command:	
  1965                           ; 1 bytes @ 0x4
  1966                           
  1967  005A                     getLoad_AD@j:	
  1968                           ; 1 bytes @ 0x4
  1969                           
  1970  005A                     ___awdiv@counter:	
  1971                           ; 1 bytes @ 0x4
  1972                           
  1973  005A                     ___lwdiv@counter:	
  1974                           ; 1 bytes @ 0x4
  1975                           
  1976                           
  1977                           ; 1 bytes @ 0x4
  1978  005A                     	ds	1
  1979  005B                     getCDS_AD@channel1:	
  1980  005B                     getMain_All_Error_Status@status:	
  1981                           ; 1 bytes @ 0x5
  1982                           
  1983  005B                     getLoad_AD@i:	
  1984                           ; 1 bytes @ 0x5
  1985                           
  1986  005B                     ___awdiv@sign:	
  1987                           ; 1 bytes @ 0x5
  1988                           
  1989  005B                     ___lwdiv@quotient:	
  1990                           ; 1 bytes @ 0x5
  1991                           
  1992                           
  1993                           ; 2 bytes @ 0x5
  1994  005B                     	ds	1
  1995  005C                     ??_PIR_Main:	
  1996  005C                     ??_Exception_Main:	
  1997                           ; 0 bytes @ 0x6
  1998                           
  1999  005C                     ___awdiv@quotient:	
  2000                           ; 0 bytes @ 0x6
  2001                           
  2002                           
  2003                           ; 2 bytes @ 0x6
  2004  005C                     	ds	1
  2005  005D                     ??_Load_Main:	
  2006  005D                     Exception_Main@lights:	
  2007                           ; 0 bytes @ 0x7
  2008                           
  2009                           
  2010                           ; 1 bytes @ 0x7
  2011  005D                     	ds	1
  2012  005E                     ?_getPIR_AD:	
  2013  005E                     ??_Lights_Control:	
  2014                           ; 0 bytes @ 0x8
  2015                           
  2016  005E                     Exception_Main@count:	
  2017                           ; 0 bytes @ 0x8
  2018                           
  2019  005E                     setTemp_Main@error:	
  2020                           ; 1 bytes @ 0x8
  2021                           
  2022  005E                     getPIR_AD@channel2:	
  2023                           ; 1 bytes @ 0x8
  2024                           
  2025                           
  2026                           ; 1 bytes @ 0x8
  2027  005E                     	ds	1
  2028  005F                     ??_getPIR_AD:	
  2029  005F                     Exception_Main@status:	
  2030                           ; 0 bytes @ 0x9
  2031                           
  2032  005F                     Load_Main@error:	
  2033                           ; 1 bytes @ 0x9
  2034                           
  2035                           
  2036                           ; 1 bytes @ 0x9
  2037  005F                     	ds	1
  2038  0060                     Load_Main@Load_Status:	
  2039  0060                     Exception_Main@i:	
  2040                           ; 1 bytes @ 0xA
  2041                           
  2042  0060                     _Lights_Control$4588:	
  2043                           ; 2 bytes @ 0xA
  2044                           
  2045                           
  2046                           ; 2 bytes @ 0xA
  2047  0060                     	ds	1
  2048  0061                     PIR_Main@error:	
  2049  0061                     Load_Main@i:	
  2050                           ; 1 bytes @ 0xB
  2051                           
  2052                           
  2053                           ; 2 bytes @ 0xB
  2054  0061                     	ds	1
  2055  0062                     Exception_Main@error:	
  2056  0062                     getPIR_AD@j:	
  2057                           ; 1 bytes @ 0xC
  2058                           
  2059  0062                     Lights_Control@lights:	
  2060                           ; 1 bytes @ 0xC
  2061                           
  2062  0062                     _PIR_Main$3108:	
  2063                           ; 1 bytes @ 0xC
  2064                           
  2065                           
  2066                           ; 2 bytes @ 0xC
  2067  0062                     	ds	1
  2068  0063                     getPIR_AD@channel1:	
  2069                           
  2070                           ; 1 bytes @ 0xD
  2071  0063                     	ds	1
  2072  0064                     PIR_Main@cds:	
  2073  0064                     getPIR_AD@i:	
  2074                           ; 1 bytes @ 0xE
  2075                           
  2076                           
  2077                           ; 1 bytes @ 0xE
  2078  0064                     	ds	1
  2079  0065                     ?_main:	
  2080  0065                     main@argc:	
  2081                           ; 2 bytes @ 0xF
  2082                           
  2083                           
  2084                           ; 2 bytes @ 0xF
  2085  0065                     	ds	2
  2086  0067                     main@argv:	
  2087                           
  2088                           ; 2 bytes @ 0x11
  2089  0067                     	ds	2
  2090  0069                     ??_main:	
  2091                           
  2092                           ; 0 bytes @ 0x13
  2093  0069                     	ds	1
  2094                           
  2095                           	psect	maintext
  2096  0F9A                     __pmaintext:	
  2097 ;;
  2098 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2099 ;;
  2100 ;; *************** function _main *****************
  2101 ;; Defined at:
  2102 ;;		line 7 in file "../src/Main_B1.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  argc            2   15[BANK0 ] int 
  2105 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  2   15[BANK0 ] int 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 17F/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2117 ;;      Params:         0       4       0       0
  2118 ;;      Locals:         0       0       0       0
  2119 ;;      Temps:          0       1       0       0
  2120 ;;      Totals:         0       5       0       0
  2121 ;;Total ram usage:        5 bytes
  2122 ;; Hardware stack levels required when called:    6
  2123 ;; This function calls:
  2124 ;;		_CDS_Initialization
  2125 ;;		_CDS_Main
  2126 ;;		_DetectSYSC_Signal
  2127 ;;		_Exception_Main
  2128 ;;		_LED_Initialization
  2129 ;;		_LED_Main
  2130 ;;		_Lights_Initialization
  2131 ;;		_Lights_Main
  2132 ;;		_Load_Initialization
  2133 ;;		_Load_Main
  2134 ;;		_Mcu_Initialization
  2135 ;;		_PIR_Initialization
  2136 ;;		_PIR_Main
  2137 ;;		_SYSC_Initialization
  2138 ;;		_SYSC_Main
  2139 ;;		_Temp_Initialization
  2140 ;;		_Temp_Main
  2141 ;;		_WDT_Main
  2142 ;;		_getCDS_AD
  2143 ;;		_getLoad_AD
  2144 ;;		_getPIR_AD
  2145 ;;		_getTemp_AD
  2146 ;;		_myMain_Initialization
  2147 ;;		_my_MainTimer
  2148 ;; This function is called by:
  2149 ;;		Startup code after reset
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           
  2154                           ;psect for function _main
  2155  0F9A                     _main:	
  2156                           
  2157                           ;Main_B1.c: 8: myMain_Initialization();
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2161  0F9A  158A  2300  158A   	fcall	_myMain_Initialization
  2162                           
  2163                           ;Main_B1.c: 9: Mcu_Initialization();
  2164  0F9D  158A  23BE  158A   	fcall	_Mcu_Initialization
  2165                           
  2166                           ;Main_B1.c: 10: ;;
  2167                           ;Main_B1.c: 11: LED_Initialization();
  2168  0FA0  158A  233E  158A   	fcall	_LED_Initialization
  2169                           
  2170                           ;Main_B1.c: 12: ;;
  2171                           ;Main_B1.c: 14: SYSC_Initialization();
  2172  0FA3  158A  2307  158A   	fcall	_SYSC_Initialization
  2173                           
  2174                           ;Main_B1.c: 15: Temp_Initialization();
  2175  0FA6  158A  230D  158A   	fcall	_Temp_Initialization
  2176                           
  2177                           ;Main_B1.c: 16: Load_Initialization();
  2178  0FA9  158A  2304  158A   	fcall	_Load_Initialization
  2179                           
  2180                           ;Main_B1.c: 17: ;;
  2181                           ;Main_B1.c: 18: ;;
  2182                           ;Main_B1.c: 20: ;;
  2183                           ;Main_B1.c: 21: Lights_Initialization();
  2184  0FAC  158A  2317  158A   	fcall	_Lights_Initialization
  2185                           
  2186                           ;Main_B1.c: 22: CDS_Initialization();
  2187  0FAF  158A  2313  158A   	fcall	_CDS_Initialization
  2188                           
  2189                           ;Main_B1.c: 23: PIR_Initialization();
  2190  0FB2  158A  237B  158A   	fcall	_PIR_Initialization
  2191  0FB5                     l5310:	
  2192                           ;Main_B1.c: 24: ;;
  2193                           ;Main_B1.c: 25: ;;
  2194                           ;Main_B1.c: 26: ;;
  2195                           ;Main_B1.c: 27: ;;
  2196                           ;Main_B1.c: 28: ;;
  2197                           ;Main_B1.c: 30: while (1) {
  2198                           
  2199                           
  2200                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2201  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0FB7  1C20               	btfss	_myMain,0
  2204  0FB8  2FD8               	goto	l5322
  2205                           
  2206                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2207  0FB9  158A  2386  158A   	fcall	_DetectSYSC_Signal
  2208                           
  2209                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2210  0FBC  3001               	movlw	1
  2211  0FBD  118A  26D6  158A   	fcall	_getLoad_AD
  2212                           
  2213                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2214  0FC0  3011               	movlw	17
  2215  0FC1  158A  2555  158A   	fcall	_getTemp_AD
  2216                           
  2217                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2218  0FC4  3005               	movlw	5
  2219  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2221  0FC7  00E9               	movwf	??_main
  2222  0FC8  0869               	movf	??_main,w
  2223  0FC9  00D6               	movwf	getCDS_AD@channel2
  2224  0FCA  3029               	movlw	41
  2225  0FCB  158A  257C  158A   	fcall	_getCDS_AD
  2226                           
  2227                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2228  0FCE  3009               	movlw	9
  2229  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0FD1  00E9               	movwf	??_main
  2232  0FD2  0869               	movf	??_main,w
  2233  0FD3  00DE               	movwf	getPIR_AD@channel2
  2234  0FD4  302D               	movlw	45
  2235  0FD5  118A  2409  158A   	fcall	_getPIR_AD
  2236  0FD8                     l5322:	
  2237                           
  2238                           ;Main_B1.c: 57: }
  2239                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2240  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2241  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2242  0FDA  1C34               	btfss	_Timer1,0
  2243  0FDB  2FB5               	goto	l5310
  2244                           
  2245                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2246  0FDC  1034               	bcf	_Timer1,0
  2247                           
  2248                           ;Main_B1.c: 96: my_MainTimer();
  2249  0FDD  158A  24BE  158A   	fcall	_my_MainTimer
  2250                           
  2251                           ;Main_B1.c: 97: WDT_Main();
  2252  0FE0  158A  2400  158A   	fcall	_WDT_Main
  2253                           
  2254                           ;Main_B1.c: 98: ;;
  2255                           ;Main_B1.c: 99: ;;
  2256                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2257  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2259  0FE5  1C20               	btfss	_myMain,0
  2260  0FE6  2FB5               	goto	l5310
  2261                           
  2262                           ;Main_B1.c: 101: ;;
  2263                           ;Main_B1.c: 103: LED_Main();
  2264  0FE7  158A  2301  158A   	fcall	_LED_Main
  2265                           
  2266                           ;Main_B1.c: 104: ;;
  2267                           ;Main_B1.c: 106: SYSC_Main();
  2268  0FEA  158A  230A  158A   	fcall	_SYSC_Main
  2269                           
  2270                           ;Main_B1.c: 107: Temp_Main();
  2271  0FED  158A  2310  158A   	fcall	_Temp_Main
  2272                           
  2273                           ;Main_B1.c: 108: Load_Main();
  2274  0FF0  118A  2222  158A   	fcall	_Load_Main
  2275                           
  2276                           ;Main_B1.c: 109: ;;
  2277                           ;Main_B1.c: 111: Lights_Main();
  2278  0FF3  158A  250F  158A   	fcall	_Lights_Main
  2279                           
  2280                           ;Main_B1.c: 112: ;;
  2281                           ;Main_B1.c: 113: ;;
  2282                           ;Main_B1.c: 114: CDS_Main();
  2283  0FF6  158A  25D6  158A   	fcall	_CDS_Main
  2284                           
  2285                           ;Main_B1.c: 115: PIR_Main();
  2286  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2287                           
  2288                           ;Main_B1.c: 117: ;;
  2289                           ;Main_B1.c: 118: ;;
  2290                           ;Main_B1.c: 119: ;;
  2291                           ;Main_B1.c: 120: ;;
  2292                           ;Main_B1.c: 121: Exception_Main();
  2293  0FFC  118A  2660  158A   	fcall	_Exception_Main
  2294  0FFF  2FB5               	goto	l5310
  2295  1000                     __end_of_main:	
  2296                           ;Main_B1.c: 128: }
  2297                           ;Main_B1.c: 129: }
  2298                           ;Main_B1.c: 163: }
  2299                           ;Main_B1.c: 164: return (0);
  2300                           ;	Return value of _main is never used
  2301                           
  2302                           
  2303                           	psect	text1
  2304  0CBE                     __ptext1:	
  2305 ;; *************** function _my_MainTimer *****************
  2306 ;; Defined at:
  2307 ;;		line 185 in file "../src/Main_B1.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;		None               void
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2321 ;;      Params:         0       0       0       0
  2322 ;;      Locals:         0       0       0       0
  2323 ;;      Temps:          1       0       0       0
  2324 ;;      Totals:         1       0       0       0
  2325 ;;Total ram usage:        1 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    2
  2328 ;; This function calls:
  2329 ;;		Nothing
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function _my_MainTimer
  2337  0CBE                     _my_MainTimer:	
  2338                           
  2339                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2343  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0CC0  1820               	btfsc	_myMain,0
  2346  0CC1  2CCE               	goto	l3826
  2347                           
  2348                           ;Main_B1.c: 189: myMain.PowerCount++;
  2349  0CC2  3001               	movlw	1
  2350  0CC3  00F4               	movwf	??_my_MainTimer
  2351  0CC4  0874               	movf	??_my_MainTimer,w
  2352  0CC5  07A1               	addwf	_myMain+1,f
  2353                           
  2354                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  2355  0CC6  0821               	movf	_myMain+1,w
  2356  0CC7  3A4B               	xorlw	75
  2357  0CC8  1D03               	skipz
  2358  0CC9  0008               	return
  2359                           
  2360                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2361  0CCA  01A1               	clrf	_myMain+1
  2362                           
  2363                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2364  0CCB  1420               	bsf	_myMain,0
  2365                           
  2366                           ;Main_B1.c: 197: ;;
  2367                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2368  0CCC  1620               	bsf	_myMain,4
  2369                           
  2370                           ;Main_B1.c: 207: }
  2371                           ;Main_B1.c: 208: } else {
  2372  0CCD  0008               	return
  2373  0CCE                     l3826:	
  2374                           
  2375                           ;Main_B1.c: 209: myMain.PowerCount++;
  2376  0CCE  3001               	movlw	1
  2377  0CCF  00F4               	movwf	??_my_MainTimer
  2378  0CD0  0874               	movf	??_my_MainTimer,w
  2379  0CD1  07A1               	addwf	_myMain+1,f
  2380                           
  2381                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  2382  0CD2  0821               	movf	_myMain+1,w
  2383  0CD3  3A32               	xorlw	50
  2384  0CD4  1D03               	skipz
  2385  0CD5  0008               	return
  2386                           
  2387                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2388  0CD6  01A1               	clrf	_myMain+1
  2389  0CD7  0008               	return
  2390  0CD8                     __end_of_my_MainTimer:	
  2391                           
  2392                           	psect	text2
  2393  0B00                     __ptext2:	
  2394 ;; *************** function _myMain_Initialization *****************
  2395 ;; Defined at:
  2396 ;;		line 170 in file "../src/Main_B1.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;		None
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;		None               void
  2403 ;; Registers used:
  2404 ;;		None
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2410 ;;      Params:         0       0       0       0
  2411 ;;      Locals:         0       0       0       0
  2412 ;;      Temps:          0       0       0       0
  2413 ;;      Totals:         0       0       0       0
  2414 ;;Total ram usage:        0 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    2
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _myMain_Initialization
  2426  0B00                     _myMain_Initialization:	
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _myMain_Initialization: []
  2430  0B00  0008               	return
  2431  0B01                     __end_of_myMain_Initialization:	
  2432                           
  2433                           	psect	text3
  2434  0D55                     __ptext3:	
  2435 ;; *************** function _getTemp_AD *****************
  2436 ;; Defined at:
  2437 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  channel         1    wreg     unsigned char 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  channel         1    2[BANK0 ] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;		None               void
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0, pclath, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2451 ;;      Params:         0       0       0       0
  2452 ;;      Locals:         0       1       0       0
  2453 ;;      Temps:          0       2       0       0
  2454 ;;      Totals:         0       3       0       0
  2455 ;;Total ram usage:        3 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    4
  2458 ;; This function calls:
  2459 ;;		_getAD
  2460 ;; This function is called by:
  2461 ;;		_main
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _getTemp_AD
  2467  0D55                     _getTemp_AD:	
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2471                           ;getTemp_AD@channel stored from wreg
  2472  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0D57  00D8               	movwf	getTemp_AD@channel
  2475                           
  2476                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2477  0D58  1D3B               	btfss	_Temp,2
  2478  0D59  0008               	return
  2479                           
  2480                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2481  0D5A  3070               	movlw	112
  2482  0D5B  00D6               	movwf	??_getTemp_AD
  2483  0D5C  0856               	movf	??_getTemp_AD,w
  2484  0D5D  00F4               	movwf	getAD@adcon1
  2485  0D5E  0858               	movf	getTemp_AD@channel,w
  2486  0D5F  158A  24F3  158A   	fcall	_getAD
  2487  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  2488  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  2489  0D64  00D7               	movwf	??_getTemp_AD+1
  2490  0D65  0857               	movf	??_getTemp_AD+1,w
  2491  0D66  00C4               	movwf	_Temp+9
  2492                           
  2493                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2494  0D67  0844               	movf	_Temp+9,w
  2495  0D68  1903               	btfsc	3,2
  2496  0D69  0008               	return
  2497                           
  2498                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2499  0D6A  0844               	movf	_Temp+9,w
  2500  0D6B  0242               	subwf	_Temp+7,w
  2501  0D6C  1803               	skipnc
  2502  0D6D  2D73               	goto	l4850
  2503                           
  2504                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2505  0D6E  0844               	movf	_Temp+9,w
  2506  0D6F  00D6               	movwf	??_getTemp_AD
  2507  0D70  0856               	movf	??_getTemp_AD,w
  2508  0D71  00C2               	movwf	_Temp+7
  2509                           
  2510                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2511  0D72  0008               	return
  2512  0D73                     l4850:	
  2513  0D73  0844               	movf	_Temp+9,w
  2514  0D74  0243               	subwf	_Temp+8,w
  2515  0D75  1803               	skipnc
  2516  0D76  0008               	return
  2517                           
  2518                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2519  0D77  0844               	movf	_Temp+9,w
  2520  0D78  00D6               	movwf	??_getTemp_AD
  2521  0D79  0856               	movf	??_getTemp_AD,w
  2522  0D7A  00C3               	movwf	_Temp+8
  2523  0D7B  0008               	return
  2524  0D7C                     __end_of_getTemp_AD:	
  2525                           
  2526                           	psect	text4
  2527  0409                     __ptext4:	
  2528 ;; *************** function _getPIR_AD *****************
  2529 ;; Defined at:
  2530 ;;		line 226 in file "../src/PIR_B1.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  channel1        1    wreg     unsigned char 
  2533 ;;  channel2        1    8[BANK0 ] unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  channel1        1   13[BANK0 ] unsigned char 
  2536 ;;  i               1   14[BANK0 ] unsigned char 
  2537 ;;  j               1   12[BANK0 ] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;		None               void
  2540 ;; Registers used:
  2541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2547 ;;      Params:         0       1       0       0
  2548 ;;      Locals:         0       3       0       0
  2549 ;;      Temps:          0       3       0       0
  2550 ;;      Totals:         0       7       0       0
  2551 ;;Total ram usage:        7 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    4
  2554 ;; This function calls:
  2555 ;;		___awdiv
  2556 ;;		___lwdiv
  2557 ;;		_getAD
  2558 ;; This function is called by:
  2559 ;;		_main
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           
  2564                           ;psect for function _getPIR_AD
  2565  0409                     _getPIR_AD:	
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2569                           ;getPIR_AD@channel1 stored from wreg
  2570  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2571  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2572  040B  00E3               	movwf	getPIR_AD@channel1
  2573                           
  2574                           ;PIR_B1.c: 227: char i = 0, j = 0;
  2575  040C  01E4               	clrf	getPIR_AD@i
  2576  040D  01E2               	clrf	getPIR_AD@j
  2577                           
  2578                           ;PIR_B1.c: 229: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2579  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2580  040F  1303               	bcf	3,6	;RP1=0, select bank1
  2581  0410  1CA0               	btfss	__PIR^(0+128),1
  2582  0411  0008               	return
  2583  0412  1920               	btfsc	__PIR^(0+128),2
  2584  0413  0008               	return
  2585                           
  2586                           ;PIR_B1.c: 230: _PIR.GO = 1;
  2587  0414  1520               	bsf	__PIR^(0+128),2
  2588                           
  2589                           ;PIR_B1.c: 231: _PIR.ADRES = getAD(channel1, 0x70);
  2590  0415  3070               	movlw	112
  2591  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0418  00DF               	movwf	??_getPIR_AD
  2594  0419  085F               	movf	??_getPIR_AD,w
  2595  041A  00F4               	movwf	getAD@adcon1
  2596  041B  0863               	movf	getPIR_AD@channel1,w
  2597  041C  158A  24F3  118A   	fcall	_getAD
  2598  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0421  00E0               	movwf	??_getPIR_AD+1
  2601  0422  0860               	movf	??_getPIR_AD+1,w
  2602  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2603  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0425  00A2               	movwf	(__PIR^(0+128)+2)
  2605                           
  2606                           ;PIR_B1.c: 232: _PIR.VRAD = _PIR.ADRES / 25;
  2607  0426  3019               	movlw	25
  2608  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0429  00D6               	movwf	___awdiv@divisor
  2611  042A  3000               	movlw	0
  2612  042B  00D7               	movwf	___awdiv@divisor+1
  2613  042C  1683               	bsf	3,5	;RP0=1, select bank1
  2614  042D  1303               	bcf	3,6	;RP1=0, select bank1
  2615  042E  0822               	movf	(__PIR^(0+128)+2),w
  2616  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2617  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2618  0431  00DF               	movwf	??_getPIR_AD
  2619  0432  01E0               	clrf	??_getPIR_AD+1
  2620  0433  085F               	movf	??_getPIR_AD,w
  2621  0434  00D8               	movwf	___awdiv@dividend
  2622  0435  0860               	movf	??_getPIR_AD+1,w
  2623  0436  00D9               	movwf	___awdiv@dividend+1
  2624  0437  158A  26D8  118A   	fcall	___awdiv
  2625  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2626  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2627  043C  0856               	movf	?___awdiv,w
  2628  043D  00E1               	movwf	??_getPIR_AD+2
  2629  043E  0861               	movf	??_getPIR_AD+2,w
  2630  043F  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0440  1303               	bcf	3,6	;RP1=0, select bank1
  2632  0441  00A3               	movwf	(__PIR^(0+128)+3)
  2633                           
  2634                           ;PIR_B1.c: 233: _PIR.VRAD1 = _PIR.ADRES;
  2635  0442  0822               	movf	(__PIR^(0+128)+2),w
  2636  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0445  00DF               	movwf	??_getPIR_AD
  2639  0446  085F               	movf	??_getPIR_AD,w
  2640  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2641  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2642  0449  00A4               	movwf	(__PIR^(0+128)+4)
  2643                           
  2644                           ;PIR_B1.c: 234: _PIR.ADRES = getAD(channel2, 0x70);
  2645  044A  3070               	movlw	112
  2646  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2647  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2648  044D  00DF               	movwf	??_getPIR_AD
  2649  044E  085F               	movf	??_getPIR_AD,w
  2650  044F  00F4               	movwf	getAD@adcon1
  2651  0450  085E               	movf	getPIR_AD@channel2,w
  2652  0451  158A  24F3  118A   	fcall	_getAD
  2653  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0456  00E0               	movwf	??_getPIR_AD+1
  2656  0457  0860               	movf	??_getPIR_AD+1,w
  2657  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2658  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2659  045A  00A2               	movwf	(__PIR^(0+128)+2)
  2660                           
  2661                           ;PIR_B1.c: 235: _PIR.SignalAD = _PIR.ADRES;
  2662  045B  0822               	movf	(__PIR^(0+128)+2),w
  2663  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2664  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2665  045E  00DF               	movwf	??_getPIR_AD
  2666  045F  085F               	movf	??_getPIR_AD,w
  2667  0460  1683               	bsf	3,5	;RP0=1, select bank1
  2668  0461  1303               	bcf	3,6	;RP1=0, select bank1
  2669  0462  00A1               	movwf	(__PIR^(0+128)+1)
  2670                           
  2671                           ;PIR_B1.c: 237: if (_PIR.VRAD < 1) {
  2672  0463  08A3               	movf	(__PIR^(0+128)+3),f
  2673  0464  1D03               	skipz
  2674  0465  2C68               	goto	l4872
  2675                           
  2676                           ;PIR_B1.c: 238: _PIR.CloseTimeValue = 5;
  2677  0466  3005               	movlw	5
  2678  0467  2C6D               	goto	L1
  2679  0468                     l4872:	
  2680                           ;PIR_B1.c: 239: } else if (_PIR.VRAD < 3) {
  2681                           
  2682  0468  3003               	movlw	3
  2683  0469  0223               	subwf	(__PIR^(0+128)+3),w
  2684  046A  1803               	skipnc
  2685  046B  2C70               	goto	l4876
  2686                           
  2687                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 60;
  2688  046C  303C               	movlw	60
  2689  046D                     L1:	
  2690  046D  00C7               	movwf	(__PIR^(0+128)+39)
  2691  046E  3000               	movlw	0
  2692  046F  2C8B               	goto	L5
  2693  0470                     l4876:	
  2694                           ;PIR_B1.c: 241: } else if (_PIR.VRAD < 5) {
  2695                           
  2696  0470  3005               	movlw	5
  2697  0471  0223               	subwf	(__PIR^(0+128)+3),w
  2698  0472  1803               	skipnc
  2699  0473  2C78               	goto	l4880
  2700                           
  2701                           ;PIR_B1.c: 242: _PIR.CloseTimeValue = 300;
  2702  0474  302C               	movlw	44
  2703  0475  00C7               	movwf	(__PIR^(0+128)+39)
  2704  0476  3001               	movlw	1
  2705  0477  2C8B               	goto	L5
  2706  0478                     l4880:	
  2707                           ;PIR_B1.c: 243: } else if (_PIR.VRAD < 7) {
  2708                           
  2709  0478  3007               	movlw	7
  2710  0479  0223               	subwf	(__PIR^(0+128)+3),w
  2711  047A  1803               	skipnc
  2712  047B  2C80               	goto	l4884
  2713                           
  2714                           ;PIR_B1.c: 244: _PIR.CloseTimeValue = 600;
  2715  047C  3058               	movlw	88
  2716  047D  00C7               	movwf	(__PIR^(0+128)+39)
  2717  047E  3002               	movlw	2
  2718  047F  2C8B               	goto	L5
  2719  0480                     l4884:	
  2720                           ;PIR_B1.c: 245: } else if (_PIR.VRAD < 9) {
  2721                           
  2722  0480  3009               	movlw	9
  2723  0481  0223               	subwf	(__PIR^(0+128)+3),w
  2724  0482  1803               	skipnc
  2725  0483  2C88               	goto	l4888
  2726                           
  2727                           ;PIR_B1.c: 246: _PIR.CloseTimeValue = 900;
  2728  0484  3084               	movlw	132
  2729  0485  00C7               	movwf	(__PIR^(0+128)+39)
  2730  0486  3003               	movlw	3
  2731  0487  2C8B               	goto	L5
  2732  0488                     l4888:	
  2733                           ;PIR_B1.c: 247: } else {
  2734                           
  2735                           
  2736                           ;PIR_B1.c: 248: _PIR.CloseTimeValue = 1200;
  2737  0488  30B0               	movlw	176
  2738  0489  00C7               	movwf	(__PIR^(0+128)+39)
  2739  048A  3004               	movlw	4
  2740  048B                     L5:	
  2741  048B  00C8               	movwf	(__PIR^(0+128)+40)
  2742                           
  2743                           ;PIR_B1.c: 249: }
  2744                           ;PIR_B1.c: 258: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2745  048C  0821               	movf	(__PIR^(0+128)+1),w
  2746  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2747  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2748  048F  00DF               	movwf	??_getPIR_AD
  2749  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2750  0491  1303               	bcf	3,6	;RP1=0, select bank1
  2751  0492  0827               	movf	(__PIR^(0+128)+7),w
  2752  0493  3EA8               	addlw	(__PIR+8)& (0+255)
  2753  0494  0084               	movwf	4
  2754  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2755  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0497  085F               	movf	??_getPIR_AD,w
  2757  0498  1383               	bcf	3,7	;select IRP bank1
  2758  0499  0080               	movwf	0
  2759                           
  2760                           ;PIR_B1.c: 259: for (i = 0; i < 10; i++) {
  2761  049A  01E4               	clrf	getPIR_AD@i
  2762  049B  300A               	movlw	10
  2763  049C  0264               	subwf	getPIR_AD@i,w
  2764  049D  1803               	btfsc	3,0
  2765  049E  2CBB               	goto	l4904
  2766  049F                     l4898:	
  2767                           
  2768                           ;PIR_B1.c: 260: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2769  049F  0864               	movf	getPIR_AD@i,w
  2770  04A0  3EA8               	addlw	(__PIR+8)& (0+255)
  2771  04A1  0084               	movwf	4
  2772  04A2  0800               	movf	0,w
  2773  04A3  00DF               	movwf	??_getPIR_AD
  2774  04A4  01E0               	clrf	??_getPIR_AD+1
  2775  04A5  085F               	movf	??_getPIR_AD,w
  2776  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2777  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2778  04A8  07B2               	addwf	(__PIR^(0+128)+18),f
  2779  04A9  1803               	skipnc
  2780  04AA  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2781  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2782  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2783  04AD  0860               	movf	??_getPIR_AD+1,w
  2784  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  2785  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  2786  04B0  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2787  04B1  3001               	movlw	1
  2788  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2789  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2790  04B4  00DF               	movwf	??_getPIR_AD
  2791  04B5  085F               	movf	??_getPIR_AD,w
  2792  04B6  07E4               	addwf	getPIR_AD@i,f
  2793  04B7  300A               	movlw	10
  2794  04B8  0264               	subwf	getPIR_AD@i,w
  2795  04B9  1C03               	skipc
  2796  04BA  2C9F               	goto	l4898
  2797  04BB                     l4904:	
  2798                           
  2799                           ;PIR_B1.c: 261: }
  2800                           ;PIR_B1.c: 262: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2801  04BB  300A               	movlw	10
  2802  04BC  00D6               	movwf	___lwdiv@divisor
  2803  04BD  3000               	movlw	0
  2804  04BE  00D7               	movwf	___lwdiv@divisor+1
  2805  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2806  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2807  04C1  0833               	movf	((__PIR+1)^(0+128)+18),w
  2808  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2809  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2810  04C4  01D9               	clrf	___lwdiv@dividend+1
  2811  04C5  07D9               	addwf	___lwdiv@dividend+1,f
  2812  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2813  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2814  04C8  0832               	movf	(__PIR^(0+128)+18),w
  2815  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2816  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2817  04CB  01D8               	clrf	___lwdiv@dividend
  2818  04CC  07D8               	addwf	___lwdiv@dividend,f
  2819  04CD  158A  2648  118A   	fcall	___lwdiv
  2820  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2821  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2822  04D2  0856               	movf	?___lwdiv,w
  2823  04D3  00DF               	movwf	??_getPIR_AD
  2824  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  2825  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  2826  04D6  0834               	movf	(__PIR^(0+128)+20),w
  2827  04D7  3EB5               	addlw	(__PIR+21)& (0+255)
  2828  04D8  0084               	movwf	4
  2829  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2830  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2831  04DB  085F               	movf	??_getPIR_AD,w
  2832  04DC  1383               	bcf	3,7	;select IRP bank1
  2833  04DD  0080               	movwf	0
  2834                           
  2835                           ;PIR_B1.c: 263: _PIR.TenAverageValue = 0;
  2836  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2837  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2838  04E0  01B2               	clrf	(__PIR^(0+128)+18)
  2839  04E1  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2840                           
  2841                           ;PIR_B1.c: 265: for (i = 0; i <= 9; i++) {
  2842  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2843  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2844  04E4  01E4               	clrf	getPIR_AD@i
  2845  04E5  300A               	movlw	10
  2846  04E6  0264               	subwf	getPIR_AD@i,w
  2847  04E7  1803               	btfsc	3,0
  2848  04E8  2D05               	goto	l4920
  2849  04E9                     l4914:	
  2850                           
  2851                           ;PIR_B1.c: 266: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2852  04E9  0864               	movf	getPIR_AD@i,w
  2853  04EA  3EB5               	addlw	(__PIR+21)& (0+255)
  2854  04EB  0084               	movwf	4
  2855  04EC  0800               	movf	0,w
  2856  04ED  00DF               	movwf	??_getPIR_AD
  2857  04EE  01E0               	clrf	??_getPIR_AD+1
  2858  04EF  085F               	movf	??_getPIR_AD,w
  2859  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2860  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2861  04F2  07BF               	addwf	(__PIR^(0+128)+31),f
  2862  04F3  1803               	skipnc
  2863  04F4  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2864  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2865  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2866  04F7  0860               	movf	??_getPIR_AD+1,w
  2867  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2868  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2869  04FA  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2870  04FB  3001               	movlw	1
  2871  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2872  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2873  04FE  00DF               	movwf	??_getPIR_AD
  2874  04FF  085F               	movf	??_getPIR_AD,w
  2875  0500  07E4               	addwf	getPIR_AD@i,f
  2876  0501  300A               	movlw	10
  2877  0502  0264               	subwf	getPIR_AD@i,w
  2878  0503  1C03               	skipc
  2879  0504  2CE9               	goto	l4914
  2880  0505                     l4920:	
  2881                           
  2882                           ;PIR_B1.c: 267: }
  2883                           ;PIR_B1.c: 268: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2884  0505  300A               	movlw	10
  2885  0506  00D6               	movwf	___lwdiv@divisor
  2886  0507  3000               	movlw	0
  2887  0508  00D7               	movwf	___lwdiv@divisor+1
  2888  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2889  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2890  050B  0840               	movf	((__PIR+1)^(0+128)+31),w
  2891  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2892  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2893  050E  01D9               	clrf	___lwdiv@dividend+1
  2894  050F  07D9               	addwf	___lwdiv@dividend+1,f
  2895  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2896  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2897  0512  083F               	movf	(__PIR^(0+128)+31),w
  2898  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2899  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2900  0515  01D8               	clrf	___lwdiv@dividend
  2901  0516  07D8               	addwf	___lwdiv@dividend,f
  2902  0517  158A  2648  118A   	fcall	___lwdiv
  2903  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2904  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2905  051C  0856               	movf	?___lwdiv,w
  2906  051D  00DF               	movwf	??_getPIR_AD
  2907  051E  085F               	movf	??_getPIR_AD,w
  2908  051F  1683               	bsf	3,5	;RP0=1, select bank1
  2909  0520  1303               	bcf	3,6	;RP1=0, select bank1
  2910  0521  00A6               	movwf	(__PIR^(0+128)+6)
  2911                           
  2912                           ;PIR_B1.c: 269: _PIR.HundredAverageValue = 0;
  2913  0522  01BF               	clrf	(__PIR^(0+128)+31)
  2914  0523  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2915                           
  2916                           ;PIR_B1.c: 271: if (_PIR.TenCount < 10) {
  2917  0524  300A               	movlw	10
  2918  0525  0227               	subwf	(__PIR^(0+128)+7),w
  2919  0526  1803               	skipnc
  2920  0527  2D31               	goto	l4928
  2921                           
  2922                           ;PIR_B1.c: 272: _PIR.TenCount++;
  2923  0528  3001               	movlw	1
  2924  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2925  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2926  052B  00DF               	movwf	??_getPIR_AD
  2927  052C  085F               	movf	??_getPIR_AD,w
  2928  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2929  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2930  052F  07A7               	addwf	(__PIR^(0+128)+7),f
  2931                           
  2932                           ;PIR_B1.c: 273: } else {
  2933  0530  0008               	return
  2934  0531                     l4928:	
  2935                           
  2936                           ;PIR_B1.c: 274: _PIR.TenCount = 0;
  2937  0531  01A7               	clrf	(__PIR^(0+128)+7)
  2938                           
  2939                           ;PIR_B1.c: 275: if (_PIR.HundreCount < 10)
  2940  0532  300A               	movlw	10
  2941  0533  0234               	subwf	(__PIR^(0+128)+20),w
  2942  0534  1803               	skipnc
  2943  0535  2D3F               	goto	l4934
  2944                           
  2945                           ;PIR_B1.c: 276: _PIR.HundreCount++;
  2946  0536  3001               	movlw	1
  2947  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2948  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2949  0539  00DF               	movwf	??_getPIR_AD
  2950  053A  085F               	movf	??_getPIR_AD,w
  2951  053B  1683               	bsf	3,5	;RP0=1, select bank1
  2952  053C  1303               	bcf	3,6	;RP1=0, select bank1
  2953  053D  07B4               	addwf	(__PIR^(0+128)+20),f
  2954  053E  0008               	return
  2955  053F                     l4934:	
  2956                           
  2957                           ;PIR_B1.c: 277: else
  2958                           ;PIR_B1.c: 278: _PIR.HundreCount = 0;
  2959  053F  01B4               	clrf	(__PIR^(0+128)+20)
  2960  0540  0008               	return
  2961  0541                     __end_of_getPIR_AD:	
  2962                           
  2963                           	psect	text5
  2964  06D6                     __ptext5:	
  2965 ;; *************** function _getLoad_AD *****************
  2966 ;; Defined at:
  2967 ;;		line 15 in file "../src/OverLoad_B1.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  channel         1    wreg     unsigned char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  channel         1    2[BANK0 ] unsigned char 
  2972 ;;  i               1    5[BANK0 ] unsigned char 
  2973 ;;  j               1    4[BANK0 ] unsigned char 
  2974 ;;  k               1    3[BANK0 ] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;		None               void
  2977 ;; Registers used:
  2978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         0       4       0       0
  2986 ;;      Temps:          0       2       0       0
  2987 ;;      Totals:         0       6       0       0
  2988 ;;Total ram usage:        6 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    4
  2991 ;; This function calls:
  2992 ;;		_getAD
  2993 ;; This function is called by:
  2994 ;;		_main
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function _getLoad_AD
  3000  06D6                     _getLoad_AD:	
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3004                           ;getLoad_AD@channel stored from wreg
  3005  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3006  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3007  06D8  00D8               	movwf	getLoad_AD@channel
  3008                           
  3009                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3010  06D9  01DB               	clrf	getLoad_AD@i
  3011  06DA  01DA               	clrf	getLoad_AD@j
  3012  06DB  01D9               	clrf	getLoad_AD@k
  3013                           
  3014                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3015  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  3016  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  3017  06DE  1E4E               	btfss	_Load^(0+128),4
  3018  06DF  0008               	return
  3019                           
  3020                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3021  06E0  3073               	movlw	115
  3022  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3023  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3024  06E3  00D6               	movwf	??_getLoad_AD
  3025  06E4  0856               	movf	??_getLoad_AD,w
  3026  06E5  00F4               	movwf	getAD@adcon1
  3027  06E6  0858               	movf	getLoad_AD@channel,w
  3028  06E7  158A  24F3  118A   	fcall	_getAD
  3029  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  3030  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  3031  06EC  00D7               	movwf	??_getLoad_AD+1
  3032  06ED  0857               	movf	??_getLoad_AD+1,w
  3033  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  3034  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  3035  06F0  00E3               	movwf	(_Load^(0+128)+21)
  3036                           
  3037                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3038  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3039  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3040  06F3  01DB               	clrf	getLoad_AD@i
  3041  06F4  3004               	movlw	4
  3042  06F5  025B               	subwf	getLoad_AD@i,w
  3043  06F6  1803               	btfsc	3,0
  3044  06F7  2F1D               	goto	l4820
  3045  06F8                     l4808:	
  3046                           
  3047                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3048  06F8  085B               	movf	getLoad_AD@i,w
  3049  06F9  3ED8               	addlw	(_Load+10)& (0+255)
  3050  06FA  0084               	movwf	4
  3051  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  3052  06FC  1303               	bcf	3,6	;RP1=0, select bank1
  3053  06FD  0863               	movf	(_Load^(0+128)+21),w
  3054  06FE  1383               	bcf	3,7	;select IRP bank1
  3055  06FF  0200               	subwf	0,w
  3056  0700  1803               	skipnc
  3057  0701  2F14               	goto	l4816
  3058  0702  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0703  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0704  08DA               	movf	getLoad_AD@j,f
  3061  0705  1D03               	skipz
  3062  0706  2F14               	goto	l4816
  3063                           
  3064                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3065  0707  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0708  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0709  0863               	movf	(_Load^(0+128)+21),w
  3068  070A  1283               	bcf	3,5	;RP0=0, select bank0
  3069  070B  1303               	bcf	3,6	;RP1=0, select bank0
  3070  070C  00D6               	movwf	??_getLoad_AD
  3071  070D  085B               	movf	getLoad_AD@i,w
  3072  070E  3ED8               	addlw	(_Load+10)& (0+255)
  3073  070F  0084               	movwf	4
  3074  0710  0856               	movf	??_getLoad_AD,w
  3075  0711  0080               	movwf	0
  3076                           
  3077                           ;OverLoad_B1.c: 24: j = 1;
  3078  0712  01DA               	clrf	getLoad_AD@j
  3079  0713  0ADA               	incf	getLoad_AD@j,f
  3080  0714                     l4816:	
  3081  0714  3001               	movlw	1
  3082  0715  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0716  00D6               	movwf	??_getLoad_AD
  3084  0717  0856               	movf	??_getLoad_AD,w
  3085  0718  07DB               	addwf	getLoad_AD@i,f
  3086  0719  3004               	movlw	4
  3087  071A  025B               	subwf	getLoad_AD@i,w
  3088  071B  1C03               	skipc
  3089  071C  2EF8               	goto	l4808
  3090  071D                     l4820:	
  3091                           
  3092                           ;OverLoad_B1.c: 25: }
  3093                           ;OverLoad_B1.c: 26: }
  3094                           ;OverLoad_B1.c: 27: if (j == 0) {
  3095  071D  08DA               	movf	getLoad_AD@j,f
  3096  071E  1D03               	skipz
  3097  071F  0008               	return
  3098                           
  3099                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3100  0720  01DB               	clrf	getLoad_AD@i
  3101  0721                     L6:	
  3102  0721  3004               	movlw	4
  3103  0722  025B               	subwf	getLoad_AD@i,w
  3104  0723  1803               	btfsc	3,0
  3105  0724  0008               	return
  3106                           
  3107                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3108  0725  085B               	movf	getLoad_AD@i,w
  3109  0726  3EDD               	addlw	(_Load+15)& (0+255)
  3110  0727  0084               	movwf	4
  3111  0728  1383               	bcf	3,7	;select IRP bank1
  3112  0729  0800               	movf	0,w
  3113  072A  1683               	bsf	3,5	;RP0=1, select bank1
  3114  072B  1303               	bcf	3,6	;RP1=0, select bank1
  3115  072C  0263               	subwf	(_Load^(0+128)+21),w
  3116  072D  1803               	skipnc
  3117  072E  2F41               	goto	l4836
  3118  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3119  0730  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0731  08D9               	movf	getLoad_AD@k,f
  3121  0732  1D03               	skipz
  3122  0733  2F41               	goto	l4836
  3123                           
  3124                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3125  0734  1683               	bsf	3,5	;RP0=1, select bank1
  3126  0735  1303               	bcf	3,6	;RP1=0, select bank1
  3127  0736  0863               	movf	(_Load^(0+128)+21),w
  3128  0737  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0738  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0739  00D6               	movwf	??_getLoad_AD
  3131  073A  085B               	movf	getLoad_AD@i,w
  3132  073B  3EDD               	addlw	(_Load+15)& (0+255)
  3133  073C  0084               	movwf	4
  3134  073D  0856               	movf	??_getLoad_AD,w
  3135  073E  0080               	movwf	0
  3136                           
  3137                           ;OverLoad_B1.c: 31: k = 1;
  3138  073F  01D9               	clrf	getLoad_AD@k
  3139  0740  0AD9               	incf	getLoad_AD@k,f
  3140  0741                     l4836:	
  3141  0741  3001               	movlw	1
  3142  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0743  00D6               	movwf	??_getLoad_AD
  3144  0744  0856               	movf	??_getLoad_AD,w
  3145  0745  07DB               	addwf	getLoad_AD@i,f
  3146  0746  2F21               	goto	L6
  3147  0747                     __end_of_getLoad_AD:	
  3148                           
  3149                           	psect	text6
  3150  0D7C                     __ptext6:	
  3151 ;; *************** function _getCDS_AD *****************
  3152 ;; Defined at:
  3153 ;;		line 48 in file "../src/CDS_B1.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  channel1        1    wreg     unsigned char 
  3156 ;;  channel2        1    0[BANK0 ] unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  channel1        1    5[BANK0 ] unsigned char 
  3159 ;;  j               1    4[BANK0 ] unsigned char 
  3160 ;;  i               1    3[BANK0 ] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;		None               void
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3170 ;;      Params:         0       1       0       0
  3171 ;;      Locals:         0       3       0       0
  3172 ;;      Temps:          0       2       0       0
  3173 ;;      Totals:         0       6       0       0
  3174 ;;Total ram usage:        6 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		_getAD
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _getCDS_AD
  3186  0D7C                     _getCDS_AD:	
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3190                           ;getCDS_AD@channel1 stored from wreg
  3191  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  3192  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  3193  0D7E  00DB               	movwf	getCDS_AD@channel1
  3194                           
  3195                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3196  0D7F  01D9               	clrf	getCDS_AD@i
  3197  0D80  01DA               	clrf	getCDS_AD@j
  3198                           
  3199                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3200  0D81  1DAB               	btfss	__CDS,3
  3201  0D82  0008               	return
  3202                           
  3203                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3204  0D83  14AB               	bsf	__CDS,1
  3205                           
  3206                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3207  0D84  3070               	movlw	112
  3208  0D85  00D7               	movwf	??_getCDS_AD
  3209  0D86  0857               	movf	??_getCDS_AD,w
  3210  0D87  00F4               	movwf	getAD@adcon1
  3211  0D88  085B               	movf	getCDS_AD@channel1,w
  3212  0D89  158A  24F3  158A   	fcall	_getAD
  3213  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  3214  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  3215  0D8E  00D8               	movwf	??_getCDS_AD+1
  3216  0D8F  0858               	movf	??_getCDS_AD+1,w
  3217  0D90  00AF               	movwf	__CDS+4
  3218                           
  3219                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3220  0D91  082F               	movf	__CDS+4,w
  3221  0D92  00D7               	movwf	??_getCDS_AD
  3222  0D93  0857               	movf	??_getCDS_AD,w
  3223  0D94  00AD               	movwf	__CDS+2
  3224                           
  3225                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3226  0D95  3070               	movlw	112
  3227  0D96  00D7               	movwf	??_getCDS_AD
  3228  0D97  0857               	movf	??_getCDS_AD,w
  3229  0D98  00F4               	movwf	getAD@adcon1
  3230  0D99  0856               	movf	getCDS_AD@channel2,w
  3231  0D9A  158A  24F3         	fcall	_getAD
  3232  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0D9E  00D8               	movwf	??_getCDS_AD+1
  3235  0D9F  0858               	movf	??_getCDS_AD+1,w
  3236  0DA0  00AF               	movwf	__CDS+4
  3237                           
  3238                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3239  0DA1  082F               	movf	__CDS+4,w
  3240  0DA2  00D7               	movwf	??_getCDS_AD
  3241  0DA3  0857               	movf	??_getCDS_AD,w
  3242  0DA4  00AE               	movwf	__CDS+3
  3243  0DA5  0008               	return
  3244  0DA6                     __end_of_getCDS_AD:	
  3245                           
  3246                           	psect	text7
  3247  0CF3                     __ptext7:	
  3248 ;; *************** function _getAD *****************
  3249 ;; Defined at:
  3250 ;;		line 420 in file "../src/MCU_B1.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  adcon0          1    wreg     unsigned char 
  3253 ;;  adcon1          1    4[COMMON] unsigned char 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  adcon0          1    5[COMMON] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      unsigned char 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0, pclath, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3265 ;;      Params:         1       0       0       0
  3266 ;;      Locals:         1       0       0       0
  3267 ;;      Temps:          0       0       0       0
  3268 ;;      Totals:         2       0       0       0
  3269 ;;Total ram usage:        2 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    3
  3272 ;; This function calls:
  3273 ;;		_Timeout_Counter
  3274 ;;		_set_TimeoutCleared
  3275 ;; This function is called by:
  3276 ;;		_getCDS_AD
  3277 ;;		_getLoad_AD
  3278 ;;		_getTemp_AD
  3279 ;;		_getPIR_AD
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _getAD
  3285  0CF3                     _getAD:	
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3289                           ;getAD@adcon0 stored from wreg
  3290  0CF3  00F5               	movwf	getAD@adcon0
  3291                           
  3292                           ;MCU_B1.c: 421: ADCON0 = adcon0;
  3293  0CF4  0875               	movf	getAD@adcon0,w
  3294  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  3295  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  3296  0CF7  009F               	movwf	31	;volatile
  3297                           
  3298                           ;MCU_B1.c: 422: ADCON1 = adcon1;
  3299  0CF8  0874               	movf	getAD@adcon1,w
  3300  0CF9  1683               	bsf	3,5	;RP0=1, select bank1
  3301  0CFA  1303               	bcf	3,6	;RP1=0, select bank1
  3302  0CFB  009F               	movwf	31	;volatile
  3303                           
  3304                           ;MCU_B1.c: 423: GO_nDONE = 1;
  3305  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  3306  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  3307  0CFE  149F               	bsf	31,1	;volatile
  3308                           
  3309                           ;MCU_B1.c: 424: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3310  0CFF  2D03               	goto	l4530
  3311  0D00                     l4528:	
  3312                           
  3313                           ;MCU_B1.c: 425: Timeout_Counter();
  3314  0D00  158A  2435  158A   	fcall	_Timeout_Counter
  3315  0D03                     l4530:	
  3316  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0D05  1C9F               	btfss	31,1	;volatile
  3319  0D06  2D09               	goto	l4534
  3320  0D07  1D23               	btfss	_myMain+3,2
  3321  0D08  2D00               	goto	l4528
  3322  0D09                     l4534:	
  3323                           
  3324                           ;MCU_B1.c: 426: };
  3325                           ;MCU_B1.c: 427: set_TimeoutCleared();
  3326  0D09  118A  27FA         	fcall	_set_TimeoutCleared
  3327                           
  3328                           ;MCU_B1.c: 428: return ADRES;
  3329  0D0B  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0D0C  1303               	bcf	3,6	;RP1=0, select bank0
  3331  0D0D  081E               	movf	30,w	;volatile
  3332  0D0E  0008               	return
  3333  0D0F                     __end_of_getAD:	
  3334                           
  3335                           	psect	text8
  3336  07FA                     __ptext8:	
  3337 ;; *************** function _set_TimeoutCleared *****************
  3338 ;; Defined at:
  3339 ;;		line 282 in file "../src/Main_B1.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;		None               void
  3346 ;; Registers used:
  3347 ;;		status,2
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3353 ;;      Params:         0       0       0       0
  3354 ;;      Locals:         0       0       0       0
  3355 ;;      Temps:          0       0       0       0
  3356 ;;      Totals:         0       0       0       0
  3357 ;;Total ram usage:        0 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    2
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_getAD
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _set_TimeoutCleared
  3369  07FA                     _set_TimeoutCleared:	
  3370                           
  3371                           ;Main_B1.c: 283: myMain.Timeout = 0;
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _set_TimeoutCleared: [status,2]
  3375  07FA  1283               	bcf	3,5	;RP0=0, select bank0
  3376  07FB  1303               	bcf	3,6	;RP1=0, select bank0
  3377  07FC  1123               	bcf	_myMain+3,2
  3378                           
  3379                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  3380  07FD  01A4               	clrf	_myMain+4
  3381  07FE  01A5               	clrf	_myMain+5
  3382  07FF  0008               	return
  3383  0800                     __end_of_set_TimeoutCleared:	
  3384                           
  3385                           	psect	text9
  3386  0C35                     __ptext9:	
  3387 ;; *************** function _Timeout_Counter *****************
  3388 ;; Defined at:
  3389 ;;		line 273 in file "../src/Main_B1.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg, status,2
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3403 ;;      Params:         0       0       0       0
  3404 ;;      Locals:         0       0       0       0
  3405 ;;      Temps:          0       0       0       0
  3406 ;;      Totals:         0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_getAD
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _Timeout_Counter
  3419  0C35                     _Timeout_Counter:	
  3420                           
  3421                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3425  0C35  3001               	movlw	1
  3426  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0C38  07A4               	addwf	_myMain+4,f
  3429  0C39  1803               	skipnc
  3430  0C3A  0AA5               	incf	_myMain+5,f
  3431  0C3B  3000               	movlw	0
  3432  0C3C  07A5               	addwf	_myMain+5,f
  3433                           
  3434                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  3435  0C3D  3061               	movlw	97
  3436  0C3E  0625               	xorwf	_myMain+5,w
  3437  0C3F  1D03               	skipz
  3438  0C40  2C43               	goto	u5125
  3439  0C41  30A8               	movlw	168
  3440  0C42  0624               	xorwf	_myMain+4,w
  3441  0C43                     u5125:	
  3442  0C43  1D03               	skipz
  3443  0C44  0008               	return
  3444                           
  3445                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  3446  0C45  01A4               	clrf	_myMain+4
  3447  0C46  01A5               	clrf	_myMain+5
  3448                           
  3449                           ;Main_B1.c: 277: myMain.Timeout = 1;
  3450  0C47  1523               	bsf	_myMain+3,2
  3451  0C48  0008               	return
  3452  0C49                     __end_of_Timeout_Counter:	
  3453                           
  3454                           	psect	text10
  3455  0C00                     __ptext10:	
  3456 ;; *************** function _WDT_Main *****************
  3457 ;; Defined at:
  3458 ;;		line 1091 in file "../src/MCU_B1.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;		None               void
  3465 ;; Registers used:
  3466 ;;		wreg, status,2, status,0, pclath, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3472 ;;      Params:         0       0       0       0
  3473 ;;      Locals:         0       0       0       0
  3474 ;;      Temps:          1       0       0       0
  3475 ;;      Totals:         1       0       0       0
  3476 ;;Total ram usage:        1 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    3
  3479 ;; This function calls:
  3480 ;;		_WDT_Clearing
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _WDT_Main
  3488  0C00                     _WDT_Main:	
  3489                           
  3490                           ;MCU_B1.c: 1092: if (WDT.Enable == 1) {
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3494  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0C02  1C37               	btfss	_WDT,0
  3497  0C03  0008               	return
  3498                           
  3499                           ;MCU_B1.c: 1093: if (WDT.Timer-- > 0) {
  3500  0C04  3001               	movlw	1
  3501  0C05  02B8               	subwf	_WDT+1,f
  3502  0C06  0838               	movf	_WDT+1,w
  3503  0C07  3AFF               	xorlw	255
  3504  0C08  1903               	skipnz
  3505  0C09  0008               	return
  3506                           
  3507                           ;MCU_B1.c: 1094: WDT.Timer = 100;
  3508  0C0A  3064               	movlw	100
  3509  0C0B  00F4               	movwf	??_WDT_Main
  3510  0C0C  0874               	movf	??_WDT_Main,w
  3511  0C0D  00B8               	movwf	_WDT+1
  3512                           
  3513                           ;MCU_B1.c: 1095: WDT_Clearing();
  3514  0C0E  118A  2002         	fcall	_WDT_Clearing
  3515  0C10  0008               	return
  3516  0C11                     __end_of_WDT_Main:	
  3517                           
  3518                           	psect	text11
  3519  0002                     __ptext11:	
  3520 ;; *************** function _WDT_Clearing *****************
  3521 ;; Defined at:
  3522 ;;		line 1101 in file "../src/MCU_B1.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;		None               void
  3529 ;; Registers used:
  3530 ;;		None
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3536 ;;      Params:         0       0       0       0
  3537 ;;      Locals:         0       0       0       0
  3538 ;;      Temps:          0       0       0       0
  3539 ;;      Totals:         0       0       0       0
  3540 ;;Total ram usage:        0 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_WDT_Main
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _WDT_Clearing
  3552  0002                     _WDT_Clearing:	
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _WDT_Clearing: []
  3556  0002  0064               	clrwdt	;# 
  3557  0003  0008               	return
  3558  0004                     __end_of_WDT_Clearing:	
  3559                           
  3560                           	psect	text12
  3561  0B10                     __ptext12:	
  3562 ;; *************** function _Temp_Main *****************
  3563 ;; Defined at:
  3564 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;		None               void
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, pclath, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3578 ;;      Params:         0       0       0       0
  3579 ;;      Locals:         0       0       0       0
  3580 ;;      Temps:          0       0       0       0
  3581 ;;      Totals:         0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    4
  3585 ;; This function calls:
  3586 ;;		_setTemp_Main
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           
  3593                           ;psect for function _Temp_Main
  3594  0B10                     _Temp_Main:	
  3595                           
  3596                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3597                           
  3598                           ;incstack = 0
  3599                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3600  0B10  118A  25DA         	fcall	_setTemp_Main
  3601  0B12  0008               	return
  3602  0B13                     __end_of_Temp_Main:	
  3603                           
  3604                           	psect	text13
  3605  05DA                     __ptext13:	
  3606 ;; *************** function _setTemp_Main *****************
  3607 ;; Defined at:
  3608 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  error           1    8[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;		None               void
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0, pclath, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3622 ;;      Params:         0       0       0       0
  3623 ;;      Locals:         0       1       0       0
  3624 ;;      Temps:          1       0       0       0
  3625 ;;      Totals:         1       1       0       0
  3626 ;;Total ram usage:        2 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    3
  3629 ;; This function calls:
  3630 ;;		___awdiv
  3631 ;;		_getMain_All_Error_Status
  3632 ;;		_getMain_All_LightsStatus
  3633 ;; This function is called by:
  3634 ;;		_Temp_Main
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _setTemp_Main
  3640  05DA                     _setTemp_Main:	
  3641                           
  3642                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3646  05DA  3000               	movlw	0
  3647  05DB  158A  260A  118A   	fcall	_getMain_All_Error_Status
  3648  05DE  00F5               	movwf	??_setTemp_Main
  3649  05DF  0875               	movf	??_setTemp_Main,w
  3650  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  3651  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  3652  05E2  00DE               	movwf	setTemp_Main@error
  3653                           
  3654                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3655  05E3  1C3B               	btfss	_Temp,0
  3656  05E4  2E5C               	goto	l824
  3657                           
  3658                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3659  05E5  193B               	btfsc	_Temp,2
  3660  05E6  2DF8               	goto	l4622
  3661                           
  3662                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3663  05E7  3001               	movlw	1
  3664  05E8  07BC               	addwf	_Temp+1,f
  3665  05E9  1803               	skipnc
  3666  05EA  0ABD               	incf	_Temp+2,f
  3667  05EB  3000               	movlw	0
  3668  05EC  07BD               	addwf	_Temp+2,f
  3669                           
  3670                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  3671  05ED  3000               	movlw	0
  3672  05EE  023D               	subwf	_Temp+2,w
  3673  05EF  30FA               	movlw	250
  3674  05F0  1903               	skipnz
  3675  05F1  023C               	subwf	_Temp+1,w
  3676  05F2  1C03               	skipc
  3677  05F3  0008               	return
  3678                           
  3679                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3680  05F4  01BC               	clrf	_Temp+1
  3681  05F5  01BD               	clrf	_Temp+2
  3682                           
  3683                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3684  05F6  153B               	bsf	_Temp,2
  3685                           
  3686                           ;OverTemperature_B1.c: 70: }
  3687                           ;OverTemperature_B1.c: 71: } else {
  3688  05F7  0008               	return
  3689  05F8                     l4622:	
  3690                           
  3691                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3692  05F8  3001               	movlw	1
  3693  05F9  07BC               	addwf	_Temp+1,f
  3694  05FA  1803               	skipnc
  3695  05FB  0ABD               	incf	_Temp+2,f
  3696  05FC  3000               	movlw	0
  3697  05FD  07BD               	addwf	_Temp+2,f
  3698                           
  3699                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  3700  05FE  3000               	movlw	0
  3701  05FF  023D               	subwf	_Temp+2,w
  3702  0600  3002               	movlw	2
  3703  0601  1903               	skipnz
  3704  0602  023C               	subwf	_Temp+1,w
  3705  0603  1C03               	skipc
  3706  0604  0008               	return
  3707                           
  3708                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3709  0605  01BC               	clrf	_Temp+1
  3710  0606  01BD               	clrf	_Temp+2
  3711                           
  3712                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3713  0607  0842               	movf	_Temp+7,w
  3714  0608  1903               	btfsc	3,2
  3715  0609  2E59               	goto	l829
  3716  060A  0843               	movf	_Temp+8,w
  3717  060B  1903               	btfsc	3,2
  3718  060C  2E59               	goto	l829
  3719                           
  3720                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3721  060D  113B               	bcf	_Temp,2
  3722                           
  3723                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3724  060E  3002               	movlw	2
  3725  060F  00D6               	movwf	___awdiv@divisor
  3726  0610  3000               	movlw	0
  3727  0611  00D7               	movwf	___awdiv@divisor+1
  3728  0612  0842               	movf	_Temp+7,w
  3729  0613  0743               	addwf	_Temp+8,w
  3730  0614  00D8               	movwf	___awdiv@dividend
  3731  0615  01D9               	clrf	___awdiv@dividend+1
  3732  0616  0DD9               	rlf	___awdiv@dividend+1,f
  3733  0617  158A  26D8  118A   	fcall	___awdiv
  3734  061A  1283               	bcf	3,5	;RP0=0, select bank0
  3735  061B  1303               	bcf	3,6	;RP1=0, select bank0
  3736  061C  0856               	movf	?___awdiv,w
  3737  061D  00F5               	movwf	??_setTemp_Main
  3738  061E  0875               	movf	??_setTemp_Main,w
  3739  061F  00C1               	movwf	_Temp+6
  3740                           
  3741                           ;OverTemperature_B1.c: 81: if (getMain_All_LightsStatus() == 1) {
  3742  0620  158A  235E  118A   	fcall	_getMain_All_LightsStatus
  3743  0623  3A01               	xorlw	1
  3744  0624  1D03               	skipz
  3745  0625  2E2E               	goto	l4638
  3746                           
  3747                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3748  0626  3085               	movlw	133
  3749  0627  00F5               	movwf	??_setTemp_Main
  3750  0628  0875               	movf	??_setTemp_Main,w
  3751  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3752  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3753  062B  00C5               	movwf	_Temp+10
  3754                           
  3755                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3756  062C  3070               	movlw	112
  3757  062D  2E35               	goto	L7
  3758  062E                     l4638:	
  3759                           ;OverTemperature_B1.c: 84: } else {
  3760                           
  3761                           
  3762                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3763  062E  304F               	movlw	79
  3764  062F  00F5               	movwf	??_setTemp_Main
  3765  0630  0875               	movf	??_setTemp_Main,w
  3766  0631  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0632  1303               	bcf	3,6	;RP1=0, select bank0
  3768  0633  00C5               	movwf	_Temp+10
  3769                           
  3770                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3771  0634  3040               	movlw	64
  3772  0635                     L7:	
  3773  0635  00F5               	movwf	??_setTemp_Main
  3774  0636  0875               	movf	??_setTemp_Main,w
  3775  0637  00C6               	movwf	_Temp+11
  3776                           
  3777                           ;OverTemperature_B1.c: 87: }
  3778                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3779  0638  1CBB               	btfss	_Temp,1
  3780  0639  2E49               	goto	l4654
  3781                           
  3782                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3783  063A  0845               	movf	_Temp+10,w
  3784  063B  0241               	subwf	_Temp+6,w
  3785  063C  1C03               	skipc
  3786  063D  2E58               	goto	l4664
  3787                           
  3788                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3789  063E  3001               	movlw	1
  3790  063F  00F5               	movwf	??_setTemp_Main
  3791  0640  0875               	movf	??_setTemp_Main,w
  3792  0641  07BE               	addwf	_Temp+3,f
  3793                           
  3794                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3795  0642  3003               	movlw	3
  3796  0643  023E               	subwf	_Temp+3,w
  3797  0644  1C03               	skipc
  3798  0645  2E59               	goto	l829
  3799                           
  3800                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3801  0646  01BE               	clrf	_Temp+3
  3802                           
  3803                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3804  0647  10BB               	bcf	_Temp,1
  3805                           
  3806                           ;OverTemperature_B1.c: 103: }
  3807                           ;OverTemperature_B1.c: 104: } else {
  3808                           
  3809                           ;OverTemperature_B1.c: 102: ;;
  3810  0648  2E59               	goto	l829
  3811  0649                     l4654:	
  3812                           ;OverTemperature_B1.c: 106: }
  3813                           ;OverTemperature_B1.c: 107: } else {
  3814                           
  3815                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3816                           
  3817                           
  3818                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3819  0649  0841               	movf	_Temp+6,w
  3820  064A  0246               	subwf	_Temp+11,w
  3821  064B  1C03               	skipc
  3822  064C  2E58               	goto	l4664
  3823                           
  3824                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3825  064D  3001               	movlw	1
  3826  064E  00F5               	movwf	??_setTemp_Main
  3827  064F  0875               	movf	??_setTemp_Main,w
  3828  0650  07BE               	addwf	_Temp+3,f
  3829                           
  3830                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3831  0651  3003               	movlw	3
  3832  0652  023E               	subwf	_Temp+3,w
  3833  0653  1C03               	skipc
  3834  0654  2E59               	goto	l829
  3835                           
  3836                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3837  0655  01BE               	clrf	_Temp+3
  3838                           
  3839                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3840  0656  14BB               	bsf	_Temp,1
  3841                           
  3842                           ;OverTemperature_B1.c: 113: }
  3843                           ;OverTemperature_B1.c: 114: } else {
  3844  0657  2E59               	goto	l829
  3845  0658                     l4664:	
  3846                           
  3847                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3848  0658  01BE               	clrf	_Temp+3
  3849  0659                     l829:	
  3850                           ;OverTemperature_B1.c: 116: }
  3851                           ;OverTemperature_B1.c: 117: }
  3852                           ;OverTemperature_B1.c: 118: ;;
  3853                           ;OverTemperature_B1.c: 119: ;;
  3854                           
  3855                           
  3856                           ;OverTemperature_B1.c: 135: }
  3857                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3858  0659  01C2               	clrf	_Temp+7
  3859                           
  3860                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3861  065A  01C3               	clrf	_Temp+8
  3862                           
  3863                           ;OverTemperature_B1.c: 138: }
  3864                           ;OverTemperature_B1.c: 139: }
  3865                           ;OverTemperature_B1.c: 141: } else {
  3866  065B  0008               	return
  3867  065C                     l824:	
  3868                           
  3869                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3870  065C  1C20               	btfss	_myMain,0
  3871  065D  0008               	return
  3872                           
  3873                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3874  065E  143B               	bsf	_Temp,0
  3875  065F  0008               	return
  3876  0660                     __end_of_setTemp_Main:	
  3877                           
  3878                           	psect	text14
  3879  0B0D                     __ptext14:	
  3880 ;; *************** function _Temp_Initialization *****************
  3881 ;; Defined at:
  3882 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;		None               void
  3889 ;; Registers used:
  3890 ;;		status,2, status,0, pclath, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3896 ;;      Params:         0       0       0       0
  3897 ;;      Locals:         0       0       0       0
  3898 ;;      Temps:          0       0       0       0
  3899 ;;      Totals:         0       0       0       0
  3900 ;;Total ram usage:        0 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    3
  3903 ;; This function calls:
  3904 ;;		_setTemp_Initialization
  3905 ;; This function is called by:
  3906 ;;		_main
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _Temp_Initialization
  3912  0B0D                     _Temp_Initialization:	
  3913                           
  3914                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3918  0B0D  158A  22FF         	fcall	_setTemp_Initialization
  3919  0B0F  0008               	return
  3920  0B10                     __end_of_Temp_Initialization:	
  3921                           
  3922                           	psect	text15
  3923  0AFF                     __ptext15:	
  3924 ;; *************** function _setTemp_Initialization *****************
  3925 ;; Defined at:
  3926 ;;		line 44 in file "../src/OverTemperature_B1.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;		None               void
  3933 ;; Registers used:
  3934 ;;		None
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3940 ;;      Params:         0       0       0       0
  3941 ;;      Locals:         0       0       0       0
  3942 ;;      Temps:          0       0       0       0
  3943 ;;      Totals:         0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    2
  3947 ;; This function calls:
  3948 ;;		Nothing
  3949 ;; This function is called by:
  3950 ;;		_Temp_Initialization
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _setTemp_Initialization
  3956  0AFF                     _setTemp_Initialization:	
  3957                           
  3958                           ;incstack = 0
  3959                           ; Regs used in _setTemp_Initialization: []
  3960  0AFF  0008               	return
  3961  0B00                     __end_of_setTemp_Initialization:	
  3962                           
  3963                           	psect	text16
  3964  0B0A                     __ptext16:	
  3965 ;; *************** function _SYSC_Main *****************
  3966 ;; Defined at:
  3967 ;;		line 17 in file "../src/SYSC_B1.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3981 ;;      Params:         0       0       0       0
  3982 ;;      Locals:         0       0       0       0
  3983 ;;      Temps:          0       0       0       0
  3984 ;;      Totals:         0       0       0       0
  3985 ;;Total ram usage:        0 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    4
  3988 ;; This function calls:
  3989 ;;		_setSYSC_Main
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _SYSC_Main
  3997  0B0A                     _SYSC_Main:	
  3998                           
  3999                           ;SYSC_B1.c: 19: setSYSC_Main();
  4000                           
  4001                           ;incstack = 0
  4002                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4003  0B0A  118A  27B8         	fcall	_setSYSC_Main
  4004  0B0C  0008               	return
  4005  0B0D                     __end_of_SYSC_Main:	
  4006                           
  4007                           	psect	text17
  4008  07B8                     __ptext17:	
  4009 ;; *************** function _setSYSC_Main *****************
  4010 ;; Defined at:
  4011 ;;		line 23 in file "../src/SYSC_B1.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4025 ;;      Params:         0       0       0       0
  4026 ;;      Locals:         0       0       0       0
  4027 ;;      Temps:          0       0       0       0
  4028 ;;      Totals:         0       0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    3
  4032 ;; This function calls:
  4033 ;;		_getMain_All_Error_Status
  4034 ;; This function is called by:
  4035 ;;		_SYSC_Main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _setSYSC_Main
  4041  07B8                     _setSYSC_Main:	
  4042                           
  4043                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4047  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  4048  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  4049  07BA  1C26               	btfss	_SYSC,0
  4050  07BB  0008               	return
  4051                           
  4052                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4053  07BC  18A6               	btfsc	_SYSC,1
  4054  07BD  2FCF               	goto	l3490
  4055                           
  4056                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4057  07BE  3001               	movlw	1
  4058  07BF  07A7               	addwf	_SYSC+1,f
  4059  07C0  1803               	skipnc
  4060  07C1  0AA8               	incf	_SYSC+2,f
  4061  07C2  3000               	movlw	0
  4062  07C3  07A8               	addwf	_SYSC+2,f
  4063                           
  4064                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4065  07C4  3000               	movlw	0
  4066  07C5  0228               	subwf	_SYSC+2,w
  4067  07C6  3008               	movlw	8
  4068  07C7  1903               	skipnz
  4069  07C8  0227               	subwf	_SYSC+1,w
  4070  07C9  1C03               	skipc
  4071  07CA  0008               	return
  4072                           
  4073                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4074  07CB  01A7               	clrf	_SYSC+1
  4075  07CC  01A8               	clrf	_SYSC+2
  4076                           
  4077                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4078  07CD  14A6               	bsf	_SYSC,1
  4079                           
  4080                           ;SYSC_B1.c: 31: }
  4081                           ;SYSC_B1.c: 32: } else {
  4082  07CE  0008               	return
  4083  07CF                     l3490:	
  4084                           
  4085                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4086  07CF  3001               	movlw	1
  4087  07D0  158A  260A  118A   	fcall	_getMain_All_Error_Status
  4088  07D3  3800               	iorlw	0
  4089  07D4  1D03               	skipz
  4090  07D5  0008               	return
  4091                           
  4092                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4093  07D6  3001               	movlw	1
  4094  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  4095  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  4096  07D9  07A7               	addwf	_SYSC+1,f
  4097  07DA  1803               	skipnc
  4098  07DB  0AA8               	incf	_SYSC+2,f
  4099  07DC  3000               	movlw	0
  4100  07DD  07A8               	addwf	_SYSC+2,f
  4101                           
  4102                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4103  07DE  3019               	movlw	25
  4104  07DF  0627               	xorwf	_SYSC+1,w
  4105  07E0  0428               	iorwf	_SYSC+2,w
  4106  07E1  1D03               	skipz
  4107  07E2  2FE8               	goto	l3496
  4108                           
  4109                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4110  07E3  01A7               	clrf	_SYSC+1
  4111  07E4  01A8               	clrf	_SYSC+2
  4112                           
  4113                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4114  07E5  01A9               	clrf	_SYSC+3
  4115  07E6  01AA               	clrf	_SYSC+4
  4116                           
  4117                           ;SYSC_B1.c: 38: } else {
  4118  07E7  0008               	return
  4119  07E8                     l3496:	
  4120                           
  4121                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4122  07E8  3001               	movlw	1
  4123  07E9  07A9               	addwf	_SYSC+3,f
  4124  07EA  1803               	skipnc
  4125  07EB  0AAA               	incf	_SYSC+4,f
  4126  07EC  3000               	movlw	0
  4127  07ED  07AA               	addwf	_SYSC+4,f
  4128                           
  4129                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4130  07EE  3001               	movlw	1
  4131  07EF  062A               	xorwf	_SYSC+4,w
  4132  07F0  1D03               	skipz
  4133  07F1  2FF4               	goto	u3265
  4134  07F2  30F4               	movlw	244
  4135  07F3  0629               	xorwf	_SYSC+3,w
  4136  07F4                     u3265:	
  4137  07F4  1D03               	skipz
  4138  07F5  0008               	return
  4139                           
  4140                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4141  07F6  01A9               	clrf	_SYSC+3
  4142  07F7  01AA               	clrf	_SYSC+4
  4143                           
  4144                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4145  07F8  10A6               	bcf	_SYSC,1
  4146  07F9  0008               	return
  4147  07FA                     __end_of_setSYSC_Main:	
  4148                           
  4149                           	psect	text18
  4150  0B07                     __ptext18:	
  4151 ;; *************** function _SYSC_Initialization *****************
  4152 ;; Defined at:
  4153 ;;		line 7 in file "../src/SYSC_B1.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		status,2, status,0, pclath, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4167 ;;      Params:         0       0       0       0
  4168 ;;      Locals:         0       0       0       0
  4169 ;;      Temps:          0       0       0       0
  4170 ;;      Totals:         0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    3
  4174 ;; This function calls:
  4175 ;;		_setSYSC_Initialization
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _SYSC_Initialization
  4183  0B07                     _SYSC_Initialization:	
  4184                           
  4185                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4189  0B07  158A  231B         	fcall	_setSYSC_Initialization
  4190  0B09  0008               	return
  4191  0B0A                     __end_of_SYSC_Initialization:	
  4192                           
  4193                           	psect	text19
  4194  0B1B                     __ptext19:	
  4195 ;; *************** function _setSYSC_Initialization *****************
  4196 ;; Defined at:
  4197 ;;		line 13 in file "../src/SYSC_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		None
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4211 ;;      Params:         0       0       0       0
  4212 ;;      Locals:         0       0       0       0
  4213 ;;      Temps:          0       0       0       0
  4214 ;;      Totals:         0       0       0       0
  4215 ;;Total ram usage:        0 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    2
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_SYSC_Initialization
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _setSYSC_Initialization
  4227  0B1B                     _setSYSC_Initialization:	
  4228                           
  4229                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _setSYSC_Initialization: []
  4233  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  4234  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  4235  0B1D  1426               	bsf	_SYSC,0
  4236  0B1E  0008               	return
  4237  0B1F                     __end_of_setSYSC_Initialization:	
  4238                           
  4239                           	psect	text20
  4240  0026                     __ptext20:	
  4241 ;; *************** function _PIR_Main *****************
  4242 ;; Defined at:
  4243 ;;		line 13 in file "../src/PIR_B1.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  cds             1   14[BANK0 ] unsigned char 
  4248 ;;  error           1   11[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;		None               void
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4258 ;;      Params:         0       0       0       0
  4259 ;;      Locals:         0       4       0       0
  4260 ;;      Temps:          0       5       0       0
  4261 ;;      Totals:         0       9       0       0
  4262 ;;Total ram usage:        9 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    4
  4265 ;; This function calls:
  4266 ;;		_getCDS_Status
  4267 ;;		_getLights_Status
  4268 ;;		_getMain_All_Error_Status
  4269 ;;		_setLED
  4270 ;;		_setLights_Trigger
  4271 ;; This function is called by:
  4272 ;;		_main
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _PIR_Main
  4278  0026                     _PIR_Main:	
  4279                           
  4280                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4284  0026  3000               	movlw	0
  4285  0027  158A  260A  118A   	fcall	_getMain_All_Error_Status
  4286  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4287  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4288  002C  00DC               	movwf	??_PIR_Main
  4289  002D  085C               	movf	??_PIR_Main,w
  4290  002E  00E1               	movwf	PIR_Main@error
  4291                           
  4292                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4293  002F  158A  234E  118A   	fcall	_getCDS_Status
  4294  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4295  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4296  0034  00DC               	movwf	??_PIR_Main
  4297  0035  085C               	movf	??_PIR_Main,w
  4298  0036  00E4               	movwf	PIR_Main@cds
  4299                           
  4300                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4301  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4302  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4303  0039  1C20               	btfss	__PIR^(0+128),0
  4304  003A  2A04               	goto	l896
  4305                           
  4306                           ;PIR_B1.c: 17: if (error == 0) {
  4307  003B  1283               	bcf	3,5	;RP0=0, select bank0
  4308  003C  1303               	bcf	3,6	;RP1=0, select bank0
  4309  003D  08E1               	movf	PIR_Main@error,f
  4310  003E  1D03               	skipz
  4311  003F  2879               	goto	l897
  4312                           
  4313                           ;PIR_B1.c: 19: if (cds == 1) {
  4314  0040  0864               	movf	PIR_Main@cds,w
  4315  0041  3A01               	xorlw	1
  4316  0042  1D03               	skipz
  4317  0043  2848               	goto	l898
  4318                           
  4319                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4320  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4321  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4322  0046  17A0               	bsf	__PIR^(0+128),7
  4323                           
  4324                           ;PIR_B1.c: 21: } else {
  4325  0047  2869               	goto	l5110
  4326  0048                     l898:	
  4327                           
  4328                           ;PIR_B1.c: 22: _PIR.Available = 0;
  4329  0048  1683               	bsf	3,5	;RP0=1, select bank1
  4330  0049  1303               	bcf	3,6	;RP1=0, select bank1
  4331  004A  13A0               	bcf	__PIR^(0+128),7
  4332                           
  4333                           ;PIR_B1.c: 23: if (_PIR.OK == 1) {
  4334  004B  1DA0               	btfss	__PIR^(0+128),3
  4335  004C  2869               	goto	l5110
  4336                           
  4337                           ;PIR_B1.c: 25: if (getLights_Status(1) == 1) {
  4338  004D  3001               	movlw	1
  4339  004E  158A  23DE  118A   	fcall	_getLights_Status
  4340  0051  3A01               	xorlw	1
  4341  0052  1D03               	skipz
  4342  0053  285B               	goto	l901
  4343                           
  4344                           ;PIR_B1.c: 26: setLights_Trigger(1, 0);
  4345  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0055  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0056  01D6               	clrf	setLights_Trigger@command
  4348  0057  3001               	movlw	1
  4349  0058  158A  24D8  118A   	fcall	_setLights_Trigger
  4350  005B                     l901:	
  4351                           
  4352                           ;PIR_B1.c: 27: }
  4353                           ;PIR_B1.c: 29: setLED(1, 0);
  4354  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4355  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4356  005D  01D6               	clrf	setLED@command
  4357  005E  3001               	movlw	1
  4358  005F  158A  2735  118A   	fcall	_setLED
  4359                           
  4360                           ;PIR_B1.c: 30: setLED(2, 0);
  4361  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4362  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4363  0064  01D6               	clrf	setLED@command
  4364  0065  3002               	movlw	2
  4365  0066  158A  2735  118A   	fcall	_setLED
  4366  0069                     l5110:	
  4367                           
  4368                           ;PIR_B1.c: 31: }
  4369                           ;PIR_B1.c: 32: }
  4370                           ;PIR_B1.c: 36: if (_PIR.Detect == 0) {
  4371  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4372  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4373  006B  1A20               	btfsc	__PIR^(0+128),4
  4374  006C  287F               	goto	l904
  4375                           
  4376                           ;PIR_B1.c: 37: _PIR.Detect = 1;
  4377  006D  1620               	bsf	__PIR^(0+128),4
  4378                           
  4379                           ;PIR_B1.c: 38: if (_PIR.OK == 0) {
  4380  006E  19A0               	btfsc	__PIR^(0+128),3
  4381  006F  287F               	goto	l904
  4382                           
  4383                           ;PIR_B1.c: 39: setLED(1, 1);
  4384  0070  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0071  1303               	bcf	3,6	;RP1=0, select bank0
  4386  0072  01D6               	clrf	setLED@command
  4387  0073  0AD6               	incf	setLED@command,f
  4388  0074  3001               	movlw	1
  4389  0075  158A  2735  118A   	fcall	_setLED
  4390                           
  4391                           ;PIR_B1.c: 40: }
  4392                           ;PIR_B1.c: 41: }
  4393                           ;PIR_B1.c: 42: } else {
  4394  0078  287F               	goto	l904
  4395  0079                     l897:	
  4396                           
  4397                           ;PIR_B1.c: 43: if (_PIR.Detect == 1) {
  4398  0079  1683               	bsf	3,5	;RP0=1, select bank1
  4399  007A  1303               	bcf	3,6	;RP1=0, select bank1
  4400  007B  1E20               	btfss	__PIR^(0+128),4
  4401  007C  287F               	goto	l904
  4402                           
  4403                           ;PIR_B1.c: 44: _PIR.Detect = 0;
  4404  007D  1220               	bcf	__PIR^(0+128),4
  4405                           
  4406                           ;PIR_B1.c: 45: _PIR.Available = 0;
  4407  007E  13A0               	bcf	__PIR^(0+128),7
  4408  007F                     l904:	
  4409                           
  4410                           ;PIR_B1.c: 63: }
  4411                           ;PIR_B1.c: 64: }
  4412                           ;PIR_B1.c: 66: if (_PIR.ADtoGO == 0) {
  4413  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4414  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4415  0081  18A0               	btfsc	__PIR^(0+128),1
  4416  0082  2892               	goto	l906
  4417                           
  4418                           ;PIR_B1.c: 67: _PIR.Time++;
  4419  0083  3001               	movlw	1
  4420  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0086  00DC               	movwf	??_PIR_Main
  4423  0087  085C               	movf	??_PIR_Main,w
  4424  0088  1683               	bsf	3,5	;RP0=1, select bank1
  4425  0089  1303               	bcf	3,6	;RP1=0, select bank1
  4426  008A  07A5               	addwf	(__PIR^(0+128)+5),f
  4427                           
  4428                           ;PIR_B1.c: 68: if (_PIR.Time == (100 / 20)) {
  4429  008B  0825               	movf	(__PIR^(0+128)+5),w
  4430  008C  3A05               	xorlw	5
  4431  008D  1D03               	skipz
  4432  008E  29A5               	goto	l5200
  4433                           
  4434                           ;PIR_B1.c: 69: _PIR.Time = 0;
  4435  008F  01A5               	clrf	(__PIR^(0+128)+5)
  4436                           
  4437                           ;PIR_B1.c: 70: _PIR.ADtoGO = 1;
  4438  0090  14A0               	bsf	__PIR^(0+128),1
  4439                           
  4440                           ;PIR_B1.c: 71: }
  4441                           ;PIR_B1.c: 72: } else {
  4442  0091  29A5               	goto	l5200
  4443  0092                     l906:	
  4444                           
  4445                           ;PIR_B1.c: 73: if (_PIR.GO == 1) {
  4446  0092  1D20               	btfss	__PIR^(0+128),2
  4447  0093  29A5               	goto	l5200
  4448                           
  4449                           ;PIR_B1.c: 74: _PIR.GO = 0;
  4450  0094  1120               	bcf	__PIR^(0+128),2
  4451                           
  4452                           ;PIR_B1.c: 75: _PIR.ADtoGO = 0;
  4453  0095  10A0               	bcf	__PIR^(0+128),1
  4454                           
  4455                           ;PIR_B1.c: 76: if (_PIR.Available == 1) {
  4456  0096  1BA0               	btfsc	__PIR^(0+128),7
  4457                           
  4458                           ;PIR_B1.c: 77: if (_PIR.OK == 1) {
  4459  0097  1DA0               	btfss	__PIR^(0+128),3
  4460  0098  29A5               	goto	l5200
  4461                           
  4462                           ;PIR_B1.c: 79: _PIR.Time++;
  4463  0099  3001               	movlw	1
  4464  009A  1283               	bcf	3,5	;RP0=0, select bank0
  4465  009B  1303               	bcf	3,6	;RP1=0, select bank0
  4466  009C  00DC               	movwf	??_PIR_Main
  4467  009D  085C               	movf	??_PIR_Main,w
  4468  009E  1683               	bsf	3,5	;RP0=1, select bank1
  4469  009F  1303               	bcf	3,6	;RP1=0, select bank1
  4470  00A0  07A5               	addwf	(__PIR^(0+128)+5),f
  4471                           
  4472                           ;PIR_B1.c: 80: if (_PIR.Time == 60) {
  4473  00A1  0825               	movf	(__PIR^(0+128)+5),w
  4474  00A2  3A3C               	xorlw	60
  4475  00A3  1D03               	skipz
  4476  00A4  28D9               	goto	l5166
  4477                           
  4478                           ;PIR_B1.c: 81: _PIR.Time = 0;
  4479  00A5  01A5               	clrf	(__PIR^(0+128)+5)
  4480                           
  4481                           ;PIR_B1.c: 82: if (_PIR.RangeCount >= 90) {
  4482  00A6  305A               	movlw	90
  4483  00A7  024B               	subwf	(__PIR^(0+128)+43),w
  4484  00A8  1C03               	skipc
  4485  00A9  28B5               	goto	l5148
  4486                           
  4487                           ;PIR_B1.c: 83: _PIR.RangeTime1 = 0;
  4488  00AA  01CA               	clrf	(__PIR^(0+128)+42)
  4489                           
  4490                           ;PIR_B1.c: 85: if (_PIR.RangeValue == 25) {
  4491  00AB  084C               	movf	(__PIR^(0+128)+44),w
  4492  00AC  3A19               	xorlw	25
  4493  00AD  1903               	btfsc	3,2
  4494  00AE  28CA               	goto	L14
  4495                           
  4496                           ;PIR_B1.c: 87: } else if (_PIR.RangeValue == (25+10)) {
  4497                           
  4498                           ;PIR_B1.c: 86: _PIR.RangeValue = (25+10);
  4499  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4500  00B0  3A23               	xorlw	35
  4501  00B1  1D03               	skipz
  4502  00B2  28D8               	goto	l5164
  4503                           
  4504                           ;PIR_B1.c: 88: _PIR.RangeValue = (25+20);
  4505  00B3  302D               	movlw	45
  4506  00B4  28D1               	goto	L10
  4507  00B5                     l5148:	
  4508                           ;PIR_B1.c: 89: }
  4509                           ;PIR_B1.c: 90: } else if (_PIR.RangeCount <= 10) {
  4510                           
  4511  00B5  300B               	movlw	11
  4512  00B6  024B               	subwf	(__PIR^(0+128)+43),w
  4513  00B7  1803               	skipnc
  4514  00B8  28D8               	goto	l5164
  4515                           
  4516                           ;PIR_B1.c: 91: _PIR.RangeTime1++;
  4517  00B9  3001               	movlw	1
  4518  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4519  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4520  00BC  00DC               	movwf	??_PIR_Main
  4521  00BD  085C               	movf	??_PIR_Main,w
  4522  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  4523  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  4524  00C0  07CA               	addwf	(__PIR^(0+128)+42),f
  4525                           
  4526                           ;PIR_B1.c: 92: if (_PIR.RangeTime1 == 2) {
  4527  00C1  084A               	movf	(__PIR^(0+128)+42),w
  4528  00C2  3A02               	xorlw	2
  4529  00C3  1D03               	skipz
  4530  00C4  28D8               	goto	l5164
  4531                           
  4532                           ;PIR_B1.c: 93: _PIR.RangeTime1 = 0;
  4533  00C5  01CA               	clrf	(__PIR^(0+128)+42)
  4534                           
  4535                           ;PIR_B1.c: 95: if (_PIR.RangeValue == (25+20)) {
  4536  00C6  084C               	movf	(__PIR^(0+128)+44),w
  4537  00C7  3A2D               	xorlw	45
  4538  00C8  1D03               	skipz
  4539  00C9  28CC               	goto	l5160
  4540  00CA                     L14:	
  4541                           
  4542                           ;PIR_B1.c: 96: _PIR.RangeValue = (25+10);
  4543  00CA  3023               	movlw	35
  4544  00CB  28D1               	goto	L10
  4545  00CC                     l5160:	
  4546                           ;PIR_B1.c: 97: } else if (_PIR.RangeValue == (25+10)) {
  4547                           
  4548  00CC  084C               	movf	(__PIR^(0+128)+44),w
  4549  00CD  3A23               	xorlw	35
  4550  00CE  1D03               	skipz
  4551  00CF  28D8               	goto	l5164
  4552                           
  4553                           ;PIR_B1.c: 98: _PIR.RangeValue = 25;
  4554  00D0  3019               	movlw	25
  4555  00D1                     L10:	
  4556  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4557  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4558  00D3  00DC               	movwf	??_PIR_Main
  4559  00D4  085C               	movf	??_PIR_Main,w
  4560  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  4561  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  4562  00D7  00CC               	movwf	(__PIR^(0+128)+44)
  4563  00D8                     l5164:	
  4564                           
  4565                           ;PIR_B1.c: 99: }
  4566                           ;PIR_B1.c: 100: }
  4567                           ;PIR_B1.c: 101: }
  4568                           ;PIR_B1.c: 102: _PIR.RangeCount = 0;
  4569  00D8  01CB               	clrf	(__PIR^(0+128)+43)
  4570  00D9                     l5166:	
  4571                           
  4572                           ;PIR_B1.c: 103: }
  4573                           ;PIR_B1.c: 106: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4574                           ;PIR_B1.c: 107: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4575  00D9  084C               	movf	(__PIR^(0+128)+44),w
  4576  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4577  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  4578  00DC  00DC               	movwf	??_PIR_Main
  4579  00DD  01DD               	clrf	??_PIR_Main+1
  4580  00DE  09DC               	comf	??_PIR_Main,f
  4581  00DF  09DD               	comf	??_PIR_Main+1,f
  4582  00E0  0ADC               	incf	??_PIR_Main,f
  4583  00E1  1903               	skipnz
  4584  00E2  0ADD               	incf	??_PIR_Main+1,f
  4585  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  4586  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  4587  00E5  0826               	movf	(__PIR^(0+128)+6),w
  4588  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4589  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4590  00E8  075C               	addwf	??_PIR_Main,w
  4591  00E9  00DE               	movwf	??_PIR_Main+2
  4592  00EA  085D               	movf	??_PIR_Main+1,w
  4593  00EB  1803               	skipnc
  4594  00EC  0A5D               	incf	??_PIR_Main+1,w
  4595  00ED  00DF               	movwf	??_PIR_Main+3
  4596  00EE  085F               	movf	??_PIR_Main+3,w
  4597  00EF  3A80               	xorlw	128
  4598  00F0  3C80               	sublw	128
  4599  00F1  1D03               	skipz
  4600  00F2  28F7               	goto	u6715
  4601  00F3  085E               	movf	??_PIR_Main+2,w
  4602  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4603  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4604  00F6  0221               	subwf	(__PIR^(0+128)+1),w
  4605  00F7                     u6715:	
  4606  00F7  1C03               	skipc
  4607  00F8  2919               	goto	l5176
  4608  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4609  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4610  00FB  0826               	movf	(__PIR^(0+128)+6),w
  4611  00FC  074C               	addwf	(__PIR^(0+128)+44),w
  4612  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  4613  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  4614  00FF  00DC               	movwf	??_PIR_Main
  4615  0100  01DD               	clrf	??_PIR_Main+1
  4616  0101  0DDD               	rlf	??_PIR_Main+1,f
  4617  0102  085D               	movf	??_PIR_Main+1,w
  4618  0103  3A80               	xorlw	128
  4619  0104  00DE               	movwf	??_PIR_Main+2
  4620  0105  3080               	movlw	128
  4621  0106  025E               	subwf	??_PIR_Main+2,w
  4622  0107  1D03               	skipz
  4623  0108  290F               	goto	u6725
  4624  0109  1683               	bsf	3,5	;RP0=1, select bank1
  4625  010A  1303               	bcf	3,6	;RP1=0, select bank1
  4626  010B  0821               	movf	(__PIR^(0+128)+1),w
  4627  010C  1283               	bcf	3,5	;RP0=0, select bank0
  4628  010D  1303               	bcf	3,6	;RP1=0, select bank0
  4629  010E  025C               	subwf	??_PIR_Main,w
  4630  010F                     u6725:	
  4631  010F  1C03               	skipc
  4632  0110  2919               	goto	l5176
  4633                           
  4634                           ;PIR_B1.c: 109: _PIR.Count = 0;
  4635  0111  1683               	bsf	3,5	;RP0=1, select bank1
  4636  0112  1303               	bcf	3,6	;RP1=0, select bank1
  4637  0113  01C1               	clrf	(__PIR^(0+128)+33)
  4638  0114  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4639                           
  4640                           ;PIR_B1.c: 115: setLED(1, 0);
  4641  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4642  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4643  0117  01D6               	clrf	setLED@command
  4644  0118  298E               	goto	L15
  4645  0119                     l5176:	
  4646                           ;PIR_B1.c: 117: } else {
  4647                           
  4648                           ;PIR_B1.c: 116: setLED(2, 0);
  4649                           
  4650                           
  4651                           ;PIR_B1.c: 119: _PIR.RangeCount++;
  4652  0119  3001               	movlw	1
  4653  011A  1283               	bcf	3,5	;RP0=0, select bank0
  4654  011B  1303               	bcf	3,6	;RP1=0, select bank0
  4655  011C  00DC               	movwf	??_PIR_Main
  4656  011D  085C               	movf	??_PIR_Main,w
  4657  011E  1683               	bsf	3,5	;RP0=1, select bank1
  4658  011F  1303               	bcf	3,6	;RP1=0, select bank1
  4659  0120  07CB               	addwf	(__PIR^(0+128)+43),f
  4660                           
  4661                           ;PIR_B1.c: 120: _PIR.Count++;
  4662  0121  3001               	movlw	1
  4663  0122  07C1               	addwf	(__PIR^(0+128)+33),f
  4664  0123  1803               	skipnc
  4665  0124  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4666  0125  3000               	movlw	0
  4667  0126  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4668                           
  4669                           ;PIR_B1.c: 122: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4670  0127  1B20               	btfsc	__PIR^(0+128),6
  4671  0128  292D               	goto	l5184
  4672  0129  3003               	movlw	3
  4673  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4674  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4675  012C  292F               	goto	L11
  4676  012D                     l5184:	
  4677  012D  3003               	movlw	3
  4678  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4679  012F                     L11:	
  4680  012F  00E2               	movwf	_PIR_Main$3108
  4681  0130  3000               	movlw	0
  4682  0131  00E3               	movwf	_PIR_Main$3108+1
  4683  0132  0862               	movf	_PIR_Main$3108,w
  4684  0133  00DC               	movwf	??_PIR_Main
  4685  0134  085C               	movf	??_PIR_Main,w
  4686  0135  1683               	bsf	3,5	;RP0=1, select bank1
  4687  0136  1303               	bcf	3,6	;RP1=0, select bank1
  4688  0137  00C3               	movwf	(__PIR^(0+128)+35)
  4689                           
  4690                           ;PIR_B1.c: 124: if (_PIR.Count == _PIR.TriggerValue) {
  4691  0138  0843               	movf	(__PIR^(0+128)+35),w
  4692  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4693  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4694  013B  00DC               	movwf	??_PIR_Main
  4695  013C  01DD               	clrf	??_PIR_Main+1
  4696  013D  1683               	bsf	3,5	;RP0=1, select bank1
  4697  013E  1303               	bcf	3,6	;RP1=0, select bank1
  4698  013F  0842               	movf	((__PIR+1)^(0+128)+33),w
  4699  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4700  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4701  0142  065D               	xorwf	??_PIR_Main+1,w
  4702  0143  1D03               	skipz
  4703  0144  294B               	goto	u6745
  4704  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4705  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4706  0147  0841               	movf	(__PIR^(0+128)+33),w
  4707  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4709  014A  065C               	xorwf	??_PIR_Main,w
  4710  014B                     u6745:	
  4711  014B  1D03               	skipz
  4712  014C  29A5               	goto	l5200
  4713                           
  4714                           ;PIR_B1.c: 125: _PIR.Count = 0;
  4715  014D  1683               	bsf	3,5	;RP0=1, select bank1
  4716  014E  1303               	bcf	3,6	;RP1=0, select bank1
  4717  014F  01C1               	clrf	(__PIR^(0+128)+33)
  4718  0150  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4719                           
  4720                           ;PIR_B1.c: 127: _PIR.CloseTimeSeconds = 0;
  4721  0151  01C6               	clrf	(__PIR^(0+128)+38)
  4722                           
  4723                           ;PIR_B1.c: 128: _PIR.CloseTimeMinutes = 0;
  4724  0152  01C4               	clrf	(__PIR^(0+128)+36)
  4725  0153  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4726                           
  4727                           ;PIR_B1.c: 129: _PIR.Status = 1;
  4728  0154  1720               	bsf	__PIR^(0+128),6
  4729                           
  4730                           ;PIR_B1.c: 133: if (getLights_Status(1) == 0) {
  4731  0155  3001               	movlw	1
  4732  0156  158A  23DE  118A   	fcall	_getLights_Status
  4733  0159  3800               	iorlw	0
  4734  015A  1D03               	skipz
  4735  015B  2964               	goto	l5194
  4736                           
  4737                           ;PIR_B1.c: 134: setLights_Trigger(1, 1);
  4738  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4739  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4740  015E  01D6               	clrf	setLights_Trigger@command
  4741  015F  0AD6               	incf	setLights_Trigger@command,f
  4742  0160  3001               	movlw	1
  4743  0161  158A  24D8  118A   	fcall	_setLights_Trigger
  4744  0164                     l5194:	
  4745                           
  4746                           ;PIR_B1.c: 135: }
  4747                           ;PIR_B1.c: 139: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4748  0164  1683               	bsf	3,5	;RP0=1, select bank1
  4749  0165  1303               	bcf	3,6	;RP1=0, select bank1
  4750  0166  084C               	movf	(__PIR^(0+128)+44),w
  4751  0167  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0168  1303               	bcf	3,6	;RP1=0, select bank0
  4753  0169  00DC               	movwf	??_PIR_Main
  4754  016A  01DD               	clrf	??_PIR_Main+1
  4755  016B  09DC               	comf	??_PIR_Main,f
  4756  016C  09DD               	comf	??_PIR_Main+1,f
  4757  016D  0ADC               	incf	??_PIR_Main,f
  4758  016E  1903               	skipnz
  4759  016F  0ADD               	incf	??_PIR_Main+1,f
  4760  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4761  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4762  0172  0826               	movf	(__PIR^(0+128)+6),w
  4763  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4764  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4765  0175  075C               	addwf	??_PIR_Main,w
  4766  0176  00DE               	movwf	??_PIR_Main+2
  4767  0177  085D               	movf	??_PIR_Main+1,w
  4768  0178  1803               	skipnc
  4769  0179  0A5D               	incf	??_PIR_Main+1,w
  4770  017A  00DF               	movwf	??_PIR_Main+3
  4771  017B  085F               	movf	??_PIR_Main+3,w
  4772  017C  3A80               	xorlw	128
  4773  017D  00E0               	movwf	??_PIR_Main+4
  4774  017E  3080               	movlw	128
  4775  017F  0260               	subwf	??_PIR_Main+4,w
  4776  0180  1D03               	skipz
  4777  0181  2988               	goto	u6765
  4778  0182  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0183  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0184  0821               	movf	(__PIR^(0+128)+1),w
  4781  0185  1283               	bcf	3,5	;RP0=0, select bank0
  4782  0186  1303               	bcf	3,6	;RP1=0, select bank0
  4783  0187  025E               	subwf	??_PIR_Main+2,w
  4784  0188                     u6765:	
  4785  0188  1C03               	skipc
  4786  0189  2996               	goto	l5198
  4787                           
  4788                           ;PIR_B1.c: 140: setLED(1, 1);
  4789  018A  1283               	bcf	3,5	;RP0=0, select bank0
  4790  018B  1303               	bcf	3,6	;RP1=0, select bank0
  4791  018C  01D6               	clrf	setLED@command
  4792  018D  0AD6               	incf	setLED@command,f
  4793  018E                     L15:	
  4794  018E  3001               	movlw	1
  4795  018F  158A  2735  118A   	fcall	_setLED
  4796                           
  4797                           ;PIR_B1.c: 141: setLED(2, 0);
  4798  0192  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0193  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0194  01D6               	clrf	setLED@command
  4801  0195  29A1               	goto	L12
  4802  0196                     l5198:	
  4803                           ;PIR_B1.c: 142: } else {
  4804                           
  4805                           
  4806                           ;PIR_B1.c: 143: setLED(1, 0);
  4807  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4808  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4809  0198  01D6               	clrf	setLED@command
  4810  0199  3001               	movlw	1
  4811  019A  158A  2735  118A   	fcall	_setLED
  4812                           
  4813                           ;PIR_B1.c: 144: setLED(2, 1);
  4814  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4815  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4816  019F  01D6               	clrf	setLED@command
  4817  01A0  0AD6               	incf	setLED@command,f
  4818  01A1                     L12:	
  4819  01A1  3002               	movlw	2
  4820  01A2  158A  2735  118A   	fcall	_setLED
  4821  01A5                     l5200:	
  4822                           
  4823                           ;PIR_B1.c: 145: }
  4824                           ;PIR_B1.c: 169: }
  4825                           ;PIR_B1.c: 170: }
  4826                           ;PIR_B1.c: 171: }
  4827                           ;PIR_B1.c: 172: }
  4828                           ;PIR_B1.c: 173: }
  4829                           ;PIR_B1.c: 174: }
  4830                           ;PIR_B1.c: 175: if (_PIR.OK == 0) {
  4831  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  4832  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  4833  01A7  19A0               	btfsc	__PIR^(0+128),3
  4834  01A8  29D4               	goto	l5216
  4835                           
  4836                           ;PIR_B1.c: 176: _PIR.Count++;
  4837  01A9  3001               	movlw	1
  4838  01AA  07C1               	addwf	(__PIR^(0+128)+33),f
  4839  01AB  1803               	skipnc
  4840  01AC  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4841  01AD  3000               	movlw	0
  4842  01AE  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4843                           
  4844                           ;PIR_B1.c: 177: if (_PIR.Count == (30000 / 20)) {
  4845  01AF  3005               	movlw	5
  4846  01B0  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4847  01B1  1D03               	skipz
  4848  01B2  29B5               	goto	u6785
  4849  01B3  30DC               	movlw	220
  4850  01B4  0641               	xorwf	(__PIR^(0+128)+33),w
  4851  01B5                     u6785:	
  4852  01B5  1D03               	skipz
  4853  01B6  29D4               	goto	l5216
  4854                           
  4855                           ;PIR_B1.c: 178: _PIR.Count = 0;
  4856  01B7  01C1               	clrf	(__PIR^(0+128)+33)
  4857  01B8  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4858                           
  4859                           ;PIR_B1.c: 179: _PIR.OK = 1;
  4860  01B9  15A0               	bsf	__PIR^(0+128),3
  4861                           
  4862                           ;PIR_B1.c: 180: setLED(1, 0);
  4863  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4864  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4865  01BC  01D6               	clrf	setLED@command
  4866  01BD  3001               	movlw	1
  4867  01BE  158A  2735  118A   	fcall	_setLED
  4868                           
  4869                           ;PIR_B1.c: 181: if (cds == 0) {
  4870  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4871  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4872  01C3  08E4               	movf	PIR_Main@cds,f
  4873  01C4  1D03               	skipz
  4874  01C5  29D4               	goto	l5216
  4875                           
  4876                           ;PIR_B1.c: 183: if (getLights_Status(1) == 1) {
  4877  01C6  3001               	movlw	1
  4878  01C7  158A  23DE  118A   	fcall	_getLights_Status
  4879  01CA  3A01               	xorlw	1
  4880  01CB  1D03               	skipz
  4881  01CC  29D4               	goto	l5216
  4882                           
  4883                           ;PIR_B1.c: 184: setLights_Trigger(1, 0);
  4884  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4885  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4886  01CF  01D6               	clrf	setLights_Trigger@command
  4887  01D0  3001               	movlw	1
  4888  01D1  158A  24D8  118A   	fcall	_setLights_Trigger
  4889  01D4                     l5216:	
  4890                           
  4891                           ;PIR_B1.c: 185: }
  4892                           ;PIR_B1.c: 187: }
  4893                           ;PIR_B1.c: 188: }
  4894                           ;PIR_B1.c: 189: }
  4895                           ;PIR_B1.c: 190: if (_PIR.Status == 1) {
  4896  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4897  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  4898  01D6  1F20               	btfss	__PIR^(0+128),6
  4899  01D7  0008               	return
  4900                           
  4901                           ;PIR_B1.c: 191: _PIR.CloseTimeSeconds++;
  4902  01D8  3001               	movlw	1
  4903  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4904  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4905  01DB  00DC               	movwf	??_PIR_Main
  4906  01DC  085C               	movf	??_PIR_Main,w
  4907  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4908  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4909  01DF  07C6               	addwf	(__PIR^(0+128)+38),f
  4910                           
  4911                           ;PIR_B1.c: 192: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4912  01E0  0846               	movf	(__PIR^(0+128)+38),w
  4913  01E1  3A32               	xorlw	50
  4914  01E2  1D03               	skipz
  4915  01E3  0008               	return
  4916                           
  4917                           ;PIR_B1.c: 193: _PIR.CloseTimeSeconds = 0;
  4918  01E4  01C6               	clrf	(__PIR^(0+128)+38)
  4919                           
  4920                           ;PIR_B1.c: 194: _PIR.CloseTimeMinutes++;
  4921  01E5  3001               	movlw	1
  4922  01E6  07C4               	addwf	(__PIR^(0+128)+36),f
  4923  01E7  1803               	skipnc
  4924  01E8  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4925  01E9  3000               	movlw	0
  4926  01EA  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4927                           
  4928                           ;PIR_B1.c: 195: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4929  01EB  0848               	movf	((__PIR+1)^(0+128)+39),w
  4930  01EC  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4931  01ED  1D03               	skipz
  4932  01EE  29F1               	goto	u6835
  4933  01EF  0847               	movf	(__PIR^(0+128)+39),w
  4934  01F0  0644               	xorwf	(__PIR^(0+128)+36),w
  4935  01F1                     u6835:	
  4936  01F1  1D03               	skipz
  4937  01F2  0008               	return
  4938                           
  4939                           ;PIR_B1.c: 196: _PIR.CloseTimeMinutes = 0;
  4940  01F3  01C4               	clrf	(__PIR^(0+128)+36)
  4941  01F4  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4942                           
  4943                           ;PIR_B1.c: 197: _PIR.Status = 0;
  4944  01F5  1320               	bcf	__PIR^(0+128),6
  4945                           
  4946                           ;PIR_B1.c: 201: if (getLights_Status(1) == 1) {
  4947  01F6  3001               	movlw	1
  4948  01F7  158A  23DE  118A   	fcall	_getLights_Status
  4949  01FA  3A01               	xorlw	1
  4950  01FB  1D03               	skipz
  4951  01FC  0008               	return
  4952                           
  4953                           ;PIR_B1.c: 202: setLights_Trigger(1, 0);
  4954  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4955  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4956  01FF  01D6               	clrf	setLights_Trigger@command
  4957  0200  3001               	movlw	1
  4958  0201  158A  24D8         	fcall	_setLights_Trigger
  4959                           
  4960                           ;PIR_B1.c: 203: }
  4961                           ;PIR_B1.c: 207: }
  4962                           ;PIR_B1.c: 208: }
  4963                           ;PIR_B1.c: 209: }
  4964                           ;PIR_B1.c: 210: } else {
  4965  0203  0008               	return
  4966  0204                     l896:	
  4967                           
  4968                           ;PIR_B1.c: 211: if (myMain.PowerON == 1) {
  4969  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0206  1C20               	btfss	_myMain,0
  4972  0207  0008               	return
  4973                           
  4974                           ;PIR_B1.c: 212: _PIR.Enable = 1;
  4975  0208  1683               	bsf	3,5	;RP0=1, select bank1
  4976  0209  1303               	bcf	3,6	;RP1=0, select bank1
  4977  020A  1420               	bsf	__PIR^(0+128),0
  4978                           
  4979                           ;PIR_B1.c: 213: setLED(1, 1);
  4980  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4981  020C  1303               	bcf	3,6	;RP1=0, select bank0
  4982  020D  01D6               	clrf	setLED@command
  4983  020E  0AD6               	incf	setLED@command,f
  4984  020F  3001               	movlw	1
  4985  0210  158A  2735  118A   	fcall	_setLED
  4986                           
  4987                           ;PIR_B1.c: 216: if (getLights_Status(1) == 0) {
  4988  0213  3001               	movlw	1
  4989  0214  158A  23DE  118A   	fcall	_getLights_Status
  4990  0217  3800               	iorlw	0
  4991  0218  1D03               	skipz
  4992  0219  0008               	return
  4993                           
  4994                           ;PIR_B1.c: 217: setLights_Trigger(1, 1);
  4995  021A  1283               	bcf	3,5	;RP0=0, select bank0
  4996  021B  1303               	bcf	3,6	;RP1=0, select bank0
  4997  021C  01D6               	clrf	setLights_Trigger@command
  4998  021D  0AD6               	incf	setLights_Trigger@command,f
  4999  021E  3001               	movlw	1
  5000  021F  158A  24D8         	fcall	_setLights_Trigger
  5001  0221  0008               	return
  5002  0222                     __end_of_PIR_Main:	
  5003                           
  5004                           	psect	text21
  5005  0B4E                     __ptext21:	
  5006 ;; *************** function _getCDS_Status *****************
  5007 ;; Defined at:
  5008 ;;		line 42 in file "../src/CDS_B1.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  status          1    4[COMMON] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      unsigned char 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5022 ;;      Params:         0       0       0       0
  5023 ;;      Locals:         1       0       0       0
  5024 ;;      Temps:          0       0       0       0
  5025 ;;      Totals:         1       0       0       0
  5026 ;;Total ram usage:        1 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    2
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_PIR_Main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _getCDS_Status
  5038  0B4E                     _getCDS_Status:	
  5039                           
  5040                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5041                           
  5042                           ;incstack = 0
  5043                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5044  0B4E  3000               	movlw	0
  5045  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  5046  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  5047  0B51  1A2B               	btfsc	__CDS,4
  5048  0B52  3001               	movlw	1
  5049  0B53  00F4               	movwf	getCDS_Status@status
  5050                           
  5051                           ;CDS_B1.c: 44: return status;
  5052  0B54  0874               	movf	getCDS_Status@status,w
  5053  0B55  0008               	return
  5054  0B56                     __end_of_getCDS_Status:	
  5055                           
  5056                           	psect	text22
  5057  0B7B                     __ptext22:	
  5058 ;; *************** function _PIR_Initialization *****************
  5059 ;; Defined at:
  5060 ;;		line 7 in file "../src/PIR_B1.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;		None               void
  5067 ;; Registers used:
  5068 ;;		wreg
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5074 ;;      Params:         0       0       0       0
  5075 ;;      Locals:         0       0       0       0
  5076 ;;      Temps:          1       0       0       0
  5077 ;;      Totals:         1       0       0       0
  5078 ;;Total ram usage:        1 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    2
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_main
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _PIR_Initialization
  5090  0B7B                     _PIR_Initialization:	
  5091                           
  5092                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5093                           
  5094                           ;incstack = 0
  5095                           ; Regs used in _PIR_Initialization: [wreg]
  5096  0B7B  3019               	movlw	25
  5097  0B7C  00F4               	movwf	??_PIR_Initialization
  5098  0B7D  0874               	movf	??_PIR_Initialization,w
  5099  0B7E  1683               	bsf	3,5	;RP0=1, select bank1
  5100  0B7F  1303               	bcf	3,6	;RP1=0, select bank1
  5101  0B80  00CC               	movwf	(__PIR^(0+128)+44)
  5102                           
  5103                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5104  0B81  3005               	movlw	5
  5105  0B82  00C7               	movwf	(__PIR^(0+128)+39)
  5106  0B83  3000               	movlw	0
  5107  0B84  00C8               	movwf	(__PIR^(0+128)+40)
  5108  0B85  0008               	return
  5109  0B86                     __end_of_PIR_Initialization:	
  5110                           
  5111                           	psect	text23
  5112  0BBE                     __ptext23:	
  5113 ;; *************** function _Mcu_Initialization *****************
  5114 ;; Defined at:
  5115 ;;		line 30 in file "../src/MCU_B1.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0, pclath, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5129 ;;      Params:         0       0       0       0
  5130 ;;      Locals:         0       0       0       0
  5131 ;;      Temps:          0       0       0       0
  5132 ;;      Totals:         0       0       0       0
  5133 ;;Total ram usage:        0 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    3
  5136 ;; This function calls:
  5137 ;;		_ADC_Set
  5138 ;;		_Fosc_Set
  5139 ;;		_IO_Set
  5140 ;;		_TMR1_Set
  5141 ;;		_WDT_Set
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _Mcu_Initialization
  5149  0BBE                     _Mcu_Initialization:	
  5150                           
  5151                           ;MCU_B1.c: 32: Fosc_Set();
  5152                           
  5153                           ;incstack = 0
  5154                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5155  0BBE  158A  231F  158A   	fcall	_Fosc_Set
  5156                           
  5157                           ;MCU_B1.c: 34: IO_Set();
  5158  0BC1  158A  24A4  158A   	fcall	_IO_Set
  5159                           
  5160                           ;MCU_B1.c: 36: ;;
  5161                           ;MCU_B1.c: 38: TMR1_Set();
  5162  0BC4  158A  23A2  158A   	fcall	_TMR1_Set
  5163                           
  5164                           ;MCU_B1.c: 40: ADC_Set();
  5165  0BC7  158A  2337  158A   	fcall	_ADC_Set
  5166                           
  5167                           ;MCU_B1.c: 42: ;;
  5168                           ;MCU_B1.c: 44: ;;
  5169                           ;MCU_B1.c: 46: ;;
  5170                           ;MCU_B1.c: 48: ;;
  5171                           ;MCU_B1.c: 50: ;;
  5172                           ;MCU_B1.c: 52: WDT_Set();
  5173  0BCA  158A  23B0         	fcall	_WDT_Set
  5174  0BCC  0008               	return
  5175  0BCD                     __end_of_Mcu_Initialization:	
  5176                           
  5177                           	psect	text24
  5178  0BB0                     __ptext24:	
  5179 ;; *************** function _WDT_Set *****************
  5180 ;; Defined at:
  5181 ;;		line 1077 in file "../src/MCU_B1.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;		None
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;		None               void
  5188 ;; Registers used:
  5189 ;;		wreg
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5195 ;;      Params:         0       0       0       0
  5196 ;;      Locals:         0       0       0       0
  5197 ;;      Temps:          1       0       0       0
  5198 ;;      Totals:         1       0       0       0
  5199 ;;Total ram usage:        1 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    2
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		_Mcu_Initialization
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           
  5210                           ;psect for function _WDT_Set
  5211  0BB0                     _WDT_Set:	
  5212                           
  5213                           ;MCU_B1.c: 1079: PSA = 1;
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _WDT_Set: [wreg]
  5217  0BB0  1683               	bsf	3,5	;RP0=1, select bank1
  5218  0BB1  1303               	bcf	3,6	;RP1=0, select bank1
  5219  0BB2  1581               	bsf	1,3	;volatile
  5220                           
  5221                           ;MCU_B1.c: 1080: PS0 = 1;
  5222  0BB3  1401               	bsf	1,0	;volatile
  5223                           
  5224                           ;MCU_B1.c: 1081: PS1 = 1;
  5225  0BB4  1481               	bsf	1,1	;volatile
  5226                           
  5227                           ;MCU_B1.c: 1082: PS2 = 1;
  5228  0BB5  1501               	bsf	1,2	;volatile
  5229                           
  5230                           ;MCU_B1.c: 1086: WDT.Enable = 1;
  5231  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  5232  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  5233  0BB8  1437               	bsf	_WDT,0
  5234                           
  5235                           ;MCU_B1.c: 1087: WDT.Timer = 10;
  5236  0BB9  300A               	movlw	10
  5237  0BBA  00F4               	movwf	??_WDT_Set
  5238  0BBB  0874               	movf	??_WDT_Set,w
  5239  0BBC  00B8               	movwf	_WDT+1
  5240  0BBD  0008               	return
  5241  0BBE                     __end_of_WDT_Set:	
  5242                           
  5243                           	psect	text25
  5244  0BA2                     __ptext25:	
  5245 ;; *************** function _TMR1_Set *****************
  5246 ;; Defined at:
  5247 ;;		line 226 in file "../src/MCU_B1.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;		None               void
  5254 ;; Registers used:
  5255 ;;		wreg
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5261 ;;      Params:         0       0       0       0
  5262 ;;      Locals:         0       0       0       0
  5263 ;;      Temps:          0       0       0       0
  5264 ;;      Totals:         0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    2
  5268 ;; This function calls:
  5269 ;;		Nothing
  5270 ;; This function is called by:
  5271 ;;		_Mcu_Initialization
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _TMR1_Set
  5277  0BA2                     _TMR1_Set:	
  5278                           
  5279                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _TMR1_Set: [wreg]
  5283  0BA2  3041               	movlw	65
  5284  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0BA5  0090               	movwf	16	;volatile
  5287                           
  5288                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5289  0BA6  30FA               	movlw	250
  5290  0BA7  008F               	movwf	15	;volatile
  5291                           
  5292                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5293  0BA8  3038               	movlw	56
  5294  0BA9  008E               	movwf	14	;volatile
  5295                           
  5296                           ;MCU_B1.c: 230: TMR1IE = 1;
  5297  0BAA  1683               	bsf	3,5	;RP0=1, select bank1
  5298  0BAB  1303               	bcf	3,6	;RP1=0, select bank1
  5299  0BAC  140C               	bsf	12,0	;volatile
  5300                           
  5301                           ;MCU_B1.c: 231: PEIE = 1;
  5302  0BAD  170B               	bsf	11,6	;volatile
  5303                           
  5304                           ;MCU_B1.c: 232: GIE = 1;
  5305  0BAE  178B               	bsf	11,7	;volatile
  5306  0BAF  0008               	return
  5307  0BB0                     __end_of_TMR1_Set:	
  5308                           
  5309                           	psect	text26
  5310  0CA4                     __ptext26:	
  5311 ;; *************** function _IO_Set *****************
  5312 ;; Defined at:
  5313 ;;		line 60 in file "../src/MCU_B1.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, status,2
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5327 ;;      Params:         0       0       0       0
  5328 ;;      Locals:         0       0       0       0
  5329 ;;      Temps:          0       0       0       0
  5330 ;;      Totals:         0       0       0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    2
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_Mcu_Initialization
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _IO_Set
  5343  0CA4                     _IO_Set:	
  5344                           
  5345                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _IO_Set: [wreg+status,2]
  5349  0CA4  302F               	movlw	47
  5350  0CA5  1683               	bsf	3,5	;RP0=1, select bank1
  5351  0CA6  1303               	bcf	3,6	;RP1=0, select bank1
  5352  0CA7  0085               	movwf	5	;volatile
  5353                           
  5354                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5355  0CA8  3013               	movlw	19
  5356  0CA9  0086               	movwf	6	;volatile
  5357                           
  5358                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5359  0CAA  300C               	movlw	12
  5360  0CAB  0087               	movwf	7	;volatile
  5361                           
  5362                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5363  0CAC  300F               	movlw	15
  5364  0CAD  1683               	bsf	3,5	;RP0=1, select bank3
  5365  0CAE  1703               	bsf	3,6	;RP1=1, select bank3
  5366  0CAF  0085               	movwf	5	;volatile
  5367                           
  5368                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5369  0CB0  3012               	movlw	18
  5370  0CB1  0086               	movwf	6	;volatile
  5371                           
  5372                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5373  0CB2  30AF               	movlw	175
  5374  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  5375  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  5376  0CB5  0085               	movwf	5	;volatile
  5377                           
  5378                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5379  0CB6  3013               	movlw	19
  5380  0CB7  0086               	movwf	6	;volatile
  5381                           
  5382                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5383  0CB8  300C               	movlw	12
  5384  0CB9  0087               	movwf	7	;volatile
  5385                           
  5386                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5387  0CBA  1683               	bsf	3,5	;RP0=1, select bank1
  5388  0CBB  1303               	bcf	3,6	;RP1=0, select bank1
  5389  0CBC  0195               	clrf	21	;volatile
  5390  0CBD  0008               	return
  5391  0CBE                     __end_of_IO_Set:	
  5392                           
  5393                           	psect	text27
  5394  0B1F                     __ptext27:	
  5395 ;; *************** function _Fosc_Set *****************
  5396 ;; Defined at:
  5397 ;;		line 56 in file "../src/MCU_B1.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5411 ;;      Params:         0       0       0       0
  5412 ;;      Locals:         0       0       0       0
  5413 ;;      Temps:          0       0       0       0
  5414 ;;      Totals:         0       0       0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    2
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_Mcu_Initialization
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Fosc_Set
  5427  0B1F                     _Fosc_Set:	
  5428                           
  5429                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _Fosc_Set: [wreg]
  5433  0B1F  303C               	movlw	60
  5434  0B20  1683               	bsf	3,5	;RP0=1, select bank1
  5435  0B21  1303               	bcf	3,6	;RP1=0, select bank1
  5436  0B22  0090               	movwf	16	;volatile
  5437  0B23  0008               	return
  5438  0B24                     __end_of_Fosc_Set:	
  5439                           
  5440                           	psect	text28
  5441  0B37                     __ptext28:	
  5442 ;; *************** function _ADC_Set *****************
  5443 ;; Defined at:
  5444 ;;		line 413 in file "../src/MCU_B1.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;		None               void
  5451 ;; Registers used:
  5452 ;;		wreg
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5458 ;;      Params:         0       0       0       0
  5459 ;;      Locals:         0       0       0       0
  5460 ;;      Temps:          0       0       0       0
  5461 ;;      Totals:         0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    2
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_Mcu_Initialization
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _ADC_Set
  5474  0B37                     _ADC_Set:	
  5475                           
  5476                           ;MCU_B1.c: 414: ADCON1 = 0x73;
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _ADC_Set: [wreg]
  5480  0B37  3073               	movlw	115
  5481  0B38  1683               	bsf	3,5	;RP0=1, select bank1
  5482  0B39  1303               	bcf	3,6	;RP1=0, select bank1
  5483  0B3A  009F               	movwf	31	;volatile
  5484                           
  5485                           ;MCU_B1.c: 415: FVRCON = 0xc1;
  5486  0B3B  30C1               	movlw	193
  5487  0B3C  009D               	movwf	29	;volatile
  5488  0B3D  0008               	return
  5489  0B3E                     __end_of_ADC_Set:	
  5490                           
  5491                           	psect	text29
  5492  0222                     __ptext29:	
  5493 ;; *************** function _Load_Main *****************
  5494 ;; Defined at:
  5495 ;;		line 39 in file "../src/OverLoad_B1.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  i               2   11[BANK0 ] int 
  5500 ;;  Load_Status     1   10[BANK0 ] unsigned char 
  5501 ;;  error           1    9[BANK0 ] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5511 ;;      Params:         0       0       0       0
  5512 ;;      Locals:         0       4       0       0
  5513 ;;      Temps:          0       2       0       0
  5514 ;;      Totals:         0       6       0       0
  5515 ;;Total ram usage:        6 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    3
  5518 ;; This function calls:
  5519 ;;		___lwdiv
  5520 ;;		___wmul
  5521 ;;		_getLight_LoadGO
  5522 ;;		_getLight_Load_Status
  5523 ;;		_getMain_All_Error_Status
  5524 ;;		_getMain_All_LightsStatus
  5525 ;;		_getMain_Lights_Count
  5526 ;;		_setLoad_AH_AL_Restore
  5527 ;; This function is called by:
  5528 ;;		_main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _Load_Main
  5534  0222                     _Load_Main:	
  5535                           
  5536                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5540  0222  3000               	movlw	0
  5541  0223  158A  260A  118A   	fcall	_getMain_All_Error_Status
  5542  0226  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0227  1303               	bcf	3,6	;RP1=0, select bank0
  5544  0228  00DD               	movwf	??_Load_Main
  5545  0229  085D               	movf	??_Load_Main,w
  5546  022A  00DF               	movwf	Load_Main@error
  5547                           
  5548                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  5549  022B  01E0               	clrf	Load_Main@Load_Status
  5550                           
  5551                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5552  022C  1683               	bsf	3,5	;RP0=1, select bank1
  5553  022D  1303               	bcf	3,6	;RP1=0, select bank1
  5554  022E  1C4E               	btfss	_Load^(0+128),0
  5555  022F  2C01               	goto	l706
  5556                           
  5557                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5558  0230  158A  235E  118A   	fcall	_getMain_All_LightsStatus
  5559  0233  3800               	iorlw	0
  5560  0234  1D03               	skipz
  5561  0235  2A39               	goto	l4948
  5562                           
  5563                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5564  0236  1683               	bsf	3,5	;RP0=1, select bank1
  5565  0237  1303               	bcf	3,6	;RP1=0, select bank1
  5566  0238  2A58               	goto	l4964
  5567  0239                     l4948:	
  5568                           ;OverLoad_B1.c: 47: } else {
  5569                           
  5570                           
  5571                           ;OverLoad_B1.c: 70: if (error == 0) {
  5572  0239  1283               	bcf	3,5	;RP0=0, select bank0
  5573  023A  1303               	bcf	3,6	;RP1=0, select bank0
  5574  023B  08DF               	movf	Load_Main@error,f
  5575  023C  1D03               	skipz
  5576  023D  2A55               	goto	l709
  5577                           
  5578                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5579  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5580  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5581  0240  14CE               	bsf	_Load^(0+128),1
  5582                           
  5583                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5584  0241  158A  2324  118A   	fcall	_getLight_LoadGO
  5585  0244  3A01               	xorlw	1
  5586  0245  1D03               	skipz
  5587  0246  2A4F               	goto	l710
  5588                           
  5589                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5590  0247  1683               	bsf	3,5	;RP0=1, select bank1
  5591  0248  1303               	bcf	3,6	;RP1=0, select bank1
  5592  0249  1DCE               	btfss	_Load^(0+128),3
  5593  024A  1BCE               	btfsc	_Load^(0+128),7
  5594  024B  2A59               	goto	l708
  5595                           
  5596                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5597  024C  15CE               	bsf	_Load^(0+128),3
  5598                           
  5599                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5600  024D  01EA               	clrf	(_Load^(0+128)+28)
  5601                           
  5602                           ;OverLoad_B1.c: 77: }
  5603                           ;OverLoad_B1.c: 78: } else {
  5604  024E  2A59               	goto	l708
  5605  024F                     l710:	
  5606                           
  5607                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5608  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5609  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5610  0251  1FCE               	btfss	_Load^(0+128),7
  5611  0252  2A59               	goto	l708
  5612                           
  5613                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5614  0253  13CE               	bcf	_Load^(0+128),7
  5615                           
  5616                           ;OverLoad_B1.c: 81: }
  5617                           ;OverLoad_B1.c: 82: }
  5618                           ;OverLoad_B1.c: 83: } else {
  5619  0254  2A59               	goto	l708
  5620  0255                     l709:	
  5621                           
  5622                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5623  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5624  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5625  0257  18CE               	btfsc	_Load^(0+128),1
  5626  0258                     l4964:	
  5627                           
  5628                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5629  0258  10CE               	bcf	_Load^(0+128),1
  5630  0259                     l708:	
  5631                           
  5632                           ;OverLoad_B1.c: 86: }
  5633                           ;OverLoad_B1.c: 87: }
  5634                           ;OverLoad_B1.c: 89: }
  5635                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5636  0259  1CCE               	btfss	_Load^(0+128),1
  5637  025A  2BDA               	goto	l716
  5638                           
  5639                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5640  025B  154E               	bsf	_Load^(0+128),2
  5641                           
  5642                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5643  025C  1E4E               	btfss	_Load^(0+128),4
  5644  025D  2BD8               	goto	l717
  5645                           
  5646                           ;OverLoad_B1.c: 96: Load.Time++;
  5647  025E  3001               	movlw	1
  5648  025F  07CF               	addwf	(_Load^(0+128)+1),f
  5649  0260  1803               	skipnc
  5650  0261  0AD0               	incf	((_Load+1)^(0+128)+1),f
  5651  0262  3000               	movlw	0
  5652  0263  07D0               	addwf	((_Load+1)^(0+128)+1),f
  5653                           
  5654                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5655  0264  3000               	movlw	0
  5656  0265  0250               	subwf	((_Load+1)^(0+128)+1),w
  5657  0266  3002               	movlw	2
  5658  0267  1903               	skipnz
  5659  0268  024F               	subwf	(_Load^(0+128)+1),w
  5660  0269  1C03               	skipc
  5661  026A  0008               	return
  5662                           
  5663                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5664  026B  01CF               	clrf	(_Load^(0+128)+1)
  5665  026C  01D0               	clrf	((_Load+1)^(0+128)+1)
  5666                           
  5667                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5668  026D  124E               	bcf	_Load^(0+128),4
  5669                           
  5670                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5671  026E  3001               	movlw	1
  5672  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5673  0270  1303               	bcf	3,6	;RP1=0, select bank0
  5674  0271  00E1               	movwf	Load_Main@i
  5675  0272  3000               	movlw	0
  5676  0273  00E2               	movwf	Load_Main@i+1
  5677  0274  0862               	movf	Load_Main@i+1,w
  5678  0275  3A80               	xorlw	128
  5679  0276  00FF               	movwf	127
  5680  0277  3080               	movlw	128
  5681  0278  027F               	subwf	127,w
  5682  0279  1D03               	skipz
  5683  027A  2A7D               	goto	u6285
  5684  027B  3004               	movlw	4
  5685  027C  0261               	subwf	Load_Main@i,w
  5686  027D                     u6285:	
  5687  027D  1803               	btfsc	3,0
  5688  027E  2ABB               	goto	l4986
  5689  027F                     l4980:	
  5690                           
  5691                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5692  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5693  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5694  0281  0861               	movf	Load_Main@i,w
  5695  0282  3ED8               	addlw	(_Load+10)& (0+255)
  5696  0283  0084               	movwf	4
  5697  0284  1383               	bcf	3,7	;select IRP bank1
  5698  0285  0800               	movf	0,w
  5699  0286  00DD               	movwf	??_Load_Main
  5700  0287  01DE               	clrf	??_Load_Main+1
  5701  0288  085D               	movf	??_Load_Main,w
  5702  0289  1683               	bsf	3,5	;RP0=1, select bank1
  5703  028A  1303               	bcf	3,6	;RP1=0, select bank1
  5704  028B  07D3               	addwf	(_Load^(0+128)+5),f
  5705  028C  1803               	skipnc
  5706  028D  0AD4               	incf	((_Load+1)^(0+128)+5),f
  5707  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5708  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5709  0290  085E               	movf	??_Load_Main+1,w
  5710  0291  1683               	bsf	3,5	;RP0=1, select bank1
  5711  0292  1303               	bcf	3,6	;RP1=0, select bank1
  5712  0293  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5713                           
  5714                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5715  0294  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0295  1303               	bcf	3,6	;RP1=0, select bank0
  5717  0296  0861               	movf	Load_Main@i,w
  5718  0297  3EDD               	addlw	(_Load+15)& (0+255)
  5719  0298  0084               	movwf	4
  5720  0299  0800               	movf	0,w
  5721  029A  00DD               	movwf	??_Load_Main
  5722  029B  01DE               	clrf	??_Load_Main+1
  5723  029C  085D               	movf	??_Load_Main,w
  5724  029D  1683               	bsf	3,5	;RP0=1, select bank1
  5725  029E  1303               	bcf	3,6	;RP1=0, select bank1
  5726  029F  07D5               	addwf	(_Load^(0+128)+7),f
  5727  02A0  1803               	skipnc
  5728  02A1  0AD6               	incf	((_Load+1)^(0+128)+7),f
  5729  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5730  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5731  02A4  085E               	movf	??_Load_Main+1,w
  5732  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5733  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5734  02A7  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5735  02A8  3001               	movlw	1
  5736  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5737  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5738  02AB  07E1               	addwf	Load_Main@i,f
  5739  02AC  1803               	skipnc
  5740  02AD  0AE2               	incf	Load_Main@i+1,f
  5741  02AE  3000               	movlw	0
  5742  02AF  07E2               	addwf	Load_Main@i+1,f
  5743  02B0  0862               	movf	Load_Main@i+1,w
  5744  02B1  3A80               	xorlw	128
  5745  02B2  00FF               	movwf	127
  5746  02B3  3080               	movlw	128
  5747  02B4  027F               	subwf	127,w
  5748  02B5  1D03               	skipz
  5749  02B6  2AB9               	goto	u6295
  5750  02B7  3004               	movlw	4
  5751  02B8  0261               	subwf	Load_Main@i,w
  5752  02B9                     u6295:	
  5753  02B9  1C03               	skipc
  5754  02BA  2A7F               	goto	l4980
  5755  02BB                     l4986:	
  5756                           
  5757                           ;OverLoad_B1.c: 104: }
  5758                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5759  02BB  3003               	movlw	3
  5760  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5761  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5762  02BE  00D6               	movwf	___lwdiv@divisor
  5763  02BF  3000               	movlw	0
  5764  02C0  00D7               	movwf	___lwdiv@divisor+1
  5765  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  5766  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  5767  02C3  0854               	movf	((_Load+1)^(0+128)+5),w
  5768  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5769  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5770  02C6  01D9               	clrf	___lwdiv@dividend+1
  5771  02C7  07D9               	addwf	___lwdiv@dividend+1,f
  5772  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5773  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5774  02CA  0853               	movf	(_Load^(0+128)+5),w
  5775  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5776  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5777  02CD  01D8               	clrf	___lwdiv@dividend
  5778  02CE  07D8               	addwf	___lwdiv@dividend,f
  5779  02CF  158A  2648  118A   	fcall	___lwdiv
  5780  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  5781  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  5782  02D4  0857               	movf	?___lwdiv+1,w
  5783  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5784  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5785  02D7  01D4               	clrf	((_Load+1)^(0+128)+5)
  5786  02D8  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5787  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  5788  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  5789  02DB  0856               	movf	?___lwdiv,w
  5790  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5791  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5792  02DE  01D3               	clrf	(_Load^(0+128)+5)
  5793  02DF  07D3               	addwf	(_Load^(0+128)+5),f
  5794                           
  5795                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5796  02E0  3003               	movlw	3
  5797  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5798  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5799  02E3  00D6               	movwf	___lwdiv@divisor
  5800  02E4  3000               	movlw	0
  5801  02E5  00D7               	movwf	___lwdiv@divisor+1
  5802  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5803  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5804  02E8  0856               	movf	((_Load+1)^(0+128)+7),w
  5805  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5806  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5807  02EB  01D9               	clrf	___lwdiv@dividend+1
  5808  02EC  07D9               	addwf	___lwdiv@dividend+1,f
  5809  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  5810  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  5811  02EF  0855               	movf	(_Load^(0+128)+7),w
  5812  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5813  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5814  02F2  01D8               	clrf	___lwdiv@dividend
  5815  02F3  07D8               	addwf	___lwdiv@dividend,f
  5816  02F4  158A  2648  118A   	fcall	___lwdiv
  5817  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  5818  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  5819  02F9  0857               	movf	?___lwdiv+1,w
  5820  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5821  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5822  02FC  01D6               	clrf	((_Load+1)^(0+128)+7)
  5823  02FD  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5824  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5825  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5826  0300  0856               	movf	?___lwdiv,w
  5827  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5828  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5829  0303  01D5               	clrf	(_Load^(0+128)+7)
  5830  0304  07D5               	addwf	(_Load^(0+128)+7),f
  5831                           
  5832                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  5833  0305  158A  245F  118A   	fcall	_setLoad_AH_AL_Restore
  5834                           
  5835                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  5836  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5837  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5838  030A  0856               	movf	((_Load+1)^(0+128)+7),w
  5839  030B  0254               	subwf	((_Load+1)^(0+128)+5),w
  5840  030C  1D03               	skipz
  5841  030D  2B10               	goto	u6305
  5842  030E  0855               	movf	(_Load^(0+128)+7),w
  5843  030F  0253               	subwf	(_Load^(0+128)+5),w
  5844  0310                     u6305:	
  5845  0310  1C03               	skipc
  5846  0311  0008               	return
  5847                           
  5848                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  5849  0312  0355               	decf	(_Load^(0+128)+7),w
  5850  0313  3AFF               	xorlw	255
  5851  0314  0753               	addwf	(_Load^(0+128)+5),w
  5852  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5853  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5854  0317  00DD               	movwf	??_Load_Main
  5855  0318  085D               	movf	??_Load_Main,w
  5856  0319  1683               	bsf	3,5	;RP0=1, select bank1
  5857  031A  1303               	bcf	3,6	;RP1=0, select bank1
  5858  031B  00E2               	movwf	(_Load^(0+128)+20)
  5859                           
  5860                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  5861  031C  01D3               	clrf	(_Load^(0+128)+5)
  5862  031D  01D4               	clrf	((_Load+1)^(0+128)+5)
  5863                           
  5864                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  5865  031E  01D5               	clrf	(_Load^(0+128)+7)
  5866  031F  01D6               	clrf	((_Load+1)^(0+128)+7)
  5867                           
  5868                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  5869  0320  1DCE               	btfss	_Load^(0+128),3
  5870  0321  2B8E               	goto	l722
  5871                           
  5872                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  5873  0322  3002               	movlw	2
  5874  0323  026A               	subwf	(_Load^(0+128)+28),w
  5875  0324  1803               	skipnc
  5876  0325  2B8E               	goto	l722
  5877                           
  5878                           ;OverLoad_B1.c: 116: Load.Count++;
  5879  0326  3001               	movlw	1
  5880  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5881  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5882  0329  00DD               	movwf	??_Load_Main
  5883  032A  085D               	movf	??_Load_Main,w
  5884  032B  1683               	bsf	3,5	;RP0=1, select bank1
  5885  032C  1303               	bcf	3,6	;RP1=0, select bank1
  5886  032D  07EA               	addwf	(_Load^(0+128)+28),f
  5887                           
  5888                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  5889  032E  158A  232A  118A   	fcall	_getLight_Load_Status
  5890  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5891  0332  1303               	bcf	3,6	;RP1=0, select bank0
  5892  0333  00DD               	movwf	??_Load_Main
  5893  0334  085D               	movf	??_Load_Main,w
  5894  0335  00E0               	movwf	Load_Main@Load_Status
  5895                           
  5896                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
  5897  0336  158A  2371  118A   	fcall	_getMain_Lights_Count
  5898  0339  1283               	bcf	3,5	;RP0=0, select bank0
  5899  033A  1303               	bcf	3,6	;RP1=0, select bank0
  5900  033B  00DD               	movwf	??_Load_Main
  5901  033C  085D               	movf	??_Load_Main,w
  5902  033D  1683               	bsf	3,5	;RP0=1, select bank1
  5903  033E  1303               	bcf	3,6	;RP1=0, select bank1
  5904  033F  00ED               	movwf	(_Load^(0+128)+31)
  5905                           
  5906                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5907  0340  086A               	movf	(_Load^(0+128)+28),w
  5908  0341  3A01               	xorlw	1
  5909  0342  1D03               	skipz
  5910  0343  2B4E               	goto	l5012
  5911                           
  5912                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
  5913  0344  3002               	movlw	2
  5914  0345  1283               	bcf	3,5	;RP0=0, select bank0
  5915  0346  1303               	bcf	3,6	;RP1=0, select bank0
  5916  0347  00DD               	movwf	??_Load_Main
  5917  0348  085D               	movf	??_Load_Main,w
  5918  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5919  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5920  034B  00EC               	movwf	(_Load^(0+128)+30)
  5921                           
  5922                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5923  034C  3022               	movlw	34
  5924  034D  2B57               	goto	L16
  5925  034E                     l5012:	
  5926                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5927                           
  5928  034E  086A               	movf	(_Load^(0+128)+28),w
  5929  034F  3A02               	xorlw	2
  5930  0350  1D03               	skipz
  5931  0351  2B8E               	goto	l722
  5932                           
  5933                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
  5934  0352  086D               	movf	(_Load^(0+128)+31),w
  5935  0353  3A01               	xorlw	1
  5936  0354  1D03               	skipz
  5937  0355  2B5A               	goto	l5018
  5938                           
  5939                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(7*1.7);
  5940  0356  300B               	movlw	11
  5941  0357                     L16:	
  5942  0357  00E6               	movwf	(_Load^(0+128)+24)
  5943  0358  3000               	movlw	0
  5944  0359  2B8D               	goto	L17
  5945  035A                     l5018:	
  5946                           ;OverLoad_B1.c: 130: } else {
  5947                           
  5948                           
  5949                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
  5950  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5951  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5952  035C  08E0               	movf	Load_Main@Load_Status,f
  5953  035D  1D03               	skipz
  5954  035E  2B80               	goto	l5022
  5955                           
  5956                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(7*1.7) * Load.LightsCount;
  5957  035F  1683               	bsf	3,5	;RP0=1, select bank1
  5958  0360  1303               	bcf	3,6	;RP1=0, select bank1
  5959  0361  086D               	movf	(_Load^(0+128)+31),w
  5960  0362  1283               	bcf	3,5	;RP0=0, select bank0
  5961  0363  1303               	bcf	3,6	;RP1=0, select bank0
  5962  0364  00DD               	movwf	??_Load_Main
  5963  0365  01DE               	clrf	??_Load_Main+1
  5964  0366  085D               	movf	??_Load_Main,w
  5965  0367  00D6               	movwf	___wmul@multiplier
  5966  0368  085E               	movf	??_Load_Main+1,w
  5967  0369  00D7               	movwf	___wmul@multiplier+1
  5968  036A  300B               	movlw	11
  5969  036B  00D8               	movwf	___wmul@multiplicand
  5970  036C  3000               	movlw	0
  5971  036D  00D9               	movwf	___wmul@multiplicand+1
  5972  036E  158A  2530  118A   	fcall	___wmul
  5973  0371  1283               	bcf	3,5	;RP0=0, select bank0
  5974  0372  1303               	bcf	3,6	;RP1=0, select bank0
  5975  0373  0857               	movf	?___wmul+1,w
  5976  0374  1683               	bsf	3,5	;RP0=1, select bank1
  5977  0375  1303               	bcf	3,6	;RP1=0, select bank1
  5978  0376  01E7               	clrf	((_Load+1)^(0+128)+24)
  5979  0377  07E7               	addwf	((_Load+1)^(0+128)+24),f
  5980  0378  1283               	bcf	3,5	;RP0=0, select bank0
  5981  0379  1303               	bcf	3,6	;RP1=0, select bank0
  5982  037A  0856               	movf	?___wmul,w
  5983  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5984  037C  1303               	bcf	3,6	;RP1=0, select bank1
  5985  037D  01E6               	clrf	(_Load^(0+128)+24)
  5986  037E  07E6               	addwf	(_Load^(0+128)+24),f
  5987                           
  5988                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
  5989  037F  2B8E               	goto	l722
  5990  0380                     l5022:	
  5991  0380  1283               	bcf	3,5	;RP0=0, select bank0
  5992  0381  0860               	movf	Load_Main@Load_Status,w
  5993  0382  3A01               	xorlw	1
  5994  0383  1D03               	skipz
  5995  0384  2B8E               	goto	l722
  5996                           
  5997                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(7*1.7) + Load.TotalLoad;
  5998  0385  1683               	bsf	3,5	;RP0=1, select bank1
  5999  0386  1303               	bcf	3,6	;RP1=0, select bank1
  6000  0387  0857               	movf	(_Load^(0+128)+9),w
  6001  0388  3E0B               	addlw	11
  6002  0389  00E6               	movwf	(_Load^(0+128)+24)
  6003  038A  3000               	movlw	0
  6004  038B  1803               	skipnc
  6005  038C  3001               	movlw	1
  6006  038D                     L17:	
  6007  038D  00E7               	movwf	(_Load^(0+128)+25)
  6008  038E                     l722:	
  6009                           
  6010                           ;OverLoad_B1.c: 135: }
  6011                           ;OverLoad_B1.c: 136: }
  6012                           ;OverLoad_B1.c: 137: }
  6013                           ;OverLoad_B1.c: 138: }
  6014                           ;OverLoad_B1.c: 139: }
  6015                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6016  038E  1683               	bsf	3,5	;RP0=1, select bank1
  6017  038F  1303               	bcf	3,6	;RP1=0, select bank1
  6018  0390  0862               	movf	(_Load^(0+128)+20),w
  6019  0391  1283               	bcf	3,5	;RP0=0, select bank0
  6020  0392  1303               	bcf	3,6	;RP1=0, select bank0
  6021  0393  00DD               	movwf	??_Load_Main
  6022  0394  01DE               	clrf	??_Load_Main+1
  6023  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6024  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6025  0397  0867               	movf	((_Load+1)^(0+128)+24),w
  6026  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6028  039A  025E               	subwf	??_Load_Main+1,w
  6029  039B  1D03               	skipz
  6030  039C  2BA3               	goto	u6385
  6031  039D  1683               	bsf	3,5	;RP0=1, select bank1
  6032  039E  1303               	bcf	3,6	;RP1=0, select bank1
  6033  039F  0866               	movf	(_Load^(0+128)+24),w
  6034  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  6035  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  6036  03A2  025D               	subwf	??_Load_Main,w
  6037  03A3                     u6385:	
  6038  03A3  1C03               	skipc
  6039  03A4  2BB2               	goto	l5034
  6040                           
  6041                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
  6042  03A5  3001               	movlw	1
  6043  03A6  00DD               	movwf	??_Load_Main
  6044  03A7  085D               	movf	??_Load_Main,w
  6045  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  6046  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  6047  03AA  07EB               	addwf	(_Load^(0+128)+29),f
  6048                           
  6049                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
  6050  03AB  086B               	movf	(_Load^(0+128)+29),w
  6051  03AC  026C               	subwf	(_Load^(0+128)+30),w
  6052  03AD  1803               	skipnc
  6053  03AE  0008               	return
  6054                           
  6055                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6056  03AF  01EB               	clrf	(_Load^(0+128)+29)
  6057                           
  6058                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
  6059  03B0  16CE               	bsf	_Load^(0+128),5
  6060                           
  6061                           ;OverLoad_B1.c: 167: }
  6062                           ;OverLoad_B1.c: 168: } else {
  6063  03B1  0008               	return
  6064  03B2                     l5034:	
  6065                           
  6066                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
  6067  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  6068  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  6069  03B4  01EB               	clrf	(_Load^(0+128)+29)
  6070                           
  6071                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
  6072  03B5  1DCE               	btfss	_Load^(0+128),3
  6073  03B6  0008               	return
  6074                           
  6075                           ;OverLoad_B1.c: 171: Load.SafeCount++;
  6076  03B7  3001               	movlw	1
  6077  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  6078  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  6079  03BA  00DD               	movwf	??_Load_Main
  6080  03BB  085D               	movf	??_Load_Main,w
  6081  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6082  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6083  03BE  07EE               	addwf	(_Load^(0+128)+32),f
  6084                           
  6085                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
  6086  03BF  3003               	movlw	3
  6087  03C0  026E               	subwf	(_Load^(0+128)+32),w
  6088  03C1  1C03               	skipc
  6089  03C2  0008               	return
  6090                           
  6091                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
  6092  03C3  01EE               	clrf	(_Load^(0+128)+32)
  6093                           
  6094                           ;OverLoad_B1.c: 174: Load.OK = 1;
  6095  03C4  17CE               	bsf	_Load^(0+128),7
  6096                           
  6097                           ;OverLoad_B1.c: 175: Load.Run = 0;
  6098  03C5  11CE               	bcf	_Load^(0+128),3
  6099                           
  6100                           ;OverLoad_B1.c: 176: Load.Count = 0;
  6101  03C6  01EA               	clrf	(_Load^(0+128)+28)
  6102                           
  6103                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
  6104  03C7  0862               	movf	(_Load^(0+128)+20),w
  6105  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  6106  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  6107  03CA  00DD               	movwf	??_Load_Main
  6108  03CB  085D               	movf	??_Load_Main,w
  6109  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  6110  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  6111  03CE  00D7               	movwf	(_Load^(0+128)+9)
  6112                           
  6113                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
  6114  03CF  3003               	movlw	3
  6115  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6116  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6117  03D2  00DD               	movwf	??_Load_Main
  6118  03D3  085D               	movf	??_Load_Main,w
  6119  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6120  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6121  03D6  00EC               	movwf	(_Load^(0+128)+30)
  6122                           
  6123                           ;OverLoad_B1.c: 181: }
  6124                           ;OverLoad_B1.c: 182: }
  6125                           ;OverLoad_B1.c: 205: }
  6126                           ;OverLoad_B1.c: 206: }
  6127                           ;OverLoad_B1.c: 207: }
  6128                           ;OverLoad_B1.c: 208: } else {
  6129  03D7  0008               	return
  6130  03D8                     l717:	
  6131                           
  6132                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
  6133  03D8  164E               	bsf	_Load^(0+128),4
  6134                           
  6135                           ;OverLoad_B1.c: 210: }
  6136                           ;OverLoad_B1.c: 211: } else {
  6137  03D9  0008               	return
  6138  03DA                     l716:	
  6139                           
  6140                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
  6141  03DA  1D4E               	btfss	_Load^(0+128),2
  6142  03DB  2BEE               	goto	l5072
  6143                           
  6144                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
  6145  03DC  114E               	bcf	_Load^(0+128),2
  6146                           
  6147                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
  6148  03DD  124E               	bcf	_Load^(0+128),4
  6149                           
  6150                           ;OverLoad_B1.c: 217: Load.Time = 0;
  6151  03DE  01CF               	clrf	(_Load^(0+128)+1)
  6152  03DF  01D0               	clrf	((_Load+1)^(0+128)+1)
  6153                           
  6154                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
  6155  03E0  158A  245F  118A   	fcall	_setLoad_AH_AL_Restore
  6156                           
  6157                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
  6158  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  6159  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  6160  03E5  01EB               	clrf	(_Load^(0+128)+29)
  6161                           
  6162                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
  6163  03E6  01EE               	clrf	(_Load^(0+128)+32)
  6164                           
  6165                           ;OverLoad_B1.c: 223: Load.ADH = 0;
  6166  03E7  01D3               	clrf	(_Load^(0+128)+5)
  6167  03E8  01D4               	clrf	((_Load+1)^(0+128)+5)
  6168                           
  6169                           ;OverLoad_B1.c: 224: Load.ADL = 0;
  6170  03E9  01D5               	clrf	(_Load^(0+128)+7)
  6171  03EA  01D6               	clrf	((_Load+1)^(0+128)+7)
  6172                           
  6173                           ;OverLoad_B1.c: 230: Load.Run = 0;
  6174  03EB  11CE               	bcf	_Load^(0+128),3
  6175                           
  6176                           ;OverLoad_B1.c: 231: Load.Count = 0;
  6177  03EC  01EA               	clrf	(_Load^(0+128)+28)
  6178                           
  6179                           ;OverLoad_B1.c: 232: Load.OK = 0;
  6180  03ED  13CE               	bcf	_Load^(0+128),7
  6181  03EE                     l5072:	
  6182                           
  6183                           ;OverLoad_B1.c: 254: }
  6184                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
  6185  03EE  1ECE               	btfss	_Load^(0+128),5
  6186  03EF  0008               	return
  6187                           
  6188                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
  6189  03F0  3001               	movlw	1
  6190  03F1  07D1               	addwf	(_Load^(0+128)+3),f
  6191  03F2  1803               	skipnc
  6192  03F3  0AD2               	incf	((_Load+1)^(0+128)+3),f
  6193  03F4  3000               	movlw	0
  6194  03F5  07D2               	addwf	((_Load+1)^(0+128)+3),f
  6195                           
  6196                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
  6197  03F6  3001               	movlw	1
  6198  03F7  0252               	subwf	((_Load+1)^(0+128)+3),w
  6199  03F8  30F4               	movlw	244
  6200  03F9  1903               	skipnz
  6201  03FA  0251               	subwf	(_Load^(0+128)+3),w
  6202  03FB  1C03               	skipc
  6203  03FC  0008               	return
  6204                           
  6205                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
  6206  03FD  01D1               	clrf	(_Load^(0+128)+3)
  6207  03FE  01D2               	clrf	((_Load+1)^(0+128)+3)
  6208                           
  6209                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
  6210  03FF  12CE               	bcf	_Load^(0+128),5
  6211                           
  6212                           ;OverLoad_B1.c: 260: }
  6213                           ;OverLoad_B1.c: 261: }
  6214                           ;OverLoad_B1.c: 262: }
  6215                           ;OverLoad_B1.c: 263: } else {
  6216  0400  0008               	return
  6217  0401                     l706:	
  6218                           
  6219                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
  6220  0401  1283               	bcf	3,5	;RP0=0, select bank0
  6221  0402  1303               	bcf	3,6	;RP1=0, select bank0
  6222  0403  1C20               	btfss	_myMain,0
  6223  0404  0008               	return
  6224                           
  6225                           ;OverLoad_B1.c: 265: Load.Enable = 1;
  6226  0405  1683               	bsf	3,5	;RP0=1, select bank1
  6227  0406  1303               	bcf	3,6	;RP1=0, select bank1
  6228  0407  144E               	bsf	_Load^(0+128),0
  6229  0408  0008               	return
  6230  0409                     __end_of_Load_Main:	
  6231                           
  6232                           	psect	text30
  6233  0B71                     __ptext30:	
  6234 ;; *************** function _getMain_Lights_Count *****************
  6235 ;; Defined at:
  6236 ;;		line 466 in file "../src/Main_B1.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  status1         1    5[COMMON] unsigned char 
  6241 ;;  count           1    4[COMMON] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      unsigned char 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6251 ;;      Params:         0       0       0       0
  6252 ;;      Locals:         2       0       0       0
  6253 ;;      Temps:          0       0       0       0
  6254 ;;      Totals:         2       0       0       0
  6255 ;;Total ram usage:        2 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    2
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_Load_Main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _getMain_Lights_Count
  6267  0B71                     _getMain_Lights_Count:	
  6268                           
  6269                           ;Main_B1.c: 467: char count = 0;
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6273  0B71  01F4               	clrf	getMain_Lights_Count@count
  6274                           
  6275                           ;Main_B1.c: 483: char status1 = Lights1.Loop == 1 ? 1 : 0;
  6276  0B72  3000               	movlw	0
  6277  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  6278  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  6279  0B75  18C8               	btfsc	_Lights1+1,1
  6280  0B76  3001               	movlw	1
  6281  0B77  00F5               	movwf	getMain_Lights_Count@status1
  6282                           
  6283                           ;Main_B1.c: 494: return count = status1;
  6284  0B78  0875               	movf	getMain_Lights_Count@status1,w
  6285  0B79  00F4               	movwf	getMain_Lights_Count@count
  6286  0B7A  0008               	return
  6287  0B7B                     __end_of_getMain_Lights_Count:	
  6288                           
  6289                           	psect	text31
  6290  0B2A                     __ptext31:	
  6291 ;; *************** function _getLight_Load_Status *****************
  6292 ;; Defined at:
  6293 ;;		line 355 in file "../src/TriacRelay_B1.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;		None
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  loadstatus      1    4[COMMON] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      unsigned char 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6307 ;;      Params:         0       0       0       0
  6308 ;;      Locals:         1       0       0       0
  6309 ;;      Temps:          0       0       0       0
  6310 ;;      Totals:         1       0       0       0
  6311 ;;Total ram usage:        1 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    2
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_Load_Main
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           
  6322                           ;psect for function _getLight_Load_Status
  6323  0B2A                     _getLight_Load_Status:	
  6324                           
  6325                           ;TriacRelay_B1.c: 356: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6326                           
  6327                           ;incstack = 0
  6328                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6329  0B2A  3000               	movlw	0
  6330  0B2B  18F7               	btfsc	_Light,1
  6331  0B2C  3001               	movlw	1
  6332  0B2D  00F4               	movwf	getLight_Load_Status@loadstatus
  6333                           
  6334                           ;TriacRelay_B1.c: 357: return loadstatus;
  6335  0B2E  0874               	movf	getLight_Load_Status@loadstatus,w
  6336  0B2F  0008               	return
  6337  0B30                     __end_of_getLight_Load_Status:	
  6338                           
  6339                           	psect	text32
  6340  0B24                     __ptext32:	
  6341 ;; *************** function _getLight_LoadGO *****************
  6342 ;; Defined at:
  6343 ;;		line 350 in file "../src/TriacRelay_B1.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;		None
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  loadgo          1    4[COMMON] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      unsigned char 
  6350 ;; Registers used:
  6351 ;;		wreg, status,2
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6357 ;;      Params:         0       0       0       0
  6358 ;;      Locals:         1       0       0       0
  6359 ;;      Temps:          0       0       0       0
  6360 ;;      Totals:         1       0       0       0
  6361 ;;Total ram usage:        1 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    2
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_Load_Main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _getLight_LoadGO
  6373  0B24                     _getLight_LoadGO:	
  6374                           
  6375                           ;TriacRelay_B1.c: 351: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6379  0B24  3000               	movlw	0
  6380  0B25  1877               	btfsc	_Light,0
  6381  0B26  3001               	movlw	1
  6382  0B27  00F4               	movwf	getLight_LoadGO@loadgo
  6383                           
  6384                           ;TriacRelay_B1.c: 352: return loadgo;
  6385  0B28  0874               	movf	getLight_LoadGO@loadgo,w
  6386  0B29  0008               	return
  6387  0B2A                     __end_of_getLight_LoadGO:	
  6388                           
  6389                           	psect	text33
  6390  0D30                     __ptext33:	
  6391 ;; *************** function ___wmul *****************
  6392 ;; Defined at:
  6393 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6396 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  product         2    4[COMMON] unsigned int 
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  2    0[BANK0 ] unsigned int 
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, status,0
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6408 ;;      Params:         0       4       0       0
  6409 ;;      Locals:         2       0       0       0
  6410 ;;      Temps:          0       0       0       0
  6411 ;;      Totals:         2       4       0       0
  6412 ;;Total ram usage:        6 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    2
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_Load_Main
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           
  6423                           ;psect for function ___wmul
  6424  0D30                     ___wmul:	
  6425                           
  6426                           ;incstack = 0
  6427                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6428  0D30  01F4               	clrf	___wmul@product
  6429  0D31  01F5               	clrf	___wmul@product+1
  6430  0D32                     l4718:	
  6431  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  6432  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  6433  0D34  1C56               	btfss	___wmul@multiplier,0
  6434  0D35  2D3C               	goto	l1375
  6435  0D36  0858               	movf	___wmul@multiplicand,w
  6436  0D37  07F4               	addwf	___wmul@product,f
  6437  0D38  1803               	skipnc
  6438  0D39  0AF5               	incf	___wmul@product+1,f
  6439  0D3A  0859               	movf	___wmul@multiplicand+1,w
  6440  0D3B  07F5               	addwf	___wmul@product+1,f
  6441  0D3C                     l1375:	
  6442  0D3C  3001               	movlw	1
  6443  0D3D                     u5715:	
  6444  0D3D  1003               	clrc
  6445  0D3E  0DD8               	rlf	___wmul@multiplicand,f
  6446  0D3F  0DD9               	rlf	___wmul@multiplicand+1,f
  6447  0D40  3EFF               	addlw	-1
  6448  0D41  1D03               	skipz
  6449  0D42  2D3D               	goto	u5715
  6450  0D43  3001               	movlw	1
  6451  0D44                     u5725:	
  6452  0D44  1003               	clrc
  6453  0D45  0CD7               	rrf	___wmul@multiplier+1,f
  6454  0D46  0CD6               	rrf	___wmul@multiplier,f
  6455  0D47  3EFF               	addlw	-1
  6456  0D48  1D03               	skipz
  6457  0D49  2D44               	goto	u5725
  6458  0D4A  0857               	movf	___wmul@multiplier+1,w
  6459  0D4B  0456               	iorwf	___wmul@multiplier,w
  6460  0D4C  1D03               	skipz
  6461  0D4D  2D32               	goto	l4718
  6462  0D4E  0875               	movf	___wmul@product+1,w
  6463  0D4F  01D7               	clrf	?___wmul+1
  6464  0D50  07D7               	addwf	?___wmul+1,f
  6465  0D51  0874               	movf	___wmul@product,w
  6466  0D52  01D6               	clrf	?___wmul
  6467  0D53  07D6               	addwf	?___wmul,f
  6468  0D54  0008               	return
  6469  0D55                     __end_of___wmul:	
  6470                           
  6471                           	psect	text34
  6472  0E48                     __ptext34:	
  6473 ;; *************** function ___lwdiv *****************
  6474 ;; Defined at:
  6475 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  divisor         2    0[BANK0 ] unsigned int 
  6478 ;;  dividend        2    2[BANK0 ] unsigned int 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  quotient        2    5[BANK0 ] unsigned int 
  6481 ;;  counter         1    4[BANK0 ] unsigned char 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  2    0[BANK0 ] unsigned int 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6491 ;;      Params:         0       4       0       0
  6492 ;;      Locals:         0       3       0       0
  6493 ;;      Temps:          1       0       0       0
  6494 ;;      Totals:         1       7       0       0
  6495 ;;Total ram usage:        8 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    2
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_Load_Main
  6502 ;;		_getPIR_AD
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           
  6507                           ;psect for function ___lwdiv
  6508  0E48                     ___lwdiv:	
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6512  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  6514  0E4A  01DB               	clrf	___lwdiv@quotient
  6515  0E4B  01DC               	clrf	___lwdiv@quotient+1
  6516  0E4C  0857               	movf	___lwdiv@divisor+1,w
  6517  0E4D  0456               	iorwf	___lwdiv@divisor,w
  6518  0E4E  1903               	skipnz
  6519  0E4F  2E81               	goto	l4750
  6520  0E50  01DA               	clrf	___lwdiv@counter
  6521  0E51  0ADA               	incf	___lwdiv@counter,f
  6522  0E52                     l4738:	
  6523  0E52  1BD7               	btfsc	___lwdiv@divisor+1,7
  6524  0E53  2E60               	goto	l4740
  6525  0E54  3001               	movlw	1
  6526  0E55                     u5755:	
  6527  0E55  1003               	clrc
  6528  0E56  0DD6               	rlf	___lwdiv@divisor,f
  6529  0E57  0DD7               	rlf	___lwdiv@divisor+1,f
  6530  0E58  3EFF               	addlw	-1
  6531  0E59  1D03               	skipz
  6532  0E5A  2E55               	goto	u5755
  6533  0E5B  3001               	movlw	1
  6534  0E5C  00F4               	movwf	??___lwdiv
  6535  0E5D  0874               	movf	??___lwdiv,w
  6536  0E5E  07DA               	addwf	___lwdiv@counter,f
  6537  0E5F  2E52               	goto	l4738
  6538  0E60                     l4740:	
  6539  0E60  3001               	movlw	1
  6540  0E61                     u5775:	
  6541  0E61  1003               	clrc
  6542  0E62  0DDB               	rlf	___lwdiv@quotient,f
  6543  0E63  0DDC               	rlf	___lwdiv@quotient+1,f
  6544  0E64  3EFF               	addlw	-1
  6545  0E65  1D03               	skipz
  6546  0E66  2E61               	goto	u5775
  6547  0E67  0857               	movf	___lwdiv@divisor+1,w
  6548  0E68  0259               	subwf	___lwdiv@dividend+1,w
  6549  0E69  1D03               	skipz
  6550  0E6A  2E6D               	goto	u5785
  6551  0E6B  0856               	movf	___lwdiv@divisor,w
  6552  0E6C  0258               	subwf	___lwdiv@dividend,w
  6553  0E6D                     u5785:	
  6554  0E6D  1C03               	skipc
  6555  0E6E  2E76               	goto	l4746
  6556  0E6F  0856               	movf	___lwdiv@divisor,w
  6557  0E70  02D8               	subwf	___lwdiv@dividend,f
  6558  0E71  0857               	movf	___lwdiv@divisor+1,w
  6559  0E72  1C03               	skipc
  6560  0E73  03D9               	decf	___lwdiv@dividend+1,f
  6561  0E74  02D9               	subwf	___lwdiv@dividend+1,f
  6562  0E75  145B               	bsf	___lwdiv@quotient,0
  6563  0E76                     l4746:	
  6564  0E76  3001               	movlw	1
  6565  0E77                     u5795:	
  6566  0E77  1003               	clrc
  6567  0E78  0CD7               	rrf	___lwdiv@divisor+1,f
  6568  0E79  0CD6               	rrf	___lwdiv@divisor,f
  6569  0E7A  3EFF               	addlw	-1
  6570  0E7B  1D03               	skipz
  6571  0E7C  2E77               	goto	u5795
  6572  0E7D  3001               	movlw	1
  6573  0E7E  02DA               	subwf	___lwdiv@counter,f
  6574  0E7F  1D03               	btfss	3,2
  6575  0E80  2E60               	goto	l4740
  6576  0E81                     l4750:	
  6577  0E81  085C               	movf	___lwdiv@quotient+1,w
  6578  0E82  01D7               	clrf	?___lwdiv+1
  6579  0E83  07D7               	addwf	?___lwdiv+1,f
  6580  0E84  085B               	movf	___lwdiv@quotient,w
  6581  0E85  01D6               	clrf	?___lwdiv
  6582  0E86  07D6               	addwf	?___lwdiv,f
  6583  0E87  0008               	return
  6584  0E88                     __end_of___lwdiv:	
  6585                           
  6586                           	psect	text35
  6587  0B04                     __ptext35:	
  6588 ;; *************** function _Load_Initialization *****************
  6589 ;; Defined at:
  6590 ;;		line 9 in file "../src/OverLoad_B1.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6604 ;;      Params:         0       0       0       0
  6605 ;;      Locals:         0       0       0       0
  6606 ;;      Temps:          0       0       0       0
  6607 ;;      Totals:         0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    3
  6611 ;; This function calls:
  6612 ;;		_setLoad_AH_AL_Restore
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _Load_Initialization
  6620  0B04                     _Load_Initialization:	
  6621                           
  6622                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6626  0B04  158A  245F         	fcall	_setLoad_AH_AL_Restore
  6627  0B06  0008               	return
  6628  0B07                     __end_of_Load_Initialization:	
  6629                           
  6630                           	psect	text36
  6631  0C5F                     __ptext36:	
  6632 ;; *************** function _setLoad_AH_AL_Restore *****************
  6633 ;; Defined at:
  6634 ;;		line 291 in file "../src/OverLoad_B1.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  i               1    5[COMMON] unsigned char 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6648 ;;      Params:         0       0       0       0
  6649 ;;      Locals:         1       0       0       0
  6650 ;;      Temps:          1       0       0       0
  6651 ;;      Totals:         2       0       0       0
  6652 ;;Total ram usage:        2 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    2
  6655 ;; This function calls:
  6656 ;;		Nothing
  6657 ;; This function is called by:
  6658 ;;		_Load_Initialization
  6659 ;;		_Load_Main
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           
  6664                           ;psect for function _setLoad_AH_AL_Restore
  6665  0C5F                     _setLoad_AH_AL_Restore:	
  6666                           
  6667                           ;OverLoad_B1.c: 292: char i;
  6668                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
  6669                           
  6670                           ;incstack = 0
  6671                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6672  0C5F  01F5               	clrf	setLoad_AH_AL_Restore@i
  6673  0C60                     L18:	
  6674  0C60  3005               	movlw	5
  6675  0C61  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6676  0C62  1803               	btfsc	3,0
  6677  0C63  0008               	return
  6678                           
  6679                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
  6680  0C64  0875               	movf	setLoad_AH_AL_Restore@i,w
  6681  0C65  3ED8               	addlw	(_Load+10)& (0+255)
  6682  0C66  0084               	movwf	4
  6683  0C67  1383               	bcf	3,7	;select IRP bank1
  6684  0C68  0180               	clrf	0
  6685                           
  6686                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xff;
  6687  0C69  30FF               	movlw	255
  6688  0C6A  00F4               	movwf	??_setLoad_AH_AL_Restore
  6689  0C6B  0875               	movf	setLoad_AH_AL_Restore@i,w
  6690  0C6C  3EDD               	addlw	(_Load+15)& (0+255)
  6691  0C6D  0084               	movwf	4
  6692  0C6E  0874               	movf	??_setLoad_AH_AL_Restore,w
  6693  0C6F  0080               	movwf	0
  6694  0C70  3001               	movlw	1
  6695  0C71  00F4               	movwf	??_setLoad_AH_AL_Restore
  6696  0C72  0874               	movf	??_setLoad_AH_AL_Restore,w
  6697  0C73  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6698  0C74  2C60               	goto	L18
  6699  0C75                     __end_of_setLoad_AH_AL_Restore:	
  6700                           
  6701                           	psect	text37
  6702  0D0F                     __ptext37:	
  6703 ;; *************** function _Lights_Main *****************
  6704 ;; Defined at:
  6705 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;		None
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;		None               void
  6712 ;; Registers used:
  6713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6719 ;;      Params:         0       0       0       0
  6720 ;;      Locals:         0       0       0       0
  6721 ;;      Temps:          0       0       0       0
  6722 ;;      Totals:         0       0       0       0
  6723 ;;Total ram usage:        0 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    5
  6726 ;; This function calls:
  6727 ;;		_Lights_Close
  6728 ;;		_Lights_Control
  6729 ;;		_getLoad_OK
  6730 ;;		_getMain_All_Error_Status
  6731 ;;		_getMain_All_LightsStatus
  6732 ;;		_setLights_Main
  6733 ;; This function is called by:
  6734 ;;		_main
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _Lights_Main
  6740  0D0F                     _Lights_Main:	
  6741                           
  6742                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6746  0D0F  1C77               	btfss	_Light,0
  6747  0D10  2D25               	goto	l5090
  6748                           
  6749                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6750  0D11  158A  2346  158A   	fcall	_getLoad_OK
  6751  0D14  3A01               	xorlw	1
  6752  0D15  1903               	skipnz
  6753  0D16  2D24               	goto	l1260
  6754  0D17  3000               	movlw	0
  6755  0D18  158A  260A  158A   	fcall	_getMain_All_Error_Status
  6756  0D1B  3800               	iorlw	0
  6757  0D1C  1D03               	skipz
  6758  0D1D  2D24               	goto	l1260
  6759  0D1E  158A  235E  158A   	fcall	_getMain_All_LightsStatus
  6760  0D21  3800               	iorlw	0
  6761  0D22  1D03               	skipz
  6762  0D23  2D25               	goto	l5090
  6763  0D24                     l1260:	
  6764                           
  6765                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6766  0D24  1077               	bcf	_Light,0
  6767  0D25                     l5090:	
  6768                           
  6769                           ;TriacRelay_B1.c: 68: }
  6770                           ;TriacRelay_B1.c: 69: }
  6771                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6772  0D25  3001               	movlw	1
  6773  0D26  158A  25A6  158A   	fcall	_setLights_Main
  6774                           
  6775                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6776  0D29  3001               	movlw	1
  6777  0D2A  118A  2541  158A   	fcall	_Lights_Control
  6778                           
  6779                           ;TriacRelay_B1.c: 87: Lights_Close();
  6780  0D2D  158A  23EF         	fcall	_Lights_Close
  6781  0D2F  0008               	return
  6782  0D30                     __end_of_Lights_Main:	
  6783                           
  6784                           	psect	text38
  6785  0DA6                     __ptext38:	
  6786 ;; *************** function _setLights_Main *****************
  6787 ;; Defined at:
  6788 ;;		line 99 in file "../src/TriacRelay_B1.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  lights          1    wreg     unsigned char 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;  lights          1    2[BANK0 ] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;		None               void
  6795 ;; Registers used:
  6796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6802 ;;      Params:         0       0       0       0
  6803 ;;      Locals:         0       1       0       0
  6804 ;;      Temps:          0       0       0       0
  6805 ;;      Totals:         0       1       0       0
  6806 ;;Total ram usage:        1 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    4
  6809 ;; This function calls:
  6810 ;;		_LightsPointSelect
  6811 ;;		_getLights_Allow_Condition
  6812 ;;		_setLights
  6813 ;; This function is called by:
  6814 ;;		_Lights_Main
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           
  6819                           ;psect for function _setLights_Main
  6820  0DA6                     _setLights_Main:	
  6821                           
  6822                           ;incstack = 0
  6823                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6824                           ;setLights_Main@lights stored from wreg
  6825  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  6826  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  6827  0DA8  00D8               	movwf	setLights_Main@lights
  6828                           
  6829                           ;TriacRelay_B1.c: 100: LightsPointSelect(lights);
  6830  0DA9  0858               	movf	setLights_Main@lights,w
  6831  0DAA  158A  2367  158A   	fcall	_LightsPointSelect
  6832                           
  6833                           ;TriacRelay_B1.c: 101: if (Lights->GO == 0) {
  6834  0DAD  0878               	movf	_Lights,w
  6835  0DAE  0084               	movwf	4
  6836  0DAF  1383               	bcf	3,7	;select IRP bank0
  6837  0DB0  1880               	btfsc	0,1
  6838  0DB1  0008               	return
  6839                           
  6840                           ;TriacRelay_B1.c: 102: if (Lights->Trigger == 1) {
  6841  0DB2  0878               	movf	_Lights,w
  6842  0DB3  0084               	movwf	4
  6843  0DB4  1D80               	btfss	0,3
  6844  0DB5  0008               	return
  6845                           
  6846                           ;TriacRelay_B1.c: 103: if (getLights_Allow_Condition(lights) == 0) {
  6847  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6848  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  6849  0DB8  0858               	movf	setLights_Main@lights,w
  6850  0DB9  158A  2475  158A   	fcall	_getLights_Allow_Condition
  6851  0DBC  3800               	iorlw	0
  6852  0DBD  1D03               	skipz
  6853  0DBE  0008               	return
  6854                           
  6855                           ;TriacRelay_B1.c: 104: Lights->Trigger = 0;
  6856  0DBF  0878               	movf	_Lights,w
  6857  0DC0  0084               	movwf	4
  6858  0DC1  1383               	bcf	3,7	;select IRP bank0
  6859  0DC2  1180               	bcf	0,3
  6860                           
  6861                           ;TriacRelay_B1.c: 105: if (Lights->Switch == 1) {
  6862  0DC3  0878               	movf	_Lights,w
  6863  0DC4  0084               	movwf	4
  6864  0DC5  1E00               	btfss	0,4
  6865  0DC6  2DCF               	goto	l4682
  6866                           
  6867                           ;TriacRelay_B1.c: 106: setLights(lights, 1);
  6868  0DC7  01F5               	clrf	setLights@status
  6869  0DC8  0AF5               	incf	setLights@status,f
  6870  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  6871  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  6872  0DCB  0858               	movf	setLights_Main@lights,w
  6873  0DCC  158A  2688         	fcall	_setLights
  6874                           
  6875                           ;TriacRelay_B1.c: 107: } else {
  6876  0DCE  0008               	return
  6877  0DCF                     l4682:	
  6878                           
  6879                           ;TriacRelay_B1.c: 108: setLights(lights, 0);
  6880  0DCF  01F5               	clrf	setLights@status
  6881  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  6882  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  6883  0DD2  0858               	movf	setLights_Main@lights,w
  6884  0DD3  158A  2688         	fcall	_setLights
  6885  0DD5  0008               	return
  6886  0DD6                     __end_of_setLights_Main:	
  6887                           
  6888                           	psect	text39
  6889  0E88                     __ptext39:	
  6890 ;; *************** function _setLights *****************
  6891 ;; Defined at:
  6892 ;;		line 116 in file "../src/TriacRelay_B1.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  lights          1    wreg     unsigned char 
  6895 ;;  status          1    5[COMMON] unsigned char 
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  lights          1    1[BANK0 ] unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;		None               void
  6900 ;; Registers used:
  6901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6907 ;;      Params:         1       0       0       0
  6908 ;;      Locals:         0       1       0       0
  6909 ;;      Temps:          0       1       0       0
  6910 ;;      Totals:         1       2       0       0
  6911 ;;Total ram usage:        3 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    3
  6914 ;; This function calls:
  6915 ;;		_setLights_Line
  6916 ;; This function is called by:
  6917 ;;		_setLights_Main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _setLights
  6923  0E88                     _setLights:	
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6927                           ;setLights@lights stored from wreg
  6928  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  6929  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  6930  0E8A  00D7               	movwf	setLights@lights
  6931                           
  6932                           ;TriacRelay_B1.c: 122: Lights->GO = 1;
  6933  0E8B  0878               	movf	_Lights,w
  6934  0E8C  0084               	movwf	4
  6935  0E8D  1383               	bcf	3,7	;select IRP bank0
  6936  0E8E  1480               	bsf	0,1
  6937                           
  6938                           ;TriacRelay_B1.c: 123: if (status == 1) {
  6939  0E8F  0875               	movf	setLights@status,w
  6940  0E90  3A01               	xorlw	1
  6941  0E91  1D03               	skipz
  6942  0E92  2EAF               	goto	l4466
  6943                           
  6944                           ;TriacRelay_B1.c: 129: if (Lights->Status == 0) {
  6945  0E93  0878               	movf	_Lights,w
  6946  0E94  0084               	movwf	4
  6947  0E95  1900               	btfsc	0,2
  6948  0E96  2ED0               	goto	l4476
  6949                           
  6950                           ;TriacRelay_B1.c: 130: Lights->Status = 1;
  6951  0E97  0878               	movf	_Lights,w
  6952  0E98  0084               	movwf	4
  6953  0E99  1500               	bsf	0,2
  6954                           
  6955                           ;TriacRelay_B1.c: 131: Lights->RelayValue = 60;
  6956  0E9A  303C               	movlw	60
  6957  0E9B  00D6               	movwf	??_setLights
  6958  0E9C  0878               	movf	_Lights,w
  6959  0E9D  3E06               	addlw	6
  6960  0E9E  0084               	movwf	4
  6961  0E9F  0856               	movf	??_setLights,w
  6962  0EA0  0080               	movwf	0
  6963                           
  6964                           ;TriacRelay_B1.c: 132: Lights->TriacValue = 140;
  6965  0EA1  308C               	movlw	140
  6966  0EA2  00D6               	movwf	??_setLights
  6967  0EA3  0878               	movf	_Lights,w
  6968  0EA4  3E04               	addlw	4
  6969  0EA5  0084               	movwf	4
  6970  0EA6  0856               	movf	??_setLights,w
  6971  0EA7  0080               	movwf	0
  6972                           
  6973                           ;TriacRelay_B1.c: 133: Lights->Time = 0;
  6974  0EA8  0878               	movf	_Lights,w
  6975  0EA9  3E02               	addlw	2
  6976  0EAA  0084               	movwf	4
  6977  0EAB  0180               	clrf	0
  6978                           
  6979                           ;TriacRelay_B1.c: 135: Light.Load_Status = 1;
  6980  0EAC  14F7               	bsf	_Light,1
  6981                           
  6982                           ;TriacRelay_B1.c: 136: setLights_Line(lights);
  6983  0EAD  0857               	movf	setLights@lights,w
  6984  0EAE  2ECD               	goto	L19
  6985  0EAF                     l4466:	
  6986                           ;TriacRelay_B1.c: 138: }
  6987                           ;TriacRelay_B1.c: 139: } else {
  6988                           
  6989                           
  6990                           ;TriacRelay_B1.c: 140: if (Lights->Status == 1) {
  6991  0EAF  0878               	movf	_Lights,w
  6992  0EB0  0084               	movwf	4
  6993  0EB1  1383               	bcf	3,7	;select IRP bank0
  6994  0EB2  1D00               	btfss	0,2
  6995  0EB3  2ED0               	goto	l4476
  6996                           
  6997                           ;TriacRelay_B1.c: 141: Lights->Status = 0;
  6998  0EB4  0878               	movf	_Lights,w
  6999  0EB5  0084               	movwf	4
  7000  0EB6  1100               	bcf	0,2
  7001                           
  7002                           ;TriacRelay_B1.c: 142: Lights->RelayValue = 40;
  7003  0EB7  3028               	movlw	40
  7004  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  7005  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  7006  0EBA  00D6               	movwf	??_setLights
  7007  0EBB  0878               	movf	_Lights,w
  7008  0EBC  3E06               	addlw	6
  7009  0EBD  0084               	movwf	4
  7010  0EBE  0856               	movf	??_setLights,w
  7011  0EBF  0080               	movwf	0
  7012                           
  7013                           ;TriacRelay_B1.c: 143: Lights->TriacValue = 80;
  7014  0EC0  3050               	movlw	80
  7015  0EC1  00D6               	movwf	??_setLights
  7016  0EC2  0878               	movf	_Lights,w
  7017  0EC3  3E04               	addlw	4
  7018  0EC4  0084               	movwf	4
  7019  0EC5  0856               	movf	??_setLights,w
  7020  0EC6  0080               	movwf	0
  7021                           
  7022                           ;TriacRelay_B1.c: 144: Lights->Time = 0;
  7023  0EC7  0878               	movf	_Lights,w
  7024  0EC8  3E02               	addlw	2
  7025  0EC9  0084               	movwf	4
  7026  0ECA  0180               	clrf	0
  7027                           
  7028                           ;TriacRelay_B1.c: 146: Light.Load_Status = 0;
  7029  0ECB  10F7               	bcf	_Light,1
  7030                           
  7031                           ;TriacRelay_B1.c: 147: setLights_Line(0);
  7032  0ECC  3000               	movlw	0
  7033  0ECD                     L19:	
  7034  0ECD  158A  2394  158A   	fcall	_setLights_Line
  7035  0ED0                     l4476:	
  7036                           
  7037                           ;TriacRelay_B1.c: 149: }
  7038                           ;TriacRelay_B1.c: 150: }
  7039                           ;TriacRelay_B1.c: 152: if (lights == 1) {
  7040  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  7041  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  7042  0ED2  0857               	movf	setLights@lights,w
  7043  0ED3  3A01               	xorlw	1
  7044  0ED4  1D03               	skipz
  7045  0ED5  0008               	return
  7046                           
  7047                           ;TriacRelay_B1.c: 153: RB2 = 1;
  7048  0ED6  1506               	bsf	6,2	;volatile
  7049  0ED7  0008               	return
  7050  0ED8                     __end_of_setLights:	
  7051                           
  7052                           	psect	text40
  7053  0B94                     __ptext40:	
  7054 ;; *************** function _setLights_Line *****************
  7055 ;; Defined at:
  7056 ;;		line 238 in file "../src/TriacRelay_B1.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  lights          1    wreg     unsigned char 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  lights          1    4[COMMON] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;		None               void
  7063 ;; Registers used:
  7064 ;;		wreg
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7070 ;;      Params:         0       0       0       0
  7071 ;;      Locals:         1       0       0       0
  7072 ;;      Temps:          0       0       0       0
  7073 ;;      Totals:         1       0       0       0
  7074 ;;Total ram usage:        1 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    2
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_setLights
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           
  7085                           ;psect for function _setLights_Line
  7086  0B94                     _setLights_Line:	
  7087                           
  7088                           ;incstack = 0
  7089                           ; Regs used in _setLights_Line: [wreg]
  7090                           ;setLights_Line@lights stored from wreg
  7091  0B94  00F4               	movwf	setLights_Line@lights
  7092                           
  7093                           ;TriacRelay_B1.c: 239: Light.LoadGO = 1;
  7094  0B95  1477               	bsf	_Light,0
  7095                           
  7096                           ;TriacRelay_B1.c: 241: Lights1.Line = 0;
  7097  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  7098  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  7099  0B98  1048               	bcf	_Lights1+1,0
  7100                           
  7101                           ;TriacRelay_B1.c: 242: if (lights == 1 && lights != 0) {
  7102  0B99  0874               	movf	setLights_Line@lights,w
  7103  0B9A  3A01               	xorlw	1
  7104  0B9B  1D03               	skipz
  7105  0B9C  0008               	return
  7106  0B9D  0874               	movf	setLights_Line@lights,w
  7107  0B9E  1903               	btfsc	3,2
  7108  0B9F  0008               	return
  7109                           
  7110                           ;TriacRelay_B1.c: 243: Lights1.Line = 1;
  7111  0BA0  1448               	bsf	_Lights1+1,0
  7112  0BA1  0008               	return
  7113  0BA2                     __end_of_setLights_Line:	
  7114                           
  7115                           	psect	text41
  7116  0C75                     __ptext41:	
  7117 ;; *************** function _getLights_Allow_Condition *****************
  7118 ;; Defined at:
  7119 ;;		line 317 in file "../src/TriacRelay_B1.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  lights          1    wreg     unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  lights          1    0[COMMON] unsigned char 
  7124 ;;  allow           1    0[BANK0 ] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      unsigned char 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, pclath, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7134 ;;      Params:         0       0       0       0
  7135 ;;      Locals:         0       2       0       0
  7136 ;;      Temps:          1       0       0       0
  7137 ;;      Totals:         1       2       0       0
  7138 ;;Total ram usage:        3 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    3
  7141 ;; This function calls:
  7142 ;;		_getLoad_OK
  7143 ;; This function is called by:
  7144 ;;		_setLights_Main
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _getLights_Allow_Condition
  7150  0C75                     _getLights_Allow_Condition:	
  7151                           
  7152                           ;TriacRelay_B1.c: 318: char allow = 0;
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7156  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  7157  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  7158  0C77  01D6               	clrf	getLights_Allow_Condition@allow
  7159                           
  7160                           ;TriacRelay_B1.c: 321: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7161  0C78  01D7               	clrf	_getLights_Allow_Condition$4610
  7162  0C79  0AD7               	incf	_getLights_Allow_Condition$4610,f
  7163  0C7A  158A  2346  158A   	fcall	_getLoad_OK
  7164  0C7D  3800               	iorlw	0
  7165  0C7E  1903               	btfsc	3,2
  7166  0C7F  1877               	btfsc	_Light,0
  7167  0C80  2C84               	goto	l4446
  7168  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  7169  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  7170  0C83  01D7               	clrf	_getLights_Allow_Condition$4610
  7171  0C84                     l4446:	
  7172  0C84  1283               	bcf	3,5	;RP0=0, select bank0
  7173  0C85  1303               	bcf	3,6	;RP1=0, select bank0
  7174  0C86  0857               	movf	_getLights_Allow_Condition$4610,w
  7175  0C87  00F5               	movwf	??_getLights_Allow_Condition
  7176  0C88  0875               	movf	??_getLights_Allow_Condition,w
  7177  0C89  00D6               	movwf	getLights_Allow_Condition@allow
  7178                           
  7179                           ;TriacRelay_B1.c: 346: return allow;
  7180  0C8A  0856               	movf	getLights_Allow_Condition@allow,w
  7181  0C8B  0008               	return
  7182  0C8C                     __end_of_getLights_Allow_Condition:	
  7183                           
  7184                           	psect	text42
  7185  0B46                     __ptext42:	
  7186 ;; *************** function _getLoad_OK *****************
  7187 ;; Defined at:
  7188 ;;		line 271 in file "../src/OverLoad_B1.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  ok              1    4[COMMON] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      unsigned char 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7202 ;;      Params:         0       0       0       0
  7203 ;;      Locals:         1       0       0       0
  7204 ;;      Temps:          0       0       0       0
  7205 ;;      Totals:         1       0       0       0
  7206 ;;Total ram usage:        1 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    2
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_Lights_Main
  7213 ;;		_getLights_Allow_Condition
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _getLoad_OK
  7219  0B46                     _getLoad_OK:	
  7220                           
  7221                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7225  0B46  3000               	movlw	0
  7226  0B47  1683               	bsf	3,5	;RP0=1, select bank1
  7227  0B48  1303               	bcf	3,6	;RP1=0, select bank1
  7228  0B49  1BCE               	btfsc	_Load^(0+128),7
  7229  0B4A  3001               	movlw	1
  7230  0B4B  00F4               	movwf	getLoad_OK@ok
  7231                           
  7232                           ;OverLoad_B1.c: 273: return ok;
  7233  0B4C  0874               	movf	getLoad_OK@ok,w
  7234  0B4D  0008               	return
  7235  0B4E                     __end_of_getLoad_OK:	
  7236                           
  7237                           	psect	text43
  7238  0541                     __ptext43:	
  7239 ;; *************** function _Lights_Control *****************
  7240 ;; Defined at:
  7241 ;;		line 169 in file "../src/TriacRelay_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  lights          1    wreg     unsigned char 
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  lights          1   12[BANK0 ] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7255 ;;      Params:         0       0       0       0
  7256 ;;      Locals:         0       3       0       0
  7257 ;;      Temps:          0       2       0       0
  7258 ;;      Totals:         0       5       0       0
  7259 ;;Total ram usage:        5 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    3
  7262 ;; This function calls:
  7263 ;;		_LightsPointSelect
  7264 ;;		___awdiv
  7265 ;; This function is called by:
  7266 ;;		_Lights_Main
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _Lights_Control
  7272  0541                     _Lights_Control:	
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7276                           ;Lights_Control@lights stored from wreg
  7277  0541  1283               	bcf	3,5	;RP0=0, select bank0
  7278  0542  1303               	bcf	3,6	;RP1=0, select bank0
  7279  0543  00E2               	movwf	Lights_Control@lights
  7280                           
  7281                           ;TriacRelay_B1.c: 170: LightsPointSelect(lights);
  7282  0544  0862               	movf	Lights_Control@lights,w
  7283  0545  158A  2367  118A   	fcall	_LightsPointSelect
  7284                           
  7285                           ;TriacRelay_B1.c: 171: if (Lights->GO == 1) {
  7286  0548  0878               	movf	_Lights,w
  7287  0549  0084               	movwf	4
  7288  054A  1383               	bcf	3,7	;select IRP bank0
  7289  054B  1C80               	btfss	0,1
  7290  054C  0008               	return
  7291                           
  7292                           ;TriacRelay_B1.c: 172: Lights->Time++;
  7293  054D  3001               	movlw	1
  7294  054E  1283               	bcf	3,5	;RP0=0, select bank0
  7295  054F  1303               	bcf	3,6	;RP1=0, select bank0
  7296  0550  00DE               	movwf	??_Lights_Control
  7297  0551  0878               	movf	_Lights,w
  7298  0552  3E02               	addlw	2
  7299  0553  0084               	movwf	4
  7300  0554  085E               	movf	??_Lights_Control,w
  7301  0555  0780               	addwf	0,f
  7302                           
  7303                           ;TriacRelay_B1.c: 173: if (Lights->RelaySet == 0) {
  7304  0556  0878               	movf	_Lights,w
  7305  0557  0084               	movwf	4
  7306  0558  1B80               	btfsc	0,7
  7307  0559  2D90               	goto	l4700
  7308                           
  7309                           ;TriacRelay_B1.c: 174: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7310  055A  3014               	movlw	20
  7311  055B  00D6               	movwf	___awdiv@divisor
  7312  055C  3000               	movlw	0
  7313  055D  00D7               	movwf	___awdiv@divisor+1
  7314  055E  0878               	movf	_Lights,w
  7315  055F  3E06               	addlw	6
  7316  0560  0084               	movwf	4
  7317  0561  0800               	movf	0,w
  7318  0562  00DE               	movwf	??_Lights_Control
  7319  0563  01DF               	clrf	??_Lights_Control+1
  7320  0564  085E               	movf	??_Lights_Control,w
  7321  0565  00D8               	movwf	___awdiv@dividend
  7322  0566  085F               	movf	??_Lights_Control+1,w
  7323  0567  00D9               	movwf	___awdiv@dividend+1
  7324  0568  158A  26D8  118A   	fcall	___awdiv
  7325  056B  0878               	movf	_Lights,w
  7326  056C  3E02               	addlw	2
  7327  056D  0084               	movwf	4
  7328  056E  1283               	bcf	3,5	;RP0=0, select bank0
  7329  056F  1303               	bcf	3,6	;RP1=0, select bank0
  7330  0570  0857               	movf	?___awdiv+1,w
  7331  0571  3A80               	xorlw	128
  7332  0572  3C80               	sublw	128
  7333  0573  1D03               	skipz
  7334  0574  2D78               	goto	u5635
  7335  0575  0856               	movf	?___awdiv,w
  7336  0576  1383               	bcf	3,7	;select IRP bank0
  7337  0577  0200               	subwf	0,w
  7338  0578                     u5635:	
  7339  0578  1C03               	skipc
  7340  0579  0008               	return
  7341                           
  7342                           ;TriacRelay_B1.c: 175: Lights->RelaySet = 1;
  7343  057A  0878               	movf	_Lights,w
  7344  057B  0084               	movwf	4
  7345  057C  1383               	bcf	3,7	;select IRP bank0
  7346  057D  1780               	bsf	0,7
  7347                           
  7348                           ;TriacRelay_B1.c: 177: if (lights == 1) {
  7349  057E  1283               	bcf	3,5	;RP0=0, select bank0
  7350  057F  1303               	bcf	3,6	;RP1=0, select bank0
  7351  0580  0862               	movf	Lights_Control@lights,w
  7352  0581  3A01               	xorlw	1
  7353  0582  1D03               	skipz
  7354  0583  0008               	return
  7355                           
  7356                           ;TriacRelay_B1.c: 178: RB3 = Lights->Status == 1 ? 1 : 0;
  7357  0584  0878               	movf	_Lights,w
  7358  0585  0084               	movwf	4
  7359  0586  1D00               	btfss	0,2
  7360  0587  2D8C               	goto	u5650
  7361  0588  1283               	bcf	3,5	;RP0=0, select bank0
  7362  0589  1303               	bcf	3,6	;RP1=0, select bank0
  7363  058A  1586               	bsf	6,3	;volatile
  7364  058B  0008               	return
  7365  058C                     u5650:	
  7366  058C  1283               	bcf	3,5	;RP0=0, select bank0
  7367  058D  1303               	bcf	3,6	;RP1=0, select bank0
  7368  058E  1186               	bcf	6,3	;volatile
  7369                           
  7370                           ;TriacRelay_B1.c: 179: }
  7371                           ;TriacRelay_B1.c: 191: }
  7372                           ;TriacRelay_B1.c: 192: } else {
  7373  058F  0008               	return
  7374  0590                     l4700:	
  7375                           
  7376                           ;TriacRelay_B1.c: 193: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7377  0590  3014               	movlw	20
  7378  0591  00D6               	movwf	___awdiv@divisor
  7379  0592  3000               	movlw	0
  7380  0593  00D7               	movwf	___awdiv@divisor+1
  7381  0594  0878               	movf	_Lights,w
  7382  0595  3E04               	addlw	4
  7383  0596  0084               	movwf	4
  7384  0597  1383               	bcf	3,7	;select IRP bank0
  7385  0598  0800               	movf	0,w
  7386  0599  00DE               	movwf	??_Lights_Control
  7387  059A  01DF               	clrf	??_Lights_Control+1
  7388  059B  085E               	movf	??_Lights_Control,w
  7389  059C  00D8               	movwf	___awdiv@dividend
  7390  059D  085F               	movf	??_Lights_Control+1,w
  7391  059E  00D9               	movwf	___awdiv@dividend+1
  7392  059F  158A  26D8  118A   	fcall	___awdiv
  7393  05A2  0878               	movf	_Lights,w
  7394  05A3  3E02               	addlw	2
  7395  05A4  0084               	movwf	4
  7396  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  7397  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  7398  05A7  0857               	movf	?___awdiv+1,w
  7399  05A8  3A80               	xorlw	128
  7400  05A9  3C80               	sublw	128
  7401  05AA  1D03               	skipz
  7402  05AB  2DAF               	goto	u5675
  7403  05AC  0856               	movf	?___awdiv,w
  7404  05AD  1383               	bcf	3,7	;select IRP bank0
  7405  05AE  0200               	subwf	0,w
  7406  05AF                     u5675:	
  7407  05AF  1C03               	skipc
  7408  05B0  0008               	return
  7409                           
  7410                           ;TriacRelay_B1.c: 194: Lights->Time = 0;
  7411  05B1  0878               	movf	_Lights,w
  7412  05B2  3E02               	addlw	2
  7413  05B3  0084               	movwf	4
  7414  05B4  1383               	bcf	3,7	;select IRP bank0
  7415  05B5  0180               	clrf	0
  7416                           
  7417                           ;TriacRelay_B1.c: 195: Lights->GO = 0;
  7418  05B6  0878               	movf	_Lights,w
  7419  05B7  0084               	movwf	4
  7420  05B8  1080               	bcf	0,1
  7421                           
  7422                           ;TriacRelay_B1.c: 196: Lights->RelaySet = 0;
  7423  05B9  0878               	movf	_Lights,w
  7424  05BA  0084               	movwf	4
  7425  05BB  1380               	bcf	0,7
  7426                           
  7427                           ;TriacRelay_B1.c: 199: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7428  05BC  0878               	movf	_Lights,w
  7429  05BD  0084               	movwf	4
  7430  05BE  1D00               	btfss	0,2
  7431  05BF  2DCA               	goto	l4712
  7432  05C0  0879               	movf	_LightsControl,w
  7433  05C1  3901               	andlw	1
  7434  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  7435  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  7436  05C4  00DE               	movwf	??_Lights_Control
  7437  05C5  01DF               	clrf	??_Lights_Control+1
  7438  05C6  085E               	movf	??_Lights_Control,w
  7439  05C7  00E0               	movwf	_Lights_Control$4588
  7440  05C8  085F               	movf	??_Lights_Control+1,w
  7441  05C9  2DCF               	goto	L20
  7442  05CA                     l4712:	
  7443  05CA  3001               	movlw	1
  7444  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  7445  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  7446  05CD  00E0               	movwf	_Lights_Control$4588
  7447  05CE  3000               	movlw	0
  7448  05CF                     L20:	
  7449  05CF  00E1               	movwf	_Lights_Control$4588+1
  7450  05D0  0860               	movf	_Lights_Control$4588,w
  7451  05D1  1079               	bcf	_LightsControl,0
  7452  05D2  1D03               	skipz
  7453  05D3  1479               	bsf	_LightsControl,0
  7454                           
  7455                           ;TriacRelay_B1.c: 203: if (lights == 1) {
  7456  05D4  0862               	movf	Lights_Control@lights,w
  7457  05D5  3A01               	xorlw	1
  7458  05D6  1D03               	skipz
  7459  05D7  0008               	return
  7460                           
  7461                           ;TriacRelay_B1.c: 204: RB2 = 0;
  7462  05D8  1106               	bcf	6,2	;volatile
  7463  05D9  0008               	return
  7464  05DA                     __end_of_Lights_Control:	
  7465                           
  7466                           	psect	text44
  7467  0ED8                     __ptext44:	
  7468 ;; *************** function ___awdiv *****************
  7469 ;; Defined at:
  7470 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  divisor         2    0[BANK0 ] int 
  7473 ;;  dividend        2    2[BANK0 ] int 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  quotient        2    6[BANK0 ] int 
  7476 ;;  sign            1    5[BANK0 ] unsigned char 
  7477 ;;  counter         1    4[BANK0 ] unsigned char 
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  2    0[BANK0 ] int 
  7480 ;; Registers used:
  7481 ;;		wreg, status,2, status,0
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7487 ;;      Params:         0       4       0       0
  7488 ;;      Locals:         0       4       0       0
  7489 ;;      Temps:          1       0       0       0
  7490 ;;      Totals:         1       8       0       0
  7491 ;;Total ram usage:        9 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    2
  7494 ;; This function calls:
  7495 ;;		Nothing
  7496 ;; This function is called by:
  7497 ;;		_setTemp_Main
  7498 ;;		_getPIR_AD
  7499 ;;		_Lights_Control
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function ___awdiv
  7505  0ED8                     ___awdiv:	
  7506                           
  7507                           ;incstack = 0
  7508                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7509  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  7510  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  7511  0EDA  01DB               	clrf	___awdiv@sign
  7512  0EDB  1FD7               	btfss	___awdiv@divisor+1,7
  7513  0EDC  2EE4               	goto	l4488
  7514  0EDD  09D6               	comf	___awdiv@divisor,f
  7515  0EDE  09D7               	comf	___awdiv@divisor+1,f
  7516  0EDF  0AD6               	incf	___awdiv@divisor,f
  7517  0EE0  1903               	skipnz
  7518  0EE1  0AD7               	incf	___awdiv@divisor+1,f
  7519  0EE2  01DB               	clrf	___awdiv@sign
  7520  0EE3  0ADB               	incf	___awdiv@sign,f
  7521  0EE4                     l4488:	
  7522  0EE4  1FD9               	btfss	___awdiv@dividend+1,7
  7523  0EE5  2EEF               	goto	l4494
  7524  0EE6  09D8               	comf	___awdiv@dividend,f
  7525  0EE7  09D9               	comf	___awdiv@dividend+1,f
  7526  0EE8  0AD8               	incf	___awdiv@dividend,f
  7527  0EE9  1903               	skipnz
  7528  0EEA  0AD9               	incf	___awdiv@dividend+1,f
  7529  0EEB  3001               	movlw	1
  7530  0EEC  00F4               	movwf	??___awdiv
  7531  0EED  0874               	movf	??___awdiv,w
  7532  0EEE  06DB               	xorwf	___awdiv@sign,f
  7533  0EEF                     l4494:	
  7534  0EEF  01DC               	clrf	___awdiv@quotient
  7535  0EF0  01DD               	clrf	___awdiv@quotient+1
  7536  0EF1  0857               	movf	___awdiv@divisor+1,w
  7537  0EF2  0456               	iorwf	___awdiv@divisor,w
  7538  0EF3  1903               	skipnz
  7539  0EF4  2F26               	goto	l4516
  7540  0EF5  01DA               	clrf	___awdiv@counter
  7541  0EF6  0ADA               	incf	___awdiv@counter,f
  7542  0EF7                     l4504:	
  7543  0EF7  1BD7               	btfsc	___awdiv@divisor+1,7
  7544  0EF8  2F05               	goto	l4506
  7545  0EF9  3001               	movlw	1
  7546  0EFA                     u5235:	
  7547  0EFA  1003               	clrc
  7548  0EFB  0DD6               	rlf	___awdiv@divisor,f
  7549  0EFC  0DD7               	rlf	___awdiv@divisor+1,f
  7550  0EFD  3EFF               	addlw	-1
  7551  0EFE  1D03               	skipz
  7552  0EFF  2EFA               	goto	u5235
  7553  0F00  3001               	movlw	1
  7554  0F01  00F4               	movwf	??___awdiv
  7555  0F02  0874               	movf	??___awdiv,w
  7556  0F03  07DA               	addwf	___awdiv@counter,f
  7557  0F04  2EF7               	goto	l4504
  7558  0F05                     l4506:	
  7559  0F05  3001               	movlw	1
  7560  0F06                     u5255:	
  7561  0F06  1003               	clrc
  7562  0F07  0DDC               	rlf	___awdiv@quotient,f
  7563  0F08  0DDD               	rlf	___awdiv@quotient+1,f
  7564  0F09  3EFF               	addlw	-1
  7565  0F0A  1D03               	skipz
  7566  0F0B  2F06               	goto	u5255
  7567  0F0C  0857               	movf	___awdiv@divisor+1,w
  7568  0F0D  0259               	subwf	___awdiv@dividend+1,w
  7569  0F0E  1D03               	skipz
  7570  0F0F  2F12               	goto	u5265
  7571  0F10  0856               	movf	___awdiv@divisor,w
  7572  0F11  0258               	subwf	___awdiv@dividend,w
  7573  0F12                     u5265:	
  7574  0F12  1C03               	skipc
  7575  0F13  2F1B               	goto	l4512
  7576  0F14  0856               	movf	___awdiv@divisor,w
  7577  0F15  02D8               	subwf	___awdiv@dividend,f
  7578  0F16  0857               	movf	___awdiv@divisor+1,w
  7579  0F17  1C03               	skipc
  7580  0F18  03D9               	decf	___awdiv@dividend+1,f
  7581  0F19  02D9               	subwf	___awdiv@dividend+1,f
  7582  0F1A  145C               	bsf	___awdiv@quotient,0
  7583  0F1B                     l4512:	
  7584  0F1B  3001               	movlw	1
  7585  0F1C                     u5275:	
  7586  0F1C  1003               	clrc
  7587  0F1D  0CD7               	rrf	___awdiv@divisor+1,f
  7588  0F1E  0CD6               	rrf	___awdiv@divisor,f
  7589  0F1F  3EFF               	addlw	-1
  7590  0F20  1D03               	skipz
  7591  0F21  2F1C               	goto	u5275
  7592  0F22  3001               	movlw	1
  7593  0F23  02DA               	subwf	___awdiv@counter,f
  7594  0F24  1D03               	btfss	3,2
  7595  0F25  2F05               	goto	l4506
  7596  0F26                     l4516:	
  7597  0F26  085B               	movf	___awdiv@sign,w
  7598  0F27  1903               	btfsc	3,2
  7599  0F28  2F2E               	goto	l4520
  7600  0F29  09DC               	comf	___awdiv@quotient,f
  7601  0F2A  09DD               	comf	___awdiv@quotient+1,f
  7602  0F2B  0ADC               	incf	___awdiv@quotient,f
  7603  0F2C  1903               	skipnz
  7604  0F2D  0ADD               	incf	___awdiv@quotient+1,f
  7605  0F2E                     l4520:	
  7606  0F2E  085D               	movf	___awdiv@quotient+1,w
  7607  0F2F  01D7               	clrf	?___awdiv+1
  7608  0F30  07D7               	addwf	?___awdiv+1,f
  7609  0F31  085C               	movf	___awdiv@quotient,w
  7610  0F32  01D6               	clrf	?___awdiv
  7611  0F33  07D6               	addwf	?___awdiv,f
  7612  0F34  0008               	return
  7613  0F35                     __end_of___awdiv:	
  7614                           
  7615                           	psect	text45
  7616  0BEF                     __ptext45:	
  7617 ;; *************** function _Lights_Close *****************
  7618 ;; Defined at:
  7619 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7633 ;;      Params:         0       0       0       0
  7634 ;;      Locals:         0       0       0       0
  7635 ;;      Temps:          1       0       0       0
  7636 ;;      Totals:         1       0       0       0
  7637 ;;Total ram usage:        1 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    3
  7640 ;; This function calls:
  7641 ;;		_getMain_All_LightsStatus
  7642 ;; This function is called by:
  7643 ;;		_Lights_Main
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _Lights_Close
  7649  0BEF                     _Lights_Close:	
  7650                           
  7651                           ;TriacRelay_B1.c: 92: if (LightsControl.Detect == 1) {
  7652                           
  7653                           ;incstack = 0
  7654                           ; Regs used in _Lights_Close: [wreg+status,2+status,0+pclath+cstack]
  7655  0BEF  1C79               	btfss	_LightsControl,0
  7656  0BF0  0008               	return
  7657                           
  7658                           ;TriacRelay_B1.c: 93: LightsControl.Detect = 0;
  7659  0BF1  1079               	bcf	_LightsControl,0
  7660                           
  7661                           ;TriacRelay_B1.c: 94: LightsControl.LoadGO = getMain_All_LightsStatus() == 0 ? 0 : 1;
  7662  0BF2  158A  235E         	fcall	_getMain_All_LightsStatus
  7663  0BF4  3800               	iorlw	0
  7664  0BF5  3000               	movlw	0
  7665  0BF6  1D03               	skipz
  7666  0BF7  3001               	movlw	1
  7667  0BF8  00F5               	movwf	??_Lights_Close
  7668  0BF9  0DF5               	rlf	??_Lights_Close,f
  7669  0BFA  0879               	movf	_LightsControl,w
  7670  0BFB  0675               	xorwf	??_Lights_Close,w
  7671  0BFC  39FD               	andlw	-3
  7672  0BFD  0675               	xorwf	??_Lights_Close,w
  7673  0BFE  00F9               	movwf	_LightsControl
  7674  0BFF  0008               	return
  7675  0C00                     __end_of_Lights_Close:	
  7676                           
  7677                           	psect	text46
  7678  0B5E                     __ptext46:	
  7679 ;; *************** function _getMain_All_LightsStatus *****************
  7680 ;; Defined at:
  7681 ;;		line 374 in file "../src/Main_B1.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  status          1    4[COMMON] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      unsigned char 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7695 ;;      Params:         0       0       0       0
  7696 ;;      Locals:         1       0       0       0
  7697 ;;      Temps:          0       0       0       0
  7698 ;;      Totals:         1       0       0       0
  7699 ;;Total ram usage:        1 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    2
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_Load_Main
  7706 ;;		_setTemp_Main
  7707 ;;		_Lights_Main
  7708 ;;		_Lights_Close
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _getMain_All_LightsStatus
  7714  0B5E                     _getMain_All_LightsStatus:	
  7715                           
  7716                           ;Main_B1.c: 375: char status = 0;
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7720  0B5E  01F4               	clrf	getMain_All_LightsStatus@status
  7721                           
  7722                           ;Main_B1.c: 379: status = Lights1.Status == 1 ? 1 : 0;
  7723  0B5F  3000               	movlw	0
  7724  0B60  1283               	bcf	3,5	;RP0=0, select bank0
  7725  0B61  1303               	bcf	3,6	;RP1=0, select bank0
  7726  0B62  1947               	btfsc	_Lights1,2
  7727  0B63  3001               	movlw	1
  7728  0B64  00F4               	movwf	getMain_All_LightsStatus@status
  7729                           
  7730                           ;Main_B1.c: 421: return status;
  7731  0B65  0874               	movf	getMain_All_LightsStatus@status,w
  7732  0B66  0008               	return
  7733  0B67                     __end_of_getMain_All_LightsStatus:	
  7734                           
  7735                           	psect	text47
  7736  0B17                     __ptext47:	
  7737 ;; *************** function _Lights_Initialization *****************
  7738 ;; Defined at:
  7739 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7753 ;;      Params:         0       0       0       0
  7754 ;;      Locals:         0       0       0       0
  7755 ;;      Temps:          0       0       0       0
  7756 ;;      Totals:         0       0       0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    4
  7760 ;; This function calls:
  7761 ;;		_setLights_Initialization
  7762 ;; This function is called by:
  7763 ;;		_main
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function _Lights_Initialization
  7769  0B17                     _Lights_Initialization:	
  7770                           
  7771                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7775  0B17  3001               	movlw	1
  7776  0B18  158A  2330         	fcall	_setLights_Initialization
  7777  0B1A  0008               	return
  7778  0B1B                     __end_of_Lights_Initialization:	
  7779                           
  7780                           	psect	text48
  7781  0B30                     __ptext48:	
  7782 ;; *************** function _setLights_Initialization *****************
  7783 ;; Defined at:
  7784 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  lights          1    wreg     unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  lights          1    0[BANK0 ] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;		None               void
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0, pclath, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7798 ;;      Params:         0       0       0       0
  7799 ;;      Locals:         0       1       0       0
  7800 ;;      Temps:          0       0       0       0
  7801 ;;      Totals:         0       1       0       0
  7802 ;;Total ram usage:        1 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    3
  7805 ;; This function calls:
  7806 ;;		_LightsPointSelect
  7807 ;; This function is called by:
  7808 ;;		_Lights_Initialization
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function _setLights_Initialization
  7814  0B30                     _setLights_Initialization:	
  7815                           
  7816                           ;incstack = 0
  7817                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7818                           ;setLights_Initialization@lights stored from wreg
  7819  0B30  1283               	bcf	3,5	;RP0=0, select bank0
  7820  0B31  1303               	bcf	3,6	;RP1=0, select bank0
  7821  0B32  00D6               	movwf	setLights_Initialization@lights
  7822                           
  7823                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7824  0B33  0856               	movf	setLights_Initialization@lights,w
  7825  0B34  158A  2367         	fcall	_LightsPointSelect
  7826  0B36  0008               	return
  7827  0B37                     __end_of_setLights_Initialization:	
  7828                           
  7829                           	psect	text49
  7830  0B01                     __ptext49:	
  7831 ;; *************** function _LED_Main *****************
  7832 ;; Defined at:
  7833 ;;		line 47 in file "../src/LED_B1.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;		None
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;		None               void
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7847 ;;      Params:         0       0       0       0
  7848 ;;      Locals:         0       0       0       0
  7849 ;;      Temps:          0       0       0       0
  7850 ;;      Totals:         0       0       0       0
  7851 ;;Total ram usage:        0 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    5
  7854 ;; This function calls:
  7855 ;;		_setPIRLED_Main
  7856 ;; This function is called by:
  7857 ;;		_main
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           
  7862                           ;psect for function _LED_Main
  7863  0B01                     _LED_Main:	
  7864                           
  7865                           ;LED_B1.c: 50: setPIRLED_Main();
  7866                           
  7867                           ;incstack = 0
  7868                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7869  0B01  118A  2747         	fcall	_setPIRLED_Main
  7870  0B03  0008               	return
  7871  0B04                     __end_of_LED_Main:	
  7872                           
  7873                           	psect	text50
  7874  0747                     __ptext50:	
  7875 ;; *************** function _setPIRLED_Main *****************
  7876 ;; Defined at:
  7877 ;;		line 253 in file "../src/LED_B1.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  count           1    3[BANK0 ] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;		None               void
  7884 ;; Registers used:
  7885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7891 ;;      Params:         0       0       0       0
  7892 ;;      Locals:         0       1       0       0
  7893 ;;      Temps:          0       1       0       0
  7894 ;;      Totals:         0       2       0       0
  7895 ;;Total ram usage:        2 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    4
  7898 ;; This function calls:
  7899 ;;		_setLED
  7900 ;; This function is called by:
  7901 ;;		_LED_Main
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _setPIRLED_Main
  7907  0747                     _setPIRLED_Main:	
  7908                           
  7909                           ;LED_B1.c: 254: char count;
  7910                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7914  0747  1283               	bcf	3,5	;RP0=0, select bank0
  7915  0748  1303               	bcf	3,6	;RP1=0, select bank0
  7916  0749  1C30               	btfss	_PIRLED,0
  7917  074A  0008               	return
  7918                           
  7919                           ;LED_B1.c: 256: PIRLED.Time++;
  7920  074B  3001               	movlw	1
  7921  074C  07B2               	addwf	_PIRLED+2,f
  7922  074D  1803               	skipnc
  7923  074E  0AB3               	incf	_PIRLED+3,f
  7924  074F  3000               	movlw	0
  7925  0750  07B3               	addwf	_PIRLED+3,f
  7926                           
  7927                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  7928  0751  3000               	movlw	0
  7929  0752  0233               	subwf	_PIRLED+3,w
  7930  0753  3019               	movlw	25
  7931  0754  1903               	skipnz
  7932  0755  0232               	subwf	_PIRLED+2,w
  7933  0756  1C03               	skipc
  7934  0757  0008               	return
  7935                           
  7936                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7937  0758  01B2               	clrf	_PIRLED+2
  7938  0759  01B3               	clrf	_PIRLED+3
  7939                           
  7940                           ;LED_B1.c: 259: setLED(1, 0);
  7941  075A  01D6               	clrf	setLED@command
  7942  075B  3001               	movlw	1
  7943  075C  158A  2735  118A   	fcall	_setLED
  7944                           
  7945                           ;LED_B1.c: 260: setLED(2, 0);
  7946  075F  1283               	bcf	3,5	;RP0=0, select bank0
  7947  0760  1303               	bcf	3,6	;RP1=0, select bank0
  7948  0761  01D6               	clrf	setLED@command
  7949  0762  3002               	movlw	2
  7950  0763  158A  2735  118A   	fcall	_setLED
  7951                           
  7952                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7953  0766  1283               	bcf	3,5	;RP0=0, select bank0
  7954  0767  1303               	bcf	3,6	;RP1=0, select bank0
  7955  0768  1CB0               	btfss	_PIRLED,1
  7956  0769  2F6E               	goto	l4560
  7957                           
  7958                           ;LED_B1.c: 262: count = 4;
  7959  076A  3004               	movlw	4
  7960  076B  00D8               	movwf	??_setPIRLED_Main
  7961  076C  0858               	movf	??_setPIRLED_Main,w
  7962  076D  00D9               	movwf	setPIRLED_Main@count
  7963  076E                     l4560:	
  7964                           
  7965                           ;LED_B1.c: 263: }
  7966                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7967  076E  1D30               	btfss	_PIRLED,2
  7968  076F  2F74               	goto	l4564
  7969                           
  7970                           ;LED_B1.c: 265: count = 6;
  7971  0770  3006               	movlw	6
  7972  0771  00D8               	movwf	??_setPIRLED_Main
  7973  0772  0858               	movf	??_setPIRLED_Main,w
  7974  0773  00D9               	movwf	setPIRLED_Main@count
  7975  0774                     l4564:	
  7976                           
  7977                           ;LED_B1.c: 266: }
  7978                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7979  0774  1DB0               	btfss	_PIRLED,3
  7980  0775  2F7A               	goto	l4568
  7981                           
  7982                           ;LED_B1.c: 268: count = 8;
  7983  0776  3008               	movlw	8
  7984  0777  00D8               	movwf	??_setPIRLED_Main
  7985  0778  0858               	movf	??_setPIRLED_Main,w
  7986  0779  00D9               	movwf	setPIRLED_Main@count
  7987  077A                     l4568:	
  7988                           
  7989                           ;LED_B1.c: 269: }
  7990                           ;LED_B1.c: 270: PIRLED.Count++;
  7991  077A  3001               	movlw	1
  7992  077B  00D8               	movwf	??_setPIRLED_Main
  7993  077C  0858               	movf	??_setPIRLED_Main,w
  7994  077D  07B1               	addwf	_PIRLED+1,f
  7995                           
  7996                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7997  077E  0831               	movf	_PIRLED+1,w
  7998  077F  3A01               	xorlw	1
  7999  0780  1903               	skipnz
  8000  0781  2F86               	goto	l4574
  8001  0782  0831               	movf	_PIRLED+1,w
  8002  0783  3A02               	xorlw	2
  8003  0784  1D03               	skipz
  8004  0785  2F9A               	goto	l4578
  8005  0786                     l4574:	
  8006                           
  8007                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8008  0786  1003               	clrc
  8009  0787  1E30               	btfss	_PIRLED,4
  8010  0788  1403               	setc
  8011  0789  1C03               	btfss	3,0
  8012  078A  2F8F               	goto	u5390
  8013  078B  1283               	bcf	3,5	;RP0=0, select bank0
  8014  078C  1303               	bcf	3,6	;RP1=0, select bank0
  8015  078D  1630               	bsf	_PIRLED,4
  8016  078E  2F92               	goto	l4576
  8017  078F                     u5390:	
  8018  078F  1283               	bcf	3,5	;RP0=0, select bank0
  8019  0790  1303               	bcf	3,6	;RP1=0, select bank0
  8020  0791  1230               	bcf	_PIRLED,4
  8021  0792                     l4576:	
  8022                           
  8023                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  8024  0792  3000               	movlw	0
  8025  0793  1A30               	btfsc	_PIRLED,4
  8026  0794  3001               	movlw	1
  8027  0795  00D6               	movwf	setLED@command
  8028  0796  3002               	movlw	2
  8029  0797  158A  2735         	fcall	_setLED
  8030                           
  8031                           ;LED_B1.c: 274: } else {
  8032  0799  0008               	return
  8033  079A                     l4578:	
  8034                           
  8035                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8036  079A  1003               	clrc
  8037  079B  1283               	bcf	3,5	;RP0=0, select bank0
  8038  079C  1303               	bcf	3,6	;RP1=0, select bank0
  8039  079D  1E30               	btfss	_PIRLED,4
  8040  079E  1403               	setc
  8041  079F  1C03               	btfss	3,0
  8042  07A0  2FA5               	goto	u5410
  8043  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  8044  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  8045  07A3  1630               	bsf	_PIRLED,4
  8046  07A4  2FA8               	goto	l4580
  8047  07A5                     u5410:	
  8048  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  8049  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  8050  07A7  1230               	bcf	_PIRLED,4
  8051  07A8                     l4580:	
  8052                           
  8053                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  8054  07A8  3000               	movlw	0
  8055  07A9  1A30               	btfsc	_PIRLED,4
  8056  07AA  3001               	movlw	1
  8057  07AB  00D6               	movwf	setLED@command
  8058  07AC  3001               	movlw	1
  8059  07AD  158A  2735  118A   	fcall	_setLED
  8060                           
  8061                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  8062  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  8063  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  8064  07B2  0831               	movf	_PIRLED+1,w
  8065  07B3  0659               	xorwf	setPIRLED_Main@count,w
  8066  07B4  1D03               	skipz
  8067  07B5  0008               	return
  8068                           
  8069                           ;LED_B1.c: 278: PIRLED.Count = 0;
  8070  07B6  01B1               	clrf	_PIRLED+1
  8071  07B7  0008               	return
  8072  07B8                     __end_of_setPIRLED_Main:	
  8073                           
  8074                           	psect	text51
  8075  0B3E                     __ptext51:	
  8076 ;; *************** function _LED_Initialization *****************
  8077 ;; Defined at:
  8078 ;;		line 31 in file "../src/LED_B1.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8092 ;;      Params:         0       0       0       0
  8093 ;;      Locals:         0       0       0       0
  8094 ;;      Temps:          0       0       0       0
  8095 ;;      Totals:         0       0       0       0
  8096 ;;Total ram usage:        0 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    5
  8099 ;; This function calls:
  8100 ;;		_setLED_Initialization
  8101 ;; This function is called by:
  8102 ;;		_main
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           
  8107                           ;psect for function _LED_Initialization
  8108  0B3E                     _LED_Initialization:	
  8109                           
  8110                           ;LED_B1.c: 33: setLED_Initialization(1);
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8114  0B3E  3001               	movlw	1
  8115  0B3F  158A  2423  158A   	fcall	_setLED_Initialization
  8116                           
  8117                           ;LED_B1.c: 36: setLED_Initialization(2);
  8118  0B42  3002               	movlw	2
  8119  0B43  158A  2423         	fcall	_setLED_Initialization
  8120  0B45  0008               	return
  8121  0B46                     __end_of_LED_Initialization:	
  8122                           
  8123                           	psect	text52
  8124  0C23                     __ptext52:	
  8125 ;; *************** function _setLED_Initialization *****************
  8126 ;; Defined at:
  8127 ;;		line 69 in file "../src/LED_B1.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  led             1    wreg     unsigned char 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  led             1    2[BANK0 ] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;		None               void
  8134 ;; Registers used:
  8135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8141 ;;      Params:         0       0       0       0
  8142 ;;      Locals:         0       1       0       0
  8143 ;;      Temps:          0       0       0       0
  8144 ;;      Totals:         0       1       0       0
  8145 ;;Total ram usage:        1 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    4
  8148 ;; This function calls:
  8149 ;;		_LedPointSelect
  8150 ;;		_setLED
  8151 ;; This function is called by:
  8152 ;;		_LED_Initialization
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _setLED_Initialization
  8158  0C23                     _setLED_Initialization:	
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8162                           ;setLED_Initialization@led stored from wreg
  8163  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  8164  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  8165  0C25  00D8               	movwf	setLED_Initialization@led
  8166                           
  8167                           ;LED_B1.c: 70: LedPointSelect(led);
  8168  0C26  0858               	movf	setLED_Initialization@led,w
  8169  0C27  158A  2411  158A   	fcall	_LedPointSelect
  8170                           
  8171                           ;LED_B1.c: 71: LED->Enable = 1;
  8172  0C2A  0876               	movf	_LED,w
  8173  0C2B  0084               	movwf	4
  8174  0C2C  1383               	bcf	3,7	;select IRP bank0
  8175  0C2D  1400               	bsf	0,0
  8176                           
  8177                           ;LED_B1.c: 72: setLED(led, 0);
  8178  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  8179  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  8180  0C30  01D6               	clrf	setLED@command
  8181  0C31  0858               	movf	setLED_Initialization@led,w
  8182  0C32  158A  2735         	fcall	_setLED
  8183  0C34  0008               	return
  8184  0C35                     __end_of_setLED_Initialization:	
  8185                           
  8186                           	psect	text53
  8187  0660                     __ptext53:	
  8188 ;; *************** function _Exception_Main *****************
  8189 ;; Defined at:
  8190 ;;		line 506 in file "../src/Main_B1.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  i               2   10[BANK0 ] int 
  8195 ;;  status          1    9[BANK0 ] unsigned char 
  8196 ;;  error           1   12[BANK0 ] unsigned char 
  8197 ;;  count           1    8[BANK0 ] unsigned char 
  8198 ;;  lights          1    7[BANK0 ] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;		None               void
  8201 ;; Registers used:
  8202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8208 ;;      Params:         0       0       0       0
  8209 ;;      Locals:         0       6       0       0
  8210 ;;      Temps:          0       1       0       0
  8211 ;;      Totals:         0       7       0       0
  8212 ;;Total ram usage:        7 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    4
  8215 ;; This function calls:
  8216 ;;		_getAll_Lights_Line
  8217 ;;		_getLights_Status
  8218 ;;		_getMain_All_Error_Status
  8219 ;;		_setLED
  8220 ;;		_setLights_Trigger
  8221 ;; This function is called by:
  8222 ;;		_main
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _Exception_Main
  8228  0660                     _Exception_Main:	
  8229                           
  8230                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8234  0660  3000               	movlw	0
  8235  0661  158A  260A  118A   	fcall	_getMain_All_Error_Status
  8236  0664  1283               	bcf	3,5	;RP0=0, select bank0
  8237  0665  1303               	bcf	3,6	;RP1=0, select bank0
  8238  0666  00DC               	movwf	??_Exception_Main
  8239  0667  085C               	movf	??_Exception_Main,w
  8240  0668  00E2               	movwf	Exception_Main@error
  8241                           
  8242                           ;Main_B1.c: 508: char lights = 0, count = 1;
  8243  0669  01DD               	clrf	Exception_Main@lights
  8244  066A  01DE               	clrf	Exception_Main@count
  8245  066B  0ADE               	incf	Exception_Main@count,f
  8246                           
  8247                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
  8248  066C  1DA3               	btfss	_myMain+3,3
  8249  066D  2E7A               	goto	l5256
  8250                           
  8251                           ;Main_B1.c: 510: if (error == 0) {
  8252  066E  08E2               	movf	Exception_Main@error,f
  8253  066F  1D03               	skipz
  8254  0670  0008               	return
  8255                           
  8256                           ;Main_B1.c: 511: myMain.Error_Run = 0;
  8257  0671  11A3               	bcf	_myMain+3,3
  8258                           
  8259                           ;Main_B1.c: 513: setLED(error, 110);
  8260  0672  306E               	movlw	110
  8261  0673  00DC               	movwf	??_Exception_Main
  8262  0674  085C               	movf	??_Exception_Main,w
  8263  0675  00D6               	movwf	setLED@command
  8264  0676  0862               	movf	Exception_Main@error,w
  8265  0677  158A  2735         	fcall	_setLED
  8266                           
  8267                           ;Main_B1.c: 518: }
  8268                           ;Main_B1.c: 519: } else {
  8269  0679  0008               	return
  8270  067A                     l5256:	
  8271                           
  8272                           ;Main_B1.c: 520: if (error != 0) {
  8273  067A  1283               	bcf	3,5	;RP0=0, select bank0
  8274  067B  1303               	bcf	3,6	;RP1=0, select bank0
  8275  067C  0862               	movf	Exception_Main@error,w
  8276  067D  1903               	btfsc	3,2
  8277  067E  0008               	return
  8278                           
  8279                           ;Main_B1.c: 521: myMain.Error_Run = 1;
  8280  067F  15A3               	bsf	_myMain+3,3
  8281                           
  8282                           ;Main_B1.c: 569: setLED(error, 111);
  8283  0680  306F               	movlw	111
  8284  0681  00DC               	movwf	??_Exception_Main
  8285  0682  085C               	movf	??_Exception_Main,w
  8286  0683  00D6               	movwf	setLED@command
  8287  0684  0862               	movf	Exception_Main@error,w
  8288  0685  158A  2735  118A   	fcall	_setLED
  8289                           
  8290                           ;Main_B1.c: 570: if (error == 3) {
  8291  0688  1283               	bcf	3,5	;RP0=0, select bank0
  8292  0689  1303               	bcf	3,6	;RP1=0, select bank0
  8293  068A  0862               	movf	Exception_Main@error,w
  8294  068B  3A03               	xorlw	3
  8295  068C  1D03               	skipz
  8296  068D  2EA9               	goto	l5268
  8297                           
  8298                           ;Main_B1.c: 571: char status = getAll_Lights_Line();
  8299  068E  158A  23CD  118A   	fcall	_getAll_Lights_Line
  8300  0691  1283               	bcf	3,5	;RP0=0, select bank0
  8301  0692  1303               	bcf	3,6	;RP1=0, select bank0
  8302  0693  00DC               	movwf	??_Exception_Main
  8303  0694  085C               	movf	??_Exception_Main,w
  8304  0695  00DF               	movwf	Exception_Main@status
  8305                           
  8306                           ;Main_B1.c: 572: if (getLights_Status(status) == 1) {
  8307  0696  085F               	movf	Exception_Main@status,w
  8308  0697  158A  23DE  118A   	fcall	_getLights_Status
  8309  069A  3A01               	xorlw	1
  8310  069B  1903               	btfsc	3,2
  8311  069C  2EA0               	goto	l5266
  8312  069D  1283               	bcf	3,5	;RP0=0, select bank0
  8313  069E  1303               	bcf	3,6	;RP1=0, select bank0
  8314  069F  0008               	return
  8315  06A0                     l5266:	
  8316                           
  8317                           ;Main_B1.c: 573: setLights_Trigger(status, 0);
  8318  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  8319  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  8320  06A2  01D6               	clrf	setLights_Trigger@command
  8321  06A3  085F               	movf	Exception_Main@status,w
  8322  06A4  158A  24D8         	fcall	_setLights_Trigger
  8323  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  8324  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  8325  06A8  0008               	return
  8326  06A9                     l5268:	
  8327                           ;Main_B1.c: 574: }
  8328                           ;Main_B1.c: 575: } else {
  8329                           
  8330                           
  8331                           ;Main_B1.c: 577: for (int i = 0; i < count; i++) {
  8332  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  8333  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  8334  06AB  01E0               	clrf	Exception_Main@i
  8335  06AC  01E1               	clrf	Exception_Main@i+1
  8336  06AD                     l5276:	
  8337  06AD  0861               	movf	Exception_Main@i+1,w
  8338  06AE  3A80               	xorlw	128
  8339  06AF  00DC               	movwf	??_Exception_Main
  8340  06B0  3080               	movlw	128
  8341  06B1  025C               	subwf	??_Exception_Main,w
  8342  06B2  1D03               	skipz
  8343  06B3  2EB6               	goto	u6935
  8344  06B4  085E               	movf	Exception_Main@count,w
  8345  06B5  0260               	subwf	Exception_Main@i,w
  8346  06B6                     u6935:	
  8347  06B6  1803               	btfsc	3,0
  8348  06B7  2ED3               	goto	u6930
  8349                           
  8350                           ;Main_B1.c: 578: if (getLights_Status(i + 1) == 1) {
  8351  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  8352  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  8353  06BA  0860               	movf	Exception_Main@i,w
  8354  06BB  3E01               	addlw	1
  8355  06BC  158A  23DE  118A   	fcall	_getLights_Status
  8356  06BF  3A01               	xorlw	1
  8357  06C0  1D03               	skipz
  8358  06C1  2ECA               	goto	l5274
  8359                           
  8360                           ;Main_B1.c: 579: setLights_Trigger(i + 1, 0);
  8361  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  8362  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  8363  06C4  01D6               	clrf	setLights_Trigger@command
  8364  06C5  0860               	movf	Exception_Main@i,w
  8365  06C6  3E01               	addlw	1
  8366  06C7  158A  24D8  118A   	fcall	_setLights_Trigger
  8367  06CA                     l5274:	
  8368  06CA  3001               	movlw	1
  8369  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  8370  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  8371  06CD  07E0               	addwf	Exception_Main@i,f
  8372  06CE  1803               	skipnc
  8373  06CF  0AE1               	incf	Exception_Main@i+1,f
  8374  06D0  3000               	movlw	0
  8375  06D1  07E1               	addwf	Exception_Main@i+1,f
  8376  06D2  2EAD               	goto	l5276
  8377  06D3                     u6930:	
  8378  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  8379  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  8380  06D5  0008               	return
  8381  06D6                     __end_of_Exception_Main:	
  8382                           
  8383                           	psect	text54
  8384  0CD8                     __ptext54:	
  8385 ;; *************** function _setLights_Trigger *****************
  8386 ;; Defined at:
  8387 ;;		line 231 in file "../src/TriacRelay_B1.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  lights          1    wreg     unsigned char 
  8390 ;;  command         1    0[BANK0 ] unsigned char 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  lights          1    2[BANK0 ] unsigned char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;		None               void
  8395 ;; Registers used:
  8396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8402 ;;      Params:         0       1       0       0
  8403 ;;      Locals:         0       1       0       0
  8404 ;;      Temps:          0       1       0       0
  8405 ;;      Totals:         0       3       0       0
  8406 ;;Total ram usage:        3 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    3
  8409 ;; This function calls:
  8410 ;;		_LightsPointSelect
  8411 ;; This function is called by:
  8412 ;;		_Exception_Main
  8413 ;;		_PIR_Main
  8414 ;;		_setMain_Exception
  8415 ;;		_setLights_ErrorClose
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function _setLights_Trigger
  8421  0CD8                     _setLights_Trigger:	
  8422                           
  8423                           ;incstack = 0
  8424                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8425                           ;setLights_Trigger@lights stored from wreg
  8426  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  8427  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  8428  0CDA  00D8               	movwf	setLights_Trigger@lights
  8429                           
  8430                           ;TriacRelay_B1.c: 232: LightsPointSelect(lights);
  8431  0CDB  0858               	movf	setLights_Trigger@lights,w
  8432  0CDC  158A  2367         	fcall	_LightsPointSelect
  8433                           
  8434                           ;TriacRelay_B1.c: 233: Lights->Trigger = 1;
  8435  0CDE  0878               	movf	_Lights,w
  8436  0CDF  0084               	movwf	4
  8437  0CE0  1383               	bcf	3,7	;select IRP bank0
  8438  0CE1  1580               	bsf	0,3
  8439                           
  8440                           ;TriacRelay_B1.c: 234: Lights->Switch = command == 1 ? 1 : 0;
  8441  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  8442  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  8443  0CE4  0856               	movf	setLights_Trigger@command,w
  8444  0CE5  3A01               	xorlw	1
  8445  0CE6  3000               	movlw	0
  8446  0CE7  1903               	skipnz
  8447  0CE8  3001               	movlw	1
  8448  0CE9  00D7               	movwf	??_setLights_Trigger
  8449  0CEA  0878               	movf	_Lights,w
  8450  0CEB  0084               	movwf	4
  8451  0CEC  0ED7               	swapf	??_setLights_Trigger,f
  8452  0CED  0800               	movf	0,w
  8453  0CEE  0657               	xorwf	??_setLights_Trigger,w
  8454  0CEF  39EF               	andlw	-17
  8455  0CF0  0657               	xorwf	??_setLights_Trigger,w
  8456  0CF1  0080               	movwf	0
  8457  0CF2  0008               	return
  8458  0CF3                     __end_of_setLights_Trigger:	
  8459                           
  8460                           	psect	text55
  8461  0F35                     __ptext55:	
  8462 ;; *************** function _setLED *****************
  8463 ;; Defined at:
  8464 ;;		line 76 in file "../src/LED_B1.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  led             1    wreg     unsigned char 
  8467 ;;  command         1    0[BANK0 ] unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  led             1    1[BANK0 ] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;		None               void
  8472 ;; Registers used:
  8473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8479 ;;      Params:         0       1       0       0
  8480 ;;      Locals:         0       1       0       0
  8481 ;;      Temps:          0       0       0       0
  8482 ;;      Totals:         0       2       0       0
  8483 ;;Total ram usage:        2 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    3
  8486 ;; This function calls:
  8487 ;;		_LedPointSelect
  8488 ;; This function is called by:
  8489 ;;		_setLED_Initialization
  8490 ;;		_setPIRLED_Main
  8491 ;;		_Exception_Main
  8492 ;;		_PIR_Main
  8493 ;;		_setMain_Exception
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           
  8498                           ;psect for function _setLED
  8499  0F35                     _setLED:	
  8500                           
  8501                           ;incstack = 0
  8502                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8503                           ;setLED@led stored from wreg
  8504  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8505  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8506  0F37  00D7               	movwf	setLED@led
  8507                           
  8508                           ;LED_B1.c: 77: LedPointSelect(led);
  8509  0F38  0857               	movf	setLED@led,w
  8510  0F39  158A  2411  158A   	fcall	_LedPointSelect
  8511                           
  8512                           ;LED_B1.c: 78: if (command == 0) {
  8513  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  8514  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  8515  0F3E  08D6               	movf	setLED@command,f
  8516  0F3F  1D03               	skipz
  8517  0F40  2F4A               	goto	l4364
  8518                           
  8519                           ;LED_B1.c: 80: if (led == 1) {
  8520  0F41  0857               	movf	setLED@led,w
  8521  0F42  3A01               	xorlw	1
  8522  0F43  1D03               	skipz
  8523  0F44  2F46               	goto	l4360
  8524                           
  8525                           ;LED_B1.c: 84: RA6 = 1;
  8526  0F45  1705               	bsf	5,6	;volatile
  8527  0F46                     l4360:	
  8528                           
  8529                           ;LED_B1.c: 86: }
  8530                           ;LED_B1.c: 89: if (led == 2) {
  8531  0F46  0857               	movf	setLED@led,w
  8532  0F47  3A02               	xorlw	2
  8533  0F48  1903               	btfsc	3,2
  8534                           
  8535                           ;LED_B1.c: 93: RA7 = 1;
  8536  0F49  1785               	bsf	5,7	;volatile
  8537  0F4A                     l4364:	
  8538                           
  8539                           ;LED_B1.c: 95: }
  8540                           ;LED_B1.c: 115: }
  8541                           ;LED_B1.c: 116: if (command == 1) {
  8542  0F4A  0856               	movf	setLED@command,w
  8543  0F4B  3A01               	xorlw	1
  8544  0F4C  1D03               	skipz
  8545  0F4D  2F57               	goto	l4374
  8546                           
  8547                           ;LED_B1.c: 118: if (led == 1) {
  8548  0F4E  0857               	movf	setLED@led,w
  8549  0F4F  3A01               	xorlw	1
  8550  0F50  1D03               	skipz
  8551  0F51  2F53               	goto	l4370
  8552                           
  8553                           ;LED_B1.c: 122: RA6 = 0;
  8554  0F52  1305               	bcf	5,6	;volatile
  8555  0F53                     l4370:	
  8556                           
  8557                           ;LED_B1.c: 124: }
  8558                           ;LED_B1.c: 127: if (led == 2) {
  8559  0F53  0857               	movf	setLED@led,w
  8560  0F54  3A02               	xorlw	2
  8561  0F55  1903               	btfsc	3,2
  8562                           
  8563                           ;LED_B1.c: 131: RA7 = 0;
  8564  0F56  1385               	bcf	5,7	;volatile
  8565  0F57                     l4374:	
  8566                           
  8567                           ;LED_B1.c: 133: }
  8568                           ;LED_B1.c: 153: }
  8569                           ;LED_B1.c: 154: if (command == 10) {
  8570  0F57  0856               	movf	setLED@command,w
  8571  0F58  3A0A               	xorlw	10
  8572  0F59  1D03               	skipz
  8573  0F5A  2F6E               	goto	l4388
  8574                           
  8575                           ;LED_B1.c: 155: LED->GO = 0;
  8576  0F5B  0876               	movf	_LED,w
  8577  0F5C  0084               	movwf	4
  8578  0F5D  1383               	bcf	3,7	;select IRP bank0
  8579  0F5E  1080               	bcf	0,1
  8580                           
  8581                           ;LED_B1.c: 156: LED->Time = 0;
  8582  0F5F  0A76               	incf	_LED,w
  8583  0F60  0084               	movwf	4
  8584  0F61  0180               	clrf	0
  8585  0F62  0A84               	incf	4,f
  8586  0F63  0180               	clrf	0
  8587                           
  8588                           ;LED_B1.c: 158: if (led == 1) {
  8589  0F64  0857               	movf	setLED@led,w
  8590  0F65  3A01               	xorlw	1
  8591  0F66  1D03               	skipz
  8592  0F67  2F6A               	goto	l4384
  8593                           
  8594                           ;LED_B1.c: 162: RA6 = 1;
  8595  0F68  1705               	bsf	5,6	;volatile
  8596                           
  8597                           ;LED_B1.c: 164: }
  8598  0F69  2F6E               	goto	l4388
  8599  0F6A                     l4384:	
  8600                           
  8601                           ;LED_B1.c: 167: else if (led == 2) {
  8602  0F6A  0857               	movf	setLED@led,w
  8603  0F6B  3A02               	xorlw	2
  8604  0F6C  1903               	btfsc	3,2
  8605                           
  8606                           ;LED_B1.c: 171: RA7 = 1;
  8607  0F6D  1785               	bsf	5,7	;volatile
  8608  0F6E                     l4388:	
  8609                           
  8610                           ;LED_B1.c: 173: }
  8611                           ;LED_B1.c: 193: }
  8612                           ;LED_B1.c: 194: if (command == 11) {
  8613  0F6E  0856               	movf	setLED@command,w
  8614  0F6F  3A0B               	xorlw	11
  8615  0F70  1D03               	skipz
  8616  0F71  2F76               	goto	l4392
  8617                           
  8618                           ;LED_B1.c: 195: LED->GO = 1;
  8619  0F72  0876               	movf	_LED,w
  8620  0F73  0084               	movwf	4
  8621  0F74  1383               	bcf	3,7	;select IRP bank0
  8622  0F75  1480               	bsf	0,1
  8623  0F76                     l4392:	
  8624                           
  8625                           ;LED_B1.c: 196: }
  8626                           ;LED_B1.c: 198: if (command == 111) {
  8627  0F76  0856               	movf	setLED@command,w
  8628  0F77  3A6F               	xorlw	111
  8629  0F78  1D03               	skipz
  8630  0F79  2F94               	goto	l4418
  8631                           
  8632                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8633  0F7A  01B1               	clrf	_PIRLED+1
  8634                           
  8635                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8636  0F7B  01B2               	clrf	_PIRLED+2
  8637  0F7C  01B3               	clrf	_PIRLED+3
  8638                           
  8639                           ;LED_B1.c: 201: PIRLED.status = 0;
  8640  0F7D  1230               	bcf	_PIRLED,4
  8641                           
  8642                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8643  0F7E  1430               	bsf	_PIRLED,0
  8644                           
  8645                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8646  0F7F  10B0               	bcf	_PIRLED,1
  8647                           
  8648                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8649  0F80  1130               	bcf	_PIRLED,2
  8650                           
  8651                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8652  0F81  11B0               	bcf	_PIRLED,3
  8653                           
  8654                           ;LED_B1.c: 206: if (led == 1) {
  8655  0F82  0857               	movf	setLED@led,w
  8656  0F83  3A01               	xorlw	1
  8657  0F84  1D03               	skipz
  8658  0F85  2F88               	goto	l4410
  8659                           
  8660                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8661  0F86  14B0               	bsf	_PIRLED,1
  8662                           
  8663                           ;LED_B1.c: 208: } else if (led == 2) {
  8664  0F87  0008               	return
  8665  0F88                     l4410:	
  8666  0F88  0857               	movf	setLED@led,w
  8667  0F89  3A02               	xorlw	2
  8668  0F8A  1D03               	skipz
  8669  0F8B  2F8E               	goto	l4414
  8670                           
  8671                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8672  0F8C  1530               	bsf	_PIRLED,2
  8673                           
  8674                           ;LED_B1.c: 210: } else if (led == 3) {
  8675  0F8D  0008               	return
  8676  0F8E                     l4414:	
  8677  0F8E  0857               	movf	setLED@led,w
  8678  0F8F  3A03               	xorlw	3
  8679  0F90  1D03               	skipz
  8680  0F91  0008               	return
  8681                           
  8682                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8683  0F92  15B0               	bsf	_PIRLED,3
  8684                           
  8685                           ;LED_B1.c: 212: }
  8686                           ;LED_B1.c: 213: } else if (command == 110) {
  8687  0F93  0008               	return
  8688  0F94                     l4418:	
  8689  0F94  0856               	movf	setLED@command,w
  8690  0F95  3A6E               	xorlw	110
  8691  0F96  1D03               	skipz
  8692  0F97  0008               	return
  8693                           
  8694                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8695  0F98  1030               	bcf	_PIRLED,0
  8696  0F99  0008               	return
  8697  0F9A                     __end_of_setLED:	
  8698                           
  8699                           	psect	text56
  8700  0C11                     __ptext56:	
  8701 ;; *************** function _LedPointSelect *****************
  8702 ;; Defined at:
  8703 ;;		line 7 in file "../src/LED_B1.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;  led             1    wreg     unsigned char 
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  led             1    5[COMMON] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;		None               void
  8710 ;; Registers used:
  8711 ;;		wreg
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8717 ;;      Params:         0       0       0       0
  8718 ;;      Locals:         1       0       0       0
  8719 ;;      Temps:          1       0       0       0
  8720 ;;      Totals:         2       0       0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    2
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		_setLED_Initialization
  8728 ;;		_setLED
  8729 ;;		_setLED_Main
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _LedPointSelect
  8735  0C11                     _LedPointSelect:	
  8736                           
  8737                           ;incstack = 0
  8738                           ; Regs used in _LedPointSelect: [wreg]
  8739                           ;LedPointSelect@led stored from wreg
  8740  0C11  00F5               	movwf	LedPointSelect@led
  8741                           
  8742                           ;LED_B1.c: 9: if (led == 1) {
  8743  0C12  0875               	movf	LedPointSelect@led,w
  8744  0C13  3A01               	xorlw	1
  8745  0C14  1D03               	skipz
  8746  0C15  2C1A               	goto	l254
  8747                           
  8748                           ;LED_B1.c: 10: LED = &VarLED1;
  8749  0C16  304E               	movlw	_VarLED1& (0+255)
  8750  0C17  00F4               	movwf	??_LedPointSelect
  8751  0C18  0874               	movf	??_LedPointSelect,w
  8752  0C19  00F6               	movwf	_LED
  8753  0C1A                     l254:	
  8754                           
  8755                           ;LED_B1.c: 11: }
  8756                           ;LED_B1.c: 14: if (led == 2) {
  8757  0C1A  0875               	movf	LedPointSelect@led,w
  8758  0C1B  3A02               	xorlw	2
  8759  0C1C  1D03               	skipz
  8760  0C1D  0008               	return
  8761                           
  8762                           ;LED_B1.c: 15: LED = &VarLED2;
  8763  0C1E  3052               	movlw	_VarLED2& (0+255)
  8764  0C1F  00F4               	movwf	??_LedPointSelect
  8765  0C20  0874               	movf	??_LedPointSelect,w
  8766  0C21  00F6               	movwf	_LED
  8767  0C22  0008               	return
  8768  0C23                     __end_of_LedPointSelect:	
  8769                           
  8770                           	psect	text57
  8771  0E0A                     __ptext57:	
  8772 ;; *************** function _getMain_All_Error_Status *****************
  8773 ;; Defined at:
  8774 ;;		line 425 in file "../src/Main_B1.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;  command         1    wreg     unsigned char 
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;  command         1    4[BANK0 ] unsigned char 
  8779 ;;  status          1    5[BANK0 ] unsigned char 
  8780 ;; Return value:  Size  Location     Type
  8781 ;;                  1    wreg      unsigned char 
  8782 ;; Registers used:
  8783 ;;		wreg, status,2, status,0
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8789 ;;      Params:         0       0       0       0
  8790 ;;      Locals:         0       6       0       0
  8791 ;;      Temps:          1       0       0       0
  8792 ;;      Totals:         1       6       0       0
  8793 ;;Total ram usage:        7 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    2
  8796 ;; This function calls:
  8797 ;;		Nothing
  8798 ;; This function is called by:
  8799 ;;		_Exception_Main
  8800 ;;		_Load_Main
  8801 ;;		_setTemp_Main
  8802 ;;		_PIR_Main
  8803 ;;		_setSYSC_Main
  8804 ;;		_Lights_Main
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _getMain_All_Error_Status
  8810  0E0A                     _getMain_All_Error_Status:	
  8811                           
  8812                           ;incstack = 0
  8813                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8814                           ;getMain_All_Error_Status@command stored from wreg
  8815  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
  8816  0E0B  1303               	bcf	3,6	;RP1=0, select bank0
  8817  0E0C  00DA               	movwf	getMain_All_Error_Status@command
  8818                           
  8819                           ;Main_B1.c: 426: char status = 0;
  8820  0E0D  01DB               	clrf	getMain_All_Error_Status@status
  8821                           
  8822                           ;Main_B1.c: 429: if (status == 0 && command != 1) {
  8823  0E0E  08DB               	movf	getMain_All_Error_Status@status,f
  8824  0E0F  1D03               	skipz
  8825  0E10  2E19               	goto	l3162
  8826  0E11  085A               	movf	getMain_All_Error_Status@command,w
  8827  0E12  3A01               	xorlw	1
  8828  0E13  1903               	skipnz
  8829  0E14  2E19               	goto	l3162
  8830                           
  8831                           ;Main_B1.c: 430: status = SYSC.ERROR == 1 ? 1 : 0;
  8832  0E15  3000               	movlw	0
  8833  0E16  18A6               	btfsc	_SYSC,1
  8834  0E17  3001               	movlw	1
  8835  0E18  00DB               	movwf	getMain_All_Error_Status@status
  8836  0E19                     l3162:	
  8837                           
  8838                           ;Main_B1.c: 431: }
  8839                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
  8840  0E19  08DB               	movf	getMain_All_Error_Status@status,f
  8841  0E1A  1D03               	skipz
  8842  0E1B  2E2D               	goto	l3172
  8843  0E1C  085A               	movf	getMain_All_Error_Status@command,w
  8844  0E1D  3A02               	xorlw	2
  8845  0E1E  1903               	skipnz
  8846  0E1F  2E2D               	goto	l3172
  8847                           
  8848                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
  8849  0E20  18BB               	btfsc	_Temp,1
  8850  0E21  2E25               	goto	l3170
  8851  0E22  01D6               	clrf	_getMain_All_Error_Status$2327
  8852  0E23  01D7               	clrf	_getMain_All_Error_Status$2327+1
  8853  0E24  2E29               	goto	l604
  8854  0E25                     l3170:	
  8855  0E25  3002               	movlw	2
  8856  0E26  00D6               	movwf	_getMain_All_Error_Status$2327
  8857  0E27  3000               	movlw	0
  8858  0E28  00D7               	movwf	_getMain_All_Error_Status$2327+1
  8859  0E29                     l604:	
  8860  0E29  0856               	movf	_getMain_All_Error_Status$2327,w
  8861  0E2A  00F4               	movwf	??_getMain_All_Error_Status
  8862  0E2B  0874               	movf	??_getMain_All_Error_Status,w
  8863  0E2C  00DB               	movwf	getMain_All_Error_Status@status
  8864  0E2D                     l3172:	
  8865                           
  8866                           ;Main_B1.c: 439: }
  8867                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
  8868  0E2D  08DB               	movf	getMain_All_Error_Status@status,f
  8869  0E2E  1D03               	skipz
  8870  0E2F  2E46               	goto	l605
  8871  0E30  085A               	movf	getMain_All_Error_Status@command,w
  8872  0E31  3A03               	xorlw	3
  8873  0E32  1903               	skipnz
  8874  0E33  2E46               	goto	l605
  8875                           
  8876                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
  8877  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  8878  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  8879  0E36  1ACE               	btfsc	_Load^(0+128),5
  8880  0E37  2E3D               	goto	l3180
  8881  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  8882  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  8883  0E3A  01D8               	clrf	_getMain_All_Error_Status$2328
  8884  0E3B  01D9               	clrf	_getMain_All_Error_Status$2328+1
  8885  0E3C  2E42               	goto	l609
  8886  0E3D                     l3180:	
  8887  0E3D  3003               	movlw	3
  8888  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  8889  0E3F  00D8               	movwf	_getMain_All_Error_Status$2328
  8890  0E40  3000               	movlw	0
  8891  0E41  00D9               	movwf	_getMain_All_Error_Status$2328+1
  8892  0E42                     l609:	
  8893  0E42  0858               	movf	_getMain_All_Error_Status$2328,w
  8894  0E43  00F4               	movwf	??_getMain_All_Error_Status
  8895  0E44  0874               	movf	??_getMain_All_Error_Status,w
  8896  0E45  00DB               	movwf	getMain_All_Error_Status@status
  8897  0E46                     l605:	
  8898                           
  8899                           ;Main_B1.c: 446: }
  8900                           ;Main_B1.c: 462: return status;
  8901  0E46  085B               	movf	getMain_All_Error_Status@status,w
  8902  0E47  0008               	return
  8903  0E48                     __end_of_getMain_All_Error_Status:	
  8904                           
  8905                           	psect	text58
  8906  0BDE                     __ptext58:	
  8907 ;; *************** function _getLights_Status *****************
  8908 ;; Defined at:
  8909 ;;		line 224 in file "../src/TriacRelay_B1.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;  lights          1    wreg     unsigned char 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  lights          1    0[BANK0 ] unsigned char 
  8914 ;;  status          1    1[BANK0 ] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      unsigned char 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8924 ;;      Params:         0       0       0       0
  8925 ;;      Locals:         0       2       0       0
  8926 ;;      Temps:          0       0       0       0
  8927 ;;      Totals:         0       2       0       0
  8928 ;;Total ram usage:        2 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    3
  8931 ;; This function calls:
  8932 ;;		_LightsPointSelect
  8933 ;; This function is called by:
  8934 ;;		_Exception_Main
  8935 ;;		_PIR_Main
  8936 ;;		_setMain_Exception
  8937 ;;		_setLights_ErrorClose
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           
  8942                           ;psect for function _getLights_Status
  8943  0BDE                     _getLights_Status:	
  8944                           
  8945                           ;incstack = 0
  8946                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8947                           ;getLights_Status@lights stored from wreg
  8948  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  8949  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  8950  0BE0  00D6               	movwf	getLights_Status@lights
  8951                           
  8952                           ;TriacRelay_B1.c: 225: LightsPointSelect(lights);
  8953  0BE1  0856               	movf	getLights_Status@lights,w
  8954  0BE2  158A  2367         	fcall	_LightsPointSelect
  8955                           
  8956                           ;TriacRelay_B1.c: 226: char status = Lights->Status == 1 ? 1 : 0;
  8957  0BE4  0878               	movf	_Lights,w
  8958  0BE5  0084               	movwf	4
  8959  0BE6  3000               	movlw	0
  8960  0BE7  1383               	bcf	3,7	;select IRP bank0
  8961  0BE8  1900               	btfsc	0,2
  8962  0BE9  3001               	movlw	1
  8963  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  8964  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  8965  0BEC  00D7               	movwf	getLights_Status@status
  8966                           
  8967                           ;TriacRelay_B1.c: 227: return status;
  8968  0BED  0857               	movf	getLights_Status@status,w
  8969  0BEE  0008               	return
  8970  0BEF                     __end_of_getLights_Status:	
  8971                           
  8972                           	psect	text59
  8973  0BCD                     __ptext59:	
  8974 ;; *************** function _getAll_Lights_Line *****************
  8975 ;; Defined at:
  8976 ;;		line 263 in file "../src/TriacRelay_B1.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;		None
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;  line            1    0[BANK0 ] unsigned char 
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  1    wreg      unsigned char 
  8983 ;; Registers used:
  8984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8990 ;;      Params:         0       0       0       0
  8991 ;;      Locals:         0       1       0       0
  8992 ;;      Temps:          0       0       0       0
  8993 ;;      Totals:         0       1       0       0
  8994 ;;Total ram usage:        1 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    3
  8997 ;; This function calls:
  8998 ;;		_LightsPointSelect
  8999 ;; This function is called by:
  9000 ;;		_Exception_Main
  9001 ;;		_setMain_Exception
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _getAll_Lights_Line
  9007  0BCD                     _getAll_Lights_Line:	
  9008                           
  9009                           ;TriacRelay_B1.c: 264: char line = 0;
  9010                           
  9011                           ;incstack = 0
  9012                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9013  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
  9014  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
  9015  0BCF  01D6               	clrf	getAll_Lights_Line@line
  9016                           
  9017                           ;TriacRelay_B1.c: 266: LightsPointSelect(1);
  9018  0BD0  3001               	movlw	1
  9019  0BD1  158A  2367         	fcall	_LightsPointSelect
  9020                           
  9021                           ;TriacRelay_B1.c: 267: line = Lights->Line == 1 ? 1 : 0;
  9022  0BD3  0A78               	incf	_Lights,w
  9023  0BD4  0084               	movwf	4
  9024  0BD5  3000               	movlw	0
  9025  0BD6  1383               	bcf	3,7	;select IRP bank0
  9026  0BD7  1800               	btfsc	0,0
  9027  0BD8  3001               	movlw	1
  9028  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  9029  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  9030  0BDB  00D6               	movwf	getAll_Lights_Line@line
  9031                           
  9032                           ;TriacRelay_B1.c: 277: return line;
  9033  0BDC  0856               	movf	getAll_Lights_Line@line,w
  9034  0BDD  0008               	return
  9035  0BDE                     __end_of_getAll_Lights_Line:	
  9036                           
  9037                           	psect	text60
  9038  0B67                     __ptext60:	
  9039 ;; *************** function _LightsPointSelect *****************
  9040 ;; Defined at:
  9041 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  lights          1    wreg     unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  lights          1    5[COMMON] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9055 ;;      Params:         0       0       0       0
  9056 ;;      Locals:         1       0       0       0
  9057 ;;      Temps:          1       0       0       0
  9058 ;;      Totals:         2       0       0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_setLights_Initialization
  9066 ;;		_setLights_Main
  9067 ;;		_Lights_Control
  9068 ;;		_getLights_Status
  9069 ;;		_setLights_Trigger
  9070 ;;		_getAll_Lights_Line
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _LightsPointSelect
  9076  0B67                     _LightsPointSelect:	
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _LightsPointSelect: [wreg]
  9080                           ;LightsPointSelect@lights stored from wreg
  9081  0B67  00F5               	movwf	LightsPointSelect@lights
  9082                           
  9083                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9084  0B68  0875               	movf	LightsPointSelect@lights,w
  9085  0B69  3A01               	xorlw	1
  9086  0B6A  1D03               	skipz
  9087  0B6B  0008               	return
  9088                           
  9089                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9090  0B6C  3047               	movlw	_Lights1& (0+255)
  9091  0B6D  00F4               	movwf	??_LightsPointSelect
  9092  0B6E  0874               	movf	??_LightsPointSelect,w
  9093  0B6F  00F8               	movwf	_Lights
  9094  0B70  0008               	return
  9095  0B71                     __end_of_LightsPointSelect:	
  9096                           
  9097                           	psect	text61
  9098  0B86                     __ptext61:	
  9099 ;; *************** function _DetectSYSC_Signal *****************
  9100 ;; Defined at:
  9101 ;;		line 50 in file "../src/SYSC_B1.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;		None
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;		None
  9106 ;; Return value:  Size  Location     Type
  9107 ;;		None               void
  9108 ;; Registers used:
  9109 ;;		status,2
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9115 ;;      Params:         0       0       0       0
  9116 ;;      Locals:         0       0       0       0
  9117 ;;      Temps:          0       0       0       0
  9118 ;;      Totals:         0       0       0       0
  9119 ;;Total ram usage:        0 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    2
  9122 ;; This function calls:
  9123 ;;		Nothing
  9124 ;; This function is called by:
  9125 ;;		_main
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           
  9130                           ;psect for function _DetectSYSC_Signal
  9131  0B86                     _DetectSYSC_Signal:	
  9132                           
  9133                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9134                           
  9135                           ;incstack = 0
  9136                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9137  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  9138  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  9139  0B88  19A6               	btfsc	_SYSC,3
  9140  0B89  2B90               	goto	l1108
  9141                           
  9142                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9143  0B8A  1E85               	btfss	5,5	;volatile
  9144  0B8B  0008               	return
  9145                           
  9146                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9147  0B8C  15A6               	bsf	_SYSC,3
  9148                           
  9149                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9150  0B8D  01A7               	clrf	_SYSC+1
  9151  0B8E  01A8               	clrf	_SYSC+2
  9152                           
  9153                           ;SYSC_B1.c: 55: }
  9154                           ;SYSC_B1.c: 56: } else {
  9155  0B8F  0008               	return
  9156  0B90                     l1108:	
  9157                           
  9158                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9159  0B90  1A85               	btfsc	5,5	;volatile
  9160  0B91  0008               	return
  9161                           
  9162                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9163  0B92  11A6               	bcf	_SYSC,3
  9164  0B93  0008               	return
  9165  0B94                     __end_of_DetectSYSC_Signal:	
  9166                           
  9167                           	psect	text62
  9168  0DD6                     __ptext62:	
  9169 ;; *************** function _CDS_Main *****************
  9170 ;; Defined at:
  9171 ;;		line 11 in file "../src/CDS_B1.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;		None               void
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9185 ;;      Params:         0       0       0       0
  9186 ;;      Locals:         0       0       0       0
  9187 ;;      Temps:          0       3       0       0
  9188 ;;      Totals:         0       3       0       0
  9189 ;;Total ram usage:        3 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    2
  9192 ;; This function calls:
  9193 ;;		Nothing
  9194 ;; This function is called by:
  9195 ;;		_main
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _CDS_Main
  9201  0DD6                     _CDS_Main:	
  9202                           
  9203                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9207  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  9208  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  9209  0DD8  1C2B               	btfss	__CDS,0
  9210  0DD9  0008               	return
  9211                           
  9212                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9213  0DDA  18AB               	btfsc	__CDS,1
  9214  0DDB  2DE9               	goto	l117
  9215                           
  9216                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9217  0DDC  19AB               	btfsc	__CDS,3
  9218  0DDD  0008               	return
  9219                           
  9220                           ;CDS_B1.c: 16: _CDS.Time++;
  9221  0DDE  3001               	movlw	1
  9222  0DDF  00D6               	movwf	??_CDS_Main
  9223  0DE0  0856               	movf	??_CDS_Main,w
  9224  0DE1  07AC               	addwf	__CDS+1,f
  9225                           
  9226                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9227  0DE2  3005               	movlw	5
  9228  0DE3  022C               	subwf	__CDS+1,w
  9229  0DE4  1C03               	skipc
  9230  0DE5  0008               	return
  9231                           
  9232                           ;CDS_B1.c: 18: {
  9233                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9234  0DE6  01AC               	clrf	__CDS+1
  9235                           
  9236                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9237  0DE7  15AB               	bsf	__CDS,3
  9238                           
  9239                           ;CDS_B1.c: 21: }
  9240                           ;CDS_B1.c: 22: }
  9241                           ;CDS_B1.c: 23: } else {
  9242  0DE8  0008               	return
  9243  0DE9                     l117:	
  9244                           
  9245                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9246  0DE9  1CAB               	btfss	__CDS,1
  9247  0DEA  0008               	return
  9248                           
  9249                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9250  0DEB  10AB               	bcf	__CDS,1
  9251                           
  9252                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9253  0DEC  1A2B               	btfsc	__CDS,4
  9254  0DED  2DF4               	goto	l4774
  9255                           
  9256                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9257  0DEE  082D               	movf	__CDS+2,w
  9258  0DEF  022E               	subwf	__CDS+3,w
  9259  0DF0  1C03               	skipc
  9260  0DF1  0008               	return
  9261                           
  9262                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9263  0DF2  162B               	bsf	__CDS,4
  9264                           
  9265                           ;CDS_B1.c: 29: }
  9266                           ;CDS_B1.c: 30: } else {
  9267  0DF3  0008               	return
  9268  0DF4                     l4774:	
  9269                           
  9270                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9271  0DF4  082D               	movf	__CDS+2,w
  9272  0DF5  3E9C               	addlw	156
  9273  0DF6  00D6               	movwf	??_CDS_Main
  9274  0DF7  30FF               	movlw	255
  9275  0DF8  1803               	skipnc
  9276  0DF9  3000               	movlw	0
  9277  0DFA  00D7               	movwf	??_CDS_Main+1
  9278  0DFB  0857               	movf	??_CDS_Main+1,w
  9279  0DFC  3A80               	xorlw	128
  9280  0DFD  00D8               	movwf	??_CDS_Main+2
  9281  0DFE  3080               	movlw	128
  9282  0DFF  0258               	subwf	??_CDS_Main+2,w
  9283  0E00  1D03               	skipz
  9284  0E01  2E04               	goto	u5885
  9285  0E02  082E               	movf	__CDS+3,w
  9286  0E03  0256               	subwf	??_CDS_Main,w
  9287  0E04                     u5885:	
  9288  0E04  1C03               	skipc
  9289  0E05  0008               	return
  9290                           
  9291                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9292  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  9293  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  9294  0E08  122B               	bcf	__CDS,4
  9295  0E09  0008               	return
  9296  0E0A                     __end_of_CDS_Main:	
  9297                           
  9298                           	psect	text63
  9299  0B13                     __ptext63:	
  9300 ;; *************** function _CDS_Initialization *****************
  9301 ;; Defined at:
  9302 ;;		line 7 in file "../src/CDS_B1.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		None
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9316 ;;      Params:         0       0       0       0
  9317 ;;      Locals:         0       0       0       0
  9318 ;;      Temps:          0       0       0       0
  9319 ;;      Totals:         0       0       0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    2
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_main
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function _CDS_Initialization
  9332  0B13                     _CDS_Initialization:	
  9333                           
  9334                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _CDS_Initialization: []
  9338  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  9339  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  9340  0B15  142B               	bsf	__CDS,0
  9341  0B16  0008               	return
  9342  0B17                     __end_of_CDS_Initialization:	
  9343                           
  9344                           	psect	text64
  9345  0C8C                     __ptext64:	
  9346 ;; *************** function _ISR *****************
  9347 ;; Defined at:
  9348 ;;		line 116 in file "../src/MCU_B1.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;		None
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;		None
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, pclath, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9362 ;;      Params:         0       0       0       0
  9363 ;;      Locals:         0       0       0       0
  9364 ;;      Temps:          4       0       0       0
  9365 ;;      Totals:         4       0       0       0
  9366 ;;Total ram usage:        4 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    1
  9369 ;; This function calls:
  9370 ;;		_TMR1_ISR
  9371 ;; This function is called by:
  9372 ;;		Interrupt level 1
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           
  9377                           ;psect for function _ISR
  9378  0C8C                     _ISR:	
  9379                           
  9380                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9381  0C8C  1683               	bsf	3,5	;RP0=1, select bank1
  9382  0C8D  1303               	bcf	3,6	;RP1=0, select bank1
  9383  0C8E  1C0C               	btfss	12,0	;volatile
  9384  0C8F  2C97               	goto	i1l426
  9385  0C90  1283               	bcf	3,5	;RP0=0, select bank0
  9386  0C91  1303               	bcf	3,6	;RP1=0, select bank0
  9387  0C92  1C0C               	btfss	12,0	;volatile
  9388  0C93  2C97               	goto	i1l426
  9389                           
  9390                           ;MCU_B1.c: 126: TMR1_ISR();
  9391  0C94  158A  2449  158A   	fcall	_TMR1_ISR
  9392  0C97                     i1l426:	
  9393                           ;MCU_B1.c: 127: }
  9394                           ;MCU_B1.c: 148: return;
  9395                           
  9396  0C97  0873               	movf	??_ISR+3,w
  9397  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  9398  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  9399  0C9A  00FF               	movwf	127
  9400  0C9B  0872               	movf	??_ISR+2,w
  9401  0C9C  008A               	movwf	10
  9402  0C9D  0871               	movf	??_ISR+1,w
  9403  0C9E  0084               	movwf	4
  9404  0C9F  0E70               	swapf	??_ISR^(0+-128),w
  9405  0CA0  0083               	movwf	3
  9406  0CA1  0EFE               	swapf	126,f
  9407  0CA2  0E7E               	swapf	126,w
  9408  0CA3  0009               	retfie
  9409  0CA4                     __end_of_ISR:	
  9410                           
  9411                           	psect	intentry
  9412  0004                     __pintentry:	
  9413                           ;incstack = 0
  9414                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9415                           
  9416  0004                     interrupt_function:	
  9417  007E                     saved_w	set	btemp
  9418  0004  00FE               	movwf	btemp
  9419  0005  0E03               	swapf	3,w
  9420  0006  00F0               	movwf	??_ISR
  9421  0007  0804               	movf	4,w
  9422  0008  00F1               	movwf	??_ISR+1
  9423  0009  080A               	movf	10,w
  9424  000A  00F2               	movwf	??_ISR+2
  9425  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9426  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9427  000D  087F               	movf	btemp+1,w
  9428  000E  00F3               	movwf	??_ISR+3
  9429  000F  158A  2C8C         	ljmp	_ISR
  9430                           
  9431                           	psect	text65
  9432  0C49                     __ptext65:	
  9433 ;; *************** function _TMR1_ISR *****************
  9434 ;; Defined at:
  9435 ;;		line 236 in file "../src/MCU_B1.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, status,2
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9449 ;;      Params:         0       0       0       0
  9450 ;;      Locals:         0       0       0       0
  9451 ;;      Temps:          0       0       0       0
  9452 ;;      Totals:         0       0       0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_ISR
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function _TMR1_ISR
  9464  0C49                     _TMR1_ISR:	
  9465                           
  9466                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9470  0C49  30FA               	movlw	250
  9471  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  9472  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  9473  0C4C  008F               	movwf	15	;volatile
  9474                           
  9475                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  9476  0C4D  3038               	movlw	56
  9477  0C4E  008E               	movwf	14	;volatile
  9478                           
  9479                           ;MCU_B1.c: 240: TMR1IF = 0;
  9480  0C4F  100C               	bcf	12,0	;volatile
  9481                           
  9482                           ;MCU_B1.c: 259: Timer1.Count++;
  9483  0C50  3001               	movlw	1
  9484  0C51  07B5               	addwf	_Timer1+1,f
  9485  0C52  1803               	skipnc
  9486  0C53  0AB6               	incf	_Timer1+2,f
  9487  0C54  3000               	movlw	0
  9488  0C55  07B6               	addwf	_Timer1+2,f
  9489                           
  9490                           ;MCU_B1.c: 260: if (Timer1.Count == (int)(20*10)) {
  9491  0C56  30C8               	movlw	200
  9492  0C57  0635               	xorwf	_Timer1+1,w
  9493  0C58  0436               	iorwf	_Timer1+2,w
  9494  0C59  1D03               	skipz
  9495  0C5A  0008               	return
  9496                           
  9497                           ;MCU_B1.c: 261: Timer1.Count = 0;
  9498  0C5B  01B5               	clrf	_Timer1+1
  9499  0C5C  01B6               	clrf	_Timer1+2
  9500                           
  9501                           ;MCU_B1.c: 262: Timer1.Timeout = 1;
  9502  0C5D  1434               	bsf	_Timer1,0
  9503  0C5E  0008               	return
  9504  0C5F                     __end_of_TMR1_ISR:	
  9505  007E                     btemp	set	126	;btemp
  9506  007E                     wtemp	set	126
  9507  007E                     wtemp0	set	126
  9508  0080                     wtemp1	set	128
  9509  0082                     wtemp2	set	130
  9510  0084                     wtemp3	set	132
  9511  0086                     wtemp4	set	134
  9512  0088                     wtemp5	set	136
  9513  007F                     wtemp6	set	127
  9514  007E                     ttemp	set	126
  9515  007E                     ttemp0	set	126
  9516  0081                     ttemp1	set	129
  9517  0084                     ttemp2	set	132
  9518  0087                     ttemp3	set	135
  9519  007F                     ttemp4	set	127
  9520  007E                     ltemp	set	126
  9521  007E                     ltemp0	set	126
  9522  0082                     ltemp1	set	130
  9523  0086                     ltemp2	set	134
  9524  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     20      74
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Close
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_All_LightsStatus
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22062
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     555
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2785
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     923
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1294
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1294
                                              5 COMMON     1     1      0
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3499
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1770
                                              7 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    2082
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     572
                                              2 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     309
                                              5 COMMON     1     0      1
                                              0 BANK0      2     2      0
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0    1222
                                              8 BANK0      5     5      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0      24
                                              5 COMMON     1     1      0
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2138
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2138
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2222
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2222
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3767
                                              6 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2098
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_All_LightsStatus
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A3       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4A       5       92.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A3      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 07 17:04:20 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 005B                                  fsr 0004  
               ___wmul@multiplicand 0058                                 l117 0DE9  
                               l254 0C1A                                 l604 0E29  
                               l605 0E46                                 l710 024F  
                               l609 0E42                                 l722 038E  
                               l706 0401                                 l716 03DA  
                               l708 0259                                 l717 03D8  
                               l709 0255                                 l901 005B  
                               l904 007F                                 l824 065C  
                               l906 0092                                 l829 0659  
                               l896 0204                                 l897 0079  
                               l898 0048                                 _GIE 005F  
                               _RB2 0032                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RA6 002E                                 _RA7 002F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0C8C  
                               _PSA 040B                                 _WDT 0037  
                               _Cmd 0039              getAll_Lights_Line@line 0056  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0B3E           __end_of_LightsPointSelect 0B71  
                  _getLights_Status 0BDE             __size_of_Lights_Control 0099  
                              ?_ISR 0070                          Load_Main@i 0061  
                              l1108 0B90                                l1260 0D24  
                              l1375 0D3C                                l3170 0E25  
                              l3162 0E19                                l3180 0E3D  
                              l3172 0E2D                                l5012 034E  
                              l5022 0380                                l5110 0069  
                              l5200 01A5                                l4410 0F88  
                              l5034 03B2                                l5018 035A  
                              l4414 0F8E                                l5310 0FB5  
                              l4360 0F46                                l4520 0F2E  
                              l4512 0F1B                                l4504 0EF7  
                              l5072 03EE                                l5216 01D4  
                              l5160 00CC                                l4418 0F94  
                              l4370 0F53                                l4506 0F05  
                              l5090 0D25                                l3490 07CF  
                              l4530 0D03                                l5322 0FD8  
                              l4364 0F4A                                l4516 0F26  
                              l4700 0590                                l5164 00D8  
                              l5148 00B5                                l4374 0F57  
                              l4446 0C84                                l5166 00D9  
                              l4622 05F8                                l4534 0D09  
                              l4392 0F76                                l4384 0F6A  
                              l5256 067A                                l4560 076E  
                              l4712 05CA                                l5184 012D  
                              l5176 0119                                l3496 07E8  
                              l4528 0D00                                l5274 06CA  
                              l5266 06A0                                l4466 0EAF  
                              l5194 0164                                l3826 0CCE  
                              l4388 0F6E                                l5276 06AD  
                              l5268 06A9                                l4580 07A8  
                              l4564 0774                                l4476 0ED0  
                              l4740 0E60                                l4820 071D  
                              l4574 0786                                l4494 0EEF  
                              l4750 0E81                                l4718 0D32  
                              l5198 0196                                l4654 0649  
                              l4638 062E                                l4576 0792  
                              l4568 077A                                l4488 0EE4  
                              l4664 0658                                l4816 0714  
                              l4808 06F8                                l4920 0505  
                              l4904 04BB                                l4578 079A  
                              l4682 0DCF                                l4746 0E76  
                              l4738 0E52                                l4914 04E9  
                              l4850 0D73                                l4836 0741  
                              l4774 0DF4                                l4934 053F  
                              l4928 0531                                l4880 0478  
                              l4872 0468                                l4980 027F  
                              l4964 0258                                l4948 0239  
                              l4884 0480                                l4876 0470  
                              l4888 0488                                l4986 02BB  
                              l4898 049F               _myMain_Initialization 0B00  
                      __CFG_WDTE$ON 0000                                u3265 07F4  
                              u5125 0C43                                u5410 07A5  
                              u5235 0EFA                                _PEIE 005E  
                              u5255 0F06                                u5265 0F12  
                              u6305 0310                                u5275 0F1C  
                              u5390 078F                                u5650 058C  
                              u5635 0578                                u5715 0D3D  
                              u5725 0D44                                u6285 027D  
                              u6295 02B9                                u6385 03A3  
                              u5675 05AF                                u5755 0E55  
                              u6715 00F7                                u6725 010F  
                              u5775 0E61                                u5785 0E6D  
                              u6745 014B                                u6930 06D3  
                              u5795 0E77                                u6835 01F1  
                              u5885 0E04                                u6765 0188  
                              u6935 06B6                                u6785 01B5  
                              __CDS 002B             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0026  
                              __PIR 00A0                                _Load 00CE  
                              _Temp 003B                                _main 0F9A  
                              btemp 007E                     __end_of_WDT_Set 0BBE  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0E0A        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0CD8  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0B04                  ?_setLights_Trigger 0056  
                  ??_setPIRLED_Main 0058                               ?_main 0065  
                   __end_of___awdiv 0F35                               _ADRES 001E  
                   ___awdiv@divisor 0056                               _T1CON 0010  
                   __end_of___lwdiv 0E88                       ?_Lights_Close 0070  
                             i1l426 0C97                     ___awdiv@counter 005A  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0C49                               _Light 0077  
               ??_setLights_Trigger 0057                    __end_of_PIR_Main 0222  
                  __end_of_TMR1_ISR 0C5F                    __end_of_TMR1_Set 0BB0  
                             _getAD 0CF3      __end_of_setSYSC_Initialization 0B1F  
    getLights_Allow_Condition@allow 0056             __end_of_getLight_LoadGO 0B2A  
                  __end_of_WDT_Main 0C11                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0B7B  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0C35                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0063                   getPIR_AD@channel2 005E  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 005E  
                    _setLights_Main 0DA6                      _setLights_Line 0B94  
                   __initialization 0013                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0CF3                        __end_of_main 1000  
                  __end_of_Fosc_Set 0B24      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0660                           ??_ADC_Set 0074  
                            ??_main 0069                      ??_Lights_Close 0075  
               __end_of_Lights_Main 0D30          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0B5E                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0058  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0E0A  
                            _FVRCON 009D              getLights_Status@lights 0056  
                            _PIRLED 0030                              _OSCCON 0090  
                __size_of_Load_Main 01E7                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0CA4  
            getLights_Status@status 0057              __end_of_setLights_Main 0DD6  
            __end_of_setLights_Line 0BA2        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0BCD                              _Lights 0078  
                            _Timer1 0034         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 06D6  
              Load_Main@Load_Status 0060                Exception_Main@lights 005D  
                            ___wmul 0D30                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 005F  
                            _setLED 0F35                              _myMain 0020  
                  ___awdiv@quotient 005C                  __size_of_Temp_Main 0003  
       __end_of_Load_Initialization 0B07     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0B0D  
                    _Lights_Control 0541             __size_of_LedPointSelect 0012  
                         ?_CDS_Main 0070                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                     ?_setSYSC_Main 0070          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 002A  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0BEF  
                     __end_of_getAD 0D0F                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B3E                  __size_of_getPIR_AD 0138  
                       _Lights_Main 0D0F            _setLights_Initialization 0B30  
              _getMain_Lights_Count 0B71                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0409          __end_of_set_TimeoutCleared 0800  
               ?_LED_Initialization 0070              __end_of_Lights_Control 05DA  
                           ??_getAD 0075                 _Temp_Initialization 0B0D  
                        ??_CDS_Main 0056                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0011                   __end_of_Temp_Main 0B13  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
              __end_of_Lights_Close 0C00                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F9A          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                             ?___wmul 0056  
                        ??_PIR_Main 005C                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 0050  
                        _getLoad_AD 06D6                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0B46  
                           ?_setLED 0056             setLights_Trigger@lights 0058  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0B37  
                        _getTemp_AD 0D55                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0DA6                             _WDT_Set 0BB0  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0541  
           ??_setLoad_AH_AL_Restore 0074      _getLights_Allow_Condition$4610 0057  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0059  
                        getCDS_AD@j 005A                             _Lights1 0047  
                           _VarLED1 004E                             _VarLED2 0052  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0ED8                     __size_of___wmul 0025  
                           ___lwdiv 0E48          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 0064                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0CBE  
                           __ptext2 0B00                             __ptext3 0D55  
                           __ptext4 0409                             __ptext5 06D6  
                           __ptext6 0D7C                             __ptext7 0CF3  
                           __ptext8 07FA                             __ptext9 0C35  
                        getPIR_AD@i 0064                          getPIR_AD@j 0062  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0B07             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C11  
                           clrloop0 0B57                   __end_of_setLights 0ED8  
              end_of_initialization 0023                       _getCDS_Status 0B4E  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0C23  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0B1B                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0058                  _Mcu_Initialization 0BBE  
              __end_of_my_MainTimer 0CD8                __end_of_setSYSC_Main 07FA  
            __end_of_LedPointSelect 0C23                 setPIRLED_Main@count 0059  
               ?_Mcu_Initialization 0070               __size_of_Lights_Close 0011  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0058  
                         _SYSC_Main 0B0A     getMain_All_Error_Status@command 005A  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 005C  
                    __end_of_IO_Set 0CBE          __end_of_CDS_Initialization 0B17  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D55                   __size_of_PIR_Main 01FC  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0F9A  
          ??_setSYSC_Initialization 0074                        _Lights_Close 0BEF  
                 __size_of_WDT_Main 0011                 _Lights_Control$4588 0060  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0222  
                       __end_of_ISR 0CA4          __end_of_PIR_Initialization 0B86  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0B30  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 0660                 __size_of_getLoad_AD 0071  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 07FA                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                 __size_of_getTemp_AD 0027  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0B10  
                   setLights@lights 0057                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 005E                     setLights@status 0075  
               Exception_Main@error 0062                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0B67                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 005E  
  __end_of_getMain_All_Error_Status 0E48                         __pbssCOMMON 0076  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0056                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 0BDE                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                       PIR_Main@error 0061  
                         _getCDS_AD 0D7C      __size_of_setLoad_AH_AL_Restore 0016  
     __end_of_setLoad_AH_AL_Restore 0C75                           _getPIR_AD 0409  
       __size_of_LED_Initialization 0008                     Exception_Main@i 0060  
                        ?_Temp_Main 0070                    ___lwdiv@dividend 0058  
                    Load_Main@error 005F              _setTemp_Initialization 0AFF  
                     _PIR_Main$3108 0062                            ?___awdiv 0056  
             __size_of_my_MainTimer 001A                            ?___lwdiv 0056  
             __size_of_setSYSC_Main 0042            setLights_Trigger@command 0056  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0C75  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0B01  
                    __size_of_getAD 001C                    ___lwdiv@quotient 005B  
                    _setPIRLED_Main 0747                            _CDS_Main 0DD6  
                       ??_SYSC_Main 0075         __end_of_Temp_Initialization 0B10  
                 interrupt_function 0004                          ?_getCDS_AD 0056  
                    ___wmul@product 0074                            _LED_Main 0B01  
                         _setLights 0E88                           clear_ram0 0B56  
  __end_of_setLights_Initialization 0B37                        _my_MainTimer 0CBE  
                        ?_getPIR_AD 005E                        _setSYSC_Main 07B8  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
                          _PIR_Main 0026                        ??_getLoad_AD 0056  
                          _TMR1_ISR 0C49                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0B2A                            _TMR1_Set 0BA2  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 0056  
                          _WDT_Main 0C00                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0056                __size_of_Lights_Main 0021  
             __size_of_setTemp_Main 0086                         ??_Load_Main 005D  
            __end_of_setPIRLED_Main 07B8      getMain_All_Error_Status@status 005B  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0009  
         ?_getMain_All_LightsStatus 0070                            _Fosc_Set 0B1F  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0747  
                __end_of_getLoad_OK 0B4E   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                          ?_setLights 0075  
                __end_of_getTemp_AD 0D7C              _setSYSC_Initialization 0B1B  
                 getLoad_AD@channel 0058                   _DetectSYSC_Signal 0B86  
                          _SwDetect 003A                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2327 0056       _getMain_All_Error_Status$2328 0058  
               _Load_Initialization 0B04                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0057               ?_getLight_Load_Status 0070  
                      _setTemp_Main 05DA                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000A  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 0B13  
             _Lights_Initialization 0B17                   getTemp_AD@channel 0058  
                   ?_setPIRLED_Main 0070                     ___lwdiv@divisor 0056  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 005A                            __ptext10 0C00  
                          __ptext11 0002                            __ptext20 0026  
                          __ptext12 0B10                            __ptext21 0B4E  
                          __ptext13 05DA                            __ptext30 0B71  
                          __ptext22 0B7B                            __ptext14 0B0D  
                          __ptext31 0B2A                            __ptext23 0BBE  
                          __ptext15 0AFF                            __ptext40 0B94  
                          __ptext32 0B24                            __ptext24 0BB0  
                          __ptext16 0B0A                            __ptext41 0C75  
                          __ptext33 0D30                            __ptext25 0BA2  
                          __ptext17 07B8                            __ptext50 0747  
                          __ptext42 0B46                            __ptext34 0E48  
                          __ptext26 0CA4                            __ptext18 0B07  
                          __ptext51 0B3E                            __ptext43 0541  
                          __ptext35 0B04                            __ptext27 0B1F  
                          __ptext19 0B1B                            __ptext60 0B67  
                          __ptext52 0C23                            __ptext44 0ED8  
                          __ptext36 0C5F                            __ptext28 0B37  
                          __ptext61 0B86                            __ptext53 0660  
                          __ptext45 0BEF                            __ptext37 0D0F  
                          __ptext29 0222                            __ptext62 0DD6  
                          __ptext54 0CD8                            __ptext46 0B5E  
                          __ptext38 0DA6                            __ptext63 0B13  
                          __ptext55 0F35                            __ptext47 0B17  
                          __ptext39 0E88                            __ptext64 0C8C  
                          __ptext56 0C11                            __ptext48 0B30  
                          __ptext65 0C49                            __ptext57 0E0A  
                          __ptext49 0B01                            __ptext58 0BDE  
                          __ptext59 0BCD           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0B0A             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0057                       setLED@command 0056  
         __end_of_DetectSYSC_Signal 0B94                       __size_of_main 0066  
                       ??_getPIR_AD 005F                  _PIR_Initialization 0B7B  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 0065                            main@argv 0067  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 0062  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017                         ??_setLights 0056  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0BCD              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005B                         getLoad_AD@j 005A  
                       getLoad_AD@k 0059             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 0076               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 0056         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0B67                ??_getAll_Lights_Line 0076  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0C35          __end_of_LED_Initialization 0B46  
             __end_of_getCDS_Status 0B56      __end_of_setTemp_Initialization 0B00  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0B24  
                 getCDS_AD@channel1 005B                   getCDS_AD@channel2 0056  
 __end_of_getLights_Allow_Condition 0C8C                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0C5F  
