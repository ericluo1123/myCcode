

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Jan 09 11:56:16 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    78                           	dabs	1,0x7E,2
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0096                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009F                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0186                     	;# 
   147  018C                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0096                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009F                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0186                     	;# 
   216  018C                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0096                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009F                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0186                     	;# 
   285  018C                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0093                     	;# 
   334  0094                     	;# 
   335  0095                     	;# 
   336  0095                     	;# 
   337  0096                     	;# 
   338  0096                     	;# 
   339  0098                     	;# 
   340  0099                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009F                     	;# 
   344  0108                     	;# 
   345  0109                     	;# 
   346  010C                     	;# 
   347  010C                     	;# 
   348  010D                     	;# 
   349  010D                     	;# 
   350  010E                     	;# 
   351  010F                     	;# 
   352  0185                     	;# 
   353  0186                     	;# 
   354  018C                     	;# 
   355  0000                     	;# 
   356  0001                     	;# 
   357  0002                     	;# 
   358  0003                     	;# 
   359  0004                     	;# 
   360  0005                     	;# 
   361  0006                     	;# 
   362  0007                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  000E                     	;# 
   370  000F                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001D                     	;# 
   387  001E                     	;# 
   388  001F                     	;# 
   389  0081                     	;# 
   390  0085                     	;# 
   391  0086                     	;# 
   392  0087                     	;# 
   393  0089                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  008F                     	;# 
   398  0090                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0096                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009F                     	;# 
   413  0108                     	;# 
   414  0109                     	;# 
   415  010C                     	;# 
   416  010C                     	;# 
   417  010D                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  010F                     	;# 
   421  0185                     	;# 
   422  0186                     	;# 
   423  018C                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  000D                     	;# 
   437  000E                     	;# 
   438  000E                     	;# 
   439  000F                     	;# 
   440  0010                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0013                     	;# 
   444  0014                     	;# 
   445  0015                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001D                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  0081                     	;# 
   459  0085                     	;# 
   460  0086                     	;# 
   461  0087                     	;# 
   462  0089                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  008F                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0093                     	;# 
   472  0094                     	;# 
   473  0095                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0096                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009F                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010D                     	;# 
   488  010E                     	;# 
   489  010F                     	;# 
   490  0185                     	;# 
   491  0186                     	;# 
   492  018C                     	;# 
   493  0000                     	;# 
   494  0001                     	;# 
   495  0002                     	;# 
   496  0003                     	;# 
   497  0004                     	;# 
   498  0005                     	;# 
   499  0006                     	;# 
   500  0007                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  000E                     	;# 
   508  000F                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0013                     	;# 
   513  0014                     	;# 
   514  0015                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001D                     	;# 
   525  001E                     	;# 
   526  001F                     	;# 
   527  0081                     	;# 
   528  0085                     	;# 
   529  0086                     	;# 
   530  0087                     	;# 
   531  0089                     	;# 
   532  008C                     	;# 
   533  008D                     	;# 
   534  008E                     	;# 
   535  008F                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0093                     	;# 
   540  0093                     	;# 
   541  0094                     	;# 
   542  0095                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0096                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009F                     	;# 
   551  0108                     	;# 
   552  0109                     	;# 
   553  010C                     	;# 
   554  010C                     	;# 
   555  010D                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  010F                     	;# 
   559  0185                     	;# 
   560  0186                     	;# 
   561  018C                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0009                     	;# 
   571  000A                     	;# 
   572  000B                     	;# 
   573  000C                     	;# 
   574  000D                     	;# 
   575  000E                     	;# 
   576  000E                     	;# 
   577  000F                     	;# 
   578  0010                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0014                     	;# 
   583  0015                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  001D                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  0081                     	;# 
   597  0085                     	;# 
   598  0086                     	;# 
   599  0087                     	;# 
   600  0089                     	;# 
   601  008C                     	;# 
   602  008D                     	;# 
   603  008E                     	;# 
   604  008F                     	;# 
   605  0090                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0096                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009F                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  0185                     	;# 
   629  0186                     	;# 
   630  018C                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  008F                     	;# 
   674  0090                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0093                     	;# 
   678  0093                     	;# 
   679  0094                     	;# 
   680  0095                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0096                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009F                     	;# 
   689  0108                     	;# 
   690  0109                     	;# 
   691  010C                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010D                     	;# 
   695  010E                     	;# 
   696  010F                     	;# 
   697  0185                     	;# 
   698  0186                     	;# 
   699  018C                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0009                     	;# 
   709  000A                     	;# 
   710  000B                     	;# 
   711  000C                     	;# 
   712  000D                     	;# 
   713  000E                     	;# 
   714  000E                     	;# 
   715  000F                     	;# 
   716  0010                     	;# 
   717  0011                     	;# 
   718  0012                     	;# 
   719  0013                     	;# 
   720  0014                     	;# 
   721  0015                     	;# 
   722  0015                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001B                     	;# 
   730  001C                     	;# 
   731  001D                     	;# 
   732  001E                     	;# 
   733  001F                     	;# 
   734  0081                     	;# 
   735  0085                     	;# 
   736  0086                     	;# 
   737  0087                     	;# 
   738  0089                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  008F                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0093                     	;# 
   747  0093                     	;# 
   748  0094                     	;# 
   749  0095                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0096                     	;# 
   753  0098                     	;# 
   754  0099                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009F                     	;# 
   758  0108                     	;# 
   759  0109                     	;# 
   760  010C                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  010F                     	;# 
   766  0185                     	;# 
   767  0186                     	;# 
   768  018C                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0009                     	;# 
   778  000A                     	;# 
   779  000B                     	;# 
   780  000C                     	;# 
   781  000D                     	;# 
   782  000E                     	;# 
   783  000E                     	;# 
   784  000F                     	;# 
   785  0010                     	;# 
   786  0011                     	;# 
   787  0012                     	;# 
   788  0013                     	;# 
   789  0014                     	;# 
   790  0015                     	;# 
   791  0015                     	;# 
   792  0016                     	;# 
   793  0017                     	;# 
   794  0018                     	;# 
   795  0019                     	;# 
   796  001A                     	;# 
   797  001B                     	;# 
   798  001B                     	;# 
   799  001C                     	;# 
   800  001D                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  0081                     	;# 
   804  0085                     	;# 
   805  0086                     	;# 
   806  0087                     	;# 
   807  0089                     	;# 
   808  008C                     	;# 
   809  008D                     	;# 
   810  008E                     	;# 
   811  008F                     	;# 
   812  0090                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0096                     	;# 
   822  0098                     	;# 
   823  0099                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009F                     	;# 
   827  0108                     	;# 
   828  0109                     	;# 
   829  010C                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010D                     	;# 
   833  010E                     	;# 
   834  010F                     	;# 
   835  0185                     	;# 
   836  0186                     	;# 
   837  018C                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0009                     	;# 
   847  000A                     	;# 
   848  000B                     	;# 
   849  000C                     	;# 
   850  000D                     	;# 
   851  000E                     	;# 
   852  000E                     	;# 
   853  000F                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0013                     	;# 
   858  0014                     	;# 
   859  0015                     	;# 
   860  0015                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001B                     	;# 
   868  001C                     	;# 
   869  001D                     	;# 
   870  001E                     	;# 
   871  001F                     	;# 
   872  0081                     	;# 
   873  0085                     	;# 
   874  0086                     	;# 
   875  0087                     	;# 
   876  0089                     	;# 
   877  008C                     	;# 
   878  008D                     	;# 
   879  008E                     	;# 
   880  008F                     	;# 
   881  0090                     	;# 
   882  0091                     	;# 
   883  0092                     	;# 
   884  0093                     	;# 
   885  0093                     	;# 
   886  0094                     	;# 
   887  0095                     	;# 
   888  0095                     	;# 
   889  0096                     	;# 
   890  0096                     	;# 
   891  0098                     	;# 
   892  0099                     	;# 
   893  009C                     	;# 
   894  009D                     	;# 
   895  009F                     	;# 
   896  0108                     	;# 
   897  0109                     	;# 
   898  010C                     	;# 
   899  010C                     	;# 
   900  010D                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  010F                     	;# 
   904  0185                     	;# 
   905  0186                     	;# 
   906  018C                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000D                     	;# 
   920  000E                     	;# 
   921  000E                     	;# 
   922  000F                     	;# 
   923  0010                     	;# 
   924  0011                     	;# 
   925  0012                     	;# 
   926  0013                     	;# 
   927  0014                     	;# 
   928  0015                     	;# 
   929  0015                     	;# 
   930  0016                     	;# 
   931  0017                     	;# 
   932  0018                     	;# 
   933  0019                     	;# 
   934  001A                     	;# 
   935  001B                     	;# 
   936  001B                     	;# 
   937  001C                     	;# 
   938  001D                     	;# 
   939  001E                     	;# 
   940  001F                     	;# 
   941  0081                     	;# 
   942  0085                     	;# 
   943  0086                     	;# 
   944  0087                     	;# 
   945  0089                     	;# 
   946  008C                     	;# 
   947  008D                     	;# 
   948  008E                     	;# 
   949  008F                     	;# 
   950  0090                     	;# 
   951  0091                     	;# 
   952  0092                     	;# 
   953  0093                     	;# 
   954  0093                     	;# 
   955  0094                     	;# 
   956  0095                     	;# 
   957  0095                     	;# 
   958  0096                     	;# 
   959  0096                     	;# 
   960  0098                     	;# 
   961  0099                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009F                     	;# 
   965  0108                     	;# 
   966  0109                     	;# 
   967  010C                     	;# 
   968  010C                     	;# 
   969  010D                     	;# 
   970  010D                     	;# 
   971  010E                     	;# 
   972  010F                     	;# 
   973  0185                     	;# 
   974  0186                     	;# 
   975  018C                     	;# 
   976  0000                     	;# 
   977  0001                     	;# 
   978  0002                     	;# 
   979  0003                     	;# 
   980  0004                     	;# 
   981  0005                     	;# 
   982  0006                     	;# 
   983  0007                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  000E                     	;# 
   991  000F                     	;# 
   992  0010                     	;# 
   993  0011                     	;# 
   994  0012                     	;# 
   995  0013                     	;# 
   996  0014                     	;# 
   997  0015                     	;# 
   998  0015                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001B                     	;# 
  1006  001C                     	;# 
  1007  001D                     	;# 
  1008  001E                     	;# 
  1009  001F                     	;# 
  1010  0081                     	;# 
  1011  0085                     	;# 
  1012  0086                     	;# 
  1013  0087                     	;# 
  1014  0089                     	;# 
  1015  008C                     	;# 
  1016  008D                     	;# 
  1017  008E                     	;# 
  1018  008F                     	;# 
  1019  0090                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0093                     	;# 
  1024  0094                     	;# 
  1025  0095                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0096                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009C                     	;# 
  1032  009D                     	;# 
  1033  009F                     	;# 
  1034  0108                     	;# 
  1035  0109                     	;# 
  1036  010C                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010D                     	;# 
  1040  010E                     	;# 
  1041  010F                     	;# 
  1042  0185                     	;# 
  1043  0186                     	;# 
  1044  018C                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  000E                     	;# 
  1060  000F                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0013                     	;# 
  1065  0014                     	;# 
  1066  0015                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001D                     	;# 
  1077  001E                     	;# 
  1078  001F                     	;# 
  1079  0081                     	;# 
  1080  0085                     	;# 
  1081  0086                     	;# 
  1082  0087                     	;# 
  1083  0089                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  008F                     	;# 
  1088  0090                     	;# 
  1089  0091                     	;# 
  1090  0092                     	;# 
  1091  0093                     	;# 
  1092  0093                     	;# 
  1093  0094                     	;# 
  1094  0095                     	;# 
  1095  0095                     	;# 
  1096  0096                     	;# 
  1097  0096                     	;# 
  1098  0098                     	;# 
  1099  0099                     	;# 
  1100  009C                     	;# 
  1101  009D                     	;# 
  1102  009F                     	;# 
  1103  0108                     	;# 
  1104  0109                     	;# 
  1105  010C                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010D                     	;# 
  1109  010E                     	;# 
  1110  010F                     	;# 
  1111  0185                     	;# 
  1112  0186                     	;# 
  1113  018C                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0009                     	;# 
  1123  000A                     	;# 
  1124  000B                     	;# 
  1125  000C                     	;# 
  1126  000D                     	;# 
  1127  000E                     	;# 
  1128  000E                     	;# 
  1129  000F                     	;# 
  1130  0010                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  0081                     	;# 
  1149  0085                     	;# 
  1150  0086                     	;# 
  1151  0087                     	;# 
  1152  0089                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  008F                     	;# 
  1157  0090                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0093                     	;# 
  1162  0094                     	;# 
  1163  0095                     	;# 
  1164  0095                     	;# 
  1165  0096                     	;# 
  1166  0096                     	;# 
  1167  0098                     	;# 
  1168  0099                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009F                     	;# 
  1172  0108                     	;# 
  1173  0109                     	;# 
  1174  010C                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010D                     	;# 
  1178  010E                     	;# 
  1179  010F                     	;# 
  1180  0185                     	;# 
  1181  0186                     	;# 
  1182  018C                     	;# 
  1183  0000                     	;# 
  1184  0001                     	;# 
  1185  0002                     	;# 
  1186  0003                     	;# 
  1187  0004                     	;# 
  1188  0005                     	;# 
  1189  0006                     	;# 
  1190  0007                     	;# 
  1191  0009                     	;# 
  1192  000A                     	;# 
  1193  000B                     	;# 
  1194  000C                     	;# 
  1195  000D                     	;# 
  1196  000E                     	;# 
  1197  000E                     	;# 
  1198  000F                     	;# 
  1199  0010                     	;# 
  1200  0011                     	;# 
  1201  0012                     	;# 
  1202  0013                     	;# 
  1203  0014                     	;# 
  1204  0015                     	;# 
  1205  0015                     	;# 
  1206  0016                     	;# 
  1207  0017                     	;# 
  1208  0018                     	;# 
  1209  0019                     	;# 
  1210  001A                     	;# 
  1211  001B                     	;# 
  1212  001B                     	;# 
  1213  001C                     	;# 
  1214  001D                     	;# 
  1215  001E                     	;# 
  1216  001F                     	;# 
  1217  0081                     	;# 
  1218  0085                     	;# 
  1219  0086                     	;# 
  1220  0087                     	;# 
  1221  0089                     	;# 
  1222  008C                     	;# 
  1223  008D                     	;# 
  1224  008E                     	;# 
  1225  008F                     	;# 
  1226  0090                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0093                     	;# 
  1230  0093                     	;# 
  1231  0094                     	;# 
  1232  0095                     	;# 
  1233  0095                     	;# 
  1234  0096                     	;# 
  1235  0096                     	;# 
  1236  0098                     	;# 
  1237  0099                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009F                     	;# 
  1241  0108                     	;# 
  1242  0109                     	;# 
  1243  010C                     	;# 
  1244  010C                     	;# 
  1245  010D                     	;# 
  1246  010D                     	;# 
  1247  010E                     	;# 
  1248  010F                     	;# 
  1249  0185                     	;# 
  1250  0186                     	;# 
  1251  018C                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  000E                     	;# 
  1267  000F                     	;# 
  1268  0010                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0014                     	;# 
  1273  0015                     	;# 
  1274  0015                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001B                     	;# 
  1282  001C                     	;# 
  1283  001D                     	;# 
  1284  001E                     	;# 
  1285  001F                     	;# 
  1286  0081                     	;# 
  1287  0085                     	;# 
  1288  0086                     	;# 
  1289  0087                     	;# 
  1290  0089                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  008F                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0093                     	;# 
  1299  0093                     	;# 
  1300  0094                     	;# 
  1301  0095                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0096                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009F                     	;# 
  1310  0108                     	;# 
  1311  0109                     	;# 
  1312  010C                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  010F                     	;# 
  1318  0185                     	;# 
  1319  0186                     	;# 
  1320  018C                     	;# 
  1321  001F                     _ADCON0	set	31
  1322  001E                     _ADRES	set	30
  1323  0005                     _PORTA	set	5
  1324  0006                     _PORTB	set	6
  1325  0007                     _PORTC	set	7
  1326  0010                     _T1CON	set	16
  1327  000F                     _TMR1H	set	15
  1328  000E                     _TMR1L	set	14
  1329  005F                     _GIE	set	95
  1330  00F9                     _GO_nDONE	set	249
  1331  005E                     _PEIE	set	94
  1332  002D                     _RA5	set	45
  1333  002E                     _RA6	set	46
  1334  002F                     _RA7	set	47
  1335  0032                     _RB2	set	50
  1336  0033                     _RB3	set	51
  1337  0060                     _TMR1IF	set	96
  1338  009F                     _ADCON1	set	159
  1339  009D                     _FVRCON	set	157
  1340  0090                     _OSCCON	set	144
  1341  0085                     _TRISA	set	133
  1342  0086                     _TRISB	set	134
  1343  0087                     _TRISC	set	135
  1344  0095                     _WPUB	set	149
  1345  0408                     _PS0	set	1032
  1346  0409                     _PS1	set	1033
  1347  040A                     _PS2	set	1034
  1348  040B                     _PSA	set	1035
  1349  0460                     _TMR1IE	set	1120
  1350  0185                     _ANSELA	set	389
  1351  0186                     _ANSELB	set	390
  1352                           
  1353                           	psect	text0
  1354  0000                     __ptext0:	
  1355                           ; #config settings
  1356                           
  1357                           
  1358                           ;psect for function _TMR1_ISR
  1359  0000                     
  1360                           	psect	cinit
  1361  0013                     start_initialization:	
  1362  0013                     __initialization:	
  1363                           
  1364                           ; Clear objects allocated to COMMON
  1365  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1366  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1367  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1368  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1369                           
  1370                           ; Clear objects allocated to BANK0
  1371  0017  1383               	bcf	3,7	;select IRP bank0
  1372  0018  3020               	movlw	low __pbssBANK0
  1373  0019  0084               	movwf	4
  1374  001A  3056               	movlw	low (__pbssBANK0+54)
  1375  001B  158A  2385  118A   	fcall	clear_ram0
  1376                           
  1377                           ; Clear objects allocated to BANK1
  1378  001E  30A0               	movlw	low __pbssBANK1
  1379  001F  0084               	movwf	4
  1380  0020  30EF               	movlw	low (__pbssBANK1+79)
  1381  0021  158A  2385         	fcall	clear_ram0
  1382  0023                     end_of_initialization:	
  1383                           ;End of C runtime variable initialization code
  1384                           
  1385  0023                     __end_of__initialization:	
  1386  0023  0183               	clrf	3
  1387  0024  158A  2F9A         	ljmp	_main	;jump to C main() function
  1388                           
  1389                           	psect	bssCOMMON
  1390  0076                     __pbssCOMMON:	
  1391  0076                     _LED:	
  1392  0076                     	ds	1
  1393  0077                     _Light:	
  1394  0077                     	ds	1
  1395  0078                     _Lights:	
  1396  0078                     	ds	1
  1397  0079                     _LightsControl:	
  1398  0079                     	ds	1
  1399                           
  1400                           	psect	bssBANK0
  1401  0020                     __pbssBANK0:	
  1402  0020                     _myMain:	
  1403  0020                     	ds	6
  1404  0026                     _SYSC:	
  1405  0026                     	ds	5
  1406  002B                     __CDS:	
  1407  002B                     	ds	5
  1408  0030                     _PIRLED:	
  1409  0030                     	ds	4
  1410  0034                     _Timer1:	
  1411  0034                     	ds	3
  1412  0037                     _WDT:	
  1413  0037                     	ds	2
  1414  0039                     _Cmd:	
  1415  0039                     	ds	1
  1416  003A                     _SwDetect:	
  1417  003A                     	ds	1
  1418  003B                     _Temp:	
  1419  003B                     	ds	12
  1420  0047                     _Lights1:	
  1421  0047                     	ds	7
  1422  004E                     _VarLED1:	
  1423  004E                     	ds	4
  1424  0052                     _VarLED2:	
  1425  0052                     	ds	4
  1426                           
  1427                           	psect	bssBANK1
  1428  00A0                     __pbssBANK1:	
  1429  00A0                     __PIR:	
  1430  00A0                     	ds	46
  1431  00CE                     _Load:	
  1432  00CE                     	ds	33
  1433                           
  1434                           	psect	clrtext
  1435  0B85                     clear_ram0:	
  1436                           ;	Called with FSR containing the base address, and
  1437                           ;	W with the last address+1
  1438                           
  1439  0B85  0064               	clrwdt	;clear the watchdog before getting into this loop
  1440  0B86                     clrloop0:	
  1441  0B86  0180               	clrf	0	;clear RAM location pointed to by FSR
  1442  0B87  0A84               	incf	4,f	;increment pointer
  1443  0B88  0604               	xorwf	4,w	;XOR with final address
  1444  0B89  1903               	btfsc	3,2	;have we reached the end yet?
  1445  0B8A  3400               	retlw	0	;all done for this memory range, return
  1446  0B8B  0604               	xorwf	4,w	;XOR again to restore value
  1447  0B8C  2B86               	goto	clrloop0	;do the next byte
  1448                           
  1449                           	psect	cstackCOMMON
  1450  0070                     __pcstackCOMMON:	
  1451  0070                     ?_setLED_Initialization:	
  1452  0070                     ?_setPIRLED_Main:	
  1453                           ; 0 bytes @ 0x0
  1454                           
  1455  0070                     ?_Fosc_Set:	
  1456                           ; 0 bytes @ 0x0
  1457                           
  1458  0070                     ?_IO_Set:	
  1459                           ; 0 bytes @ 0x0
  1460                           
  1461  0070                     ?_TMR1_Set:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_ADC_Set:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_WDT_Set:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_TMR1_ISR:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ??_TMR1_ISR:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ?_Timeout_Counter:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ?_set_TimeoutCleared:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ?_WDT_Clearing:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_myMain_Initialization:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ?_SYSC_Initialization:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_Temp_Initialization:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Load_Initialization:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_Lights_Initialization:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_PIR_Initialization:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_DetectSYSC_Signal:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_getLoad_AD:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_getTemp_AD:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ?_my_MainTimer:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_SYSC_Main:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_Temp_Main:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_Load_Main:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_Lights_Main:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_PIR_Main:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Exception_Main:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_setLoad_AH_AL_Restore:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_setTemp_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_setTemp_Main:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_setSYSC_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_setSYSC_Main:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_setLights_Initialization:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_setLights_Main:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_Lights_Control:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_setLights_Line:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_CDS_Initialization:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_CDS_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_LedPointSelect:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_LED_Initialization:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_LED_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Mcu_Initialization:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_ISR:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ??_ISR:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_WDT_Main:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_LightsPointSelect:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_getAll_Lights_Line:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_getLights_Status:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_getLight_LoadGO:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_getLight_Load_Status:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_getLights_Allow_Condition:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_getCDS_Status:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_getMain_All_LightsStatus:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_getMain_All_Error_Status:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_getMain_Lights_Count:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_getLoad_OK:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     getLights_Allow_Condition@lights:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623                           
  1624                           ; 1 bytes @ 0x0
  1625  0070                     	ds	4
  1626  0074                     ??_Fosc_Set:	
  1627  0074                     ??_IO_Set:	
  1628                           ; 0 bytes @ 0x4
  1629                           
  1630  0074                     ??_TMR1_Set:	
  1631                           ; 0 bytes @ 0x4
  1632                           
  1633  0074                     ??_ADC_Set:	
  1634                           ; 0 bytes @ 0x4
  1635                           
  1636  0074                     ??_WDT_Set:	
  1637                           ; 0 bytes @ 0x4
  1638                           
  1639  0074                     ??_Timeout_Counter:	
  1640                           ; 0 bytes @ 0x4
  1641                           
  1642  0074                     ??_set_TimeoutCleared:	
  1643                           ; 0 bytes @ 0x4
  1644                           
  1645  0074                     ??_WDT_Clearing:	
  1646                           ; 0 bytes @ 0x4
  1647                           
  1648  0074                     ??_myMain_Initialization:	
  1649                           ; 0 bytes @ 0x4
  1650                           
  1651  0074                     ??_SYSC_Initialization:	
  1652                           ; 0 bytes @ 0x4
  1653                           
  1654  0074                     ??_Temp_Initialization:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0074                     ??_PIR_Initialization:	
  1658                           ; 0 bytes @ 0x4
  1659                           
  1660  0074                     ??_DetectSYSC_Signal:	
  1661                           ; 0 bytes @ 0x4
  1662                           
  1663  0074                     ??_my_MainTimer:	
  1664                           ; 0 bytes @ 0x4
  1665                           
  1666  0074                     ??_setLoad_AH_AL_Restore:	
  1667                           ; 0 bytes @ 0x4
  1668                           
  1669  0074                     ??_getLight_LoadGO:	
  1670                           ; 0 bytes @ 0x4
  1671                           
  1672  0074                     ??_getLight_Load_Status:	
  1673                           ; 0 bytes @ 0x4
  1674                           
  1675  0074                     ??_setTemp_Initialization:	
  1676                           ; 0 bytes @ 0x4
  1677                           
  1678  0074                     ??_setSYSC_Initialization:	
  1679                           ; 0 bytes @ 0x4
  1680                           
  1681  0074                     ??_setLights_Line:	
  1682                           ; 0 bytes @ 0x4
  1683                           
  1684  0074                     ??_CDS_Initialization:	
  1685                           ; 0 bytes @ 0x4
  1686                           
  1687  0074                     ??_getCDS_Status:	
  1688                           ; 0 bytes @ 0x4
  1689                           
  1690  0074                     ??_LedPointSelect:	
  1691                           ; 0 bytes @ 0x4
  1692                           
  1693  0074                     ??_WDT_Main:	
  1694                           ; 0 bytes @ 0x4
  1695                           
  1696  0074                     ??_getMain_All_LightsStatus:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_getMain_All_Error_Status:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_getMain_Lights_Count:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_getLoad_OK:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_LightsPointSelect:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??___wmul:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??___awdiv:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??___lwdiv:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ?_getAD:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     getCDS_Status@status:	
  1724                           ; 1 bytes @ 0x4
  1725                           
  1726  0074                     getAD@adcon1:	
  1727                           ; 1 bytes @ 0x4
  1728                           
  1729  0074                     getMain_All_LightsStatus@status:	
  1730                           ; 1 bytes @ 0x4
  1731                           
  1732  0074                     getMain_Lights_Count@count:	
  1733                           ; 1 bytes @ 0x4
  1734                           
  1735  0074                     getLoad_OK@ok:	
  1736                           ; 1 bytes @ 0x4
  1737                           
  1738  0074                     setLights_Line@lights:	
  1739                           ; 1 bytes @ 0x4
  1740                           
  1741  0074                     getLight_LoadGO@loadgo:	
  1742                           ; 1 bytes @ 0x4
  1743                           
  1744  0074                     getLight_Load_Status@loadstatus:	
  1745                           ; 1 bytes @ 0x4
  1746                           
  1747  0074                     ___wmul@product:	
  1748                           ; 1 bytes @ 0x4
  1749                           
  1750                           
  1751                           ; 2 bytes @ 0x4
  1752  0074                     	ds	1
  1753  0075                     ??_getAD:	
  1754  0075                     ??_SYSC_Main:	
  1755                           ; 0 bytes @ 0x5
  1756                           
  1757  0075                     ??_setTemp_Main:	
  1758                           ; 0 bytes @ 0x5
  1759                           
  1760  0075                     ??_setSYSC_Main:	
  1761                           ; 0 bytes @ 0x5
  1762                           
  1763  0075                     ??_getLights_Allow_Condition:	
  1764                           ; 0 bytes @ 0x5
  1765                           
  1766  0075                     ?_setLights:	
  1767                           ; 0 bytes @ 0x5
  1768                           
  1769  0075                     ??_Mcu_Initialization:	
  1770                           ; 0 bytes @ 0x5
  1771                           
  1772  0075                     LedPointSelect@led:	
  1773                           ; 0 bytes @ 0x5
  1774                           
  1775  0075                     getAD@adcon0:	
  1776                           ; 1 bytes @ 0x5
  1777                           
  1778  0075                     getMain_Lights_Count@status1:	
  1779                           ; 1 bytes @ 0x5
  1780                           
  1781  0075                     setLoad_AH_AL_Restore@i:	
  1782                           ; 1 bytes @ 0x5
  1783                           
  1784  0075                     LightsPointSelect@lights:	
  1785                           ; 1 bytes @ 0x5
  1786                           
  1787  0075                     setLights@status:	
  1788                           ; 1 bytes @ 0x5
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0x5
  1792  0075                     	ds	1
  1793  0076                     ??_setLED_Initialization:	
  1794  0076                     ??_setLED:	
  1795                           ; 0 bytes @ 0x6
  1796                           
  1797  0076                     ??_Load_Initialization:	
  1798                           ; 0 bytes @ 0x6
  1799                           
  1800  0076                     ??_Lights_Initialization:	
  1801                           ; 0 bytes @ 0x6
  1802                           
  1803  0076                     ??_Temp_Main:	
  1804                           ; 0 bytes @ 0x6
  1805                           
  1806  0076                     ??_Lights_Main:	
  1807                           ; 0 bytes @ 0x6
  1808                           
  1809  0076                     ??_getAll_Lights_Line:	
  1810                           ; 0 bytes @ 0x6
  1811                           
  1812  0076                     ??_getLights_Status:	
  1813                           ; 0 bytes @ 0x6
  1814                           
  1815  0076                     ??_setLights_Initialization:	
  1816                           ; 0 bytes @ 0x6
  1817                           
  1818  0076                     ??_setLights_Main:	
  1819                           ; 0 bytes @ 0x6
  1820                           
  1821  0076                     ??_LED_Initialization:	
  1822                           ; 0 bytes @ 0x6
  1823                           
  1824  0076                     ??_LED_Main:	
  1825                           ; 0 bytes @ 0x6
  1826                           
  1827                           
  1828                           	psect	cstackBANK0
  1829  0056                     __pcstackBANK0:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0056                     ?_setLED:	
  1833  0056                     ??_getLoad_AD:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0056                     ??_getTemp_AD:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0056                     ?_setLights_Trigger:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0056                     ??_setLights:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0056                     ??_CDS_Main:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0056                     ?_getCDS_AD:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0056                     ?___wmul:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0056                     ?___awdiv:	
  1855                           ; 2 bytes @ 0x0
  1856                           
  1857  0056                     ?___lwdiv:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  0056                     getCDS_AD@channel2:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863  0056                     setLED@command:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0056                     setLights_Initialization@lights:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0056                     getLights_Status@lights:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0056                     setLights_Trigger@command:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0056                     getAll_Lights_Line@line:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0056                     getLights_Allow_Condition@allow:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0056                     _getMain_All_Error_Status$2327:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0056                     ___wmul@multiplier:	
  1885                           ; 2 bytes @ 0x0
  1886                           
  1887  0056                     ___awdiv@divisor:	
  1888                           ; 2 bytes @ 0x0
  1889                           
  1890  0056                     ___lwdiv@divisor:	
  1891                           ; 2 bytes @ 0x0
  1892                           
  1893                           
  1894                           ; 2 bytes @ 0x0
  1895  0056                     	ds	1
  1896  0057                     ??_setLights_Trigger:	
  1897  0057                     ??_getCDS_AD:	
  1898                           ; 0 bytes @ 0x1
  1899                           
  1900  0057                     setLED@led:	
  1901                           ; 0 bytes @ 0x1
  1902                           
  1903  0057                     setLights@lights:	
  1904                           ; 1 bytes @ 0x1
  1905                           
  1906  0057                     getLights_Status@status:	
  1907                           ; 1 bytes @ 0x1
  1908                           
  1909  0057                     _getLights_Allow_Condition$4604:	
  1910                           ; 1 bytes @ 0x1
  1911                           
  1912                           
  1913                           ; 1 bytes @ 0x1
  1914  0057                     	ds	1
  1915  0058                     ??_setPIRLED_Main:	
  1916  0058                     setLED_Initialization@led:	
  1917                           ; 0 bytes @ 0x2
  1918                           
  1919  0058                     getLoad_AD@channel:	
  1920                           ; 1 bytes @ 0x2
  1921                           
  1922  0058                     getTemp_AD@channel:	
  1923                           ; 1 bytes @ 0x2
  1924                           
  1925  0058                     setLights_Main@lights:	
  1926                           ; 1 bytes @ 0x2
  1927                           
  1928  0058                     setLights_Trigger@lights:	
  1929                           ; 1 bytes @ 0x2
  1930                           
  1931  0058                     _getMain_All_Error_Status$2328:	
  1932                           ; 1 bytes @ 0x2
  1933                           
  1934  0058                     ___wmul@multiplicand:	
  1935                           ; 2 bytes @ 0x2
  1936                           
  1937  0058                     ___awdiv@dividend:	
  1938                           ; 2 bytes @ 0x2
  1939                           
  1940  0058                     ___lwdiv@dividend:	
  1941                           ; 2 bytes @ 0x2
  1942                           
  1943                           
  1944                           ; 2 bytes @ 0x2
  1945  0058                     	ds	1
  1946  0059                     getCDS_AD@i:	
  1947  0059                     setPIRLED_Main@count:	
  1948                           ; 1 bytes @ 0x3
  1949                           
  1950  0059                     getLoad_AD@k:	
  1951                           ; 1 bytes @ 0x3
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x3
  1955  0059                     	ds	1
  1956  005A                     getCDS_AD@j:	
  1957  005A                     getMain_All_Error_Status@command:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960  005A                     getLoad_AD@j:	
  1961                           ; 1 bytes @ 0x4
  1962                           
  1963  005A                     ___awdiv@counter:	
  1964                           ; 1 bytes @ 0x4
  1965                           
  1966  005A                     ___lwdiv@counter:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969                           
  1970                           ; 1 bytes @ 0x4
  1971  005A                     	ds	1
  1972  005B                     getCDS_AD@channel1:	
  1973  005B                     getMain_All_Error_Status@status:	
  1974                           ; 1 bytes @ 0x5
  1975                           
  1976  005B                     getLoad_AD@i:	
  1977                           ; 1 bytes @ 0x5
  1978                           
  1979  005B                     ___awdiv@sign:	
  1980                           ; 1 bytes @ 0x5
  1981                           
  1982  005B                     ___lwdiv@quotient:	
  1983                           ; 1 bytes @ 0x5
  1984                           
  1985                           
  1986                           ; 2 bytes @ 0x5
  1987  005B                     	ds	1
  1988  005C                     ??_PIR_Main:	
  1989  005C                     ??_Exception_Main:	
  1990                           ; 0 bytes @ 0x6
  1991                           
  1992  005C                     ___awdiv@quotient:	
  1993                           ; 0 bytes @ 0x6
  1994                           
  1995                           
  1996                           ; 2 bytes @ 0x6
  1997  005C                     	ds	1
  1998  005D                     ??_Load_Main:	
  1999  005D                     Exception_Main@lights:	
  2000                           ; 0 bytes @ 0x7
  2001                           
  2002                           
  2003                           ; 1 bytes @ 0x7
  2004  005D                     	ds	1
  2005  005E                     ?_getPIR_AD:	
  2006  005E                     ??_Lights_Control:	
  2007                           ; 0 bytes @ 0x8
  2008                           
  2009  005E                     Exception_Main@count:	
  2010                           ; 0 bytes @ 0x8
  2011                           
  2012  005E                     setTemp_Main@error:	
  2013                           ; 1 bytes @ 0x8
  2014                           
  2015  005E                     getPIR_AD@channel2:	
  2016                           ; 1 bytes @ 0x8
  2017                           
  2018                           
  2019                           ; 1 bytes @ 0x8
  2020  005E                     	ds	1
  2021  005F                     ??_getPIR_AD:	
  2022  005F                     Exception_Main@status:	
  2023                           ; 0 bytes @ 0x9
  2024                           
  2025  005F                     Load_Main@error:	
  2026                           ; 1 bytes @ 0x9
  2027                           
  2028                           
  2029                           ; 1 bytes @ 0x9
  2030  005F                     	ds	1
  2031  0060                     Load_Main@Load_Status:	
  2032  0060                     Lights_Control@lights:	
  2033                           ; 1 bytes @ 0xA
  2034                           
  2035  0060                     Exception_Main@i:	
  2036                           ; 1 bytes @ 0xA
  2037                           
  2038                           
  2039                           ; 2 bytes @ 0xA
  2040  0060                     	ds	1
  2041  0061                     PIR_Main@error:	
  2042  0061                     Load_Main@i:	
  2043                           ; 1 bytes @ 0xB
  2044                           
  2045                           
  2046                           ; 2 bytes @ 0xB
  2047  0061                     	ds	1
  2048  0062                     Exception_Main@error:	
  2049  0062                     getPIR_AD@j:	
  2050                           ; 1 bytes @ 0xC
  2051                           
  2052  0062                     _PIR_Main$3108:	
  2053                           ; 1 bytes @ 0xC
  2054                           
  2055                           
  2056                           ; 2 bytes @ 0xC
  2057  0062                     	ds	1
  2058  0063                     getPIR_AD@channel1:	
  2059                           
  2060                           ; 1 bytes @ 0xD
  2061  0063                     	ds	1
  2062  0064                     PIR_Main@cds:	
  2063  0064                     getPIR_AD@i:	
  2064                           ; 1 bytes @ 0xE
  2065                           
  2066                           
  2067                           ; 1 bytes @ 0xE
  2068  0064                     	ds	1
  2069  0065                     ?_main:	
  2070  0065                     main@argc:	
  2071                           ; 2 bytes @ 0xF
  2072                           
  2073                           
  2074                           ; 2 bytes @ 0xF
  2075  0065                     	ds	2
  2076  0067                     main@argv:	
  2077                           
  2078                           ; 2 bytes @ 0x11
  2079  0067                     	ds	2
  2080  0069                     ??_main:	
  2081                           
  2082                           ; 0 bytes @ 0x13
  2083  0069                     	ds	1
  2084                           
  2085                           	psect	maintext
  2086  0F9A                     __pmaintext:	
  2087 ;;
  2088 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2089 ;;
  2090 ;; *************** function _main *****************
  2091 ;; Defined at:
  2092 ;;		line 7 in file "../src/Main_B1.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  argc            2   15[BANK0 ] int 
  2095 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  2   15[BANK0 ] int 
  2100 ;; Registers used:
  2101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 17F/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2107 ;;      Params:         0       4       0       0
  2108 ;;      Locals:         0       0       0       0
  2109 ;;      Temps:          0       1       0       0
  2110 ;;      Totals:         0       5       0       0
  2111 ;;Total ram usage:        5 bytes
  2112 ;; Hardware stack levels required when called:    6
  2113 ;; This function calls:
  2114 ;;		_CDS_Initialization
  2115 ;;		_CDS_Main
  2116 ;;		_DetectSYSC_Signal
  2117 ;;		_Exception_Main
  2118 ;;		_LED_Initialization
  2119 ;;		_LED_Main
  2120 ;;		_Lights_Initialization
  2121 ;;		_Lights_Main
  2122 ;;		_Load_Initialization
  2123 ;;		_Load_Main
  2124 ;;		_Mcu_Initialization
  2125 ;;		_PIR_Initialization
  2126 ;;		_PIR_Main
  2127 ;;		_SYSC_Initialization
  2128 ;;		_SYSC_Main
  2129 ;;		_Temp_Initialization
  2130 ;;		_Temp_Main
  2131 ;;		_WDT_Main
  2132 ;;		_getCDS_AD
  2133 ;;		_getLoad_AD
  2134 ;;		_getPIR_AD
  2135 ;;		_getTemp_AD
  2136 ;;		_myMain_Initialization
  2137 ;;		_my_MainTimer
  2138 ;; This function is called by:
  2139 ;;		Startup code after reset
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _main
  2145  0F9A                     _main:	
  2146                           
  2147                           ;Main_B1.c: 8: myMain_Initialization();
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2151  0F9A  118A  27FF  158A   	fcall	_myMain_Initialization
  2152                           
  2153                           ;Main_B1.c: 9: Mcu_Initialization();
  2154  0F9D  158A  23ED  158A   	fcall	_Mcu_Initialization
  2155                           
  2156                           ;Main_B1.c: 10: ;;
  2157                           ;Main_B1.c: 11: LED_Initialization();
  2158  0FA0  158A  236D  158A   	fcall	_LED_Initialization
  2159                           
  2160                           ;Main_B1.c: 12: ;;
  2161                           ;Main_B1.c: 14: SYSC_Initialization();
  2162  0FA3  158A  2330  158A   	fcall	_SYSC_Initialization
  2163                           
  2164                           ;Main_B1.c: 15: Temp_Initialization();
  2165  0FA6  158A  2336  158A   	fcall	_Temp_Initialization
  2166                           
  2167                           ;Main_B1.c: 16: Load_Initialization();
  2168  0FA9  158A  232D  158A   	fcall	_Load_Initialization
  2169                           
  2170                           ;Main_B1.c: 17: ;;
  2171                           ;Main_B1.c: 18: ;;
  2172                           ;Main_B1.c: 20: ;;
  2173                           ;Main_B1.c: 21: Lights_Initialization();
  2174  0FAC  158A  2340  158A   	fcall	_Lights_Initialization
  2175                           
  2176                           ;Main_B1.c: 22: CDS_Initialization();
  2177  0FAF  158A  233C  158A   	fcall	_CDS_Initialization
  2178                           
  2179                           ;Main_B1.c: 23: PIR_Initialization();
  2180  0FB2  158A  23AA  158A   	fcall	_PIR_Initialization
  2181  0FB5                     l5270:	
  2182                           ;Main_B1.c: 24: ;;
  2183                           ;Main_B1.c: 25: ;;
  2184                           ;Main_B1.c: 26: ;;
  2185                           ;Main_B1.c: 27: ;;
  2186                           ;Main_B1.c: 28: ;;
  2187                           ;Main_B1.c: 30: while (1) {
  2188                           
  2189                           
  2190                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2191  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2193  0FB7  1C20               	btfss	_myMain,0
  2194  0FB8  2FD8               	goto	l5282
  2195                           
  2196                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2197  0FB9  158A  23B5  158A   	fcall	_DetectSYSC_Signal
  2198                           
  2199                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2200  0FBC  3001               	movlw	1
  2201  0FBD  118A  26C0  158A   	fcall	_getLoad_AD
  2202                           
  2203                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2204  0FC0  3011               	movlw	17
  2205  0FC1  158A  2570  158A   	fcall	_getTemp_AD
  2206                           
  2207                           ;Main_B1.c: 50: getCDS_AD(0x29, 0x05);
  2208  0FC4  3005               	movlw	5
  2209  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0FC7  00E9               	movwf	??_main
  2212  0FC8  0869               	movf	??_main,w
  2213  0FC9  00D6               	movwf	getCDS_AD@channel2
  2214  0FCA  3029               	movlw	41
  2215  0FCB  158A  2597  158A   	fcall	_getCDS_AD
  2216                           
  2217                           ;Main_B1.c: 54: getPIR_AD(0x2d, 0x09);
  2218  0FCE  3009               	movlw	9
  2219  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2221  0FD1  00E9               	movwf	??_main
  2222  0FD2  0869               	movf	??_main,w
  2223  0FD3  00DE               	movwf	getPIR_AD@channel2
  2224  0FD4  302D               	movlw	45
  2225  0FD5  118A  2409  158A   	fcall	_getPIR_AD
  2226  0FD8                     l5282:	
  2227                           
  2228                           ;Main_B1.c: 57: }
  2229                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2230  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0FDA  1C34               	btfss	_Timer1,0
  2233  0FDB  2FB5               	goto	l5270
  2234                           
  2235                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2236  0FDC  1034               	bcf	_Timer1,0
  2237                           
  2238                           ;Main_B1.c: 96: my_MainTimer();
  2239  0FDD  158A  24DC  158A   	fcall	_my_MainTimer
  2240                           
  2241                           ;Main_B1.c: 97: WDT_Main();
  2242  0FE0  158A  241E  158A   	fcall	_WDT_Main
  2243                           
  2244                           ;Main_B1.c: 98: ;;
  2245                           ;Main_B1.c: 99: ;;
  2246                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2247  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2248  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2249  0FE5  1C20               	btfss	_myMain,0
  2250  0FE6  2FB5               	goto	l5270
  2251                           
  2252                           ;Main_B1.c: 101: ;;
  2253                           ;Main_B1.c: 103: LED_Main();
  2254  0FE7  158A  232A  158A   	fcall	_LED_Main
  2255                           
  2256                           ;Main_B1.c: 104: ;;
  2257                           ;Main_B1.c: 106: SYSC_Main();
  2258  0FEA  158A  2333  158A   	fcall	_SYSC_Main
  2259                           
  2260                           ;Main_B1.c: 107: Temp_Main();
  2261  0FED  158A  2339  158A   	fcall	_Temp_Main
  2262                           
  2263                           ;Main_B1.c: 108: Load_Main();
  2264  0FF0  118A  2222  158A   	fcall	_Load_Main
  2265                           
  2266                           ;Main_B1.c: 109: ;;
  2267                           ;Main_B1.c: 111: Lights_Main();
  2268  0FF3  158A  252D  158A   	fcall	_Lights_Main
  2269                           
  2270                           ;Main_B1.c: 112: ;;
  2271                           ;Main_B1.c: 113: ;;
  2272                           ;Main_B1.c: 114: CDS_Main();
  2273  0FF6  158A  25F1  158A   	fcall	_CDS_Main
  2274                           
  2275                           ;Main_B1.c: 115: PIR_Main();
  2276  0FF9  118A  2026  158A   	fcall	_PIR_Main
  2277                           
  2278                           ;Main_B1.c: 117: ;;
  2279                           ;Main_B1.c: 118: ;;
  2280                           ;Main_B1.c: 119: ;;
  2281                           ;Main_B1.c: 120: ;;
  2282                           ;Main_B1.c: 121: Exception_Main();
  2283  0FFC  118A  264A  158A   	fcall	_Exception_Main
  2284  0FFF  2FB5               	goto	l5270
  2285  1000                     __end_of_main:	
  2286                           ;Main_B1.c: 128: }
  2287                           ;Main_B1.c: 129: }
  2288                           ;Main_B1.c: 163: }
  2289                           ;Main_B1.c: 164: return (0);
  2290                           ;	Return value of _main is never used
  2291                           
  2292                           
  2293                           	psect	text1
  2294  0CDC                     __ptext1:	
  2295 ;; *************** function _my_MainTimer *****************
  2296 ;; Defined at:
  2297 ;;		line 185 in file "../src/Main_B1.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;		None               void
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2311 ;;      Params:         0       0       0       0
  2312 ;;      Locals:         0       0       0       0
  2313 ;;      Temps:          1       0       0       0
  2314 ;;      Totals:         1       0       0       0
  2315 ;;Total ram usage:        1 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    2
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _my_MainTimer
  2327  0CDC                     _my_MainTimer:	
  2328                           
  2329                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2333  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0CDE  1820               	btfsc	_myMain,0
  2336  0CDF  2CEC               	goto	l3794
  2337                           
  2338                           ;Main_B1.c: 189: myMain.PowerCount++;
  2339  0CE0  3001               	movlw	1
  2340  0CE1  00F4               	movwf	??_my_MainTimer
  2341  0CE2  0874               	movf	??_my_MainTimer,w
  2342  0CE3  07A1               	addwf	_myMain+1,f
  2343                           
  2344                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  2345  0CE4  0821               	movf	_myMain+1,w
  2346  0CE5  3A4B               	xorlw	75
  2347  0CE6  1D03               	skipz
  2348  0CE7  0008               	return
  2349                           
  2350                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2351  0CE8  01A1               	clrf	_myMain+1
  2352                           
  2353                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2354  0CE9  1420               	bsf	_myMain,0
  2355                           
  2356                           ;Main_B1.c: 197: ;;
  2357                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2358  0CEA  1620               	bsf	_myMain,4
  2359                           
  2360                           ;Main_B1.c: 207: }
  2361                           ;Main_B1.c: 208: } else {
  2362  0CEB  0008               	return
  2363  0CEC                     l3794:	
  2364                           
  2365                           ;Main_B1.c: 209: myMain.PowerCount++;
  2366  0CEC  3001               	movlw	1
  2367  0CED  00F4               	movwf	??_my_MainTimer
  2368  0CEE  0874               	movf	??_my_MainTimer,w
  2369  0CEF  07A1               	addwf	_myMain+1,f
  2370                           
  2371                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  2372  0CF0  0821               	movf	_myMain+1,w
  2373  0CF1  3A32               	xorlw	50
  2374  0CF2  1D03               	skipz
  2375  0CF3  0008               	return
  2376                           
  2377                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2378  0CF4  01A1               	clrf	_myMain+1
  2379  0CF5  0008               	return
  2380  0CF6                     __end_of_my_MainTimer:	
  2381                           
  2382                           	psect	text2
  2383  07FF                     __ptext2:	
  2384 ;; *************** function _myMain_Initialization *****************
  2385 ;; Defined at:
  2386 ;;		line 170 in file "../src/Main_B1.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;		None               void
  2393 ;; Registers used:
  2394 ;;		None
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2400 ;;      Params:         0       0       0       0
  2401 ;;      Locals:         0       0       0       0
  2402 ;;      Temps:          0       0       0       0
  2403 ;;      Totals:         0       0       0       0
  2404 ;;Total ram usage:        0 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    2
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           
  2415                           ;psect for function _myMain_Initialization
  2416  07FF                     _myMain_Initialization:	
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _myMain_Initialization: []
  2420  07FF  0008               	return
  2421  0800                     __end_of_myMain_Initialization:	
  2422                           
  2423                           	psect	text3
  2424  0D70                     __ptext3:	
  2425 ;; *************** function _getTemp_AD *****************
  2426 ;; Defined at:
  2427 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  channel         1    wreg     unsigned char 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  channel         1    2[BANK0 ] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0, pclath, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2441 ;;      Params:         0       0       0       0
  2442 ;;      Locals:         0       1       0       0
  2443 ;;      Temps:          0       2       0       0
  2444 ;;      Totals:         0       3       0       0
  2445 ;;Total ram usage:        3 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    4
  2448 ;; This function calls:
  2449 ;;		_getAD
  2450 ;; This function is called by:
  2451 ;;		_main
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _getTemp_AD
  2457  0D70                     _getTemp_AD:	
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2461                           ;getTemp_AD@channel stored from wreg
  2462  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  2464  0D72  00D8               	movwf	getTemp_AD@channel
  2465                           
  2466                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2467  0D73  1D3B               	btfss	_Temp,2
  2468  0D74  0008               	return
  2469                           
  2470                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2471  0D75  3070               	movlw	112
  2472  0D76  00D6               	movwf	??_getTemp_AD
  2473  0D77  0856               	movf	??_getTemp_AD,w
  2474  0D78  00F4               	movwf	getAD@adcon1
  2475  0D79  0858               	movf	getTemp_AD@channel,w
  2476  0D7A  158A  2511  158A   	fcall	_getAD
  2477  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  2478  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  2479  0D7F  00D7               	movwf	??_getTemp_AD+1
  2480  0D80  0857               	movf	??_getTemp_AD+1,w
  2481  0D81  00C4               	movwf	_Temp+9
  2482                           
  2483                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2484  0D82  0844               	movf	_Temp+9,w
  2485  0D83  1903               	btfsc	3,2
  2486  0D84  0008               	return
  2487                           
  2488                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2489  0D85  0844               	movf	_Temp+9,w
  2490  0D86  0242               	subwf	_Temp+7,w
  2491  0D87  1803               	skipnc
  2492  0D88  2D8E               	goto	l4812
  2493                           
  2494                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2495  0D89  0844               	movf	_Temp+9,w
  2496  0D8A  00D6               	movwf	??_getTemp_AD
  2497  0D8B  0856               	movf	??_getTemp_AD,w
  2498  0D8C  00C2               	movwf	_Temp+7
  2499                           
  2500                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2501  0D8D  0008               	return
  2502  0D8E                     l4812:	
  2503  0D8E  0844               	movf	_Temp+9,w
  2504  0D8F  0243               	subwf	_Temp+8,w
  2505  0D90  1803               	skipnc
  2506  0D91  0008               	return
  2507                           
  2508                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2509  0D92  0844               	movf	_Temp+9,w
  2510  0D93  00D6               	movwf	??_getTemp_AD
  2511  0D94  0856               	movf	??_getTemp_AD,w
  2512  0D95  00C3               	movwf	_Temp+8
  2513  0D96  0008               	return
  2514  0D97                     __end_of_getTemp_AD:	
  2515                           
  2516                           	psect	text4
  2517  0409                     __ptext4:	
  2518 ;; *************** function _getPIR_AD *****************
  2519 ;; Defined at:
  2520 ;;		line 226 in file "../src/PIR_B1.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  channel1        1    wreg     unsigned char 
  2523 ;;  channel2        1    8[BANK0 ] unsigned char 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  channel1        1   13[BANK0 ] unsigned char 
  2526 ;;  i               1   14[BANK0 ] unsigned char 
  2527 ;;  j               1   12[BANK0 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;		None               void
  2530 ;; Registers used:
  2531 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2537 ;;      Params:         0       1       0       0
  2538 ;;      Locals:         0       3       0       0
  2539 ;;      Temps:          0       3       0       0
  2540 ;;      Totals:         0       7       0       0
  2541 ;;Total ram usage:        7 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    4
  2544 ;; This function calls:
  2545 ;;		___awdiv
  2546 ;;		___lwdiv
  2547 ;;		_getAD
  2548 ;; This function is called by:
  2549 ;;		_main
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           
  2554                           ;psect for function _getPIR_AD
  2555  0409                     _getPIR_AD:	
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2559                           ;getPIR_AD@channel1 stored from wreg
  2560  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2561  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2562  040B  00E3               	movwf	getPIR_AD@channel1
  2563                           
  2564                           ;PIR_B1.c: 227: char i = 0, j = 0;
  2565  040C  01E4               	clrf	getPIR_AD@i
  2566  040D  01E2               	clrf	getPIR_AD@j
  2567                           
  2568                           ;PIR_B1.c: 229: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2569  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2570  040F  1303               	bcf	3,6	;RP1=0, select bank1
  2571  0410  1CA0               	btfss	__PIR^(0+128),1
  2572  0411  0008               	return
  2573  0412  1920               	btfsc	__PIR^(0+128),2
  2574  0413  0008               	return
  2575                           
  2576                           ;PIR_B1.c: 230: _PIR.GO = 1;
  2577  0414  1520               	bsf	__PIR^(0+128),2
  2578                           
  2579                           ;PIR_B1.c: 231: _PIR.ADRES = getAD(channel1, 0x70);
  2580  0415  3070               	movlw	112
  2581  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0418  00DF               	movwf	??_getPIR_AD
  2584  0419  085F               	movf	??_getPIR_AD,w
  2585  041A  00F4               	movwf	getAD@adcon1
  2586  041B  0863               	movf	getPIR_AD@channel1,w
  2587  041C  158A  2511  118A   	fcall	_getAD
  2588  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2589  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2590  0421  00E0               	movwf	??_getPIR_AD+1
  2591  0422  0860               	movf	??_getPIR_AD+1,w
  2592  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2593  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2594  0425  00A2               	movwf	(__PIR^(0+128)+2)
  2595                           
  2596                           ;PIR_B1.c: 232: _PIR.VRAD = _PIR.ADRES / 25;
  2597  0426  3019               	movlw	25
  2598  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0429  00D6               	movwf	___awdiv@divisor
  2601  042A  3000               	movlw	0
  2602  042B  00D7               	movwf	___awdiv@divisor+1
  2603  042C  1683               	bsf	3,5	;RP0=1, select bank1
  2604  042D  1303               	bcf	3,6	;RP1=0, select bank1
  2605  042E  0822               	movf	(__PIR^(0+128)+2),w
  2606  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0431  00DF               	movwf	??_getPIR_AD
  2609  0432  01E0               	clrf	??_getPIR_AD+1
  2610  0433  085F               	movf	??_getPIR_AD,w
  2611  0434  00D8               	movwf	___awdiv@dividend
  2612  0435  0860               	movf	??_getPIR_AD+1,w
  2613  0436  00D9               	movwf	___awdiv@dividend+1
  2614  0437  118A  27A2  118A   	fcall	___awdiv
  2615  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2616  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2617  043C  0856               	movf	?___awdiv,w
  2618  043D  00E1               	movwf	??_getPIR_AD+2
  2619  043E  0861               	movf	??_getPIR_AD+2,w
  2620  043F  1683               	bsf	3,5	;RP0=1, select bank1
  2621  0440  1303               	bcf	3,6	;RP1=0, select bank1
  2622  0441  00A3               	movwf	(__PIR^(0+128)+3)
  2623                           
  2624                           ;PIR_B1.c: 233: _PIR.VRAD1 = _PIR.ADRES;
  2625  0442  0822               	movf	(__PIR^(0+128)+2),w
  2626  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0445  00DF               	movwf	??_getPIR_AD
  2629  0446  085F               	movf	??_getPIR_AD,w
  2630  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2632  0449  00A4               	movwf	(__PIR^(0+128)+4)
  2633                           
  2634                           ;PIR_B1.c: 234: _PIR.ADRES = getAD(channel2, 0x70);
  2635  044A  3070               	movlw	112
  2636  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2637  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2638  044D  00DF               	movwf	??_getPIR_AD
  2639  044E  085F               	movf	??_getPIR_AD,w
  2640  044F  00F4               	movwf	getAD@adcon1
  2641  0450  085E               	movf	getPIR_AD@channel2,w
  2642  0451  158A  2511  118A   	fcall	_getAD
  2643  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0456  00E0               	movwf	??_getPIR_AD+1
  2646  0457  0860               	movf	??_getPIR_AD+1,w
  2647  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2648  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2649  045A  00A2               	movwf	(__PIR^(0+128)+2)
  2650                           
  2651                           ;PIR_B1.c: 235: _PIR.SignalAD = _PIR.ADRES;
  2652  045B  0822               	movf	(__PIR^(0+128)+2),w
  2653  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2654  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2655  045E  00DF               	movwf	??_getPIR_AD
  2656  045F  085F               	movf	??_getPIR_AD,w
  2657  0460  1683               	bsf	3,5	;RP0=1, select bank1
  2658  0461  1303               	bcf	3,6	;RP1=0, select bank1
  2659  0462  00A1               	movwf	(__PIR^(0+128)+1)
  2660                           
  2661                           ;PIR_B1.c: 237: if (_PIR.VRAD < 1) {
  2662  0463  08A3               	movf	(__PIR^(0+128)+3),f
  2663  0464  1D03               	skipz
  2664  0465  2C68               	goto	l4834
  2665                           
  2666                           ;PIR_B1.c: 238: _PIR.CloseTimeValue = 5;
  2667  0466  3005               	movlw	5
  2668  0467  2C6D               	goto	L1
  2669  0468                     l4834:	
  2670                           ;PIR_B1.c: 239: } else if (_PIR.VRAD < 3) {
  2671                           
  2672  0468  3003               	movlw	3
  2673  0469  0223               	subwf	(__PIR^(0+128)+3),w
  2674  046A  1803               	skipnc
  2675  046B  2C70               	goto	l4838
  2676                           
  2677                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 60;
  2678  046C  303C               	movlw	60
  2679  046D                     L1:	
  2680  046D  00C7               	movwf	(__PIR^(0+128)+39)
  2681  046E  3000               	movlw	0
  2682  046F  2C8B               	goto	L5
  2683  0470                     l4838:	
  2684                           ;PIR_B1.c: 241: } else if (_PIR.VRAD < 5) {
  2685                           
  2686  0470  3005               	movlw	5
  2687  0471  0223               	subwf	(__PIR^(0+128)+3),w
  2688  0472  1803               	skipnc
  2689  0473  2C78               	goto	l4842
  2690                           
  2691                           ;PIR_B1.c: 242: _PIR.CloseTimeValue = 300;
  2692  0474  302C               	movlw	44
  2693  0475  00C7               	movwf	(__PIR^(0+128)+39)
  2694  0476  3001               	movlw	1
  2695  0477  2C8B               	goto	L5
  2696  0478                     l4842:	
  2697                           ;PIR_B1.c: 243: } else if (_PIR.VRAD < 7) {
  2698                           
  2699  0478  3007               	movlw	7
  2700  0479  0223               	subwf	(__PIR^(0+128)+3),w
  2701  047A  1803               	skipnc
  2702  047B  2C80               	goto	l4846
  2703                           
  2704                           ;PIR_B1.c: 244: _PIR.CloseTimeValue = 600;
  2705  047C  3058               	movlw	88
  2706  047D  00C7               	movwf	(__PIR^(0+128)+39)
  2707  047E  3002               	movlw	2
  2708  047F  2C8B               	goto	L5
  2709  0480                     l4846:	
  2710                           ;PIR_B1.c: 245: } else if (_PIR.VRAD < 9) {
  2711                           
  2712  0480  3009               	movlw	9
  2713  0481  0223               	subwf	(__PIR^(0+128)+3),w
  2714  0482  1803               	skipnc
  2715  0483  2C88               	goto	l4850
  2716                           
  2717                           ;PIR_B1.c: 246: _PIR.CloseTimeValue = 900;
  2718  0484  3084               	movlw	132
  2719  0485  00C7               	movwf	(__PIR^(0+128)+39)
  2720  0486  3003               	movlw	3
  2721  0487  2C8B               	goto	L5
  2722  0488                     l4850:	
  2723                           ;PIR_B1.c: 247: } else {
  2724                           
  2725                           
  2726                           ;PIR_B1.c: 248: _PIR.CloseTimeValue = 1200;
  2727  0488  30B0               	movlw	176
  2728  0489  00C7               	movwf	(__PIR^(0+128)+39)
  2729  048A  3004               	movlw	4
  2730  048B                     L5:	
  2731  048B  00C8               	movwf	(__PIR^(0+128)+40)
  2732                           
  2733                           ;PIR_B1.c: 249: }
  2734                           ;PIR_B1.c: 258: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2735  048C  0821               	movf	(__PIR^(0+128)+1),w
  2736  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2737  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2738  048F  00DF               	movwf	??_getPIR_AD
  2739  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2740  0491  1303               	bcf	3,6	;RP1=0, select bank1
  2741  0492  0827               	movf	(__PIR^(0+128)+7),w
  2742  0493  3EA8               	addlw	(__PIR+8)& (0+255)
  2743  0494  0084               	movwf	4
  2744  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2746  0497  085F               	movf	??_getPIR_AD,w
  2747  0498  1383               	bcf	3,7	;select IRP bank1
  2748  0499  0080               	movwf	0
  2749                           
  2750                           ;PIR_B1.c: 259: for (i = 0; i < 10; i++) {
  2751  049A  01E4               	clrf	getPIR_AD@i
  2752  049B  300A               	movlw	10
  2753  049C  0264               	subwf	getPIR_AD@i,w
  2754  049D  1803               	btfsc	3,0
  2755  049E  2CBB               	goto	l4866
  2756  049F                     l4860:	
  2757                           
  2758                           ;PIR_B1.c: 260: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2759  049F  0864               	movf	getPIR_AD@i,w
  2760  04A0  3EA8               	addlw	(__PIR+8)& (0+255)
  2761  04A1  0084               	movwf	4
  2762  04A2  0800               	movf	0,w
  2763  04A3  00DF               	movwf	??_getPIR_AD
  2764  04A4  01E0               	clrf	??_getPIR_AD+1
  2765  04A5  085F               	movf	??_getPIR_AD,w
  2766  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2767  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2768  04A8  07B2               	addwf	(__PIR^(0+128)+18),f
  2769  04A9  1803               	skipnc
  2770  04AA  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2771  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2772  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2773  04AD  0860               	movf	??_getPIR_AD+1,w
  2774  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  2775  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  2776  04B0  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2777  04B1  3001               	movlw	1
  2778  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2779  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2780  04B4  00DF               	movwf	??_getPIR_AD
  2781  04B5  085F               	movf	??_getPIR_AD,w
  2782  04B6  07E4               	addwf	getPIR_AD@i,f
  2783  04B7  300A               	movlw	10
  2784  04B8  0264               	subwf	getPIR_AD@i,w
  2785  04B9  1C03               	skipc
  2786  04BA  2C9F               	goto	l4860
  2787  04BB                     l4866:	
  2788                           
  2789                           ;PIR_B1.c: 261: }
  2790                           ;PIR_B1.c: 262: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2791  04BB  300A               	movlw	10
  2792  04BC  00D6               	movwf	___lwdiv@divisor
  2793  04BD  3000               	movlw	0
  2794  04BE  00D7               	movwf	___lwdiv@divisor+1
  2795  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2796  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2797  04C1  0833               	movf	((__PIR+1)^(0+128)+18),w
  2798  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2799  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2800  04C4  01D9               	clrf	___lwdiv@dividend+1
  2801  04C5  07D9               	addwf	___lwdiv@dividend+1,f
  2802  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2803  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2804  04C8  0832               	movf	(__PIR^(0+128)+18),w
  2805  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2806  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2807  04CB  01D8               	clrf	___lwdiv@dividend
  2808  04CC  07D8               	addwf	___lwdiv@dividend,f
  2809  04CD  158A  2663  118A   	fcall	___lwdiv
  2810  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2811  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2812  04D2  0856               	movf	?___lwdiv,w
  2813  04D3  00DF               	movwf	??_getPIR_AD
  2814  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  2815  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  2816  04D6  0834               	movf	(__PIR^(0+128)+20),w
  2817  04D7  3EB5               	addlw	(__PIR+21)& (0+255)
  2818  04D8  0084               	movwf	4
  2819  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2820  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2821  04DB  085F               	movf	??_getPIR_AD,w
  2822  04DC  1383               	bcf	3,7	;select IRP bank1
  2823  04DD  0080               	movwf	0
  2824                           
  2825                           ;PIR_B1.c: 263: _PIR.TenAverageValue = 0;
  2826  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2827  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2828  04E0  01B2               	clrf	(__PIR^(0+128)+18)
  2829  04E1  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2830                           
  2831                           ;PIR_B1.c: 265: for (i = 0; i <= 9; i++) {
  2832  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2833  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2834  04E4  01E4               	clrf	getPIR_AD@i
  2835  04E5  300A               	movlw	10
  2836  04E6  0264               	subwf	getPIR_AD@i,w
  2837  04E7  1803               	btfsc	3,0
  2838  04E8  2D05               	goto	l4882
  2839  04E9                     l4876:	
  2840                           
  2841                           ;PIR_B1.c: 266: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2842  04E9  0864               	movf	getPIR_AD@i,w
  2843  04EA  3EB5               	addlw	(__PIR+21)& (0+255)
  2844  04EB  0084               	movwf	4
  2845  04EC  0800               	movf	0,w
  2846  04ED  00DF               	movwf	??_getPIR_AD
  2847  04EE  01E0               	clrf	??_getPIR_AD+1
  2848  04EF  085F               	movf	??_getPIR_AD,w
  2849  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2850  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2851  04F2  07BF               	addwf	(__PIR^(0+128)+31),f
  2852  04F3  1803               	skipnc
  2853  04F4  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2854  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2855  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2856  04F7  0860               	movf	??_getPIR_AD+1,w
  2857  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2858  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2859  04FA  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2860  04FB  3001               	movlw	1
  2861  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2862  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2863  04FE  00DF               	movwf	??_getPIR_AD
  2864  04FF  085F               	movf	??_getPIR_AD,w
  2865  0500  07E4               	addwf	getPIR_AD@i,f
  2866  0501  300A               	movlw	10
  2867  0502  0264               	subwf	getPIR_AD@i,w
  2868  0503  1C03               	skipc
  2869  0504  2CE9               	goto	l4876
  2870  0505                     l4882:	
  2871                           
  2872                           ;PIR_B1.c: 267: }
  2873                           ;PIR_B1.c: 268: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2874  0505  300A               	movlw	10
  2875  0506  00D6               	movwf	___lwdiv@divisor
  2876  0507  3000               	movlw	0
  2877  0508  00D7               	movwf	___lwdiv@divisor+1
  2878  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2879  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2880  050B  0840               	movf	((__PIR+1)^(0+128)+31),w
  2881  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2882  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2883  050E  01D9               	clrf	___lwdiv@dividend+1
  2884  050F  07D9               	addwf	___lwdiv@dividend+1,f
  2885  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2886  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2887  0512  083F               	movf	(__PIR^(0+128)+31),w
  2888  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2889  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2890  0515  01D8               	clrf	___lwdiv@dividend
  2891  0516  07D8               	addwf	___lwdiv@dividend,f
  2892  0517  158A  2663  118A   	fcall	___lwdiv
  2893  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2894  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2895  051C  0856               	movf	?___lwdiv,w
  2896  051D  00DF               	movwf	??_getPIR_AD
  2897  051E  085F               	movf	??_getPIR_AD,w
  2898  051F  1683               	bsf	3,5	;RP0=1, select bank1
  2899  0520  1303               	bcf	3,6	;RP1=0, select bank1
  2900  0521  00A6               	movwf	(__PIR^(0+128)+6)
  2901                           
  2902                           ;PIR_B1.c: 269: _PIR.HundredAverageValue = 0;
  2903  0522  01BF               	clrf	(__PIR^(0+128)+31)
  2904  0523  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2905                           
  2906                           ;PIR_B1.c: 271: if (_PIR.TenCount < 10) {
  2907  0524  300A               	movlw	10
  2908  0525  0227               	subwf	(__PIR^(0+128)+7),w
  2909  0526  1803               	skipnc
  2910  0527  2D31               	goto	l4890
  2911                           
  2912                           ;PIR_B1.c: 272: _PIR.TenCount++;
  2913  0528  3001               	movlw	1
  2914  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2915  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2916  052B  00DF               	movwf	??_getPIR_AD
  2917  052C  085F               	movf	??_getPIR_AD,w
  2918  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2919  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2920  052F  07A7               	addwf	(__PIR^(0+128)+7),f
  2921                           
  2922                           ;PIR_B1.c: 273: } else {
  2923  0530  0008               	return
  2924  0531                     l4890:	
  2925                           
  2926                           ;PIR_B1.c: 274: _PIR.TenCount = 0;
  2927  0531  01A7               	clrf	(__PIR^(0+128)+7)
  2928                           
  2929                           ;PIR_B1.c: 275: if (_PIR.HundreCount < 10)
  2930  0532  300A               	movlw	10
  2931  0533  0234               	subwf	(__PIR^(0+128)+20),w
  2932  0534  1803               	skipnc
  2933  0535  2D3F               	goto	l4896
  2934                           
  2935                           ;PIR_B1.c: 276: _PIR.HundreCount++;
  2936  0536  3001               	movlw	1
  2937  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0539  00DF               	movwf	??_getPIR_AD
  2940  053A  085F               	movf	??_getPIR_AD,w
  2941  053B  1683               	bsf	3,5	;RP0=1, select bank1
  2942  053C  1303               	bcf	3,6	;RP1=0, select bank1
  2943  053D  07B4               	addwf	(__PIR^(0+128)+20),f
  2944  053E  0008               	return
  2945  053F                     l4896:	
  2946                           
  2947                           ;PIR_B1.c: 277: else
  2948                           ;PIR_B1.c: 278: _PIR.HundreCount = 0;
  2949  053F  01B4               	clrf	(__PIR^(0+128)+20)
  2950  0540  0008               	return
  2951  0541                     __end_of_getPIR_AD:	
  2952                           
  2953                           	psect	text5
  2954  06C0                     __ptext5:	
  2955 ;; *************** function _getLoad_AD *****************
  2956 ;; Defined at:
  2957 ;;		line 15 in file "../src/OverLoad_B1.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  channel         1    wreg     unsigned char 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  channel         1    2[BANK0 ] unsigned char 
  2962 ;;  i               1    5[BANK0 ] unsigned char 
  2963 ;;  j               1    4[BANK0 ] unsigned char 
  2964 ;;  k               1    3[BANK0 ] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2974 ;;      Params:         0       0       0       0
  2975 ;;      Locals:         0       4       0       0
  2976 ;;      Temps:          0       2       0       0
  2977 ;;      Totals:         0       6       0       0
  2978 ;;Total ram usage:        6 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    4
  2981 ;; This function calls:
  2982 ;;		_getAD
  2983 ;; This function is called by:
  2984 ;;		_main
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function _getLoad_AD
  2990  06C0                     _getLoad_AD:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2994                           ;getLoad_AD@channel stored from wreg
  2995  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  2996  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  2997  06C2  00D8               	movwf	getLoad_AD@channel
  2998                           
  2999                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3000  06C3  01DB               	clrf	getLoad_AD@i
  3001  06C4  01DA               	clrf	getLoad_AD@j
  3002  06C5  01D9               	clrf	getLoad_AD@k
  3003                           
  3004                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3005  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  3006  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  3007  06C8  1E4E               	btfss	_Load^(0+128),4
  3008  06C9  0008               	return
  3009                           
  3010                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3011  06CA  3073               	movlw	115
  3012  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3013  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3014  06CD  00D6               	movwf	??_getLoad_AD
  3015  06CE  0856               	movf	??_getLoad_AD,w
  3016  06CF  00F4               	movwf	getAD@adcon1
  3017  06D0  0858               	movf	getLoad_AD@channel,w
  3018  06D1  158A  2511  118A   	fcall	_getAD
  3019  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3020  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  3021  06D6  00D7               	movwf	??_getLoad_AD+1
  3022  06D7  0857               	movf	??_getLoad_AD+1,w
  3023  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  3024  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  3025  06DA  00E3               	movwf	(_Load^(0+128)+21)
  3026                           
  3027                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3028  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  3029  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  3030  06DD  01DB               	clrf	getLoad_AD@i
  3031  06DE  3004               	movlw	4
  3032  06DF  025B               	subwf	getLoad_AD@i,w
  3033  06E0  1803               	btfsc	3,0
  3034  06E1  2F07               	goto	l4782
  3035  06E2                     l4770:	
  3036                           
  3037                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3038  06E2  085B               	movf	getLoad_AD@i,w
  3039  06E3  3ED8               	addlw	(_Load+10)& (0+255)
  3040  06E4  0084               	movwf	4
  3041  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  3042  06E6  1303               	bcf	3,6	;RP1=0, select bank1
  3043  06E7  0863               	movf	(_Load^(0+128)+21),w
  3044  06E8  1383               	bcf	3,7	;select IRP bank1
  3045  06E9  0200               	subwf	0,w
  3046  06EA  1803               	skipnc
  3047  06EB  2EFE               	goto	l4778
  3048  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  3049  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  3050  06EE  08DA               	movf	getLoad_AD@j,f
  3051  06EF  1D03               	skipz
  3052  06F0  2EFE               	goto	l4778
  3053                           
  3054                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3055  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  3056  06F2  1303               	bcf	3,6	;RP1=0, select bank1
  3057  06F3  0863               	movf	(_Load^(0+128)+21),w
  3058  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  3059  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  3060  06F6  00D6               	movwf	??_getLoad_AD
  3061  06F7  085B               	movf	getLoad_AD@i,w
  3062  06F8  3ED8               	addlw	(_Load+10)& (0+255)
  3063  06F9  0084               	movwf	4
  3064  06FA  0856               	movf	??_getLoad_AD,w
  3065  06FB  0080               	movwf	0
  3066                           
  3067                           ;OverLoad_B1.c: 24: j = 1;
  3068  06FC  01DA               	clrf	getLoad_AD@j
  3069  06FD  0ADA               	incf	getLoad_AD@j,f
  3070  06FE                     l4778:	
  3071  06FE  3001               	movlw	1
  3072  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0700  00D6               	movwf	??_getLoad_AD
  3074  0701  0856               	movf	??_getLoad_AD,w
  3075  0702  07DB               	addwf	getLoad_AD@i,f
  3076  0703  3004               	movlw	4
  3077  0704  025B               	subwf	getLoad_AD@i,w
  3078  0705  1C03               	skipc
  3079  0706  2EE2               	goto	l4770
  3080  0707                     l4782:	
  3081                           
  3082                           ;OverLoad_B1.c: 25: }
  3083                           ;OverLoad_B1.c: 26: }
  3084                           ;OverLoad_B1.c: 27: if (j == 0) {
  3085  0707  08DA               	movf	getLoad_AD@j,f
  3086  0708  1D03               	skipz
  3087  0709  0008               	return
  3088                           
  3089                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3090  070A  01DB               	clrf	getLoad_AD@i
  3091  070B                     L6:	
  3092  070B  3004               	movlw	4
  3093  070C  025B               	subwf	getLoad_AD@i,w
  3094  070D  1803               	btfsc	3,0
  3095  070E  0008               	return
  3096                           
  3097                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3098  070F  085B               	movf	getLoad_AD@i,w
  3099  0710  3EDD               	addlw	(_Load+15)& (0+255)
  3100  0711  0084               	movwf	4
  3101  0712  1383               	bcf	3,7	;select IRP bank1
  3102  0713  0800               	movf	0,w
  3103  0714  1683               	bsf	3,5	;RP0=1, select bank1
  3104  0715  1303               	bcf	3,6	;RP1=0, select bank1
  3105  0716  0263               	subwf	(_Load^(0+128)+21),w
  3106  0717  1803               	skipnc
  3107  0718  2F2B               	goto	l4798
  3108  0719  1283               	bcf	3,5	;RP0=0, select bank0
  3109  071A  1303               	bcf	3,6	;RP1=0, select bank0
  3110  071B  08D9               	movf	getLoad_AD@k,f
  3111  071C  1D03               	skipz
  3112  071D  2F2B               	goto	l4798
  3113                           
  3114                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3115  071E  1683               	bsf	3,5	;RP0=1, select bank1
  3116  071F  1303               	bcf	3,6	;RP1=0, select bank1
  3117  0720  0863               	movf	(_Load^(0+128)+21),w
  3118  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3119  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0723  00D6               	movwf	??_getLoad_AD
  3121  0724  085B               	movf	getLoad_AD@i,w
  3122  0725  3EDD               	addlw	(_Load+15)& (0+255)
  3123  0726  0084               	movwf	4
  3124  0727  0856               	movf	??_getLoad_AD,w
  3125  0728  0080               	movwf	0
  3126                           
  3127                           ;OverLoad_B1.c: 31: k = 1;
  3128  0729  01D9               	clrf	getLoad_AD@k
  3129  072A  0AD9               	incf	getLoad_AD@k,f
  3130  072B                     l4798:	
  3131  072B  3001               	movlw	1
  3132  072C  1283               	bcf	3,5	;RP0=0, select bank0
  3133  072D  00D6               	movwf	??_getLoad_AD
  3134  072E  0856               	movf	??_getLoad_AD,w
  3135  072F  07DB               	addwf	getLoad_AD@i,f
  3136  0730  2F0B               	goto	L6
  3137  0731                     __end_of_getLoad_AD:	
  3138                           
  3139                           	psect	text6
  3140  0D97                     __ptext6:	
  3141 ;; *************** function _getCDS_AD *****************
  3142 ;; Defined at:
  3143 ;;		line 48 in file "../src/CDS_B1.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  channel1        1    wreg     unsigned char 
  3146 ;;  channel2        1    0[BANK0 ] unsigned char 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  channel1        1    5[BANK0 ] unsigned char 
  3149 ;;  j               1    4[BANK0 ] unsigned char 
  3150 ;;  i               1    3[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;		None               void
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, pclath, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3160 ;;      Params:         0       1       0       0
  3161 ;;      Locals:         0       3       0       0
  3162 ;;      Temps:          0       2       0       0
  3163 ;;      Totals:         0       6       0       0
  3164 ;;Total ram usage:        6 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    4
  3167 ;; This function calls:
  3168 ;;		_getAD
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _getCDS_AD
  3176  0D97                     _getCDS_AD:	
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3180                           ;getCDS_AD@channel1 stored from wreg
  3181  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3182  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3183  0D99  00DB               	movwf	getCDS_AD@channel1
  3184                           
  3185                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3186  0D9A  01D9               	clrf	getCDS_AD@i
  3187  0D9B  01DA               	clrf	getCDS_AD@j
  3188                           
  3189                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3190  0D9C  1DAB               	btfss	__CDS,3
  3191  0D9D  0008               	return
  3192                           
  3193                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3194  0D9E  14AB               	bsf	__CDS,1
  3195                           
  3196                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3197  0D9F  3070               	movlw	112
  3198  0DA0  00D7               	movwf	??_getCDS_AD
  3199  0DA1  0857               	movf	??_getCDS_AD,w
  3200  0DA2  00F4               	movwf	getAD@adcon1
  3201  0DA3  085B               	movf	getCDS_AD@channel1,w
  3202  0DA4  158A  2511  158A   	fcall	_getAD
  3203  0DA7  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0DA8  1303               	bcf	3,6	;RP1=0, select bank0
  3205  0DA9  00D8               	movwf	??_getCDS_AD+1
  3206  0DAA  0858               	movf	??_getCDS_AD+1,w
  3207  0DAB  00AF               	movwf	__CDS+4
  3208                           
  3209                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3210  0DAC  082F               	movf	__CDS+4,w
  3211  0DAD  00D7               	movwf	??_getCDS_AD
  3212  0DAE  0857               	movf	??_getCDS_AD,w
  3213  0DAF  00AD               	movwf	__CDS+2
  3214                           
  3215                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3216  0DB0  3070               	movlw	112
  3217  0DB1  00D7               	movwf	??_getCDS_AD
  3218  0DB2  0857               	movf	??_getCDS_AD,w
  3219  0DB3  00F4               	movwf	getAD@adcon1
  3220  0DB4  0856               	movf	getCDS_AD@channel2,w
  3221  0DB5  158A  2511         	fcall	_getAD
  3222  0DB7  1283               	bcf	3,5	;RP0=0, select bank0
  3223  0DB8  1303               	bcf	3,6	;RP1=0, select bank0
  3224  0DB9  00D8               	movwf	??_getCDS_AD+1
  3225  0DBA  0858               	movf	??_getCDS_AD+1,w
  3226  0DBB  00AF               	movwf	__CDS+4
  3227                           
  3228                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3229  0DBC  082F               	movf	__CDS+4,w
  3230  0DBD  00D7               	movwf	??_getCDS_AD
  3231  0DBE  0857               	movf	??_getCDS_AD,w
  3232  0DBF  00AE               	movwf	__CDS+3
  3233  0DC0  0008               	return
  3234  0DC1                     __end_of_getCDS_AD:	
  3235                           
  3236                           	psect	text7
  3237  0D11                     __ptext7:	
  3238 ;; *************** function _getAD *****************
  3239 ;; Defined at:
  3240 ;;		line 420 in file "../src/MCU_B1.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  adcon0          1    wreg     unsigned char 
  3243 ;;  adcon1          1    4[COMMON] unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  adcon0          1    5[COMMON] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      unsigned char 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, pclath, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3255 ;;      Params:         1       0       0       0
  3256 ;;      Locals:         1       0       0       0
  3257 ;;      Temps:          0       0       0       0
  3258 ;;      Totals:         2       0       0       0
  3259 ;;Total ram usage:        2 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    3
  3262 ;; This function calls:
  3263 ;;		_Timeout_Counter
  3264 ;;		_set_TimeoutCleared
  3265 ;; This function is called by:
  3266 ;;		_getCDS_AD
  3267 ;;		_getLoad_AD
  3268 ;;		_getTemp_AD
  3269 ;;		_getPIR_AD
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _getAD
  3275  0D11                     _getAD:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3279                           ;getAD@adcon0 stored from wreg
  3280  0D11  00F5               	movwf	getAD@adcon0
  3281                           
  3282                           ;MCU_B1.c: 421: ADCON0 = adcon0;
  3283  0D12  0875               	movf	getAD@adcon0,w
  3284  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  3285  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  3286  0D15  009F               	movwf	31	;volatile
  3287                           
  3288                           ;MCU_B1.c: 422: ADCON1 = adcon1;
  3289  0D16  0874               	movf	getAD@adcon1,w
  3290  0D17  1683               	bsf	3,5	;RP0=1, select bank1
  3291  0D18  1303               	bcf	3,6	;RP1=0, select bank1
  3292  0D19  009F               	movwf	31	;volatile
  3293                           
  3294                           ;MCU_B1.c: 423: GO_nDONE = 1;
  3295  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  3296  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  3297  0D1C  149F               	bsf	31,1	;volatile
  3298                           
  3299                           ;MCU_B1.c: 424: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3300  0D1D  2D21               	goto	l4496
  3301  0D1E                     l4494:	
  3302                           
  3303                           ;MCU_B1.c: 425: Timeout_Counter();
  3304  0D1E  158A  2453  158A   	fcall	_Timeout_Counter
  3305  0D21                     l4496:	
  3306  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  3307  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0D23  1C9F               	btfss	31,1	;volatile
  3309  0D24  2D27               	goto	l4500
  3310  0D25  1D23               	btfss	_myMain+3,2
  3311  0D26  2D1E               	goto	l4494
  3312  0D27                     l4500:	
  3313                           
  3314                           ;MCU_B1.c: 426: };
  3315                           ;MCU_B1.c: 427: set_TimeoutCleared();
  3316  0D27  158A  2359         	fcall	_set_TimeoutCleared
  3317                           
  3318                           ;MCU_B1.c: 428: return ADRES;
  3319  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0D2B  081E               	movf	30,w	;volatile
  3322  0D2C  0008               	return
  3323  0D2D                     __end_of_getAD:	
  3324                           
  3325                           	psect	text8
  3326  0B59                     __ptext8:	
  3327 ;; *************** function _set_TimeoutCleared *****************
  3328 ;; Defined at:
  3329 ;;		line 282 in file "../src/Main_B1.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;		None               void
  3336 ;; Registers used:
  3337 ;;		status,2
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3343 ;;      Params:         0       0       0       0
  3344 ;;      Locals:         0       0       0       0
  3345 ;;      Temps:          0       0       0       0
  3346 ;;      Totals:         0       0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_getAD
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _set_TimeoutCleared
  3359  0B59                     _set_TimeoutCleared:	
  3360                           
  3361                           ;Main_B1.c: 283: myMain.Timeout = 0;
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _set_TimeoutCleared: [status,2]
  3365  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0B5B  1123               	bcf	_myMain+3,2
  3368                           
  3369                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  3370  0B5C  01A4               	clrf	_myMain+4
  3371  0B5D  01A5               	clrf	_myMain+5
  3372  0B5E  0008               	return
  3373  0B5F                     __end_of_set_TimeoutCleared:	
  3374                           
  3375                           	psect	text9
  3376  0C53                     __ptext9:	
  3377 ;; *************** function _Timeout_Counter *****************
  3378 ;; Defined at:
  3379 ;;		line 273 in file "../src/Main_B1.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;		None               void
  3386 ;; Registers used:
  3387 ;;		wreg, status,2
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3393 ;;      Params:         0       0       0       0
  3394 ;;      Locals:         0       0       0       0
  3395 ;;      Temps:          0       0       0       0
  3396 ;;      Totals:         0       0       0       0
  3397 ;;Total ram usage:        0 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    2
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_getAD
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _Timeout_Counter
  3409  0C53                     _Timeout_Counter:	
  3410                           
  3411                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  3412                           
  3413                           ;incstack = 0
  3414                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3415  0C53  3001               	movlw	1
  3416  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  3417  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  3418  0C56  07A4               	addwf	_myMain+4,f
  3419  0C57  1803               	skipnc
  3420  0C58  0AA5               	incf	_myMain+5,f
  3421  0C59  3000               	movlw	0
  3422  0C5A  07A5               	addwf	_myMain+5,f
  3423                           
  3424                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  3425  0C5B  3061               	movlw	97
  3426  0C5C  0625               	xorwf	_myMain+5,w
  3427  0C5D  1D03               	skipz
  3428  0C5E  2C61               	goto	u5085
  3429  0C5F  30A8               	movlw	168
  3430  0C60  0624               	xorwf	_myMain+4,w
  3431  0C61                     u5085:	
  3432  0C61  1D03               	skipz
  3433  0C62  0008               	return
  3434                           
  3435                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  3436  0C63  01A4               	clrf	_myMain+4
  3437  0C64  01A5               	clrf	_myMain+5
  3438                           
  3439                           ;Main_B1.c: 277: myMain.Timeout = 1;
  3440  0C65  1523               	bsf	_myMain+3,2
  3441  0C66  0008               	return
  3442  0C67                     __end_of_Timeout_Counter:	
  3443                           
  3444                           	psect	text10
  3445  0C1E                     __ptext10:	
  3446 ;; *************** function _WDT_Main *****************
  3447 ;; Defined at:
  3448 ;;		line 1091 in file "../src/MCU_B1.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;		None               void
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3462 ;;      Params:         0       0       0       0
  3463 ;;      Locals:         0       0       0       0
  3464 ;;      Temps:          1       0       0       0
  3465 ;;      Totals:         1       0       0       0
  3466 ;;Total ram usage:        1 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    3
  3469 ;; This function calls:
  3470 ;;		_WDT_Clearing
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _WDT_Main
  3478  0C1E                     _WDT_Main:	
  3479                           
  3480                           ;MCU_B1.c: 1092: if (WDT.Enable == 1) {
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3484  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  3485  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0C20  1C37               	btfss	_WDT,0
  3487  0C21  0008               	return
  3488                           
  3489                           ;MCU_B1.c: 1093: if (WDT.Timer-- > 0) {
  3490  0C22  3001               	movlw	1
  3491  0C23  02B8               	subwf	_WDT+1,f
  3492  0C24  0838               	movf	_WDT+1,w
  3493  0C25  3AFF               	xorlw	255
  3494  0C26  1903               	skipnz
  3495  0C27  0008               	return
  3496                           
  3497                           ;MCU_B1.c: 1094: WDT.Timer = 100;
  3498  0C28  3064               	movlw	100
  3499  0C29  00F4               	movwf	??_WDT_Main
  3500  0C2A  0874               	movf	??_WDT_Main,w
  3501  0C2B  00B8               	movwf	_WDT+1
  3502                           
  3503                           ;MCU_B1.c: 1095: WDT_Clearing();
  3504  0C2C  118A  2002         	fcall	_WDT_Clearing
  3505  0C2E  0008               	return
  3506  0C2F                     __end_of_WDT_Main:	
  3507                           
  3508                           	psect	text11
  3509  0002                     __ptext11:	
  3510 ;; *************** function _WDT_Clearing *****************
  3511 ;; Defined at:
  3512 ;;		line 1101 in file "../src/MCU_B1.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		None
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3526 ;;      Params:         0       0       0       0
  3527 ;;      Locals:         0       0       0       0
  3528 ;;      Temps:          0       0       0       0
  3529 ;;      Totals:         0       0       0       0
  3530 ;;Total ram usage:        0 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    2
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_WDT_Main
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _WDT_Clearing
  3542  0002                     _WDT_Clearing:	
  3543                           
  3544                           ;incstack = 0
  3545                           ; Regs used in _WDT_Clearing: []
  3546  0002  0064               	clrwdt	;# 
  3547  0003  0008               	return
  3548  0004                     __end_of_WDT_Clearing:	
  3549                           
  3550                           	psect	text12
  3551  0B39                     __ptext12:	
  3552 ;; *************** function _Temp_Main *****************
  3553 ;; Defined at:
  3554 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;		None               void
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, pclath, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3568 ;;      Params:         0       0       0       0
  3569 ;;      Locals:         0       0       0       0
  3570 ;;      Temps:          0       0       0       0
  3571 ;;      Totals:         0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    4
  3575 ;; This function calls:
  3576 ;;		_setTemp_Main
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _Temp_Main
  3584  0B39                     _Temp_Main:	
  3585                           
  3586                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3590  0B39  118A  2541         	fcall	_setTemp_Main
  3591  0B3B  0008               	return
  3592  0B3C                     __end_of_Temp_Main:	
  3593                           
  3594                           	psect	text13
  3595  0541                     __ptext13:	
  3596 ;; *************** function _setTemp_Main *****************
  3597 ;; Defined at:
  3598 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  error           1    8[BANK0 ] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;		None               void
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, pclath, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3612 ;;      Params:         0       0       0       0
  3613 ;;      Locals:         0       1       0       0
  3614 ;;      Temps:          1       0       0       0
  3615 ;;      Totals:         1       1       0       0
  3616 ;;Total ram usage:        2 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    3
  3619 ;; This function calls:
  3620 ;;		___awdiv
  3621 ;;		_getMain_All_Error_Status
  3622 ;;		_getMain_All_LightsStatus
  3623 ;; This function is called by:
  3624 ;;		_Temp_Main
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _setTemp_Main
  3630  0541                     _setTemp_Main:	
  3631                           
  3632                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3636  0541  3000               	movlw	0
  3637  0542  158A  2625  118A   	fcall	_getMain_All_Error_Status
  3638  0545  00F5               	movwf	??_setTemp_Main
  3639  0546  0875               	movf	??_setTemp_Main,w
  3640  0547  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0548  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0549  00DE               	movwf	setTemp_Main@error
  3643                           
  3644                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3645  054A  1C3B               	btfss	_Temp,0
  3646  054B  2DC3               	goto	l824
  3647                           
  3648                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3649  054C  193B               	btfsc	_Temp,2
  3650  054D  2D5F               	goto	l4588
  3651                           
  3652                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3653  054E  3001               	movlw	1
  3654  054F  07BC               	addwf	_Temp+1,f
  3655  0550  1803               	skipnc
  3656  0551  0ABD               	incf	_Temp+2,f
  3657  0552  3000               	movlw	0
  3658  0553  07BD               	addwf	_Temp+2,f
  3659                           
  3660                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  3661  0554  3000               	movlw	0
  3662  0555  023D               	subwf	_Temp+2,w
  3663  0556  30FA               	movlw	250
  3664  0557  1903               	skipnz
  3665  0558  023C               	subwf	_Temp+1,w
  3666  0559  1C03               	skipc
  3667  055A  0008               	return
  3668                           
  3669                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3670  055B  01BC               	clrf	_Temp+1
  3671  055C  01BD               	clrf	_Temp+2
  3672                           
  3673                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3674  055D  153B               	bsf	_Temp,2
  3675                           
  3676                           ;OverTemperature_B1.c: 70: }
  3677                           ;OverTemperature_B1.c: 71: } else {
  3678  055E  0008               	return
  3679  055F                     l4588:	
  3680                           
  3681                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3682  055F  3001               	movlw	1
  3683  0560  07BC               	addwf	_Temp+1,f
  3684  0561  1803               	skipnc
  3685  0562  0ABD               	incf	_Temp+2,f
  3686  0563  3000               	movlw	0
  3687  0564  07BD               	addwf	_Temp+2,f
  3688                           
  3689                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  3690  0565  3000               	movlw	0
  3691  0566  023D               	subwf	_Temp+2,w
  3692  0567  3002               	movlw	2
  3693  0568  1903               	skipnz
  3694  0569  023C               	subwf	_Temp+1,w
  3695  056A  1C03               	skipc
  3696  056B  0008               	return
  3697                           
  3698                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3699  056C  01BC               	clrf	_Temp+1
  3700  056D  01BD               	clrf	_Temp+2
  3701                           
  3702                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3703  056E  0842               	movf	_Temp+7,w
  3704  056F  1903               	btfsc	3,2
  3705  0570  2DC0               	goto	l829
  3706  0571  0843               	movf	_Temp+8,w
  3707  0572  1903               	btfsc	3,2
  3708  0573  2DC0               	goto	l829
  3709                           
  3710                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3711  0574  113B               	bcf	_Temp,2
  3712                           
  3713                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3714  0575  3002               	movlw	2
  3715  0576  00D6               	movwf	___awdiv@divisor
  3716  0577  3000               	movlw	0
  3717  0578  00D7               	movwf	___awdiv@divisor+1
  3718  0579  0842               	movf	_Temp+7,w
  3719  057A  0743               	addwf	_Temp+8,w
  3720  057B  00D8               	movwf	___awdiv@dividend
  3721  057C  01D9               	clrf	___awdiv@dividend+1
  3722  057D  0DD9               	rlf	___awdiv@dividend+1,f
  3723  057E  118A  27A2  118A   	fcall	___awdiv
  3724  0581  1283               	bcf	3,5	;RP0=0, select bank0
  3725  0582  1303               	bcf	3,6	;RP1=0, select bank0
  3726  0583  0856               	movf	?___awdiv,w
  3727  0584  00F5               	movwf	??_setTemp_Main
  3728  0585  0875               	movf	??_setTemp_Main,w
  3729  0586  00C1               	movwf	_Temp+6
  3730                           
  3731                           ;OverTemperature_B1.c: 81: if (getMain_All_LightsStatus() == 1) {
  3732  0587  158A  238D  118A   	fcall	_getMain_All_LightsStatus
  3733  058A  3A01               	xorlw	1
  3734  058B  1D03               	skipz
  3735  058C  2D95               	goto	l4604
  3736                           
  3737                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3738  058D  3085               	movlw	133
  3739  058E  00F5               	movwf	??_setTemp_Main
  3740  058F  0875               	movf	??_setTemp_Main,w
  3741  0590  1283               	bcf	3,5	;RP0=0, select bank0
  3742  0591  1303               	bcf	3,6	;RP1=0, select bank0
  3743  0592  00C5               	movwf	_Temp+10
  3744                           
  3745                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3746  0593  3070               	movlw	112
  3747  0594  2D9C               	goto	L7
  3748  0595                     l4604:	
  3749                           ;OverTemperature_B1.c: 84: } else {
  3750                           
  3751                           
  3752                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3753  0595  304F               	movlw	79
  3754  0596  00F5               	movwf	??_setTemp_Main
  3755  0597  0875               	movf	??_setTemp_Main,w
  3756  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3758  059A  00C5               	movwf	_Temp+10
  3759                           
  3760                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3761  059B  3040               	movlw	64
  3762  059C                     L7:	
  3763  059C  00F5               	movwf	??_setTemp_Main
  3764  059D  0875               	movf	??_setTemp_Main,w
  3765  059E  00C6               	movwf	_Temp+11
  3766                           
  3767                           ;OverTemperature_B1.c: 87: }
  3768                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3769  059F  1CBB               	btfss	_Temp,1
  3770  05A0  2DB0               	goto	l4620
  3771                           
  3772                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3773  05A1  0845               	movf	_Temp+10,w
  3774  05A2  0241               	subwf	_Temp+6,w
  3775  05A3  1C03               	skipc
  3776  05A4  2DBF               	goto	l4630
  3777                           
  3778                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3779  05A5  3001               	movlw	1
  3780  05A6  00F5               	movwf	??_setTemp_Main
  3781  05A7  0875               	movf	??_setTemp_Main,w
  3782  05A8  07BE               	addwf	_Temp+3,f
  3783                           
  3784                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3785  05A9  3003               	movlw	3
  3786  05AA  023E               	subwf	_Temp+3,w
  3787  05AB  1C03               	skipc
  3788  05AC  2DC0               	goto	l829
  3789                           
  3790                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3791  05AD  01BE               	clrf	_Temp+3
  3792                           
  3793                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3794  05AE  10BB               	bcf	_Temp,1
  3795                           
  3796                           ;OverTemperature_B1.c: 103: }
  3797                           ;OverTemperature_B1.c: 104: } else {
  3798                           
  3799                           ;OverTemperature_B1.c: 102: ;;
  3800  05AF  2DC0               	goto	l829
  3801  05B0                     l4620:	
  3802                           ;OverTemperature_B1.c: 106: }
  3803                           ;OverTemperature_B1.c: 107: } else {
  3804                           
  3805                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3806                           
  3807                           
  3808                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3809  05B0  0841               	movf	_Temp+6,w
  3810  05B1  0246               	subwf	_Temp+11,w
  3811  05B2  1C03               	skipc
  3812  05B3  2DBF               	goto	l4630
  3813                           
  3814                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3815  05B4  3001               	movlw	1
  3816  05B5  00F5               	movwf	??_setTemp_Main
  3817  05B6  0875               	movf	??_setTemp_Main,w
  3818  05B7  07BE               	addwf	_Temp+3,f
  3819                           
  3820                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3821  05B8  3003               	movlw	3
  3822  05B9  023E               	subwf	_Temp+3,w
  3823  05BA  1C03               	skipc
  3824  05BB  2DC0               	goto	l829
  3825                           
  3826                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3827  05BC  01BE               	clrf	_Temp+3
  3828                           
  3829                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3830  05BD  14BB               	bsf	_Temp,1
  3831                           
  3832                           ;OverTemperature_B1.c: 113: }
  3833                           ;OverTemperature_B1.c: 114: } else {
  3834  05BE  2DC0               	goto	l829
  3835  05BF                     l4630:	
  3836                           
  3837                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3838  05BF  01BE               	clrf	_Temp+3
  3839  05C0                     l829:	
  3840                           ;OverTemperature_B1.c: 116: }
  3841                           ;OverTemperature_B1.c: 117: }
  3842                           ;OverTemperature_B1.c: 118: ;;
  3843                           ;OverTemperature_B1.c: 119: ;;
  3844                           
  3845                           
  3846                           ;OverTemperature_B1.c: 135: }
  3847                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3848  05C0  01C2               	clrf	_Temp+7
  3849                           
  3850                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3851  05C1  01C3               	clrf	_Temp+8
  3852                           
  3853                           ;OverTemperature_B1.c: 138: }
  3854                           ;OverTemperature_B1.c: 139: }
  3855                           ;OverTemperature_B1.c: 141: } else {
  3856  05C2  0008               	return
  3857  05C3                     l824:	
  3858                           
  3859                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3860  05C3  1C20               	btfss	_myMain,0
  3861  05C4  0008               	return
  3862                           
  3863                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3864  05C5  143B               	bsf	_Temp,0
  3865  05C6  0008               	return
  3866  05C7                     __end_of_setTemp_Main:	
  3867                           
  3868                           	psect	text14
  3869  0B36                     __ptext14:	
  3870 ;; *************** function _Temp_Initialization *****************
  3871 ;; Defined at:
  3872 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;		None
  3877 ;; Return value:  Size  Location     Type
  3878 ;;		None               void
  3879 ;; Registers used:
  3880 ;;		status,2, status,0, pclath, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3886 ;;      Params:         0       0       0       0
  3887 ;;      Locals:         0       0       0       0
  3888 ;;      Temps:          0       0       0       0
  3889 ;;      Totals:         0       0       0       0
  3890 ;;Total ram usage:        0 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    3
  3893 ;; This function calls:
  3894 ;;		_setTemp_Initialization
  3895 ;; This function is called by:
  3896 ;;		_main
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function _Temp_Initialization
  3902  0B36                     _Temp_Initialization:	
  3903                           
  3904                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3908  0B36  158A  2329         	fcall	_setTemp_Initialization
  3909  0B38  0008               	return
  3910  0B39                     __end_of_Temp_Initialization:	
  3911                           
  3912                           	psect	text15
  3913  0B29                     __ptext15:	
  3914 ;; *************** function _setTemp_Initialization *****************
  3915 ;; Defined at:
  3916 ;;		line 44 in file "../src/OverTemperature_B1.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;		None
  3921 ;; Return value:  Size  Location     Type
  3922 ;;		None               void
  3923 ;; Registers used:
  3924 ;;		None
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3930 ;;      Params:         0       0       0       0
  3931 ;;      Locals:         0       0       0       0
  3932 ;;      Temps:          0       0       0       0
  3933 ;;      Totals:         0       0       0       0
  3934 ;;Total ram usage:        0 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    2
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_Temp_Initialization
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           
  3945                           ;psect for function _setTemp_Initialization
  3946  0B29                     _setTemp_Initialization:	
  3947                           
  3948                           ;incstack = 0
  3949                           ; Regs used in _setTemp_Initialization: []
  3950  0B29  0008               	return
  3951  0B2A                     __end_of_setTemp_Initialization:	
  3952                           
  3953                           	psect	text16
  3954  0B33                     __ptext16:	
  3955 ;; *************** function _SYSC_Main *****************
  3956 ;; Defined at:
  3957 ;;		line 17 in file "../src/SYSC_B1.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;		None
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;		None
  3962 ;; Return value:  Size  Location     Type
  3963 ;;		None               void
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3971 ;;      Params:         0       0       0       0
  3972 ;;      Locals:         0       0       0       0
  3973 ;;      Temps:          0       0       0       0
  3974 ;;      Totals:         0       0       0       0
  3975 ;;Total ram usage:        0 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    4
  3978 ;; This function calls:
  3979 ;;		_setSYSC_Main
  3980 ;; This function is called by:
  3981 ;;		_main
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           
  3986                           ;psect for function _SYSC_Main
  3987  0B33                     _SYSC_Main:	
  3988                           
  3989                           ;SYSC_B1.c: 19: setSYSC_Main();
  3990                           
  3991                           ;incstack = 0
  3992                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  3993  0B33  158A  26A3         	fcall	_setSYSC_Main
  3994  0B35  0008               	return
  3995  0B36                     __end_of_SYSC_Main:	
  3996                           
  3997                           	psect	text17
  3998  0EA3                     __ptext17:	
  3999 ;; *************** function _setSYSC_Main *****************
  4000 ;; Defined at:
  4001 ;;		line 23 in file "../src/SYSC_B1.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4015 ;;      Params:         0       0       0       0
  4016 ;;      Locals:         0       0       0       0
  4017 ;;      Temps:          0       0       0       0
  4018 ;;      Totals:         0       0       0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    3
  4022 ;; This function calls:
  4023 ;;		_getMain_All_Error_Status
  4024 ;; This function is called by:
  4025 ;;		_SYSC_Main
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           
  4030                           ;psect for function _setSYSC_Main
  4031  0EA3                     _setSYSC_Main:	
  4032                           
  4033                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4037  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  4039  0EA5  1C26               	btfss	_SYSC,0
  4040  0EA6  0008               	return
  4041                           
  4042                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4043  0EA7  18A6               	btfsc	_SYSC,1
  4044  0EA8  2EBA               	goto	l3468
  4045                           
  4046                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4047  0EA9  3001               	movlw	1
  4048  0EAA  07A7               	addwf	_SYSC+1,f
  4049  0EAB  1803               	skipnc
  4050  0EAC  0AA8               	incf	_SYSC+2,f
  4051  0EAD  3000               	movlw	0
  4052  0EAE  07A8               	addwf	_SYSC+2,f
  4053                           
  4054                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4055  0EAF  3000               	movlw	0
  4056  0EB0  0228               	subwf	_SYSC+2,w
  4057  0EB1  3008               	movlw	8
  4058  0EB2  1903               	skipnz
  4059  0EB3  0227               	subwf	_SYSC+1,w
  4060  0EB4  1C03               	skipc
  4061  0EB5  0008               	return
  4062                           
  4063                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4064  0EB6  01A7               	clrf	_SYSC+1
  4065  0EB7  01A8               	clrf	_SYSC+2
  4066                           
  4067                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4068  0EB8  14A6               	bsf	_SYSC,1
  4069                           
  4070                           ;SYSC_B1.c: 31: }
  4071                           ;SYSC_B1.c: 32: } else {
  4072  0EB9  0008               	return
  4073  0EBA                     l3468:	
  4074                           
  4075                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4076  0EBA  3001               	movlw	1
  4077  0EBB  158A  2625  158A   	fcall	_getMain_All_Error_Status
  4078  0EBE  3800               	iorlw	0
  4079  0EBF  1D03               	skipz
  4080  0EC0  0008               	return
  4081                           
  4082                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4083  0EC1  3001               	movlw	1
  4084  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  4085  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0EC4  07A7               	addwf	_SYSC+1,f
  4087  0EC5  1803               	skipnc
  4088  0EC6  0AA8               	incf	_SYSC+2,f
  4089  0EC7  3000               	movlw	0
  4090  0EC8  07A8               	addwf	_SYSC+2,f
  4091                           
  4092                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4093  0EC9  3019               	movlw	25
  4094  0ECA  0627               	xorwf	_SYSC+1,w
  4095  0ECB  0428               	iorwf	_SYSC+2,w
  4096  0ECC  1D03               	skipz
  4097  0ECD  2ED3               	goto	l3474
  4098                           
  4099                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4100  0ECE  01A7               	clrf	_SYSC+1
  4101  0ECF  01A8               	clrf	_SYSC+2
  4102                           
  4103                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4104  0ED0  01A9               	clrf	_SYSC+3
  4105  0ED1  01AA               	clrf	_SYSC+4
  4106                           
  4107                           ;SYSC_B1.c: 38: } else {
  4108  0ED2  0008               	return
  4109  0ED3                     l3474:	
  4110                           
  4111                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4112  0ED3  3001               	movlw	1
  4113  0ED4  07A9               	addwf	_SYSC+3,f
  4114  0ED5  1803               	skipnc
  4115  0ED6  0AAA               	incf	_SYSC+4,f
  4116  0ED7  3000               	movlw	0
  4117  0ED8  07AA               	addwf	_SYSC+4,f
  4118                           
  4119                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4120  0ED9  3001               	movlw	1
  4121  0EDA  062A               	xorwf	_SYSC+4,w
  4122  0EDB  1D03               	skipz
  4123  0EDC  2EDF               	goto	u3245
  4124  0EDD  30F4               	movlw	244
  4125  0EDE  0629               	xorwf	_SYSC+3,w
  4126  0EDF                     u3245:	
  4127  0EDF  1D03               	skipz
  4128  0EE0  0008               	return
  4129                           
  4130                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4131  0EE1  01A9               	clrf	_SYSC+3
  4132  0EE2  01AA               	clrf	_SYSC+4
  4133                           
  4134                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4135  0EE3  10A6               	bcf	_SYSC,1
  4136  0EE4  0008               	return
  4137  0EE5                     __end_of_setSYSC_Main:	
  4138                           
  4139                           	psect	text18
  4140  0B30                     __ptext18:	
  4141 ;; *************** function _SYSC_Initialization *****************
  4142 ;; Defined at:
  4143 ;;		line 7 in file "../src/SYSC_B1.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;		None               void
  4150 ;; Registers used:
  4151 ;;		status,2, status,0, pclath, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4157 ;;      Params:         0       0       0       0
  4158 ;;      Locals:         0       0       0       0
  4159 ;;      Temps:          0       0       0       0
  4160 ;;      Totals:         0       0       0       0
  4161 ;;Total ram usage:        0 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    3
  4164 ;; This function calls:
  4165 ;;		_setSYSC_Initialization
  4166 ;; This function is called by:
  4167 ;;		_main
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _SYSC_Initialization
  4173  0B30                     _SYSC_Initialization:	
  4174                           
  4175                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4179  0B30  158A  2344         	fcall	_setSYSC_Initialization
  4180  0B32  0008               	return
  4181  0B33                     __end_of_SYSC_Initialization:	
  4182                           
  4183                           	psect	text19
  4184  0B44                     __ptext19:	
  4185 ;; *************** function _setSYSC_Initialization *****************
  4186 ;; Defined at:
  4187 ;;		line 13 in file "../src/SYSC_B1.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		None
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4201 ;;      Params:         0       0       0       0
  4202 ;;      Locals:         0       0       0       0
  4203 ;;      Temps:          0       0       0       0
  4204 ;;      Totals:         0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    2
  4208 ;; This function calls:
  4209 ;;		Nothing
  4210 ;; This function is called by:
  4211 ;;		_SYSC_Initialization
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _setSYSC_Initialization
  4217  0B44                     _setSYSC_Initialization:	
  4218                           
  4219                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _setSYSC_Initialization: []
  4223  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  4224  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  4225  0B46  1426               	bsf	_SYSC,0
  4226  0B47  0008               	return
  4227  0B48                     __end_of_setSYSC_Initialization:	
  4228                           
  4229                           	psect	text20
  4230  0026                     __ptext20:	
  4231 ;; *************** function _PIR_Main *****************
  4232 ;; Defined at:
  4233 ;;		line 13 in file "../src/PIR_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  cds             1   14[BANK0 ] unsigned char 
  4238 ;;  error           1   11[BANK0 ] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;		None               void
  4241 ;; Registers used:
  4242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4248 ;;      Params:         0       0       0       0
  4249 ;;      Locals:         0       4       0       0
  4250 ;;      Temps:          0       5       0       0
  4251 ;;      Totals:         0       9       0       0
  4252 ;;Total ram usage:        9 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    4
  4255 ;; This function calls:
  4256 ;;		_getCDS_Status
  4257 ;;		_getLights_Status
  4258 ;;		_getMain_All_Error_Status
  4259 ;;		_setLED
  4260 ;;		_setLights_Trigger
  4261 ;; This function is called by:
  4262 ;;		_main
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _PIR_Main
  4268  0026                     _PIR_Main:	
  4269                           
  4270                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4274  0026  3000               	movlw	0
  4275  0027  158A  2625  118A   	fcall	_getMain_All_Error_Status
  4276  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4277  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4278  002C  00DC               	movwf	??_PIR_Main
  4279  002D  085C               	movf	??_PIR_Main,w
  4280  002E  00E1               	movwf	PIR_Main@error
  4281                           
  4282                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4283  002F  158A  237D  118A   	fcall	_getCDS_Status
  4284  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4285  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0034  00DC               	movwf	??_PIR_Main
  4287  0035  085C               	movf	??_PIR_Main,w
  4288  0036  00E4               	movwf	PIR_Main@cds
  4289                           
  4290                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4291  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4292  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4293  0039  1C20               	btfss	__PIR^(0+128),0
  4294  003A  2A04               	goto	l896
  4295                           
  4296                           ;PIR_B1.c: 17: if (error == 0) {
  4297  003B  1283               	bcf	3,5	;RP0=0, select bank0
  4298  003C  1303               	bcf	3,6	;RP1=0, select bank0
  4299  003D  08E1               	movf	PIR_Main@error,f
  4300  003E  1D03               	skipz
  4301  003F  2879               	goto	l897
  4302                           
  4303                           ;PIR_B1.c: 19: if (cds == 1) {
  4304  0040  0864               	movf	PIR_Main@cds,w
  4305  0041  3A01               	xorlw	1
  4306  0042  1D03               	skipz
  4307  0043  2848               	goto	l898
  4308                           
  4309                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4310  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4311  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4312  0046  17A0               	bsf	__PIR^(0+128),7
  4313                           
  4314                           ;PIR_B1.c: 21: } else {
  4315  0047  2869               	goto	l5070
  4316  0048                     l898:	
  4317                           
  4318                           ;PIR_B1.c: 22: _PIR.Available = 0;
  4319  0048  1683               	bsf	3,5	;RP0=1, select bank1
  4320  0049  1303               	bcf	3,6	;RP1=0, select bank1
  4321  004A  13A0               	bcf	__PIR^(0+128),7
  4322                           
  4323                           ;PIR_B1.c: 23: if (_PIR.OK == 1) {
  4324  004B  1DA0               	btfss	__PIR^(0+128),3
  4325  004C  2869               	goto	l5070
  4326                           
  4327                           ;PIR_B1.c: 25: if (getLights_Status(1) == 1) {
  4328  004D  3001               	movlw	1
  4329  004E  158A  240D  118A   	fcall	_getLights_Status
  4330  0051  3A01               	xorlw	1
  4331  0052  1D03               	skipz
  4332  0053  285B               	goto	l901
  4333                           
  4334                           ;PIR_B1.c: 26: setLights_Trigger(1, 0);
  4335  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0055  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0056  01D6               	clrf	setLights_Trigger@command
  4338  0057  3001               	movlw	1
  4339  0058  158A  24F6  118A   	fcall	_setLights_Trigger
  4340  005B                     l901:	
  4341                           
  4342                           ;PIR_B1.c: 27: }
  4343                           ;PIR_B1.c: 29: setLED(1, 0);
  4344  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4345  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4346  005D  01D6               	clrf	setLED@command
  4347  005E  3001               	movlw	1
  4348  005F  158A  2735  118A   	fcall	_setLED
  4349                           
  4350                           ;PIR_B1.c: 30: setLED(2, 0);
  4351  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0064  01D6               	clrf	setLED@command
  4354  0065  3002               	movlw	2
  4355  0066  158A  2735  118A   	fcall	_setLED
  4356  0069                     l5070:	
  4357                           
  4358                           ;PIR_B1.c: 31: }
  4359                           ;PIR_B1.c: 32: }
  4360                           ;PIR_B1.c: 36: if (_PIR.Detect == 0) {
  4361  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4362  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4363  006B  1A20               	btfsc	__PIR^(0+128),4
  4364  006C  287F               	goto	l904
  4365                           
  4366                           ;PIR_B1.c: 37: _PIR.Detect = 1;
  4367  006D  1620               	bsf	__PIR^(0+128),4
  4368                           
  4369                           ;PIR_B1.c: 38: if (_PIR.OK == 0) {
  4370  006E  19A0               	btfsc	__PIR^(0+128),3
  4371  006F  287F               	goto	l904
  4372                           
  4373                           ;PIR_B1.c: 39: setLED(1, 1);
  4374  0070  1283               	bcf	3,5	;RP0=0, select bank0
  4375  0071  1303               	bcf	3,6	;RP1=0, select bank0
  4376  0072  01D6               	clrf	setLED@command
  4377  0073  0AD6               	incf	setLED@command,f
  4378  0074  3001               	movlw	1
  4379  0075  158A  2735  118A   	fcall	_setLED
  4380                           
  4381                           ;PIR_B1.c: 40: }
  4382                           ;PIR_B1.c: 41: }
  4383                           ;PIR_B1.c: 42: } else {
  4384  0078  287F               	goto	l904
  4385  0079                     l897:	
  4386                           
  4387                           ;PIR_B1.c: 43: if (_PIR.Detect == 1) {
  4388  0079  1683               	bsf	3,5	;RP0=1, select bank1
  4389  007A  1303               	bcf	3,6	;RP1=0, select bank1
  4390  007B  1E20               	btfss	__PIR^(0+128),4
  4391  007C  287F               	goto	l904
  4392                           
  4393                           ;PIR_B1.c: 44: _PIR.Detect = 0;
  4394  007D  1220               	bcf	__PIR^(0+128),4
  4395                           
  4396                           ;PIR_B1.c: 45: _PIR.Available = 0;
  4397  007E  13A0               	bcf	__PIR^(0+128),7
  4398  007F                     l904:	
  4399                           
  4400                           ;PIR_B1.c: 63: }
  4401                           ;PIR_B1.c: 64: }
  4402                           ;PIR_B1.c: 66: if (_PIR.ADtoGO == 0) {
  4403  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4404  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4405  0081  18A0               	btfsc	__PIR^(0+128),1
  4406  0082  2892               	goto	l906
  4407                           
  4408                           ;PIR_B1.c: 67: _PIR.Time++;
  4409  0083  3001               	movlw	1
  4410  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4411  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4412  0086  00DC               	movwf	??_PIR_Main
  4413  0087  085C               	movf	??_PIR_Main,w
  4414  0088  1683               	bsf	3,5	;RP0=1, select bank1
  4415  0089  1303               	bcf	3,6	;RP1=0, select bank1
  4416  008A  07A5               	addwf	(__PIR^(0+128)+5),f
  4417                           
  4418                           ;PIR_B1.c: 68: if (_PIR.Time == (100 / 20)) {
  4419  008B  0825               	movf	(__PIR^(0+128)+5),w
  4420  008C  3A05               	xorlw	5
  4421  008D  1D03               	skipz
  4422  008E  29A5               	goto	l5160
  4423                           
  4424                           ;PIR_B1.c: 69: _PIR.Time = 0;
  4425  008F  01A5               	clrf	(__PIR^(0+128)+5)
  4426                           
  4427                           ;PIR_B1.c: 70: _PIR.ADtoGO = 1;
  4428  0090  14A0               	bsf	__PIR^(0+128),1
  4429                           
  4430                           ;PIR_B1.c: 71: }
  4431                           ;PIR_B1.c: 72: } else {
  4432  0091  29A5               	goto	l5160
  4433  0092                     l906:	
  4434                           
  4435                           ;PIR_B1.c: 73: if (_PIR.GO == 1) {
  4436  0092  1D20               	btfss	__PIR^(0+128),2
  4437  0093  29A5               	goto	l5160
  4438                           
  4439                           ;PIR_B1.c: 74: _PIR.GO = 0;
  4440  0094  1120               	bcf	__PIR^(0+128),2
  4441                           
  4442                           ;PIR_B1.c: 75: _PIR.ADtoGO = 0;
  4443  0095  10A0               	bcf	__PIR^(0+128),1
  4444                           
  4445                           ;PIR_B1.c: 76: if (_PIR.Available == 1) {
  4446  0096  1BA0               	btfsc	__PIR^(0+128),7
  4447                           
  4448                           ;PIR_B1.c: 77: if (_PIR.OK == 1) {
  4449  0097  1DA0               	btfss	__PIR^(0+128),3
  4450  0098  29A5               	goto	l5160
  4451                           
  4452                           ;PIR_B1.c: 79: _PIR.Time++;
  4453  0099  3001               	movlw	1
  4454  009A  1283               	bcf	3,5	;RP0=0, select bank0
  4455  009B  1303               	bcf	3,6	;RP1=0, select bank0
  4456  009C  00DC               	movwf	??_PIR_Main
  4457  009D  085C               	movf	??_PIR_Main,w
  4458  009E  1683               	bsf	3,5	;RP0=1, select bank1
  4459  009F  1303               	bcf	3,6	;RP1=0, select bank1
  4460  00A0  07A5               	addwf	(__PIR^(0+128)+5),f
  4461                           
  4462                           ;PIR_B1.c: 80: if (_PIR.Time == 60) {
  4463  00A1  0825               	movf	(__PIR^(0+128)+5),w
  4464  00A2  3A3C               	xorlw	60
  4465  00A3  1D03               	skipz
  4466  00A4  28D9               	goto	l5126
  4467                           
  4468                           ;PIR_B1.c: 81: _PIR.Time = 0;
  4469  00A5  01A5               	clrf	(__PIR^(0+128)+5)
  4470                           
  4471                           ;PIR_B1.c: 82: if (_PIR.RangeCount >= 90) {
  4472  00A6  305A               	movlw	90
  4473  00A7  024B               	subwf	(__PIR^(0+128)+43),w
  4474  00A8  1C03               	skipc
  4475  00A9  28B5               	goto	l5108
  4476                           
  4477                           ;PIR_B1.c: 83: _PIR.RangeTime1 = 0;
  4478  00AA  01CA               	clrf	(__PIR^(0+128)+42)
  4479                           
  4480                           ;PIR_B1.c: 85: if (_PIR.RangeValue == 25) {
  4481  00AB  084C               	movf	(__PIR^(0+128)+44),w
  4482  00AC  3A19               	xorlw	25
  4483  00AD  1903               	btfsc	3,2
  4484  00AE  28CA               	goto	L14
  4485                           
  4486                           ;PIR_B1.c: 87: } else if (_PIR.RangeValue == (25+10)) {
  4487                           
  4488                           ;PIR_B1.c: 86: _PIR.RangeValue = (25+10);
  4489  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4490  00B0  3A23               	xorlw	35
  4491  00B1  1D03               	skipz
  4492  00B2  28D8               	goto	l5124
  4493                           
  4494                           ;PIR_B1.c: 88: _PIR.RangeValue = (25+20);
  4495  00B3  302D               	movlw	45
  4496  00B4  28D1               	goto	L10
  4497  00B5                     l5108:	
  4498                           ;PIR_B1.c: 89: }
  4499                           ;PIR_B1.c: 90: } else if (_PIR.RangeCount <= 10) {
  4500                           
  4501  00B5  300B               	movlw	11
  4502  00B6  024B               	subwf	(__PIR^(0+128)+43),w
  4503  00B7  1803               	skipnc
  4504  00B8  28D8               	goto	l5124
  4505                           
  4506                           ;PIR_B1.c: 91: _PIR.RangeTime1++;
  4507  00B9  3001               	movlw	1
  4508  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4509  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4510  00BC  00DC               	movwf	??_PIR_Main
  4511  00BD  085C               	movf	??_PIR_Main,w
  4512  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  4513  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  4514  00C0  07CA               	addwf	(__PIR^(0+128)+42),f
  4515                           
  4516                           ;PIR_B1.c: 92: if (_PIR.RangeTime1 == 2) {
  4517  00C1  084A               	movf	(__PIR^(0+128)+42),w
  4518  00C2  3A02               	xorlw	2
  4519  00C3  1D03               	skipz
  4520  00C4  28D8               	goto	l5124
  4521                           
  4522                           ;PIR_B1.c: 93: _PIR.RangeTime1 = 0;
  4523  00C5  01CA               	clrf	(__PIR^(0+128)+42)
  4524                           
  4525                           ;PIR_B1.c: 95: if (_PIR.RangeValue == (25+20)) {
  4526  00C6  084C               	movf	(__PIR^(0+128)+44),w
  4527  00C7  3A2D               	xorlw	45
  4528  00C8  1D03               	skipz
  4529  00C9  28CC               	goto	l5120
  4530  00CA                     L14:	
  4531                           
  4532                           ;PIR_B1.c: 96: _PIR.RangeValue = (25+10);
  4533  00CA  3023               	movlw	35
  4534  00CB  28D1               	goto	L10
  4535  00CC                     l5120:	
  4536                           ;PIR_B1.c: 97: } else if (_PIR.RangeValue == (25+10)) {
  4537                           
  4538  00CC  084C               	movf	(__PIR^(0+128)+44),w
  4539  00CD  3A23               	xorlw	35
  4540  00CE  1D03               	skipz
  4541  00CF  28D8               	goto	l5124
  4542                           
  4543                           ;PIR_B1.c: 98: _PIR.RangeValue = 25;
  4544  00D0  3019               	movlw	25
  4545  00D1                     L10:	
  4546  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4547  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4548  00D3  00DC               	movwf	??_PIR_Main
  4549  00D4  085C               	movf	??_PIR_Main,w
  4550  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  4551  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  4552  00D7  00CC               	movwf	(__PIR^(0+128)+44)
  4553  00D8                     l5124:	
  4554                           
  4555                           ;PIR_B1.c: 99: }
  4556                           ;PIR_B1.c: 100: }
  4557                           ;PIR_B1.c: 101: }
  4558                           ;PIR_B1.c: 102: _PIR.RangeCount = 0;
  4559  00D8  01CB               	clrf	(__PIR^(0+128)+43)
  4560  00D9                     l5126:	
  4561                           
  4562                           ;PIR_B1.c: 103: }
  4563                           ;PIR_B1.c: 106: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4564                           ;PIR_B1.c: 107: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4565  00D9  084C               	movf	(__PIR^(0+128)+44),w
  4566  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4567  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  4568  00DC  00DC               	movwf	??_PIR_Main
  4569  00DD  01DD               	clrf	??_PIR_Main+1
  4570  00DE  09DC               	comf	??_PIR_Main,f
  4571  00DF  09DD               	comf	??_PIR_Main+1,f
  4572  00E0  0ADC               	incf	??_PIR_Main,f
  4573  00E1  1903               	skipnz
  4574  00E2  0ADD               	incf	??_PIR_Main+1,f
  4575  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  4576  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  4577  00E5  0826               	movf	(__PIR^(0+128)+6),w
  4578  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4579  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4580  00E8  075C               	addwf	??_PIR_Main,w
  4581  00E9  00DE               	movwf	??_PIR_Main+2
  4582  00EA  085D               	movf	??_PIR_Main+1,w
  4583  00EB  1803               	skipnc
  4584  00EC  0A5D               	incf	??_PIR_Main+1,w
  4585  00ED  00DF               	movwf	??_PIR_Main+3
  4586  00EE  085F               	movf	??_PIR_Main+3,w
  4587  00EF  3A80               	xorlw	128
  4588  00F0  3C80               	sublw	128
  4589  00F1  1D03               	skipz
  4590  00F2  28F7               	goto	u6665
  4591  00F3  085E               	movf	??_PIR_Main+2,w
  4592  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4593  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4594  00F6  0221               	subwf	(__PIR^(0+128)+1),w
  4595  00F7                     u6665:	
  4596  00F7  1C03               	skipc
  4597  00F8  2919               	goto	l5136
  4598  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4599  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4600  00FB  0826               	movf	(__PIR^(0+128)+6),w
  4601  00FC  074C               	addwf	(__PIR^(0+128)+44),w
  4602  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  4603  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  4604  00FF  00DC               	movwf	??_PIR_Main
  4605  0100  01DD               	clrf	??_PIR_Main+1
  4606  0101  0DDD               	rlf	??_PIR_Main+1,f
  4607  0102  085D               	movf	??_PIR_Main+1,w
  4608  0103  3A80               	xorlw	128
  4609  0104  00DE               	movwf	??_PIR_Main+2
  4610  0105  3080               	movlw	128
  4611  0106  025E               	subwf	??_PIR_Main+2,w
  4612  0107  1D03               	skipz
  4613  0108  290F               	goto	u6675
  4614  0109  1683               	bsf	3,5	;RP0=1, select bank1
  4615  010A  1303               	bcf	3,6	;RP1=0, select bank1
  4616  010B  0821               	movf	(__PIR^(0+128)+1),w
  4617  010C  1283               	bcf	3,5	;RP0=0, select bank0
  4618  010D  1303               	bcf	3,6	;RP1=0, select bank0
  4619  010E  025C               	subwf	??_PIR_Main,w
  4620  010F                     u6675:	
  4621  010F  1C03               	skipc
  4622  0110  2919               	goto	l5136
  4623                           
  4624                           ;PIR_B1.c: 109: _PIR.Count = 0;
  4625  0111  1683               	bsf	3,5	;RP0=1, select bank1
  4626  0112  1303               	bcf	3,6	;RP1=0, select bank1
  4627  0113  01C1               	clrf	(__PIR^(0+128)+33)
  4628  0114  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4629                           
  4630                           ;PIR_B1.c: 115: setLED(1, 0);
  4631  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0117  01D6               	clrf	setLED@command
  4634  0118  298E               	goto	L15
  4635  0119                     l5136:	
  4636                           ;PIR_B1.c: 117: } else {
  4637                           
  4638                           ;PIR_B1.c: 116: setLED(2, 0);
  4639                           
  4640                           
  4641                           ;PIR_B1.c: 119: _PIR.RangeCount++;
  4642  0119  3001               	movlw	1
  4643  011A  1283               	bcf	3,5	;RP0=0, select bank0
  4644  011B  1303               	bcf	3,6	;RP1=0, select bank0
  4645  011C  00DC               	movwf	??_PIR_Main
  4646  011D  085C               	movf	??_PIR_Main,w
  4647  011E  1683               	bsf	3,5	;RP0=1, select bank1
  4648  011F  1303               	bcf	3,6	;RP1=0, select bank1
  4649  0120  07CB               	addwf	(__PIR^(0+128)+43),f
  4650                           
  4651                           ;PIR_B1.c: 120: _PIR.Count++;
  4652  0121  3001               	movlw	1
  4653  0122  07C1               	addwf	(__PIR^(0+128)+33),f
  4654  0123  1803               	skipnc
  4655  0124  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4656  0125  3000               	movlw	0
  4657  0126  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4658                           
  4659                           ;PIR_B1.c: 122: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4660  0127  1B20               	btfsc	__PIR^(0+128),6
  4661  0128  292D               	goto	l5144
  4662  0129  3003               	movlw	3
  4663  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4664  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4665  012C  292F               	goto	L11
  4666  012D                     l5144:	
  4667  012D  3003               	movlw	3
  4668  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4669  012F                     L11:	
  4670  012F  00E2               	movwf	_PIR_Main$3108
  4671  0130  3000               	movlw	0
  4672  0131  00E3               	movwf	_PIR_Main$3108+1
  4673  0132  0862               	movf	_PIR_Main$3108,w
  4674  0133  00DC               	movwf	??_PIR_Main
  4675  0134  085C               	movf	??_PIR_Main,w
  4676  0135  1683               	bsf	3,5	;RP0=1, select bank1
  4677  0136  1303               	bcf	3,6	;RP1=0, select bank1
  4678  0137  00C3               	movwf	(__PIR^(0+128)+35)
  4679                           
  4680                           ;PIR_B1.c: 124: if (_PIR.Count == _PIR.TriggerValue) {
  4681  0138  0843               	movf	(__PIR^(0+128)+35),w
  4682  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4683  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4684  013B  00DC               	movwf	??_PIR_Main
  4685  013C  01DD               	clrf	??_PIR_Main+1
  4686  013D  1683               	bsf	3,5	;RP0=1, select bank1
  4687  013E  1303               	bcf	3,6	;RP1=0, select bank1
  4688  013F  0842               	movf	((__PIR+1)^(0+128)+33),w
  4689  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4690  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4691  0142  065D               	xorwf	??_PIR_Main+1,w
  4692  0143  1D03               	skipz
  4693  0144  294B               	goto	u6695
  4694  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4695  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4696  0147  0841               	movf	(__PIR^(0+128)+33),w
  4697  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4699  014A  065C               	xorwf	??_PIR_Main,w
  4700  014B                     u6695:	
  4701  014B  1D03               	skipz
  4702  014C  29A5               	goto	l5160
  4703                           
  4704                           ;PIR_B1.c: 125: _PIR.Count = 0;
  4705  014D  1683               	bsf	3,5	;RP0=1, select bank1
  4706  014E  1303               	bcf	3,6	;RP1=0, select bank1
  4707  014F  01C1               	clrf	(__PIR^(0+128)+33)
  4708  0150  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4709                           
  4710                           ;PIR_B1.c: 127: _PIR.CloseTimeSeconds = 0;
  4711  0151  01C6               	clrf	(__PIR^(0+128)+38)
  4712                           
  4713                           ;PIR_B1.c: 128: _PIR.CloseTimeMinutes = 0;
  4714  0152  01C4               	clrf	(__PIR^(0+128)+36)
  4715  0153  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4716                           
  4717                           ;PIR_B1.c: 129: _PIR.Status = 1;
  4718  0154  1720               	bsf	__PIR^(0+128),6
  4719                           
  4720                           ;PIR_B1.c: 133: if (getLights_Status(1) == 0) {
  4721  0155  3001               	movlw	1
  4722  0156  158A  240D  118A   	fcall	_getLights_Status
  4723  0159  3800               	iorlw	0
  4724  015A  1D03               	skipz
  4725  015B  2964               	goto	l5154
  4726                           
  4727                           ;PIR_B1.c: 134: setLights_Trigger(1, 1);
  4728  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4729  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4730  015E  01D6               	clrf	setLights_Trigger@command
  4731  015F  0AD6               	incf	setLights_Trigger@command,f
  4732  0160  3001               	movlw	1
  4733  0161  158A  24F6  118A   	fcall	_setLights_Trigger
  4734  0164                     l5154:	
  4735                           
  4736                           ;PIR_B1.c: 135: }
  4737                           ;PIR_B1.c: 139: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4738  0164  1683               	bsf	3,5	;RP0=1, select bank1
  4739  0165  1303               	bcf	3,6	;RP1=0, select bank1
  4740  0166  084C               	movf	(__PIR^(0+128)+44),w
  4741  0167  1283               	bcf	3,5	;RP0=0, select bank0
  4742  0168  1303               	bcf	3,6	;RP1=0, select bank0
  4743  0169  00DC               	movwf	??_PIR_Main
  4744  016A  01DD               	clrf	??_PIR_Main+1
  4745  016B  09DC               	comf	??_PIR_Main,f
  4746  016C  09DD               	comf	??_PIR_Main+1,f
  4747  016D  0ADC               	incf	??_PIR_Main,f
  4748  016E  1903               	skipnz
  4749  016F  0ADD               	incf	??_PIR_Main+1,f
  4750  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0172  0826               	movf	(__PIR^(0+128)+6),w
  4753  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0175  075C               	addwf	??_PIR_Main,w
  4756  0176  00DE               	movwf	??_PIR_Main+2
  4757  0177  085D               	movf	??_PIR_Main+1,w
  4758  0178  1803               	skipnc
  4759  0179  0A5D               	incf	??_PIR_Main+1,w
  4760  017A  00DF               	movwf	??_PIR_Main+3
  4761  017B  085F               	movf	??_PIR_Main+3,w
  4762  017C  3A80               	xorlw	128
  4763  017D  00E0               	movwf	??_PIR_Main+4
  4764  017E  3080               	movlw	128
  4765  017F  0260               	subwf	??_PIR_Main+4,w
  4766  0180  1D03               	skipz
  4767  0181  2988               	goto	u6715
  4768  0182  1683               	bsf	3,5	;RP0=1, select bank1
  4769  0183  1303               	bcf	3,6	;RP1=0, select bank1
  4770  0184  0821               	movf	(__PIR^(0+128)+1),w
  4771  0185  1283               	bcf	3,5	;RP0=0, select bank0
  4772  0186  1303               	bcf	3,6	;RP1=0, select bank0
  4773  0187  025E               	subwf	??_PIR_Main+2,w
  4774  0188                     u6715:	
  4775  0188  1C03               	skipc
  4776  0189  2996               	goto	l5158
  4777                           
  4778                           ;PIR_B1.c: 140: setLED(1, 1);
  4779  018A  1283               	bcf	3,5	;RP0=0, select bank0
  4780  018B  1303               	bcf	3,6	;RP1=0, select bank0
  4781  018C  01D6               	clrf	setLED@command
  4782  018D  0AD6               	incf	setLED@command,f
  4783  018E                     L15:	
  4784  018E  3001               	movlw	1
  4785  018F  158A  2735  118A   	fcall	_setLED
  4786                           
  4787                           ;PIR_B1.c: 141: setLED(2, 0);
  4788  0192  1283               	bcf	3,5	;RP0=0, select bank0
  4789  0193  1303               	bcf	3,6	;RP1=0, select bank0
  4790  0194  01D6               	clrf	setLED@command
  4791  0195  29A1               	goto	L12
  4792  0196                     l5158:	
  4793                           ;PIR_B1.c: 142: } else {
  4794                           
  4795                           
  4796                           ;PIR_B1.c: 143: setLED(1, 0);
  4797  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4798  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4799  0198  01D6               	clrf	setLED@command
  4800  0199  3001               	movlw	1
  4801  019A  158A  2735  118A   	fcall	_setLED
  4802                           
  4803                           ;PIR_B1.c: 144: setLED(2, 1);
  4804  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4805  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4806  019F  01D6               	clrf	setLED@command
  4807  01A0  0AD6               	incf	setLED@command,f
  4808  01A1                     L12:	
  4809  01A1  3002               	movlw	2
  4810  01A2  158A  2735  118A   	fcall	_setLED
  4811  01A5                     l5160:	
  4812                           
  4813                           ;PIR_B1.c: 145: }
  4814                           ;PIR_B1.c: 169: }
  4815                           ;PIR_B1.c: 170: }
  4816                           ;PIR_B1.c: 171: }
  4817                           ;PIR_B1.c: 172: }
  4818                           ;PIR_B1.c: 173: }
  4819                           ;PIR_B1.c: 174: }
  4820                           ;PIR_B1.c: 175: if (_PIR.OK == 0) {
  4821  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  4822  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  4823  01A7  19A0               	btfsc	__PIR^(0+128),3
  4824  01A8  29D4               	goto	l5176
  4825                           
  4826                           ;PIR_B1.c: 176: _PIR.Count++;
  4827  01A9  3001               	movlw	1
  4828  01AA  07C1               	addwf	(__PIR^(0+128)+33),f
  4829  01AB  1803               	skipnc
  4830  01AC  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4831  01AD  3000               	movlw	0
  4832  01AE  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4833                           
  4834                           ;PIR_B1.c: 177: if (_PIR.Count == (30000 / 20)) {
  4835  01AF  3005               	movlw	5
  4836  01B0  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4837  01B1  1D03               	skipz
  4838  01B2  29B5               	goto	u6735
  4839  01B3  30DC               	movlw	220
  4840  01B4  0641               	xorwf	(__PIR^(0+128)+33),w
  4841  01B5                     u6735:	
  4842  01B5  1D03               	skipz
  4843  01B6  29D4               	goto	l5176
  4844                           
  4845                           ;PIR_B1.c: 178: _PIR.Count = 0;
  4846  01B7  01C1               	clrf	(__PIR^(0+128)+33)
  4847  01B8  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4848                           
  4849                           ;PIR_B1.c: 179: _PIR.OK = 1;
  4850  01B9  15A0               	bsf	__PIR^(0+128),3
  4851                           
  4852                           ;PIR_B1.c: 180: setLED(1, 0);
  4853  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4854  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4855  01BC  01D6               	clrf	setLED@command
  4856  01BD  3001               	movlw	1
  4857  01BE  158A  2735  118A   	fcall	_setLED
  4858                           
  4859                           ;PIR_B1.c: 181: if (cds == 0) {
  4860  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4861  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4862  01C3  08E4               	movf	PIR_Main@cds,f
  4863  01C4  1D03               	skipz
  4864  01C5  29D4               	goto	l5176
  4865                           
  4866                           ;PIR_B1.c: 183: if (getLights_Status(1) == 1) {
  4867  01C6  3001               	movlw	1
  4868  01C7  158A  240D  118A   	fcall	_getLights_Status
  4869  01CA  3A01               	xorlw	1
  4870  01CB  1D03               	skipz
  4871  01CC  29D4               	goto	l5176
  4872                           
  4873                           ;PIR_B1.c: 184: setLights_Trigger(1, 0);
  4874  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4875  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4876  01CF  01D6               	clrf	setLights_Trigger@command
  4877  01D0  3001               	movlw	1
  4878  01D1  158A  24F6  118A   	fcall	_setLights_Trigger
  4879  01D4                     l5176:	
  4880                           
  4881                           ;PIR_B1.c: 185: }
  4882                           ;PIR_B1.c: 187: }
  4883                           ;PIR_B1.c: 188: }
  4884                           ;PIR_B1.c: 189: }
  4885                           ;PIR_B1.c: 190: if (_PIR.Status == 1) {
  4886  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4887  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  4888  01D6  1F20               	btfss	__PIR^(0+128),6
  4889  01D7  0008               	return
  4890                           
  4891                           ;PIR_B1.c: 191: _PIR.CloseTimeSeconds++;
  4892  01D8  3001               	movlw	1
  4893  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4894  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4895  01DB  00DC               	movwf	??_PIR_Main
  4896  01DC  085C               	movf	??_PIR_Main,w
  4897  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4898  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4899  01DF  07C6               	addwf	(__PIR^(0+128)+38),f
  4900                           
  4901                           ;PIR_B1.c: 192: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4902  01E0  0846               	movf	(__PIR^(0+128)+38),w
  4903  01E1  3A32               	xorlw	50
  4904  01E2  1D03               	skipz
  4905  01E3  0008               	return
  4906                           
  4907                           ;PIR_B1.c: 193: _PIR.CloseTimeSeconds = 0;
  4908  01E4  01C6               	clrf	(__PIR^(0+128)+38)
  4909                           
  4910                           ;PIR_B1.c: 194: _PIR.CloseTimeMinutes++;
  4911  01E5  3001               	movlw	1
  4912  01E6  07C4               	addwf	(__PIR^(0+128)+36),f
  4913  01E7  1803               	skipnc
  4914  01E8  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4915  01E9  3000               	movlw	0
  4916  01EA  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4917                           
  4918                           ;PIR_B1.c: 195: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4919  01EB  0848               	movf	((__PIR+1)^(0+128)+39),w
  4920  01EC  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4921  01ED  1D03               	skipz
  4922  01EE  29F1               	goto	u6785
  4923  01EF  0847               	movf	(__PIR^(0+128)+39),w
  4924  01F0  0644               	xorwf	(__PIR^(0+128)+36),w
  4925  01F1                     u6785:	
  4926  01F1  1D03               	skipz
  4927  01F2  0008               	return
  4928                           
  4929                           ;PIR_B1.c: 196: _PIR.CloseTimeMinutes = 0;
  4930  01F3  01C4               	clrf	(__PIR^(0+128)+36)
  4931  01F4  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4932                           
  4933                           ;PIR_B1.c: 197: _PIR.Status = 0;
  4934  01F5  1320               	bcf	__PIR^(0+128),6
  4935                           
  4936                           ;PIR_B1.c: 201: if (getLights_Status(1) == 1) {
  4937  01F6  3001               	movlw	1
  4938  01F7  158A  240D  118A   	fcall	_getLights_Status
  4939  01FA  3A01               	xorlw	1
  4940  01FB  1D03               	skipz
  4941  01FC  0008               	return
  4942                           
  4943                           ;PIR_B1.c: 202: setLights_Trigger(1, 0);
  4944  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4945  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4946  01FF  01D6               	clrf	setLights_Trigger@command
  4947  0200  3001               	movlw	1
  4948  0201  158A  24F6         	fcall	_setLights_Trigger
  4949                           
  4950                           ;PIR_B1.c: 203: }
  4951                           ;PIR_B1.c: 207: }
  4952                           ;PIR_B1.c: 208: }
  4953                           ;PIR_B1.c: 209: }
  4954                           ;PIR_B1.c: 210: } else {
  4955  0203  0008               	return
  4956  0204                     l896:	
  4957                           
  4958                           ;PIR_B1.c: 211: if (myMain.PowerON == 1) {
  4959  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4960  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4961  0206  1C20               	btfss	_myMain,0
  4962  0207  0008               	return
  4963                           
  4964                           ;PIR_B1.c: 212: _PIR.Enable = 1;
  4965  0208  1683               	bsf	3,5	;RP0=1, select bank1
  4966  0209  1303               	bcf	3,6	;RP1=0, select bank1
  4967  020A  1420               	bsf	__PIR^(0+128),0
  4968                           
  4969                           ;PIR_B1.c: 213: setLED(1, 1);
  4970  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4971  020C  1303               	bcf	3,6	;RP1=0, select bank0
  4972  020D  01D6               	clrf	setLED@command
  4973  020E  0AD6               	incf	setLED@command,f
  4974  020F  3001               	movlw	1
  4975  0210  158A  2735  118A   	fcall	_setLED
  4976                           
  4977                           ;PIR_B1.c: 216: if (getLights_Status(1) == 0) {
  4978  0213  3001               	movlw	1
  4979  0214  158A  240D  118A   	fcall	_getLights_Status
  4980  0217  3800               	iorlw	0
  4981  0218  1D03               	skipz
  4982  0219  0008               	return
  4983                           
  4984                           ;PIR_B1.c: 217: setLights_Trigger(1, 1);
  4985  021A  1283               	bcf	3,5	;RP0=0, select bank0
  4986  021B  1303               	bcf	3,6	;RP1=0, select bank0
  4987  021C  01D6               	clrf	setLights_Trigger@command
  4988  021D  0AD6               	incf	setLights_Trigger@command,f
  4989  021E  3001               	movlw	1
  4990  021F  158A  24F6         	fcall	_setLights_Trigger
  4991  0221  0008               	return
  4992  0222                     __end_of_PIR_Main:	
  4993                           
  4994                           	psect	text21
  4995  0B7D                     __ptext21:	
  4996 ;; *************** function _getCDS_Status *****************
  4997 ;; Defined at:
  4998 ;;		line 42 in file "../src/CDS_B1.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  status          1    4[COMMON] unsigned char 
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      unsigned char 
  5005 ;; Registers used:
  5006 ;;		wreg, status,2
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5012 ;;      Params:         0       0       0       0
  5013 ;;      Locals:         1       0       0       0
  5014 ;;      Temps:          0       0       0       0
  5015 ;;      Totals:         1       0       0       0
  5016 ;;Total ram usage:        1 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    2
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_PIR_Main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _getCDS_Status
  5028  0B7D                     _getCDS_Status:	
  5029                           
  5030                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5034  0B7D  3000               	movlw	0
  5035  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  5036  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  5037  0B80  1A2B               	btfsc	__CDS,4
  5038  0B81  3001               	movlw	1
  5039  0B82  00F4               	movwf	getCDS_Status@status
  5040                           
  5041                           ;CDS_B1.c: 44: return status;
  5042  0B83  0874               	movf	getCDS_Status@status,w
  5043  0B84  0008               	return
  5044  0B85                     __end_of_getCDS_Status:	
  5045                           
  5046                           	psect	text22
  5047  0BAA                     __ptext22:	
  5048 ;; *************** function _PIR_Initialization *****************
  5049 ;; Defined at:
  5050 ;;		line 7 in file "../src/PIR_B1.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;		None               void
  5057 ;; Registers used:
  5058 ;;		wreg
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5064 ;;      Params:         0       0       0       0
  5065 ;;      Locals:         0       0       0       0
  5066 ;;      Temps:          1       0       0       0
  5067 ;;      Totals:         1       0       0       0
  5068 ;;Total ram usage:        1 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    2
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _PIR_Initialization
  5080  0BAA                     _PIR_Initialization:	
  5081                           
  5082                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _PIR_Initialization: [wreg]
  5086  0BAA  3019               	movlw	25
  5087  0BAB  00F4               	movwf	??_PIR_Initialization
  5088  0BAC  0874               	movf	??_PIR_Initialization,w
  5089  0BAD  1683               	bsf	3,5	;RP0=1, select bank1
  5090  0BAE  1303               	bcf	3,6	;RP1=0, select bank1
  5091  0BAF  00CC               	movwf	(__PIR^(0+128)+44)
  5092                           
  5093                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5094  0BB0  3005               	movlw	5
  5095  0BB1  00C7               	movwf	(__PIR^(0+128)+39)
  5096  0BB2  3000               	movlw	0
  5097  0BB3  00C8               	movwf	(__PIR^(0+128)+40)
  5098  0BB4  0008               	return
  5099  0BB5                     __end_of_PIR_Initialization:	
  5100                           
  5101                           	psect	text23
  5102  0BED                     __ptext23:	
  5103 ;; *************** function _Mcu_Initialization *****************
  5104 ;; Defined at:
  5105 ;;		line 30 in file "../src/MCU_B1.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;		None               void
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0, pclath, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5119 ;;      Params:         0       0       0       0
  5120 ;;      Locals:         0       0       0       0
  5121 ;;      Temps:          0       0       0       0
  5122 ;;      Totals:         0       0       0       0
  5123 ;;Total ram usage:        0 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    3
  5126 ;; This function calls:
  5127 ;;		_ADC_Set
  5128 ;;		_Fosc_Set
  5129 ;;		_IO_Set
  5130 ;;		_TMR1_Set
  5131 ;;		_WDT_Set
  5132 ;; This function is called by:
  5133 ;;		_main
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function _Mcu_Initialization
  5139  0BED                     _Mcu_Initialization:	
  5140                           
  5141                           ;MCU_B1.c: 32: Fosc_Set();
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5145  0BED  158A  2348  158A   	fcall	_Fosc_Set
  5146                           
  5147                           ;MCU_B1.c: 34: IO_Set();
  5148  0BF0  158A  24C2  158A   	fcall	_IO_Set
  5149                           
  5150                           ;MCU_B1.c: 36: ;;
  5151                           ;MCU_B1.c: 38: TMR1_Set();
  5152  0BF3  158A  23D1  158A   	fcall	_TMR1_Set
  5153                           
  5154                           ;MCU_B1.c: 40: ADC_Set();
  5155  0BF6  158A  2366  158A   	fcall	_ADC_Set
  5156                           
  5157                           ;MCU_B1.c: 42: ;;
  5158                           ;MCU_B1.c: 44: ;;
  5159                           ;MCU_B1.c: 46: ;;
  5160                           ;MCU_B1.c: 48: ;;
  5161                           ;MCU_B1.c: 50: ;;
  5162                           ;MCU_B1.c: 52: WDT_Set();
  5163  0BF9  158A  23DF         	fcall	_WDT_Set
  5164  0BFB  0008               	return
  5165  0BFC                     __end_of_Mcu_Initialization:	
  5166                           
  5167                           	psect	text24
  5168  0BDF                     __ptext24:	
  5169 ;; *************** function _WDT_Set *****************
  5170 ;; Defined at:
  5171 ;;		line 1077 in file "../src/MCU_B1.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;		None               void
  5178 ;; Registers used:
  5179 ;;		wreg
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5185 ;;      Params:         0       0       0       0
  5186 ;;      Locals:         0       0       0       0
  5187 ;;      Temps:          1       0       0       0
  5188 ;;      Totals:         1       0       0       0
  5189 ;;Total ram usage:        1 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    2
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_Mcu_Initialization
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           
  5200                           ;psect for function _WDT_Set
  5201  0BDF                     _WDT_Set:	
  5202                           
  5203                           ;MCU_B1.c: 1079: PSA = 1;
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _WDT_Set: [wreg]
  5207  0BDF  1683               	bsf	3,5	;RP0=1, select bank1
  5208  0BE0  1303               	bcf	3,6	;RP1=0, select bank1
  5209  0BE1  1581               	bsf	1,3	;volatile
  5210                           
  5211                           ;MCU_B1.c: 1080: PS0 = 1;
  5212  0BE2  1401               	bsf	1,0	;volatile
  5213                           
  5214                           ;MCU_B1.c: 1081: PS1 = 1;
  5215  0BE3  1481               	bsf	1,1	;volatile
  5216                           
  5217                           ;MCU_B1.c: 1082: PS2 = 1;
  5218  0BE4  1501               	bsf	1,2	;volatile
  5219                           
  5220                           ;MCU_B1.c: 1086: WDT.Enable = 1;
  5221  0BE5  1283               	bcf	3,5	;RP0=0, select bank0
  5222  0BE6  1303               	bcf	3,6	;RP1=0, select bank0
  5223  0BE7  1437               	bsf	_WDT,0
  5224                           
  5225                           ;MCU_B1.c: 1087: WDT.Timer = 10;
  5226  0BE8  300A               	movlw	10
  5227  0BE9  00F4               	movwf	??_WDT_Set
  5228  0BEA  0874               	movf	??_WDT_Set,w
  5229  0BEB  00B8               	movwf	_WDT+1
  5230  0BEC  0008               	return
  5231  0BED                     __end_of_WDT_Set:	
  5232                           
  5233                           	psect	text25
  5234  0BD1                     __ptext25:	
  5235 ;; *************** function _TMR1_Set *****************
  5236 ;; Defined at:
  5237 ;;		line 226 in file "../src/MCU_B1.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;		None               void
  5244 ;; Registers used:
  5245 ;;		wreg
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5251 ;;      Params:         0       0       0       0
  5252 ;;      Locals:         0       0       0       0
  5253 ;;      Temps:          0       0       0       0
  5254 ;;      Totals:         0       0       0       0
  5255 ;;Total ram usage:        0 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    2
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_Mcu_Initialization
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _TMR1_Set
  5267  0BD1                     _TMR1_Set:	
  5268                           
  5269                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _TMR1_Set: [wreg]
  5273  0BD1  3041               	movlw	65
  5274  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  5275  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  5276  0BD4  0090               	movwf	16	;volatile
  5277                           
  5278                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5279  0BD5  30FA               	movlw	250
  5280  0BD6  008F               	movwf	15	;volatile
  5281                           
  5282                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5283  0BD7  3038               	movlw	56
  5284  0BD8  008E               	movwf	14	;volatile
  5285                           
  5286                           ;MCU_B1.c: 230: TMR1IE = 1;
  5287  0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  5288  0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  5289  0BDB  140C               	bsf	12,0	;volatile
  5290                           
  5291                           ;MCU_B1.c: 231: PEIE = 1;
  5292  0BDC  170B               	bsf	11,6	;volatile
  5293                           
  5294                           ;MCU_B1.c: 232: GIE = 1;
  5295  0BDD  178B               	bsf	11,7	;volatile
  5296  0BDE  0008               	return
  5297  0BDF                     __end_of_TMR1_Set:	
  5298                           
  5299                           	psect	text26
  5300  0CC2                     __ptext26:	
  5301 ;; *************** function _IO_Set *****************
  5302 ;; Defined at:
  5303 ;;		line 60 in file "../src/MCU_B1.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;		None               void
  5310 ;; Registers used:
  5311 ;;		wreg, status,2
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5317 ;;      Params:         0       0       0       0
  5318 ;;      Locals:         0       0       0       0
  5319 ;;      Temps:          0       0       0       0
  5320 ;;      Totals:         0       0       0       0
  5321 ;;Total ram usage:        0 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    2
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_Mcu_Initialization
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _IO_Set
  5333  0CC2                     _IO_Set:	
  5334                           
  5335                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _IO_Set: [wreg+status,2]
  5339  0CC2  302F               	movlw	47
  5340  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
  5341  0CC4  1303               	bcf	3,6	;RP1=0, select bank1
  5342  0CC5  0085               	movwf	5	;volatile
  5343                           
  5344                           ;MCU_B1.c: 63: TRISB = 0b00010011;;
  5345  0CC6  3013               	movlw	19
  5346  0CC7  0086               	movwf	6	;volatile
  5347                           
  5348                           ;MCU_B1.c: 64: TRISC = 0b00001100;;
  5349  0CC8  300C               	movlw	12
  5350  0CC9  0087               	movwf	7	;volatile
  5351                           
  5352                           ;MCU_B1.c: 65: ANSELA = 0b00001111;;
  5353  0CCA  300F               	movlw	15
  5354  0CCB  1683               	bsf	3,5	;RP0=1, select bank3
  5355  0CCC  1703               	bsf	3,6	;RP1=1, select bank3
  5356  0CCD  0085               	movwf	5	;volatile
  5357                           
  5358                           ;MCU_B1.c: 66: ANSELB = 0b00010010;;
  5359  0CCE  3012               	movlw	18
  5360  0CCF  0086               	movwf	6	;volatile
  5361                           
  5362                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5363  0CD0  30AF               	movlw	175
  5364  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  5365  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  5366  0CD3  0085               	movwf	5	;volatile
  5367                           
  5368                           ;MCU_B1.c: 68: PORTB = 0b00010011;;
  5369  0CD4  3013               	movlw	19
  5370  0CD5  0086               	movwf	6	;volatile
  5371                           
  5372                           ;MCU_B1.c: 69: PORTC = 0b00001100;;
  5373  0CD6  300C               	movlw	12
  5374  0CD7  0087               	movwf	7	;volatile
  5375                           
  5376                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5377  0CD8  1683               	bsf	3,5	;RP0=1, select bank1
  5378  0CD9  1303               	bcf	3,6	;RP1=0, select bank1
  5379  0CDA  0195               	clrf	21	;volatile
  5380  0CDB  0008               	return
  5381  0CDC                     __end_of_IO_Set:	
  5382                           
  5383                           	psect	text27
  5384  0B48                     __ptext27:	
  5385 ;; *************** function _Fosc_Set *****************
  5386 ;; Defined at:
  5387 ;;		line 56 in file "../src/MCU_B1.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;		None
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;		None               void
  5394 ;; Registers used:
  5395 ;;		wreg
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5401 ;;      Params:         0       0       0       0
  5402 ;;      Locals:         0       0       0       0
  5403 ;;      Temps:          0       0       0       0
  5404 ;;      Totals:         0       0       0       0
  5405 ;;Total ram usage:        0 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    2
  5408 ;; This function calls:
  5409 ;;		Nothing
  5410 ;; This function is called by:
  5411 ;;		_Mcu_Initialization
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _Fosc_Set
  5417  0B48                     _Fosc_Set:	
  5418                           
  5419                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in _Fosc_Set: [wreg]
  5423  0B48  303C               	movlw	60
  5424  0B49  1683               	bsf	3,5	;RP0=1, select bank1
  5425  0B4A  1303               	bcf	3,6	;RP1=0, select bank1
  5426  0B4B  0090               	movwf	16	;volatile
  5427  0B4C  0008               	return
  5428  0B4D                     __end_of_Fosc_Set:	
  5429                           
  5430                           	psect	text28
  5431  0B66                     __ptext28:	
  5432 ;; *************** function _ADC_Set *****************
  5433 ;; Defined at:
  5434 ;;		line 413 in file "../src/MCU_B1.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;		None               void
  5441 ;; Registers used:
  5442 ;;		wreg
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5448 ;;      Params:         0       0       0       0
  5449 ;;      Locals:         0       0       0       0
  5450 ;;      Temps:          0       0       0       0
  5451 ;;      Totals:         0       0       0       0
  5452 ;;Total ram usage:        0 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    2
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_Mcu_Initialization
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _ADC_Set
  5464  0B66                     _ADC_Set:	
  5465                           
  5466                           ;MCU_B1.c: 414: ADCON1 = 0x73;
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _ADC_Set: [wreg]
  5470  0B66  3073               	movlw	115
  5471  0B67  1683               	bsf	3,5	;RP0=1, select bank1
  5472  0B68  1303               	bcf	3,6	;RP1=0, select bank1
  5473  0B69  009F               	movwf	31	;volatile
  5474                           
  5475                           ;MCU_B1.c: 415: FVRCON = 0xc1;
  5476  0B6A  30C1               	movlw	193
  5477  0B6B  009D               	movwf	29	;volatile
  5478  0B6C  0008               	return
  5479  0B6D                     __end_of_ADC_Set:	
  5480                           
  5481                           	psect	text29
  5482  0222                     __ptext29:	
  5483 ;; *************** function _Load_Main *****************
  5484 ;; Defined at:
  5485 ;;		line 39 in file "../src/OverLoad_B1.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;		None
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  i               2   11[BANK0 ] int 
  5490 ;;  Load_Status     1   10[BANK0 ] unsigned char 
  5491 ;;  error           1    9[BANK0 ] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;		None               void
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5501 ;;      Params:         0       0       0       0
  5502 ;;      Locals:         0       4       0       0
  5503 ;;      Temps:          0       2       0       0
  5504 ;;      Totals:         0       6       0       0
  5505 ;;Total ram usage:        6 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    3
  5508 ;; This function calls:
  5509 ;;		___lwdiv
  5510 ;;		___wmul
  5511 ;;		_getLight_LoadGO
  5512 ;;		_getLight_Load_Status
  5513 ;;		_getMain_All_Error_Status
  5514 ;;		_getMain_All_LightsStatus
  5515 ;;		_getMain_Lights_Count
  5516 ;;		_setLoad_AH_AL_Restore
  5517 ;; This function is called by:
  5518 ;;		_main
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _Load_Main
  5524  0222                     _Load_Main:	
  5525                           
  5526                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5530  0222  3000               	movlw	0
  5531  0223  158A  2625  118A   	fcall	_getMain_All_Error_Status
  5532  0226  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0227  1303               	bcf	3,6	;RP1=0, select bank0
  5534  0228  00DD               	movwf	??_Load_Main
  5535  0229  085D               	movf	??_Load_Main,w
  5536  022A  00DF               	movwf	Load_Main@error
  5537                           
  5538                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  5539  022B  01E0               	clrf	Load_Main@Load_Status
  5540                           
  5541                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5542  022C  1683               	bsf	3,5	;RP0=1, select bank1
  5543  022D  1303               	bcf	3,6	;RP1=0, select bank1
  5544  022E  1C4E               	btfss	_Load^(0+128),0
  5545  022F  2C01               	goto	l706
  5546                           
  5547                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5548  0230  158A  238D  118A   	fcall	_getMain_All_LightsStatus
  5549  0233  3800               	iorlw	0
  5550  0234  1D03               	skipz
  5551  0235  2A39               	goto	l4910
  5552                           
  5553                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5554  0236  1683               	bsf	3,5	;RP0=1, select bank1
  5555  0237  1303               	bcf	3,6	;RP1=0, select bank1
  5556  0238  2A58               	goto	l4926
  5557  0239                     l4910:	
  5558                           ;OverLoad_B1.c: 47: } else {
  5559                           
  5560                           
  5561                           ;OverLoad_B1.c: 70: if (error == 0) {
  5562  0239  1283               	bcf	3,5	;RP0=0, select bank0
  5563  023A  1303               	bcf	3,6	;RP1=0, select bank0
  5564  023B  08DF               	movf	Load_Main@error,f
  5565  023C  1D03               	skipz
  5566  023D  2A55               	goto	l709
  5567                           
  5568                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5569  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5570  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5571  0240  14CE               	bsf	_Load^(0+128),1
  5572                           
  5573                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5574  0241  158A  234D  118A   	fcall	_getLight_LoadGO
  5575  0244  3A01               	xorlw	1
  5576  0245  1D03               	skipz
  5577  0246  2A4F               	goto	l710
  5578                           
  5579                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5580  0247  1683               	bsf	3,5	;RP0=1, select bank1
  5581  0248  1303               	bcf	3,6	;RP1=0, select bank1
  5582  0249  1DCE               	btfss	_Load^(0+128),3
  5583  024A  1BCE               	btfsc	_Load^(0+128),7
  5584  024B  2A59               	goto	l708
  5585                           
  5586                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5587  024C  15CE               	bsf	_Load^(0+128),3
  5588                           
  5589                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5590  024D  01EA               	clrf	(_Load^(0+128)+28)
  5591                           
  5592                           ;OverLoad_B1.c: 77: }
  5593                           ;OverLoad_B1.c: 78: } else {
  5594  024E  2A59               	goto	l708
  5595  024F                     l710:	
  5596                           
  5597                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5598  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5599  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5600  0251  1FCE               	btfss	_Load^(0+128),7
  5601  0252  2A59               	goto	l708
  5602                           
  5603                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5604  0253  13CE               	bcf	_Load^(0+128),7
  5605                           
  5606                           ;OverLoad_B1.c: 81: }
  5607                           ;OverLoad_B1.c: 82: }
  5608                           ;OverLoad_B1.c: 83: } else {
  5609  0254  2A59               	goto	l708
  5610  0255                     l709:	
  5611                           
  5612                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5613  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5614  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5615  0257  18CE               	btfsc	_Load^(0+128),1
  5616  0258                     l4926:	
  5617                           
  5618                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5619  0258  10CE               	bcf	_Load^(0+128),1
  5620  0259                     l708:	
  5621                           
  5622                           ;OverLoad_B1.c: 86: }
  5623                           ;OverLoad_B1.c: 87: }
  5624                           ;OverLoad_B1.c: 89: }
  5625                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5626  0259  1CCE               	btfss	_Load^(0+128),1
  5627  025A  2BDA               	goto	l716
  5628                           
  5629                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5630  025B  154E               	bsf	_Load^(0+128),2
  5631                           
  5632                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5633  025C  1E4E               	btfss	_Load^(0+128),4
  5634  025D  2BD8               	goto	l717
  5635                           
  5636                           ;OverLoad_B1.c: 96: Load.Time++;
  5637  025E  3001               	movlw	1
  5638  025F  07CF               	addwf	(_Load^(0+128)+1),f
  5639  0260  1803               	skipnc
  5640  0261  0AD0               	incf	((_Load+1)^(0+128)+1),f
  5641  0262  3000               	movlw	0
  5642  0263  07D0               	addwf	((_Load+1)^(0+128)+1),f
  5643                           
  5644                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5645  0264  3000               	movlw	0
  5646  0265  0250               	subwf	((_Load+1)^(0+128)+1),w
  5647  0266  3002               	movlw	2
  5648  0267  1903               	skipnz
  5649  0268  024F               	subwf	(_Load^(0+128)+1),w
  5650  0269  1C03               	skipc
  5651  026A  0008               	return
  5652                           
  5653                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5654  026B  01CF               	clrf	(_Load^(0+128)+1)
  5655  026C  01D0               	clrf	((_Load+1)^(0+128)+1)
  5656                           
  5657                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5658  026D  124E               	bcf	_Load^(0+128),4
  5659                           
  5660                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5661  026E  3001               	movlw	1
  5662  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5663  0270  1303               	bcf	3,6	;RP1=0, select bank0
  5664  0271  00E1               	movwf	Load_Main@i
  5665  0272  3000               	movlw	0
  5666  0273  00E2               	movwf	Load_Main@i+1
  5667  0274  0862               	movf	Load_Main@i+1,w
  5668  0275  3A80               	xorlw	128
  5669  0276  00FF               	movwf	127
  5670  0277  3080               	movlw	128
  5671  0278  027F               	subwf	127,w
  5672  0279  1D03               	skipz
  5673  027A  2A7D               	goto	u6235
  5674  027B  3004               	movlw	4
  5675  027C  0261               	subwf	Load_Main@i,w
  5676  027D                     u6235:	
  5677  027D  1803               	btfsc	3,0
  5678  027E  2ABB               	goto	l4948
  5679  027F                     l4942:	
  5680                           
  5681                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5682  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5683  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5684  0281  0861               	movf	Load_Main@i,w
  5685  0282  3ED8               	addlw	(_Load+10)& (0+255)
  5686  0283  0084               	movwf	4
  5687  0284  1383               	bcf	3,7	;select IRP bank1
  5688  0285  0800               	movf	0,w
  5689  0286  00DD               	movwf	??_Load_Main
  5690  0287  01DE               	clrf	??_Load_Main+1
  5691  0288  085D               	movf	??_Load_Main,w
  5692  0289  1683               	bsf	3,5	;RP0=1, select bank1
  5693  028A  1303               	bcf	3,6	;RP1=0, select bank1
  5694  028B  07D3               	addwf	(_Load^(0+128)+5),f
  5695  028C  1803               	skipnc
  5696  028D  0AD4               	incf	((_Load+1)^(0+128)+5),f
  5697  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5698  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5699  0290  085E               	movf	??_Load_Main+1,w
  5700  0291  1683               	bsf	3,5	;RP0=1, select bank1
  5701  0292  1303               	bcf	3,6	;RP1=0, select bank1
  5702  0293  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5703                           
  5704                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5705  0294  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0295  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0296  0861               	movf	Load_Main@i,w
  5708  0297  3EDD               	addlw	(_Load+15)& (0+255)
  5709  0298  0084               	movwf	4
  5710  0299  0800               	movf	0,w
  5711  029A  00DD               	movwf	??_Load_Main
  5712  029B  01DE               	clrf	??_Load_Main+1
  5713  029C  085D               	movf	??_Load_Main,w
  5714  029D  1683               	bsf	3,5	;RP0=1, select bank1
  5715  029E  1303               	bcf	3,6	;RP1=0, select bank1
  5716  029F  07D5               	addwf	(_Load^(0+128)+7),f
  5717  02A0  1803               	skipnc
  5718  02A1  0AD6               	incf	((_Load+1)^(0+128)+7),f
  5719  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5720  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5721  02A4  085E               	movf	??_Load_Main+1,w
  5722  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5723  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5724  02A7  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5725  02A8  3001               	movlw	1
  5726  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5727  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5728  02AB  07E1               	addwf	Load_Main@i,f
  5729  02AC  1803               	skipnc
  5730  02AD  0AE2               	incf	Load_Main@i+1,f
  5731  02AE  3000               	movlw	0
  5732  02AF  07E2               	addwf	Load_Main@i+1,f
  5733  02B0  0862               	movf	Load_Main@i+1,w
  5734  02B1  3A80               	xorlw	128
  5735  02B2  00FF               	movwf	127
  5736  02B3  3080               	movlw	128
  5737  02B4  027F               	subwf	127,w
  5738  02B5  1D03               	skipz
  5739  02B6  2AB9               	goto	u6245
  5740  02B7  3004               	movlw	4
  5741  02B8  0261               	subwf	Load_Main@i,w
  5742  02B9                     u6245:	
  5743  02B9  1C03               	skipc
  5744  02BA  2A7F               	goto	l4942
  5745  02BB                     l4948:	
  5746                           
  5747                           ;OverLoad_B1.c: 104: }
  5748                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5749  02BB  3003               	movlw	3
  5750  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5751  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5752  02BE  00D6               	movwf	___lwdiv@divisor
  5753  02BF  3000               	movlw	0
  5754  02C0  00D7               	movwf	___lwdiv@divisor+1
  5755  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  5756  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  5757  02C3  0854               	movf	((_Load+1)^(0+128)+5),w
  5758  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5759  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5760  02C6  01D9               	clrf	___lwdiv@dividend+1
  5761  02C7  07D9               	addwf	___lwdiv@dividend+1,f
  5762  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5763  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5764  02CA  0853               	movf	(_Load^(0+128)+5),w
  5765  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5766  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5767  02CD  01D8               	clrf	___lwdiv@dividend
  5768  02CE  07D8               	addwf	___lwdiv@dividend,f
  5769  02CF  158A  2663  118A   	fcall	___lwdiv
  5770  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  5771  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  5772  02D4  0857               	movf	?___lwdiv+1,w
  5773  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5774  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5775  02D7  01D4               	clrf	((_Load+1)^(0+128)+5)
  5776  02D8  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5777  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  5778  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  5779  02DB  0856               	movf	?___lwdiv,w
  5780  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5781  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5782  02DE  01D3               	clrf	(_Load^(0+128)+5)
  5783  02DF  07D3               	addwf	(_Load^(0+128)+5),f
  5784                           
  5785                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5786  02E0  3003               	movlw	3
  5787  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5788  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5789  02E3  00D6               	movwf	___lwdiv@divisor
  5790  02E4  3000               	movlw	0
  5791  02E5  00D7               	movwf	___lwdiv@divisor+1
  5792  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5793  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5794  02E8  0856               	movf	((_Load+1)^(0+128)+7),w
  5795  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5796  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5797  02EB  01D9               	clrf	___lwdiv@dividend+1
  5798  02EC  07D9               	addwf	___lwdiv@dividend+1,f
  5799  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  5800  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  5801  02EF  0855               	movf	(_Load^(0+128)+7),w
  5802  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5803  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5804  02F2  01D8               	clrf	___lwdiv@dividend
  5805  02F3  07D8               	addwf	___lwdiv@dividend,f
  5806  02F4  158A  2663  118A   	fcall	___lwdiv
  5807  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  5808  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  5809  02F9  0857               	movf	?___lwdiv+1,w
  5810  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5811  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5812  02FC  01D6               	clrf	((_Load+1)^(0+128)+7)
  5813  02FD  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5814  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5815  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5816  0300  0856               	movf	?___lwdiv,w
  5817  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5818  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5819  0303  01D5               	clrf	(_Load^(0+128)+7)
  5820  0304  07D5               	addwf	(_Load^(0+128)+7),f
  5821                           
  5822                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  5823  0305  158A  247D  118A   	fcall	_setLoad_AH_AL_Restore
  5824                           
  5825                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  5826  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5827  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5828  030A  0856               	movf	((_Load+1)^(0+128)+7),w
  5829  030B  0254               	subwf	((_Load+1)^(0+128)+5),w
  5830  030C  1D03               	skipz
  5831  030D  2B10               	goto	u6255
  5832  030E  0855               	movf	(_Load^(0+128)+7),w
  5833  030F  0253               	subwf	(_Load^(0+128)+5),w
  5834  0310                     u6255:	
  5835  0310  1C03               	skipc
  5836  0311  0008               	return
  5837                           
  5838                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  5839  0312  0355               	decf	(_Load^(0+128)+7),w
  5840  0313  3AFF               	xorlw	255
  5841  0314  0753               	addwf	(_Load^(0+128)+5),w
  5842  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5843  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5844  0317  00DD               	movwf	??_Load_Main
  5845  0318  085D               	movf	??_Load_Main,w
  5846  0319  1683               	bsf	3,5	;RP0=1, select bank1
  5847  031A  1303               	bcf	3,6	;RP1=0, select bank1
  5848  031B  00E2               	movwf	(_Load^(0+128)+20)
  5849                           
  5850                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  5851  031C  01D3               	clrf	(_Load^(0+128)+5)
  5852  031D  01D4               	clrf	((_Load+1)^(0+128)+5)
  5853                           
  5854                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  5855  031E  01D5               	clrf	(_Load^(0+128)+7)
  5856  031F  01D6               	clrf	((_Load+1)^(0+128)+7)
  5857                           
  5858                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  5859  0320  1DCE               	btfss	_Load^(0+128),3
  5860  0321  2B8E               	goto	l722
  5861                           
  5862                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  5863  0322  3002               	movlw	2
  5864  0323  026A               	subwf	(_Load^(0+128)+28),w
  5865  0324  1803               	skipnc
  5866  0325  2B8E               	goto	l722
  5867                           
  5868                           ;OverLoad_B1.c: 116: Load.Count++;
  5869  0326  3001               	movlw	1
  5870  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5871  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5872  0329  00DD               	movwf	??_Load_Main
  5873  032A  085D               	movf	??_Load_Main,w
  5874  032B  1683               	bsf	3,5	;RP0=1, select bank1
  5875  032C  1303               	bcf	3,6	;RP1=0, select bank1
  5876  032D  07EA               	addwf	(_Load^(0+128)+28),f
  5877                           
  5878                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  5879  032E  158A  2353  118A   	fcall	_getLight_Load_Status
  5880  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5881  0332  1303               	bcf	3,6	;RP1=0, select bank0
  5882  0333  00DD               	movwf	??_Load_Main
  5883  0334  085D               	movf	??_Load_Main,w
  5884  0335  00E0               	movwf	Load_Main@Load_Status
  5885                           
  5886                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
  5887  0336  158A  23A0  118A   	fcall	_getMain_Lights_Count
  5888  0339  1283               	bcf	3,5	;RP0=0, select bank0
  5889  033A  1303               	bcf	3,6	;RP1=0, select bank0
  5890  033B  00DD               	movwf	??_Load_Main
  5891  033C  085D               	movf	??_Load_Main,w
  5892  033D  1683               	bsf	3,5	;RP0=1, select bank1
  5893  033E  1303               	bcf	3,6	;RP1=0, select bank1
  5894  033F  00ED               	movwf	(_Load^(0+128)+31)
  5895                           
  5896                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5897  0340  086A               	movf	(_Load^(0+128)+28),w
  5898  0341  3A01               	xorlw	1
  5899  0342  1D03               	skipz
  5900  0343  2B4E               	goto	l4974
  5901                           
  5902                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
  5903  0344  3002               	movlw	2
  5904  0345  1283               	bcf	3,5	;RP0=0, select bank0
  5905  0346  1303               	bcf	3,6	;RP1=0, select bank0
  5906  0347  00DD               	movwf	??_Load_Main
  5907  0348  085D               	movf	??_Load_Main,w
  5908  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5909  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5910  034B  00EC               	movwf	(_Load^(0+128)+30)
  5911                           
  5912                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5913  034C  3022               	movlw	34
  5914  034D  2B57               	goto	L16
  5915  034E                     l4974:	
  5916                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5917                           
  5918  034E  086A               	movf	(_Load^(0+128)+28),w
  5919  034F  3A02               	xorlw	2
  5920  0350  1D03               	skipz
  5921  0351  2B8E               	goto	l722
  5922                           
  5923                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
  5924  0352  086D               	movf	(_Load^(0+128)+31),w
  5925  0353  3A01               	xorlw	1
  5926  0354  1D03               	skipz
  5927  0355  2B5A               	goto	l4980
  5928                           
  5929                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(7*1.7);
  5930  0356  300B               	movlw	11
  5931  0357                     L16:	
  5932  0357  00E6               	movwf	(_Load^(0+128)+24)
  5933  0358  3000               	movlw	0
  5934  0359  2B8D               	goto	L17
  5935  035A                     l4980:	
  5936                           ;OverLoad_B1.c: 130: } else {
  5937                           
  5938                           
  5939                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
  5940  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5941  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5942  035C  08E0               	movf	Load_Main@Load_Status,f
  5943  035D  1D03               	skipz
  5944  035E  2B80               	goto	l4984
  5945                           
  5946                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(7*1.7) * Load.LightsCount;
  5947  035F  1683               	bsf	3,5	;RP0=1, select bank1
  5948  0360  1303               	bcf	3,6	;RP1=0, select bank1
  5949  0361  086D               	movf	(_Load^(0+128)+31),w
  5950  0362  1283               	bcf	3,5	;RP0=0, select bank0
  5951  0363  1303               	bcf	3,6	;RP1=0, select bank0
  5952  0364  00DD               	movwf	??_Load_Main
  5953  0365  01DE               	clrf	??_Load_Main+1
  5954  0366  085D               	movf	??_Load_Main,w
  5955  0367  00D6               	movwf	___wmul@multiplier
  5956  0368  085E               	movf	??_Load_Main+1,w
  5957  0369  00D7               	movwf	___wmul@multiplier+1
  5958  036A  300B               	movlw	11
  5959  036B  00D8               	movwf	___wmul@multiplicand
  5960  036C  3000               	movlw	0
  5961  036D  00D9               	movwf	___wmul@multiplicand+1
  5962  036E  158A  254B  118A   	fcall	___wmul
  5963  0371  1283               	bcf	3,5	;RP0=0, select bank0
  5964  0372  1303               	bcf	3,6	;RP1=0, select bank0
  5965  0373  0857               	movf	?___wmul+1,w
  5966  0374  1683               	bsf	3,5	;RP0=1, select bank1
  5967  0375  1303               	bcf	3,6	;RP1=0, select bank1
  5968  0376  01E7               	clrf	((_Load+1)^(0+128)+24)
  5969  0377  07E7               	addwf	((_Load+1)^(0+128)+24),f
  5970  0378  1283               	bcf	3,5	;RP0=0, select bank0
  5971  0379  1303               	bcf	3,6	;RP1=0, select bank0
  5972  037A  0856               	movf	?___wmul,w
  5973  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5974  037C  1303               	bcf	3,6	;RP1=0, select bank1
  5975  037D  01E6               	clrf	(_Load^(0+128)+24)
  5976  037E  07E6               	addwf	(_Load^(0+128)+24),f
  5977                           
  5978                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
  5979  037F  2B8E               	goto	l722
  5980  0380                     l4984:	
  5981  0380  1283               	bcf	3,5	;RP0=0, select bank0
  5982  0381  0860               	movf	Load_Main@Load_Status,w
  5983  0382  3A01               	xorlw	1
  5984  0383  1D03               	skipz
  5985  0384  2B8E               	goto	l722
  5986                           
  5987                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(7*1.7) + Load.TotalLoad;
  5988  0385  1683               	bsf	3,5	;RP0=1, select bank1
  5989  0386  1303               	bcf	3,6	;RP1=0, select bank1
  5990  0387  0857               	movf	(_Load^(0+128)+9),w
  5991  0388  3E0B               	addlw	11
  5992  0389  00E6               	movwf	(_Load^(0+128)+24)
  5993  038A  3000               	movlw	0
  5994  038B  1803               	skipnc
  5995  038C  3001               	movlw	1
  5996  038D                     L17:	
  5997  038D  00E7               	movwf	(_Load^(0+128)+25)
  5998  038E                     l722:	
  5999                           
  6000                           ;OverLoad_B1.c: 135: }
  6001                           ;OverLoad_B1.c: 136: }
  6002                           ;OverLoad_B1.c: 137: }
  6003                           ;OverLoad_B1.c: 138: }
  6004                           ;OverLoad_B1.c: 139: }
  6005                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6006  038E  1683               	bsf	3,5	;RP0=1, select bank1
  6007  038F  1303               	bcf	3,6	;RP1=0, select bank1
  6008  0390  0862               	movf	(_Load^(0+128)+20),w
  6009  0391  1283               	bcf	3,5	;RP0=0, select bank0
  6010  0392  1303               	bcf	3,6	;RP1=0, select bank0
  6011  0393  00DD               	movwf	??_Load_Main
  6012  0394  01DE               	clrf	??_Load_Main+1
  6013  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6014  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6015  0397  0867               	movf	((_Load+1)^(0+128)+24),w
  6016  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6017  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6018  039A  025E               	subwf	??_Load_Main+1,w
  6019  039B  1D03               	skipz
  6020  039C  2BA3               	goto	u6335
  6021  039D  1683               	bsf	3,5	;RP0=1, select bank1
  6022  039E  1303               	bcf	3,6	;RP1=0, select bank1
  6023  039F  0866               	movf	(_Load^(0+128)+24),w
  6024  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  6025  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  6026  03A2  025D               	subwf	??_Load_Main,w
  6027  03A3                     u6335:	
  6028  03A3  1C03               	skipc
  6029  03A4  2BB2               	goto	l4996
  6030                           
  6031                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
  6032  03A5  3001               	movlw	1
  6033  03A6  00DD               	movwf	??_Load_Main
  6034  03A7  085D               	movf	??_Load_Main,w
  6035  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  6036  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  6037  03AA  07EB               	addwf	(_Load^(0+128)+29),f
  6038                           
  6039                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
  6040  03AB  086B               	movf	(_Load^(0+128)+29),w
  6041  03AC  026C               	subwf	(_Load^(0+128)+30),w
  6042  03AD  1803               	skipnc
  6043  03AE  0008               	return
  6044                           
  6045                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6046  03AF  01EB               	clrf	(_Load^(0+128)+29)
  6047                           
  6048                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
  6049  03B0  16CE               	bsf	_Load^(0+128),5
  6050                           
  6051                           ;OverLoad_B1.c: 167: }
  6052                           ;OverLoad_B1.c: 168: } else {
  6053  03B1  0008               	return
  6054  03B2                     l4996:	
  6055                           
  6056                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
  6057  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  6058  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  6059  03B4  01EB               	clrf	(_Load^(0+128)+29)
  6060                           
  6061                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
  6062  03B5  1DCE               	btfss	_Load^(0+128),3
  6063  03B6  0008               	return
  6064                           
  6065                           ;OverLoad_B1.c: 171: Load.SafeCount++;
  6066  03B7  3001               	movlw	1
  6067  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  6068  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  6069  03BA  00DD               	movwf	??_Load_Main
  6070  03BB  085D               	movf	??_Load_Main,w
  6071  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6072  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6073  03BE  07EE               	addwf	(_Load^(0+128)+32),f
  6074                           
  6075                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
  6076  03BF  3003               	movlw	3
  6077  03C0  026E               	subwf	(_Load^(0+128)+32),w
  6078  03C1  1C03               	skipc
  6079  03C2  0008               	return
  6080                           
  6081                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
  6082  03C3  01EE               	clrf	(_Load^(0+128)+32)
  6083                           
  6084                           ;OverLoad_B1.c: 174: Load.OK = 1;
  6085  03C4  17CE               	bsf	_Load^(0+128),7
  6086                           
  6087                           ;OverLoad_B1.c: 175: Load.Run = 0;
  6088  03C5  11CE               	bcf	_Load^(0+128),3
  6089                           
  6090                           ;OverLoad_B1.c: 176: Load.Count = 0;
  6091  03C6  01EA               	clrf	(_Load^(0+128)+28)
  6092                           
  6093                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
  6094  03C7  0862               	movf	(_Load^(0+128)+20),w
  6095  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  6096  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  6097  03CA  00DD               	movwf	??_Load_Main
  6098  03CB  085D               	movf	??_Load_Main,w
  6099  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  6100  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  6101  03CE  00D7               	movwf	(_Load^(0+128)+9)
  6102                           
  6103                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
  6104  03CF  3003               	movlw	3
  6105  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6106  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6107  03D2  00DD               	movwf	??_Load_Main
  6108  03D3  085D               	movf	??_Load_Main,w
  6109  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6110  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6111  03D6  00EC               	movwf	(_Load^(0+128)+30)
  6112                           
  6113                           ;OverLoad_B1.c: 181: }
  6114                           ;OverLoad_B1.c: 182: }
  6115                           ;OverLoad_B1.c: 205: }
  6116                           ;OverLoad_B1.c: 206: }
  6117                           ;OverLoad_B1.c: 207: }
  6118                           ;OverLoad_B1.c: 208: } else {
  6119  03D7  0008               	return
  6120  03D8                     l717:	
  6121                           
  6122                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
  6123  03D8  164E               	bsf	_Load^(0+128),4
  6124                           
  6125                           ;OverLoad_B1.c: 210: }
  6126                           ;OverLoad_B1.c: 211: } else {
  6127  03D9  0008               	return
  6128  03DA                     l716:	
  6129                           
  6130                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
  6131  03DA  1D4E               	btfss	_Load^(0+128),2
  6132  03DB  2BEE               	goto	l5034
  6133                           
  6134                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
  6135  03DC  114E               	bcf	_Load^(0+128),2
  6136                           
  6137                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
  6138  03DD  124E               	bcf	_Load^(0+128),4
  6139                           
  6140                           ;OverLoad_B1.c: 217: Load.Time = 0;
  6141  03DE  01CF               	clrf	(_Load^(0+128)+1)
  6142  03DF  01D0               	clrf	((_Load+1)^(0+128)+1)
  6143                           
  6144                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
  6145  03E0  158A  247D  118A   	fcall	_setLoad_AH_AL_Restore
  6146                           
  6147                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
  6148  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  6149  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  6150  03E5  01EB               	clrf	(_Load^(0+128)+29)
  6151                           
  6152                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
  6153  03E6  01EE               	clrf	(_Load^(0+128)+32)
  6154                           
  6155                           ;OverLoad_B1.c: 223: Load.ADH = 0;
  6156  03E7  01D3               	clrf	(_Load^(0+128)+5)
  6157  03E8  01D4               	clrf	((_Load+1)^(0+128)+5)
  6158                           
  6159                           ;OverLoad_B1.c: 224: Load.ADL = 0;
  6160  03E9  01D5               	clrf	(_Load^(0+128)+7)
  6161  03EA  01D6               	clrf	((_Load+1)^(0+128)+7)
  6162                           
  6163                           ;OverLoad_B1.c: 230: Load.Run = 0;
  6164  03EB  11CE               	bcf	_Load^(0+128),3
  6165                           
  6166                           ;OverLoad_B1.c: 231: Load.Count = 0;
  6167  03EC  01EA               	clrf	(_Load^(0+128)+28)
  6168                           
  6169                           ;OverLoad_B1.c: 232: Load.OK = 0;
  6170  03ED  13CE               	bcf	_Load^(0+128),7
  6171  03EE                     l5034:	
  6172                           
  6173                           ;OverLoad_B1.c: 254: }
  6174                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
  6175  03EE  1ECE               	btfss	_Load^(0+128),5
  6176  03EF  0008               	return
  6177                           
  6178                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
  6179  03F0  3001               	movlw	1
  6180  03F1  07D1               	addwf	(_Load^(0+128)+3),f
  6181  03F2  1803               	skipnc
  6182  03F3  0AD2               	incf	((_Load+1)^(0+128)+3),f
  6183  03F4  3000               	movlw	0
  6184  03F5  07D2               	addwf	((_Load+1)^(0+128)+3),f
  6185                           
  6186                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
  6187  03F6  3001               	movlw	1
  6188  03F7  0252               	subwf	((_Load+1)^(0+128)+3),w
  6189  03F8  30F4               	movlw	244
  6190  03F9  1903               	skipnz
  6191  03FA  0251               	subwf	(_Load^(0+128)+3),w
  6192  03FB  1C03               	skipc
  6193  03FC  0008               	return
  6194                           
  6195                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
  6196  03FD  01D1               	clrf	(_Load^(0+128)+3)
  6197  03FE  01D2               	clrf	((_Load+1)^(0+128)+3)
  6198                           
  6199                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
  6200  03FF  12CE               	bcf	_Load^(0+128),5
  6201                           
  6202                           ;OverLoad_B1.c: 260: }
  6203                           ;OverLoad_B1.c: 261: }
  6204                           ;OverLoad_B1.c: 262: }
  6205                           ;OverLoad_B1.c: 263: } else {
  6206  0400  0008               	return
  6207  0401                     l706:	
  6208                           
  6209                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
  6210  0401  1283               	bcf	3,5	;RP0=0, select bank0
  6211  0402  1303               	bcf	3,6	;RP1=0, select bank0
  6212  0403  1C20               	btfss	_myMain,0
  6213  0404  0008               	return
  6214                           
  6215                           ;OverLoad_B1.c: 265: Load.Enable = 1;
  6216  0405  1683               	bsf	3,5	;RP0=1, select bank1
  6217  0406  1303               	bcf	3,6	;RP1=0, select bank1
  6218  0407  144E               	bsf	_Load^(0+128),0
  6219  0408  0008               	return
  6220  0409                     __end_of_Load_Main:	
  6221                           
  6222                           	psect	text30
  6223  0BA0                     __ptext30:	
  6224 ;; *************** function _getMain_Lights_Count *****************
  6225 ;; Defined at:
  6226 ;;		line 466 in file "../src/Main_B1.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  status1         1    5[COMMON] unsigned char 
  6231 ;;  count           1    4[COMMON] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      unsigned char 
  6234 ;; Registers used:
  6235 ;;		wreg, status,2
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6241 ;;      Params:         0       0       0       0
  6242 ;;      Locals:         2       0       0       0
  6243 ;;      Temps:          0       0       0       0
  6244 ;;      Totals:         2       0       0       0
  6245 ;;Total ram usage:        2 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    2
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_Load_Main
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           
  6256                           ;psect for function _getMain_Lights_Count
  6257  0BA0                     _getMain_Lights_Count:	
  6258                           
  6259                           ;Main_B1.c: 467: char count = 0;
  6260                           
  6261                           ;incstack = 0
  6262                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6263  0BA0  01F4               	clrf	getMain_Lights_Count@count
  6264                           
  6265                           ;Main_B1.c: 483: char status1 = Lights1.Loop == 1 ? 1 : 0;
  6266  0BA1  3000               	movlw	0
  6267  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0BA4  18C8               	btfsc	_Lights1+1,1
  6270  0BA5  3001               	movlw	1
  6271  0BA6  00F5               	movwf	getMain_Lights_Count@status1
  6272                           
  6273                           ;Main_B1.c: 494: return count = status1;
  6274  0BA7  0875               	movf	getMain_Lights_Count@status1,w
  6275  0BA8  00F4               	movwf	getMain_Lights_Count@count
  6276  0BA9  0008               	return
  6277  0BAA                     __end_of_getMain_Lights_Count:	
  6278                           
  6279                           	psect	text31
  6280  0B53                     __ptext31:	
  6281 ;; *************** function _getLight_Load_Status *****************
  6282 ;; Defined at:
  6283 ;;		line 343 in file "../src/TriacRelay_B1.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  loadstatus      1    4[COMMON] unsigned char 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      unsigned char 
  6290 ;; Registers used:
  6291 ;;		wreg, status,2
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6297 ;;      Params:         0       0       0       0
  6298 ;;      Locals:         1       0       0       0
  6299 ;;      Temps:          0       0       0       0
  6300 ;;      Totals:         1       0       0       0
  6301 ;;Total ram usage:        1 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    2
  6304 ;; This function calls:
  6305 ;;		Nothing
  6306 ;; This function is called by:
  6307 ;;		_Load_Main
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           
  6312                           ;psect for function _getLight_Load_Status
  6313  0B53                     _getLight_Load_Status:	
  6314                           
  6315                           ;TriacRelay_B1.c: 344: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6319  0B53  3000               	movlw	0
  6320  0B54  18F7               	btfsc	_Light,1
  6321  0B55  3001               	movlw	1
  6322  0B56  00F4               	movwf	getLight_Load_Status@loadstatus
  6323                           
  6324                           ;TriacRelay_B1.c: 345: return loadstatus;
  6325  0B57  0874               	movf	getLight_Load_Status@loadstatus,w
  6326  0B58  0008               	return
  6327  0B59                     __end_of_getLight_Load_Status:	
  6328                           
  6329                           	psect	text32
  6330  0B4D                     __ptext32:	
  6331 ;; *************** function _getLight_LoadGO *****************
  6332 ;; Defined at:
  6333 ;;		line 338 in file "../src/TriacRelay_B1.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  loadgo          1    4[COMMON] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      unsigned char 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6347 ;;      Params:         0       0       0       0
  6348 ;;      Locals:         1       0       0       0
  6349 ;;      Temps:          0       0       0       0
  6350 ;;      Totals:         1       0       0       0
  6351 ;;Total ram usage:        1 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    2
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_Load_Main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _getLight_LoadGO
  6363  0B4D                     _getLight_LoadGO:	
  6364                           
  6365                           ;TriacRelay_B1.c: 339: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6369  0B4D  3000               	movlw	0
  6370  0B4E  1877               	btfsc	_Light,0
  6371  0B4F  3001               	movlw	1
  6372  0B50  00F4               	movwf	getLight_LoadGO@loadgo
  6373                           
  6374                           ;TriacRelay_B1.c: 340: return loadgo;
  6375  0B51  0874               	movf	getLight_LoadGO@loadgo,w
  6376  0B52  0008               	return
  6377  0B53                     __end_of_getLight_LoadGO:	
  6378                           
  6379                           	psect	text33
  6380  0D4B                     __ptext33:	
  6381 ;; *************** function ___wmul *****************
  6382 ;; Defined at:
  6383 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6386 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  product         2    4[COMMON] unsigned int 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  2    0[BANK0 ] unsigned int 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6398 ;;      Params:         0       4       0       0
  6399 ;;      Locals:         2       0       0       0
  6400 ;;      Temps:          0       0       0       0
  6401 ;;      Totals:         2       4       0       0
  6402 ;;Total ram usage:        6 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    2
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_Load_Main
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function ___wmul
  6414  0D4B                     ___wmul:	
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6418  0D4B  01F4               	clrf	___wmul@product
  6419  0D4C  01F5               	clrf	___wmul@product+1
  6420  0D4D                     l4680:	
  6421  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  6422  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  6423  0D4F  1C56               	btfss	___wmul@multiplier,0
  6424  0D50  2D57               	goto	l1365
  6425  0D51  0858               	movf	___wmul@multiplicand,w
  6426  0D52  07F4               	addwf	___wmul@product,f
  6427  0D53  1803               	skipnc
  6428  0D54  0AF5               	incf	___wmul@product+1,f
  6429  0D55  0859               	movf	___wmul@multiplicand+1,w
  6430  0D56  07F5               	addwf	___wmul@product+1,f
  6431  0D57                     l1365:	
  6432  0D57  3001               	movlw	1
  6433  0D58                     u5665:	
  6434  0D58  1003               	clrc
  6435  0D59  0DD8               	rlf	___wmul@multiplicand,f
  6436  0D5A  0DD9               	rlf	___wmul@multiplicand+1,f
  6437  0D5B  3EFF               	addlw	-1
  6438  0D5C  1D03               	skipz
  6439  0D5D  2D58               	goto	u5665
  6440  0D5E  3001               	movlw	1
  6441  0D5F                     u5675:	
  6442  0D5F  1003               	clrc
  6443  0D60  0CD7               	rrf	___wmul@multiplier+1,f
  6444  0D61  0CD6               	rrf	___wmul@multiplier,f
  6445  0D62  3EFF               	addlw	-1
  6446  0D63  1D03               	skipz
  6447  0D64  2D5F               	goto	u5675
  6448  0D65  0857               	movf	___wmul@multiplier+1,w
  6449  0D66  0456               	iorwf	___wmul@multiplier,w
  6450  0D67  1D03               	skipz
  6451  0D68  2D4D               	goto	l4680
  6452  0D69  0875               	movf	___wmul@product+1,w
  6453  0D6A  01D7               	clrf	?___wmul+1
  6454  0D6B  07D7               	addwf	?___wmul+1,f
  6455  0D6C  0874               	movf	___wmul@product,w
  6456  0D6D  01D6               	clrf	?___wmul
  6457  0D6E  07D6               	addwf	?___wmul,f
  6458  0D6F  0008               	return
  6459  0D70                     __end_of___wmul:	
  6460                           
  6461                           	psect	text34
  6462  0E63                     __ptext34:	
  6463 ;; *************** function ___lwdiv *****************
  6464 ;; Defined at:
  6465 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  divisor         2    0[BANK0 ] unsigned int 
  6468 ;;  dividend        2    2[BANK0 ] unsigned int 
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  quotient        2    5[BANK0 ] unsigned int 
  6471 ;;  counter         1    4[BANK0 ] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  2    0[BANK0 ] unsigned int 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6481 ;;      Params:         0       4       0       0
  6482 ;;      Locals:         0       3       0       0
  6483 ;;      Temps:          1       0       0       0
  6484 ;;      Totals:         1       7       0       0
  6485 ;;Total ram usage:        8 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    2
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_Load_Main
  6492 ;;		_getPIR_AD
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function ___lwdiv
  6498  0E63                     ___lwdiv:	
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6502  0E63  1283               	bcf	3,5	;RP0=0, select bank0
  6503  0E64  1303               	bcf	3,6	;RP1=0, select bank0
  6504  0E65  01DB               	clrf	___lwdiv@quotient
  6505  0E66  01DC               	clrf	___lwdiv@quotient+1
  6506  0E67  0857               	movf	___lwdiv@divisor+1,w
  6507  0E68  0456               	iorwf	___lwdiv@divisor,w
  6508  0E69  1903               	skipnz
  6509  0E6A  2E9C               	goto	l4712
  6510  0E6B  01DA               	clrf	___lwdiv@counter
  6511  0E6C  0ADA               	incf	___lwdiv@counter,f
  6512  0E6D                     l4700:	
  6513  0E6D  1BD7               	btfsc	___lwdiv@divisor+1,7
  6514  0E6E  2E7B               	goto	l4702
  6515  0E6F  3001               	movlw	1
  6516  0E70                     u5705:	
  6517  0E70  1003               	clrc
  6518  0E71  0DD6               	rlf	___lwdiv@divisor,f
  6519  0E72  0DD7               	rlf	___lwdiv@divisor+1,f
  6520  0E73  3EFF               	addlw	-1
  6521  0E74  1D03               	skipz
  6522  0E75  2E70               	goto	u5705
  6523  0E76  3001               	movlw	1
  6524  0E77  00F4               	movwf	??___lwdiv
  6525  0E78  0874               	movf	??___lwdiv,w
  6526  0E79  07DA               	addwf	___lwdiv@counter,f
  6527  0E7A  2E6D               	goto	l4700
  6528  0E7B                     l4702:	
  6529  0E7B  3001               	movlw	1
  6530  0E7C                     u5725:	
  6531  0E7C  1003               	clrc
  6532  0E7D  0DDB               	rlf	___lwdiv@quotient,f
  6533  0E7E  0DDC               	rlf	___lwdiv@quotient+1,f
  6534  0E7F  3EFF               	addlw	-1
  6535  0E80  1D03               	skipz
  6536  0E81  2E7C               	goto	u5725
  6537  0E82  0857               	movf	___lwdiv@divisor+1,w
  6538  0E83  0259               	subwf	___lwdiv@dividend+1,w
  6539  0E84  1D03               	skipz
  6540  0E85  2E88               	goto	u5735
  6541  0E86  0856               	movf	___lwdiv@divisor,w
  6542  0E87  0258               	subwf	___lwdiv@dividend,w
  6543  0E88                     u5735:	
  6544  0E88  1C03               	skipc
  6545  0E89  2E91               	goto	l4708
  6546  0E8A  0856               	movf	___lwdiv@divisor,w
  6547  0E8B  02D8               	subwf	___lwdiv@dividend,f
  6548  0E8C  0857               	movf	___lwdiv@divisor+1,w
  6549  0E8D  1C03               	skipc
  6550  0E8E  03D9               	decf	___lwdiv@dividend+1,f
  6551  0E8F  02D9               	subwf	___lwdiv@dividend+1,f
  6552  0E90  145B               	bsf	___lwdiv@quotient,0
  6553  0E91                     l4708:	
  6554  0E91  3001               	movlw	1
  6555  0E92                     u5745:	
  6556  0E92  1003               	clrc
  6557  0E93  0CD7               	rrf	___lwdiv@divisor+1,f
  6558  0E94  0CD6               	rrf	___lwdiv@divisor,f
  6559  0E95  3EFF               	addlw	-1
  6560  0E96  1D03               	skipz
  6561  0E97  2E92               	goto	u5745
  6562  0E98  3001               	movlw	1
  6563  0E99  02DA               	subwf	___lwdiv@counter,f
  6564  0E9A  1D03               	btfss	3,2
  6565  0E9B  2E7B               	goto	l4702
  6566  0E9C                     l4712:	
  6567  0E9C  085C               	movf	___lwdiv@quotient+1,w
  6568  0E9D  01D7               	clrf	?___lwdiv+1
  6569  0E9E  07D7               	addwf	?___lwdiv+1,f
  6570  0E9F  085B               	movf	___lwdiv@quotient,w
  6571  0EA0  01D6               	clrf	?___lwdiv
  6572  0EA1  07D6               	addwf	?___lwdiv,f
  6573  0EA2  0008               	return
  6574  0EA3                     __end_of___lwdiv:	
  6575                           
  6576                           	psect	text35
  6577  0B2D                     __ptext35:	
  6578 ;; *************** function _Load_Initialization *****************
  6579 ;; Defined at:
  6580 ;;		line 9 in file "../src/OverLoad_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6594 ;;      Params:         0       0       0       0
  6595 ;;      Locals:         0       0       0       0
  6596 ;;      Temps:          0       0       0       0
  6597 ;;      Totals:         0       0       0       0
  6598 ;;Total ram usage:        0 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    3
  6601 ;; This function calls:
  6602 ;;		_setLoad_AH_AL_Restore
  6603 ;; This function is called by:
  6604 ;;		_main
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           
  6609                           ;psect for function _Load_Initialization
  6610  0B2D                     _Load_Initialization:	
  6611                           
  6612                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6616  0B2D  158A  247D         	fcall	_setLoad_AH_AL_Restore
  6617  0B2F  0008               	return
  6618  0B30                     __end_of_Load_Initialization:	
  6619                           
  6620                           	psect	text36
  6621  0C7D                     __ptext36:	
  6622 ;; *************** function _setLoad_AH_AL_Restore *****************
  6623 ;; Defined at:
  6624 ;;		line 291 in file "../src/OverLoad_B1.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  i               1    5[COMMON] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;		None               void
  6631 ;; Registers used:
  6632 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6638 ;;      Params:         0       0       0       0
  6639 ;;      Locals:         1       0       0       0
  6640 ;;      Temps:          1       0       0       0
  6641 ;;      Totals:         2       0       0       0
  6642 ;;Total ram usage:        2 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    2
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_Load_Initialization
  6649 ;;		_Load_Main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _setLoad_AH_AL_Restore
  6655  0C7D                     _setLoad_AH_AL_Restore:	
  6656                           
  6657                           ;OverLoad_B1.c: 292: char i;
  6658                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6662  0C7D  01F5               	clrf	setLoad_AH_AL_Restore@i
  6663  0C7E                     L18:	
  6664  0C7E  3005               	movlw	5
  6665  0C7F  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6666  0C80  1803               	btfsc	3,0
  6667  0C81  0008               	return
  6668                           
  6669                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
  6670  0C82  0875               	movf	setLoad_AH_AL_Restore@i,w
  6671  0C83  3ED8               	addlw	(_Load+10)& (0+255)
  6672  0C84  0084               	movwf	4
  6673  0C85  1383               	bcf	3,7	;select IRP bank1
  6674  0C86  0180               	clrf	0
  6675                           
  6676                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xff;
  6677  0C87  30FF               	movlw	255
  6678  0C88  00F4               	movwf	??_setLoad_AH_AL_Restore
  6679  0C89  0875               	movf	setLoad_AH_AL_Restore@i,w
  6680  0C8A  3EDD               	addlw	(_Load+15)& (0+255)
  6681  0C8B  0084               	movwf	4
  6682  0C8C  0874               	movf	??_setLoad_AH_AL_Restore,w
  6683  0C8D  0080               	movwf	0
  6684  0C8E  3001               	movlw	1
  6685  0C8F  00F4               	movwf	??_setLoad_AH_AL_Restore
  6686  0C90  0874               	movf	??_setLoad_AH_AL_Restore,w
  6687  0C91  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6688  0C92  2C7E               	goto	L18
  6689  0C93                     __end_of_setLoad_AH_AL_Restore:	
  6690                           
  6691                           	psect	text37
  6692  0D2D                     __ptext37:	
  6693 ;; *************** function _Lights_Main *****************
  6694 ;; Defined at:
  6695 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;		None               void
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6709 ;;      Params:         0       0       0       0
  6710 ;;      Locals:         0       0       0       0
  6711 ;;      Temps:          0       0       0       0
  6712 ;;      Totals:         0       0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    5
  6716 ;; This function calls:
  6717 ;;		_Lights_Control
  6718 ;;		_getLoad_OK
  6719 ;;		_getMain_All_Error_Status
  6720 ;;		_getMain_All_LightsStatus
  6721 ;;		_setLights_Main
  6722 ;; This function is called by:
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _Lights_Main
  6729  0D2D                     _Lights_Main:	
  6730                           
  6731                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6735  0D2D  1C77               	btfss	_Light,0
  6736  0D2E  2D43               	goto	l5052
  6737                           
  6738                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6739  0D2F  158A  2375  158A   	fcall	_getLoad_OK
  6740  0D32  3A01               	xorlw	1
  6741  0D33  1903               	skipnz
  6742  0D34  2D42               	goto	l1258
  6743  0D35  3000               	movlw	0
  6744  0D36  158A  2625  158A   	fcall	_getMain_All_Error_Status
  6745  0D39  3800               	iorlw	0
  6746  0D3A  1D03               	skipz
  6747  0D3B  2D42               	goto	l1258
  6748  0D3C  158A  238D  158A   	fcall	_getMain_All_LightsStatus
  6749  0D3F  3800               	iorlw	0
  6750  0D40  1D03               	skipz
  6751  0D41  2D43               	goto	l5052
  6752  0D42                     l1258:	
  6753                           
  6754                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6755  0D42  1077               	bcf	_Light,0
  6756  0D43                     l5052:	
  6757                           
  6758                           ;TriacRelay_B1.c: 68: }
  6759                           ;TriacRelay_B1.c: 69: }
  6760                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6761  0D43  3001               	movlw	1
  6762  0D44  158A  25C1  158A   	fcall	_setLights_Main
  6763                           
  6764                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6765  0D47  3001               	movlw	1
  6766  0D48  118A  25C7         	fcall	_Lights_Control
  6767  0D4A  0008               	return
  6768  0D4B                     __end_of_Lights_Main:	
  6769                           
  6770                           	psect	text38
  6771  0DC1                     __ptext38:	
  6772 ;; *************** function _setLights_Main *****************
  6773 ;; Defined at:
  6774 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  lights          1    wreg     unsigned char 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  lights          1    2[BANK0 ] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;		None               void
  6781 ;; Registers used:
  6782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6788 ;;      Params:         0       0       0       0
  6789 ;;      Locals:         0       1       0       0
  6790 ;;      Temps:          0       0       0       0
  6791 ;;      Totals:         0       1       0       0
  6792 ;;Total ram usage:        1 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    4
  6795 ;; This function calls:
  6796 ;;		_LightsPointSelect
  6797 ;;		_getLights_Allow_Condition
  6798 ;;		_setLights
  6799 ;; This function is called by:
  6800 ;;		_Lights_Main
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _setLights_Main
  6806  0DC1                     _setLights_Main:	
  6807                           
  6808                           ;incstack = 0
  6809                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6810                           ;setLights_Main@lights stored from wreg
  6811  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  6812  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  6813  0DC3  00D8               	movwf	setLights_Main@lights
  6814                           
  6815                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6816  0DC4  0858               	movf	setLights_Main@lights,w
  6817  0DC5  158A  2396  158A   	fcall	_LightsPointSelect
  6818                           
  6819                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6820  0DC8  0878               	movf	_Lights,w
  6821  0DC9  0084               	movwf	4
  6822  0DCA  1383               	bcf	3,7	;select IRP bank0
  6823  0DCB  1880               	btfsc	0,1
  6824  0DCC  0008               	return
  6825                           
  6826                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6827  0DCD  0878               	movf	_Lights,w
  6828  0DCE  0084               	movwf	4
  6829  0DCF  1D80               	btfss	0,3
  6830  0DD0  0008               	return
  6831                           
  6832                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6833  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  6834  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  6835  0DD3  0858               	movf	setLights_Main@lights,w
  6836  0DD4  158A  2493  158A   	fcall	_getLights_Allow_Condition
  6837  0DD7  3800               	iorlw	0
  6838  0DD8  1D03               	skipz
  6839  0DD9  0008               	return
  6840                           
  6841                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6842  0DDA  0878               	movf	_Lights,w
  6843  0DDB  0084               	movwf	4
  6844  0DDC  1383               	bcf	3,7	;select IRP bank0
  6845  0DDD  1180               	bcf	0,3
  6846                           
  6847                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6848  0DDE  0878               	movf	_Lights,w
  6849  0DDF  0084               	movwf	4
  6850  0DE0  1E00               	btfss	0,4
  6851  0DE1  2DEA               	goto	l4648
  6852                           
  6853                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6854  0DE2  01F5               	clrf	setLights@status
  6855  0DE3  0AF5               	incf	setLights@status,f
  6856  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  6857  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  6858  0DE6  0858               	movf	setLights_Main@lights,w
  6859  0DE7  158A  26E5         	fcall	_setLights
  6860                           
  6861                           ;TriacRelay_B1.c: 99: } else {
  6862  0DE9  0008               	return
  6863  0DEA                     l4648:	
  6864                           
  6865                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6866  0DEA  01F5               	clrf	setLights@status
  6867  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  6868  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  6869  0DED  0858               	movf	setLights_Main@lights,w
  6870  0DEE  158A  26E5         	fcall	_setLights
  6871  0DF0  0008               	return
  6872  0DF1                     __end_of_setLights_Main:	
  6873                           
  6874                           	psect	text39
  6875  0EE5                     __ptext39:	
  6876 ;; *************** function _setLights *****************
  6877 ;; Defined at:
  6878 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  lights          1    wreg     unsigned char 
  6881 ;;  status          1    5[COMMON] unsigned char 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  lights          1    1[BANK0 ] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;		None               void
  6886 ;; Registers used:
  6887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6893 ;;      Params:         1       0       0       0
  6894 ;;      Locals:         0       1       0       0
  6895 ;;      Temps:          0       1       0       0
  6896 ;;      Totals:         1       2       0       0
  6897 ;;Total ram usage:        3 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    3
  6900 ;; This function calls:
  6901 ;;		_setLights_Line
  6902 ;; This function is called by:
  6903 ;;		_setLights_Main
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _setLights
  6909  0EE5                     _setLights:	
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6913                           ;setLights@lights stored from wreg
  6914  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  6916  0EE7  00D7               	movwf	setLights@lights
  6917                           
  6918                           ;TriacRelay_B1.c: 114: Lights->GO = 1;
  6919  0EE8  0878               	movf	_Lights,w
  6920  0EE9  0084               	movwf	4
  6921  0EEA  1383               	bcf	3,7	;select IRP bank0
  6922  0EEB  1480               	bsf	0,1
  6923                           
  6924                           ;TriacRelay_B1.c: 115: if (status == 1) {
  6925  0EEC  0875               	movf	setLights@status,w
  6926  0EED  3A01               	xorlw	1
  6927  0EEE  1D03               	skipz
  6928  0EEF  2F0C               	goto	l4432
  6929                           
  6930                           ;TriacRelay_B1.c: 121: if (Lights->Status == 0) {
  6931  0EF0  0878               	movf	_Lights,w
  6932  0EF1  0084               	movwf	4
  6933  0EF2  1900               	btfsc	0,2
  6934  0EF3  2F2D               	goto	l4442
  6935                           
  6936                           ;TriacRelay_B1.c: 122: Lights->Status = 1;
  6937  0EF4  0878               	movf	_Lights,w
  6938  0EF5  0084               	movwf	4
  6939  0EF6  1500               	bsf	0,2
  6940                           
  6941                           ;TriacRelay_B1.c: 123: Lights->RelayValue = 100;
  6942  0EF7  3064               	movlw	100
  6943  0EF8  00D6               	movwf	??_setLights
  6944  0EF9  0878               	movf	_Lights,w
  6945  0EFA  3E06               	addlw	6
  6946  0EFB  0084               	movwf	4
  6947  0EFC  0856               	movf	??_setLights,w
  6948  0EFD  0080               	movwf	0
  6949                           
  6950                           ;TriacRelay_B1.c: 124: Lights->TriacValue = 140;
  6951  0EFE  308C               	movlw	140
  6952  0EFF  00D6               	movwf	??_setLights
  6953  0F00  0878               	movf	_Lights,w
  6954  0F01  3E04               	addlw	4
  6955  0F02  0084               	movwf	4
  6956  0F03  0856               	movf	??_setLights,w
  6957  0F04  0080               	movwf	0
  6958                           
  6959                           ;TriacRelay_B1.c: 125: Lights->Time = 0;
  6960  0F05  0878               	movf	_Lights,w
  6961  0F06  3E02               	addlw	2
  6962  0F07  0084               	movwf	4
  6963  0F08  0180               	clrf	0
  6964                           
  6965                           ;TriacRelay_B1.c: 127: Light.Load_Status = 1;
  6966  0F09  14F7               	bsf	_Light,1
  6967                           
  6968                           ;TriacRelay_B1.c: 128: setLights_Line(lights);
  6969  0F0A  0857               	movf	setLights@lights,w
  6970  0F0B  2F2A               	goto	L19
  6971  0F0C                     l4432:	
  6972                           ;TriacRelay_B1.c: 130: }
  6973                           ;TriacRelay_B1.c: 131: } else {
  6974                           
  6975                           
  6976                           ;TriacRelay_B1.c: 132: if (Lights->Status == 1) {
  6977  0F0C  0878               	movf	_Lights,w
  6978  0F0D  0084               	movwf	4
  6979  0F0E  1383               	bcf	3,7	;select IRP bank0
  6980  0F0F  1D00               	btfss	0,2
  6981  0F10  2F2D               	goto	l4442
  6982                           
  6983                           ;TriacRelay_B1.c: 133: Lights->Status = 0;
  6984  0F11  0878               	movf	_Lights,w
  6985  0F12  0084               	movwf	4
  6986  0F13  1100               	bcf	0,2
  6987                           
  6988                           ;TriacRelay_B1.c: 134: Lights->RelayValue = 40;
  6989  0F14  3028               	movlw	40
  6990  0F15  1283               	bcf	3,5	;RP0=0, select bank0
  6991  0F16  1303               	bcf	3,6	;RP1=0, select bank0
  6992  0F17  00D6               	movwf	??_setLights
  6993  0F18  0878               	movf	_Lights,w
  6994  0F19  3E06               	addlw	6
  6995  0F1A  0084               	movwf	4
  6996  0F1B  0856               	movf	??_setLights,w
  6997  0F1C  0080               	movwf	0
  6998                           
  6999                           ;TriacRelay_B1.c: 135: Lights->TriacValue = 80;
  7000  0F1D  3050               	movlw	80
  7001  0F1E  00D6               	movwf	??_setLights
  7002  0F1F  0878               	movf	_Lights,w
  7003  0F20  3E04               	addlw	4
  7004  0F21  0084               	movwf	4
  7005  0F22  0856               	movf	??_setLights,w
  7006  0F23  0080               	movwf	0
  7007                           
  7008                           ;TriacRelay_B1.c: 136: Lights->Time = 0;
  7009  0F24  0878               	movf	_Lights,w
  7010  0F25  3E02               	addlw	2
  7011  0F26  0084               	movwf	4
  7012  0F27  0180               	clrf	0
  7013                           
  7014                           ;TriacRelay_B1.c: 138: Light.Load_Status = 0;
  7015  0F28  10F7               	bcf	_Light,1
  7016                           
  7017                           ;TriacRelay_B1.c: 139: setLights_Line(0);
  7018  0F29  3000               	movlw	0
  7019  0F2A                     L19:	
  7020  0F2A  158A  23C3  158A   	fcall	_setLights_Line
  7021  0F2D                     l4442:	
  7022                           
  7023                           ;TriacRelay_B1.c: 141: }
  7024                           ;TriacRelay_B1.c: 142: }
  7025                           ;TriacRelay_B1.c: 144: if (lights == 1) {
  7026  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  7027  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  7028  0F2F  0857               	movf	setLights@lights,w
  7029  0F30  3A01               	xorlw	1
  7030  0F31  1D03               	skipz
  7031  0F32  0008               	return
  7032                           
  7033                           ;TriacRelay_B1.c: 145: RB2 = 1;
  7034  0F33  1506               	bsf	6,2	;volatile
  7035  0F34  0008               	return
  7036  0F35                     __end_of_setLights:	
  7037                           
  7038                           	psect	text40
  7039  0BC3                     __ptext40:	
  7040 ;; *************** function _setLights_Line *****************
  7041 ;; Defined at:
  7042 ;;		line 226 in file "../src/TriacRelay_B1.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  lights          1    wreg     unsigned char 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  lights          1    4[COMMON] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;		None               void
  7049 ;; Registers used:
  7050 ;;		wreg
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7056 ;;      Params:         0       0       0       0
  7057 ;;      Locals:         1       0       0       0
  7058 ;;      Temps:          0       0       0       0
  7059 ;;      Totals:         1       0       0       0
  7060 ;;Total ram usage:        1 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    2
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_setLights
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _setLights_Line
  7072  0BC3                     _setLights_Line:	
  7073                           
  7074                           ;incstack = 0
  7075                           ; Regs used in _setLights_Line: [wreg]
  7076                           ;setLights_Line@lights stored from wreg
  7077  0BC3  00F4               	movwf	setLights_Line@lights
  7078                           
  7079                           ;TriacRelay_B1.c: 227: Light.LoadGO = 1;
  7080  0BC4  1477               	bsf	_Light,0
  7081                           
  7082                           ;TriacRelay_B1.c: 229: Lights1.Line = 0;
  7083  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  7084  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  7085  0BC7  1048               	bcf	_Lights1+1,0
  7086                           
  7087                           ;TriacRelay_B1.c: 230: if (lights == 1 && lights != 0) {
  7088  0BC8  0874               	movf	setLights_Line@lights,w
  7089  0BC9  3A01               	xorlw	1
  7090  0BCA  1D03               	skipz
  7091  0BCB  0008               	return
  7092  0BCC  0874               	movf	setLights_Line@lights,w
  7093  0BCD  1903               	btfsc	3,2
  7094  0BCE  0008               	return
  7095                           
  7096                           ;TriacRelay_B1.c: 231: Lights1.Line = 1;
  7097  0BCF  1448               	bsf	_Lights1+1,0
  7098  0BD0  0008               	return
  7099  0BD1                     __end_of_setLights_Line:	
  7100                           
  7101                           	psect	text41
  7102  0C93                     __ptext41:	
  7103 ;; *************** function _getLights_Allow_Condition *****************
  7104 ;; Defined at:
  7105 ;;		line 305 in file "../src/TriacRelay_B1.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  lights          1    wreg     unsigned char 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  lights          1    0[COMMON] unsigned char 
  7110 ;;  allow           1    0[BANK0 ] unsigned char 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      unsigned char 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7120 ;;      Params:         0       0       0       0
  7121 ;;      Locals:         0       2       0       0
  7122 ;;      Temps:          1       0       0       0
  7123 ;;      Totals:         1       2       0       0
  7124 ;;Total ram usage:        3 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    3
  7127 ;; This function calls:
  7128 ;;		_getLoad_OK
  7129 ;; This function is called by:
  7130 ;;		_setLights_Main
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           
  7135                           ;psect for function _getLights_Allow_Condition
  7136  0C93                     _getLights_Allow_Condition:	
  7137                           
  7138                           ;TriacRelay_B1.c: 306: char allow = 0;
  7139                           
  7140                           ;incstack = 0
  7141                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7142  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  7143  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  7144  0C95  01D6               	clrf	getLights_Allow_Condition@allow
  7145                           
  7146                           ;TriacRelay_B1.c: 309: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7147  0C96  01D7               	clrf	_getLights_Allow_Condition$4604
  7148  0C97  0AD7               	incf	_getLights_Allow_Condition$4604,f
  7149  0C98  158A  2375  158A   	fcall	_getLoad_OK
  7150  0C9B  3800               	iorlw	0
  7151  0C9C  1903               	btfsc	3,2
  7152  0C9D  1877               	btfsc	_Light,0
  7153  0C9E  2CA2               	goto	l4412
  7154  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  7155  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  7156  0CA1  01D7               	clrf	_getLights_Allow_Condition$4604
  7157  0CA2                     l4412:	
  7158  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  7159  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  7160  0CA4  0857               	movf	_getLights_Allow_Condition$4604,w
  7161  0CA5  00F5               	movwf	??_getLights_Allow_Condition
  7162  0CA6  0875               	movf	??_getLights_Allow_Condition,w
  7163  0CA7  00D6               	movwf	getLights_Allow_Condition@allow
  7164                           
  7165                           ;TriacRelay_B1.c: 334: return allow;
  7166  0CA8  0856               	movf	getLights_Allow_Condition@allow,w
  7167  0CA9  0008               	return
  7168  0CAA                     __end_of_getLights_Allow_Condition:	
  7169                           
  7170                           	psect	text42
  7171  0B75                     __ptext42:	
  7172 ;; *************** function _getLoad_OK *****************
  7173 ;; Defined at:
  7174 ;;		line 271 in file "../src/OverLoad_B1.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  ok              1    4[COMMON] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      unsigned char 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7188 ;;      Params:         0       0       0       0
  7189 ;;      Locals:         1       0       0       0
  7190 ;;      Temps:          0       0       0       0
  7191 ;;      Totals:         1       0       0       0
  7192 ;;Total ram usage:        1 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    2
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_Lights_Main
  7199 ;;		_getLights_Allow_Condition
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _getLoad_OK
  7205  0B75                     _getLoad_OK:	
  7206                           
  7207                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
  7208                           
  7209                           ;incstack = 0
  7210                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7211  0B75  3000               	movlw	0
  7212  0B76  1683               	bsf	3,5	;RP0=1, select bank1
  7213  0B77  1303               	bcf	3,6	;RP1=0, select bank1
  7214  0B78  1BCE               	btfsc	_Load^(0+128),7
  7215  0B79  3001               	movlw	1
  7216  0B7A  00F4               	movwf	getLoad_OK@ok
  7217                           
  7218                           ;OverLoad_B1.c: 273: return ok;
  7219  0B7B  0874               	movf	getLoad_OK@ok,w
  7220  0B7C  0008               	return
  7221  0B7D                     __end_of_getLoad_OK:	
  7222                           
  7223                           	psect	text43
  7224  0B8D                     __ptext43:	
  7225 ;; *************** function _getMain_All_LightsStatus *****************
  7226 ;; Defined at:
  7227 ;;		line 374 in file "../src/Main_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  status          1    4[COMMON] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7241 ;;      Params:         0       0       0       0
  7242 ;;      Locals:         1       0       0       0
  7243 ;;      Temps:          0       0       0       0
  7244 ;;      Totals:         1       0       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    2
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_Load_Main
  7252 ;;		_setTemp_Main
  7253 ;;		_Lights_Main
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function _getMain_All_LightsStatus
  7259  0B8D                     _getMain_All_LightsStatus:	
  7260                           
  7261                           ;Main_B1.c: 375: char status = 0;
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7265  0B8D  01F4               	clrf	getMain_All_LightsStatus@status
  7266                           
  7267                           ;Main_B1.c: 379: status = Lights1.Status == 1 ? 1 : 0;
  7268  0B8E  3000               	movlw	0
  7269  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  7270  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  7271  0B91  1947               	btfsc	_Lights1,2
  7272  0B92  3001               	movlw	1
  7273  0B93  00F4               	movwf	getMain_All_LightsStatus@status
  7274                           
  7275                           ;Main_B1.c: 421: return status;
  7276  0B94  0874               	movf	getMain_All_LightsStatus@status,w
  7277  0B95  0008               	return
  7278  0B96                     __end_of_getMain_All_LightsStatus:	
  7279                           
  7280                           	psect	text44
  7281  05C7                     __ptext44:	
  7282 ;; *************** function _Lights_Control *****************
  7283 ;; Defined at:
  7284 ;;		line 161 in file "../src/TriacRelay_B1.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  lights          1    wreg     unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  lights          1   10[BANK0 ] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;		None               void
  7291 ;; Registers used:
  7292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7298 ;;      Params:         0       0       0       0
  7299 ;;      Locals:         0       1       0       0
  7300 ;;      Temps:          0       2       0       0
  7301 ;;      Totals:         0       3       0       0
  7302 ;;Total ram usage:        3 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		_LightsPointSelect
  7307 ;;		___awdiv
  7308 ;; This function is called by:
  7309 ;;		_Lights_Main
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           
  7314                           ;psect for function _Lights_Control
  7315  05C7                     _Lights_Control:	
  7316                           
  7317                           ;incstack = 0
  7318                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7319                           ;Lights_Control@lights stored from wreg
  7320  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  7321  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  7322  05C9  00E0               	movwf	Lights_Control@lights
  7323                           
  7324                           ;TriacRelay_B1.c: 162: LightsPointSelect(lights);
  7325  05CA  0860               	movf	Lights_Control@lights,w
  7326  05CB  158A  2396  118A   	fcall	_LightsPointSelect
  7327                           
  7328                           ;TriacRelay_B1.c: 163: if (Lights->GO == 1) {
  7329  05CE  0878               	movf	_Lights,w
  7330  05CF  0084               	movwf	4
  7331  05D0  1383               	bcf	3,7	;select IRP bank0
  7332  05D1  1C80               	btfss	0,1
  7333  05D2  0008               	return
  7334                           
  7335                           ;TriacRelay_B1.c: 164: Lights->Time++;
  7336  05D3  3001               	movlw	1
  7337  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  7338  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  7339  05D6  00DE               	movwf	??_Lights_Control
  7340  05D7  0878               	movf	_Lights,w
  7341  05D8  3E02               	addlw	2
  7342  05D9  0084               	movwf	4
  7343  05DA  085E               	movf	??_Lights_Control,w
  7344  05DB  0780               	addwf	0,f
  7345                           
  7346                           ;TriacRelay_B1.c: 165: if (Lights->RelaySet == 0) {
  7347  05DC  0878               	movf	_Lights,w
  7348  05DD  0084               	movwf	4
  7349  05DE  1B80               	btfsc	0,7
  7350  05DF  2E16               	goto	l4666
  7351                           
  7352                           ;TriacRelay_B1.c: 166: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7353  05E0  3014               	movlw	20
  7354  05E1  00D6               	movwf	___awdiv@divisor
  7355  05E2  3000               	movlw	0
  7356  05E3  00D7               	movwf	___awdiv@divisor+1
  7357  05E4  0878               	movf	_Lights,w
  7358  05E5  3E06               	addlw	6
  7359  05E6  0084               	movwf	4
  7360  05E7  0800               	movf	0,w
  7361  05E8  00DE               	movwf	??_Lights_Control
  7362  05E9  01DF               	clrf	??_Lights_Control+1
  7363  05EA  085E               	movf	??_Lights_Control,w
  7364  05EB  00D8               	movwf	___awdiv@dividend
  7365  05EC  085F               	movf	??_Lights_Control+1,w
  7366  05ED  00D9               	movwf	___awdiv@dividend+1
  7367  05EE  118A  27A2  118A   	fcall	___awdiv
  7368  05F1  0878               	movf	_Lights,w
  7369  05F2  3E02               	addlw	2
  7370  05F3  0084               	movwf	4
  7371  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  7372  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  7373  05F6  0857               	movf	?___awdiv+1,w
  7374  05F7  3A80               	xorlw	128
  7375  05F8  3C80               	sublw	128
  7376  05F9  1D03               	skipz
  7377  05FA  2DFE               	goto	u5595
  7378  05FB  0856               	movf	?___awdiv,w
  7379  05FC  1383               	bcf	3,7	;select IRP bank0
  7380  05FD  0200               	subwf	0,w
  7381  05FE                     u5595:	
  7382  05FE  1C03               	skipc
  7383  05FF  0008               	return
  7384                           
  7385                           ;TriacRelay_B1.c: 167: Lights->RelaySet = 1;
  7386  0600  0878               	movf	_Lights,w
  7387  0601  0084               	movwf	4
  7388  0602  1383               	bcf	3,7	;select IRP bank0
  7389  0603  1780               	bsf	0,7
  7390                           
  7391                           ;TriacRelay_B1.c: 169: if (lights == 1) {
  7392  0604  1283               	bcf	3,5	;RP0=0, select bank0
  7393  0605  1303               	bcf	3,6	;RP1=0, select bank0
  7394  0606  0860               	movf	Lights_Control@lights,w
  7395  0607  3A01               	xorlw	1
  7396  0608  1D03               	skipz
  7397  0609  0008               	return
  7398                           
  7399                           ;TriacRelay_B1.c: 170: RB3 = Lights->Status == 1 ? 1 : 0;
  7400  060A  0878               	movf	_Lights,w
  7401  060B  0084               	movwf	4
  7402  060C  1D00               	btfss	0,2
  7403  060D  2E12               	goto	u5610
  7404  060E  1283               	bcf	3,5	;RP0=0, select bank0
  7405  060F  1303               	bcf	3,6	;RP1=0, select bank0
  7406  0610  1586               	bsf	6,3	;volatile
  7407  0611  0008               	return
  7408  0612                     u5610:	
  7409  0612  1283               	bcf	3,5	;RP0=0, select bank0
  7410  0613  1303               	bcf	3,6	;RP1=0, select bank0
  7411  0614  1186               	bcf	6,3	;volatile
  7412                           
  7413                           ;TriacRelay_B1.c: 171: }
  7414                           ;TriacRelay_B1.c: 183: }
  7415                           ;TriacRelay_B1.c: 184: } else {
  7416  0615  0008               	return
  7417  0616                     l4666:	
  7418                           
  7419                           ;TriacRelay_B1.c: 185: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7420  0616  3014               	movlw	20
  7421  0617  00D6               	movwf	___awdiv@divisor
  7422  0618  3000               	movlw	0
  7423  0619  00D7               	movwf	___awdiv@divisor+1
  7424  061A  0878               	movf	_Lights,w
  7425  061B  3E04               	addlw	4
  7426  061C  0084               	movwf	4
  7427  061D  1383               	bcf	3,7	;select IRP bank0
  7428  061E  0800               	movf	0,w
  7429  061F  00DE               	movwf	??_Lights_Control
  7430  0620  01DF               	clrf	??_Lights_Control+1
  7431  0621  085E               	movf	??_Lights_Control,w
  7432  0622  00D8               	movwf	___awdiv@dividend
  7433  0623  085F               	movf	??_Lights_Control+1,w
  7434  0624  00D9               	movwf	___awdiv@dividend+1
  7435  0625  118A  27A2  118A   	fcall	___awdiv
  7436  0628  0878               	movf	_Lights,w
  7437  0629  3E02               	addlw	2
  7438  062A  0084               	movwf	4
  7439  062B  1283               	bcf	3,5	;RP0=0, select bank0
  7440  062C  1303               	bcf	3,6	;RP1=0, select bank0
  7441  062D  0857               	movf	?___awdiv+1,w
  7442  062E  3A80               	xorlw	128
  7443  062F  3C80               	sublw	128
  7444  0630  1D03               	skipz
  7445  0631  2E35               	goto	u5635
  7446  0632  0856               	movf	?___awdiv,w
  7447  0633  1383               	bcf	3,7	;select IRP bank0
  7448  0634  0200               	subwf	0,w
  7449  0635                     u5635:	
  7450  0635  1C03               	skipc
  7451  0636  0008               	return
  7452                           
  7453                           ;TriacRelay_B1.c: 186: Lights->Time = 0;
  7454  0637  0878               	movf	_Lights,w
  7455  0638  3E02               	addlw	2
  7456  0639  0084               	movwf	4
  7457  063A  1383               	bcf	3,7	;select IRP bank0
  7458  063B  0180               	clrf	0
  7459                           
  7460                           ;TriacRelay_B1.c: 187: Lights->GO = 0;
  7461  063C  0878               	movf	_Lights,w
  7462  063D  0084               	movwf	4
  7463  063E  1080               	bcf	0,1
  7464                           
  7465                           ;TriacRelay_B1.c: 188: Lights->RelaySet = 0;
  7466  063F  0878               	movf	_Lights,w
  7467  0640  0084               	movwf	4
  7468  0641  1380               	bcf	0,7
  7469                           
  7470                           ;TriacRelay_B1.c: 191: if (lights == 1) {
  7471  0642  1283               	bcf	3,5	;RP0=0, select bank0
  7472  0643  1303               	bcf	3,6	;RP1=0, select bank0
  7473  0644  0860               	movf	Lights_Control@lights,w
  7474  0645  3A01               	xorlw	1
  7475  0646  1D03               	skipz
  7476  0647  0008               	return
  7477                           
  7478                           ;TriacRelay_B1.c: 192: RB2 = 0;
  7479  0648  1106               	bcf	6,2	;volatile
  7480  0649  0008               	return
  7481  064A                     __end_of_Lights_Control:	
  7482                           
  7483                           	psect	text45
  7484  07A2                     __ptext45:	
  7485 ;; *************** function ___awdiv *****************
  7486 ;; Defined at:
  7487 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;  divisor         2    0[BANK0 ] int 
  7490 ;;  dividend        2    2[BANK0 ] int 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  quotient        2    6[BANK0 ] int 
  7493 ;;  sign            1    5[BANK0 ] unsigned char 
  7494 ;;  counter         1    4[BANK0 ] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  2    0[BANK0 ] int 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7504 ;;      Params:         0       4       0       0
  7505 ;;      Locals:         0       4       0       0
  7506 ;;      Temps:          1       0       0       0
  7507 ;;      Totals:         1       8       0       0
  7508 ;;Total ram usage:        9 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    2
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_setTemp_Main
  7515 ;;		_getPIR_AD
  7516 ;;		_Lights_Control
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           
  7521                           ;psect for function ___awdiv
  7522  07A2                     ___awdiv:	
  7523                           
  7524                           ;incstack = 0
  7525                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7526  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  7527  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  7528  07A4  01DB               	clrf	___awdiv@sign
  7529  07A5  1FD7               	btfss	___awdiv@divisor+1,7
  7530  07A6  2FAE               	goto	l4454
  7531  07A7  09D6               	comf	___awdiv@divisor,f
  7532  07A8  09D7               	comf	___awdiv@divisor+1,f
  7533  07A9  0AD6               	incf	___awdiv@divisor,f
  7534  07AA  1903               	skipnz
  7535  07AB  0AD7               	incf	___awdiv@divisor+1,f
  7536  07AC  01DB               	clrf	___awdiv@sign
  7537  07AD  0ADB               	incf	___awdiv@sign,f
  7538  07AE                     l4454:	
  7539  07AE  1FD9               	btfss	___awdiv@dividend+1,7
  7540  07AF  2FB9               	goto	l4460
  7541  07B0  09D8               	comf	___awdiv@dividend,f
  7542  07B1  09D9               	comf	___awdiv@dividend+1,f
  7543  07B2  0AD8               	incf	___awdiv@dividend,f
  7544  07B3  1903               	skipnz
  7545  07B4  0AD9               	incf	___awdiv@dividend+1,f
  7546  07B5  3001               	movlw	1
  7547  07B6  00F4               	movwf	??___awdiv
  7548  07B7  0874               	movf	??___awdiv,w
  7549  07B8  06DB               	xorwf	___awdiv@sign,f
  7550  07B9                     l4460:	
  7551  07B9  01DC               	clrf	___awdiv@quotient
  7552  07BA  01DD               	clrf	___awdiv@quotient+1
  7553  07BB  0857               	movf	___awdiv@divisor+1,w
  7554  07BC  0456               	iorwf	___awdiv@divisor,w
  7555  07BD  1903               	skipnz
  7556  07BE  2FF0               	goto	l4482
  7557  07BF  01DA               	clrf	___awdiv@counter
  7558  07C0  0ADA               	incf	___awdiv@counter,f
  7559  07C1                     l4470:	
  7560  07C1  1BD7               	btfsc	___awdiv@divisor+1,7
  7561  07C2  2FCF               	goto	l4472
  7562  07C3  3001               	movlw	1
  7563  07C4                     u5195:	
  7564  07C4  1003               	clrc
  7565  07C5  0DD6               	rlf	___awdiv@divisor,f
  7566  07C6  0DD7               	rlf	___awdiv@divisor+1,f
  7567  07C7  3EFF               	addlw	-1
  7568  07C8  1D03               	skipz
  7569  07C9  2FC4               	goto	u5195
  7570  07CA  3001               	movlw	1
  7571  07CB  00F4               	movwf	??___awdiv
  7572  07CC  0874               	movf	??___awdiv,w
  7573  07CD  07DA               	addwf	___awdiv@counter,f
  7574  07CE  2FC1               	goto	l4470
  7575  07CF                     l4472:	
  7576  07CF  3001               	movlw	1
  7577  07D0                     u5215:	
  7578  07D0  1003               	clrc
  7579  07D1  0DDC               	rlf	___awdiv@quotient,f
  7580  07D2  0DDD               	rlf	___awdiv@quotient+1,f
  7581  07D3  3EFF               	addlw	-1
  7582  07D4  1D03               	skipz
  7583  07D5  2FD0               	goto	u5215
  7584  07D6  0857               	movf	___awdiv@divisor+1,w
  7585  07D7  0259               	subwf	___awdiv@dividend+1,w
  7586  07D8  1D03               	skipz
  7587  07D9  2FDC               	goto	u5225
  7588  07DA  0856               	movf	___awdiv@divisor,w
  7589  07DB  0258               	subwf	___awdiv@dividend,w
  7590  07DC                     u5225:	
  7591  07DC  1C03               	skipc
  7592  07DD  2FE5               	goto	l4478
  7593  07DE  0856               	movf	___awdiv@divisor,w
  7594  07DF  02D8               	subwf	___awdiv@dividend,f
  7595  07E0  0857               	movf	___awdiv@divisor+1,w
  7596  07E1  1C03               	skipc
  7597  07E2  03D9               	decf	___awdiv@dividend+1,f
  7598  07E3  02D9               	subwf	___awdiv@dividend+1,f
  7599  07E4  145C               	bsf	___awdiv@quotient,0
  7600  07E5                     l4478:	
  7601  07E5  3001               	movlw	1
  7602  07E6                     u5235:	
  7603  07E6  1003               	clrc
  7604  07E7  0CD7               	rrf	___awdiv@divisor+1,f
  7605  07E8  0CD6               	rrf	___awdiv@divisor,f
  7606  07E9  3EFF               	addlw	-1
  7607  07EA  1D03               	skipz
  7608  07EB  2FE6               	goto	u5235
  7609  07EC  3001               	movlw	1
  7610  07ED  02DA               	subwf	___awdiv@counter,f
  7611  07EE  1D03               	btfss	3,2
  7612  07EF  2FCF               	goto	l4472
  7613  07F0                     l4482:	
  7614  07F0  085B               	movf	___awdiv@sign,w
  7615  07F1  1903               	btfsc	3,2
  7616  07F2  2FF8               	goto	l4486
  7617  07F3  09DC               	comf	___awdiv@quotient,f
  7618  07F4  09DD               	comf	___awdiv@quotient+1,f
  7619  07F5  0ADC               	incf	___awdiv@quotient,f
  7620  07F6  1903               	skipnz
  7621  07F7  0ADD               	incf	___awdiv@quotient+1,f
  7622  07F8                     l4486:	
  7623  07F8  085D               	movf	___awdiv@quotient+1,w
  7624  07F9  01D7               	clrf	?___awdiv+1
  7625  07FA  07D7               	addwf	?___awdiv+1,f
  7626  07FB  085C               	movf	___awdiv@quotient,w
  7627  07FC  01D6               	clrf	?___awdiv
  7628  07FD  07D6               	addwf	?___awdiv,f
  7629  07FE  0008               	return
  7630  07FF                     __end_of___awdiv:	
  7631                           
  7632                           	psect	text46
  7633  0B40                     __ptext46:	
  7634 ;; *************** function _Lights_Initialization *****************
  7635 ;; Defined at:
  7636 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;		None
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;		None               void
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0, pclath, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7650 ;;      Params:         0       0       0       0
  7651 ;;      Locals:         0       0       0       0
  7652 ;;      Temps:          0       0       0       0
  7653 ;;      Totals:         0       0       0       0
  7654 ;;Total ram usage:        0 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    4
  7657 ;; This function calls:
  7658 ;;		_setLights_Initialization
  7659 ;; This function is called by:
  7660 ;;		_main
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _Lights_Initialization
  7666  0B40                     _Lights_Initialization:	
  7667                           
  7668                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7672  0B40  3001               	movlw	1
  7673  0B41  158A  235F         	fcall	_setLights_Initialization
  7674  0B43  0008               	return
  7675  0B44                     __end_of_Lights_Initialization:	
  7676                           
  7677                           	psect	text47
  7678  0B5F                     __ptext47:	
  7679 ;; *************** function _setLights_Initialization *****************
  7680 ;; Defined at:
  7681 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  lights          1    wreg     unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  lights          1    0[BANK0 ] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;		None               void
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0, pclath, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7695 ;;      Params:         0       0       0       0
  7696 ;;      Locals:         0       1       0       0
  7697 ;;      Temps:          0       0       0       0
  7698 ;;      Totals:         0       1       0       0
  7699 ;;Total ram usage:        1 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    3
  7702 ;; This function calls:
  7703 ;;		_LightsPointSelect
  7704 ;; This function is called by:
  7705 ;;		_Lights_Initialization
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _setLights_Initialization
  7711  0B5F                     _setLights_Initialization:	
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7715                           ;setLights_Initialization@lights stored from wreg
  7716  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  7717  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  7718  0B61  00D6               	movwf	setLights_Initialization@lights
  7719                           
  7720                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7721  0B62  0856               	movf	setLights_Initialization@lights,w
  7722  0B63  158A  2396         	fcall	_LightsPointSelect
  7723  0B65  0008               	return
  7724  0B66                     __end_of_setLights_Initialization:	
  7725                           
  7726                           	psect	text48
  7727  0B2A                     __ptext48:	
  7728 ;; *************** function _LED_Main *****************
  7729 ;; Defined at:
  7730 ;;		line 47 in file "../src/LED_B1.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;		None
  7735 ;; Return value:  Size  Location     Type
  7736 ;;		None               void
  7737 ;; Registers used:
  7738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7744 ;;      Params:         0       0       0       0
  7745 ;;      Locals:         0       0       0       0
  7746 ;;      Temps:          0       0       0       0
  7747 ;;      Totals:         0       0       0       0
  7748 ;;Total ram usage:        0 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    5
  7751 ;; This function calls:
  7752 ;;		_setPIRLED_Main
  7753 ;; This function is called by:
  7754 ;;		_main
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _LED_Main
  7760  0B2A                     _LED_Main:	
  7761                           
  7762                           ;LED_B1.c: 50: setPIRLED_Main();
  7763                           
  7764                           ;incstack = 0
  7765                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7766  0B2A  118A  2731         	fcall	_setPIRLED_Main
  7767  0B2C  0008               	return
  7768  0B2D                     __end_of_LED_Main:	
  7769                           
  7770                           	psect	text49
  7771  0731                     __ptext49:	
  7772 ;; *************** function _setPIRLED_Main *****************
  7773 ;; Defined at:
  7774 ;;		line 253 in file "../src/LED_B1.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  count           1    3[BANK0 ] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;		None               void
  7781 ;; Registers used:
  7782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7788 ;;      Params:         0       0       0       0
  7789 ;;      Locals:         0       1       0       0
  7790 ;;      Temps:          0       1       0       0
  7791 ;;      Totals:         0       2       0       0
  7792 ;;Total ram usage:        2 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    4
  7795 ;; This function calls:
  7796 ;;		_setLED
  7797 ;; This function is called by:
  7798 ;;		_LED_Main
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           
  7803                           ;psect for function _setPIRLED_Main
  7804  0731                     _setPIRLED_Main:	
  7805                           
  7806                           ;LED_B1.c: 254: char count;
  7807                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7811  0731  1283               	bcf	3,5	;RP0=0, select bank0
  7812  0732  1303               	bcf	3,6	;RP1=0, select bank0
  7813  0733  1C30               	btfss	_PIRLED,0
  7814  0734  0008               	return
  7815                           
  7816                           ;LED_B1.c: 256: PIRLED.Time++;
  7817  0735  3001               	movlw	1
  7818  0736  07B2               	addwf	_PIRLED+2,f
  7819  0737  1803               	skipnc
  7820  0738  0AB3               	incf	_PIRLED+3,f
  7821  0739  3000               	movlw	0
  7822  073A  07B3               	addwf	_PIRLED+3,f
  7823                           
  7824                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  7825  073B  3000               	movlw	0
  7826  073C  0233               	subwf	_PIRLED+3,w
  7827  073D  3019               	movlw	25
  7828  073E  1903               	skipnz
  7829  073F  0232               	subwf	_PIRLED+2,w
  7830  0740  1C03               	skipc
  7831  0741  0008               	return
  7832                           
  7833                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7834  0742  01B2               	clrf	_PIRLED+2
  7835  0743  01B3               	clrf	_PIRLED+3
  7836                           
  7837                           ;LED_B1.c: 259: setLED(1, 0);
  7838  0744  01D6               	clrf	setLED@command
  7839  0745  3001               	movlw	1
  7840  0746  158A  2735  118A   	fcall	_setLED
  7841                           
  7842                           ;LED_B1.c: 260: setLED(2, 0);
  7843  0749  1283               	bcf	3,5	;RP0=0, select bank0
  7844  074A  1303               	bcf	3,6	;RP1=0, select bank0
  7845  074B  01D6               	clrf	setLED@command
  7846  074C  3002               	movlw	2
  7847  074D  158A  2735  118A   	fcall	_setLED
  7848                           
  7849                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7850  0750  1283               	bcf	3,5	;RP0=0, select bank0
  7851  0751  1303               	bcf	3,6	;RP1=0, select bank0
  7852  0752  1CB0               	btfss	_PIRLED,1
  7853  0753  2F58               	goto	l4526
  7854                           
  7855                           ;LED_B1.c: 262: count = 4;
  7856  0754  3004               	movlw	4
  7857  0755  00D8               	movwf	??_setPIRLED_Main
  7858  0756  0858               	movf	??_setPIRLED_Main,w
  7859  0757  00D9               	movwf	setPIRLED_Main@count
  7860  0758                     l4526:	
  7861                           
  7862                           ;LED_B1.c: 263: }
  7863                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7864  0758  1D30               	btfss	_PIRLED,2
  7865  0759  2F5E               	goto	l4530
  7866                           
  7867                           ;LED_B1.c: 265: count = 6;
  7868  075A  3006               	movlw	6
  7869  075B  00D8               	movwf	??_setPIRLED_Main
  7870  075C  0858               	movf	??_setPIRLED_Main,w
  7871  075D  00D9               	movwf	setPIRLED_Main@count
  7872  075E                     l4530:	
  7873                           
  7874                           ;LED_B1.c: 266: }
  7875                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7876  075E  1DB0               	btfss	_PIRLED,3
  7877  075F  2F64               	goto	l4534
  7878                           
  7879                           ;LED_B1.c: 268: count = 8;
  7880  0760  3008               	movlw	8
  7881  0761  00D8               	movwf	??_setPIRLED_Main
  7882  0762  0858               	movf	??_setPIRLED_Main,w
  7883  0763  00D9               	movwf	setPIRLED_Main@count
  7884  0764                     l4534:	
  7885                           
  7886                           ;LED_B1.c: 269: }
  7887                           ;LED_B1.c: 270: PIRLED.Count++;
  7888  0764  3001               	movlw	1
  7889  0765  00D8               	movwf	??_setPIRLED_Main
  7890  0766  0858               	movf	??_setPIRLED_Main,w
  7891  0767  07B1               	addwf	_PIRLED+1,f
  7892                           
  7893                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7894  0768  0831               	movf	_PIRLED+1,w
  7895  0769  3A01               	xorlw	1
  7896  076A  1903               	skipnz
  7897  076B  2F70               	goto	l4540
  7898  076C  0831               	movf	_PIRLED+1,w
  7899  076D  3A02               	xorlw	2
  7900  076E  1D03               	skipz
  7901  076F  2F84               	goto	l4544
  7902  0770                     l4540:	
  7903                           
  7904                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7905  0770  1003               	clrc
  7906  0771  1E30               	btfss	_PIRLED,4
  7907  0772  1403               	setc
  7908  0773  1C03               	btfss	3,0
  7909  0774  2F79               	goto	u5350
  7910  0775  1283               	bcf	3,5	;RP0=0, select bank0
  7911  0776  1303               	bcf	3,6	;RP1=0, select bank0
  7912  0777  1630               	bsf	_PIRLED,4
  7913  0778  2F7C               	goto	l4542
  7914  0779                     u5350:	
  7915  0779  1283               	bcf	3,5	;RP0=0, select bank0
  7916  077A  1303               	bcf	3,6	;RP1=0, select bank0
  7917  077B  1230               	bcf	_PIRLED,4
  7918  077C                     l4542:	
  7919                           
  7920                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  7921  077C  3000               	movlw	0
  7922  077D  1A30               	btfsc	_PIRLED,4
  7923  077E  3001               	movlw	1
  7924  077F  00D6               	movwf	setLED@command
  7925  0780  3002               	movlw	2
  7926  0781  158A  2735         	fcall	_setLED
  7927                           
  7928                           ;LED_B1.c: 274: } else {
  7929  0783  0008               	return
  7930  0784                     l4544:	
  7931                           
  7932                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7933  0784  1003               	clrc
  7934  0785  1283               	bcf	3,5	;RP0=0, select bank0
  7935  0786  1303               	bcf	3,6	;RP1=0, select bank0
  7936  0787  1E30               	btfss	_PIRLED,4
  7937  0788  1403               	setc
  7938  0789  1C03               	btfss	3,0
  7939  078A  2F8F               	goto	u5370
  7940  078B  1283               	bcf	3,5	;RP0=0, select bank0
  7941  078C  1303               	bcf	3,6	;RP1=0, select bank0
  7942  078D  1630               	bsf	_PIRLED,4
  7943  078E  2F92               	goto	l4546
  7944  078F                     u5370:	
  7945  078F  1283               	bcf	3,5	;RP0=0, select bank0
  7946  0790  1303               	bcf	3,6	;RP1=0, select bank0
  7947  0791  1230               	bcf	_PIRLED,4
  7948  0792                     l4546:	
  7949                           
  7950                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  7951  0792  3000               	movlw	0
  7952  0793  1A30               	btfsc	_PIRLED,4
  7953  0794  3001               	movlw	1
  7954  0795  00D6               	movwf	setLED@command
  7955  0796  3001               	movlw	1
  7956  0797  158A  2735  118A   	fcall	_setLED
  7957                           
  7958                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  7959  079A  1283               	bcf	3,5	;RP0=0, select bank0
  7960  079B  1303               	bcf	3,6	;RP1=0, select bank0
  7961  079C  0831               	movf	_PIRLED+1,w
  7962  079D  0659               	xorwf	setPIRLED_Main@count,w
  7963  079E  1D03               	skipz
  7964  079F  0008               	return
  7965                           
  7966                           ;LED_B1.c: 278: PIRLED.Count = 0;
  7967  07A0  01B1               	clrf	_PIRLED+1
  7968  07A1  0008               	return
  7969  07A2                     __end_of_setPIRLED_Main:	
  7970                           
  7971                           	psect	text50
  7972  0B6D                     __ptext50:	
  7973 ;; *************** function _LED_Initialization *****************
  7974 ;; Defined at:
  7975 ;;		line 31 in file "../src/LED_B1.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;		None               void
  7982 ;; Registers used:
  7983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7989 ;;      Params:         0       0       0       0
  7990 ;;      Locals:         0       0       0       0
  7991 ;;      Temps:          0       0       0       0
  7992 ;;      Totals:         0       0       0       0
  7993 ;;Total ram usage:        0 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    5
  7996 ;; This function calls:
  7997 ;;		_setLED_Initialization
  7998 ;; This function is called by:
  7999 ;;		_main
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _LED_Initialization
  8005  0B6D                     _LED_Initialization:	
  8006                           
  8007                           ;LED_B1.c: 33: setLED_Initialization(1);
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8011  0B6D  3001               	movlw	1
  8012  0B6E  158A  2441  158A   	fcall	_setLED_Initialization
  8013                           
  8014                           ;LED_B1.c: 36: setLED_Initialization(2);
  8015  0B71  3002               	movlw	2
  8016  0B72  158A  2441         	fcall	_setLED_Initialization
  8017  0B74  0008               	return
  8018  0B75                     __end_of_LED_Initialization:	
  8019                           
  8020                           	psect	text51
  8021  0C41                     __ptext51:	
  8022 ;; *************** function _setLED_Initialization *****************
  8023 ;; Defined at:
  8024 ;;		line 69 in file "../src/LED_B1.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  led             1    wreg     unsigned char 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  led             1    2[BANK0 ] unsigned char 
  8029 ;; Return value:  Size  Location     Type
  8030 ;;		None               void
  8031 ;; Registers used:
  8032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8038 ;;      Params:         0       0       0       0
  8039 ;;      Locals:         0       1       0       0
  8040 ;;      Temps:          0       0       0       0
  8041 ;;      Totals:         0       1       0       0
  8042 ;;Total ram usage:        1 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; Hardware stack levels required when called:    4
  8045 ;; This function calls:
  8046 ;;		_LedPointSelect
  8047 ;;		_setLED
  8048 ;; This function is called by:
  8049 ;;		_LED_Initialization
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           
  8054                           ;psect for function _setLED_Initialization
  8055  0C41                     _setLED_Initialization:	
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8059                           ;setLED_Initialization@led stored from wreg
  8060  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  8061  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  8062  0C43  00D8               	movwf	setLED_Initialization@led
  8063                           
  8064                           ;LED_B1.c: 70: LedPointSelect(led);
  8065  0C44  0858               	movf	setLED_Initialization@led,w
  8066  0C45  158A  242F  158A   	fcall	_LedPointSelect
  8067                           
  8068                           ;LED_B1.c: 71: LED->Enable = 1;
  8069  0C48  0876               	movf	_LED,w
  8070  0C49  0084               	movwf	4
  8071  0C4A  1383               	bcf	3,7	;select IRP bank0
  8072  0C4B  1400               	bsf	0,0
  8073                           
  8074                           ;LED_B1.c: 72: setLED(led, 0);
  8075  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  8076  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  8077  0C4E  01D6               	clrf	setLED@command
  8078  0C4F  0858               	movf	setLED_Initialization@led,w
  8079  0C50  158A  2735         	fcall	_setLED
  8080  0C52  0008               	return
  8081  0C53                     __end_of_setLED_Initialization:	
  8082                           
  8083                           	psect	text52
  8084  064A                     __ptext52:	
  8085 ;; *************** function _Exception_Main *****************
  8086 ;; Defined at:
  8087 ;;		line 506 in file "../src/Main_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  i               2   10[BANK0 ] int 
  8092 ;;  status          1    9[BANK0 ] unsigned char 
  8093 ;;  error           1   12[BANK0 ] unsigned char 
  8094 ;;  count           1    8[BANK0 ] unsigned char 
  8095 ;;  lights          1    7[BANK0 ] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8105 ;;      Params:         0       0       0       0
  8106 ;;      Locals:         0       6       0       0
  8107 ;;      Temps:          0       1       0       0
  8108 ;;      Totals:         0       7       0       0
  8109 ;;Total ram usage:        7 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    4
  8112 ;; This function calls:
  8113 ;;		_getAll_Lights_Line
  8114 ;;		_getLights_Status
  8115 ;;		_getMain_All_Error_Status
  8116 ;;		_setLED
  8117 ;;		_setLights_Trigger
  8118 ;; This function is called by:
  8119 ;;		_main
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _Exception_Main
  8125  064A                     _Exception_Main:	
  8126                           
  8127                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8131  064A  3000               	movlw	0
  8132  064B  158A  2625  118A   	fcall	_getMain_All_Error_Status
  8133  064E  1283               	bcf	3,5	;RP0=0, select bank0
  8134  064F  1303               	bcf	3,6	;RP1=0, select bank0
  8135  0650  00DC               	movwf	??_Exception_Main
  8136  0651  085C               	movf	??_Exception_Main,w
  8137  0652  00E2               	movwf	Exception_Main@error
  8138                           
  8139                           ;Main_B1.c: 508: char lights = 0, count = 1;
  8140  0653  01DD               	clrf	Exception_Main@lights
  8141  0654  01DE               	clrf	Exception_Main@count
  8142  0655  0ADE               	incf	Exception_Main@count,f
  8143                           
  8144                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
  8145  0656  1DA3               	btfss	_myMain+3,3
  8146  0657  2E64               	goto	l5216
  8147                           
  8148                           ;Main_B1.c: 510: if (error == 0) {
  8149  0658  08E2               	movf	Exception_Main@error,f
  8150  0659  1D03               	skipz
  8151  065A  0008               	return
  8152                           
  8153                           ;Main_B1.c: 511: myMain.Error_Run = 0;
  8154  065B  11A3               	bcf	_myMain+3,3
  8155                           
  8156                           ;Main_B1.c: 513: setLED(error, 110);
  8157  065C  306E               	movlw	110
  8158  065D  00DC               	movwf	??_Exception_Main
  8159  065E  085C               	movf	??_Exception_Main,w
  8160  065F  00D6               	movwf	setLED@command
  8161  0660  0862               	movf	Exception_Main@error,w
  8162  0661  158A  2735         	fcall	_setLED
  8163                           
  8164                           ;Main_B1.c: 518: }
  8165                           ;Main_B1.c: 519: } else {
  8166  0663  0008               	return
  8167  0664                     l5216:	
  8168                           
  8169                           ;Main_B1.c: 520: if (error != 0) {
  8170  0664  1283               	bcf	3,5	;RP0=0, select bank0
  8171  0665  1303               	bcf	3,6	;RP1=0, select bank0
  8172  0666  0862               	movf	Exception_Main@error,w
  8173  0667  1903               	btfsc	3,2
  8174  0668  0008               	return
  8175                           
  8176                           ;Main_B1.c: 521: myMain.Error_Run = 1;
  8177  0669  15A3               	bsf	_myMain+3,3
  8178                           
  8179                           ;Main_B1.c: 569: setLED(error, 111);
  8180  066A  306F               	movlw	111
  8181  066B  00DC               	movwf	??_Exception_Main
  8182  066C  085C               	movf	??_Exception_Main,w
  8183  066D  00D6               	movwf	setLED@command
  8184  066E  0862               	movf	Exception_Main@error,w
  8185  066F  158A  2735  118A   	fcall	_setLED
  8186                           
  8187                           ;Main_B1.c: 570: if (error == 3) {
  8188  0672  1283               	bcf	3,5	;RP0=0, select bank0
  8189  0673  1303               	bcf	3,6	;RP1=0, select bank0
  8190  0674  0862               	movf	Exception_Main@error,w
  8191  0675  3A03               	xorlw	3
  8192  0676  1D03               	skipz
  8193  0677  2E93               	goto	l5228
  8194                           
  8195                           ;Main_B1.c: 571: char status = getAll_Lights_Line();
  8196  0678  158A  23FC  118A   	fcall	_getAll_Lights_Line
  8197  067B  1283               	bcf	3,5	;RP0=0, select bank0
  8198  067C  1303               	bcf	3,6	;RP1=0, select bank0
  8199  067D  00DC               	movwf	??_Exception_Main
  8200  067E  085C               	movf	??_Exception_Main,w
  8201  067F  00DF               	movwf	Exception_Main@status
  8202                           
  8203                           ;Main_B1.c: 572: if (getLights_Status(status) == 1) {
  8204  0680  085F               	movf	Exception_Main@status,w
  8205  0681  158A  240D  118A   	fcall	_getLights_Status
  8206  0684  3A01               	xorlw	1
  8207  0685  1903               	btfsc	3,2
  8208  0686  2E8A               	goto	l5226
  8209  0687  1283               	bcf	3,5	;RP0=0, select bank0
  8210  0688  1303               	bcf	3,6	;RP1=0, select bank0
  8211  0689  0008               	return
  8212  068A                     l5226:	
  8213                           
  8214                           ;Main_B1.c: 573: setLights_Trigger(status, 0);
  8215  068A  1283               	bcf	3,5	;RP0=0, select bank0
  8216  068B  1303               	bcf	3,6	;RP1=0, select bank0
  8217  068C  01D6               	clrf	setLights_Trigger@command
  8218  068D  085F               	movf	Exception_Main@status,w
  8219  068E  158A  24F6         	fcall	_setLights_Trigger
  8220  0690  1283               	bcf	3,5	;RP0=0, select bank0
  8221  0691  1303               	bcf	3,6	;RP1=0, select bank0
  8222  0692  0008               	return
  8223  0693                     l5228:	
  8224                           ;Main_B1.c: 574: }
  8225                           ;Main_B1.c: 575: } else {
  8226                           
  8227                           
  8228                           ;Main_B1.c: 577: for (int i = 0; i < count; i++) {
  8229  0693  1283               	bcf	3,5	;RP0=0, select bank0
  8230  0694  1303               	bcf	3,6	;RP1=0, select bank0
  8231  0695  01E0               	clrf	Exception_Main@i
  8232  0696  01E1               	clrf	Exception_Main@i+1
  8233  0697                     l5236:	
  8234  0697  0861               	movf	Exception_Main@i+1,w
  8235  0698  3A80               	xorlw	128
  8236  0699  00DC               	movwf	??_Exception_Main
  8237  069A  3080               	movlw	128
  8238  069B  025C               	subwf	??_Exception_Main,w
  8239  069C  1D03               	skipz
  8240  069D  2EA0               	goto	u6885
  8241  069E  085E               	movf	Exception_Main@count,w
  8242  069F  0260               	subwf	Exception_Main@i,w
  8243  06A0                     u6885:	
  8244  06A0  1803               	btfsc	3,0
  8245  06A1  2EBD               	goto	u6880
  8246                           
  8247                           ;Main_B1.c: 578: if (getLights_Status(i + 1) == 1) {
  8248  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  8249  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  8250  06A4  0860               	movf	Exception_Main@i,w
  8251  06A5  3E01               	addlw	1
  8252  06A6  158A  240D  118A   	fcall	_getLights_Status
  8253  06A9  3A01               	xorlw	1
  8254  06AA  1D03               	skipz
  8255  06AB  2EB4               	goto	l5234
  8256                           
  8257                           ;Main_B1.c: 579: setLights_Trigger(i + 1, 0);
  8258  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8259  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8260  06AE  01D6               	clrf	setLights_Trigger@command
  8261  06AF  0860               	movf	Exception_Main@i,w
  8262  06B0  3E01               	addlw	1
  8263  06B1  158A  24F6  118A   	fcall	_setLights_Trigger
  8264  06B4                     l5234:	
  8265  06B4  3001               	movlw	1
  8266  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  8267  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  8268  06B7  07E0               	addwf	Exception_Main@i,f
  8269  06B8  1803               	skipnc
  8270  06B9  0AE1               	incf	Exception_Main@i+1,f
  8271  06BA  3000               	movlw	0
  8272  06BB  07E1               	addwf	Exception_Main@i+1,f
  8273  06BC  2E97               	goto	l5236
  8274  06BD                     u6880:	
  8275  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  8276  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  8277  06BF  0008               	return
  8278  06C0                     __end_of_Exception_Main:	
  8279                           
  8280                           	psect	text53
  8281  0CF6                     __ptext53:	
  8282 ;; *************** function _setLights_Trigger *****************
  8283 ;; Defined at:
  8284 ;;		line 219 in file "../src/TriacRelay_B1.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;  lights          1    wreg     unsigned char 
  8287 ;;  command         1    0[BANK0 ] unsigned char 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  lights          1    2[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;		None               void
  8292 ;; Registers used:
  8293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8299 ;;      Params:         0       1       0       0
  8300 ;;      Locals:         0       1       0       0
  8301 ;;      Temps:          0       1       0       0
  8302 ;;      Totals:         0       3       0       0
  8303 ;;Total ram usage:        3 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    3
  8306 ;; This function calls:
  8307 ;;		_LightsPointSelect
  8308 ;; This function is called by:
  8309 ;;		_Exception_Main
  8310 ;;		_PIR_Main
  8311 ;;		_setMain_Exception
  8312 ;;		_setLights_ErrorClose
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           
  8317                           ;psect for function _setLights_Trigger
  8318  0CF6                     _setLights_Trigger:	
  8319                           
  8320                           ;incstack = 0
  8321                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8322                           ;setLights_Trigger@lights stored from wreg
  8323  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  8324  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  8325  0CF8  00D8               	movwf	setLights_Trigger@lights
  8326                           
  8327                           ;TriacRelay_B1.c: 220: LightsPointSelect(lights);
  8328  0CF9  0858               	movf	setLights_Trigger@lights,w
  8329  0CFA  158A  2396         	fcall	_LightsPointSelect
  8330                           
  8331                           ;TriacRelay_B1.c: 221: Lights->Trigger = 1;
  8332  0CFC  0878               	movf	_Lights,w
  8333  0CFD  0084               	movwf	4
  8334  0CFE  1383               	bcf	3,7	;select IRP bank0
  8335  0CFF  1580               	bsf	0,3
  8336                           
  8337                           ;TriacRelay_B1.c: 222: Lights->Switch = command == 1 ? 1 : 0;
  8338  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  8339  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  8340  0D02  0856               	movf	setLights_Trigger@command,w
  8341  0D03  3A01               	xorlw	1
  8342  0D04  3000               	movlw	0
  8343  0D05  1903               	skipnz
  8344  0D06  3001               	movlw	1
  8345  0D07  00D7               	movwf	??_setLights_Trigger
  8346  0D08  0878               	movf	_Lights,w
  8347  0D09  0084               	movwf	4
  8348  0D0A  0ED7               	swapf	??_setLights_Trigger,f
  8349  0D0B  0800               	movf	0,w
  8350  0D0C  0657               	xorwf	??_setLights_Trigger,w
  8351  0D0D  39EF               	andlw	-17
  8352  0D0E  0657               	xorwf	??_setLights_Trigger,w
  8353  0D0F  0080               	movwf	0
  8354  0D10  0008               	return
  8355  0D11                     __end_of_setLights_Trigger:	
  8356                           
  8357                           	psect	text54
  8358  0F35                     __ptext54:	
  8359 ;; *************** function _setLED *****************
  8360 ;; Defined at:
  8361 ;;		line 76 in file "../src/LED_B1.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;  led             1    wreg     unsigned char 
  8364 ;;  command         1    0[BANK0 ] unsigned char 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  led             1    1[BANK0 ] unsigned char 
  8367 ;; Return value:  Size  Location     Type
  8368 ;;		None               void
  8369 ;; Registers used:
  8370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8376 ;;      Params:         0       1       0       0
  8377 ;;      Locals:         0       1       0       0
  8378 ;;      Temps:          0       0       0       0
  8379 ;;      Totals:         0       2       0       0
  8380 ;;Total ram usage:        2 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    3
  8383 ;; This function calls:
  8384 ;;		_LedPointSelect
  8385 ;; This function is called by:
  8386 ;;		_setLED_Initialization
  8387 ;;		_setPIRLED_Main
  8388 ;;		_Exception_Main
  8389 ;;		_PIR_Main
  8390 ;;		_setMain_Exception
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           
  8395                           ;psect for function _setLED
  8396  0F35                     _setLED:	
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8400                           ;setLED@led stored from wreg
  8401  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8402  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8403  0F37  00D7               	movwf	setLED@led
  8404                           
  8405                           ;LED_B1.c: 77: LedPointSelect(led);
  8406  0F38  0857               	movf	setLED@led,w
  8407  0F39  158A  242F  158A   	fcall	_LedPointSelect
  8408                           
  8409                           ;LED_B1.c: 78: if (command == 0) {
  8410  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  8411  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  8412  0F3E  08D6               	movf	setLED@command,f
  8413  0F3F  1D03               	skipz
  8414  0F40  2F4A               	goto	l4330
  8415                           
  8416                           ;LED_B1.c: 80: if (led == 1) {
  8417  0F41  0857               	movf	setLED@led,w
  8418  0F42  3A01               	xorlw	1
  8419  0F43  1D03               	skipz
  8420  0F44  2F46               	goto	l4326
  8421                           
  8422                           ;LED_B1.c: 84: RA6 = 1;
  8423  0F45  1705               	bsf	5,6	;volatile
  8424  0F46                     l4326:	
  8425                           
  8426                           ;LED_B1.c: 86: }
  8427                           ;LED_B1.c: 89: if (led == 2) {
  8428  0F46  0857               	movf	setLED@led,w
  8429  0F47  3A02               	xorlw	2
  8430  0F48  1903               	btfsc	3,2
  8431                           
  8432                           ;LED_B1.c: 93: RA7 = 1;
  8433  0F49  1785               	bsf	5,7	;volatile
  8434  0F4A                     l4330:	
  8435                           
  8436                           ;LED_B1.c: 95: }
  8437                           ;LED_B1.c: 115: }
  8438                           ;LED_B1.c: 116: if (command == 1) {
  8439  0F4A  0856               	movf	setLED@command,w
  8440  0F4B  3A01               	xorlw	1
  8441  0F4C  1D03               	skipz
  8442  0F4D  2F57               	goto	l4340
  8443                           
  8444                           ;LED_B1.c: 118: if (led == 1) {
  8445  0F4E  0857               	movf	setLED@led,w
  8446  0F4F  3A01               	xorlw	1
  8447  0F50  1D03               	skipz
  8448  0F51  2F53               	goto	l4336
  8449                           
  8450                           ;LED_B1.c: 122: RA6 = 0;
  8451  0F52  1305               	bcf	5,6	;volatile
  8452  0F53                     l4336:	
  8453                           
  8454                           ;LED_B1.c: 124: }
  8455                           ;LED_B1.c: 127: if (led == 2) {
  8456  0F53  0857               	movf	setLED@led,w
  8457  0F54  3A02               	xorlw	2
  8458  0F55  1903               	btfsc	3,2
  8459                           
  8460                           ;LED_B1.c: 131: RA7 = 0;
  8461  0F56  1385               	bcf	5,7	;volatile
  8462  0F57                     l4340:	
  8463                           
  8464                           ;LED_B1.c: 133: }
  8465                           ;LED_B1.c: 153: }
  8466                           ;LED_B1.c: 154: if (command == 10) {
  8467  0F57  0856               	movf	setLED@command,w
  8468  0F58  3A0A               	xorlw	10
  8469  0F59  1D03               	skipz
  8470  0F5A  2F6E               	goto	l4354
  8471                           
  8472                           ;LED_B1.c: 155: LED->GO = 0;
  8473  0F5B  0876               	movf	_LED,w
  8474  0F5C  0084               	movwf	4
  8475  0F5D  1383               	bcf	3,7	;select IRP bank0
  8476  0F5E  1080               	bcf	0,1
  8477                           
  8478                           ;LED_B1.c: 156: LED->Time = 0;
  8479  0F5F  0A76               	incf	_LED,w
  8480  0F60  0084               	movwf	4
  8481  0F61  0180               	clrf	0
  8482  0F62  0A84               	incf	4,f
  8483  0F63  0180               	clrf	0
  8484                           
  8485                           ;LED_B1.c: 158: if (led == 1) {
  8486  0F64  0857               	movf	setLED@led,w
  8487  0F65  3A01               	xorlw	1
  8488  0F66  1D03               	skipz
  8489  0F67  2F6A               	goto	l4350
  8490                           
  8491                           ;LED_B1.c: 162: RA6 = 1;
  8492  0F68  1705               	bsf	5,6	;volatile
  8493                           
  8494                           ;LED_B1.c: 164: }
  8495  0F69  2F6E               	goto	l4354
  8496  0F6A                     l4350:	
  8497                           
  8498                           ;LED_B1.c: 167: else if (led == 2) {
  8499  0F6A  0857               	movf	setLED@led,w
  8500  0F6B  3A02               	xorlw	2
  8501  0F6C  1903               	btfsc	3,2
  8502                           
  8503                           ;LED_B1.c: 171: RA7 = 1;
  8504  0F6D  1785               	bsf	5,7	;volatile
  8505  0F6E                     l4354:	
  8506                           
  8507                           ;LED_B1.c: 173: }
  8508                           ;LED_B1.c: 193: }
  8509                           ;LED_B1.c: 194: if (command == 11) {
  8510  0F6E  0856               	movf	setLED@command,w
  8511  0F6F  3A0B               	xorlw	11
  8512  0F70  1D03               	skipz
  8513  0F71  2F76               	goto	l4358
  8514                           
  8515                           ;LED_B1.c: 195: LED->GO = 1;
  8516  0F72  0876               	movf	_LED,w
  8517  0F73  0084               	movwf	4
  8518  0F74  1383               	bcf	3,7	;select IRP bank0
  8519  0F75  1480               	bsf	0,1
  8520  0F76                     l4358:	
  8521                           
  8522                           ;LED_B1.c: 196: }
  8523                           ;LED_B1.c: 198: if (command == 111) {
  8524  0F76  0856               	movf	setLED@command,w
  8525  0F77  3A6F               	xorlw	111
  8526  0F78  1D03               	skipz
  8527  0F79  2F94               	goto	l4384
  8528                           
  8529                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8530  0F7A  01B1               	clrf	_PIRLED+1
  8531                           
  8532                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8533  0F7B  01B2               	clrf	_PIRLED+2
  8534  0F7C  01B3               	clrf	_PIRLED+3
  8535                           
  8536                           ;LED_B1.c: 201: PIRLED.status = 0;
  8537  0F7D  1230               	bcf	_PIRLED,4
  8538                           
  8539                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8540  0F7E  1430               	bsf	_PIRLED,0
  8541                           
  8542                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8543  0F7F  10B0               	bcf	_PIRLED,1
  8544                           
  8545                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8546  0F80  1130               	bcf	_PIRLED,2
  8547                           
  8548                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8549  0F81  11B0               	bcf	_PIRLED,3
  8550                           
  8551                           ;LED_B1.c: 206: if (led == 1) {
  8552  0F82  0857               	movf	setLED@led,w
  8553  0F83  3A01               	xorlw	1
  8554  0F84  1D03               	skipz
  8555  0F85  2F88               	goto	l4376
  8556                           
  8557                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8558  0F86  14B0               	bsf	_PIRLED,1
  8559                           
  8560                           ;LED_B1.c: 208: } else if (led == 2) {
  8561  0F87  0008               	return
  8562  0F88                     l4376:	
  8563  0F88  0857               	movf	setLED@led,w
  8564  0F89  3A02               	xorlw	2
  8565  0F8A  1D03               	skipz
  8566  0F8B  2F8E               	goto	l4380
  8567                           
  8568                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8569  0F8C  1530               	bsf	_PIRLED,2
  8570                           
  8571                           ;LED_B1.c: 210: } else if (led == 3) {
  8572  0F8D  0008               	return
  8573  0F8E                     l4380:	
  8574  0F8E  0857               	movf	setLED@led,w
  8575  0F8F  3A03               	xorlw	3
  8576  0F90  1D03               	skipz
  8577  0F91  0008               	return
  8578                           
  8579                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8580  0F92  15B0               	bsf	_PIRLED,3
  8581                           
  8582                           ;LED_B1.c: 212: }
  8583                           ;LED_B1.c: 213: } else if (command == 110) {
  8584  0F93  0008               	return
  8585  0F94                     l4384:	
  8586  0F94  0856               	movf	setLED@command,w
  8587  0F95  3A6E               	xorlw	110
  8588  0F96  1D03               	skipz
  8589  0F97  0008               	return
  8590                           
  8591                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8592  0F98  1030               	bcf	_PIRLED,0
  8593  0F99  0008               	return
  8594  0F9A                     __end_of_setLED:	
  8595                           
  8596                           	psect	text55
  8597  0C2F                     __ptext55:	
  8598 ;; *************** function _LedPointSelect *****************
  8599 ;; Defined at:
  8600 ;;		line 7 in file "../src/LED_B1.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  led             1    wreg     unsigned char 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  led             1    5[COMMON] unsigned char 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;		None               void
  8607 ;; Registers used:
  8608 ;;		wreg
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8614 ;;      Params:         0       0       0       0
  8615 ;;      Locals:         1       0       0       0
  8616 ;;      Temps:          1       0       0       0
  8617 ;;      Totals:         2       0       0       0
  8618 ;;Total ram usage:        2 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    2
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_setLED_Initialization
  8625 ;;		_setLED
  8626 ;;		_setLED_Main
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _LedPointSelect
  8632  0C2F                     _LedPointSelect:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _LedPointSelect: [wreg]
  8636                           ;LedPointSelect@led stored from wreg
  8637  0C2F  00F5               	movwf	LedPointSelect@led
  8638                           
  8639                           ;LED_B1.c: 9: if (led == 1) {
  8640  0C30  0875               	movf	LedPointSelect@led,w
  8641  0C31  3A01               	xorlw	1
  8642  0C32  1D03               	skipz
  8643  0C33  2C38               	goto	l254
  8644                           
  8645                           ;LED_B1.c: 10: LED = &VarLED1;
  8646  0C34  304E               	movlw	_VarLED1& (0+255)
  8647  0C35  00F4               	movwf	??_LedPointSelect
  8648  0C36  0874               	movf	??_LedPointSelect,w
  8649  0C37  00F6               	movwf	_LED
  8650  0C38                     l254:	
  8651                           
  8652                           ;LED_B1.c: 11: }
  8653                           ;LED_B1.c: 14: if (led == 2) {
  8654  0C38  0875               	movf	LedPointSelect@led,w
  8655  0C39  3A02               	xorlw	2
  8656  0C3A  1D03               	skipz
  8657  0C3B  0008               	return
  8658                           
  8659                           ;LED_B1.c: 15: LED = &VarLED2;
  8660  0C3C  3052               	movlw	_VarLED2& (0+255)
  8661  0C3D  00F4               	movwf	??_LedPointSelect
  8662  0C3E  0874               	movf	??_LedPointSelect,w
  8663  0C3F  00F6               	movwf	_LED
  8664  0C40  0008               	return
  8665  0C41                     __end_of_LedPointSelect:	
  8666                           
  8667                           	psect	text56
  8668  0E25                     __ptext56:	
  8669 ;; *************** function _getMain_All_Error_Status *****************
  8670 ;; Defined at:
  8671 ;;		line 425 in file "../src/Main_B1.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  command         1    wreg     unsigned char 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  command         1    4[BANK0 ] unsigned char 
  8676 ;;  status          1    5[BANK0 ] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      unsigned char 
  8679 ;; Registers used:
  8680 ;;		wreg, status,2, status,0
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8686 ;;      Params:         0       0       0       0
  8687 ;;      Locals:         0       6       0       0
  8688 ;;      Temps:          1       0       0       0
  8689 ;;      Totals:         1       6       0       0
  8690 ;;Total ram usage:        7 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    2
  8693 ;; This function calls:
  8694 ;;		Nothing
  8695 ;; This function is called by:
  8696 ;;		_Exception_Main
  8697 ;;		_Load_Main
  8698 ;;		_setTemp_Main
  8699 ;;		_PIR_Main
  8700 ;;		_setSYSC_Main
  8701 ;;		_Lights_Main
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           
  8706                           ;psect for function _getMain_All_Error_Status
  8707  0E25                     _getMain_All_Error_Status:	
  8708                           
  8709                           ;incstack = 0
  8710                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8711                           ;getMain_All_Error_Status@command stored from wreg
  8712  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  8713  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  8714  0E27  00DA               	movwf	getMain_All_Error_Status@command
  8715                           
  8716                           ;Main_B1.c: 426: char status = 0;
  8717  0E28  01DB               	clrf	getMain_All_Error_Status@status
  8718                           
  8719                           ;Main_B1.c: 429: if (status == 0 && command != 1) {
  8720  0E29  08DB               	movf	getMain_All_Error_Status@status,f
  8721  0E2A  1D03               	skipz
  8722  0E2B  2E34               	goto	l3140
  8723  0E2C  085A               	movf	getMain_All_Error_Status@command,w
  8724  0E2D  3A01               	xorlw	1
  8725  0E2E  1903               	skipnz
  8726  0E2F  2E34               	goto	l3140
  8727                           
  8728                           ;Main_B1.c: 430: status = SYSC.ERROR == 1 ? 1 : 0;
  8729  0E30  3000               	movlw	0
  8730  0E31  18A6               	btfsc	_SYSC,1
  8731  0E32  3001               	movlw	1
  8732  0E33  00DB               	movwf	getMain_All_Error_Status@status
  8733  0E34                     l3140:	
  8734                           
  8735                           ;Main_B1.c: 431: }
  8736                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
  8737  0E34  08DB               	movf	getMain_All_Error_Status@status,f
  8738  0E35  1D03               	skipz
  8739  0E36  2E48               	goto	l3150
  8740  0E37  085A               	movf	getMain_All_Error_Status@command,w
  8741  0E38  3A02               	xorlw	2
  8742  0E39  1903               	skipnz
  8743  0E3A  2E48               	goto	l3150
  8744                           
  8745                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
  8746  0E3B  18BB               	btfsc	_Temp,1
  8747  0E3C  2E40               	goto	l3148
  8748  0E3D  01D6               	clrf	_getMain_All_Error_Status$2327
  8749  0E3E  01D7               	clrf	_getMain_All_Error_Status$2327+1
  8750  0E3F  2E44               	goto	l604
  8751  0E40                     l3148:	
  8752  0E40  3002               	movlw	2
  8753  0E41  00D6               	movwf	_getMain_All_Error_Status$2327
  8754  0E42  3000               	movlw	0
  8755  0E43  00D7               	movwf	_getMain_All_Error_Status$2327+1
  8756  0E44                     l604:	
  8757  0E44  0856               	movf	_getMain_All_Error_Status$2327,w
  8758  0E45  00F4               	movwf	??_getMain_All_Error_Status
  8759  0E46  0874               	movf	??_getMain_All_Error_Status,w
  8760  0E47  00DB               	movwf	getMain_All_Error_Status@status
  8761  0E48                     l3150:	
  8762                           
  8763                           ;Main_B1.c: 439: }
  8764                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
  8765  0E48  08DB               	movf	getMain_All_Error_Status@status,f
  8766  0E49  1D03               	skipz
  8767  0E4A  2E61               	goto	l605
  8768  0E4B  085A               	movf	getMain_All_Error_Status@command,w
  8769  0E4C  3A03               	xorlw	3
  8770  0E4D  1903               	skipnz
  8771  0E4E  2E61               	goto	l605
  8772                           
  8773                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
  8774  0E4F  1683               	bsf	3,5	;RP0=1, select bank1
  8775  0E50  1303               	bcf	3,6	;RP1=0, select bank1
  8776  0E51  1ACE               	btfsc	_Load^(0+128),5
  8777  0E52  2E58               	goto	l3158
  8778  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  8779  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  8780  0E55  01D8               	clrf	_getMain_All_Error_Status$2328
  8781  0E56  01D9               	clrf	_getMain_All_Error_Status$2328+1
  8782  0E57  2E5D               	goto	l609
  8783  0E58                     l3158:	
  8784  0E58  3003               	movlw	3
  8785  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  8786  0E5A  00D8               	movwf	_getMain_All_Error_Status$2328
  8787  0E5B  3000               	movlw	0
  8788  0E5C  00D9               	movwf	_getMain_All_Error_Status$2328+1
  8789  0E5D                     l609:	
  8790  0E5D  0858               	movf	_getMain_All_Error_Status$2328,w
  8791  0E5E  00F4               	movwf	??_getMain_All_Error_Status
  8792  0E5F  0874               	movf	??_getMain_All_Error_Status,w
  8793  0E60  00DB               	movwf	getMain_All_Error_Status@status
  8794  0E61                     l605:	
  8795                           
  8796                           ;Main_B1.c: 446: }
  8797                           ;Main_B1.c: 462: return status;
  8798  0E61  085B               	movf	getMain_All_Error_Status@status,w
  8799  0E62  0008               	return
  8800  0E63                     __end_of_getMain_All_Error_Status:	
  8801                           
  8802                           	psect	text57
  8803  0C0D                     __ptext57:	
  8804 ;; *************** function _getLights_Status *****************
  8805 ;; Defined at:
  8806 ;;		line 212 in file "../src/TriacRelay_B1.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  lights          1    wreg     unsigned char 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  lights          1    0[BANK0 ] unsigned char 
  8811 ;;  status          1    1[BANK0 ] unsigned char 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      unsigned char 
  8814 ;; Registers used:
  8815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8821 ;;      Params:         0       0       0       0
  8822 ;;      Locals:         0       2       0       0
  8823 ;;      Temps:          0       0       0       0
  8824 ;;      Totals:         0       2       0       0
  8825 ;;Total ram usage:        2 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    3
  8828 ;; This function calls:
  8829 ;;		_LightsPointSelect
  8830 ;; This function is called by:
  8831 ;;		_Exception_Main
  8832 ;;		_PIR_Main
  8833 ;;		_setMain_Exception
  8834 ;;		_setLights_ErrorClose
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _getLights_Status
  8840  0C0D                     _getLights_Status:	
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8844                           ;getLights_Status@lights stored from wreg
  8845  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  8846  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  8847  0C0F  00D6               	movwf	getLights_Status@lights
  8848                           
  8849                           ;TriacRelay_B1.c: 213: LightsPointSelect(lights);
  8850  0C10  0856               	movf	getLights_Status@lights,w
  8851  0C11  158A  2396         	fcall	_LightsPointSelect
  8852                           
  8853                           ;TriacRelay_B1.c: 214: char status = Lights->Status == 1 ? 1 : 0;
  8854  0C13  0878               	movf	_Lights,w
  8855  0C14  0084               	movwf	4
  8856  0C15  3000               	movlw	0
  8857  0C16  1383               	bcf	3,7	;select IRP bank0
  8858  0C17  1900               	btfsc	0,2
  8859  0C18  3001               	movlw	1
  8860  0C19  1283               	bcf	3,5	;RP0=0, select bank0
  8861  0C1A  1303               	bcf	3,6	;RP1=0, select bank0
  8862  0C1B  00D7               	movwf	getLights_Status@status
  8863                           
  8864                           ;TriacRelay_B1.c: 215: return status;
  8865  0C1C  0857               	movf	getLights_Status@status,w
  8866  0C1D  0008               	return
  8867  0C1E                     __end_of_getLights_Status:	
  8868                           
  8869                           	psect	text58
  8870  0BFC                     __ptext58:	
  8871 ;; *************** function _getAll_Lights_Line *****************
  8872 ;; Defined at:
  8873 ;;		line 251 in file "../src/TriacRelay_B1.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  line            1    0[BANK0 ] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      unsigned char 
  8880 ;; Registers used:
  8881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8887 ;;      Params:         0       0       0       0
  8888 ;;      Locals:         0       1       0       0
  8889 ;;      Temps:          0       0       0       0
  8890 ;;      Totals:         0       1       0       0
  8891 ;;Total ram usage:        1 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    3
  8894 ;; This function calls:
  8895 ;;		_LightsPointSelect
  8896 ;; This function is called by:
  8897 ;;		_Exception_Main
  8898 ;;		_setMain_Exception
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           
  8903                           ;psect for function _getAll_Lights_Line
  8904  0BFC                     _getAll_Lights_Line:	
  8905                           
  8906                           ;TriacRelay_B1.c: 252: char line = 0;
  8907                           
  8908                           ;incstack = 0
  8909                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8910  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  8911  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  8912  0BFE  01D6               	clrf	getAll_Lights_Line@line
  8913                           
  8914                           ;TriacRelay_B1.c: 254: LightsPointSelect(1);
  8915  0BFF  3001               	movlw	1
  8916  0C00  158A  2396         	fcall	_LightsPointSelect
  8917                           
  8918                           ;TriacRelay_B1.c: 255: line = Lights->Line == 1 ? 1 : 0;
  8919  0C02  0A78               	incf	_Lights,w
  8920  0C03  0084               	movwf	4
  8921  0C04  3000               	movlw	0
  8922  0C05  1383               	bcf	3,7	;select IRP bank0
  8923  0C06  1800               	btfsc	0,0
  8924  0C07  3001               	movlw	1
  8925  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  8926  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  8927  0C0A  00D6               	movwf	getAll_Lights_Line@line
  8928                           
  8929                           ;TriacRelay_B1.c: 265: return line;
  8930  0C0B  0856               	movf	getAll_Lights_Line@line,w
  8931  0C0C  0008               	return
  8932  0C0D                     __end_of_getAll_Lights_Line:	
  8933                           
  8934                           	psect	text59
  8935  0B96                     __ptext59:	
  8936 ;; *************** function _LightsPointSelect *****************
  8937 ;; Defined at:
  8938 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  lights          1    wreg     unsigned char 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  lights          1    5[COMMON] unsigned char 
  8943 ;; Return value:  Size  Location     Type
  8944 ;;		None               void
  8945 ;; Registers used:
  8946 ;;		wreg
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8952 ;;      Params:         0       0       0       0
  8953 ;;      Locals:         1       0       0       0
  8954 ;;      Temps:          1       0       0       0
  8955 ;;      Totals:         2       0       0       0
  8956 ;;Total ram usage:        2 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    2
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_setLights_Initialization
  8963 ;;		_setLights_Main
  8964 ;;		_Lights_Control
  8965 ;;		_getLights_Status
  8966 ;;		_setLights_Trigger
  8967 ;;		_getAll_Lights_Line
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _LightsPointSelect
  8973  0B96                     _LightsPointSelect:	
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in _LightsPointSelect: [wreg]
  8977                           ;LightsPointSelect@lights stored from wreg
  8978  0B96  00F5               	movwf	LightsPointSelect@lights
  8979                           
  8980                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8981  0B97  0875               	movf	LightsPointSelect@lights,w
  8982  0B98  3A01               	xorlw	1
  8983  0B99  1D03               	skipz
  8984  0B9A  0008               	return
  8985                           
  8986                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8987  0B9B  3047               	movlw	_Lights1& (0+255)
  8988  0B9C  00F4               	movwf	??_LightsPointSelect
  8989  0B9D  0874               	movf	??_LightsPointSelect,w
  8990  0B9E  00F8               	movwf	_Lights
  8991  0B9F  0008               	return
  8992  0BA0                     __end_of_LightsPointSelect:	
  8993                           
  8994                           	psect	text60
  8995  0BB5                     __ptext60:	
  8996 ;; *************** function _DetectSYSC_Signal *****************
  8997 ;; Defined at:
  8998 ;;		line 50 in file "../src/SYSC_B1.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;		None               void
  9005 ;; Registers used:
  9006 ;;		status,2
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9012 ;;      Params:         0       0       0       0
  9013 ;;      Locals:         0       0       0       0
  9014 ;;      Temps:          0       0       0       0
  9015 ;;      Totals:         0       0       0       0
  9016 ;;Total ram usage:        0 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    2
  9019 ;; This function calls:
  9020 ;;		Nothing
  9021 ;; This function is called by:
  9022 ;;		_main
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _DetectSYSC_Signal
  9028  0BB5                     _DetectSYSC_Signal:	
  9029                           
  9030                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9031                           
  9032                           ;incstack = 0
  9033                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9034  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  9035  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  9036  0BB7  19A6               	btfsc	_SYSC,3
  9037  0BB8  2BBF               	goto	l1108
  9038                           
  9039                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9040  0BB9  1E85               	btfss	5,5	;volatile
  9041  0BBA  0008               	return
  9042                           
  9043                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9044  0BBB  15A6               	bsf	_SYSC,3
  9045                           
  9046                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9047  0BBC  01A7               	clrf	_SYSC+1
  9048  0BBD  01A8               	clrf	_SYSC+2
  9049                           
  9050                           ;SYSC_B1.c: 55: }
  9051                           ;SYSC_B1.c: 56: } else {
  9052  0BBE  0008               	return
  9053  0BBF                     l1108:	
  9054                           
  9055                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9056  0BBF  1A85               	btfsc	5,5	;volatile
  9057  0BC0  0008               	return
  9058                           
  9059                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9060  0BC1  11A6               	bcf	_SYSC,3
  9061  0BC2  0008               	return
  9062  0BC3                     __end_of_DetectSYSC_Signal:	
  9063                           
  9064                           	psect	text61
  9065  0DF1                     __ptext61:	
  9066 ;; *************** function _CDS_Main *****************
  9067 ;; Defined at:
  9068 ;;		line 11 in file "../src/CDS_B1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;		None               void
  9075 ;; Registers used:
  9076 ;;		wreg, status,2, status,0
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9082 ;;      Params:         0       0       0       0
  9083 ;;      Locals:         0       0       0       0
  9084 ;;      Temps:          0       3       0       0
  9085 ;;      Totals:         0       3       0       0
  9086 ;;Total ram usage:        3 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    2
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_main
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _CDS_Main
  9098  0DF1                     _CDS_Main:	
  9099                           
  9100                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9104  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  9105  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  9106  0DF3  1C2B               	btfss	__CDS,0
  9107  0DF4  0008               	return
  9108                           
  9109                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9110  0DF5  18AB               	btfsc	__CDS,1
  9111  0DF6  2E04               	goto	l117
  9112                           
  9113                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9114  0DF7  19AB               	btfsc	__CDS,3
  9115  0DF8  0008               	return
  9116                           
  9117                           ;CDS_B1.c: 16: _CDS.Time++;
  9118  0DF9  3001               	movlw	1
  9119  0DFA  00D6               	movwf	??_CDS_Main
  9120  0DFB  0856               	movf	??_CDS_Main,w
  9121  0DFC  07AC               	addwf	__CDS+1,f
  9122                           
  9123                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9124  0DFD  3005               	movlw	5
  9125  0DFE  022C               	subwf	__CDS+1,w
  9126  0DFF  1C03               	skipc
  9127  0E00  0008               	return
  9128                           
  9129                           ;CDS_B1.c: 18: {
  9130                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9131  0E01  01AC               	clrf	__CDS+1
  9132                           
  9133                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9134  0E02  15AB               	bsf	__CDS,3
  9135                           
  9136                           ;CDS_B1.c: 21: }
  9137                           ;CDS_B1.c: 22: }
  9138                           ;CDS_B1.c: 23: } else {
  9139  0E03  0008               	return
  9140  0E04                     l117:	
  9141                           
  9142                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9143  0E04  1CAB               	btfss	__CDS,1
  9144  0E05  0008               	return
  9145                           
  9146                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9147  0E06  10AB               	bcf	__CDS,1
  9148                           
  9149                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9150  0E07  1A2B               	btfsc	__CDS,4
  9151  0E08  2E0F               	goto	l4736
  9152                           
  9153                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9154  0E09  082D               	movf	__CDS+2,w
  9155  0E0A  022E               	subwf	__CDS+3,w
  9156  0E0B  1C03               	skipc
  9157  0E0C  0008               	return
  9158                           
  9159                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9160  0E0D  162B               	bsf	__CDS,4
  9161                           
  9162                           ;CDS_B1.c: 29: }
  9163                           ;CDS_B1.c: 30: } else {
  9164  0E0E  0008               	return
  9165  0E0F                     l4736:	
  9166                           
  9167                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9168  0E0F  082D               	movf	__CDS+2,w
  9169  0E10  3E9C               	addlw	156
  9170  0E11  00D6               	movwf	??_CDS_Main
  9171  0E12  30FF               	movlw	255
  9172  0E13  1803               	skipnc
  9173  0E14  3000               	movlw	0
  9174  0E15  00D7               	movwf	??_CDS_Main+1
  9175  0E16  0857               	movf	??_CDS_Main+1,w
  9176  0E17  3A80               	xorlw	128
  9177  0E18  00D8               	movwf	??_CDS_Main+2
  9178  0E19  3080               	movlw	128
  9179  0E1A  0258               	subwf	??_CDS_Main+2,w
  9180  0E1B  1D03               	skipz
  9181  0E1C  2E1F               	goto	u5835
  9182  0E1D  082E               	movf	__CDS+3,w
  9183  0E1E  0256               	subwf	??_CDS_Main,w
  9184  0E1F                     u5835:	
  9185  0E1F  1C03               	skipc
  9186  0E20  0008               	return
  9187                           
  9188                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9189  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  9190  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  9191  0E23  122B               	bcf	__CDS,4
  9192  0E24  0008               	return
  9193  0E25                     __end_of_CDS_Main:	
  9194                           
  9195                           	psect	text62
  9196  0B3C                     __ptext62:	
  9197 ;; *************** function _CDS_Initialization *****************
  9198 ;; Defined at:
  9199 ;;		line 7 in file "../src/CDS_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;		None
  9204 ;; Return value:  Size  Location     Type
  9205 ;;		None               void
  9206 ;; Registers used:
  9207 ;;		None
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9213 ;;      Params:         0       0       0       0
  9214 ;;      Locals:         0       0       0       0
  9215 ;;      Temps:          0       0       0       0
  9216 ;;      Totals:         0       0       0       0
  9217 ;;Total ram usage:        0 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    2
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_main
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _CDS_Initialization
  9229  0B3C                     _CDS_Initialization:	
  9230                           
  9231                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _CDS_Initialization: []
  9235  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  9236  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  9237  0B3E  142B               	bsf	__CDS,0
  9238  0B3F  0008               	return
  9239  0B40                     __end_of_CDS_Initialization:	
  9240                           
  9241                           	psect	text63
  9242  0CAA                     __ptext63:	
  9243 ;; *************** function _ISR *****************
  9244 ;; Defined at:
  9245 ;;		line 116 in file "../src/MCU_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0, pclath, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9259 ;;      Params:         0       0       0       0
  9260 ;;      Locals:         0       0       0       0
  9261 ;;      Temps:          4       0       0       0
  9262 ;;      Totals:         4       0       0       0
  9263 ;;Total ram usage:        4 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    1
  9266 ;; This function calls:
  9267 ;;		_TMR1_ISR
  9268 ;; This function is called by:
  9269 ;;		Interrupt level 1
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           
  9274                           ;psect for function _ISR
  9275  0CAA                     _ISR:	
  9276                           
  9277                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9278  0CAA  1683               	bsf	3,5	;RP0=1, select bank1
  9279  0CAB  1303               	bcf	3,6	;RP1=0, select bank1
  9280  0CAC  1C0C               	btfss	12,0	;volatile
  9281  0CAD  2CB5               	goto	i1l426
  9282  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  9283  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  9284  0CB0  1C0C               	btfss	12,0	;volatile
  9285  0CB1  2CB5               	goto	i1l426
  9286                           
  9287                           ;MCU_B1.c: 126: TMR1_ISR();
  9288  0CB2  158A  2467  158A   	fcall	_TMR1_ISR
  9289  0CB5                     i1l426:	
  9290                           ;MCU_B1.c: 127: }
  9291                           ;MCU_B1.c: 148: return;
  9292                           
  9293  0CB5  0873               	movf	??_ISR+3,w
  9294  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  9295  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  9296  0CB8  00FF               	movwf	127
  9297  0CB9  0872               	movf	??_ISR+2,w
  9298  0CBA  008A               	movwf	10
  9299  0CBB  0871               	movf	??_ISR+1,w
  9300  0CBC  0084               	movwf	4
  9301  0CBD  0E70               	swapf	??_ISR^(0+-128),w
  9302  0CBE  0083               	movwf	3
  9303  0CBF  0EFE               	swapf	126,f
  9304  0CC0  0E7E               	swapf	126,w
  9305  0CC1  0009               	retfie
  9306  0CC2                     __end_of_ISR:	
  9307                           
  9308                           	psect	intentry
  9309  0004                     __pintentry:	
  9310                           ;incstack = 0
  9311                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9312                           
  9313  0004                     interrupt_function:	
  9314  007E                     saved_w	set	btemp
  9315  0004  00FE               	movwf	btemp
  9316  0005  0E03               	swapf	3,w
  9317  0006  00F0               	movwf	??_ISR
  9318  0007  0804               	movf	4,w
  9319  0008  00F1               	movwf	??_ISR+1
  9320  0009  080A               	movf	10,w
  9321  000A  00F2               	movwf	??_ISR+2
  9322  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9323  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9324  000D  087F               	movf	btemp+1,w
  9325  000E  00F3               	movwf	??_ISR+3
  9326  000F  158A  2CAA         	ljmp	_ISR
  9327                           
  9328                           	psect	text64
  9329  0C67                     __ptext64:	
  9330 ;; *************** function _TMR1_ISR *****************
  9331 ;; Defined at:
  9332 ;;		line 236 in file "../src/MCU_B1.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;		None               void
  9339 ;; Registers used:
  9340 ;;		wreg, status,2
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9346 ;;      Params:         0       0       0       0
  9347 ;;      Locals:         0       0       0       0
  9348 ;;      Temps:          0       0       0       0
  9349 ;;      Totals:         0       0       0       0
  9350 ;;Total ram usage:        0 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_ISR
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _TMR1_ISR
  9361  0C67                     _TMR1_ISR:	
  9362                           
  9363                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
  9364                           
  9365                           ;incstack = 0
  9366                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9367  0C67  30FA               	movlw	250
  9368  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  9369  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  9370  0C6A  008F               	movwf	15	;volatile
  9371                           
  9372                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
  9373  0C6B  3038               	movlw	56
  9374  0C6C  008E               	movwf	14	;volatile
  9375                           
  9376                           ;MCU_B1.c: 240: TMR1IF = 0;
  9377  0C6D  100C               	bcf	12,0	;volatile
  9378                           
  9379                           ;MCU_B1.c: 259: Timer1.Count++;
  9380  0C6E  3001               	movlw	1
  9381  0C6F  07B5               	addwf	_Timer1+1,f
  9382  0C70  1803               	skipnc
  9383  0C71  0AB6               	incf	_Timer1+2,f
  9384  0C72  3000               	movlw	0
  9385  0C73  07B6               	addwf	_Timer1+2,f
  9386                           
  9387                           ;MCU_B1.c: 260: if (Timer1.Count == (int)(20*10)) {
  9388  0C74  30C8               	movlw	200
  9389  0C75  0635               	xorwf	_Timer1+1,w
  9390  0C76  0436               	iorwf	_Timer1+2,w
  9391  0C77  1D03               	skipz
  9392  0C78  0008               	return
  9393                           
  9394                           ;MCU_B1.c: 261: Timer1.Count = 0;
  9395  0C79  01B5               	clrf	_Timer1+1
  9396  0C7A  01B6               	clrf	_Timer1+2
  9397                           
  9398                           ;MCU_B1.c: 262: Timer1.Timeout = 1;
  9399  0C7B  1434               	bsf	_Timer1,0
  9400  0C7C  0008               	return
  9401  0C7D                     __end_of_TMR1_ISR:	
  9402  007E                     btemp	set	126	;btemp
  9403  007E                     wtemp	set	126
  9404  007E                     wtemp0	set	126
  9405  0080                     wtemp1	set	128
  9406  0082                     wtemp2	set	130
  9407  0084                     wtemp3	set	132
  9408  0086                     wtemp4	set	134
  9409  0088                     wtemp5	set	136
  9410  007F                     wtemp6	set	127
  9411  007E                     ttemp	set	126
  9412  007E                     ttemp0	set	126
  9413  0081                     ttemp1	set	129
  9414  0084                     ttemp2	set	132
  9415  0087                     ttemp3	set	135
  9416  007F                     ttemp4	set	127
  9417  007E                     ltemp	set	126
  9418  007E                     ltemp0	set	126
  9419  0082                     ltemp1	set	130
  9420  0086                     ltemp2	set	134
  9421  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     20      74
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_getLights_Allow_Condition
    _setLights_Main->_setLights
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22001
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     555
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2785
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     923
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1294
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1294
                                              5 COMMON     1     1      0
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3499
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1770
                                              7 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    2021
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     572
                                              2 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     309
                                              5 COMMON     1     0      1
                                              0 BANK0      2     2      0
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1185
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2138
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2138
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2222
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2222
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3767
                                              6 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2098
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A3       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4A       5       92.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A3      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Jan 09 11:56:16 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 005B                                  fsr 0004  
               ___wmul@multiplicand 0058                                 l117 0E04  
                               l254 0C38                                 l604 0E44  
                               l605 0E61                                 l710 024F  
                               l609 0E5D                                 l722 038E  
                               l706 0401                                 l716 03DA  
                               l708 0259                                 l717 03D8  
                               l709 0255                                 l901 005B  
                               l904 007F                                 l824 05C3  
                               l906 0092                                 l829 05C0  
                               l896 0204                                 l897 0079  
                               l898 0048                                 _GIE 005F  
                               _RB2 0032                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RA6 002E                                 _RA7 002F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0CAA  
                               _PSA 040B                                 _WDT 0037  
                               _Cmd 0039              getAll_Lights_Line@line 0056  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0B6D           __end_of_LightsPointSelect 0BA0  
                  _getLights_Status 0C0D             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 0061  
                              l1108 0BBF                                l1258 0D42  
                              l3140 0E34                                l1365 0D57  
                              l3150 0E48                                l3148 0E40  
                              l3158 0E58                                l5120 00CC  
                              l4330 0F4A                                l5034 03EE  
                              l4340 0F57                                l4412 0CA2  
                              l5052 0D43                                l5124 00D8  
                              l5108 00B5                                l4500 0D27  
                              l4350 0F6A                                l4326 0F46  
                              l5126 00D9                                l5070 0069  
                              l4336 0F53                                l5216 0664  
                              l4432 0F0C                                l5144 012D  
                              l5136 0119                                l5160 01A5  
                              l4354 0F6E                                l5234 06B4  
                              l5226 068A                                l4530 075E  
                              l4442 0F2D                                l5154 0164  
                              l3474 0ED3                                l4380 0F8E  
                              l5236 0697                                l5228 0693  
                              l4540 0770                                l4460 07B9  
                              l4700 0E6D                                l3468 0EBA  
                              l4620 05B0                                l4604 0595  
                              l4358 0F76                                l4542 077C  
                              l4534 0764                                l4526 0758  
                              l4470 07C1                                l4454 07AE  
                              l4702 0E7B                                l5158 0196  
                              l4630 05BF                                l5270 0FB5  
                              l4376 0F88                                l4384 0F94  
                              l4544 0784                                l4472 07CF  
                              l4712 0E9C                                l5176 01D4  
                              l4546 0792                                l4482 07F0  
                              l5282 0FD8                                l4708 0E91  
                              l4812 0D8E                                l4486 07F8  
                              l4478 07E5                                l4910 0239  
                              l4494 0D1E                                l4736 0E0F  
                              l4648 0DEA                                l4680 0D4D  
                              l4496 0D21                                l4666 0616  
                              l4770 06E2                                l4850 0488  
                              l4842 0478                                l4834 0468  
                              l3794 0CEC                                l4588 055F  
                              l4860 049F                                l4942 027F  
                              l4926 0258                                l4782 0707  
                              l4846 0480                                l4838 0470  
                              l4778 06FE                                l4890 0531  
                              l4882 0505                                l4866 04BB  
                              l4980 035A                                l4948 02BB  
                              l4876 04E9                                l4974 034E  
                              l4798 072B                                l4984 0380  
                              l4896 053F                                l4996 03B2  
             _myMain_Initialization 07FF                        __CFG_WDTE$ON 0000  
                              u3245 0EDF                                u5215 07D0  
                              u5225 07DC                                u5235 07E6  
                              _PEIE 005E                                u5085 0C61  
                              u5350 0779                                u5370 078F  
                              u5610 0612                                u5195 07C4  
                              u6235 027D                                u6245 02B9  
                              u6335 03A3                                u6255 0310  
                              u5705 0E70                                u5635 0635  
                              u5725 0E7C                                u5735 0E88  
                              u5745 0E92                                u5665 0D58  
                              u5835 0E1F                                u5595 05FE  
                              u5675 0D5F                                u6715 0188  
                              u6735 01B5                                u6665 00F7  
                              u6675 010F                                u6695 014B  
                              u6880 06BD                                u6785 01F1  
                              u6885 06A0                                __CDS 002B  
           ?_setSYSC_Initialization 0070                                _WPUB 0095  
                              _SYSC 0026                                __PIR 00A0  
                              _Load 00CE                                _Temp 003B  
                              _main 0F9A                                btemp 007E  
                   __end_of_WDT_Set 0BED                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0E25  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0CF6                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0B2D  
                ?_setLights_Trigger 0056                    ??_setPIRLED_Main 0058  
                             ?_main 0065                     __end_of___awdiv 07FF  
                             _ADRES 001E                     ___awdiv@divisor 0056  
                             _T1CON 0010                     __end_of___lwdiv 0EA3  
                             i1l426 0CB5                     ___awdiv@counter 005A  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0C67                               _Light 0077  
               ??_setLights_Trigger 0057                    __end_of_PIR_Main 0222  
                  __end_of_TMR1_ISR 0C7D                    __end_of_TMR1_Set 0BDF  
                             _getAD 0D11      __end_of_setSYSC_Initialization 0B48  
    getLights_Allow_Condition@allow 0056             __end_of_getLight_LoadGO 0B53  
                  __end_of_WDT_Main 0C2F                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0BAA  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0C53                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0063                   getPIR_AD@channel2 005E  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 005E  
                    _setLights_Main 0DC1                      _setLights_Line 0BC3  
                   __initialization 0013                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0D11                        __end_of_main 1000  
                  __end_of_Fosc_Set 0B4D      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 064A                           ??_ADC_Set 0074  
                            ??_main 0069                 __end_of_Lights_Main 0D4B  
        __size_of_LightsPointSelect 000A            _getMain_All_LightsStatus 0B8D  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 0058                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0E25                              _FVRCON 009D  
            getLights_Status@lights 0056                              _PIRLED 0030  
                            _OSCCON 0090                  __size_of_Load_Main 01E7  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _IO_Set 0CC2              getLights_Status@status 0057  
            __end_of_setLights_Main 0DF1              __end_of_setLights_Line 0BD1  
      __size_of_SYSC_Initialization 0003          __end_of_Mcu_Initialization 0BFC  
                            _Lights 0078                              _Timer1 0034  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 06C0                Load_Main@Load_Status 0060  
              Exception_Main@lights 005D                              ___wmul 0D4B  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 005F                              _setLED 0F35  
                            _myMain 0020                    ___awdiv@quotient 005C  
                __size_of_Temp_Main 0003         __end_of_Load_Initialization 0B30  
   getLights_Allow_Condition@lights 0070                              saved_w 007E  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0B36                      _Lights_Control 05C7  
           __size_of_LedPointSelect 0012                           ?_CDS_Main 0070  
                  ?_getLight_LoadGO 0070         __size_of_PIR_Initialization 000B  
           __end_of__initialization 0023                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                       ?_setSYSC_Main 0070  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 002A                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0C1E                       __end_of_getAD 0D2D  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0B6D  
                __size_of_getPIR_AD 0138                         _Lights_Main 0D2D  
          _setLights_Initialization 0B5F                _getMain_Lights_Count 0BA0  
                         ?_WDT_Main 0070                   __end_of_Load_Main 0409  
        __end_of_set_TimeoutCleared 0B5F                 ?_LED_Initialization 0070  
            __end_of_Lights_Control 064A                             ??_getAD 0075  
               _Temp_Initialization 0B36                          ??_CDS_Main 0056  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Fosc_Set 0070         __size_of_getAll_Lights_Line 0011  
                 __end_of_Temp_Main 0B3C                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0074  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F9A          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                             ?___wmul 0056  
                        ??_PIR_Main 005C                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 0050  
                        _getLoad_AD 06C0                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0B75  
                           ?_setLED 0056             setLights_Trigger@lights 0058  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0B66  
                        _getTemp_AD 0D70                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0DC1                             _WDT_Set 0BDF  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0541  
           ??_setLoad_AH_AL_Restore 0074      _getLights_Allow_Condition$4604 0057  
                   __size_of_IO_Set 001A                          getCDS_AD@i 0059  
                        getCDS_AD@j 005A                             _Lights1 0047  
                           _VarLED1 004E                             _VarLED2 0052  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 07A2                     __size_of___wmul 0025  
                           ___lwdiv 0E63          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 0064                     __size_of_setLED 0065  
                           __ptext0 0000                             __ptext1 0CDC  
                           __ptext2 07FF                             __ptext3 0D70  
                           __ptext4 0409                             __ptext5 06C0  
                           __ptext6 0D97                             __ptext7 0D11  
                           __ptext8 0B59                             __ptext9 0C53  
                        getPIR_AD@i 0064                          getPIR_AD@j 0062  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0B30             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C2F  
                           clrloop0 0B86                   __end_of_setLights 0F35  
              end_of_initialization 0023                       _getCDS_Status 0B7D  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0C41  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0B44                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0058                  _Mcu_Initialization 0BED  
              __end_of_my_MainTimer 0CF6                __end_of_setSYSC_Main 0EE5  
            __end_of_LedPointSelect 0C41                 setPIRLED_Main@count 0059  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 0058                           _SYSC_Main 0B33  
   getMain_All_Error_Status@command 005A                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 005C                      __end_of_IO_Set 0CDC  
        __end_of_CDS_Initialization 0B40          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0D70  
                 __size_of_PIR_Main 01FC                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 0F9A            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 0222                         __end_of_ISR 0CC2  
        __end_of_PIR_Initialization 0BB5        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0B59     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 05C7  
               __size_of_getLoad_AD 0071                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0B59  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
               __size_of_getTemp_AD 0027              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0B39                     setLights@lights 0057  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0075                 Exception_Main@count 005E  
                   setLights@status 0075                 Exception_Main@error 0062  
                          ??___wmul 0074    __end_of_getMain_All_LightsStatus 0B96  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005E    __end_of_getMain_All_Error_Status 0E63  
                       __pbssCOMMON 0076                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 0056  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0C0D  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0D97  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0C93  
                         _getPIR_AD 0409         __size_of_LED_Initialization 0008  
                   Exception_Main@i 0060                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0058                      Load_Main@error 005F  
            _setTemp_Initialization 0B29                       _PIR_Main$3108 0062  
                          ?___awdiv 0056               __size_of_my_MainTimer 001A  
                          ?___lwdiv 0056               __size_of_setSYSC_Main 0042  
          setLights_Trigger@command 0056     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0C93      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0800                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005B                      _setPIRLED_Main 0731  
                          _CDS_Main 0DF1                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0B39                   interrupt_function 0004  
                        ?_getCDS_AD 0056                      ___wmul@product 0074  
                          _LED_Main 0B2A                           _setLights 0EE5  
                         clear_ram0 0B85    __end_of_setLights_Initialization 0B66  
                      _my_MainTimer 0CDC                          ?_getPIR_AD 005E  
                      _setSYSC_Main 0EA3                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                            _PIR_Main 0026  
                      ??_getLoad_AD 0056                            _TMR1_ISR 0C67  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0B53  
                          _TMR1_Set 0BD1                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0056                            _WDT_Main 0C1E  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 0056  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 0086  
                       ??_Load_Main 005D              __end_of_setPIRLED_Main 07A2  
    getMain_All_Error_Status@status 005B                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0B48                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0731                  __end_of_getLoad_OK 0B7D  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 0075                  __end_of_getTemp_AD 0D97  
            _setSYSC_Initialization 0B44                   getLoad_AD@channel 0058  
                 _DetectSYSC_Signal 0BB5                            _SwDetect 003A  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2327 0056  
     _getMain_All_Error_Status$2328 0058                 _Load_Initialization 0B2D  
                ?_DetectSYSC_Signal 0070                           setLED@led 0057  
             ?_getLight_Load_Status 0070                        _setTemp_Main 0541  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0B3C               _Lights_Initialization 0B40  
                 getTemp_AD@channel 0058                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 0056                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 005A  
                          __ptext10 0C1E                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0B39  
                          __ptext21 0B7D                            __ptext13 0541  
                          __ptext30 0BA0                            __ptext22 0BAA  
                          __ptext14 0B36                            __ptext31 0B53  
                          __ptext23 0BED                            __ptext15 0B29  
                          __ptext40 0BC3                            __ptext32 0B4D  
                          __ptext24 0BDF                            __ptext16 0B33  
                          __ptext41 0C93                            __ptext33 0D4B  
                          __ptext25 0BD1                            __ptext17 0EA3  
                          __ptext50 0B6D                            __ptext42 0B75  
                          __ptext34 0E63                            __ptext26 0CC2  
                          __ptext18 0B30                            __ptext51 0C41  
                          __ptext43 0B8D                            __ptext35 0B2D  
                          __ptext27 0B48                            __ptext19 0B44  
                          __ptext60 0BB5                            __ptext52 064A  
                          __ptext44 05C7                            __ptext36 0C7D  
                          __ptext28 0B66                            __ptext61 0DF1  
                          __ptext53 0CF6                            __ptext45 07A2  
                          __ptext37 0D2D                            __ptext29 0222  
                          __ptext62 0B3C                            __ptext54 0F35  
                          __ptext46 0B40                            __ptext38 0DC1  
                          __ptext63 0CAA                            __ptext55 0C2F  
                          __ptext47 0B5F                            __ptext39 0EE5  
                          __ptext64 0C67                            __ptext56 0E25  
                          __ptext48 0B2A                            __ptext57 0C0D  
                          __ptext49 0731                            __ptext58 0BFC  
                          __ptext59 0B96           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0B33             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0057                       setLED@command 0056  
         __end_of_DetectSYSC_Signal 0BC3                       __size_of_main 0066  
                       ??_getPIR_AD 005F                  _PIR_Initialization 0BAA  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 0065                            main@argv 0067  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 0060  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017                         ??_setLights 0056  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0BFC              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005B                         getLoad_AD@j 005A  
                       getLoad_AD@k 0059             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 0076               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 0056         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0B96                ??_getAll_Lights_Line 0076  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0C53          __end_of_LED_Initialization 0B75  
             __end_of_getCDS_Status 0B85      __end_of_setTemp_Initialization 0B2A  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0B4D  
                 getCDS_AD@channel1 005B                   getCDS_AD@channel2 0056  
 __end_of_getLights_Allow_Condition 0CAA                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0C7D  
